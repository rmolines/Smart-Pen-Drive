
WIFI-SOCKET-HOST-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009438  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409438  00409438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008ac  20400000  00409440  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000d5c  204008ac  00409cec  000208ac  2**2
                  ALLOC
  4 .stack        00002000  20401608  0040aa48  000208ac  2**0
                  ALLOC
  5 .heap         00000200  20403608  0040ca48  000208ac  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208ac  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208da  2**0
                  CONTENTS, READONLY
  8 .debug_info   000217e3  00000000  00000000  00020933  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004ce7  00000000  00000000  00042116  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010d6b  00000000  00000000  00046dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012f8  00000000  00000000  00057b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013c0  00000000  00000000  00058e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002858b  00000000  00000000  0005a220  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019c3b  00000000  00000000  000827ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00099427  00000000  00000000  0009c3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003d00  00000000  00000000  00135810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403608 	.word	0x20403608
  400004:	004048d9 	.word	0x004048d9
  400008:	004048d5 	.word	0x004048d5
  40000c:	004048d5 	.word	0x004048d5
  400010:	004048d5 	.word	0x004048d5
  400014:	004048d5 	.word	0x004048d5
  400018:	004048d5 	.word	0x004048d5
	...
  40002c:	004048d5 	.word	0x004048d5
  400030:	004048d5 	.word	0x004048d5
  400034:	00000000 	.word	0x00000000
  400038:	004048d5 	.word	0x004048d5
  40003c:	004048d5 	.word	0x004048d5
  400040:	004048d5 	.word	0x004048d5
  400044:	004048d5 	.word	0x004048d5
  400048:	004048d5 	.word	0x004048d5
  40004c:	004048d5 	.word	0x004048d5
  400050:	004048d5 	.word	0x004048d5
  400054:	004048d5 	.word	0x004048d5
  400058:	004048d5 	.word	0x004048d5
  40005c:	004048d5 	.word	0x004048d5
  400060:	004048d5 	.word	0x004048d5
  400064:	00000000 	.word	0x00000000
  400068:	004043c5 	.word	0x004043c5
  40006c:	004043d9 	.word	0x004043d9
  400070:	004043ed 	.word	0x004043ed
  400074:	004048d5 	.word	0x004048d5
  400078:	004048d5 	.word	0x004048d5
  40007c:	004048d5 	.word	0x004048d5
  400080:	00404401 	.word	0x00404401
  400084:	00404415 	.word	0x00404415
  400088:	004048d5 	.word	0x004048d5
  40008c:	004048d5 	.word	0x004048d5
  400090:	004048d5 	.word	0x004048d5
  400094:	004048d5 	.word	0x004048d5
  400098:	004048d5 	.word	0x004048d5
  40009c:	004048d5 	.word	0x004048d5
  4000a0:	004048d5 	.word	0x004048d5
  4000a4:	004048d5 	.word	0x004048d5
  4000a8:	004048d5 	.word	0x004048d5
  4000ac:	004048d5 	.word	0x004048d5
  4000b0:	004048d5 	.word	0x004048d5
  4000b4:	004048d5 	.word	0x004048d5
  4000b8:	004048d5 	.word	0x004048d5
  4000bc:	004048d5 	.word	0x004048d5
  4000c0:	004048d5 	.word	0x004048d5
  4000c4:	004048d5 	.word	0x004048d5
  4000c8:	004048d5 	.word	0x004048d5
  4000cc:	004048d5 	.word	0x004048d5
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004048d5 	.word	0x004048d5
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004048d5 	.word	0x004048d5
  4000e0:	004048d5 	.word	0x004048d5
  4000e4:	004048d5 	.word	0x004048d5
  4000e8:	004048d5 	.word	0x004048d5
  4000ec:	004048d5 	.word	0x004048d5
  4000f0:	004048d5 	.word	0x004048d5
  4000f4:	004048d5 	.word	0x004048d5
  4000f8:	004048d5 	.word	0x004048d5
  4000fc:	004048d5 	.word	0x004048d5
  400100:	004048d5 	.word	0x004048d5
  400104:	004048d5 	.word	0x004048d5
  400108:	004048d5 	.word	0x004048d5
  40010c:	004048d5 	.word	0x004048d5
  400110:	004048d5 	.word	0x004048d5
	...
  400120:	004048d5 	.word	0x004048d5
  400124:	004048d5 	.word	0x004048d5
  400128:	004048d5 	.word	0x004048d5
  40012c:	004048d5 	.word	0x004048d5
  400130:	004048d5 	.word	0x004048d5
  400134:	00000000 	.word	0x00000000
  400138:	004048d5 	.word	0x004048d5
  40013c:	004048d5 	.word	0x004048d5

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008ac 	.word	0x204008ac
  40015c:	00000000 	.word	0x00000000
  400160:	00409440 	.word	0x00409440

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008b0 	.word	0x204008b0
  400190:	00409440 	.word	0x00409440
  400194:	00409440 	.word	0x00409440
  400198:	00000000 	.word	0x00000000

0040019c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  40019c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40019e:	4b07      	ldr	r3, [pc, #28]	; (4001bc <sd_mmc_configure_slot+0x20>)
  4001a0:	6819      	ldr	r1, [r3, #0]
  4001a2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001a6:	3300      	adds	r3, #0
  4001a8:	bf18      	it	ne
  4001aa:	2301      	movne	r3, #1
  4001ac:	7c4a      	ldrb	r2, [r1, #17]
  4001ae:	6809      	ldr	r1, [r1, #0]
  4001b0:	4803      	ldr	r0, [pc, #12]	; (4001c0 <sd_mmc_configure_slot+0x24>)
  4001b2:	7800      	ldrb	r0, [r0, #0]
  4001b4:	4c03      	ldr	r4, [pc, #12]	; (4001c4 <sd_mmc_configure_slot+0x28>)
  4001b6:	47a0      	blx	r4
  4001b8:	bd10      	pop	{r4, pc}
  4001ba:	bf00      	nop
  4001bc:	204008cc 	.word	0x204008cc
  4001c0:	204008d0 	.word	0x204008d0
  4001c4:	00400d81 	.word	0x00400d81

004001c8 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  4001c8:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d154      	bne.n	400278 <sd_mmc_select_slot+0xb0>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001ce:	4b33      	ldr	r3, [pc, #204]	; (40029c <sd_mmc_select_slot+0xd4>)
  4001d0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001d2:	4b33      	ldr	r3, [pc, #204]	; (4002a0 <sd_mmc_select_slot+0xd8>)
  4001d4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001d8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  4001dc:	f002 021f 	and.w	r2, r2, #31
  4001e0:	2301      	movs	r3, #1
  4001e2:	fa03 f202 	lsl.w	r2, r3, r2
  4001e6:	420a      	tst	r2, r1
  4001e8:	d00e      	beq.n	400208 <sd_mmc_select_slot+0x40>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001ea:	4b2c      	ldr	r3, [pc, #176]	; (40029c <sd_mmc_select_slot+0xd4>)
  4001ec:	7b9b      	ldrb	r3, [r3, #14]
  4001ee:	2b01      	cmp	r3, #1
  4001f0:	d105      	bne.n	4001fe <sd_mmc_select_slot+0x36>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
  4001f2:	4b2c      	ldr	r3, [pc, #176]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  4001f4:	781b      	ldrb	r3, [r3, #0]
  4001f6:	b113      	cbz	r3, 4001fe <sd_mmc_select_slot+0x36>
		SysTick->CTRL = 0;
  4001f8:	2200      	movs	r2, #0
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  4001fc:	601a      	str	r2, [r3, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4001fe:	2204      	movs	r2, #4
  400200:	4b26      	ldr	r3, [pc, #152]	; (40029c <sd_mmc_select_slot+0xd4>)
  400202:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400204:	2002      	movs	r0, #2
  400206:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  400208:	4b24      	ldr	r3, [pc, #144]	; (40029c <sd_mmc_select_slot+0xd4>)
  40020a:	7b9b      	ldrb	r3, [r3, #14]
  40020c:	2b04      	cmp	r3, #4
  40020e:	d115      	bne.n	40023c <sd_mmc_select_slot+0x74>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400210:	2201      	movs	r2, #1
  400212:	4b22      	ldr	r3, [pc, #136]	; (40029c <sd_mmc_select_slot+0xd4>)
  400214:	739a      	strb	r2, [r3, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
  400216:	4b24      	ldr	r3, [pc, #144]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400218:	681b      	ldr	r3, [r3, #0]
  40021a:	b93b      	cbnz	r3, 40022c <sd_mmc_select_slot+0x64>
		sd_mmc_sam_systick_used = true;
  40021c:	4b21      	ldr	r3, [pc, #132]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  40021e:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400220:	4b21      	ldr	r3, [pc, #132]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400222:	4922      	ldr	r1, [pc, #136]	; (4002ac <sd_mmc_select_slot+0xe4>)
  400224:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400226:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400228:	2002      	movs	r0, #2
  40022a:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
  40022c:	2200      	movs	r2, #0
  40022e:	4b1d      	ldr	r3, [pc, #116]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  400230:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400232:	481f      	ldr	r0, [pc, #124]	; (4002b0 <sd_mmc_select_slot+0xe8>)
  400234:	4b1f      	ldr	r3, [pc, #124]	; (4002b4 <sd_mmc_select_slot+0xec>)
  400236:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400238:	2002      	movs	r0, #2
  40023a:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  40023c:	2b01      	cmp	r3, #1
  40023e:	d10b      	bne.n	400258 <sd_mmc_select_slot+0x90>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
  400240:	4b18      	ldr	r3, [pc, #96]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  400242:	781b      	ldrb	r3, [r3, #0]
  400244:	b1f3      	cbz	r3, 400284 <sd_mmc_select_slot+0xbc>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400246:	4b18      	ldr	r3, [pc, #96]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400248:	681b      	ldr	r3, [r3, #0]
  40024a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40024e:	d015      	beq.n	40027c <sd_mmc_select_slot+0xb4>
		SysTick->CTRL = 0;
  400250:	2200      	movs	r2, #0
  400252:	4b15      	ldr	r3, [pc, #84]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400254:	601a      	str	r2, [r3, #0]
  400256:	e015      	b.n	400284 <sd_mmc_select_slot+0xbc>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400258:	2b03      	cmp	r3, #3
  40025a:	d011      	beq.n	400280 <sd_mmc_select_slot+0xb8>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  40025c:	2200      	movs	r2, #0
  40025e:	4b16      	ldr	r3, [pc, #88]	; (4002b8 <sd_mmc_select_slot+0xf0>)
  400260:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  400262:	4c0e      	ldr	r4, [pc, #56]	; (40029c <sd_mmc_select_slot+0xd4>)
  400264:	4b15      	ldr	r3, [pc, #84]	; (4002bc <sd_mmc_select_slot+0xf4>)
  400266:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400268:	4b15      	ldr	r3, [pc, #84]	; (4002c0 <sd_mmc_select_slot+0xf8>)
  40026a:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  40026c:	7ba0      	ldrb	r0, [r4, #14]
  40026e:	2802      	cmp	r0, #2
  400270:	bf14      	ite	ne
  400272:	2000      	movne	r0, #0
  400274:	2001      	moveq	r0, #1
  400276:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
  400278:	2004      	movs	r0, #4
  40027a:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  40027c:	2002      	movs	r0, #2
  40027e:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
  400280:	2003      	movs	r0, #3
  400282:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <sd_mmc_select_slot+0xd4>)
  400286:	2202      	movs	r2, #2
  400288:	739a      	strb	r2, [r3, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40028a:	4a0e      	ldr	r2, [pc, #56]	; (4002c4 <sd_mmc_select_slot+0xfc>)
  40028c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40028e:	2201      	movs	r2, #1
  400290:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400292:	2200      	movs	r2, #0
  400294:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  400298:	e7e0      	b.n	40025c <sd_mmc_select_slot+0x94>
  40029a:	bf00      	nop
  40029c:	2040000c 	.word	0x2040000c
  4002a0:	00200707 	.word	0x00200707
  4002a4:	204008c8 	.word	0x204008c8
  4002a8:	e000e010 	.word	0xe000e010
  4002ac:	023c3460 	.word	0x023c3460
  4002b0:	0303af6b 	.word	0x0303af6b
  4002b4:	20400001 	.word	0x20400001
  4002b8:	204008d0 	.word	0x204008d0
  4002bc:	204008cc 	.word	0x204008cc
  4002c0:	0040019d 	.word	0x0040019d
  4002c4:	00061a80 	.word	0x00061a80

004002c8 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
  4002c8:	b538      	push	{r3, r4, r5, lr}
  4002ca:	9c04      	ldr	r4, [sp, #16]
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002cc:	0252      	lsls	r2, r2, #9
  4002ce:	ea42 63c3 	orr.w	r3, r2, r3, lsl #27
  4002d2:	ea43 7101 	orr.w	r1, r3, r1, lsl #28
  4002d6:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
  4002da:	7821      	ldrb	r1, [r4, #0]
  4002dc:	4301      	orrs	r1, r0
  4002de:	f241 3034 	movw	r0, #4916	; 0x1334
  4002e2:	4b04      	ldr	r3, [pc, #16]	; (4002f4 <sdio_cmd52+0x2c>)
  4002e4:	4798      	blx	r3
  4002e6:	4605      	mov	r5, r0
  4002e8:	b110      	cbz	r0, 4002f0 <sdio_cmd52+0x28>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
  4002ea:	4b03      	ldr	r3, [pc, #12]	; (4002f8 <sdio_cmd52+0x30>)
  4002ec:	4798      	blx	r3
  4002ee:	7020      	strb	r0, [r4, #0]
	return true;
}
  4002f0:	4628      	mov	r0, r5
  4002f2:	bd38      	pop	{r3, r4, r5, pc}
  4002f4:	00400e4d 	.word	0x00400e4d
  4002f8:	00400e71 	.word	0x00400e71

004002fc <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  4002fc:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  4002fe:	4b08      	ldr	r3, [pc, #32]	; (400320 <sd_mmc_cmd9_mci+0x24>)
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	8999      	ldrh	r1, [r3, #12]
  400304:	0409      	lsls	r1, r1, #16
  400306:	f641 3009 	movw	r0, #6921	; 0x1b09
  40030a:	4b06      	ldr	r3, [pc, #24]	; (400324 <sd_mmc_cmd9_mci+0x28>)
  40030c:	4798      	blx	r3
  40030e:	4604      	mov	r4, r0
  400310:	b120      	cbz	r0, 40031c <sd_mmc_cmd9_mci+0x20>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
  400312:	4b03      	ldr	r3, [pc, #12]	; (400320 <sd_mmc_cmd9_mci+0x24>)
  400314:	6818      	ldr	r0, [r3, #0]
  400316:	3012      	adds	r0, #18
  400318:	4b03      	ldr	r3, [pc, #12]	; (400328 <sd_mmc_cmd9_mci+0x2c>)
  40031a:	4798      	blx	r3
	return true;
}
  40031c:	4620      	mov	r0, r4
  40031e:	bd10      	pop	{r4, pc}
  400320:	204008cc 	.word	0x204008cc
  400324:	00400e4d 	.word	0x00400e4d
  400328:	00400e79 	.word	0x00400e79

0040032c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  40032c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40032e:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_deselect_slot+0x10>)
  400330:	781b      	ldrb	r3, [r3, #0]
  400332:	b913      	cbnz	r3, 40033a <sd_mmc_deselect_slot+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
  400334:	2000      	movs	r0, #0
  400336:	4b02      	ldr	r3, [pc, #8]	; (400340 <sd_mmc_deselect_slot+0x14>)
  400338:	4798      	blx	r3
  40033a:	bd08      	pop	{r3, pc}
  40033c:	204008d0 	.word	0x204008d0
  400340:	00400e25 	.word	0x00400e25

00400344 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  400344:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  400346:	2010      	movs	r0, #16
  400348:	4b05      	ldr	r3, [pc, #20]	; (400360 <sd_mmc_init+0x1c>)
  40034a:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40034c:	2204      	movs	r2, #4
  40034e:	4b05      	ldr	r3, [pc, #20]	; (400364 <sd_mmc_init+0x20>)
  400350:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400352:	22ff      	movs	r2, #255	; 0xff
  400354:	4b04      	ldr	r3, [pc, #16]	; (400368 <sd_mmc_init+0x24>)
  400356:	701a      	strb	r2, [r3, #0]
	driver_init();
  400358:	4b04      	ldr	r3, [pc, #16]	; (40036c <sd_mmc_init+0x28>)
  40035a:	4798      	blx	r3
  40035c:	bd08      	pop	{r3, pc}
  40035e:	bf00      	nop
  400360:	004045d5 	.word	0x004045d5
  400364:	2040000c 	.word	0x2040000c
  400368:	204008d0 	.word	0x204008d0
  40036c:	00400d45 	.word	0x00400d45

00400370 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400374:	b094      	sub	sp, #80	; 0x50
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400376:	4ba8      	ldr	r3, [pc, #672]	; (400618 <sd_mmc_check+0x2a8>)
  400378:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  40037a:	2801      	cmp	r0, #1
  40037c:	d005      	beq.n	40038a <sd_mmc_check+0x1a>
  40037e:	4604      	mov	r4, r0
		sd_mmc_deselect_slot();
  400380:	4ba6      	ldr	r3, [pc, #664]	; (40061c <sd_mmc_check+0x2ac>)
  400382:	4798      	blx	r3
		return sd_mmc_err;
  400384:	4620      	mov	r0, r4
  400386:	f000 bc14 	b.w	400bb2 <sd_mmc_check+0x842>
 */
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;
#ifdef SDIO_SUPPORT_ENABLE
	uint8_t data = 0x08;
  40038a:	ad14      	add	r5, sp, #80	; 0x50
  40038c:	2308      	movs	r3, #8
  40038e:	f805 3d45 	strb.w	r3, [r5, #-69]!
#endif

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  400392:	4ba3      	ldr	r3, [pc, #652]	; (400620 <sd_mmc_check+0x2b0>)
  400394:	681b      	ldr	r3, [r3, #0]
  400396:	2601      	movs	r6, #1
  400398:	73de      	strb	r6, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  40039a:	2400      	movs	r4, #0
  40039c:	741c      	strb	r4, [r3, #16]
	sd_mmc_card->rca = 0;
  40039e:	819c      	strh	r4, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  4003a0:	4ba0      	ldr	r3, [pc, #640]	; (400624 <sd_mmc_check+0x2b4>)
  4003a2:	4798      	blx	r3

#ifdef SDIO_SUPPORT_ENABLE
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003a4:	9500      	str	r5, [sp, #0]
  4003a6:	4623      	mov	r3, r4
  4003a8:	2206      	movs	r2, #6
  4003aa:	4621      	mov	r1, r4
  4003ac:	4630      	mov	r0, r6
  4003ae:	4d9e      	ldr	r5, [pc, #632]	; (400628 <sd_mmc_check+0x2b8>)
  4003b0:	47a8      	blx	r5
#endif

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003b2:	4621      	mov	r1, r4
  4003b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003b8:	4b9c      	ldr	r3, [pc, #624]	; (40062c <sd_mmc_check+0x2bc>)
  4003ba:	4798      	blx	r3
  4003bc:	2800      	cmp	r0, #0
  4003be:	f000 83ab 	beq.w	400b18 <sd_mmc_check+0x7a8>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003c2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003c6:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ca:	4b98      	ldr	r3, [pc, #608]	; (40062c <sd_mmc_check+0x2bc>)
  4003cc:	4798      	blx	r3
  4003ce:	2800      	cmp	r0, #0
  4003d0:	f000 83aa 	beq.w	400b28 <sd_mmc_check+0x7b8>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
  4003d4:	4b96      	ldr	r3, [pc, #600]	; (400630 <sd_mmc_check+0x2c0>)
  4003d6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  4003d8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4003dc:	f000 83a7 	beq.w	400b2e <sd_mmc_check+0x7be>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  4003e0:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4003e4:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  4003e8:	f040 8396 	bne.w	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  4003ec:	46b0      	mov	r8, r6
  4003ee:	e3a0      	b.n	400b32 <sd_mmc_check+0x7c2>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
  4003f0:	4b8f      	ldr	r3, [pc, #572]	; (400630 <sd_mmc_check+0x2c0>)
  4003f2:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  4003f4:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  4003f8:	f000 83a3 	beq.w	400b42 <sd_mmc_check+0x7d2>
  4003fc:	f241 3489 	movw	r4, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400400:	f244 5605 	movw	r6, #17669	; 0x4505
  400404:	4d89      	ldr	r5, [pc, #548]	; (40062c <sd_mmc_check+0x2bc>)
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400406:	4f8a      	ldr	r7, [pc, #552]	; (400630 <sd_mmc_check+0x2c0>)
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400408:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  40040c:	4630      	mov	r0, r6
  40040e:	47a8      	blx	r5
  400410:	2800      	cmp	r0, #0
  400412:	f000 8381 	beq.w	400b18 <sd_mmc_check+0x7a8>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400416:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400418:	2800      	cmp	r0, #0
  40041a:	db02      	blt.n	400422 <sd_mmc_check+0xb2>
			break;
		}
		if (cmd5_retry-- == 0) {
  40041c:	3c01      	subs	r4, #1
  40041e:	d1f3      	bne.n	400408 <sd_mmc_check+0x98>
  400420:	e37a      	b.n	400b18 <sd_mmc_check+0x7a8>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
  400422:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400426:	d004      	beq.n	400432 <sd_mmc_check+0xc2>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  400428:	4b7d      	ldr	r3, [pc, #500]	; (400620 <sd_mmc_check+0x2b0>)
  40042a:	681b      	ldr	r3, [r3, #0]
  40042c:	2205      	movs	r2, #5
  40042e:	73da      	strb	r2, [r3, #15]
  400430:	e38e      	b.n	400b50 <sd_mmc_check+0x7e0>
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400432:	4b7b      	ldr	r3, [pc, #492]	; (400620 <sd_mmc_check+0x2b0>)
  400434:	681b      	ldr	r3, [r3, #0]
  400436:	2204      	movs	r2, #4
  400438:	73da      	strb	r2, [r3, #15]
  40043a:	e161      	b.n	400700 <sd_mmc_check+0x390>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40043c:	4641      	mov	r1, r8
  40043e:	f241 1037 	movw	r0, #4407	; 0x1137
  400442:	47a8      	blx	r5
  400444:	2800      	cmp	r0, #0
  400446:	f000 8390 	beq.w	400b6a <sd_mmc_check+0x7fa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  40044a:	4631      	mov	r1, r6
  40044c:	f244 5029 	movw	r0, #17705	; 0x4529
  400450:	47a8      	blx	r5
  400452:	2800      	cmp	r0, #0
  400454:	f000 8389 	beq.w	400b6a <sd_mmc_check+0x7fa>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400458:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  40045a:	2800      	cmp	r0, #0
  40045c:	da0a      	bge.n	400474 <sd_mmc_check+0x104>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  40045e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400462:	f000 838e 	beq.w	400b82 <sd_mmc_check+0x812>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400466:	4b6e      	ldr	r3, [pc, #440]	; (400620 <sd_mmc_check+0x2b0>)
  400468:	681a      	ldr	r2, [r3, #0]
  40046a:	7bd3      	ldrb	r3, [r2, #15]
  40046c:	f043 0308 	orr.w	r3, r3, #8
  400470:	73d3      	strb	r3, [r2, #15]
  400472:	e386      	b.n	400b82 <sd_mmc_check+0x812>
			}
			break;
		}
		if (retry-- == 0) {
  400474:	3c01      	subs	r4, #1
  400476:	d1e1      	bne.n	40043c <sd_mmc_check+0xcc>
  400478:	e377      	b.n	400b6a <sd_mmc_check+0x7fa>
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40047a:	f241 0469 	movw	r4, #4201	; 0x1069
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  40047e:	4e6d      	ldr	r6, [pc, #436]	; (400634 <sd_mmc_check+0x2c4>)
  400480:	4d6a      	ldr	r5, [pc, #424]	; (40062c <sd_mmc_check+0x2bc>)
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400482:	4f6b      	ldr	r7, [pc, #428]	; (400630 <sd_mmc_check+0x2c0>)
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400484:	4631      	mov	r1, r6
  400486:	f244 5001 	movw	r0, #17665	; 0x4501
  40048a:	47a8      	blx	r5
  40048c:	2800      	cmp	r0, #0
  40048e:	f000 8343 	beq.w	400b18 <sd_mmc_check+0x7a8>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400492:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  400494:	2800      	cmp	r0, #0
  400496:	da0c      	bge.n	4004b2 <sd_mmc_check+0x142>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  400498:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40049c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4004a0:	f040 8377 	bne.w	400b92 <sd_mmc_check+0x822>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  4004a4:	4b5e      	ldr	r3, [pc, #376]	; (400620 <sd_mmc_check+0x2b0>)
  4004a6:	681a      	ldr	r2, [r3, #0]
  4004a8:	7bd3      	ldrb	r3, [r2, #15]
  4004aa:	f043 0308 	orr.w	r3, r3, #8
  4004ae:	73d3      	strb	r3, [r2, #15]
  4004b0:	e36f      	b.n	400b92 <sd_mmc_check+0x822>
			}
			break;
		}
		if (retry-- == 0) {
  4004b2:	3c01      	subs	r4, #1
  4004b4:	d1e6      	bne.n	400484 <sd_mmc_check+0x114>
  4004b6:	e32f      	b.n	400b18 <sd_mmc_check+0x7a8>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  4004b8:	4b59      	ldr	r3, [pc, #356]	; (400620 <sd_mmc_check+0x2b0>)
  4004ba:	681b      	ldr	r3, [r3, #0]
  4004bc:	2201      	movs	r2, #1
  4004be:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4004c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004c4:	f241 1003 	movw	r0, #4355	; 0x1103
  4004c8:	4b58      	ldr	r3, [pc, #352]	; (40062c <sd_mmc_check+0x2bc>)
  4004ca:	4798      	blx	r3
  4004cc:	2800      	cmp	r0, #0
  4004ce:	f000 8323 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  4004d2:	4b59      	ldr	r3, [pc, #356]	; (400638 <sd_mmc_check+0x2c8>)
  4004d4:	4798      	blx	r3
  4004d6:	2800      	cmp	r0, #0
  4004d8:	f000 831e 	beq.w	400b18 <sd_mmc_check+0x7a8>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4004dc:	4b50      	ldr	r3, [pc, #320]	; (400620 <sd_mmc_check+0x2b0>)
  4004de:	6819      	ldr	r1, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004e0:	7c8b      	ldrb	r3, [r1, #18]
  4004e2:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4004e6:	3b01      	subs	r3, #1
  4004e8:	2b03      	cmp	r3, #3
  4004ea:	d803      	bhi.n	4004f4 <sd_mmc_check+0x184>
  4004ec:	e8df f003 	tbb	[pc, r3]
  4004f0:	0e0b0805 	.word	0x0e0b0805
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4004f4:	2312      	movs	r3, #18
  4004f6:	740b      	strb	r3, [r1, #16]
  4004f8:	e00a      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4004fa:	2314      	movs	r3, #20
  4004fc:	740b      	strb	r3, [r1, #16]
  4004fe:	e007      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400500:	2322      	movs	r3, #34	; 0x22
  400502:	740b      	strb	r3, [r1, #16]
  400504:	e004      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  400506:	2330      	movs	r3, #48	; 0x30
  400508:	740b      	strb	r3, [r1, #16]
  40050a:	e001      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  40050c:	2340      	movs	r3, #64	; 0x40
  40050e:	740b      	strb	r3, [r1, #16]
  400510:	7d4b      	ldrb	r3, [r1, #21]
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400512:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400516:	f003 0307 	and.w	r3, r3, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40051a:	4a48      	ldr	r2, [pc, #288]	; (40063c <sd_mmc_check+0x2cc>)
  40051c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400524:	fb03 f302 	mul.w	r3, r3, r2
  400528:	4a45      	ldr	r2, [pc, #276]	; (400640 <sd_mmc_check+0x2d0>)
  40052a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  40052e:	fb03 f302 	mul.w	r3, r3, r2
  400532:	600b      	str	r3, [r1, #0]
  400534:	7e88      	ldrb	r0, [r1, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400536:	7e4b      	ldrb	r3, [r1, #25]
  400538:	7e0a      	ldrb	r2, [r1, #24]
  40053a:	0292      	lsls	r2, r2, #10
  40053c:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  400540:	ea43 13a0 	orr.w	r3, r3, r0, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  400544:	f3c3 030b 	ubfx	r3, r3, #0, #12
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400548:	f640 72ff 	movw	r2, #4095	; 0xfff
  40054c:	4293      	cmp	r3, r2
  40054e:	d00f      	beq.n	400570 <sd_mmc_check+0x200>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400550:	7f08      	ldrb	r0, [r1, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400552:	7eca      	ldrb	r2, [r1, #27]
  400554:	0052      	lsls	r2, r2, #1
  400556:	ea42 12e0 	orr.w	r2, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  40055a:	3301      	adds	r3, #1
  40055c:	f002 0207 	and.w	r2, r2, #7
  400560:	3202      	adds	r2, #2
  400562:	4093      	lsls	r3, r2
  400564:	7dca      	ldrb	r2, [r1, #23]
  400566:	f002 020f 	and.w	r2, r2, #15
  40056a:	4093      	lsls	r3, r2
  40056c:	0a9b      	lsrs	r3, r3, #10
  40056e:	604b      	str	r3, [r1, #4]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400570:	8989      	ldrh	r1, [r1, #12]
  400572:	0409      	lsls	r1, r1, #16
  400574:	f243 1007 	movw	r0, #12551	; 0x3107
  400578:	4b2c      	ldr	r3, [pc, #176]	; (40062c <sd_mmc_check+0x2bc>)
  40057a:	4798      	blx	r3
  40057c:	2800      	cmp	r0, #0
  40057e:	f000 82cb 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400582:	4b27      	ldr	r3, [pc, #156]	; (400620 <sd_mmc_check+0x2b0>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	7c1b      	ldrb	r3, [r3, #16]
  400588:	2b3f      	cmp	r3, #63	; 0x3f
  40058a:	f240 809d 	bls.w	4006c8 <sd_mmc_check+0x358>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  40058e:	2100      	movs	r1, #0
  400590:	9100      	str	r1, [sp, #0]
  400592:	2301      	movs	r3, #1
  400594:	f44f 7200 	mov.w	r2, #512	; 0x200
  400598:	482a      	ldr	r0, [pc, #168]	; (400644 <sd_mmc_check+0x2d4>)
  40059a:	4c2b      	ldr	r4, [pc, #172]	; (400648 <sd_mmc_check+0x2d8>)
  40059c:	47a0      	blx	r4
  40059e:	2800      	cmp	r0, #0
  4005a0:	f000 82ba 	beq.w	400b18 <sd_mmc_check+0x7a8>
  4005a4:	2400      	movs	r4, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
  4005a6:	4d29      	ldr	r5, [pc, #164]	; (40064c <sd_mmc_check+0x2dc>)
  4005a8:	a803      	add	r0, sp, #12
  4005aa:	47a8      	blx	r5
  4005ac:	2800      	cmp	r0, #0
  4005ae:	f000 82b3 	beq.w	400b18 <sd_mmc_check+0x7a8>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4005b2:	3401      	adds	r4, #1
  4005b4:	b2a4      	uxth	r4, r4
  4005b6:	2c32      	cmp	r4, #50	; 0x32
  4005b8:	d1f6      	bne.n	4005a8 <sd_mmc_check+0x238>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  4005ba:	9b03      	ldr	r3, [sp, #12]
  4005bc:	f003 0302 	and.w	r3, r3, #2
  4005c0:	b2dd      	uxtb	r5, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4005c2:	4b17      	ldr	r3, [pc, #92]	; (400620 <sd_mmc_check+0x2b0>)
  4005c4:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005c6:	7e91      	ldrb	r1, [r2, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005c8:	7e53      	ldrb	r3, [r2, #25]
  4005ca:	7e12      	ldrb	r2, [r2, #24]
  4005cc:	0292      	lsls	r2, r2, #10
  4005ce:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  4005d2:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
  4005d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005da:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005de:	4293      	cmp	r3, r2
  4005e0:	d10e      	bne.n	400600 <sd_mmc_check+0x290>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  4005e2:	4e1a      	ldr	r6, [pc, #104]	; (40064c <sd_mmc_check+0x2dc>)
  4005e4:	a804      	add	r0, sp, #16
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f000 8295 	beq.w	400b18 <sd_mmc_check+0x7a8>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4005ee:	3401      	adds	r4, #1
  4005f0:	b2a4      	uxth	r4, r4
  4005f2:	2c35      	cmp	r4, #53	; 0x35
  4005f4:	d9f6      	bls.n	4005e4 <sd_mmc_check+0x274>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  4005f6:	4b0a      	ldr	r3, [pc, #40]	; (400620 <sd_mmc_check+0x2b0>)
  4005f8:	681a      	ldr	r2, [r3, #0]
  4005fa:	9b04      	ldr	r3, [sp, #16]
  4005fc:	085b      	lsrs	r3, r3, #1
  4005fe:	6053      	str	r3, [r2, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
  400600:	4e12      	ldr	r6, [pc, #72]	; (40064c <sd_mmc_check+0x2dc>)
  400602:	e006      	b.n	400612 <sd_mmc_check+0x2a2>
  400604:	a804      	add	r0, sp, #16
  400606:	47b0      	blx	r6
  400608:	2800      	cmp	r0, #0
  40060a:	f000 8285 	beq.w	400b18 <sd_mmc_check+0x7a8>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40060e:	3401      	adds	r4, #1
  400610:	b2a4      	uxth	r4, r4
  400612:	2c7f      	cmp	r4, #127	; 0x7f
  400614:	d9f6      	bls.n	400604 <sd_mmc_check+0x294>
  400616:	e2c4      	b.n	400ba2 <sd_mmc_check+0x832>
  400618:	004001c9 	.word	0x004001c9
  40061c:	0040032d 	.word	0x0040032d
  400620:	204008cc 	.word	0x204008cc
  400624:	00400e29 	.word	0x00400e29
  400628:	004002c9 	.word	0x004002c9
  40062c:	00400e4d 	.word	0x00400e4d
  400630:	00400e71 	.word	0x00400e71
  400634:	401f8000 	.word	0x401f8000
  400638:	004002fd 	.word	0x004002fd
  40063c:	00408190 	.word	0x00408190
  400640:	004081ac 	.word	0x004081ac
  400644:	00081108 	.word	0x00081108
  400648:	00400ea9 	.word	0x00400ea9
  40064c:	00400f71 	.word	0x00400f71
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  400650:	4ba4      	ldr	r3, [pc, #656]	; (4008e4 <sd_mmc_check+0x574>)
  400652:	7818      	ldrb	r0, [r3, #0]
  400654:	4ba4      	ldr	r3, [pc, #656]	; (4008e8 <sd_mmc_check+0x578>)
  400656:	4798      	blx	r3
  400658:	4604      	mov	r4, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
  40065a:	2804      	cmp	r0, #4
  40065c:	d005      	beq.n	40066a <sd_mmc_check+0x2fa>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40065e:	49a3      	ldr	r1, [pc, #652]	; (4008ec <sd_mmc_check+0x57c>)
  400660:	4ba3      	ldr	r3, [pc, #652]	; (4008f0 <sd_mmc_check+0x580>)
  400662:	2808      	cmp	r0, #8
  400664:	bf08      	it	eq
  400666:	4619      	moveq	r1, r3
  400668:	e000      	b.n	40066c <sd_mmc_check+0x2fc>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40066a:	49a2      	ldr	r1, [pc, #648]	; (4008f4 <sd_mmc_check+0x584>)
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40066c:	f243 1006 	movw	r0, #12550	; 0x3106
  400670:	4ba1      	ldr	r3, [pc, #644]	; (4008f8 <sd_mmc_check+0x588>)
  400672:	4798      	blx	r3
  400674:	2800      	cmp	r0, #0
  400676:	f000 824f 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40067a:	4ba0      	ldr	r3, [pc, #640]	; (4008fc <sd_mmc_check+0x58c>)
  40067c:	4798      	blx	r3
  40067e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400682:	f040 8249 	bne.w	400b18 <sd_mmc_check+0x7a8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
  400686:	4b9e      	ldr	r3, [pc, #632]	; (400900 <sd_mmc_check+0x590>)
  400688:	681b      	ldr	r3, [r3, #0]
  40068a:	745c      	strb	r4, [r3, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  40068c:	4b9d      	ldr	r3, [pc, #628]	; (400904 <sd_mmc_check+0x594>)
  40068e:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400690:	4b9d      	ldr	r3, [pc, #628]	; (400908 <sd_mmc_check+0x598>)
  400692:	4798      	blx	r3
  400694:	b305      	cbz	r5, 4006d8 <sd_mmc_check+0x368>
  400696:	b1f8      	cbz	r0, 4006d8 <sd_mmc_check+0x368>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400698:	499c      	ldr	r1, [pc, #624]	; (40090c <sd_mmc_check+0x59c>)
  40069a:	f243 1006 	movw	r0, #12550	; 0x3106
  40069e:	4b96      	ldr	r3, [pc, #600]	; (4008f8 <sd_mmc_check+0x588>)
  4006a0:	4798      	blx	r3
  4006a2:	2800      	cmp	r0, #0
  4006a4:	f000 8238 	beq.w	400b18 <sd_mmc_check+0x7a8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4006a8:	4b94      	ldr	r3, [pc, #592]	; (4008fc <sd_mmc_check+0x58c>)
  4006aa:	4798      	blx	r3
  4006ac:	f010 0f80 	tst.w	r0, #128	; 0x80
  4006b0:	f040 8232 	bne.w	400b18 <sd_mmc_check+0x7a8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
  4006b4:	4b92      	ldr	r3, [pc, #584]	; (400900 <sd_mmc_check+0x590>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	2201      	movs	r2, #1
  4006ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  4006be:	4a94      	ldr	r2, [pc, #592]	; (400910 <sd_mmc_check+0x5a0>)
  4006c0:	601a      	str	r2, [r3, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  4006c2:	4b90      	ldr	r3, [pc, #576]	; (400904 <sd_mmc_check+0x594>)
  4006c4:	4798      	blx	r3
  4006c6:	e007      	b.n	4006d8 <sd_mmc_check+0x368>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  4006c8:	4b8e      	ldr	r3, [pc, #568]	; (400904 <sd_mmc_check+0x594>)
  4006ca:	4798      	blx	r3
  4006cc:	e004      	b.n	4006d8 <sd_mmc_check+0x368>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4006ce:	4639      	mov	r1, r7
  4006d0:	4630      	mov	r0, r6
  4006d2:	47a8      	blx	r5
  4006d4:	b138      	cbz	r0, 4006e6 <sd_mmc_check+0x376>
  4006d6:	e217      	b.n	400b08 <sd_mmc_check+0x798>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006d8:	240a      	movs	r4, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4006da:	f44f 7700 	mov.w	r7, #512	; 0x200
  4006de:	f241 1610 	movw	r6, #4368	; 0x1110
  4006e2:	4d85      	ldr	r5, [pc, #532]	; (4008f8 <sd_mmc_check+0x588>)
  4006e4:	e7f3      	b.n	4006ce <sd_mmc_check+0x35e>
  4006e6:	3c01      	subs	r4, #1
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  4006e8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4006ec:	d1ef      	bne.n	4006ce <sd_mmc_check+0x35e>
  4006ee:	e213      	b.n	400b18 <sd_mmc_check+0x7a8>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4006f0:	2100      	movs	r1, #0
  4006f2:	f645 3002 	movw	r0, #23298	; 0x5b02
  4006f6:	4b80      	ldr	r3, [pc, #512]	; (4008f8 <sd_mmc_check+0x588>)
  4006f8:	4798      	blx	r3
  4006fa:	2800      	cmp	r0, #0
  4006fc:	f000 820c 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400700:	2100      	movs	r1, #0
  400702:	f245 1003 	movw	r0, #20739	; 0x5103
  400706:	4b7c      	ldr	r3, [pc, #496]	; (4008f8 <sd_mmc_check+0x588>)
  400708:	4798      	blx	r3
  40070a:	2800      	cmp	r0, #0
  40070c:	f000 8204 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400710:	4c7b      	ldr	r4, [pc, #492]	; (400900 <sd_mmc_check+0x590>)
  400712:	6825      	ldr	r5, [r4, #0]
  400714:	4b79      	ldr	r3, [pc, #484]	; (4008fc <sd_mmc_check+0x58c>)
  400716:	4798      	blx	r3
  400718:	0c00      	lsrs	r0, r0, #16
  40071a:	81a8      	strh	r0, [r5, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40071c:	6823      	ldr	r3, [r4, #0]
  40071e:	7bdb      	ldrb	r3, [r3, #15]
  400720:	f013 0f01 	tst.w	r3, #1
  400724:	d041      	beq.n	4007aa <sd_mmc_check+0x43a>
		if (!sd_mmc_cmd9_mci()) {
  400726:	4b7b      	ldr	r3, [pc, #492]	; (400914 <sd_mmc_check+0x5a4>)
  400728:	4798      	blx	r3
  40072a:	2800      	cmp	r0, #0
  40072c:	f000 81f4 	beq.w	400b18 <sd_mmc_check+0x7a8>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400730:	6823      	ldr	r3, [r4, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400732:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400734:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400738:	f002 0207 	and.w	r2, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40073c:	4976      	ldr	r1, [pc, #472]	; (400918 <sd_mmc_check+0x5a8>)
  40073e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400746:	fb02 f201 	mul.w	r2, r2, r1
  40074a:	4974      	ldr	r1, [pc, #464]	; (40091c <sd_mmc_check+0x5ac>)
  40074c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400750:	fb02 f201 	mul.w	r2, r2, r1
  400754:	601a      	str	r2, [r3, #0]
  400756:	7c9a      	ldrb	r2, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400758:	0992      	lsrs	r2, r2, #6
  40075a:	d00c      	beq.n	400776 <sd_mmc_check+0x406>
  40075c:	7eda      	ldrb	r2, [r3, #27]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40075e:	7e98      	ldrb	r0, [r3, #26]
  400760:	7e59      	ldrb	r1, [r3, #25]
  400762:	0409      	lsls	r1, r1, #16
  400764:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  400768:	430a      	orrs	r2, r1
		sd_mmc_card->capacity =
  40076a:	f3c2 0215 	ubfx	r2, r2, #0, #22
  40076e:	3201      	adds	r2, #1
  400770:	0252      	lsls	r2, r2, #9
  400772:	605a      	str	r2, [r3, #4]
  400774:	e019      	b.n	4007aa <sd_mmc_check+0x43a>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400776:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400778:	7e5a      	ldrb	r2, [r3, #25]
  40077a:	7e19      	ldrb	r1, [r3, #24]
  40077c:	0289      	lsls	r1, r1, #10
  40077e:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
  400782:	ea42 12a0 	orr.w	r2, r2, r0, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400786:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400788:	7ed9      	ldrb	r1, [r3, #27]
  40078a:	0049      	lsls	r1, r1, #1
  40078c:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400790:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400794:	3201      	adds	r2, #1
  400796:	f001 0107 	and.w	r1, r1, #7
  40079a:	3102      	adds	r1, #2
  40079c:	408a      	lsls	r2, r1
  40079e:	7dd9      	ldrb	r1, [r3, #23]
  4007a0:	f001 010f 	and.w	r1, r1, #15
  4007a4:	408a      	lsls	r2, r1
  4007a6:	0a92      	lsrs	r2, r2, #10
  4007a8:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4007aa:	4b55      	ldr	r3, [pc, #340]	; (400900 <sd_mmc_check+0x590>)
  4007ac:	681b      	ldr	r3, [r3, #0]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4007ae:	8999      	ldrh	r1, [r3, #12]
  4007b0:	0409      	lsls	r1, r1, #16
  4007b2:	f243 1007 	movw	r0, #12551	; 0x3107
  4007b6:	4b50      	ldr	r3, [pc, #320]	; (4008f8 <sd_mmc_check+0x588>)
  4007b8:	4798      	blx	r3
  4007ba:	2800      	cmp	r0, #0
  4007bc:	f000 81ac 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4007c0:	4b4f      	ldr	r3, [pc, #316]	; (400900 <sd_mmc_check+0x590>)
  4007c2:	681b      	ldr	r3, [r3, #0]
  4007c4:	7bda      	ldrb	r2, [r3, #15]
  4007c6:	f012 0f01 	tst.w	r2, #1
  4007ca:	d040      	beq.n	40084e <sd_mmc_check+0x4de>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4007cc:	8999      	ldrh	r1, [r3, #12]
  4007ce:	0409      	lsls	r1, r1, #16
  4007d0:	f241 1037 	movw	r0, #4407	; 0x1137
  4007d4:	4b48      	ldr	r3, [pc, #288]	; (4008f8 <sd_mmc_check+0x588>)
  4007d6:	4798      	blx	r3
  4007d8:	2800      	cmp	r0, #0
  4007da:	f000 819d 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4007de:	2301      	movs	r3, #1
  4007e0:	9300      	str	r3, [sp, #0]
  4007e2:	2208      	movs	r2, #8
  4007e4:	2100      	movs	r1, #0
  4007e6:	484e      	ldr	r0, [pc, #312]	; (400920 <sd_mmc_check+0x5b0>)
  4007e8:	4c4e      	ldr	r4, [pc, #312]	; (400924 <sd_mmc_check+0x5b4>)
  4007ea:	47a0      	blx	r4
  4007ec:	2800      	cmp	r0, #0
  4007ee:	f000 8193 	beq.w	400b18 <sd_mmc_check+0x7a8>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
  4007f2:	2101      	movs	r1, #1
  4007f4:	a804      	add	r0, sp, #16
  4007f6:	4b4c      	ldr	r3, [pc, #304]	; (400928 <sd_mmc_check+0x5b8>)
  4007f8:	4798      	blx	r3
  4007fa:	2800      	cmp	r0, #0
  4007fc:	f000 818c 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400800:	4b4a      	ldr	r3, [pc, #296]	; (40092c <sd_mmc_check+0x5bc>)
  400802:	4798      	blx	r3
  400804:	2800      	cmp	r0, #0
  400806:	f000 8187 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  40080a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40080e:	f003 030f 	and.w	r3, r3, #15
  400812:	2b01      	cmp	r3, #1
  400814:	d008      	beq.n	400828 <sd_mmc_check+0x4b8>
  400816:	b113      	cbz	r3, 40081e <sd_mmc_check+0x4ae>
  400818:	2b02      	cmp	r3, #2
  40081a:	d00a      	beq.n	400832 <sd_mmc_check+0x4c2>
  40081c:	e013      	b.n	400846 <sd_mmc_check+0x4d6>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40081e:	4b38      	ldr	r3, [pc, #224]	; (400900 <sd_mmc_check+0x590>)
  400820:	681b      	ldr	r3, [r3, #0]
  400822:	2210      	movs	r2, #16
  400824:	741a      	strb	r2, [r3, #16]
  400826:	e012      	b.n	40084e <sd_mmc_check+0x4de>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400828:	4b35      	ldr	r3, [pc, #212]	; (400900 <sd_mmc_check+0x590>)
  40082a:	681b      	ldr	r3, [r3, #0]
  40082c:	221a      	movs	r2, #26
  40082e:	741a      	strb	r2, [r3, #16]
  400830:	e00d      	b.n	40084e <sd_mmc_check+0x4de>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400832:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400836:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400838:	4b31      	ldr	r3, [pc, #196]	; (400900 <sd_mmc_check+0x590>)
  40083a:	681b      	ldr	r3, [r3, #0]
  40083c:	bf14      	ite	ne
  40083e:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400840:	2220      	moveq	r2, #32
  400842:	741a      	strb	r2, [r3, #16]
  400844:	e003      	b.n	40084e <sd_mmc_check+0x4de>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400846:	4b2e      	ldr	r3, [pc, #184]	; (400900 <sd_mmc_check+0x590>)
  400848:	681b      	ldr	r3, [r3, #0]
  40084a:	2210      	movs	r2, #16
  40084c:	741a      	strb	r2, [r3, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
  40084e:	4b2c      	ldr	r3, [pc, #176]	; (400900 <sd_mmc_check+0x590>)
  400850:	681b      	ldr	r3, [r3, #0]
  400852:	7bdb      	ldrb	r3, [r3, #15]
  400854:	f013 0f04 	tst.w	r3, #4
  400858:	f000 8093 	beq.w	400982 <sd_mmc_check+0x612>
  40085c:	2409      	movs	r4, #9
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
	for(i = 0; i < 4; i++) {
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  40085e:	2600      	movs	r6, #0
  400860:	4d33      	ldr	r5, [pc, #204]	; (400930 <sd_mmc_check+0x5c0>)
  400862:	f1a4 0309 	sub.w	r3, r4, #9
  400866:	aa03      	add	r2, sp, #12
  400868:	4413      	add	r3, r2
  40086a:	9300      	str	r3, [sp, #0]
  40086c:	4633      	mov	r3, r6
  40086e:	4622      	mov	r2, r4
  400870:	4631      	mov	r1, r6
  400872:	4630      	mov	r0, r6
  400874:	47a8      	blx	r5
		addr_old++;
  400876:	3401      	adds	r4, #1
	uint8_t tplfe_max_tran_speed, i;
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
	for(i = 0; i < 4; i++) {
  400878:	2c0d      	cmp	r4, #13
  40087a:	d1f2      	bne.n	400862 <sd_mmc_check+0x4f2>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
		addr_old++;
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  40087c:	f89d 200d 	ldrb.w	r2, [sp, #13]
  400880:	f89d 300c 	ldrb.w	r3, [sp, #12]
  400884:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  400888:	f89d 800e 	ldrb.w	r8, [sp, #14]
  40088c:	eb03 4308 	add.w	r3, r3, r8, lsl #16
  400890:	f89d 800f 	ldrb.w	r8, [sp, #15]
  400894:	eb03 6808 	add.w	r8, r3, r8, lsl #24
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;
  400898:	4645      	mov	r5, r8

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40089a:	4f25      	ldr	r7, [pc, #148]	; (400930 <sd_mmc_check+0x5c0>)
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
		addr_old++;
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;
  40089c:	2400      	movs	r4, #0

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40089e:	4626      	mov	r6, r4
  4008a0:	ab04      	add	r3, sp, #16
  4008a2:	4423      	add	r3, r4
  4008a4:	9300      	str	r3, [sp, #0]
  4008a6:	4633      	mov	r3, r6
  4008a8:	192a      	adds	r2, r5, r4
  4008aa:	4631      	mov	r1, r6
  4008ac:	4630      	mov	r0, r6
  4008ae:	47b8      	blx	r7
  4008b0:	3401      	adds	r4, #1
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
  4008b2:	2c03      	cmp	r4, #3
  4008b4:	d1f4      	bne.n	4008a0 <sd_mmc_check+0x530>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
			addr_new++;
		}
		if (buf[0] == SDIO_CISTPL_END) {
  4008b6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008ba:	2bff      	cmp	r3, #255	; 0xff
  4008bc:	f000 812c 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false; /* Tuple error */
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4008c0:	2b22      	cmp	r3, #34	; 0x22
  4008c2:	d102      	bne.n	4008ca <sd_mmc_check+0x55a>
  4008c4:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4008c8:	b3a3      	cbz	r3, 400934 <sd_mmc_check+0x5c4>
			break; /* Fun0 tuple found */
		}
		if (buf[1] == 0) {
  4008ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4008ce:	2b00      	cmp	r3, #0
  4008d0:	f000 8122 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false; /* Tuple error */
		}
		/* Next address */
		addr_new += buf[1]-1;
  4008d4:	3302      	adds	r3, #2
  4008d6:	441d      	add	r5, r3
		if (addr_new > (addr_old + 256)) {
  4008d8:	f508 7380 	add.w	r3, r8, #256	; 0x100
  4008dc:	429d      	cmp	r5, r3
  4008de:	d9dd      	bls.n	40089c <sd_mmc_check+0x52c>
  4008e0:	e11a      	b.n	400b18 <sd_mmc_check+0x7a8>
  4008e2:	bf00      	nop
  4008e4:	204008d0 	.word	0x204008d0
  4008e8:	00400d71 	.word	0x00400d71
  4008ec:	01b70000 	.word	0x01b70000
  4008f0:	01b70200 	.word	0x01b70200
  4008f4:	01b70100 	.word	0x01b70100
  4008f8:	00400e4d 	.word	0x00400e4d
  4008fc:	00400e71 	.word	0x00400e71
  400900:	204008cc 	.word	0x204008cc
  400904:	0040019d 	.word	0x0040019d
  400908:	00400d7d 	.word	0x00400d7d
  40090c:	03b90100 	.word	0x03b90100
  400910:	03197500 	.word	0x03197500
  400914:	004002fd 	.word	0x004002fd
  400918:	00408190 	.word	0x00408190
  40091c:	00408150 	.word	0x00408150
  400920:	00081133 	.word	0x00081133
  400924:	00400ea9 	.word	0x00400ea9
  400928:	00400fe5 	.word	0x00400fe5
  40092c:	00401099 	.word	0x00401099
  400930:	004002c9 	.word	0x004002c9
  400934:	ac04      	add	r4, sp, #16
  400936:	f105 0806 	add.w	r8, r5, #6
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
	for(i = 0; i < 6; i++) {
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40093a:	2700      	movs	r7, #0
  40093c:	4e9e      	ldr	r6, [pc, #632]	; (400bb8 <sd_mmc_check+0x848>)
  40093e:	9400      	str	r4, [sp, #0]
  400940:	463b      	mov	r3, r7
  400942:	462a      	mov	r2, r5
  400944:	4639      	mov	r1, r7
  400946:	4638      	mov	r0, r7
  400948:	47b0      	blx	r6
		addr_new++;
  40094a:	3501      	adds	r5, #1
  40094c:	3401      	adds	r4, #1
		}
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
	for(i = 0; i < 6; i++) {
  40094e:	4545      	cmp	r5, r8
  400950:	d1f5      	bne.n	40093e <sd_mmc_check+0x5ce>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
		addr_new++;
	}

	tplfe_max_tran_speed = buf[5];
  400952:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400956:	2b32      	cmp	r3, #50	; 0x32
  400958:	bf28      	it	cs
  40095a:	2332      	movcs	r3, #50	; 0x32
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40095c:	4a97      	ldr	r2, [pc, #604]	; (400bbc <sd_mmc_check+0x84c>)
  40095e:	6812      	ldr	r2, [r2, #0]
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400960:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		 */
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400964:	f003 0307 	and.w	r3, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  400968:	4995      	ldr	r1, [pc, #596]	; (400bc0 <sd_mmc_check+0x850>)
  40096a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400972:	fb03 f301 	mul.w	r3, r3, r1
  400976:	4993      	ldr	r1, [pc, #588]	; (400bc4 <sd_mmc_check+0x854>)
  400978:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40097c:	fb03 f301 	mul.w	r3, r3, r1
  400980:	6013      	str	r3, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400982:	4b91      	ldr	r3, [pc, #580]	; (400bc8 <sd_mmc_check+0x858>)
  400984:	7818      	ldrb	r0, [r3, #0]
  400986:	4b91      	ldr	r3, [pc, #580]	; (400bcc <sd_mmc_check+0x85c>)
  400988:	4798      	blx	r3
  40098a:	2803      	cmp	r0, #3
  40098c:	d942      	bls.n	400a14 <sd_mmc_check+0x6a4>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
  40098e:	4b8b      	ldr	r3, [pc, #556]	; (400bbc <sd_mmc_check+0x84c>)
  400990:	681b      	ldr	r3, [r3, #0]
  400992:	7bdb      	ldrb	r3, [r3, #15]
  400994:	f013 0f04 	tst.w	r3, #4
  400998:	d01f      	beq.n	4009da <sd_mmc_check+0x66a>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  40099a:	ab04      	add	r3, sp, #16
  40099c:	9300      	str	r3, [sp, #0]
  40099e:	2300      	movs	r3, #0
  4009a0:	2208      	movs	r2, #8
  4009a2:	4619      	mov	r1, r3
  4009a4:	4618      	mov	r0, r3
  4009a6:	4c84      	ldr	r4, [pc, #528]	; (400bb8 <sd_mmc_check+0x848>)
  4009a8:	47a0      	blx	r4
  4009aa:	2800      	cmp	r0, #0
  4009ac:	f000 80b4 	beq.w	400b18 <sd_mmc_check+0x7a8>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  4009b0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  4009b4:	2b00      	cmp	r3, #0
  4009b6:	da10      	bge.n	4009da <sd_mmc_check+0x66a>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
  4009b8:	ab14      	add	r3, sp, #80	; 0x50
  4009ba:	2202      	movs	r2, #2
  4009bc:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  4009c0:	9300      	str	r3, [sp, #0]
  4009c2:	2301      	movs	r3, #1
  4009c4:	2207      	movs	r2, #7
  4009c6:	2100      	movs	r1, #0
  4009c8:	4618      	mov	r0, r3
  4009ca:	47a0      	blx	r4
  4009cc:	2800      	cmp	r0, #0
  4009ce:	f000 80a3 	beq.w	400b18 <sd_mmc_check+0x7a8>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
  4009d2:	4b7a      	ldr	r3, [pc, #488]	; (400bbc <sd_mmc_check+0x84c>)
  4009d4:	681b      	ldr	r3, [r3, #0]
  4009d6:	2204      	movs	r2, #4
  4009d8:	745a      	strb	r2, [r3, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4009da:	4b78      	ldr	r3, [pc, #480]	; (400bbc <sd_mmc_check+0x84c>)
  4009dc:	681b      	ldr	r3, [r3, #0]
  4009de:	7bda      	ldrb	r2, [r3, #15]
  4009e0:	f012 0f01 	tst.w	r2, #1
  4009e4:	d014      	beq.n	400a10 <sd_mmc_check+0x6a0>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4009e6:	8999      	ldrh	r1, [r3, #12]
  4009e8:	0409      	lsls	r1, r1, #16
  4009ea:	f241 1037 	movw	r0, #4407	; 0x1137
  4009ee:	4b78      	ldr	r3, [pc, #480]	; (400bd0 <sd_mmc_check+0x860>)
  4009f0:	4798      	blx	r3
  4009f2:	2800      	cmp	r0, #0
  4009f4:	f000 8090 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  4009f8:	2102      	movs	r1, #2
  4009fa:	f241 1006 	movw	r0, #4358	; 0x1106
  4009fe:	4b74      	ldr	r3, [pc, #464]	; (400bd0 <sd_mmc_check+0x860>)
  400a00:	4798      	blx	r3
  400a02:	2800      	cmp	r0, #0
  400a04:	f000 8088 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	sd_mmc_card->bus_width = 4;
  400a08:	4b6c      	ldr	r3, [pc, #432]	; (400bbc <sd_mmc_check+0x84c>)
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	2204      	movs	r2, #4
  400a0e:	745a      	strb	r2, [r3, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  400a10:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x864>)
  400a12:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  400a14:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x868>)
  400a16:	4798      	blx	r3
  400a18:	2800      	cmp	r0, #0
  400a1a:	d068      	beq.n	400aee <sd_mmc_check+0x77e>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
  400a1c:	4b67      	ldr	r3, [pc, #412]	; (400bbc <sd_mmc_check+0x84c>)
  400a1e:	681b      	ldr	r3, [r3, #0]
  400a20:	7bdb      	ldrb	r3, [r3, #15]
  400a22:	f013 0f04 	tst.w	r3, #4
  400a26:	d022      	beq.n	400a6e <sd_mmc_check+0x6fe>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400a28:	ab04      	add	r3, sp, #16
  400a2a:	9300      	str	r3, [sp, #0]
  400a2c:	2300      	movs	r3, #0
  400a2e:	2213      	movs	r2, #19
  400a30:	4619      	mov	r1, r3
  400a32:	4618      	mov	r0, r3
  400a34:	4c60      	ldr	r4, [pc, #384]	; (400bb8 <sd_mmc_check+0x848>)
  400a36:	47a0      	blx	r4
  400a38:	2800      	cmp	r0, #0
  400a3a:	d06d      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400a3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a40:	f013 0f01 	tst.w	r3, #1
  400a44:	d013      	beq.n	400a6e <sd_mmc_check+0x6fe>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
  400a46:	ab14      	add	r3, sp, #80	; 0x50
  400a48:	2202      	movs	r2, #2
  400a4a:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400a4e:	9300      	str	r3, [sp, #0]
  400a50:	2301      	movs	r3, #1
  400a52:	2213      	movs	r2, #19
  400a54:	2100      	movs	r1, #0
  400a56:	4618      	mov	r0, r3
  400a58:	47a0      	blx	r4
  400a5a:	2800      	cmp	r0, #0
  400a5c:	d05c      	beq.n	400b18 <sd_mmc_check+0x7a8>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
  400a5e:	4b57      	ldr	r3, [pc, #348]	; (400bbc <sd_mmc_check+0x84c>)
  400a60:	681b      	ldr	r3, [r3, #0]
  400a62:	2201      	movs	r2, #1
  400a64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400a68:	681a      	ldr	r2, [r3, #0]
  400a6a:	0052      	lsls	r2, r2, #1
  400a6c:	601a      	str	r2, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a6e:	4b53      	ldr	r3, [pc, #332]	; (400bbc <sd_mmc_check+0x84c>)
  400a70:	681b      	ldr	r3, [r3, #0]
  400a72:	7bda      	ldrb	r2, [r3, #15]
  400a74:	f012 0f01 	tst.w	r2, #1
  400a78:	d037      	beq.n	400aea <sd_mmc_check+0x77a>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a7a:	7c1b      	ldrb	r3, [r3, #16]
  400a7c:	2b10      	cmp	r3, #16
  400a7e:	d934      	bls.n	400aea <sd_mmc_check+0x77a>
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400a80:	2440      	movs	r4, #64	; 0x40
  400a82:	4622      	mov	r2, r4
  400a84:	2100      	movs	r1, #0
  400a86:	a804      	add	r0, sp, #16
  400a88:	4b54      	ldr	r3, [pc, #336]	; (400bdc <sd_mmc_check+0x86c>)
  400a8a:	4798      	blx	r3

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400a8c:	2301      	movs	r3, #1
  400a8e:	9300      	str	r3, [sp, #0]
  400a90:	4622      	mov	r2, r4
  400a92:	4953      	ldr	r1, [pc, #332]	; (400be0 <sd_mmc_check+0x870>)
  400a94:	4853      	ldr	r0, [pc, #332]	; (400be4 <sd_mmc_check+0x874>)
  400a96:	4c54      	ldr	r4, [pc, #336]	; (400be8 <sd_mmc_check+0x878>)
  400a98:	47a0      	blx	r4
  400a9a:	2800      	cmp	r0, #0
  400a9c:	d03c      	beq.n	400b18 <sd_mmc_check+0x7a8>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  400a9e:	2101      	movs	r1, #1
  400aa0:	a804      	add	r0, sp, #16
  400aa2:	4b52      	ldr	r3, [pc, #328]	; (400bec <sd_mmc_check+0x87c>)
  400aa4:	4798      	blx	r3
  400aa6:	2800      	cmp	r0, #0
  400aa8:	d036      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400aaa:	4b51      	ldr	r3, [pc, #324]	; (400bf0 <sd_mmc_check+0x880>)
  400aac:	4798      	blx	r3
  400aae:	2800      	cmp	r0, #0
  400ab0:	d032      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400ab2:	4b50      	ldr	r3, [pc, #320]	; (400bf4 <sd_mmc_check+0x884>)
  400ab4:	4798      	blx	r3
  400ab6:	f010 0f80 	tst.w	r0, #128	; 0x80
  400aba:	d12d      	bne.n	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400abc:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400ac0:	f003 030f 	and.w	r3, r3, #15
  400ac4:	2b0f      	cmp	r3, #15
  400ac6:	d010      	beq.n	400aea <sd_mmc_check+0x77a>
  400ac8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400acc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ad0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ad4:	d120      	bne.n	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  400ad6:	4b48      	ldr	r3, [pc, #288]	; (400bf8 <sd_mmc_check+0x888>)
  400ad8:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400ada:	4b38      	ldr	r3, [pc, #224]	; (400bbc <sd_mmc_check+0x84c>)
  400adc:	681b      	ldr	r3, [r3, #0]
  400ade:	2201      	movs	r2, #1
  400ae0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400ae4:	681a      	ldr	r2, [r3, #0]
  400ae6:	0052      	lsls	r2, r2, #1
  400ae8:	601a      	str	r2, [r3, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  400aea:	4b3a      	ldr	r3, [pc, #232]	; (400bd4 <sd_mmc_check+0x864>)
  400aec:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400aee:	4b33      	ldr	r3, [pc, #204]	; (400bbc <sd_mmc_check+0x84c>)
  400af0:	681b      	ldr	r3, [r3, #0]
  400af2:	7bdb      	ldrb	r3, [r3, #15]
  400af4:	f013 0f01 	tst.w	r3, #1
  400af8:	d006      	beq.n	400b08 <sd_mmc_check+0x798>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400afa:	f44f 7100 	mov.w	r1, #512	; 0x200
  400afe:	f241 1010 	movw	r0, #4368	; 0x1110
  400b02:	4b33      	ldr	r3, [pc, #204]	; (400bd0 <sd_mmc_check+0x860>)
  400b04:	4798      	blx	r3
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400b06:	b138      	cbz	r0, 400b18 <sd_mmc_check+0x7a8>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400b08:	4b2c      	ldr	r3, [pc, #176]	; (400bbc <sd_mmc_check+0x84c>)
  400b0a:	681b      	ldr	r3, [r3, #0]
  400b0c:	2200      	movs	r2, #0
  400b0e:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400b10:	4b3a      	ldr	r3, [pc, #232]	; (400bfc <sd_mmc_check+0x88c>)
  400b12:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  400b14:	2001      	movs	r0, #1
  400b16:	e04c      	b.n	400bb2 <sd_mmc_check+0x842>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  400b18:	4b28      	ldr	r3, [pc, #160]	; (400bbc <sd_mmc_check+0x84c>)
  400b1a:	681b      	ldr	r3, [r3, #0]
  400b1c:	2403      	movs	r4, #3
  400b1e:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  400b20:	4b36      	ldr	r3, [pc, #216]	; (400bfc <sd_mmc_check+0x88c>)
  400b22:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  400b24:	4620      	mov	r0, r4
  400b26:	e044      	b.n	400bb2 <sd_mmc_check+0x842>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
  400b28:	f04f 0800 	mov.w	r8, #0
  400b2c:	e001      	b.n	400b32 <sd_mmc_check+0x7c2>
  400b2e:	f04f 0800 	mov.w	r8, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400b32:	2100      	movs	r1, #0
  400b34:	f244 5005 	movw	r0, #17669	; 0x4505
  400b38:	4b25      	ldr	r3, [pc, #148]	; (400bd0 <sd_mmc_check+0x860>)
  400b3a:	4798      	blx	r3
  400b3c:	2800      	cmp	r0, #0
  400b3e:	f47f ac57 	bne.w	4003f0 <sd_mmc_check+0x80>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b42:	4b1e      	ldr	r3, [pc, #120]	; (400bbc <sd_mmc_check+0x84c>)
  400b44:	681b      	ldr	r3, [r3, #0]
  400b46:	7bdb      	ldrb	r3, [r3, #15]
  400b48:	f013 0f01 	tst.w	r3, #1
  400b4c:	f43f add8 	beq.w	400700 <sd_mmc_check+0x390>
  400b50:	f1b8 0f00 	cmp.w	r8, #0
  400b54:	4e2a      	ldr	r6, [pc, #168]	; (400c00 <sd_mmc_check+0x890>)
  400b56:	bf08      	it	eq
  400b58:	f44f 16fc 	moveq.w	r6, #2064384	; 0x1f8000
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
	if ((resp & OCR_SDIO_NF) == 0) {
  400b5c:	f640 0435 	movw	r4, #2101	; 0x835
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400b60:	f04f 0800 	mov.w	r8, #0
  400b64:	4d1a      	ldr	r5, [pc, #104]	; (400bd0 <sd_mmc_check+0x860>)
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400b66:	4f23      	ldr	r7, [pc, #140]	; (400bf4 <sd_mmc_check+0x884>)
  400b68:	e468      	b.n	40043c <sd_mmc_check+0xcc>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  400b6a:	4b14      	ldr	r3, [pc, #80]	; (400bbc <sd_mmc_check+0x84c>)
  400b6c:	681b      	ldr	r3, [r3, #0]
  400b6e:	2202      	movs	r2, #2
  400b70:	73da      	strb	r2, [r3, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400b72:	2100      	movs	r1, #0
  400b74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400b78:	4b15      	ldr	r3, [pc, #84]	; (400bd0 <sd_mmc_check+0x860>)
  400b7a:	4798      	blx	r3
  400b7c:	2800      	cmp	r0, #0
  400b7e:	d0cb      	beq.n	400b18 <sd_mmc_check+0x7a8>
  400b80:	e47b      	b.n	40047a <sd_mmc_check+0x10a>
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b82:	4b0e      	ldr	r3, [pc, #56]	; (400bbc <sd_mmc_check+0x84c>)
  400b84:	681b      	ldr	r3, [r3, #0]
  400b86:	7bdb      	ldrb	r3, [r3, #15]
  400b88:	f013 0f01 	tst.w	r3, #1
  400b8c:	f47f adb0 	bne.w	4006f0 <sd_mmc_check+0x380>
  400b90:	e5b6      	b.n	400700 <sd_mmc_check+0x390>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400b92:	2100      	movs	r1, #0
  400b94:	f645 3002 	movw	r0, #23298	; 0x5b02
  400b98:	4b0d      	ldr	r3, [pc, #52]	; (400bd0 <sd_mmc_check+0x860>)
  400b9a:	4798      	blx	r3
  400b9c:	2800      	cmp	r0, #0
  400b9e:	d0bb      	beq.n	400b18 <sd_mmc_check+0x7a8>
  400ba0:	e48a      	b.n	4004b8 <sd_mmc_check+0x148>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  400ba2:	4b09      	ldr	r3, [pc, #36]	; (400bc8 <sd_mmc_check+0x858>)
  400ba4:	7818      	ldrb	r0, [r3, #0]
  400ba6:	4b09      	ldr	r3, [pc, #36]	; (400bcc <sd_mmc_check+0x85c>)
  400ba8:	4798      	blx	r3
  400baa:	2803      	cmp	r0, #3
  400bac:	f63f ad50 	bhi.w	400650 <sd_mmc_check+0x2e0>
  400bb0:	e56e      	b.n	400690 <sd_mmc_check+0x320>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400bb2:	b014      	add	sp, #80	; 0x50
  400bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bb8:	004002c9 	.word	0x004002c9
  400bbc:	204008cc 	.word	0x204008cc
  400bc0:	00408190 	.word	0x00408190
  400bc4:	00408150 	.word	0x00408150
  400bc8:	204008d0 	.word	0x204008d0
  400bcc:	00400d71 	.word	0x00400d71
  400bd0:	00400e4d 	.word	0x00400e4d
  400bd4:	0040019d 	.word	0x0040019d
  400bd8:	00400d7d 	.word	0x00400d7d
  400bdc:	00405149 	.word	0x00405149
  400be0:	80ffff01 	.word	0x80ffff01
  400be4:	00081106 	.word	0x00081106
  400be8:	00400ea9 	.word	0x00400ea9
  400bec:	00400fe5 	.word	0x00400fe5
  400bf0:	00401099 	.word	0x00401099
  400bf4:	00400e71 	.word	0x00400e71
  400bf8:	00400e29 	.word	0x00400e29
  400bfc:	0040032d 	.word	0x0040032d
  400c00:	401f8000 	.word	0x401f8000

00400c04 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c04:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c06:	4b05      	ldr	r3, [pc, #20]	; (400c1c <sd_mmc_get_type+0x18>)
  400c08:	4798      	blx	r3
  400c0a:	b928      	cbnz	r0, 400c18 <sd_mmc_get_type+0x14>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
  400c0c:	4b04      	ldr	r3, [pc, #16]	; (400c20 <sd_mmc_get_type+0x1c>)
  400c0e:	4798      	blx	r3
	return sd_mmc_card->type;
  400c10:	4b04      	ldr	r3, [pc, #16]	; (400c24 <sd_mmc_get_type+0x20>)
  400c12:	681b      	ldr	r3, [r3, #0]
  400c14:	7bd8      	ldrb	r0, [r3, #15]
  400c16:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
  400c18:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c1a:	bd08      	pop	{r3, pc}
  400c1c:	004001c9 	.word	0x004001c9
  400c20:	0040032d 	.word	0x0040032d
  400c24:	204008cc 	.word	0x204008cc

00400c28 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400c28:	b510      	push	{r4, lr}
  400c2a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400c2c:	4b0f      	ldr	r3, [pc, #60]	; (400c6c <sd_mmc_test_unit_ready+0x44>)
  400c2e:	4798      	blx	r3
  400c30:	2801      	cmp	r0, #1
  400c32:	d016      	beq.n	400c62 <sd_mmc_test_unit_ready+0x3a>
  400c34:	b118      	cbz	r0, 400c3e <sd_mmc_test_unit_ready+0x16>
  400c36:	2802      	cmp	r0, #2
  400c38:	d00e      	beq.n	400c58 <sd_mmc_test_unit_ready+0x30>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400c3a:	2001      	movs	r0, #1
  400c3c:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  400c3e:	4b0c      	ldr	r3, [pc, #48]	; (400c70 <sd_mmc_test_unit_ready+0x48>)
  400c40:	5d1b      	ldrb	r3, [r3, r4]
  400c42:	b983      	cbnz	r3, 400c66 <sd_mmc_test_unit_ready+0x3e>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400c44:	4620      	mov	r0, r4
  400c46:	4b0b      	ldr	r3, [pc, #44]	; (400c74 <sd_mmc_test_unit_ready+0x4c>)
  400c48:	4798      	blx	r3
  400c4a:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  400c4e:	2800      	cmp	r0, #0
  400c50:	bf14      	ite	ne
  400c52:	2000      	movne	r0, #0
  400c54:	2002      	moveq	r0, #2
  400c56:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  400c58:	2200      	movs	r2, #0
  400c5a:	4b05      	ldr	r3, [pc, #20]	; (400c70 <sd_mmc_test_unit_ready+0x48>)
  400c5c:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400c5e:	2002      	movs	r0, #2
  400c60:	bd10      	pop	{r4, pc}
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  400c62:	2003      	movs	r0, #3
  400c64:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
  400c66:	2002      	movs	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
  400c68:	bd10      	pop	{r4, pc}
  400c6a:	bf00      	nop
  400c6c:	00400371 	.word	0x00400371
  400c70:	204008d4 	.word	0x204008d4
  400c74:	00400c05 	.word	0x00400c05

00400c78 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400c78:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c7e:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400c80:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400c82:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400c84:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400c86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400c88:	2680      	movs	r6, #128	; 0x80
  400c8a:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400c8c:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400c8e:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400c90:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400c92:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400c94:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  400c96:	2200      	movs	r2, #0
  400c98:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400c9a:	2205      	movs	r2, #5
  400c9c:	601a      	str	r2, [r3, #0]
}
  400c9e:	bc70      	pop	{r4, r5, r6}
  400ca0:	4770      	bx	lr
  400ca2:	bf00      	nop

00400ca4 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400ca4:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400ca6:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400caa:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400cac:	f411 7f80 	tst.w	r1, #256	; 0x100
  400cb0:	d00c      	beq.n	400ccc <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400cb2:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400cb6:	d002      	beq.n	400cbe <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400cb8:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
  400cbc:	e006      	b.n	400ccc <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
  400cbe:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  400cc2:	bf14      	ite	ne
  400cc4:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  400cc8:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400ccc:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  400cd0:	bf18      	it	ne
  400cd2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  400cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400cda:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  400cdc:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400cde:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  400ce0:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400ce4:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  400ce6:	b132      	cbz	r2, 400cf6 <hsmci_send_cmd_execute+0x52>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400ce8:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400cec:	d00a      	beq.n	400d04 <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  400cee:	4b14      	ldr	r3, [pc, #80]	; (400d40 <hsmci_send_cmd_execute+0x9c>)
  400cf0:	4798      	blx	r3
				return false;
  400cf2:	2000      	movs	r0, #0
  400cf4:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400cf6:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400cfa:	d003      	beq.n	400d04 <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  400cfc:	4b10      	ldr	r3, [pc, #64]	; (400d40 <hsmci_send_cmd_execute+0x9c>)
  400cfe:	4798      	blx	r3
				return false;
  400d00:	2000      	movs	r0, #0
  400d02:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  400d04:	f013 0f01 	tst.w	r3, #1
  400d08:	d0ec      	beq.n	400ce4 <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
  400d0a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400d0e:	d10e      	bne.n	400d2e <hsmci_send_cmd_execute+0x8a>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  400d10:	2001      	movs	r0, #1
  400d12:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  400d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  400d16:	3a01      	subs	r2, #1
  400d18:	d103      	bne.n	400d22 <hsmci_send_cmd_execute+0x7e>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  400d1a:	4b09      	ldr	r3, [pc, #36]	; (400d40 <hsmci_send_cmd_execute+0x9c>)
  400d1c:	4798      	blx	r3
			return false;
  400d1e:	2000      	movs	r0, #0
  400d20:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  400d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400d26:	2b20      	cmp	r3, #32
  400d28:	d1f4      	bne.n	400d14 <hsmci_send_cmd_execute+0x70>
	return true;
  400d2a:	2001      	movs	r0, #1
  400d2c:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  400d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400d34:	f04f 32ff 	mov.w	r2, #4294967295
  400d38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d3c:	e7f1      	b.n	400d22 <hsmci_send_cmd_execute+0x7e>
  400d3e:	bf00      	nop
  400d40:	00400c79 	.word	0x00400c79

00400d44 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  400d44:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  400d46:	2012      	movs	r0, #18
  400d48:	4c08      	ldr	r4, [pc, #32]	; (400d6c <hsmci_init+0x28>)
  400d4a:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  400d4c:	203a      	movs	r0, #58	; 0x3a
  400d4e:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  400d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d54:	2272      	movs	r2, #114	; 0x72
  400d56:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  400d58:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  400d5a:	2211      	movs	r2, #17
  400d5c:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  400d5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400d62:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  400d64:	2205      	movs	r2, #5
  400d66:	601a      	str	r2, [r3, #0]
  400d68:	bd10      	pop	{r4, pc}
  400d6a:	bf00      	nop
  400d6c:	004045d5 	.word	0x004045d5

00400d70 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  400d70:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  400d72:	bf0c      	ite	eq
  400d74:	2004      	moveq	r0, #4
  400d76:	2000      	movne	r0, #0
  400d78:	4770      	bx	lr
  400d7a:	bf00      	nop

00400d7c <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  400d7c:	2001      	movs	r0, #1
  400d7e:	4770      	bx	lr

00400d80 <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  400d80:	b410      	push	{r4}
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  400d82:	b133      	cbz	r3, 400d92 <hsmci_select_device+0x12>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  400d84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400d88:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400d8e:	6543      	str	r3, [r0, #84]	; 0x54
  400d90:	e005      	b.n	400d9e <hsmci_select_device+0x1e>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  400d92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400d96:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400d9c:	6543      	str	r3, [r0, #84]	; 0x54
	uint32_t clkodd = 0;
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
  400d9e:	4b1f      	ldr	r3, [pc, #124]	; (400e1c <hsmci_select_device+0x9c>)
  400da0:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  400da4:	d32d      	bcc.n	400e02 <hsmci_select_device+0x82>
		div = (mck / speed) - 2;
  400da6:	481e      	ldr	r0, [pc, #120]	; (400e20 <hsmci_select_device+0xa0>)
  400da8:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  400dac:	fb01 0113 	mls	r1, r1, r3, r0
  400db0:	b909      	cbnz	r1, 400db6 <hsmci_select_device+0x36>
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
		div = (mck / speed) - 2;
  400db2:	3b02      	subs	r3, #2
  400db4:	e000      	b.n	400db8 <hsmci_select_device+0x38>
		if (mck % speed) {
			// Ensure that the card speed not be higher than expected.
			div++;
  400db6:	3b01      	subs	r3, #1
	} else {
		clkdiv = 0;
		clkodd = 0;
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400db8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400dbc:	6848      	ldr	r0, [r1, #4]
  400dbe:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400dc2:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400dc4:	6848      	ldr	r0, [r1, #4]
  400dc6:	f3c3 0447 	ubfx	r4, r3, #1, #8
  400dca:	4320      	orrs	r0, r4
  400dcc:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  400dce:	f013 0f01 	tst.w	r3, #1
  400dd2:	d004      	beq.n	400dde <hsmci_select_device+0x5e>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  400dd4:	684b      	ldr	r3, [r1, #4]
  400dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400dda:	604b      	str	r3, [r1, #4]
  400ddc:	e005      	b.n	400dea <hsmci_select_device+0x6a>
	}
	else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  400dde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400de2:	684b      	ldr	r3, [r1, #4]
  400de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400de8:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  400dea:	2a04      	cmp	r2, #4
  400dec:	d004      	beq.n	400df8 <hsmci_select_device+0x78>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  400dee:	2a08      	cmp	r2, #8
  400df0:	bf0c      	ite	eq
  400df2:	22c0      	moveq	r2, #192	; 0xc0
  400df4:	2200      	movne	r2, #0
  400df6:	e000      	b.n	400dfa <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  400df8:	2280      	movs	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  400dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400dfe:	60da      	str	r2, [r3, #12]
}
  400e00:	e008      	b.n	400e14 <hsmci_select_device+0x94>
	} else {
		clkdiv = 0;
		clkodd = 0;
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400e02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e06:	6859      	ldr	r1, [r3, #4]
  400e08:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  400e0c:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400e0e:	6859      	ldr	r1, [r3, #4]
  400e10:	6059      	str	r1, [r3, #4]
  400e12:	e7e4      	b.n	400dde <hsmci_select_device+0x5e>

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
}
  400e14:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e18:	4770      	bx	lr
  400e1a:	bf00      	nop
  400e1c:	08f0d17f 	.word	0x08f0d17f
  400e20:	08f0d180 	.word	0x08f0d180

00400e24 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  400e24:	4770      	bx	lr
  400e26:	bf00      	nop

00400e28 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e2c:	685a      	ldr	r2, [r3, #4]
  400e2e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400e32:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  400e34:	2200      	movs	r2, #0
  400e36:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  400e38:	f44f 6210 	mov.w	r2, #2304	; 0x900
  400e3c:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  400e3e:	461a      	mov	r2, r3
  400e40:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400e42:	f013 0f01 	tst.w	r3, #1
  400e46:	d0fb      	beq.n	400e40 <hsmci_send_clock+0x18>
}
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop

00400e4c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  400e4c:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e52:	685a      	ldr	r2, [r3, #4]
  400e54:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400e58:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  400e5a:	2400      	movs	r4, #0
  400e5c:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  400e5e:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  400e60:	460a      	mov	r2, r1
  400e62:	4601      	mov	r1, r0
  400e64:	4620      	mov	r0, r4
  400e66:	4b01      	ldr	r3, [pc, #4]	; (400e6c <hsmci_send_cmd+0x20>)
  400e68:	4798      	blx	r3
}
  400e6a:	bd10      	pop	{r4, pc}
  400e6c:	00400ca5 	.word	0x00400ca5

00400e70 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  400e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e74:	6a18      	ldr	r0, [r3, #32]
}
  400e76:	4770      	bx	lr

00400e78 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  400e78:	b410      	push	{r4}
  400e7a:	1d03      	adds	r3, r0, #4
  400e7c:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  400e7e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400e82:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  400e84:	0e11      	lsrs	r1, r2, #24
  400e86:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  400e8a:	0c11      	lsrs	r1, r2, #16
  400e8c:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  400e90:	0a11      	lsrs	r1, r2, #8
  400e92:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  400e96:	f803 2c01 	strb.w	r2, [r3, #-1]
  400e9a:	3304      	adds	r3, #4

void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  400e9c:	4283      	cmp	r3, r0
  400e9e:	d1f0      	bne.n	400e82 <hsmci_get_response_128+0xa>
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
		response++;
	}
}
  400ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ea4:	4770      	bx	lr
  400ea6:	bf00      	nop

00400ea8 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  400ea8:	b570      	push	{r4, r5, r6, lr}
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  400eaa:	f89d 4010 	ldrb.w	r4, [sp, #16]
  400eae:	b12c      	cbz	r4, 400ebc <hsmci_adtc_start+0x14>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  400eb0:	f44f 7580 	mov.w	r5, #256	; 0x100
  400eb4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400eb8:	6525      	str	r5, [r4, #80]	; 0x50
  400eba:	e003      	b.n	400ec4 <hsmci_adtc_start+0x1c>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
  400ebc:	2500      	movs	r5, #0
  400ebe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400ec2:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  400ec4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400ec8:	686c      	ldr	r4, [r5, #4]
  400eca:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  400ece:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  400ed0:	f012 0f03 	tst.w	r2, #3
  400ed4:	d004      	beq.n	400ee0 <hsmci_adtc_start+0x38>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  400ed6:	686c      	ldr	r4, [r5, #4]
  400ed8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  400edc:	606c      	str	r4, [r5, #4]
  400ede:	e005      	b.n	400eec <hsmci_adtc_start+0x44>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  400ee0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400ee4:	686c      	ldr	r4, [r5, #4]
  400ee6:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  400eea:	606c      	str	r4, [r5, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  400eec:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  400ef0:	2c00      	cmp	r4, #0
  400ef2:	bf14      	ite	ne
  400ef4:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  400ef8:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  400efc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400f00:	d007      	beq.n	400f12 <hsmci_adtc_start+0x6a>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  400f02:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  400f06:	f3c2 0508 	ubfx	r5, r2, #0, #9
  400f0a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400f0e:	61b5      	str	r5, [r6, #24]
  400f10:	e018      	b.n	400f44 <hsmci_adtc_start+0x9c>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  400f12:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  400f16:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400f1a:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  400f1c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  400f20:	d002      	beq.n	400f28 <hsmci_adtc_start+0x80>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  400f22:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  400f26:	e00d      	b.n	400f44 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_STREAM) {
  400f28:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  400f2c:	d002      	beq.n	400f34 <hsmci_adtc_start+0x8c>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  400f2e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  400f32:	e007      	b.n	400f44 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  400f34:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400f38:	d104      	bne.n	400f44 <hsmci_adtc_start+0x9c>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  400f3a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  400f3e:	bf18      	it	ne
  400f40:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  400f44:	2600      	movs	r6, #0
  400f46:	4d06      	ldr	r5, [pc, #24]	; (400f60 <hsmci_adtc_start+0xb8>)
  400f48:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  400f4a:	4d06      	ldr	r5, [pc, #24]	; (400f64 <hsmci_adtc_start+0xbc>)
  400f4c:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  400f4e:	4a06      	ldr	r2, [pc, #24]	; (400f68 <hsmci_adtc_start+0xc0>)
  400f50:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  400f52:	460a      	mov	r2, r1
  400f54:	4601      	mov	r1, r0
  400f56:	4620      	mov	r0, r4
  400f58:	4b04      	ldr	r3, [pc, #16]	; (400f6c <hsmci_adtc_start+0xc4>)
  400f5a:	4798      	blx	r3
}
  400f5c:	bd70      	pop	{r4, r5, r6, pc}
  400f5e:	bf00      	nop
  400f60:	204008dc 	.word	0x204008dc
  400f64:	204008d6 	.word	0x204008d6
  400f68:	204008d8 	.word	0x204008d8
  400f6c:	00400ca5 	.word	0x00400ca5

00400f70 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  400f70:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400f72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f76:	4a16      	ldr	r2, [pc, #88]	; (400fd0 <hsmci_read_word+0x60>)

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f7a:	4213      	tst	r3, r2
  400f7c:	d003      	beq.n	400f86 <hsmci_read_word+0x16>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  400f7e:	4b15      	ldr	r3, [pc, #84]	; (400fd4 <hsmci_read_word+0x64>)
  400f80:	4798      	blx	r3
			return false;
  400f82:	2000      	movs	r0, #0
  400f84:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  400f86:	f013 0f02 	tst.w	r3, #2
  400f8a:	d0f5      	beq.n	400f78 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  400f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f92:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  400f94:	4a10      	ldr	r2, [pc, #64]	; (400fd8 <hsmci_read_word+0x68>)
  400f96:	6813      	ldr	r3, [r2, #0]
  400f98:	3304      	adds	r3, #4
  400f9a:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f9c:	4a0f      	ldr	r2, [pc, #60]	; (400fdc <hsmci_read_word+0x6c>)
  400f9e:	8811      	ldrh	r1, [r2, #0]
  400fa0:	4a0f      	ldr	r2, [pc, #60]	; (400fe0 <hsmci_read_word+0x70>)
  400fa2:	8812      	ldrh	r2, [r2, #0]
  400fa4:	fb02 f201 	mul.w	r2, r2, r1
  400fa8:	4293      	cmp	r3, r2
  400faa:	d30e      	bcc.n	400fca <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400fac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400fb0:	4a07      	ldr	r2, [pc, #28]	; (400fd0 <hsmci_read_word+0x60>)
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400fb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400fb4:	4213      	tst	r3, r2
  400fb6:	d003      	beq.n	400fc0 <hsmci_read_word+0x50>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  400fb8:	4b06      	ldr	r3, [pc, #24]	; (400fd4 <hsmci_read_word+0x64>)
  400fba:	4798      	blx	r3
			return false;
  400fbc:	2000      	movs	r0, #0
  400fbe:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400fc0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400fc4:	d0f5      	beq.n	400fb2 <hsmci_read_word+0x42>
	return true;
  400fc6:	2001      	movs	r0, #1
  400fc8:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
  400fca:	2001      	movs	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  400fcc:	bd08      	pop	{r3, pc}
  400fce:	bf00      	nop
  400fd0:	c0600000 	.word	0xc0600000
  400fd4:	00400c79 	.word	0x00400c79
  400fd8:	204008dc 	.word	0x204008dc
  400fdc:	204008d6 	.word	0x204008d6
  400fe0:	204008d8 	.word	0x204008d8

00400fe4 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  400fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fe6:	b089      	sub	sp, #36	; 0x24
  400fe8:	4604      	mov	r4, r0
  400fea:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400fec:	2220      	movs	r2, #32
  400fee:	2100      	movs	r1, #0
  400ff0:	4668      	mov	r0, sp
  400ff2:	4b21      	ldr	r3, [pc, #132]	; (401078 <hsmci_start_read_blocks+0x94>)
  400ff4:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400ff6:	4821      	ldr	r0, [pc, #132]	; (40107c <hsmci_start_read_blocks+0x98>)
  400ff8:	2301      	movs	r3, #1
  400ffa:	6203      	str	r3, [r0, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400ffc:	4b20      	ldr	r3, [pc, #128]	; (401080 <hsmci_start_read_blocks+0x9c>)
  400ffe:	881b      	ldrh	r3, [r3, #0]
  401000:	fb05 f503 	mul.w	r5, r5, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401004:	4b1f      	ldr	r3, [pc, #124]	; (401084 <hsmci_start_read_blocks+0xa0>)
  401006:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  401008:	08ab      	lsrs	r3, r5, #2
  40100a:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  40100c:	4b1e      	ldr	r3, [pc, #120]	; (401088 <hsmci_start_read_blocks+0xa4>)
  40100e:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  401010:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401012:	466a      	mov	r2, sp
  401014:	2100      	movs	r1, #0
  401016:	4b1d      	ldr	r3, [pc, #116]	; (40108c <hsmci_start_read_blocks+0xa8>)
  401018:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40101a:	4b1d      	ldr	r3, [pc, #116]	; (401090 <hsmci_start_read_blocks+0xac>)
  40101c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401020:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401024:	f007 0e07 	and.w	lr, r7, #7
  401028:	f10e 0e04 	add.w	lr, lr, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40102c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401030:	fab7 f087 	clz	r0, r7
    wshift  = __CLZ(ways) & 0x1f;
  401034:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401038:	f3bf 8f4f 	dsb	sy

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  40103c:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
  40103e:	463b      	mov	r3, r7
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401040:	fa06 f10e 	lsl.w	r1, r6, lr
  401044:	fa03 f200 	lsl.w	r2, r3, r0
  401048:	430a      	orrs	r2, r1
              SCB->DCCISW = sw;
  40104a:	f8c4 2274 	str.w	r2, [r4, #628]	; 0x274
            } while(tmpways--);
  40104e:	3b01      	subs	r3, #1
  401050:	f1b3 3fff 	cmp.w	r3, #4294967295
  401054:	d1f6      	bne.n	401044 <hsmci_start_read_blocks+0x60>
        } while(sets--);
  401056:	3e01      	subs	r6, #1
  401058:	f1b6 3fff 	cmp.w	r6, #4294967295
  40105c:	d1ef      	bne.n	40103e <hsmci_start_read_blocks+0x5a>
  40105e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401062:	f3bf 8f6f 	isb	sy
	Assert(channel_num < XDMACCHID_NUMBER);
	
	/* Update DCache before DMA transmit */
	SCB_CleanInvalidateDCache();
	
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401066:	2001      	movs	r0, #1
  401068:	4b04      	ldr	r3, [pc, #16]	; (40107c <hsmci_start_read_blocks+0x98>)
  40106a:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  40106c:	4b09      	ldr	r3, [pc, #36]	; (401094 <hsmci_start_read_blocks+0xb0>)
  40106e:	681a      	ldr	r2, [r3, #0]
  401070:	4415      	add	r5, r2
  401072:	601d      	str	r5, [r3, #0]
	return true;
}
  401074:	b009      	add	sp, #36	; 0x24
  401076:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401078:	00405149 	.word	0x00405149
  40107c:	40078000 	.word	0x40078000
  401080:	204008d6 	.word	0x204008d6
  401084:	00043001 	.word	0x00043001
  401088:	40000200 	.word	0x40000200
  40108c:	004010f9 	.word	0x004010f9
  401090:	e000ed00 	.word	0xe000ed00
  401094:	204008dc 	.word	0x204008dc

00401098 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  401098:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40109a:	4b11      	ldr	r3, [pc, #68]	; (4010e0 <hsmci_wait_end_of_read_blocks+0x48>)
  40109c:	881a      	ldrh	r2, [r3, #0]
  40109e:	4b11      	ldr	r3, [pc, #68]	; (4010e4 <hsmci_wait_end_of_read_blocks+0x4c>)
  4010a0:	881b      	ldrh	r3, [r3, #0]
  4010a2:	fb03 f202 	mul.w	r2, r3, r2
  4010a6:	4b10      	ldr	r3, [pc, #64]	; (4010e8 <hsmci_wait_end_of_read_blocks+0x50>)
  4010a8:	681c      	ldr	r4, [r3, #0]
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4010aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4010ae:	490f      	ldr	r1, [pc, #60]	; (4010ec <hsmci_wait_end_of_read_blocks+0x54>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4010b0:	4e0f      	ldr	r6, [pc, #60]	; (4010f0 <hsmci_wait_end_of_read_blocks+0x58>)
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4010b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4010b4:	420b      	tst	r3, r1
  4010b6:	d006      	beq.n	4010c6 <hsmci_wait_end_of_read_blocks+0x2e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  4010b8:	4b0e      	ldr	r3, [pc, #56]	; (4010f4 <hsmci_wait_end_of_read_blocks+0x5c>)
  4010ba:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4010bc:	2201      	movs	r2, #1
  4010be:	4b0c      	ldr	r3, [pc, #48]	; (4010f0 <hsmci_wait_end_of_read_blocks+0x58>)
  4010c0:	621a      	str	r2, [r3, #32]
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
  4010c2:	2000      	movs	r0, #0
  4010c4:	bd70      	pop	{r4, r5, r6, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4010c6:	42a2      	cmp	r2, r4
  4010c8:	d903      	bls.n	4010d2 <hsmci_wait_end_of_read_blocks+0x3a>
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4010ca:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
  4010cc:	f015 0f01 	tst.w	r5, #1
  4010d0:	d104      	bne.n	4010dc <hsmci_wait_end_of_read_blocks+0x44>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4010d2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4010d6:	d0ec      	beq.n	4010b2 <hsmci_wait_end_of_read_blocks+0x1a>
	return true;
  4010d8:	2001      	movs	r0, #1
  4010da:	bd70      	pop	{r4, r5, r6, pc}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
  4010dc:	2001      	movs	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  4010de:	bd70      	pop	{r4, r5, r6, pc}
  4010e0:	204008d6 	.word	0x204008d6
  4010e4:	204008d8 	.word	0x204008d8
  4010e8:	204008dc 	.word	0x204008dc
  4010ec:	c0600000 	.word	0xc0600000
  4010f0:	40078000 	.word	0x40078000
  4010f4:	00400c79 	.word	0x00400c79

004010f8 <xdmac_configure_transfer>:
  4010f8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4010fc:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4010fe:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401100:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401102:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401104:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401106:	6813      	ldr	r3, [r2, #0]
  401108:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40110c:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  40110e:	6913      	ldr	r3, [r2, #16]
  401110:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401114:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401116:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401118:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  40111a:	6993      	ldr	r3, [r2, #24]
  40111c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401120:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401124:	69d3      	ldr	r3, [r2, #28]
  401126:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40112a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  40112e:	68d3      	ldr	r3, [r2, #12]
 */
static inline void xdmac_channel_set_config(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401130:	678b      	str	r3, [r1, #120]	; 0x78
  401132:	4770      	bx	lr

00401134 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  401134:	2810      	cmp	r0, #16
  401136:	d108      	bne.n	40114a <chip_isr+0x16>
  401138:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40113c:	d105      	bne.n	40114a <chip_isr+0x16>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  40113e:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  401140:	4b02      	ldr	r3, [pc, #8]	; (40114c <chip_isr+0x18>)
  401142:	681b      	ldr	r3, [r3, #0]
  401144:	b103      	cbz	r3, 401148 <chip_isr+0x14>
			gpfIsr();
  401146:	4798      	blx	r3
  401148:	bd08      	pop	{r3, pc}
  40114a:	4770      	bx	lr
  40114c:	204008e0 	.word	0x204008e0

00401150 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  401150:	b140      	cbz	r0, 401164 <nm_bsp_sleep+0x14>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  401152:	b570      	push	{r4, r5, r6, lr}
  401154:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(4);
  401156:	4e04      	ldr	r6, [pc, #16]	; (401168 <nm_bsp_sleep+0x18>)
  401158:	4d04      	ldr	r5, [pc, #16]	; (40116c <nm_bsp_sleep+0x1c>)
  40115a:	4630      	mov	r0, r6
  40115c:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  40115e:	3c01      	subs	r4, #1
  401160:	d1fb      	bne.n	40115a <nm_bsp_sleep+0xa>
  401162:	bd70      	pop	{r4, r5, r6, pc}
  401164:	4770      	bx	lr
  401166:	bf00      	nop
  401168:	00031635 	.word	0x00031635
  40116c:	20400001 	.word	0x20400001

00401170 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  401170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401174:	4f09      	ldr	r7, [pc, #36]	; (40119c <nm_bsp_reset+0x2c>)
  401176:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40117a:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  40117e:	4d08      	ldr	r5, [pc, #32]	; (4011a0 <nm_bsp_reset+0x30>)
  401180:	2608      	movs	r6, #8
  401182:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	nm_bsp_sleep(100);
  401184:	2064      	movs	r0, #100	; 0x64
  401186:	4c07      	ldr	r4, [pc, #28]	; (4011a4 <nm_bsp_reset+0x34>)
  401188:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40118a:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  40118e:	2064      	movs	r0, #100	; 0x64
  401190:	47a0      	blx	r4
  401192:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  401194:	2064      	movs	r0, #100	; 0x64
  401196:	47a0      	blx	r4
  401198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40119c:	400e1200 	.word	0x400e1200
  4011a0:	400e1000 	.word	0x400e1000
  4011a4:	00401151 	.word	0x00401151

004011a8 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  4011a8:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  4011aa:	2200      	movs	r2, #0
  4011ac:	4b14      	ldr	r3, [pc, #80]	; (401200 <nm_bsp_init+0x58>)
  4011ae:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4011b0:	200a      	movs	r0, #10
  4011b2:	4c14      	ldr	r4, [pc, #80]	; (401204 <nm_bsp_init+0x5c>)
  4011b4:	47a0      	blx	r4
  4011b6:	200b      	movs	r0, #11
  4011b8:	47a0      	blx	r4
  4011ba:	200c      	movs	r0, #12
  4011bc:	47a0      	blx	r4
  4011be:	2010      	movs	r0, #16
  4011c0:	47a0      	blx	r4
  4011c2:	2011      	movs	r0, #17
  4011c4:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4011c6:	4b10      	ldr	r3, [pc, #64]	; (401208 <nm_bsp_init+0x60>)
  4011c8:	2208      	movs	r2, #8
  4011ca:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011d0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4011d2:	4a0e      	ldr	r2, [pc, #56]	; (40120c <nm_bsp_init+0x64>)
  4011d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4011d8:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011da:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011de:	6311      	str	r1, [r2, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4011e0:	2204      	movs	r2, #4
  4011e2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011e8:	631a      	str	r2, [r3, #48]	; 0x30

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  4011ea:	4b09      	ldr	r3, [pc, #36]	; (401210 <nm_bsp_init+0x68>)
  4011ec:	681b      	ldr	r3, [r3, #0]
  4011ee:	f013 0f01 	tst.w	r3, #1
  4011f2:	d001      	beq.n	4011f8 <nm_bsp_init+0x50>
  4011f4:	4b06      	ldr	r3, [pc, #24]	; (401210 <nm_bsp_init+0x68>)
  4011f6:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  4011f8:	4b06      	ldr	r3, [pc, #24]	; (401214 <nm_bsp_init+0x6c>)
  4011fa:	4798      	blx	r3

	return 0;
}
  4011fc:	2000      	movs	r0, #0
  4011fe:	bd10      	pop	{r4, pc}
  401200:	204008e0 	.word	0x204008e0
  401204:	004045d5 	.word	0x004045d5
  401208:	400e1000 	.word	0x400e1000
  40120c:	400e1200 	.word	0x400e1200
  401210:	e000e010 	.word	0xe000e010
  401214:	00401171 	.word	0x00401171

00401218 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  401218:	b530      	push	{r4, r5, lr}
  40121a:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  40121c:	4b14      	ldr	r3, [pc, #80]	; (401270 <nm_bsp_register_isr+0x58>)
  40121e:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  401220:	2010      	movs	r0, #16
  401222:	4b14      	ldr	r3, [pc, #80]	; (401274 <nm_bsp_register_isr+0x5c>)
  401224:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  401226:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40122a:	207c      	movs	r0, #124	; 0x7c
  40122c:	4b12      	ldr	r3, [pc, #72]	; (401278 <nm_bsp_register_isr+0x60>)
  40122e:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  401230:	4c12      	ldr	r4, [pc, #72]	; (40127c <nm_bsp_register_isr+0x64>)
  401232:	2201      	movs	r2, #1
  401234:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401238:	4620      	mov	r0, r4
  40123a:	4b11      	ldr	r3, [pc, #68]	; (401280 <nm_bsp_register_isr+0x68>)
  40123c:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  40123e:	4b11      	ldr	r3, [pc, #68]	; (401284 <nm_bsp_register_isr+0x6c>)
  401240:	9300      	str	r3, [sp, #0]
  401242:	2351      	movs	r3, #81	; 0x51
  401244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401248:	2110      	movs	r1, #16
  40124a:	4620      	mov	r0, r4
  40124c:	4d0e      	ldr	r5, [pc, #56]	; (401288 <nm_bsp_register_isr+0x70>)
  40124e:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401250:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401254:	4620      	mov	r0, r4
  401256:	4b0d      	ldr	r3, [pc, #52]	; (40128c <nm_bsp_register_isr+0x74>)
  401258:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40125a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40125e:	4b0c      	ldr	r3, [pc, #48]	; (401290 <nm_bsp_register_isr+0x78>)
  401260:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  401262:	2200      	movs	r2, #0
  401264:	2110      	movs	r1, #16
  401266:	4620      	mov	r0, r4
  401268:	4b0a      	ldr	r3, [pc, #40]	; (401294 <nm_bsp_register_isr+0x7c>)
  40126a:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  40126c:	b003      	add	sp, #12
  40126e:	bd30      	pop	{r4, r5, pc}
  401270:	204008e0 	.word	0x204008e0
  401274:	004045d5 	.word	0x004045d5
  401278:	004041d5 	.word	0x004041d5
  40127c:	400e1400 	.word	0x400e1400
  401280:	00404091 	.word	0x00404091
  401284:	00401135 	.word	0x00401135
  401288:	00404359 	.word	0x00404359
  40128c:	004041c5 	.word	0x004041c5
  401290:	e000e100 	.word	0xe000e100
  401294:	00404429 	.word	0x00404429

00401298 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  401298:	b508      	push	{r3, lr}
	if (u8Enable) {
  40129a:	b128      	cbz	r0, 4012a8 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40129c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012a0:	4804      	ldr	r0, [pc, #16]	; (4012b4 <nm_bsp_interrupt_ctrl+0x1c>)
  4012a2:	4b05      	ldr	r3, [pc, #20]	; (4012b8 <nm_bsp_interrupt_ctrl+0x20>)
  4012a4:	4798      	blx	r3
  4012a6:	bd08      	pop	{r3, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4012a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012ac:	4801      	ldr	r0, [pc, #4]	; (4012b4 <nm_bsp_interrupt_ctrl+0x1c>)
  4012ae:	4b03      	ldr	r3, [pc, #12]	; (4012bc <nm_bsp_interrupt_ctrl+0x24>)
  4012b0:	4798      	blx	r3
  4012b2:	bd08      	pop	{r3, pc}
  4012b4:	400e1400 	.word	0x400e1400
  4012b8:	004041c5 	.word	0x004041c5
  4012bc:	004041c9 	.word	0x004041c9

004012c0 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4012c2:	4c39      	ldr	r4, [pc, #228]	; (4013a8 <nm_bus_init+0xe8>)
  4012c4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4012c8:	6621      	str	r1, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4012ca:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4012ce:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4012d0:	6261      	str	r1, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4012d2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4012d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4012d8:	430b      	orrs	r3, r1
  4012da:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4012dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4012de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  4012e2:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4012e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4012e8:	6622      	str	r2, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4012ea:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4012ee:	6562      	str	r2, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4012f0:	6262      	str	r2, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4012f2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4012f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4012f8:	4313      	orrs	r3, r2
  4012fa:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4012fc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4012fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  401302:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401308:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40130a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40130e:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401310:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401312:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  401316:	6f20      	ldr	r0, [r4, #112]	; 0x70
  401318:	4318      	orrs	r0, r3
  40131a:	6720      	str	r0, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40131c:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40131e:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  401322:	6760      	str	r0, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401324:	6061      	str	r1, [r4, #4]
  401326:	6062      	str	r2, [r4, #4]
  401328:	6063      	str	r3, [r4, #4]
  40132a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  40132e:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  401330:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  401332:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  401334:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  401336:	4d1d      	ldr	r5, [pc, #116]	; (4013ac <nm_bus_init+0xec>)
  401338:	4628      	mov	r0, r5
  40133a:	4b1d      	ldr	r3, [pc, #116]	; (4013b0 <nm_bus_init+0xf0>)
  40133c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40133e:	2302      	movs	r3, #2
  401340:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  401342:	2380      	movs	r3, #128	; 0x80
  401344:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401346:	686b      	ldr	r3, [r5, #4]
  401348:	f043 0301 	orr.w	r3, r3, #1
  40134c:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40134e:	686b      	ldr	r3, [r5, #4]
  401350:	f043 0310 	orr.w	r3, r3, #16
  401354:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  401356:	2101      	movs	r1, #1
  401358:	4628      	mov	r0, r5
  40135a:	4b16      	ldr	r3, [pc, #88]	; (4013b4 <nm_bus_init+0xf4>)
  40135c:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  40135e:	2200      	movs	r2, #0
  401360:	2101      	movs	r1, #1
  401362:	4628      	mov	r0, r5
  401364:	4b14      	ldr	r3, [pc, #80]	; (4013b8 <nm_bus_init+0xf8>)
  401366:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  401368:	2201      	movs	r2, #1
  40136a:	4611      	mov	r1, r2
  40136c:	4628      	mov	r0, r5
  40136e:	4b13      	ldr	r3, [pc, #76]	; (4013bc <nm_bus_init+0xfc>)
  401370:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  401372:	2200      	movs	r2, #0
  401374:	2101      	movs	r1, #1
  401376:	4628      	mov	r0, r5
  401378:	4b11      	ldr	r3, [pc, #68]	; (4013c0 <nm_bus_init+0x100>)
  40137a:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  40137c:	4911      	ldr	r1, [pc, #68]	; (4013c4 <nm_bus_init+0x104>)
  40137e:	4812      	ldr	r0, [pc, #72]	; (4013c8 <nm_bus_init+0x108>)
  401380:	4b12      	ldr	r3, [pc, #72]	; (4013cc <nm_bus_init+0x10c>)
  401382:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  401384:	b2c2      	uxtb	r2, r0
  401386:	2101      	movs	r1, #1
  401388:	4628      	mov	r0, r5
  40138a:	4b11      	ldr	r3, [pc, #68]	; (4013d0 <nm_bus_init+0x110>)
  40138c:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  40138e:	2300      	movs	r3, #0
  401390:	461a      	mov	r2, r3
  401392:	2101      	movs	r1, #1
  401394:	4628      	mov	r0, r5
  401396:	4f0f      	ldr	r7, [pc, #60]	; (4013d4 <nm_bus_init+0x114>)
  401398:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40139a:	2301      	movs	r3, #1
  40139c:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  40139e:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  4013a0:	4b0d      	ldr	r3, [pc, #52]	; (4013d8 <nm_bus_init+0x118>)
  4013a2:	4798      	blx	r3
#endif
	return result;
}
  4013a4:	2000      	movs	r0, #0
  4013a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4013a8:	400e1400 	.word	0x400e1400
  4013ac:	40008000 	.word	0x40008000
  4013b0:	00404629 	.word	0x00404629
  4013b4:	00404655 	.word	0x00404655
  4013b8:	004046d9 	.word	0x004046d9
  4013bc:	004046f9 	.word	0x004046f9
  4013c0:	00404719 	.word	0x00404719
  4013c4:	11e1a300 	.word	0x11e1a300
  4013c8:	02dc6c00 	.word	0x02dc6c00
  4013cc:	0040472d 	.word	0x0040472d
  4013d0:	00404745 	.word	0x00404745
  4013d4:	00404771 	.word	0x00404771
  4013d8:	00401171 	.word	0x00401171

004013dc <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4013dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013e0:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4013e2:	2803      	cmp	r0, #3
  4013e4:	d141      	bne.n	40146a <nm_bus_ioctl+0x8e>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  4013e6:	680e      	ldr	r6, [r1, #0]
  4013e8:	684d      	ldr	r5, [r1, #4]
  4013ea:	890c      	ldrh	r4, [r1, #8]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  4013ec:	2300      	movs	r3, #0
  4013ee:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
  4013f2:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  4013f6:	b136      	cbz	r6, 401406 <nm_bus_ioctl+0x2a>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
  4013f8:	2d00      	cmp	r5, #0
  4013fa:	d133      	bne.n	401464 <nm_bus_ioctl+0x88>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
  4013fc:	f04f 0801 	mov.w	r8, #1
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  401400:	4699      	mov	r9, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
  401402:	ad01      	add	r5, sp, #4
  401404:	e004      	b.n	401410 <nm_bus_ioctl+0x34>
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  401406:	f04f 0800 	mov.w	r8, #0
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
  40140a:	f04f 0901 	mov.w	r9, #1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
  40140e:	ae01      	add	r6, sp, #4
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
  401410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401414:	4b1c      	ldr	r3, [pc, #112]	; (401488 <nm_bus_ioctl+0xac>)
  401416:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  401418:	b1f4      	cbz	r4, 401458 <nm_bus_ioctl+0x7c>
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40141a:	4f1c      	ldr	r7, [pc, #112]	; (40148c <nm_bus_ioctl+0xb0>)
  40141c:	f8df b084 	ldr.w	fp, [pc, #132]	; 4014a4 <nm_bus_ioctl+0xc8>
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  401420:	f8df a084 	ldr.w	sl, [pc, #132]	; 4014a8 <nm_bus_ioctl+0xcc>
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  401424:	2300      	movs	r3, #0
  401426:	461a      	mov	r2, r3
  401428:	7831      	ldrb	r1, [r6, #0]
  40142a:	4638      	mov	r0, r7
  40142c:	47d8      	blx	fp
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40142e:	f10d 0205 	add.w	r2, sp, #5
  401432:	f10d 0106 	add.w	r1, sp, #6
  401436:	4638      	mov	r0, r7
  401438:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  40143a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40143e:	702b      	strb	r3, [r5, #0]

		u16Sz--;
  401440:	3c01      	subs	r4, #1
  401442:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  401444:	f1b8 0f00 	cmp.w	r8, #0
  401448:	d100      	bne.n	40144c <nm_bus_ioctl+0x70>
			pu8Miso++;
  40144a:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  40144c:	f1b9 0f00 	cmp.w	r9, #0
  401450:	d100      	bne.n	401454 <nm_bus_ioctl+0x78>
			pu8Mosi++;
  401452:	3601      	adds	r6, #1
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  401454:	2c00      	cmp	r4, #0
  401456:	d1e5      	bne.n	401424 <nm_bus_ioctl+0x48>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  401458:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40145c:	4b0a      	ldr	r3, [pc, #40]	; (401488 <nm_bus_ioctl+0xac>)
  40145e:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  401460:	2000      	movs	r0, #0
  401462:	e00e      	b.n	401482 <nm_bus_ioctl+0xa6>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
  401464:	f06f 0005 	mvn.w	r0, #5
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
  401468:	e00b      	b.n	401482 <nm_bus_ioctl+0xa6>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("Invalid IOCTL command!\n");
  40146a:	f240 121f 	movw	r2, #287	; 0x11f
  40146e:	4908      	ldr	r1, [pc, #32]	; (401490 <nm_bus_ioctl+0xb4>)
  401470:	4808      	ldr	r0, [pc, #32]	; (401494 <nm_bus_ioctl+0xb8>)
  401472:	4c09      	ldr	r4, [pc, #36]	; (401498 <nm_bus_ioctl+0xbc>)
  401474:	47a0      	blx	r4
  401476:	4809      	ldr	r0, [pc, #36]	; (40149c <nm_bus_ioctl+0xc0>)
  401478:	47a0      	blx	r4
  40147a:	4809      	ldr	r0, [pc, #36]	; (4014a0 <nm_bus_ioctl+0xc4>)
  40147c:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  40147e:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  401482:	b003      	add	sp, #12
  401484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401488:	400e1400 	.word	0x400e1400
  40148c:	40008000 	.word	0x40008000
  401490:	004081ec 	.word	0x004081ec
  401494:	004081fc 	.word	0x004081fc
  401498:	00405121 	.word	0x00405121
  40149c:	00408210 	.word	0x00408210
  4014a0:	00409330 	.word	0x00409330
  4014a4:	004046a1 	.word	0x004046a1
  4014a8:	0040466d 	.word	0x0040466d

004014ac <nm_bus_deinit>:
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4014ac:	2202      	movs	r2, #2
  4014ae:	4b0e      	ldr	r3, [pc, #56]	; (4014e8 <nm_bus_deinit+0x3c>)
  4014b0:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014b2:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  4014b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4014ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4014be:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4014c8:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014ce:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4014d2:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4014dc:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  4014e2:	2000      	movs	r0, #0
  4014e4:	4770      	bx	lr
  4014e6:	bf00      	nop
  4014e8:	40008000 	.word	0x40008000

004014ec <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  4014ec:	b13a      	cbz	r2, 4014fe <m2m_memcpy+0x12>
  4014ee:	3901      	subs	r1, #1
  4014f0:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  4014f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4014f6:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  4014fa:	4290      	cmp	r0, r2
  4014fc:	d1f9      	bne.n	4014f2 <m2m_memcpy+0x6>
  4014fe:	4770      	bx	lr

00401500 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  401500:	b122      	cbz	r2, 40150c <m2m_memset+0xc>
  401502:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  401504:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  401508:	4290      	cmp	r0, r2
  40150a:	d1fb      	bne.n	401504 <m2m_memset+0x4>
  40150c:	4770      	bx	lr
  40150e:	bf00      	nop

00401510 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  401510:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  401512:	7802      	ldrb	r2, [r0, #0]
  401514:	b13a      	cbz	r2, 401526 <m2m_strlen+0x16>
  401516:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  401518:	3001      	adds	r0, #1
  40151a:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40151c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  401520:	2a00      	cmp	r2, #0
  401522:	d1f9      	bne.n	401518 <m2m_strlen+0x8>
  401524:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  401526:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  401528:	4770      	bx	lr
  40152a:	bf00      	nop

0040152c <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  40152c:	4a02      	ldr	r2, [pc, #8]	; (401538 <isr+0xc>)
  40152e:	7813      	ldrb	r3, [r2, #0]
  401530:	3301      	adds	r3, #1
  401532:	b2db      	uxtb	r3, r3
  401534:	7013      	strb	r3, [r2, #0]
  401536:	4770      	bx	lr
  401538:	204008ec 	.word	0x204008ec

0040153c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  40153c:	4770      	bx	lr
  40153e:	bf00      	nop

00401540 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
  401540:	b500      	push	{lr}
  401542:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  401544:	2001      	movs	r0, #1
  401546:	4b0b      	ldr	r3, [pc, #44]	; (401574 <hif_set_rx_done+0x34>)
  401548:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  40154a:	a901      	add	r1, sp, #4
  40154c:	f241 0070 	movw	r0, #4208	; 0x1070
  401550:	4b09      	ldr	r3, [pc, #36]	; (401578 <hif_set_rx_done+0x38>)
  401552:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401554:	4603      	mov	r3, r0
  401556:	b940      	cbnz	r0, 40156a <hif_set_rx_done+0x2a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  401558:	9901      	ldr	r1, [sp, #4]
  40155a:	f041 0102 	orr.w	r1, r1, #2
  40155e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  401560:	f241 0070 	movw	r0, #4208	; 0x1070
  401564:	4b05      	ldr	r3, [pc, #20]	; (40157c <hif_set_rx_done+0x3c>)
  401566:	4798      	blx	r3
  401568:	4603      	mov	r3, r0
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
  40156a:	4618      	mov	r0, r3
  40156c:	b003      	add	sp, #12
  40156e:	f85d fb04 	ldr.w	pc, [sp], #4
  401572:	bf00      	nop
  401574:	00401299 	.word	0x00401299
  401578:	00402809 	.word	0x00402809
  40157c:	00402815 	.word	0x00402815

00401580 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  401580:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  401582:	4b11      	ldr	r3, [pc, #68]	; (4015c8 <hif_chip_wake+0x48>)
  401584:	781b      	ldrb	r3, [r3, #0]
  401586:	f013 0fff 	tst.w	r3, #255	; 0xff
  40158a:	d115      	bne.n	4015b8 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  40158c:	4b0f      	ldr	r3, [pc, #60]	; (4015cc <hif_chip_wake+0x4c>)
  40158e:	781b      	ldrb	r3, [r3, #0]
  401590:	b2db      	uxtb	r3, r3
  401592:	2b03      	cmp	r3, #3
  401594:	d004      	beq.n	4015a0 <hif_chip_wake+0x20>
  401596:	4b0d      	ldr	r3, [pc, #52]	; (4015cc <hif_chip_wake+0x4c>)
  401598:	781b      	ldrb	r3, [r3, #0]
  40159a:	b2db      	uxtb	r3, r3
  40159c:	2b04      	cmp	r3, #4
  40159e:	d10b      	bne.n	4015b8 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  4015a0:	4b0b      	ldr	r3, [pc, #44]	; (4015d0 <hif_chip_wake+0x50>)
  4015a2:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4015a4:	4603      	mov	r3, r0
  4015a6:	b968      	cbnz	r0, 4015c4 <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  4015a8:	f245 6178 	movw	r1, #22136	; 0x5678
  4015ac:	f241 0074 	movw	r0, #4212	; 0x1074
  4015b0:	4b08      	ldr	r3, [pc, #32]	; (4015d4 <hif_chip_wake+0x54>)
  4015b2:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4015b4:	4603      	mov	r3, r0
  4015b6:	b928      	cbnz	r0, 4015c4 <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4015b8:	4a03      	ldr	r2, [pc, #12]	; (4015c8 <hif_chip_wake+0x48>)
  4015ba:	7813      	ldrb	r3, [r2, #0]
  4015bc:	3301      	adds	r3, #1
  4015be:	b2db      	uxtb	r3, r3
  4015c0:	7013      	strb	r3, [r2, #0]
  4015c2:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4015c4:	4618      	mov	r0, r3
  4015c6:	bd08      	pop	{r3, pc}
  4015c8:	20400908 	.word	0x20400908
  4015cc:	204008f8 	.word	0x204008f8
  4015d0:	00402379 	.word	0x00402379
  4015d4:	00402815 	.word	0x00402815

004015d8 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  4015d8:	b500      	push	{lr}
  4015da:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  4015dc:	4b1d      	ldr	r3, [pc, #116]	; (401654 <hif_chip_sleep+0x7c>)
  4015de:	781b      	ldrb	r3, [r3, #0]
  4015e0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4015e4:	d004      	beq.n	4015f0 <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  4015e6:	4a1b      	ldr	r2, [pc, #108]	; (401654 <hif_chip_sleep+0x7c>)
  4015e8:	7813      	ldrb	r3, [r2, #0]
  4015ea:	3b01      	subs	r3, #1
  4015ec:	b2db      	uxtb	r3, r3
  4015ee:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  4015f0:	4b18      	ldr	r3, [pc, #96]	; (401654 <hif_chip_sleep+0x7c>)
  4015f2:	781b      	ldrb	r3, [r3, #0]
  4015f4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4015f8:	d125      	bne.n	401646 <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4015fa:	4b17      	ldr	r3, [pc, #92]	; (401658 <hif_chip_sleep+0x80>)
  4015fc:	781b      	ldrb	r3, [r3, #0]
  4015fe:	b2db      	uxtb	r3, r3
  401600:	2b03      	cmp	r3, #3
  401602:	d004      	beq.n	40160e <hif_chip_sleep+0x36>
  401604:	4b14      	ldr	r3, [pc, #80]	; (401658 <hif_chip_sleep+0x80>)
  401606:	781b      	ldrb	r3, [r3, #0]
  401608:	b2db      	uxtb	r3, r3
  40160a:	2b04      	cmp	r3, #4
  40160c:	d11d      	bne.n	40164a <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  40160e:	2300      	movs	r3, #0
  401610:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  401612:	f244 3121 	movw	r1, #17185	; 0x4321
  401616:	f241 0074 	movw	r0, #4212	; 0x1074
  40161a:	4b10      	ldr	r3, [pc, #64]	; (40165c <hif_chip_sleep+0x84>)
  40161c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40161e:	4603      	mov	r3, r0
  401620:	b9a0      	cbnz	r0, 40164c <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  401622:	a901      	add	r1, sp, #4
  401624:	2001      	movs	r0, #1
  401626:	4b0e      	ldr	r3, [pc, #56]	; (401660 <hif_chip_sleep+0x88>)
  401628:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40162a:	4603      	mov	r3, r0
  40162c:	b970      	cbnz	r0, 40164c <hif_chip_sleep+0x74>
			if(reg&0x2)
  40162e:	9901      	ldr	r1, [sp, #4]
  401630:	f011 0f02 	tst.w	r1, #2
  401634:	d00a      	beq.n	40164c <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  401636:	f021 0102 	bic.w	r1, r1, #2
  40163a:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  40163c:	2001      	movs	r0, #1
  40163e:	4b07      	ldr	r3, [pc, #28]	; (40165c <hif_chip_sleep+0x84>)
  401640:	4798      	blx	r3
  401642:	4603      	mov	r3, r0
  401644:	e002      	b.n	40164c <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  401646:	2300      	movs	r3, #0
  401648:	e000      	b.n	40164c <hif_chip_sleep+0x74>
  40164a:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  40164c:	4618      	mov	r0, r3
  40164e:	b003      	add	sp, #12
  401650:	f85d fb04 	ldr.w	pc, [sp], #4
  401654:	20400908 	.word	0x20400908
  401658:	204008f8 	.word	0x204008f8
  40165c:	00402815 	.word	0x00402815
  401660:	00402809 	.word	0x00402809

00401664 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  401664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401668:	b087      	sub	sp, #28
  40166a:	4680      	mov	r8, r0
  40166c:	460f      	mov	r7, r1
  40166e:	4692      	mov	sl, r2
  401670:	4699      	mov	r9, r3
  401672:	9c10      	ldr	r4, [sp, #64]	; 0x40
  401674:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  401678:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  40167c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  401680:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  401684:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  401688:	2308      	movs	r3, #8
  40168a:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  40168e:	b144      	cbz	r4, 4016a2 <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  401690:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  401694:	fa16 f383 	uxtah	r3, r6, r3
  401698:	442b      	add	r3, r5
  40169a:	b29b      	uxth	r3, r3
  40169c:	f8ad 3016 	strh.w	r3, [sp, #22]
  4016a0:	e006      	b.n	4016b0 <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  4016a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4016a6:	fa19 f383 	uxtah	r3, r9, r3
  4016aa:	b29b      	uxth	r3, r3
  4016ac:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  4016b0:	4b57      	ldr	r3, [pc, #348]	; (401810 <hif_send+0x1ac>)
  4016b2:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4016b4:	4683      	mov	fp, r0
  4016b6:	2800      	cmp	r0, #0
  4016b8:	f040 8095 	bne.w	4017e6 <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  4016bc:	2300      	movs	r3, #0
  4016be:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4016c0:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4016c4:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4016c6:	9b02      	ldr	r3, [sp, #8]
  4016c8:	ea48 0303 	orr.w	r3, r8, r3
  4016cc:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4016ce:	9b02      	ldr	r3, [sp, #8]
  4016d0:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  4016d4:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4016d6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4016da:	9b02      	ldr	r3, [sp, #8]
  4016dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4016e0:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  4016e2:	9902      	ldr	r1, [sp, #8]
  4016e4:	f241 008c 	movw	r0, #4236	; 0x108c
  4016e8:	4b4a      	ldr	r3, [pc, #296]	; (401814 <hif_send+0x1b0>)
  4016ea:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4016ec:	4683      	mov	fp, r0
  4016ee:	2800      	cmp	r0, #0
  4016f0:	f040 808a 	bne.w	401808 <hif_send+0x1a4>


		reg = 0;
  4016f4:	2300      	movs	r3, #0
  4016f6:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  4016f8:	9b02      	ldr	r3, [sp, #8]
  4016fa:	f043 0302 	orr.w	r3, r3, #2
  4016fe:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  401700:	9902      	ldr	r1, [sp, #8]
  401702:	f241 0078 	movw	r0, #4216	; 0x1078
  401706:	4b43      	ldr	r3, [pc, #268]	; (401814 <hif_send+0x1b0>)
  401708:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40170a:	4683      	mov	fp, r0
  40170c:	2800      	cmp	r0, #0
  40170e:	d17b      	bne.n	401808 <hif_send+0x1a4>
		dma_addr = 0;
  401710:	2300      	movs	r3, #0
  401712:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  401714:	f8ad 3006 	strh.w	r3, [sp, #6]
  401718:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40171c:	b29b      	uxth	r3, r3
  40171e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401722:	d21e      	bcs.n	401762 <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  401724:	f241 0878 	movw	r8, #4216	; 0x1078
  401728:	4f3b      	ldr	r7, [pc, #236]	; (401818 <hif_send+0x1b4>)
  40172a:	a902      	add	r1, sp, #8
  40172c:	4640      	mov	r0, r8
  40172e:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  401730:	b9b8      	cbnz	r0, 401762 <hif_send+0xfe>
			if (!(reg & 0x2))
  401732:	9b02      	ldr	r3, [sp, #8]
  401734:	f013 0f02 	tst.w	r3, #2
  401738:	d107      	bne.n	40174a <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  40173a:	a903      	add	r1, sp, #12
  40173c:	4837      	ldr	r0, [pc, #220]	; (40181c <hif_send+0x1b8>)
  40173e:	4b36      	ldr	r3, [pc, #216]	; (401818 <hif_send+0x1b4>)
  401740:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  401742:	b170      	cbz	r0, 401762 <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  401744:	2300      	movs	r3, #0
  401746:	9303      	str	r3, [sp, #12]
  401748:	e00b      	b.n	401762 <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  40174a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40174e:	3301      	adds	r3, #1
  401750:	b29b      	uxth	r3, r3
  401752:	f8ad 3006 	strh.w	r3, [sp, #6]
  401756:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40175a:	b29b      	uxth	r3, r3
  40175c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401760:	d3e3      	bcc.n	40172a <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  401762:	9b03      	ldr	r3, [sp, #12]
  401764:	2b00      	cmp	r3, #0
  401766:	d04d      	beq.n	401804 <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  401768:	9b03      	ldr	r3, [sp, #12]
  40176a:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  40176c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  401770:	b29b      	uxth	r3, r3
  401772:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  401776:	9804      	ldr	r0, [sp, #16]
  401778:	2208      	movs	r2, #8
  40177a:	a905      	add	r1, sp, #20
  40177c:	4b28      	ldr	r3, [pc, #160]	; (401820 <hif_send+0x1bc>)
  40177e:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  401780:	4683      	mov	fp, r0
  401782:	2800      	cmp	r0, #0
  401784:	d140      	bne.n	401808 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  401786:	9b04      	ldr	r3, [sp, #16]
  401788:	3308      	adds	r3, #8
  40178a:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  40178c:	f1ba 0f00 	cmp.w	sl, #0
  401790:	d00a      	beq.n	4017a8 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  401792:	9804      	ldr	r0, [sp, #16]
  401794:	464a      	mov	r2, r9
  401796:	4651      	mov	r1, sl
  401798:	4b21      	ldr	r3, [pc, #132]	; (401820 <hif_send+0x1bc>)
  40179a:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  40179c:	4683      	mov	fp, r0
  40179e:	2800      	cmp	r0, #0
  4017a0:	d132      	bne.n	401808 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4017a2:	9b04      	ldr	r3, [sp, #16]
  4017a4:	444b      	add	r3, r9
  4017a6:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4017a8:	b174      	cbz	r4, 4017c8 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4017aa:	9b04      	ldr	r3, [sp, #16]
  4017ac:	ebc9 0505 	rsb	r5, r9, r5
  4017b0:	441d      	add	r5, r3
  4017b2:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4017b4:	9804      	ldr	r0, [sp, #16]
  4017b6:	4632      	mov	r2, r6
  4017b8:	4621      	mov	r1, r4
  4017ba:	4b19      	ldr	r3, [pc, #100]	; (401820 <hif_send+0x1bc>)
  4017bc:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4017be:	4683      	mov	fp, r0
  4017c0:	bb10      	cbnz	r0, 401808 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4017c2:	9b04      	ldr	r3, [sp, #16]
  4017c4:	441e      	add	r6, r3
  4017c6:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4017c8:	9b03      	ldr	r3, [sp, #12]
  4017ca:	009b      	lsls	r3, r3, #2
  4017cc:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4017ce:	9b02      	ldr	r3, [sp, #8]
  4017d0:	f043 0302 	orr.w	r3, r3, #2
  4017d4:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4017d6:	9902      	ldr	r1, [sp, #8]
  4017d8:	f241 006c 	movw	r0, #4204	; 0x106c
  4017dc:	4b0d      	ldr	r3, [pc, #52]	; (401814 <hif_send+0x1b0>)
  4017de:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4017e0:	4683      	mov	fp, r0
  4017e2:	b988      	cbnz	r0, 401808 <hif_send+0x1a4>
  4017e4:	e00a      	b.n	4017fc <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  4017e6:	f240 129f 	movw	r2, #415	; 0x19f
  4017ea:	490e      	ldr	r1, [pc, #56]	; (401824 <hif_send+0x1c0>)
  4017ec:	480e      	ldr	r0, [pc, #56]	; (401828 <hif_send+0x1c4>)
  4017ee:	4c0f      	ldr	r4, [pc, #60]	; (40182c <hif_send+0x1c8>)
  4017f0:	47a0      	blx	r4
  4017f2:	480f      	ldr	r0, [pc, #60]	; (401830 <hif_send+0x1cc>)
  4017f4:	47a0      	blx	r4
  4017f6:	480f      	ldr	r0, [pc, #60]	; (401834 <hif_send+0x1d0>)
  4017f8:	47a0      	blx	r4
		goto ERR1;
  4017fa:	e005      	b.n	401808 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  4017fc:	4b0e      	ldr	r3, [pc, #56]	; (401838 <hif_send+0x1d4>)
  4017fe:	4798      	blx	r3
  401800:	4683      	mov	fp, r0
  401802:	e001      	b.n	401808 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  401804:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  401808:	4658      	mov	r0, fp
  40180a:	b007      	add	sp, #28
  40180c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401810:	00401581 	.word	0x00401581
  401814:	00402815 	.word	0x00402815
  401818:	00402809 	.word	0x00402809
  40181c:	00150400 	.word	0x00150400
  401820:	00402881 	.word	0x00402881
  401824:	00408480 	.word	0x00408480
  401828:	004081fc 	.word	0x004081fc
  40182c:	00405121 	.word	0x00405121
  401830:	0040823c 	.word	0x0040823c
  401834:	00409330 	.word	0x00409330
  401838:	004015d9 	.word	0x004015d9

0040183c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  40183c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401840:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  401842:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 401b40 <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  401846:	4fa3      	ldr	r7, [pc, #652]	; (401ad4 <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  401848:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 401b44 <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  40184c:	4ea2      	ldr	r6, [pc, #648]	; (401ad8 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40184e:	e17b      	b.n	401b48 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  401850:	f899 3000 	ldrb.w	r3, [r9]
  401854:	3b01      	subs	r3, #1
  401856:	b2db      	uxtb	r3, r3
  401858:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  40185c:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  40185e:	4604      	mov	r4, r0
  401860:	2800      	cmp	r0, #0
  401862:	f040 811a 	bne.w	401a9a <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  401866:	a903      	add	r1, sp, #12
  401868:	f241 0070 	movw	r0, #4208	; 0x1070
  40186c:	4b9b      	ldr	r3, [pc, #620]	; (401adc <hif_handle_isr+0x2a0>)
  40186e:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  401870:	4604      	mov	r4, r0
  401872:	2800      	cmp	r0, #0
  401874:	f040 8106 	bne.w	401a84 <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  401878:	9b03      	ldr	r3, [sp, #12]
  40187a:	f013 0f01 	tst.w	r3, #1
  40187e:	f000 80f5 	beq.w	401a6c <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  401882:	4b97      	ldr	r3, [pc, #604]	; (401ae0 <hif_handle_isr+0x2a4>)
  401884:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  401886:	9903      	ldr	r1, [sp, #12]
  401888:	f021 0101 	bic.w	r1, r1, #1
  40188c:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  40188e:	f241 0070 	movw	r0, #4208	; 0x1070
  401892:	4b94      	ldr	r3, [pc, #592]	; (401ae4 <hif_handle_isr+0x2a8>)
  401894:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  401896:	4604      	mov	r4, r0
  401898:	2800      	cmp	r0, #0
  40189a:	f040 810e 	bne.w	401aba <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  40189e:	2200      	movs	r2, #0
  4018a0:	4b91      	ldr	r3, [pc, #580]	; (401ae8 <hif_handle_isr+0x2ac>)
  4018a2:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  4018a4:	9d03      	ldr	r5, [sp, #12]
  4018a6:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  4018aa:	2d00      	cmp	r5, #0
  4018ac:	f000 80d1 	beq.w	401a52 <hif_handle_isr+0x216>
					uint32 address = 0;
  4018b0:	a906      	add	r1, sp, #24
  4018b2:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  4018b6:	f241 0084 	movw	r0, #4228	; 0x1084
  4018ba:	4b88      	ldr	r3, [pc, #544]	; (401adc <hif_handle_isr+0x2a0>)
  4018bc:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  4018be:	4604      	mov	r4, r0
  4018c0:	b168      	cbz	r0, 4018de <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  4018c2:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  4018c6:	4641      	mov	r1, r8
  4018c8:	4630      	mov	r0, r6
  4018ca:	4d88      	ldr	r5, [pc, #544]	; (401aec <hif_handle_isr+0x2b0>)
  4018cc:	47a8      	blx	r5
  4018ce:	4888      	ldr	r0, [pc, #544]	; (401af0 <hif_handle_isr+0x2b4>)
  4018d0:	47a8      	blx	r5
  4018d2:	4888      	ldr	r0, [pc, #544]	; (401af4 <hif_handle_isr+0x2b8>)
  4018d4:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4018d6:	2001      	movs	r0, #1
  4018d8:	4b81      	ldr	r3, [pc, #516]	; (401ae0 <hif_handle_isr+0x2a4>)
  4018da:	4798      	blx	r3
  4018dc:	e0eb      	b.n	401ab6 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4018de:	2204      	movs	r2, #4
  4018e0:	a904      	add	r1, sp, #16
  4018e2:	9805      	ldr	r0, [sp, #20]
  4018e4:	4b84      	ldr	r3, [pc, #528]	; (401af8 <hif_handle_isr+0x2bc>)
  4018e6:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4018e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4018ec:	b29b      	uxth	r3, r3
  4018ee:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4018f2:	4604      	mov	r4, r0
  4018f4:	b168      	cbz	r0, 401912 <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  4018f6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  4018fa:	4641      	mov	r1, r8
  4018fc:	4630      	mov	r0, r6
  4018fe:	4d7b      	ldr	r5, [pc, #492]	; (401aec <hif_handle_isr+0x2b0>)
  401900:	47a8      	blx	r5
  401902:	487e      	ldr	r0, [pc, #504]	; (401afc <hif_handle_isr+0x2c0>)
  401904:	47a8      	blx	r5
  401906:	487b      	ldr	r0, [pc, #492]	; (401af4 <hif_handle_isr+0x2b8>)
  401908:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  40190a:	2001      	movs	r0, #1
  40190c:	4b74      	ldr	r3, [pc, #464]	; (401ae0 <hif_handle_isr+0x2a4>)
  40190e:	4798      	blx	r3
  401910:	e0d1      	b.n	401ab6 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  401912:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  401916:	b29b      	uxth	r3, r3
  401918:	429d      	cmp	r5, r3
  40191a:	d01e      	beq.n	40195a <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  40191c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  401920:	b29b      	uxth	r3, r3
  401922:	1aeb      	subs	r3, r5, r3
  401924:	2b04      	cmp	r3, #4
  401926:	dd18      	ble.n	40195a <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  401928:	f240 12df 	movw	r2, #479	; 0x1df
  40192c:	4641      	mov	r1, r8
  40192e:	4630      	mov	r0, r6
  401930:	4c6e      	ldr	r4, [pc, #440]	; (401aec <hif_handle_isr+0x2b0>)
  401932:	47a0      	blx	r4
  401934:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  401938:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40193c:	f89d 1011 	ldrb.w	r1, [sp, #17]
  401940:	9100      	str	r1, [sp, #0]
  401942:	b292      	uxth	r2, r2
  401944:	4629      	mov	r1, r5
  401946:	486e      	ldr	r0, [pc, #440]	; (401b00 <hif_handle_isr+0x2c4>)
  401948:	47a0      	blx	r4
  40194a:	486a      	ldr	r0, [pc, #424]	; (401af4 <hif_handle_isr+0x2b8>)
  40194c:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  40194e:	2001      	movs	r0, #1
  401950:	4b63      	ldr	r3, [pc, #396]	; (401ae0 <hif_handle_isr+0x2a4>)
  401952:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  401954:	f06f 0405 	mvn.w	r4, #5
  401958:	e0ad      	b.n	401ab6 <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  40195a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40195e:	b2db      	uxtb	r3, r3
  401960:	2b01      	cmp	r3, #1
  401962:	d10d      	bne.n	401980 <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  401964:	4b67      	ldr	r3, [pc, #412]	; (401b04 <hif_handle_isr+0x2c8>)
  401966:	681b      	ldr	r3, [r3, #0]
  401968:	2b00      	cmp	r3, #0
  40196a:	d060      	beq.n	401a2e <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  40196c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401970:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  401974:	3908      	subs	r1, #8
  401976:	9a05      	ldr	r2, [sp, #20]
  401978:	3208      	adds	r2, #8
  40197a:	b289      	uxth	r1, r1
  40197c:	4798      	blx	r3
  40197e:	e056      	b.n	401a2e <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  401980:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401984:	b2db      	uxtb	r3, r3
  401986:	2b02      	cmp	r3, #2
  401988:	d10d      	bne.n	4019a6 <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  40198a:	4b5f      	ldr	r3, [pc, #380]	; (401b08 <hif_handle_isr+0x2cc>)
  40198c:	681b      	ldr	r3, [r3, #0]
  40198e:	2b00      	cmp	r3, #0
  401990:	d04d      	beq.n	401a2e <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401992:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401996:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40199a:	3908      	subs	r1, #8
  40199c:	9a05      	ldr	r2, [sp, #20]
  40199e:	3208      	adds	r2, #8
  4019a0:	b289      	uxth	r1, r1
  4019a2:	4798      	blx	r3
  4019a4:	e043      	b.n	401a2e <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4019a6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4019aa:	b2db      	uxtb	r3, r3
  4019ac:	2b04      	cmp	r3, #4
  4019ae:	d10d      	bne.n	4019cc <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  4019b0:	4b56      	ldr	r3, [pc, #344]	; (401b0c <hif_handle_isr+0x2d0>)
  4019b2:	681b      	ldr	r3, [r3, #0]
  4019b4:	2b00      	cmp	r3, #0
  4019b6:	d03a      	beq.n	401a2e <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4019b8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4019bc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4019c0:	3908      	subs	r1, #8
  4019c2:	9a05      	ldr	r2, [sp, #20]
  4019c4:	3208      	adds	r2, #8
  4019c6:	b289      	uxth	r1, r1
  4019c8:	4798      	blx	r3
  4019ca:	e030      	b.n	401a2e <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4019cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4019d0:	b2db      	uxtb	r3, r3
  4019d2:	2b06      	cmp	r3, #6
  4019d4:	d10c      	bne.n	4019f0 <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  4019d6:	4b4e      	ldr	r3, [pc, #312]	; (401b10 <hif_handle_isr+0x2d4>)
  4019d8:	681b      	ldr	r3, [r3, #0]
  4019da:	b343      	cbz	r3, 401a2e <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4019dc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4019e0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4019e4:	3908      	subs	r1, #8
  4019e6:	9a05      	ldr	r2, [sp, #20]
  4019e8:	3208      	adds	r2, #8
  4019ea:	b289      	uxth	r1, r1
  4019ec:	4798      	blx	r3
  4019ee:	e01e      	b.n	401a2e <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4019f0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4019f4:	b2db      	uxtb	r3, r3
  4019f6:	2b07      	cmp	r3, #7
  4019f8:	d10c      	bne.n	401a14 <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  4019fa:	4b46      	ldr	r3, [pc, #280]	; (401b14 <hif_handle_isr+0x2d8>)
  4019fc:	681b      	ldr	r3, [r3, #0]
  4019fe:	b1b3      	cbz	r3, 401a2e <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401a00:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401a04:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  401a08:	3908      	subs	r1, #8
  401a0a:	9a05      	ldr	r2, [sp, #20]
  401a0c:	3208      	adds	r2, #8
  401a0e:	b289      	uxth	r1, r1
  401a10:	4798      	blx	r3
  401a12:	e00c      	b.n	401a2e <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  401a14:	f240 2202 	movw	r2, #514	; 0x202
  401a18:	4641      	mov	r1, r8
  401a1a:	4630      	mov	r0, r6
  401a1c:	4c33      	ldr	r4, [pc, #204]	; (401aec <hif_handle_isr+0x2b0>)
  401a1e:	47a0      	blx	r4
  401a20:	483d      	ldr	r0, [pc, #244]	; (401b18 <hif_handle_isr+0x2dc>)
  401a22:	47a0      	blx	r4
  401a24:	4833      	ldr	r0, [pc, #204]	; (401af4 <hif_handle_isr+0x2b8>)
  401a26:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  401a28:	f06f 0405 	mvn.w	r4, #5
  401a2c:	e043      	b.n	401ab6 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  401a2e:	4b2e      	ldr	r3, [pc, #184]	; (401ae8 <hif_handle_isr+0x2ac>)
  401a30:	781b      	ldrb	r3, [r3, #0]
  401a32:	f013 0fff 	tst.w	r3, #255	; 0xff
  401a36:	d13b      	bne.n	401ab0 <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  401a38:	f240 2209 	movw	r2, #521	; 0x209
  401a3c:	4641      	mov	r1, r8
  401a3e:	4630      	mov	r0, r6
  401a40:	4c2a      	ldr	r4, [pc, #168]	; (401aec <hif_handle_isr+0x2b0>)
  401a42:	47a0      	blx	r4
  401a44:	4835      	ldr	r0, [pc, #212]	; (401b1c <hif_handle_isr+0x2e0>)
  401a46:	47a0      	blx	r4
  401a48:	482a      	ldr	r0, [pc, #168]	; (401af4 <hif_handle_isr+0x2b8>)
  401a4a:	47a0      	blx	r4
						ret = hif_set_rx_done();
  401a4c:	4b34      	ldr	r3, [pc, #208]	; (401b20 <hif_handle_isr+0x2e4>)
  401a4e:	4798      	blx	r3
  401a50:	e02e      	b.n	401ab0 <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  401a52:	f240 2211 	movw	r2, #529	; 0x211
  401a56:	4641      	mov	r1, r8
  401a58:	4630      	mov	r0, r6
  401a5a:	4c24      	ldr	r4, [pc, #144]	; (401aec <hif_handle_isr+0x2b0>)
  401a5c:	47a0      	blx	r4
  401a5e:	4831      	ldr	r0, [pc, #196]	; (401b24 <hif_handle_isr+0x2e8>)
  401a60:	47a0      	blx	r4
  401a62:	4824      	ldr	r0, [pc, #144]	; (401af4 <hif_handle_isr+0x2b8>)
  401a64:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  401a66:	f06f 0401 	mvn.w	r4, #1
  401a6a:	e026      	b.n	401aba <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  401a6c:	f44f 7206 	mov.w	r2, #536	; 0x218
  401a70:	4641      	mov	r1, r8
  401a72:	4630      	mov	r0, r6
  401a74:	4c1d      	ldr	r4, [pc, #116]	; (401aec <hif_handle_isr+0x2b0>)
  401a76:	47a0      	blx	r4
  401a78:	9903      	ldr	r1, [sp, #12]
  401a7a:	482b      	ldr	r0, [pc, #172]	; (401b28 <hif_handle_isr+0x2ec>)
  401a7c:	47a0      	blx	r4
  401a7e:	481d      	ldr	r0, [pc, #116]	; (401af4 <hif_handle_isr+0x2b8>)
  401a80:	47a0      	blx	r4
  401a82:	e015      	b.n	401ab0 <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  401a84:	f240 221e 	movw	r2, #542	; 0x21e
  401a88:	4641      	mov	r1, r8
  401a8a:	4630      	mov	r0, r6
  401a8c:	4d17      	ldr	r5, [pc, #92]	; (401aec <hif_handle_isr+0x2b0>)
  401a8e:	47a8      	blx	r5
  401a90:	4826      	ldr	r0, [pc, #152]	; (401b2c <hif_handle_isr+0x2f0>)
  401a92:	47a8      	blx	r5
  401a94:	4817      	ldr	r0, [pc, #92]	; (401af4 <hif_handle_isr+0x2b8>)
  401a96:	47a8      	blx	r5
  401a98:	e00f      	b.n	401aba <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  401a9a:	f44f 7209 	mov.w	r2, #548	; 0x224
  401a9e:	4641      	mov	r1, r8
  401aa0:	4630      	mov	r0, r6
  401aa2:	4d12      	ldr	r5, [pc, #72]	; (401aec <hif_handle_isr+0x2b0>)
  401aa4:	47a8      	blx	r5
  401aa6:	4822      	ldr	r0, [pc, #136]	; (401b30 <hif_handle_isr+0x2f4>)
  401aa8:	47a8      	blx	r5
  401aaa:	4812      	ldr	r0, [pc, #72]	; (401af4 <hif_handle_isr+0x2b8>)
  401aac:	47a8      	blx	r5
  401aae:	e004      	b.n	401aba <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  401ab0:	4b20      	ldr	r3, [pc, #128]	; (401b34 <hif_handle_isr+0x2f8>)
  401ab2:	4798      	blx	r3
  401ab4:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  401ab6:	2c00      	cmp	r4, #0
  401ab8:	d046      	beq.n	401b48 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  401aba:	f240 2243 	movw	r2, #579	; 0x243
  401abe:	491e      	ldr	r1, [pc, #120]	; (401b38 <hif_handle_isr+0x2fc>)
  401ac0:	4630      	mov	r0, r6
  401ac2:	4d0a      	ldr	r5, [pc, #40]	; (401aec <hif_handle_isr+0x2b0>)
  401ac4:	47a8      	blx	r5
  401ac6:	4621      	mov	r1, r4
  401ac8:	481c      	ldr	r0, [pc, #112]	; (401b3c <hif_handle_isr+0x300>)
  401aca:	47a8      	blx	r5
  401acc:	4809      	ldr	r0, [pc, #36]	; (401af4 <hif_handle_isr+0x2b8>)
  401ace:	47a8      	blx	r5
			}
		}
  401ad0:	e6c4      	b.n	40185c <hif_handle_isr+0x20>
  401ad2:	bf00      	nop
  401ad4:	00401581 	.word	0x00401581
  401ad8:	004081fc 	.word	0x004081fc
  401adc:	00402809 	.word	0x00402809
  401ae0:	00401299 	.word	0x00401299
  401ae4:	00402815 	.word	0x00402815
  401ae8:	20400900 	.word	0x20400900
  401aec:	00405121 	.word	0x00405121
  401af0:	0040825c 	.word	0x0040825c
  401af4:	00409330 	.word	0x00409330
  401af8:	00402821 	.word	0x00402821
  401afc:	00408284 	.word	0x00408284
  401b00:	0040829c 	.word	0x0040829c
  401b04:	204008e8 	.word	0x204008e8
  401b08:	204008fc 	.word	0x204008fc
  401b0c:	20400904 	.word	0x20400904
  401b10:	204008e4 	.word	0x204008e4
  401b14:	204008f4 	.word	0x204008f4
  401b18:	004082dc 	.word	0x004082dc
  401b1c:	004082f4 	.word	0x004082f4
  401b20:	00401541 	.word	0x00401541
  401b24:	00408318 	.word	0x00408318
  401b28:	0040832c 	.word	0x0040832c
  401b2c:	00408348 	.word	0x00408348
  401b30:	0040836c 	.word	0x0040836c
  401b34:	004015d9 	.word	0x004015d9
  401b38:	0040848c 	.word	0x0040848c
  401b3c:	0040838c 	.word	0x0040838c
  401b40:	204008ec 	.word	0x204008ec
  401b44:	00408228 	.word	0x00408228

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  401b48:	f899 3000 	ldrb.w	r3, [r9]
  401b4c:	f013 0fff 	tst.w	r3, #255	; 0xff
  401b50:	f47f ae7e 	bne.w	401850 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  401b54:	2000      	movs	r0, #0
  401b56:	b007      	add	sp, #28
  401b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00401b5c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  401b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401b60:	b083      	sub	sp, #12
  401b62:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  401b64:	2a00      	cmp	r2, #0
  401b66:	bf18      	it	ne
  401b68:	2900      	cmpne	r1, #0
  401b6a:	d003      	beq.n	401b74 <hif_receive+0x18>
  401b6c:	4605      	mov	r5, r0
  401b6e:	460f      	mov	r7, r1
  401b70:	4616      	mov	r6, r2
  401b72:	b9a0      	cbnz	r0, 401b9e <hif_receive+0x42>
	{
		if(isDone)
  401b74:	b134      	cbz	r4, 401b84 <hif_receive+0x28>
		{
			gu8HifSizeDone = 1;
  401b76:	2201      	movs	r2, #1
  401b78:	4b31      	ldr	r3, [pc, #196]	; (401c40 <hif_receive+0xe4>)
  401b7a:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  401b7c:	4b31      	ldr	r3, [pc, #196]	; (401c44 <hif_receive+0xe8>)
  401b7e:	4798      	blx	r3
  401b80:	4603      	mov	r3, r0
  401b82:	e058      	b.n	401c36 <hif_receive+0xda>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  401b84:	f240 2269 	movw	r2, #617	; 0x269
  401b88:	492f      	ldr	r1, [pc, #188]	; (401c48 <hif_receive+0xec>)
  401b8a:	4830      	ldr	r0, [pc, #192]	; (401c4c <hif_receive+0xf0>)
  401b8c:	4c30      	ldr	r4, [pc, #192]	; (401c50 <hif_receive+0xf4>)
  401b8e:	47a0      	blx	r4
  401b90:	4830      	ldr	r0, [pc, #192]	; (401c54 <hif_receive+0xf8>)
  401b92:	47a0      	blx	r4
  401b94:	4830      	ldr	r0, [pc, #192]	; (401c58 <hif_receive+0xfc>)
  401b96:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  401b98:	f06f 030b 	mvn.w	r3, #11
  401b9c:	e04b      	b.n	401c36 <hif_receive+0xda>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  401b9e:	4669      	mov	r1, sp
  401ba0:	f241 0070 	movw	r0, #4208	; 0x1070
  401ba4:	4b2d      	ldr	r3, [pc, #180]	; (401c5c <hif_receive+0x100>)
  401ba6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401ba8:	4603      	mov	r3, r0
  401baa:	2800      	cmp	r0, #0
  401bac:	d143      	bne.n	401c36 <hif_receive+0xda>


	size = (uint16)((reg >> 2) & 0xfff);
  401bae:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  401bb2:	a901      	add	r1, sp, #4
  401bb4:	f241 0084 	movw	r0, #4228	; 0x1084
  401bb8:	4b28      	ldr	r3, [pc, #160]	; (401c5c <hif_receive+0x100>)
  401bba:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401bbc:	4603      	mov	r3, r0
  401bbe:	2800      	cmp	r0, #0
  401bc0:	d139      	bne.n	401c36 <hif_receive+0xda>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  401bc2:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  401bc6:	4546      	cmp	r6, r8
  401bc8:	d90e      	bls.n	401be8 <hif_receive+0x8c>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  401bca:	f240 227a 	movw	r2, #634	; 0x27a
  401bce:	491e      	ldr	r1, [pc, #120]	; (401c48 <hif_receive+0xec>)
  401bd0:	481e      	ldr	r0, [pc, #120]	; (401c4c <hif_receive+0xf0>)
  401bd2:	4c1f      	ldr	r4, [pc, #124]	; (401c50 <hif_receive+0xf4>)
  401bd4:	47a0      	blx	r4
  401bd6:	4642      	mov	r2, r8
  401bd8:	4631      	mov	r1, r6
  401bda:	4821      	ldr	r0, [pc, #132]	; (401c60 <hif_receive+0x104>)
  401bdc:	47a0      	blx	r4
  401bde:	481e      	ldr	r0, [pc, #120]	; (401c58 <hif_receive+0xfc>)
  401be0:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  401be2:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  401be6:	e026      	b.n	401c36 <hif_receive+0xda>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  401be8:	9b01      	ldr	r3, [sp, #4]
  401bea:	429d      	cmp	r5, r3
  401bec:	d304      	bcc.n	401bf8 <hif_receive+0x9c>
  401bee:	eb05 0906 	add.w	r9, r5, r6
  401bf2:	4443      	add	r3, r8
  401bf4:	4599      	cmp	r9, r3
  401bf6:	d90c      	bls.n	401c12 <hif_receive+0xb6>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  401bf8:	f44f 7220 	mov.w	r2, #640	; 0x280
  401bfc:	4912      	ldr	r1, [pc, #72]	; (401c48 <hif_receive+0xec>)
  401bfe:	4813      	ldr	r0, [pc, #76]	; (401c4c <hif_receive+0xf0>)
  401c00:	4c13      	ldr	r4, [pc, #76]	; (401c50 <hif_receive+0xf4>)
  401c02:	47a0      	blx	r4
  401c04:	4817      	ldr	r0, [pc, #92]	; (401c64 <hif_receive+0x108>)
  401c06:	47a0      	blx	r4
  401c08:	4813      	ldr	r0, [pc, #76]	; (401c58 <hif_receive+0xfc>)
  401c0a:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  401c0c:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  401c10:	e011      	b.n	401c36 <hif_receive+0xda>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  401c12:	4632      	mov	r2, r6
  401c14:	4639      	mov	r1, r7
  401c16:	4628      	mov	r0, r5
  401c18:	4b13      	ldr	r3, [pc, #76]	; (401c68 <hif_receive+0x10c>)
  401c1a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401c1c:	4603      	mov	r3, r0
  401c1e:	b950      	cbnz	r0, 401c36 <hif_receive+0xda>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  401c20:	9a01      	ldr	r2, [sp, #4]
  401c22:	4442      	add	r2, r8
  401c24:	454a      	cmp	r2, r9
  401c26:	d000      	beq.n	401c2a <hif_receive+0xce>
  401c28:	b12c      	cbz	r4, 401c36 <hif_receive+0xda>
	{
		gu8HifSizeDone = 1;
  401c2a:	2201      	movs	r2, #1
  401c2c:	4b04      	ldr	r3, [pc, #16]	; (401c40 <hif_receive+0xe4>)
  401c2e:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  401c30:	4b04      	ldr	r3, [pc, #16]	; (401c44 <hif_receive+0xe8>)
  401c32:	4798      	blx	r3
  401c34:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  401c36:	4618      	mov	r0, r3
  401c38:	b003      	add	sp, #12
  401c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401c3e:	bf00      	nop
  401c40:	20400900 	.word	0x20400900
  401c44:	00401541 	.word	0x00401541
  401c48:	00408230 	.word	0x00408230
  401c4c:	004081fc 	.word	0x004081fc
  401c50:	00405121 	.word	0x00405121
  401c54:	004083bc 	.word	0x004083bc
  401c58:	00409330 	.word	0x00409330
  401c5c:	00402809 	.word	0x00402809
  401c60:	004083dc 	.word	0x004083dc
  401c64:	00408420 	.word	0x00408420
  401c68:	00402821 	.word	0x00402821

00401c6c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  401c6c:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  401c6e:	1e43      	subs	r3, r0, #1
  401c70:	2b06      	cmp	r3, #6
  401c72:	d81d      	bhi.n	401cb0 <hif_register_cb+0x44>
  401c74:	e8df f003 	tbb	[pc, r3]
  401c78:	0c100408 	.word	0x0c100408
  401c7c:	141c      	.short	0x141c
  401c7e:	18          	.byte	0x18
  401c7f:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  401c80:	4b13      	ldr	r3, [pc, #76]	; (401cd0 <hif_register_cb+0x64>)
  401c82:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401c84:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  401c86:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  401c88:	4b12      	ldr	r3, [pc, #72]	; (401cd4 <hif_register_cb+0x68>)
  401c8a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401c8c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  401c8e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  401c90:	4b11      	ldr	r3, [pc, #68]	; (401cd8 <hif_register_cb+0x6c>)
  401c92:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401c94:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  401c96:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  401c98:	4b10      	ldr	r3, [pc, #64]	; (401cdc <hif_register_cb+0x70>)
  401c9a:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401c9c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  401c9e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  401ca0:	4b0f      	ldr	r3, [pc, #60]	; (401ce0 <hif_register_cb+0x74>)
  401ca2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401ca4:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  401ca6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  401ca8:	4b0e      	ldr	r3, [pc, #56]	; (401ce4 <hif_register_cb+0x78>)
  401caa:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401cac:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  401cae:	bd38      	pop	{r3, r4, r5, pc}
  401cb0:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  401cb2:	f240 22b9 	movw	r2, #697	; 0x2b9
  401cb6:	490c      	ldr	r1, [pc, #48]	; (401ce8 <hif_register_cb+0x7c>)
  401cb8:	480c      	ldr	r0, [pc, #48]	; (401cec <hif_register_cb+0x80>)
  401cba:	4d0d      	ldr	r5, [pc, #52]	; (401cf0 <hif_register_cb+0x84>)
  401cbc:	47a8      	blx	r5
  401cbe:	4621      	mov	r1, r4
  401cc0:	480c      	ldr	r0, [pc, #48]	; (401cf4 <hif_register_cb+0x88>)
  401cc2:	47a8      	blx	r5
  401cc4:	480c      	ldr	r0, [pc, #48]	; (401cf8 <hif_register_cb+0x8c>)
  401cc6:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  401cc8:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  401ccc:	bd38      	pop	{r3, r4, r5, pc}
  401cce:	bf00      	nop
  401cd0:	204008fc 	.word	0x204008fc
  401cd4:	204008e8 	.word	0x204008e8
  401cd8:	20400904 	.word	0x20400904
  401cdc:	204008f0 	.word	0x204008f0
  401ce0:	204008e4 	.word	0x204008e4
  401ce4:	204008f4 	.word	0x204008f4
  401ce8:	00408470 	.word	0x00408470
  401cec:	004081fc 	.word	0x004081fc
  401cf0:	00405121 	.word	0x00405121
  401cf4:	00408464 	.word	0x00408464
  401cf8:	00409330 	.word	0x00409330

00401cfc <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  401cfc:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  401cfe:	2400      	movs	r4, #0
  401d00:	4b09      	ldr	r3, [pc, #36]	; (401d28 <hif_init+0x2c>)
  401d02:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  401d04:	4b09      	ldr	r3, [pc, #36]	; (401d2c <hif_init+0x30>)
  401d06:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  401d08:	4b09      	ldr	r3, [pc, #36]	; (401d30 <hif_init+0x34>)
  401d0a:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  401d0c:	4b09      	ldr	r3, [pc, #36]	; (401d34 <hif_init+0x38>)
  401d0e:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  401d10:	4b09      	ldr	r3, [pc, #36]	; (401d38 <hif_init+0x3c>)
  401d12:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  401d14:	4809      	ldr	r0, [pc, #36]	; (401d3c <hif_init+0x40>)
  401d16:	4b0a      	ldr	r3, [pc, #40]	; (401d40 <hif_init+0x44>)
  401d18:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  401d1a:	490a      	ldr	r1, [pc, #40]	; (401d44 <hif_init+0x48>)
  401d1c:	2003      	movs	r0, #3
  401d1e:	4b0a      	ldr	r3, [pc, #40]	; (401d48 <hif_init+0x4c>)
  401d20:	4798      	blx	r3

	return M2M_SUCCESS;
}
  401d22:	4620      	mov	r0, r4
  401d24:	bd10      	pop	{r4, pc}
  401d26:	bf00      	nop
  401d28:	204008e8 	.word	0x204008e8
  401d2c:	204008fc 	.word	0x204008fc
  401d30:	20400908 	.word	0x20400908
  401d34:	204008f8 	.word	0x204008f8
  401d38:	204008ec 	.word	0x204008ec
  401d3c:	0040152d 	.word	0x0040152d
  401d40:	00401219 	.word	0x00401219
  401d44:	0040153d 	.word	0x0040153d
  401d48:	00401c6d 	.word	0x00401c6d

00401d4c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  401d4c:	b530      	push	{r4, r5, lr}
  401d4e:	b09f      	sub	sp, #124	; 0x7c
  401d50:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  401d52:	282c      	cmp	r0, #44	; 0x2c
  401d54:	d111      	bne.n	401d7a <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  401d56:	2300      	movs	r3, #0
  401d58:	2204      	movs	r2, #4
  401d5a:	a903      	add	r1, sp, #12
  401d5c:	4628      	mov	r0, r5
  401d5e:	4c90      	ldr	r4, [pc, #576]	; (401fa0 <m2m_wifi_cb+0x254>)
  401d60:	47a0      	blx	r4
  401d62:	2800      	cmp	r0, #0
  401d64:	f040 8119 	bne.w	401f9a <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401d68:	4b8e      	ldr	r3, [pc, #568]	; (401fa4 <m2m_wifi_cb+0x258>)
  401d6a:	681b      	ldr	r3, [r3, #0]
  401d6c:	2b00      	cmp	r3, #0
  401d6e:	f000 8114 	beq.w	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  401d72:	a903      	add	r1, sp, #12
  401d74:	202c      	movs	r0, #44	; 0x2c
  401d76:	4798      	blx	r3
  401d78:	e10f      	b.n	401f9a <m2m_wifi_cb+0x24e>
  401d7a:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  401d7c:	281b      	cmp	r0, #27
  401d7e:	d111      	bne.n	401da4 <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  401d80:	2300      	movs	r3, #0
  401d82:	2208      	movs	r2, #8
  401d84:	a903      	add	r1, sp, #12
  401d86:	4628      	mov	r0, r5
  401d88:	4c85      	ldr	r4, [pc, #532]	; (401fa0 <m2m_wifi_cb+0x254>)
  401d8a:	47a0      	blx	r4
  401d8c:	2800      	cmp	r0, #0
  401d8e:	f040 8104 	bne.w	401f9a <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401d92:	4b84      	ldr	r3, [pc, #528]	; (401fa4 <m2m_wifi_cb+0x258>)
  401d94:	681b      	ldr	r3, [r3, #0]
  401d96:	2b00      	cmp	r3, #0
  401d98:	f000 80ff 	beq.w	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  401d9c:	a903      	add	r1, sp, #12
  401d9e:	201b      	movs	r0, #27
  401da0:	4798      	blx	r3
  401da2:	e0fa      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  401da4:	2806      	cmp	r0, #6
  401da6:	d111      	bne.n	401dcc <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  401da8:	2301      	movs	r3, #1
  401daa:	2230      	movs	r2, #48	; 0x30
  401dac:	a903      	add	r1, sp, #12
  401dae:	4628      	mov	r0, r5
  401db0:	4c7b      	ldr	r4, [pc, #492]	; (401fa0 <m2m_wifi_cb+0x254>)
  401db2:	47a0      	blx	r4
  401db4:	2800      	cmp	r0, #0
  401db6:	f040 80f0 	bne.w	401f9a <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401dba:	4b7a      	ldr	r3, [pc, #488]	; (401fa4 <m2m_wifi_cb+0x258>)
  401dbc:	681b      	ldr	r3, [r3, #0]
  401dbe:	2b00      	cmp	r3, #0
  401dc0:	f000 80eb 	beq.w	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  401dc4:	a903      	add	r1, sp, #12
  401dc6:	2006      	movs	r0, #6
  401dc8:	4798      	blx	r3
  401dca:	e0e6      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  401dcc:	280e      	cmp	r0, #14
  401dce:	f000 80e4 	beq.w	401f9a <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  401dd2:	2832      	cmp	r0, #50	; 0x32
  401dd4:	d111      	bne.n	401dfa <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  401dd6:	2300      	movs	r3, #0
  401dd8:	2210      	movs	r2, #16
  401dda:	a903      	add	r1, sp, #12
  401ddc:	4628      	mov	r0, r5
  401dde:	4c70      	ldr	r4, [pc, #448]	; (401fa0 <m2m_wifi_cb+0x254>)
  401de0:	47a0      	blx	r4
  401de2:	2800      	cmp	r0, #0
  401de4:	f040 80d9 	bne.w	401f9a <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401de8:	4b6e      	ldr	r3, [pc, #440]	; (401fa4 <m2m_wifi_cb+0x258>)
  401dea:	681b      	ldr	r3, [r3, #0]
  401dec:	2b00      	cmp	r3, #0
  401dee:	f000 80d4 	beq.w	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  401df2:	a903      	add	r1, sp, #12
  401df4:	2032      	movs	r0, #50	; 0x32
  401df6:	4798      	blx	r3
  401df8:	e0cf      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  401dfa:	282f      	cmp	r0, #47	; 0x2f
  401dfc:	d116      	bne.n	401e2c <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  401dfe:	2264      	movs	r2, #100	; 0x64
  401e00:	2100      	movs	r1, #0
  401e02:	a803      	add	r0, sp, #12
  401e04:	4b68      	ldr	r3, [pc, #416]	; (401fa8 <m2m_wifi_cb+0x25c>)
  401e06:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  401e08:	2300      	movs	r3, #0
  401e0a:	2264      	movs	r2, #100	; 0x64
  401e0c:	a903      	add	r1, sp, #12
  401e0e:	4628      	mov	r0, r5
  401e10:	4c63      	ldr	r4, [pc, #396]	; (401fa0 <m2m_wifi_cb+0x254>)
  401e12:	47a0      	blx	r4
  401e14:	2800      	cmp	r0, #0
  401e16:	f040 80c0 	bne.w	401f9a <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401e1a:	4b62      	ldr	r3, [pc, #392]	; (401fa4 <m2m_wifi_cb+0x258>)
  401e1c:	681b      	ldr	r3, [r3, #0]
  401e1e:	2b00      	cmp	r3, #0
  401e20:	f000 80bb 	beq.w	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  401e24:	a903      	add	r1, sp, #12
  401e26:	202f      	movs	r0, #47	; 0x2f
  401e28:	4798      	blx	r3
  401e2a:	e0b6      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  401e2c:	2834      	cmp	r0, #52	; 0x34
  401e2e:	d120      	bne.n	401e72 <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  401e30:	2300      	movs	r3, #0
  401e32:	2204      	movs	r2, #4
  401e34:	a903      	add	r1, sp, #12
  401e36:	4628      	mov	r0, r5
  401e38:	4c59      	ldr	r4, [pc, #356]	; (401fa0 <m2m_wifi_cb+0x254>)
  401e3a:	47a0      	blx	r4
  401e3c:	2800      	cmp	r0, #0
  401e3e:	f040 80ac 	bne.w	401f9a <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  401e42:	485a      	ldr	r0, [pc, #360]	; (401fac <m2m_wifi_cb+0x260>)
  401e44:	4c5a      	ldr	r4, [pc, #360]	; (401fb0 <m2m_wifi_cb+0x264>)
  401e46:	47a0      	blx	r4
  401e48:	9903      	ldr	r1, [sp, #12]
  401e4a:	0e0b      	lsrs	r3, r1, #24
  401e4c:	9300      	str	r3, [sp, #0]
  401e4e:	f3c1 4307 	ubfx	r3, r1, #16, #8
  401e52:	f3c1 2207 	ubfx	r2, r1, #8, #8
  401e56:	b2c9      	uxtb	r1, r1
  401e58:	4856      	ldr	r0, [pc, #344]	; (401fb4 <m2m_wifi_cb+0x268>)
  401e5a:	47a0      	blx	r4
  401e5c:	4856      	ldr	r0, [pc, #344]	; (401fb8 <m2m_wifi_cb+0x26c>)
  401e5e:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  401e60:	4b50      	ldr	r3, [pc, #320]	; (401fa4 <m2m_wifi_cb+0x258>)
  401e62:	681b      	ldr	r3, [r3, #0]
  401e64:	2b00      	cmp	r3, #0
  401e66:	f000 8098 	beq.w	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  401e6a:	2100      	movs	r1, #0
  401e6c:	2034      	movs	r0, #52	; 0x34
  401e6e:	4798      	blx	r3
  401e70:	e093      	b.n	401f9a <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  401e72:	2811      	cmp	r0, #17
  401e74:	d116      	bne.n	401ea4 <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  401e76:	2300      	movs	r3, #0
  401e78:	4a50      	ldr	r2, [pc, #320]	; (401fbc <m2m_wifi_cb+0x270>)
  401e7a:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  401e7c:	2204      	movs	r2, #4
  401e7e:	a903      	add	r1, sp, #12
  401e80:	4628      	mov	r0, r5
  401e82:	4c47      	ldr	r4, [pc, #284]	; (401fa0 <m2m_wifi_cb+0x254>)
  401e84:	47a0      	blx	r4
  401e86:	2800      	cmp	r0, #0
  401e88:	f040 8087 	bne.w	401f9a <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  401e8c:	f89d 200c 	ldrb.w	r2, [sp, #12]
  401e90:	4b4b      	ldr	r3, [pc, #300]	; (401fc0 <m2m_wifi_cb+0x274>)
  401e92:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  401e94:	4b43      	ldr	r3, [pc, #268]	; (401fa4 <m2m_wifi_cb+0x258>)
  401e96:	681b      	ldr	r3, [r3, #0]
  401e98:	2b00      	cmp	r3, #0
  401e9a:	d07e      	beq.n	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  401e9c:	a903      	add	r1, sp, #12
  401e9e:	2011      	movs	r0, #17
  401ea0:	4798      	blx	r3
  401ea2:	e07a      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  401ea4:	2813      	cmp	r0, #19
  401ea6:	d10f      	bne.n	401ec8 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  401ea8:	2300      	movs	r3, #0
  401eaa:	222c      	movs	r2, #44	; 0x2c
  401eac:	a903      	add	r1, sp, #12
  401eae:	4628      	mov	r0, r5
  401eb0:	4c3b      	ldr	r4, [pc, #236]	; (401fa0 <m2m_wifi_cb+0x254>)
  401eb2:	47a0      	blx	r4
  401eb4:	2800      	cmp	r0, #0
  401eb6:	d170      	bne.n	401f9a <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401eb8:	4b3a      	ldr	r3, [pc, #232]	; (401fa4 <m2m_wifi_cb+0x258>)
  401eba:	681b      	ldr	r3, [r3, #0]
  401ebc:	2b00      	cmp	r3, #0
  401ebe:	d06c      	beq.n	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  401ec0:	a903      	add	r1, sp, #12
  401ec2:	2013      	movs	r0, #19
  401ec4:	4798      	blx	r3
  401ec6:	e068      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  401ec8:	2804      	cmp	r0, #4
  401eca:	d10f      	bne.n	401eec <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401ecc:	2300      	movs	r3, #0
  401ece:	2204      	movs	r2, #4
  401ed0:	a91c      	add	r1, sp, #112	; 0x70
  401ed2:	4628      	mov	r0, r5
  401ed4:	4c32      	ldr	r4, [pc, #200]	; (401fa0 <m2m_wifi_cb+0x254>)
  401ed6:	47a0      	blx	r4
  401ed8:	2800      	cmp	r0, #0
  401eda:	d15e      	bne.n	401f9a <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401edc:	4b31      	ldr	r3, [pc, #196]	; (401fa4 <m2m_wifi_cb+0x258>)
  401ede:	681b      	ldr	r3, [r3, #0]
  401ee0:	2b00      	cmp	r3, #0
  401ee2:	d05a      	beq.n	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  401ee4:	a91c      	add	r1, sp, #112	; 0x70
  401ee6:	2004      	movs	r0, #4
  401ee8:	4798      	blx	r3
  401eea:	e056      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  401eec:	2865      	cmp	r0, #101	; 0x65
  401eee:	d10f      	bne.n	401f10 <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401ef0:	2300      	movs	r3, #0
  401ef2:	2204      	movs	r2, #4
  401ef4:	a91c      	add	r1, sp, #112	; 0x70
  401ef6:	4628      	mov	r0, r5
  401ef8:	4c29      	ldr	r4, [pc, #164]	; (401fa0 <m2m_wifi_cb+0x254>)
  401efa:	47a0      	blx	r4
  401efc:	2800      	cmp	r0, #0
  401efe:	d14c      	bne.n	401f9a <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401f00:	4b28      	ldr	r3, [pc, #160]	; (401fa4 <m2m_wifi_cb+0x258>)
  401f02:	681b      	ldr	r3, [r3, #0]
  401f04:	2b00      	cmp	r3, #0
  401f06:	d048      	beq.n	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  401f08:	a91c      	add	r1, sp, #112	; 0x70
  401f0a:	2065      	movs	r0, #101	; 0x65
  401f0c:	4798      	blx	r3
  401f0e:	e044      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  401f10:	2809      	cmp	r0, #9
  401f12:	d10f      	bne.n	401f34 <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  401f14:	2301      	movs	r3, #1
  401f16:	2264      	movs	r2, #100	; 0x64
  401f18:	a903      	add	r1, sp, #12
  401f1a:	4628      	mov	r0, r5
  401f1c:	4c20      	ldr	r4, [pc, #128]	; (401fa0 <m2m_wifi_cb+0x254>)
  401f1e:	47a0      	blx	r4
  401f20:	2800      	cmp	r0, #0
  401f22:	d13a      	bne.n	401f9a <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401f24:	4b1f      	ldr	r3, [pc, #124]	; (401fa4 <m2m_wifi_cb+0x258>)
  401f26:	681b      	ldr	r3, [r3, #0]
  401f28:	2b00      	cmp	r3, #0
  401f2a:	d036      	beq.n	401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  401f2c:	a903      	add	r1, sp, #12
  401f2e:	2009      	movs	r0, #9
  401f30:	4798      	blx	r3
  401f32:	e032      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  401f34:	282a      	cmp	r0, #42	; 0x2a
  401f36:	d10d      	bne.n	401f54 <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  401f38:	2301      	movs	r3, #1
  401f3a:	2204      	movs	r2, #4
  401f3c:	a903      	add	r1, sp, #12
  401f3e:	4628      	mov	r0, r5
  401f40:	4c17      	ldr	r4, [pc, #92]	; (401fa0 <m2m_wifi_cb+0x254>)
  401f42:	47a0      	blx	r4
  401f44:	bb48      	cbnz	r0, 401f9a <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401f46:	4b17      	ldr	r3, [pc, #92]	; (401fa4 <m2m_wifi_cb+0x258>)
  401f48:	681b      	ldr	r3, [r3, #0]
  401f4a:	b333      	cbz	r3, 401f9a <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  401f4c:	a903      	add	r1, sp, #12
  401f4e:	202a      	movs	r0, #42	; 0x2a
  401f50:	4798      	blx	r3
  401f52:	e022      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  401f54:	2820      	cmp	r0, #32
  401f56:	d115      	bne.n	401f84 <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  401f58:	2300      	movs	r3, #0
  401f5a:	2208      	movs	r2, #8
  401f5c:	a903      	add	r1, sp, #12
  401f5e:	4628      	mov	r0, r5
  401f60:	4c0f      	ldr	r4, [pc, #60]	; (401fa0 <m2m_wifi_cb+0x254>)
  401f62:	47a0      	blx	r4
  401f64:	b9c8      	cbnz	r0, 401f9a <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  401f66:	2301      	movs	r3, #1
  401f68:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401f6c:	9903      	ldr	r1, [sp, #12]
  401f6e:	f105 0008 	add.w	r0, r5, #8
  401f72:	47a0      	blx	r4
  401f74:	b988      	cbnz	r0, 401f9a <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  401f76:	4b0b      	ldr	r3, [pc, #44]	; (401fa4 <m2m_wifi_cb+0x258>)
  401f78:	681b      	ldr	r3, [r3, #0]
  401f7a:	b173      	cbz	r3, 401f9a <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  401f7c:	a903      	add	r1, sp, #12
  401f7e:	2020      	movs	r0, #32
  401f80:	4798      	blx	r3
  401f82:	e00a      	b.n	401f9a <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  401f84:	f44f 7295 	mov.w	r2, #298	; 0x12a
  401f88:	490e      	ldr	r1, [pc, #56]	; (401fc4 <m2m_wifi_cb+0x278>)
  401f8a:	480f      	ldr	r0, [pc, #60]	; (401fc8 <m2m_wifi_cb+0x27c>)
  401f8c:	4d08      	ldr	r5, [pc, #32]	; (401fb0 <m2m_wifi_cb+0x264>)
  401f8e:	47a8      	blx	r5
  401f90:	4621      	mov	r1, r4
  401f92:	480e      	ldr	r0, [pc, #56]	; (401fcc <m2m_wifi_cb+0x280>)
  401f94:	47a8      	blx	r5
  401f96:	4808      	ldr	r0, [pc, #32]	; (401fb8 <m2m_wifi_cb+0x26c>)
  401f98:	47a8      	blx	r5
	}
}
  401f9a:	b01f      	add	sp, #124	; 0x7c
  401f9c:	bd30      	pop	{r4, r5, pc}
  401f9e:	bf00      	nop
  401fa0:	00401b5d 	.word	0x00401b5d
  401fa4:	2040090c 	.word	0x2040090c
  401fa8:	00401501 	.word	0x00401501
  401fac:	004084bc 	.word	0x004084bc
  401fb0:	00405121 	.word	0x00405121
  401fb4:	004084c8 	.word	0x004084c8
  401fb8:	00409330 	.word	0x00409330
  401fbc:	20400910 	.word	0x20400910
  401fc0:	20400911 	.word	0x20400911
  401fc4:	004084b0 	.word	0x004084b0
  401fc8:	004081fc 	.word	0x004081fc
  401fcc:	004084e8 	.word	0x004084e8

00401fd0 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  401fd2:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  401fd4:	2301      	movs	r3, #1
  401fd6:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  401fda:	2800      	cmp	r0, #0
  401fdc:	d04e      	beq.n	40207c <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  401fde:	6802      	ldr	r2, [r0, #0]
  401fe0:	4b29      	ldr	r3, [pc, #164]	; (402088 <m2m_wifi_init+0xb8>)
  401fe2:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  401fe4:	2200      	movs	r2, #0
  401fe6:	4b29      	ldr	r3, [pc, #164]	; (40208c <m2m_wifi_init+0xbc>)
  401fe8:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  401fea:	f10d 0007 	add.w	r0, sp, #7
  401fee:	4b28      	ldr	r3, [pc, #160]	; (402090 <m2m_wifi_init+0xc0>)
  401ff0:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  401ff2:	4604      	mov	r4, r0
  401ff4:	2800      	cmp	r0, #0
  401ff6:	d143      	bne.n	402080 <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  401ff8:	4b26      	ldr	r3, [pc, #152]	; (402094 <m2m_wifi_init+0xc4>)
  401ffa:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401ffc:	4604      	mov	r4, r0
  401ffe:	2800      	cmp	r0, #0
  402000:	d138      	bne.n	402074 <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  402002:	4925      	ldr	r1, [pc, #148]	; (402098 <m2m_wifi_init+0xc8>)
  402004:	2001      	movs	r0, #1
  402006:	4b25      	ldr	r3, [pc, #148]	; (40209c <m2m_wifi_init+0xcc>)
  402008:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  40200a:	a802      	add	r0, sp, #8
  40200c:	4b24      	ldr	r3, [pc, #144]	; (4020a0 <m2m_wifi_init+0xd0>)
  40200e:	4798      	blx	r3
  402010:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  402012:	4f24      	ldr	r7, [pc, #144]	; (4020a4 <m2m_wifi_init+0xd4>)
  402014:	4638      	mov	r0, r7
  402016:	4d24      	ldr	r5, [pc, #144]	; (4020a8 <m2m_wifi_init+0xd8>)
  402018:	47a8      	blx	r5
  40201a:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40201e:	f89d 200d 	ldrb.w	r2, [sp, #13]
  402022:	f89d 100c 	ldrb.w	r1, [sp, #12]
  402026:	4821      	ldr	r0, [pc, #132]	; (4020ac <m2m_wifi_init+0xdc>)
  402028:	47a8      	blx	r5
  40202a:	4e21      	ldr	r6, [pc, #132]	; (4020b0 <m2m_wifi_init+0xe0>)
  40202c:	4630      	mov	r0, r6
  40202e:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  402030:	4638      	mov	r0, r7
  402032:	47a8      	blx	r5
  402034:	f89d 3011 	ldrb.w	r3, [sp, #17]
  402038:	f89d 2010 	ldrb.w	r2, [sp, #16]
  40203c:	f89d 100f 	ldrb.w	r1, [sp, #15]
  402040:	481c      	ldr	r0, [pc, #112]	; (4020b4 <m2m_wifi_init+0xe4>)
  402042:	47a8      	blx	r5
  402044:	4630      	mov	r0, r6
  402046:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  402048:	4638      	mov	r0, r7
  40204a:	47a8      	blx	r5
  40204c:	2300      	movs	r3, #0
  40204e:	2203      	movs	r2, #3
  402050:	2113      	movs	r1, #19
  402052:	4819      	ldr	r0, [pc, #100]	; (4020b8 <m2m_wifi_init+0xe8>)
  402054:	47a8      	blx	r5
  402056:	4630      	mov	r0, r6
  402058:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  40205a:	f114 0f0d 	cmn.w	r4, #13
  40205e:	d10f      	bne.n	402080 <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  402060:	f240 12d5 	movw	r2, #469	; 0x1d5
  402064:	4915      	ldr	r1, [pc, #84]	; (4020bc <m2m_wifi_init+0xec>)
  402066:	4816      	ldr	r0, [pc, #88]	; (4020c0 <m2m_wifi_init+0xf0>)
  402068:	47a8      	blx	r5
  40206a:	4816      	ldr	r0, [pc, #88]	; (4020c4 <m2m_wifi_init+0xf4>)
  40206c:	47a8      	blx	r5
  40206e:	4630      	mov	r0, r6
  402070:	47a8      	blx	r5
  402072:	e005      	b.n	402080 <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  402074:	2000      	movs	r0, #0
  402076:	4b14      	ldr	r3, [pc, #80]	; (4020c8 <m2m_wifi_init+0xf8>)
  402078:	4798      	blx	r3
  40207a:	e001      	b.n	402080 <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  40207c:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  402080:	4620      	mov	r0, r4
  402082:	b00b      	add	sp, #44	; 0x2c
  402084:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402086:	bf00      	nop
  402088:	2040090c 	.word	0x2040090c
  40208c:	20400910 	.word	0x20400910
  402090:	0040298d 	.word	0x0040298d
  402094:	00401cfd 	.word	0x00401cfd
  402098:	00401d4d 	.word	0x00401d4d
  40209c:	00401c6d 	.word	0x00401c6d
  4020a0:	004028e1 	.word	0x004028e1
  4020a4:	004084bc 	.word	0x004084bc
  4020a8:	00405121 	.word	0x00405121
  4020ac:	004085a0 	.word	0x004085a0
  4020b0:	00409330 	.word	0x00409330
  4020b4:	004085bc 	.word	0x004085bc
  4020b8:	004085d8 	.word	0x004085d8
  4020bc:	004087e4 	.word	0x004087e4
  4020c0:	004081fc 	.word	0x004081fc
  4020c4:	004085f4 	.word	0x004085f4
  4020c8:	00402a55 	.word	0x00402a55

004020cc <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  4020cc:	b508      	push	{r3, lr}
	return hif_handle_isr();
  4020ce:	4b01      	ldr	r3, [pc, #4]	; (4020d4 <m2m_wifi_handle_events+0x8>)
  4020d0:	4798      	blx	r3
}
  4020d2:	bd08      	pop	{r3, pc}
  4020d4:	0040183d 	.word	0x0040183d

004020d8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  4020d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020dc:	b0a0      	sub	sp, #128	; 0x80
  4020de:	4680      	mov	r8, r0
  4020e0:	460d      	mov	r5, r1
  4020e2:	4614      	mov	r4, r2
  4020e4:	461e      	mov	r6, r3
  4020e6:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  4020ea:	2a01      	cmp	r2, #1
  4020ec:	d045      	beq.n	40217a <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  4020ee:	b963      	cbnz	r3, 40210a <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  4020f0:	f240 2203 	movw	r2, #515	; 0x203
  4020f4:	497a      	ldr	r1, [pc, #488]	; (4022e0 <m2m_wifi_connect_sc+0x208>)
  4020f6:	487b      	ldr	r0, [pc, #492]	; (4022e4 <m2m_wifi_connect_sc+0x20c>)
  4020f8:	4c7b      	ldr	r4, [pc, #492]	; (4022e8 <m2m_wifi_connect_sc+0x210>)
  4020fa:	47a0      	blx	r4
  4020fc:	487b      	ldr	r0, [pc, #492]	; (4022ec <m2m_wifi_connect_sc+0x214>)
  4020fe:	47a0      	blx	r4
  402100:	487b      	ldr	r0, [pc, #492]	; (4022f0 <m2m_wifi_connect_sc+0x218>)
  402102:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402104:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402108:	e0e7      	b.n	4022da <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  40210a:	2a02      	cmp	r2, #2
  40210c:	d135      	bne.n	40217a <m2m_wifi_connect_sc+0xa2>
  40210e:	4618      	mov	r0, r3
  402110:	4b78      	ldr	r3, [pc, #480]	; (4022f4 <m2m_wifi_connect_sc+0x21c>)
  402112:	4798      	blx	r3
  402114:	2840      	cmp	r0, #64	; 0x40
  402116:	d130      	bne.n	40217a <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  402118:	7833      	ldrb	r3, [r6, #0]
  40211a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40211e:	b2d2      	uxtb	r2, r2
  402120:	2a36      	cmp	r2, #54	; 0x36
  402122:	d81b      	bhi.n	40215c <m2m_wifi_connect_sc+0x84>
  402124:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402128:	b2d2      	uxtb	r2, r2
  40212a:	2a06      	cmp	r2, #6
  40212c:	d916      	bls.n	40215c <m2m_wifi_connect_sc+0x84>
  40212e:	3b47      	subs	r3, #71	; 0x47
  402130:	b2db      	uxtb	r3, r3
  402132:	2b19      	cmp	r3, #25
  402134:	d912      	bls.n	40215c <m2m_wifi_connect_sc+0x84>
  402136:	4631      	mov	r1, r6
  402138:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  40213c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402140:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402144:	b2d2      	uxtb	r2, r2
  402146:	2a06      	cmp	r2, #6
  402148:	d908      	bls.n	40215c <m2m_wifi_connect_sc+0x84>
  40214a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40214e:	b2d2      	uxtb	r2, r2
  402150:	2a36      	cmp	r2, #54	; 0x36
  402152:	d803      	bhi.n	40215c <m2m_wifi_connect_sc+0x84>
  402154:	3b47      	subs	r3, #71	; 0x47
  402156:	b2db      	uxtb	r3, r3
  402158:	2b19      	cmp	r3, #25
  40215a:	d80c      	bhi.n	402176 <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  40215c:	f240 220f 	movw	r2, #527	; 0x20f
  402160:	495f      	ldr	r1, [pc, #380]	; (4022e0 <m2m_wifi_connect_sc+0x208>)
  402162:	4860      	ldr	r0, [pc, #384]	; (4022e4 <m2m_wifi_connect_sc+0x20c>)
  402164:	4c60      	ldr	r4, [pc, #384]	; (4022e8 <m2m_wifi_connect_sc+0x210>)
  402166:	47a0      	blx	r4
  402168:	4863      	ldr	r0, [pc, #396]	; (4022f8 <m2m_wifi_connect_sc+0x220>)
  40216a:	47a0      	blx	r4
  40216c:	4860      	ldr	r0, [pc, #384]	; (4022f0 <m2m_wifi_connect_sc+0x218>)
  40216e:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  402170:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  402174:	e0b1      	b.n	4022da <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  402176:	4288      	cmp	r0, r1
  402178:	d1e0      	bne.n	40213c <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  40217a:	1e6b      	subs	r3, r5, #1
  40217c:	b2db      	uxtb	r3, r3
  40217e:	2b1f      	cmp	r3, #31
  402180:	d90c      	bls.n	40219c <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  402182:	f240 2219 	movw	r2, #537	; 0x219
  402186:	4956      	ldr	r1, [pc, #344]	; (4022e0 <m2m_wifi_connect_sc+0x208>)
  402188:	4856      	ldr	r0, [pc, #344]	; (4022e4 <m2m_wifi_connect_sc+0x20c>)
  40218a:	4c57      	ldr	r4, [pc, #348]	; (4022e8 <m2m_wifi_connect_sc+0x210>)
  40218c:	47a0      	blx	r4
  40218e:	485b      	ldr	r0, [pc, #364]	; (4022fc <m2m_wifi_connect_sc+0x224>)
  402190:	47a0      	blx	r4
  402192:	4857      	ldr	r0, [pc, #348]	; (4022f0 <m2m_wifi_connect_sc+0x218>)
  402194:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402196:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40219a:	e09e      	b.n	4022da <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  40219c:	2fff      	cmp	r7, #255	; 0xff
  40219e:	d00e      	beq.n	4021be <m2m_wifi_connect_sc+0xe6>
  4021a0:	2f0d      	cmp	r7, #13
  4021a2:	d90c      	bls.n	4021be <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  4021a4:	f240 2222 	movw	r2, #546	; 0x222
  4021a8:	494d      	ldr	r1, [pc, #308]	; (4022e0 <m2m_wifi_connect_sc+0x208>)
  4021aa:	484e      	ldr	r0, [pc, #312]	; (4022e4 <m2m_wifi_connect_sc+0x20c>)
  4021ac:	4c4e      	ldr	r4, [pc, #312]	; (4022e8 <m2m_wifi_connect_sc+0x210>)
  4021ae:	47a0      	blx	r4
  4021b0:	4853      	ldr	r0, [pc, #332]	; (402300 <m2m_wifi_connect_sc+0x228>)
  4021b2:	47a0      	blx	r4
  4021b4:	484e      	ldr	r0, [pc, #312]	; (4022f0 <m2m_wifi_connect_sc+0x218>)
  4021b6:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4021b8:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4021bc:	e08d      	b.n	4022da <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  4021be:	462a      	mov	r2, r5
  4021c0:	4641      	mov	r1, r8
  4021c2:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4021c6:	4b4f      	ldr	r3, [pc, #316]	; (402304 <m2m_wifi_connect_sc+0x22c>)
  4021c8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4021ca:	ab20      	add	r3, sp, #128	; 0x80
  4021cc:	441d      	add	r5, r3
  4021ce:	2300      	movs	r3, #0
  4021d0:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4021d4:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4021d8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4021dc:	3300      	adds	r3, #0
  4021de:	bf18      	it	ne
  4021e0:	2301      	movne	r3, #1
  4021e2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4021e6:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4021ea:	2c03      	cmp	r4, #3
  4021ec:	d138      	bne.n	402260 <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4021ee:	7833      	ldrb	r3, [r6, #0]
  4021f0:	3b01      	subs	r3, #1
  4021f2:	b2db      	uxtb	r3, r3
  4021f4:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4021f8:	2b03      	cmp	r3, #3
  4021fa:	d90e      	bls.n	40221a <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4021fc:	f240 2239 	movw	r2, #569	; 0x239
  402200:	4937      	ldr	r1, [pc, #220]	; (4022e0 <m2m_wifi_connect_sc+0x208>)
  402202:	4838      	ldr	r0, [pc, #224]	; (4022e4 <m2m_wifi_connect_sc+0x20c>)
  402204:	4c38      	ldr	r4, [pc, #224]	; (4022e8 <m2m_wifi_connect_sc+0x210>)
  402206:	47a0      	blx	r4
  402208:	f89d 1014 	ldrb.w	r1, [sp, #20]
  40220c:	483e      	ldr	r0, [pc, #248]	; (402308 <m2m_wifi_connect_sc+0x230>)
  40220e:	47a0      	blx	r4
  402210:	4837      	ldr	r0, [pc, #220]	; (4022f0 <m2m_wifi_connect_sc+0x218>)
  402212:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402214:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402218:	e05f      	b.n	4022da <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  40221a:	7872      	ldrb	r2, [r6, #1]
  40221c:	1e53      	subs	r3, r2, #1
  40221e:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  402222:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  402226:	2b0b      	cmp	r3, #11
  402228:	d00e      	beq.n	402248 <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  40222a:	f44f 7210 	mov.w	r2, #576	; 0x240
  40222e:	492c      	ldr	r1, [pc, #176]	; (4022e0 <m2m_wifi_connect_sc+0x208>)
  402230:	482c      	ldr	r0, [pc, #176]	; (4022e4 <m2m_wifi_connect_sc+0x20c>)
  402232:	4c2d      	ldr	r4, [pc, #180]	; (4022e8 <m2m_wifi_connect_sc+0x210>)
  402234:	47a0      	blx	r4
  402236:	f89d 1015 	ldrb.w	r1, [sp, #21]
  40223a:	4834      	ldr	r0, [pc, #208]	; (40230c <m2m_wifi_connect_sc+0x234>)
  40223c:	47a0      	blx	r4
  40223e:	482c      	ldr	r0, [pc, #176]	; (4022f0 <m2m_wifi_connect_sc+0x218>)
  402240:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402242:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402246:	e048      	b.n	4022da <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  402248:	1cb1      	adds	r1, r6, #2
  40224a:	f10d 0016 	add.w	r0, sp, #22
  40224e:	4b2d      	ldr	r3, [pc, #180]	; (402304 <m2m_wifi_connect_sc+0x22c>)
  402250:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  402252:	7873      	ldrb	r3, [r6, #1]
  402254:	aa20      	add	r2, sp, #128	; 0x80
  402256:	4413      	add	r3, r2
  402258:	2200      	movs	r2, #0
  40225a:	f803 2c6a 	strb.w	r2, [r3, #-106]
  40225e:	e032      	b.n	4022c6 <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  402260:	2c02      	cmp	r4, #2
  402262:	d119      	bne.n	402298 <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  402264:	4630      	mov	r0, r6
  402266:	4b23      	ldr	r3, [pc, #140]	; (4022f4 <m2m_wifi_connect_sc+0x21c>)
  402268:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  40226a:	1e43      	subs	r3, r0, #1
  40226c:	b29b      	uxth	r3, r3
  40226e:	2b3f      	cmp	r3, #63	; 0x3f
  402270:	d90c      	bls.n	40228c <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  402272:	f240 224f 	movw	r2, #591	; 0x24f
  402276:	491a      	ldr	r1, [pc, #104]	; (4022e0 <m2m_wifi_connect_sc+0x208>)
  402278:	481a      	ldr	r0, [pc, #104]	; (4022e4 <m2m_wifi_connect_sc+0x20c>)
  40227a:	4c1b      	ldr	r4, [pc, #108]	; (4022e8 <m2m_wifi_connect_sc+0x210>)
  40227c:	47a0      	blx	r4
  40227e:	4824      	ldr	r0, [pc, #144]	; (402310 <m2m_wifi_connect_sc+0x238>)
  402280:	47a0      	blx	r4
  402282:	481b      	ldr	r0, [pc, #108]	; (4022f0 <m2m_wifi_connect_sc+0x218>)
  402284:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402286:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40228a:	e026      	b.n	4022da <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  40228c:	1c42      	adds	r2, r0, #1
  40228e:	4631      	mov	r1, r6
  402290:	a805      	add	r0, sp, #20
  402292:	4b1c      	ldr	r3, [pc, #112]	; (402304 <m2m_wifi_connect_sc+0x22c>)
  402294:	4798      	blx	r3
  402296:	e016      	b.n	4022c6 <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  402298:	2c04      	cmp	r4, #4
  40229a:	d105      	bne.n	4022a8 <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  40229c:	223e      	movs	r2, #62	; 0x3e
  40229e:	4631      	mov	r1, r6
  4022a0:	a805      	add	r0, sp, #20
  4022a2:	4b18      	ldr	r3, [pc, #96]	; (402304 <m2m_wifi_connect_sc+0x22c>)
  4022a4:	4798      	blx	r3
  4022a6:	e00e      	b.n	4022c6 <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4022a8:	2c01      	cmp	r4, #1
  4022aa:	d00c      	beq.n	4022c6 <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  4022ac:	f240 225f 	movw	r2, #607	; 0x25f
  4022b0:	490b      	ldr	r1, [pc, #44]	; (4022e0 <m2m_wifi_connect_sc+0x208>)
  4022b2:	480c      	ldr	r0, [pc, #48]	; (4022e4 <m2m_wifi_connect_sc+0x20c>)
  4022b4:	4c0c      	ldr	r4, [pc, #48]	; (4022e8 <m2m_wifi_connect_sc+0x210>)
  4022b6:	47a0      	blx	r4
  4022b8:	4816      	ldr	r0, [pc, #88]	; (402314 <m2m_wifi_connect_sc+0x23c>)
  4022ba:	47a0      	blx	r4
  4022bc:	480c      	ldr	r0, [pc, #48]	; (4022f0 <m2m_wifi_connect_sc+0x218>)
  4022be:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4022c0:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4022c4:	e009      	b.n	4022da <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4022c6:	2300      	movs	r3, #0
  4022c8:	9302      	str	r3, [sp, #8]
  4022ca:	9301      	str	r3, [sp, #4]
  4022cc:	9300      	str	r3, [sp, #0]
  4022ce:	236c      	movs	r3, #108	; 0x6c
  4022d0:	aa05      	add	r2, sp, #20
  4022d2:	2128      	movs	r1, #40	; 0x28
  4022d4:	2001      	movs	r0, #1
  4022d6:	4c10      	ldr	r4, [pc, #64]	; (402318 <m2m_wifi_connect_sc+0x240>)
  4022d8:	47a0      	blx	r4

ERR1:
	return ret;
}
  4022da:	b020      	add	sp, #128	; 0x80
  4022dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022e0:	0040849c 	.word	0x0040849c
  4022e4:	004081fc 	.word	0x004081fc
  4022e8:	00405121 	.word	0x00405121
  4022ec:	00408610 	.word	0x00408610
  4022f0:	00409330 	.word	0x00409330
  4022f4:	00401511 	.word	0x00401511
  4022f8:	00408624 	.word	0x00408624
  4022fc:	00408634 	.word	0x00408634
  402300:	00408648 	.word	0x00408648
  402304:	004014ed 	.word	0x004014ed
  402308:	00408654 	.word	0x00408654
  40230c:	00408670 	.word	0x00408670
  402310:	0040868c 	.word	0x0040868c
  402314:	004086a8 	.word	0x004086a8
  402318:	00401665 	.word	0x00401665

0040231c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  40231c:	b510      	push	{r4, lr}
  40231e:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  402320:	2400      	movs	r4, #0
  402322:	9401      	str	r4, [sp, #4]
  402324:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  402328:	9400      	str	r4, [sp, #0]
  40232a:	4c02      	ldr	r4, [pc, #8]	; (402334 <m2m_wifi_connect+0x18>)
  40232c:	47a0      	blx	r4
}
  40232e:	b002      	add	sp, #8
  402330:	bd10      	pop	{r4, pc}
  402332:	bf00      	nop
  402334:	004020d9 	.word	0x004020d9

00402338 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  402338:	2000      	movs	r0, #0
  40233a:	4770      	bx	lr

0040233c <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  40233c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40233e:	b083      	sub	sp, #12
  402340:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  402342:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  402346:	4e0a      	ldr	r6, [pc, #40]	; (402370 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  402348:	4f0a      	ldr	r7, [pc, #40]	; (402374 <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40234a:	4621      	mov	r1, r4
  40234c:	4628      	mov	r0, r5
  40234e:	47b0      	blx	r6
		if(val32 != 0) {		
  402350:	b154      	cbz	r4, 402368 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  402352:	a902      	add	r1, sp, #8
  402354:	2300      	movs	r3, #0
  402356:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  40235a:	4628      	mov	r0, r5
  40235c:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  40235e:	2800      	cmp	r0, #0
  402360:	d1f3      	bne.n	40234a <chip_apply_conf+0xe>
				if(reg == val32)
  402362:	9b01      	ldr	r3, [sp, #4]
  402364:	429c      	cmp	r4, r3
  402366:	d1f0      	bne.n	40234a <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  402368:	2000      	movs	r0, #0
  40236a:	b003      	add	sp, #12
  40236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40236e:	bf00      	nop
  402370:	00402815 	.word	0x00402815
  402374:	00402809 	.word	0x00402809

00402378 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  402378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40237c:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  40237e:	2001      	movs	r0, #1
  402380:	4b3d      	ldr	r3, [pc, #244]	; (402478 <nm_clkless_wake+0x100>)
  402382:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  402384:	a901      	add	r1, sp, #4
  402386:	2001      	movs	r0, #1
  402388:	4b3c      	ldr	r3, [pc, #240]	; (40247c <nm_clkless_wake+0x104>)
  40238a:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  40238c:	4682      	mov	sl, r0
  40238e:	b148      	cbz	r0, 4023a4 <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  402390:	2272      	movs	r2, #114	; 0x72
  402392:	493b      	ldr	r1, [pc, #236]	; (402480 <nm_clkless_wake+0x108>)
  402394:	483b      	ldr	r0, [pc, #236]	; (402484 <nm_clkless_wake+0x10c>)
  402396:	4c3c      	ldr	r4, [pc, #240]	; (402488 <nm_clkless_wake+0x110>)
  402398:	47a0      	blx	r4
  40239a:	483c      	ldr	r0, [pc, #240]	; (40248c <nm_clkless_wake+0x114>)
  40239c:	47a0      	blx	r4
  40239e:	483c      	ldr	r0, [pc, #240]	; (402490 <nm_clkless_wake+0x118>)
  4023a0:	47a0      	blx	r4
		goto _WAKE_EXIT;
  4023a2:	e064      	b.n	40246e <nm_clkless_wake+0xf6>
  4023a4:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4023a6:	f04f 0801 	mov.w	r8, #1
  4023aa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 4024a4 <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4023ae:	4d32      	ldr	r5, [pc, #200]	; (402478 <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4023b0:	4f38      	ldr	r7, [pc, #224]	; (402494 <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4023b2:	9901      	ldr	r1, [sp, #4]
  4023b4:	f041 0102 	orr.w	r1, r1, #2
  4023b8:	4640      	mov	r0, r8
  4023ba:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4023bc:	4640      	mov	r0, r8
  4023be:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4023c0:	4669      	mov	r1, sp
  4023c2:	4b35      	ldr	r3, [pc, #212]	; (402498 <nm_clkless_wake+0x120>)
  4023c4:	6818      	ldr	r0, [r3, #0]
  4023c6:	4b2d      	ldr	r3, [pc, #180]	; (40247c <nm_clkless_wake+0x104>)
  4023c8:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4023ca:	b918      	cbnz	r0, 4023d4 <nm_clkless_wake+0x5c>
  4023cc:	9b00      	ldr	r3, [sp, #0]
  4023ce:	b10b      	cbz	r3, 4023d4 <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4023d0:	4e31      	ldr	r6, [pc, #196]	; (402498 <nm_clkless_wake+0x120>)
  4023d2:	e037      	b.n	402444 <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  4023d4:	4e30      	ldr	r6, [pc, #192]	; (402498 <nm_clkless_wake+0x120>)
  4023d6:	230e      	movs	r3, #14
  4023d8:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  4023da:	4640      	mov	r0, r8
  4023dc:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4023de:	4669      	mov	r1, sp
  4023e0:	6830      	ldr	r0, [r6, #0]
  4023e2:	4b26      	ldr	r3, [pc, #152]	; (40247c <nm_clkless_wake+0x104>)
  4023e4:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4023e6:	b910      	cbnz	r0, 4023ee <nm_clkless_wake+0x76>
  4023e8:	9b00      	ldr	r3, [sp, #0]
  4023ea:	2b00      	cmp	r3, #0
  4023ec:	d1f0      	bne.n	4023d0 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  4023ee:	4e2a      	ldr	r6, [pc, #168]	; (402498 <nm_clkless_wake+0x120>)
  4023f0:	2313      	movs	r3, #19
  4023f2:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  4023f4:	4640      	mov	r0, r8
  4023f6:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4023f8:	4669      	mov	r1, sp
  4023fa:	6830      	ldr	r0, [r6, #0]
  4023fc:	4b1f      	ldr	r3, [pc, #124]	; (40247c <nm_clkless_wake+0x104>)
  4023fe:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  402400:	4606      	mov	r6, r0
  402402:	2800      	cmp	r0, #0
  402404:	d0e4      	beq.n	4023d0 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  402406:	2296      	movs	r2, #150	; 0x96
  402408:	491d      	ldr	r1, [pc, #116]	; (402480 <nm_clkless_wake+0x108>)
  40240a:	481e      	ldr	r0, [pc, #120]	; (402484 <nm_clkless_wake+0x10c>)
  40240c:	4c1e      	ldr	r4, [pc, #120]	; (402488 <nm_clkless_wake+0x110>)
  40240e:	47a0      	blx	r4
  402410:	4822      	ldr	r0, [pc, #136]	; (40249c <nm_clkless_wake+0x124>)
  402412:	47a0      	blx	r4
  402414:	481e      	ldr	r0, [pc, #120]	; (402490 <nm_clkless_wake+0x118>)
  402416:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402418:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  40241a:	e028      	b.n	40246e <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  40241c:	2002      	movs	r0, #2
  40241e:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402420:	4669      	mov	r1, sp
  402422:	6830      	ldr	r0, [r6, #0]
  402424:	4b15      	ldr	r3, [pc, #84]	; (40247c <nm_clkless_wake+0x104>)
  402426:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  402428:	9b00      	ldr	r3, [sp, #0]
  40242a:	f013 0f04 	tst.w	r3, #4
  40242e:	d109      	bne.n	402444 <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  402430:	22aa      	movs	r2, #170	; 0xaa
  402432:	4913      	ldr	r1, [pc, #76]	; (402480 <nm_clkless_wake+0x108>)
  402434:	4813      	ldr	r0, [pc, #76]	; (402484 <nm_clkless_wake+0x10c>)
  402436:	f8df b050 	ldr.w	fp, [pc, #80]	; 402488 <nm_clkless_wake+0x110>
  40243a:	47d8      	blx	fp
  40243c:	4818      	ldr	r0, [pc, #96]	; (4024a0 <nm_clkless_wake+0x128>)
  40243e:	47d8      	blx	fp
  402440:	4813      	ldr	r0, [pc, #76]	; (402490 <nm_clkless_wake+0x118>)
  402442:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  402444:	9b00      	ldr	r3, [sp, #0]
  402446:	f013 0f04 	tst.w	r3, #4
  40244a:	d110      	bne.n	40246e <nm_clkless_wake+0xf6>
  40244c:	3401      	adds	r4, #1
  40244e:	fba7 2304 	umull	r2, r3, r7, r4
  402452:	085b      	lsrs	r3, r3, #1
  402454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402458:	429c      	cmp	r4, r3
  40245a:	d0df      	beq.n	40241c <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  40245c:	9901      	ldr	r1, [sp, #4]
  40245e:	f041 0102 	orr.w	r1, r1, #2
  402462:	4640      	mov	r0, r8
  402464:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  402466:	9b00      	ldr	r3, [sp, #0]
  402468:	f013 0f04 	tst.w	r3, #4
  40246c:	d0a1      	beq.n	4023b2 <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  40246e:	4650      	mov	r0, sl
  402470:	b003      	add	sp, #12
  402472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402476:	bf00      	nop
  402478:	00401151 	.word	0x00401151
  40247c:	00402809 	.word	0x00402809
  402480:	00408800 	.word	0x00408800
  402484:	004081fc 	.word	0x004081fc
  402488:	00405121 	.word	0x00405121
  40248c:	00408810 	.word	0x00408810
  402490:	00409330 	.word	0x00409330
  402494:	aaaaaaab 	.word	0xaaaaaaab
  402498:	20400034 	.word	0x20400034
  40249c:	00408830 	.word	0x00408830
  4024a0:	00408850 	.word	0x00408850
  4024a4:	00402815 	.word	0x00402815

004024a8 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4024a8:	b500      	push	{lr}
  4024aa:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4024ac:	a901      	add	r1, sp, #4
  4024ae:	f241 4008 	movw	r0, #5128	; 0x1408
  4024b2:	4b15      	ldr	r3, [pc, #84]	; (402508 <enable_interrupts+0x60>)
  4024b4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4024b6:	b9e0      	cbnz	r0, 4024f2 <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  4024b8:	9901      	ldr	r1, [sp, #4]
  4024ba:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4024be:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  4024c0:	f241 4008 	movw	r0, #5128	; 0x1408
  4024c4:	4b11      	ldr	r3, [pc, #68]	; (40250c <enable_interrupts+0x64>)
  4024c6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4024c8:	b9b0      	cbnz	r0, 4024f8 <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  4024ca:	a901      	add	r1, sp, #4
  4024cc:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4024d0:	4b0d      	ldr	r3, [pc, #52]	; (402508 <enable_interrupts+0x60>)
  4024d2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4024d4:	b998      	cbnz	r0, 4024fe <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  4024d6:	9901      	ldr	r1, [sp, #4]
  4024d8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4024dc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  4024de:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4024e2:	4b0a      	ldr	r3, [pc, #40]	; (40250c <enable_interrupts+0x64>)
  4024e4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4024e6:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  4024e8:	bf14      	ite	ne
  4024ea:	f06f 0005 	mvnne.w	r0, #5
  4024ee:	2000      	moveq	r0, #0
  4024f0:	e007      	b.n	402502 <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4024f2:	f06f 0005 	mvn.w	r0, #5
  4024f6:	e004      	b.n	402502 <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4024f8:	f06f 0005 	mvn.w	r0, #5
  4024fc:	e001      	b.n	402502 <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4024fe:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  402502:	b003      	add	sp, #12
  402504:	f85d fb04 	ldr.w	pc, [sp], #4
  402508:	00402809 	.word	0x00402809
  40250c:	00402815 	.word	0x00402815

00402510 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  402510:	b510      	push	{r4, lr}
  402512:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  402514:	4b24      	ldr	r3, [pc, #144]	; (4025a8 <nmi_get_chipid+0x98>)
  402516:	681c      	ldr	r4, [r3, #0]
  402518:	2c00      	cmp	r4, #0
  40251a:	d140      	bne.n	40259e <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  40251c:	4619      	mov	r1, r3
  40251e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402522:	4b22      	ldr	r3, [pc, #136]	; (4025ac <nmi_get_chipid+0x9c>)
  402524:	4798      	blx	r3
  402526:	b118      	cbz	r0, 402530 <nmi_get_chipid+0x20>
			chipid = 0;
  402528:	2200      	movs	r2, #0
  40252a:	4b1f      	ldr	r3, [pc, #124]	; (4025a8 <nmi_get_chipid+0x98>)
  40252c:	601a      	str	r2, [r3, #0]
			return 0;
  40252e:	e038      	b.n	4025a2 <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  402530:	a901      	add	r1, sp, #4
  402532:	f241 30f4 	movw	r0, #5108	; 0x13f4
  402536:	4b1d      	ldr	r3, [pc, #116]	; (4025ac <nmi_get_chipid+0x9c>)
  402538:	4798      	blx	r3
  40253a:	b118      	cbz	r0, 402544 <nmi_get_chipid+0x34>
			chipid = 0;
  40253c:	2200      	movs	r2, #0
  40253e:	4b1a      	ldr	r3, [pc, #104]	; (4025a8 <nmi_get_chipid+0x98>)
  402540:	601a      	str	r2, [r3, #0]
			return 0;
  402542:	e02e      	b.n	4025a2 <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  402544:	4b18      	ldr	r3, [pc, #96]	; (4025a8 <nmi_get_chipid+0x98>)
  402546:	681b      	ldr	r3, [r3, #0]
  402548:	4a19      	ldr	r2, [pc, #100]	; (4025b0 <nmi_get_chipid+0xa0>)
  40254a:	4293      	cmp	r3, r2
  40254c:	d106      	bne.n	40255c <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  40254e:	9b01      	ldr	r3, [sp, #4]
  402550:	2b01      	cmp	r3, #1
  402552:	d01d      	beq.n	402590 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  402554:	3201      	adds	r2, #1
  402556:	4b14      	ldr	r3, [pc, #80]	; (4025a8 <nmi_get_chipid+0x98>)
  402558:	601a      	str	r2, [r3, #0]
  40255a:	e019      	b.n	402590 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  40255c:	4a15      	ldr	r2, [pc, #84]	; (4025b4 <nmi_get_chipid+0xa4>)
  40255e:	4293      	cmp	r3, r2
  402560:	d109      	bne.n	402576 <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  402562:	9b01      	ldr	r3, [sp, #4]
  402564:	2b03      	cmp	r3, #3
  402566:	d013      	beq.n	402590 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  402568:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  40256a:	bf0c      	ite	eq
  40256c:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  40256e:	4a12      	ldrne	r2, [pc, #72]	; (4025b8 <nmi_get_chipid+0xa8>)
  402570:	4b0d      	ldr	r3, [pc, #52]	; (4025a8 <nmi_get_chipid+0x98>)
  402572:	601a      	str	r2, [r3, #0]
  402574:	e00c      	b.n	402590 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  402576:	4a11      	ldr	r2, [pc, #68]	; (4025bc <nmi_get_chipid+0xac>)
  402578:	4293      	cmp	r3, r2
  40257a:	d109      	bne.n	402590 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  40257c:	490a      	ldr	r1, [pc, #40]	; (4025a8 <nmi_get_chipid+0x98>)
  40257e:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  402582:	4b0a      	ldr	r3, [pc, #40]	; (4025ac <nmi_get_chipid+0x9c>)
  402584:	4798      	blx	r3
  402586:	b118      	cbz	r0, 402590 <nmi_get_chipid+0x80>
			chipid = 0;
  402588:	2200      	movs	r2, #0
  40258a:	4b07      	ldr	r3, [pc, #28]	; (4025a8 <nmi_get_chipid+0x98>)
  40258c:	601a      	str	r2, [r3, #0]
			return 0;
  40258e:	e008      	b.n	4025a2 <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  402590:	4a05      	ldr	r2, [pc, #20]	; (4025a8 <nmi_get_chipid+0x98>)
  402592:	6813      	ldr	r3, [r2, #0]
  402594:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  402598:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  40259c:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  40259e:	4b02      	ldr	r3, [pc, #8]	; (4025a8 <nmi_get_chipid+0x98>)
  4025a0:	681c      	ldr	r4, [r3, #0]
}
  4025a2:	4620      	mov	r0, r4
  4025a4:	b002      	add	sp, #8
  4025a6:	bd10      	pop	{r4, pc}
  4025a8:	20400914 	.word	0x20400914
  4025ac:	00402809 	.word	0x00402809
  4025b0:	001002a0 	.word	0x001002a0
  4025b4:	001002b0 	.word	0x001002b0
  4025b8:	001002b2 	.word	0x001002b2
  4025bc:	001000f0 	.word	0x001000f0

004025c0 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  4025c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025c4:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4025c6:	f241 0514 	movw	r5, #4116	; 0x1014
  4025ca:	4c28      	ldr	r4, [pc, #160]	; (40266c <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4025cc:	4e28      	ldr	r6, [pc, #160]	; (402670 <wait_for_bootrom+0xb0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4025ce:	4628      	mov	r0, r5
  4025d0:	47a0      	blx	r4
		if (reg & 0x80000000) {
  4025d2:	2800      	cmp	r0, #0
  4025d4:	db02      	blt.n	4025dc <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4025d6:	2001      	movs	r0, #1
  4025d8:	47b0      	blx	r6
	}
  4025da:	e7f8      	b.n	4025ce <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  4025dc:	4825      	ldr	r0, [pc, #148]	; (402674 <wait_for_bootrom+0xb4>)
  4025de:	4b23      	ldr	r3, [pc, #140]	; (40266c <wait_for_bootrom+0xac>)
  4025e0:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  4025e2:	f010 0f01 	tst.w	r0, #1
  4025e6:	d110      	bne.n	40260a <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  4025e8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 402670 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  4025ec:	4e1f      	ldr	r6, [pc, #124]	; (40266c <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4025ee:	4d22      	ldr	r5, [pc, #136]	; (402678 <wait_for_bootrom+0xb8>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  4025f0:	2001      	movs	r0, #1
  4025f2:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  4025f4:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4025f8:	47b0      	blx	r6
  4025fa:	4604      	mov	r4, r0

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4025fc:	462a      	mov	r2, r5
  4025fe:	4601      	mov	r1, r0
  402600:	481e      	ldr	r0, [pc, #120]	; (40267c <wait_for_bootrom+0xbc>)
  402602:	4b1f      	ldr	r3, [pc, #124]	; (402680 <wait_for_bootrom+0xc0>)
  402604:	4798      	blx	r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  402606:	42ac      	cmp	r4, r5
  402608:	d1f2      	bne.n	4025f0 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  40260a:	2f02      	cmp	r7, #2
  40260c:	d10a      	bne.n	402624 <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  40260e:	491d      	ldr	r1, [pc, #116]	; (402684 <wait_for_bootrom+0xc4>)
  402610:	481d      	ldr	r0, [pc, #116]	; (402688 <wait_for_bootrom+0xc8>)
  402612:	4c1e      	ldr	r4, [pc, #120]	; (40268c <wait_for_bootrom+0xcc>)
  402614:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  402616:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40261a:	f241 008c 	movw	r0, #4236	; 0x108c
  40261e:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  402620:	2400      	movs	r4, #0
  402622:	e00f      	b.n	402644 <wait_for_bootrom+0x84>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  402624:	2f03      	cmp	r7, #3
  402626:	d109      	bne.n	40263c <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  402628:	4916      	ldr	r1, [pc, #88]	; (402684 <wait_for_bootrom+0xc4>)
  40262a:	4817      	ldr	r0, [pc, #92]	; (402688 <wait_for_bootrom+0xc8>)
  40262c:	4c17      	ldr	r4, [pc, #92]	; (40268c <wait_for_bootrom+0xcc>)
  40262e:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  402630:	2100      	movs	r1, #0
  402632:	f241 008c 	movw	r0, #4236	; 0x108c
  402636:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  402638:	2400      	movs	r4, #0
  40263a:	e003      	b.n	402644 <wait_for_bootrom+0x84>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  40263c:	2f04      	cmp	r7, #4
  40263e:	bf14      	ite	ne
  402640:	2400      	movne	r4, #0
  402642:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  402644:	4b12      	ldr	r3, [pc, #72]	; (402690 <wait_for_bootrom+0xd0>)
  402646:	4798      	blx	r3
  402648:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40264c:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  402650:	bf0c      	ite	eq
  402652:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  402656:	4620      	movne	r0, r4
  402658:	4b0e      	ldr	r3, [pc, #56]	; (402694 <wait_for_bootrom+0xd4>)
  40265a:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  40265c:	490e      	ldr	r1, [pc, #56]	; (402698 <wait_for_bootrom+0xd8>)
  40265e:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  402662:	4b0a      	ldr	r3, [pc, #40]	; (40268c <wait_for_bootrom+0xcc>)
  402664:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  402666:	2000      	movs	r0, #0
  402668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40266c:	004027fd 	.word	0x004027fd
  402670:	00401151 	.word	0x00401151
  402674:	000207bc 	.word	0x000207bc
  402678:	10add09e 	.word	0x10add09e
  40267c:	0040889c 	.word	0x0040889c
  402680:	00405121 	.word	0x00405121
  402684:	3c1cd57d 	.word	0x3c1cd57d
  402688:	000207ac 	.word	0x000207ac
  40268c:	00402815 	.word	0x00402815
  402690:	00402511 	.word	0x00402511
  402694:	0040233d 	.word	0x0040233d
  402698:	ef522f61 	.word	0xef522f61

0040269c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  40269c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40269e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  4026a0:	f241 038c 	movw	r3, #4236	; 0x108c
  4026a4:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4026a6:	4b18      	ldr	r3, [pc, #96]	; (402708 <wait_for_firmware_start+0x6c>)
  4026a8:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4026aa:	3802      	subs	r0, #2
  4026ac:	b2c0      	uxtb	r0, r0
  4026ae:	2801      	cmp	r0, #1
  4026b0:	d810      	bhi.n	4026d4 <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  4026b2:	4b16      	ldr	r3, [pc, #88]	; (40270c <wait_for_firmware_start+0x70>)
  4026b4:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  4026b6:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  4026ba:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  4026be:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  4026c2:	9300      	str	r3, [sp, #0]
  4026c4:	e006      	b.n	4026d4 <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4026c6:	4638      	mov	r0, r7
  4026c8:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4026ca:	9801      	ldr	r0, [sp, #4]
  4026cc:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  4026ce:	3c01      	subs	r4, #1
  4026d0:	d106      	bne.n	4026e0 <wait_for_firmware_start+0x44>
  4026d2:	e013      	b.n	4026fc <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  4026d4:	f04f 34ff 	mov.w	r4, #4294967295
  4026d8:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4026da:	2702      	movs	r7, #2
  4026dc:	4e0c      	ldr	r6, [pc, #48]	; (402710 <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4026de:	4d0d      	ldr	r5, [pc, #52]	; (402714 <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  4026e0:	9b00      	ldr	r3, [sp, #0]
  4026e2:	4298      	cmp	r0, r3
  4026e4:	d1ef      	bne.n	4026c6 <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  4026e6:	9a00      	ldr	r2, [sp, #0]
  4026e8:	4b07      	ldr	r3, [pc, #28]	; (402708 <wait_for_firmware_start+0x6c>)
  4026ea:	429a      	cmp	r2, r3
  4026ec:	d109      	bne.n	402702 <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  4026ee:	2100      	movs	r1, #0
  4026f0:	f241 008c 	movw	r0, #4236	; 0x108c
  4026f4:	4b08      	ldr	r3, [pc, #32]	; (402718 <wait_for_firmware_start+0x7c>)
  4026f6:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  4026f8:	2000      	movs	r0, #0
  4026fa:	e003      	b.n	402704 <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  4026fc:	f06f 0004 	mvn.w	r0, #4
  402700:	e000      	b.n	402704 <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  402702:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  402704:	b003      	add	sp, #12
  402706:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402708:	02532636 	.word	0x02532636
  40270c:	000207ac 	.word	0x000207ac
  402710:	00401151 	.word	0x00401151
  402714:	004027fd 	.word	0x004027fd
  402718:	00402815 	.word	0x00402815

0040271c <chip_deinit>:

sint8 chip_deinit(void)
{
  40271c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40271e:	b083      	sub	sp, #12
	uint32 reg = 0;
  402720:	a902      	add	r1, sp, #8
  402722:	2300      	movs	r3, #0
  402724:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  402728:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40272c:	4b24      	ldr	r3, [pc, #144]	; (4027c0 <chip_deinit+0xa4>)
  40272e:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  402730:	b148      	cbz	r0, 402746 <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  402732:	f240 2231 	movw	r2, #561	; 0x231
  402736:	4923      	ldr	r1, [pc, #140]	; (4027c4 <chip_deinit+0xa8>)
  402738:	4823      	ldr	r0, [pc, #140]	; (4027c8 <chip_deinit+0xac>)
  40273a:	4c24      	ldr	r4, [pc, #144]	; (4027cc <chip_deinit+0xb0>)
  40273c:	47a0      	blx	r4
  40273e:	4824      	ldr	r0, [pc, #144]	; (4027d0 <chip_deinit+0xb4>)
  402740:	47a0      	blx	r4
  402742:	4824      	ldr	r0, [pc, #144]	; (4027d4 <chip_deinit+0xb8>)
  402744:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  402746:	9901      	ldr	r1, [sp, #4]
  402748:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40274c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40274e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  402752:	4b21      	ldr	r3, [pc, #132]	; (4027d8 <chip_deinit+0xbc>)
  402754:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  402756:	4605      	mov	r5, r0
  402758:	b158      	cbz	r0, 402772 <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  40275a:	f240 2237 	movw	r2, #567	; 0x237
  40275e:	4919      	ldr	r1, [pc, #100]	; (4027c4 <chip_deinit+0xa8>)
  402760:	4819      	ldr	r0, [pc, #100]	; (4027c8 <chip_deinit+0xac>)
  402762:	4c1a      	ldr	r4, [pc, #104]	; (4027cc <chip_deinit+0xb0>)
  402764:	47a0      	blx	r4
  402766:	481d      	ldr	r0, [pc, #116]	; (4027dc <chip_deinit+0xc0>)
  402768:	47a0      	blx	r4
  40276a:	481a      	ldr	r0, [pc, #104]	; (4027d4 <chip_deinit+0xb8>)
  40276c:	47a0      	blx	r4
		return ret;
  40276e:	4628      	mov	r0, r5
  402770:	e024      	b.n	4027bc <chip_deinit+0xa0>
  402772:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  402774:	4e12      	ldr	r6, [pc, #72]	; (4027c0 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  402776:	4f18      	ldr	r7, [pc, #96]	; (4027d8 <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  402778:	a901      	add	r1, sp, #4
  40277a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40277e:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  402780:	4605      	mov	r5, r0
  402782:	b158      	cbz	r0, 40279c <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  402784:	f240 223e 	movw	r2, #574	; 0x23e
  402788:	490e      	ldr	r1, [pc, #56]	; (4027c4 <chip_deinit+0xa8>)
  40278a:	480f      	ldr	r0, [pc, #60]	; (4027c8 <chip_deinit+0xac>)
  40278c:	4c0f      	ldr	r4, [pc, #60]	; (4027cc <chip_deinit+0xb0>)
  40278e:	47a0      	blx	r4
  402790:	4813      	ldr	r0, [pc, #76]	; (4027e0 <chip_deinit+0xc4>)
  402792:	47a0      	blx	r4
  402794:	480f      	ldr	r0, [pc, #60]	; (4027d4 <chip_deinit+0xb8>)
  402796:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  402798:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  40279a:	e00f      	b.n	4027bc <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  40279c:	9901      	ldr	r1, [sp, #4]
  40279e:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4027a2:	d00a      	beq.n	4027ba <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  4027a4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4027a8:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4027aa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4027ae:	47b8      	blx	r7
  4027b0:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4027b2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4027b6:	d1df      	bne.n	402778 <chip_deinit+0x5c>
  4027b8:	e000      	b.n	4027bc <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4027ba:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  4027bc:	b003      	add	sp, #12
  4027be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4027c0:	00402809 	.word	0x00402809
  4027c4:	004087f4 	.word	0x004087f4
  4027c8:	004081fc 	.word	0x004081fc
  4027cc:	00405121 	.word	0x00405121
  4027d0:	004088ac 	.word	0x004088ac
  4027d4:	00409330 	.word	0x00409330
  4027d8:	00402815 	.word	0x00402815
  4027dc:	004088c8 	.word	0x004088c8
  4027e0:	004088e4 	.word	0x004088e4

004027e4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  4027e4:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  4027e6:	4b01      	ldr	r3, [pc, #4]	; (4027ec <nm_bus_iface_init+0x8>)
  4027e8:	4798      	blx	r3

	return ret;
}
  4027ea:	bd08      	pop	{r3, pc}
  4027ec:	004012c1 	.word	0x004012c1

004027f0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  4027f0:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  4027f2:	4b01      	ldr	r3, [pc, #4]	; (4027f8 <nm_bus_iface_deinit+0x8>)
  4027f4:	4798      	blx	r3

	return ret;
}
  4027f6:	bd08      	pop	{r3, pc}
  4027f8:	004014ad 	.word	0x004014ad

004027fc <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  4027fc:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  4027fe:	4b01      	ldr	r3, [pc, #4]	; (402804 <nm_read_reg+0x8>)
  402800:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  402802:	bd08      	pop	{r3, pc}
  402804:	0040304d 	.word	0x0040304d

00402808 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402808:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  40280a:	4b01      	ldr	r3, [pc, #4]	; (402810 <nm_read_reg_with_ret+0x8>)
  40280c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40280e:	bd08      	pop	{r3, pc}
  402810:	00403065 	.word	0x00403065

00402814 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  402814:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  402816:	4b01      	ldr	r3, [pc, #4]	; (40281c <nm_write_reg+0x8>)
  402818:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  40281a:	bd08      	pop	{r3, pc}
  40281c:	0040307d 	.word	0x0040307d

00402820 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  402820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402824:	4607      	mov	r7, r0
  402826:	4689      	mov	r9, r1
  402828:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40282a:	4b13      	ldr	r3, [pc, #76]	; (402878 <nm_read_block+0x58>)
  40282c:	f8b3 8000 	ldrh.w	r8, [r3]
  402830:	f1a8 0808 	sub.w	r8, r8, #8
  402834:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402838:	4542      	cmp	r2, r8
  40283a:	d808      	bhi.n	40284e <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  40283c:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  40283e:	b2aa      	uxth	r2, r5
  402840:	eb09 0106 	add.w	r1, r9, r6
  402844:	4638      	mov	r0, r7
  402846:	4b0d      	ldr	r3, [pc, #52]	; (40287c <nm_read_block+0x5c>)
  402848:	4798      	blx	r3
  40284a:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  40284c:	e010      	b.n	402870 <nm_read_block+0x50>
  40284e:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402850:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  402852:	f8df a028 	ldr.w	sl, [pc, #40]	; 40287c <nm_read_block+0x5c>
  402856:	4642      	mov	r2, r8
  402858:	eb09 0106 	add.w	r1, r9, r6
  40285c:	4638      	mov	r0, r7
  40285e:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  402860:	4603      	mov	r3, r0
  402862:	b928      	cbnz	r0, 402870 <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  402864:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  402866:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  402868:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40286a:	42a5      	cmp	r5, r4
  40286c:	d8f3      	bhi.n	402856 <nm_read_block+0x36>
  40286e:	e7e6      	b.n	40283e <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  402870:	4618      	mov	r0, r3
  402872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402876:	bf00      	nop
  402878:	20400030 	.word	0x20400030
  40287c:	004031a1 	.word	0x004031a1

00402880 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  402880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402884:	4607      	mov	r7, r0
  402886:	4689      	mov	r9, r1
  402888:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40288a:	4b13      	ldr	r3, [pc, #76]	; (4028d8 <nm_write_block+0x58>)
  40288c:	f8b3 8000 	ldrh.w	r8, [r3]
  402890:	f1a8 0808 	sub.w	r8, r8, #8
  402894:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402898:	4542      	cmp	r2, r8
  40289a:	d808      	bhi.n	4028ae <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  40289c:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  40289e:	b2aa      	uxth	r2, r5
  4028a0:	eb09 0106 	add.w	r1, r9, r6
  4028a4:	4638      	mov	r0, r7
  4028a6:	4b0d      	ldr	r3, [pc, #52]	; (4028dc <nm_write_block+0x5c>)
  4028a8:	4798      	blx	r3
  4028aa:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  4028ac:	e010      	b.n	4028d0 <nm_write_block+0x50>
  4028ae:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4028b0:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4028b2:	f8df a028 	ldr.w	sl, [pc, #40]	; 4028dc <nm_write_block+0x5c>
  4028b6:	4642      	mov	r2, r8
  4028b8:	eb09 0106 	add.w	r1, r9, r6
  4028bc:	4638      	mov	r0, r7
  4028be:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4028c0:	4603      	mov	r3, r0
  4028c2:	b928      	cbnz	r0, 4028d0 <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  4028c4:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4028c6:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4028c8:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4028ca:	42a5      	cmp	r5, r4
  4028cc:	d8f3      	bhi.n	4028b6 <nm_write_block+0x36>
  4028ce:	e7e6      	b.n	40289e <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  4028d0:	4618      	mov	r0, r3
  4028d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028d6:	bf00      	nop
  4028d8:	20400030 	.word	0x20400030
  4028dc:	0040326d 	.word	0x0040326d

004028e0 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  4028e0:	b530      	push	{r4, r5, lr}
  4028e2:	b083      	sub	sp, #12
  4028e4:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  4028e6:	a902      	add	r1, sp, #8
  4028e8:	2300      	movs	r3, #0
  4028ea:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  4028ee:	4823      	ldr	r0, [pc, #140]	; (40297c <nm_get_firmware_info+0x9c>)
  4028f0:	4b23      	ldr	r3, [pc, #140]	; (402980 <nm_get_firmware_info+0xa0>)
  4028f2:	4798      	blx	r3
  4028f4:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  4028f6:	9a01      	ldr	r2, [sp, #4]
  4028f8:	4b22      	ldr	r3, [pc, #136]	; (402984 <nm_get_firmware_info+0xa4>)
  4028fa:	429a      	cmp	r2, r3
  4028fc:	d105      	bne.n	40290a <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4028fe:	a901      	add	r1, sp, #4
  402900:	f241 0048 	movw	r0, #4168	; 0x1048
  402904:	4b1e      	ldr	r3, [pc, #120]	; (402980 <nm_get_firmware_info+0xa0>)
  402906:	4798      	blx	r3
  402908:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  40290a:	9b01      	ldr	r3, [sp, #4]
  40290c:	0c1a      	lsrs	r2, r3, #16
  40290e:	1211      	asrs	r1, r2, #8
  402910:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  402912:	f3c2 1103 	ubfx	r1, r2, #4, #4
  402916:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  402918:	f002 020f 	and.w	r2, r2, #15
  40291c:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  40291e:	121a      	asrs	r2, r3, #8
  402920:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  402922:	f3c3 1203 	ubfx	r2, r3, #4, #4
  402926:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  402928:	f003 030f 	and.w	r3, r3, #15
  40292c:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  40292e:	4b16      	ldr	r3, [pc, #88]	; (402988 <nm_get_firmware_info+0xa8>)
  402930:	4798      	blx	r3
  402932:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  402934:	7922      	ldrb	r2, [r4, #4]
  402936:	79a3      	ldrb	r3, [r4, #6]
  402938:	f003 030f 	and.w	r3, r3, #15
  40293c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  402940:	7963      	ldrb	r3, [r4, #5]
  402942:	011b      	lsls	r3, r3, #4
  402944:	b2db      	uxtb	r3, r3
  402946:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  402948:	79e1      	ldrb	r1, [r4, #7]
  40294a:	7a62      	ldrb	r2, [r4, #9]
  40294c:	f002 020f 	and.w	r2, r2, #15
  402950:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  402954:	7a22      	ldrb	r2, [r4, #8]
  402956:	0112      	lsls	r2, r2, #4
  402958:	b2d2      	uxtb	r2, r2
  40295a:	430a      	orrs	r2, r1
  40295c:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  402960:	428a      	cmp	r2, r1
  402962:	bf88      	it	hi
  402964:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  402968:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  40296c:	4293      	cmp	r3, r2
	}
	return ret;
}
  40296e:	bf8c      	ite	hi
  402970:	4628      	movhi	r0, r5
  402972:	f06f 000c 	mvnls.w	r0, #12
  402976:	b003      	add	sp, #12
  402978:	bd30      	pop	{r4, r5, pc}
  40297a:	bf00      	nop
  40297c:	000207ac 	.word	0x000207ac
  402980:	00402809 	.word	0x00402809
  402984:	d75dc1c3 	.word	0xd75dc1c3
  402988:	00402511 	.word	0x00402511

0040298c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  40298c:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  40298e:	b130      	cbz	r0, 40299e <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  402990:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  402992:	1e63      	subs	r3, r4, #1
  402994:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  402996:	2b04      	cmp	r3, #4
  402998:	bf28      	it	cs
  40299a:	2401      	movcs	r4, #1
  40299c:	e000      	b.n	4029a0 <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  40299e:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  4029a0:	2000      	movs	r0, #0
  4029a2:	4b1d      	ldr	r3, [pc, #116]	; (402a18 <nm_drv_init+0x8c>)
  4029a4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4029a6:	4605      	mov	r5, r0
  4029a8:	b150      	cbz	r0, 4029c0 <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  4029aa:	f44f 7292 	mov.w	r2, #292	; 0x124
  4029ae:	491b      	ldr	r1, [pc, #108]	; (402a1c <nm_drv_init+0x90>)
  4029b0:	481b      	ldr	r0, [pc, #108]	; (402a20 <nm_drv_init+0x94>)
  4029b2:	4c1c      	ldr	r4, [pc, #112]	; (402a24 <nm_drv_init+0x98>)
  4029b4:	47a0      	blx	r4
  4029b6:	481c      	ldr	r0, [pc, #112]	; (402a28 <nm_drv_init+0x9c>)
  4029b8:	47a0      	blx	r4
  4029ba:	481c      	ldr	r0, [pc, #112]	; (402a2c <nm_drv_init+0xa0>)
  4029bc:	47a0      	blx	r4
		goto ERR1;
  4029be:	e029      	b.n	402a14 <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  4029c0:	481b      	ldr	r0, [pc, #108]	; (402a30 <nm_drv_init+0xa4>)
  4029c2:	4d18      	ldr	r5, [pc, #96]	; (402a24 <nm_drv_init+0x98>)
  4029c4:	47a8      	blx	r5
  4029c6:	4b1b      	ldr	r3, [pc, #108]	; (402a34 <nm_drv_init+0xa8>)
  4029c8:	4798      	blx	r3
  4029ca:	4601      	mov	r1, r0
  4029cc:	481a      	ldr	r0, [pc, #104]	; (402a38 <nm_drv_init+0xac>)
  4029ce:	47a8      	blx	r5
  4029d0:	4816      	ldr	r0, [pc, #88]	; (402a2c <nm_drv_init+0xa0>)
  4029d2:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  4029d4:	4b19      	ldr	r3, [pc, #100]	; (402a3c <nm_drv_init+0xb0>)
  4029d6:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  4029d8:	4620      	mov	r0, r4
  4029da:	4b19      	ldr	r3, [pc, #100]	; (402a40 <nm_drv_init+0xb4>)
  4029dc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4029de:	4605      	mov	r5, r0
  4029e0:	b9b0      	cbnz	r0, 402a10 <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  4029e2:	4620      	mov	r0, r4
  4029e4:	4b17      	ldr	r3, [pc, #92]	; (402a44 <nm_drv_init+0xb8>)
  4029e6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4029e8:	4605      	mov	r5, r0
  4029ea:	b988      	cbnz	r0, 402a10 <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  4029ec:	3c02      	subs	r4, #2
  4029ee:	b2e4      	uxtb	r4, r4
  4029f0:	2c01      	cmp	r4, #1
  4029f2:	d90f      	bls.n	402a14 <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  4029f4:	4b14      	ldr	r3, [pc, #80]	; (402a48 <nm_drv_init+0xbc>)
  4029f6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4029f8:	4605      	mov	r5, r0
  4029fa:	b158      	cbz	r0, 402a14 <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  4029fc:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  402a00:	4906      	ldr	r1, [pc, #24]	; (402a1c <nm_drv_init+0x90>)
  402a02:	4807      	ldr	r0, [pc, #28]	; (402a20 <nm_drv_init+0x94>)
  402a04:	4c07      	ldr	r4, [pc, #28]	; (402a24 <nm_drv_init+0x98>)
  402a06:	47a0      	blx	r4
  402a08:	4810      	ldr	r0, [pc, #64]	; (402a4c <nm_drv_init+0xc0>)
  402a0a:	47a0      	blx	r4
  402a0c:	4807      	ldr	r0, [pc, #28]	; (402a2c <nm_drv_init+0xa0>)
  402a0e:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  402a10:	4b0f      	ldr	r3, [pc, #60]	; (402a50 <nm_drv_init+0xc4>)
  402a12:	4798      	blx	r3
ERR1:
	return ret;
}
  402a14:	4628      	mov	r0, r5
  402a16:	bd38      	pop	{r3, r4, r5, pc}
  402a18:	004027e5 	.word	0x004027e5
  402a1c:	004089ec 	.word	0x004089ec
  402a20:	004081fc 	.word	0x004081fc
  402a24:	00405121 	.word	0x00405121
  402a28:	00408940 	.word	0x00408940
  402a2c:	00409330 	.word	0x00409330
  402a30:	004084bc 	.word	0x004084bc
  402a34:	00402511 	.word	0x00402511
  402a38:	0040895c 	.word	0x0040895c
  402a3c:	00403095 	.word	0x00403095
  402a40:	004025c1 	.word	0x004025c1
  402a44:	0040269d 	.word	0x0040269d
  402a48:	004024a9 	.word	0x004024a9
  402a4c:	0040896c 	.word	0x0040896c
  402a50:	004027f1 	.word	0x004027f1

00402a54 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  402a54:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  402a56:	4b19      	ldr	r3, [pc, #100]	; (402abc <nm_drv_deinit+0x68>)
  402a58:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a5a:	b158      	cbz	r0, 402a74 <nm_drv_deinit+0x20>
  402a5c:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  402a5e:	f44f 72ba 	mov.w	r2, #372	; 0x174
  402a62:	4917      	ldr	r1, [pc, #92]	; (402ac0 <nm_drv_deinit+0x6c>)
  402a64:	4817      	ldr	r0, [pc, #92]	; (402ac4 <nm_drv_deinit+0x70>)
  402a66:	4d18      	ldr	r5, [pc, #96]	; (402ac8 <nm_drv_deinit+0x74>)
  402a68:	47a8      	blx	r5
  402a6a:	4818      	ldr	r0, [pc, #96]	; (402acc <nm_drv_deinit+0x78>)
  402a6c:	47a8      	blx	r5
  402a6e:	4818      	ldr	r0, [pc, #96]	; (402ad0 <nm_drv_deinit+0x7c>)
  402a70:	47a8      	blx	r5
		goto ERR1;
  402a72:	e020      	b.n	402ab6 <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  402a74:	2000      	movs	r0, #0
  402a76:	4b17      	ldr	r3, [pc, #92]	; (402ad4 <nm_drv_deinit+0x80>)
  402a78:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a7a:	4604      	mov	r4, r0
  402a7c:	b150      	cbz	r0, 402a94 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  402a7e:	f240 127b 	movw	r2, #379	; 0x17b
  402a82:	490f      	ldr	r1, [pc, #60]	; (402ac0 <nm_drv_deinit+0x6c>)
  402a84:	480f      	ldr	r0, [pc, #60]	; (402ac4 <nm_drv_deinit+0x70>)
  402a86:	4d10      	ldr	r5, [pc, #64]	; (402ac8 <nm_drv_deinit+0x74>)
  402a88:	47a8      	blx	r5
  402a8a:	4813      	ldr	r0, [pc, #76]	; (402ad8 <nm_drv_deinit+0x84>)
  402a8c:	47a8      	blx	r5
  402a8e:	4810      	ldr	r0, [pc, #64]	; (402ad0 <nm_drv_deinit+0x7c>)
  402a90:	47a8      	blx	r5
		goto ERR1;
  402a92:	e010      	b.n	402ab6 <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  402a94:	4b11      	ldr	r3, [pc, #68]	; (402adc <nm_drv_deinit+0x88>)
  402a96:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a98:	4604      	mov	r4, r0
  402a9a:	b150      	cbz	r0, 402ab2 <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  402a9c:	f240 1281 	movw	r2, #385	; 0x181
  402aa0:	4907      	ldr	r1, [pc, #28]	; (402ac0 <nm_drv_deinit+0x6c>)
  402aa2:	4808      	ldr	r0, [pc, #32]	; (402ac4 <nm_drv_deinit+0x70>)
  402aa4:	4d08      	ldr	r5, [pc, #32]	; (402ac8 <nm_drv_deinit+0x74>)
  402aa6:	47a8      	blx	r5
  402aa8:	480d      	ldr	r0, [pc, #52]	; (402ae0 <nm_drv_deinit+0x8c>)
  402aaa:	47a8      	blx	r5
  402aac:	4808      	ldr	r0, [pc, #32]	; (402ad0 <nm_drv_deinit+0x7c>)
  402aae:	47a8      	blx	r5
		goto ERR1;
  402ab0:	e001      	b.n	402ab6 <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  402ab2:	4b0c      	ldr	r3, [pc, #48]	; (402ae4 <nm_drv_deinit+0x90>)
  402ab4:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  402ab6:	4620      	mov	r0, r4
  402ab8:	bd38      	pop	{r3, r4, r5, pc}
  402aba:	bf00      	nop
  402abc:	0040271d 	.word	0x0040271d
  402ac0:	004089f8 	.word	0x004089f8
  402ac4:	004081fc 	.word	0x004081fc
  402ac8:	00405121 	.word	0x00405121
  402acc:	0040898c 	.word	0x0040898c
  402ad0:	00409330 	.word	0x00409330
  402ad4:	00403afd 	.word	0x00403afd
  402ad8:	004089ac 	.word	0x004089ac
  402adc:	004027f1 	.word	0x004027f1
  402ae0:	004089d0 	.word	0x004089d0
  402ae4:	00403041 	.word	0x00403041

00402ae8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  402ae8:	b500      	push	{lr}
  402aea:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  402aec:	2300      	movs	r3, #0
  402aee:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  402af0:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  402af2:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402af6:	a901      	add	r1, sp, #4
  402af8:	2003      	movs	r0, #3
  402afa:	4b02      	ldr	r3, [pc, #8]	; (402b04 <nmi_spi_read+0x1c>)
  402afc:	4798      	blx	r3
}
  402afe:	b005      	add	sp, #20
  402b00:	f85d fb04 	ldr.w	pc, [sp], #4
  402b04:	004013dd 	.word	0x004013dd

00402b08 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402b08:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b0a:	b083      	sub	sp, #12
  402b0c:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  402b0e:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  402b12:	b2db      	uxtb	r3, r3
  402b14:	2b01      	cmp	r3, #1
  402b16:	d901      	bls.n	402b1c <spi_cmd_rsp+0x14>
  402b18:	28cf      	cmp	r0, #207	; 0xcf
  402b1a:	d106      	bne.n	402b2a <spi_cmd_rsp+0x22>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402b1c:	2101      	movs	r1, #1
  402b1e:	f10d 0007 	add.w	r0, sp, #7
  402b22:	4b22      	ldr	r3, [pc, #136]	; (402bac <spi_cmd_rsp+0xa4>)
  402b24:	4798      	blx	r3
  402b26:	2800      	cmp	r0, #0
  402b28:	d13a      	bne.n	402ba0 <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402b2a:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402b2c:	2701      	movs	r7, #1
  402b2e:	4e1f      	ldr	r6, [pc, #124]	; (402bac <spi_cmd_rsp+0xa4>)
  402b30:	4639      	mov	r1, r7
  402b32:	f10d 0007 	add.w	r0, sp, #7
  402b36:	47b0      	blx	r6
  402b38:	b158      	cbz	r0, 402b52 <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402b3a:	f240 1227 	movw	r2, #295	; 0x127
  402b3e:	491c      	ldr	r1, [pc, #112]	; (402bb0 <spi_cmd_rsp+0xa8>)
  402b40:	481c      	ldr	r0, [pc, #112]	; (402bb4 <spi_cmd_rsp+0xac>)
  402b42:	4c1d      	ldr	r4, [pc, #116]	; (402bb8 <spi_cmd_rsp+0xb0>)
  402b44:	47a0      	blx	r4
  402b46:	481d      	ldr	r0, [pc, #116]	; (402bbc <spi_cmd_rsp+0xb4>)
  402b48:	47a0      	blx	r4
  402b4a:	481d      	ldr	r0, [pc, #116]	; (402bc0 <spi_cmd_rsp+0xb8>)
  402b4c:	47a0      	blx	r4
			result = N_FAIL;
  402b4e:	2000      	movs	r0, #0
			goto _fail_;
  402b50:	e029      	b.n	402ba6 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  402b52:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402b56:	42ab      	cmp	r3, r5
  402b58:	d005      	beq.n	402b66 <spi_cmd_rsp+0x5e>
  402b5a:	1e63      	subs	r3, r4, #1
  402b5c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  402b60:	d1e6      	bne.n	402b30 <spi_cmd_rsp+0x28>
  402b62:	240b      	movs	r4, #11
  402b64:	e000      	b.n	402b68 <spi_cmd_rsp+0x60>
  402b66:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402b68:	2601      	movs	r6, #1
  402b6a:	4d10      	ldr	r5, [pc, #64]	; (402bac <spi_cmd_rsp+0xa4>)
  402b6c:	4631      	mov	r1, r6
  402b6e:	f10d 0007 	add.w	r0, sp, #7
  402b72:	47a8      	blx	r5
  402b74:	b158      	cbz	r0, 402b8e <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402b76:	f240 1235 	movw	r2, #309	; 0x135
  402b7a:	490d      	ldr	r1, [pc, #52]	; (402bb0 <spi_cmd_rsp+0xa8>)
  402b7c:	480d      	ldr	r0, [pc, #52]	; (402bb4 <spi_cmd_rsp+0xac>)
  402b7e:	4c0e      	ldr	r4, [pc, #56]	; (402bb8 <spi_cmd_rsp+0xb0>)
  402b80:	47a0      	blx	r4
  402b82:	480e      	ldr	r0, [pc, #56]	; (402bbc <spi_cmd_rsp+0xb4>)
  402b84:	47a0      	blx	r4
  402b86:	480e      	ldr	r0, [pc, #56]	; (402bc0 <spi_cmd_rsp+0xb8>)
  402b88:	47a0      	blx	r4
			result = N_FAIL;
  402b8a:	2000      	movs	r0, #0
			goto _fail_;
  402b8c:	e00b      	b.n	402ba6 <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  402b8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402b92:	b13b      	cbz	r3, 402ba4 <spi_cmd_rsp+0x9c>
  402b94:	1e63      	subs	r3, r4, #1
  402b96:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  402b9a:	d1e7      	bne.n	402b6c <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  402b9c:	2001      	movs	r0, #1
  402b9e:	e002      	b.n	402ba6 <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  402ba0:	2000      	movs	r0, #0
  402ba2:	e000      	b.n	402ba6 <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  402ba4:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  402ba6:	b003      	add	sp, #12
  402ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402baa:	bf00      	nop
  402bac:	00402ae9 	.word	0x00402ae9
  402bb0:	0040901c 	.word	0x0040901c
  402bb4:	004081fc 	.word	0x004081fc
  402bb8:	00405121 	.word	0x00405121
  402bbc:	00408b40 	.word	0x00408b40
  402bc0:	00409330 	.word	0x00409330

00402bc4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  402bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402bc8:	b083      	sub	sp, #12
  402bca:	4682      	mov	sl, r0
  402bcc:	4689      	mov	r9, r1
  402bce:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  402bd0:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402bd4:	4d35      	ldr	r5, [pc, #212]	; (402cac <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  402bd6:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  402bda:	bf94      	ite	ls
  402bdc:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  402be0:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  402be4:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402be6:	2601      	movs	r6, #1
  402be8:	4631      	mov	r1, r6
  402bea:	f10d 0003 	add.w	r0, sp, #3
  402bee:	47a8      	blx	r5
  402bf0:	b158      	cbz	r0, 402c0a <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  402bf2:	f240 1257 	movw	r2, #343	; 0x157
  402bf6:	492e      	ldr	r1, [pc, #184]	; (402cb0 <spi_data_read+0xec>)
  402bf8:	482e      	ldr	r0, [pc, #184]	; (402cb4 <spi_data_read+0xf0>)
  402bfa:	4c2f      	ldr	r4, [pc, #188]	; (402cb8 <spi_data_read+0xf4>)
  402bfc:	47a0      	blx	r4
  402bfe:	482f      	ldr	r0, [pc, #188]	; (402cbc <spi_data_read+0xf8>)
  402c00:	47a0      	blx	r4
  402c02:	482f      	ldr	r0, [pc, #188]	; (402cc0 <spi_data_read+0xfc>)
  402c04:	47a0      	blx	r4
  402c06:	2000      	movs	r0, #0
  402c08:	e04d      	b.n	402ca6 <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  402c0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402c0e:	091b      	lsrs	r3, r3, #4
  402c10:	2b0f      	cmp	r3, #15
  402c12:	d005      	beq.n	402c20 <spi_data_read+0x5c>
  402c14:	3c01      	subs	r4, #1
  402c16:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  402c18:	f1b4 3fff 	cmp.w	r4, #4294967295
  402c1c:	d1e4      	bne.n	402be8 <spi_data_read+0x24>
  402c1e:	e001      	b.n	402c24 <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  402c20:	2c00      	cmp	r4, #0
  402c22:	dc0d      	bgt.n	402c40 <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  402c24:	f240 1263 	movw	r2, #355	; 0x163
  402c28:	4921      	ldr	r1, [pc, #132]	; (402cb0 <spi_data_read+0xec>)
  402c2a:	4822      	ldr	r0, [pc, #136]	; (402cb4 <spi_data_read+0xf0>)
  402c2c:	4c22      	ldr	r4, [pc, #136]	; (402cb8 <spi_data_read+0xf4>)
  402c2e:	47a0      	blx	r4
  402c30:	f89d 1003 	ldrb.w	r1, [sp, #3]
  402c34:	4823      	ldr	r0, [pc, #140]	; (402cc4 <spi_data_read+0x100>)
  402c36:	47a0      	blx	r4
  402c38:	4821      	ldr	r0, [pc, #132]	; (402cc0 <spi_data_read+0xfc>)
  402c3a:	47a0      	blx	r4
			result = N_FAIL;
  402c3c:	2000      	movs	r0, #0
			break;
  402c3e:	e032      	b.n	402ca6 <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  402c40:	b2bf      	uxth	r7, r7
  402c42:	4639      	mov	r1, r7
  402c44:	eb0a 0008 	add.w	r0, sl, r8
  402c48:	47a8      	blx	r5
  402c4a:	b158      	cbz	r0, 402c64 <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  402c4c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  402c50:	4917      	ldr	r1, [pc, #92]	; (402cb0 <spi_data_read+0xec>)
  402c52:	4818      	ldr	r0, [pc, #96]	; (402cb4 <spi_data_read+0xf0>)
  402c54:	4c18      	ldr	r4, [pc, #96]	; (402cb8 <spi_data_read+0xf4>)
  402c56:	47a0      	blx	r4
  402c58:	481b      	ldr	r0, [pc, #108]	; (402cc8 <spi_data_read+0x104>)
  402c5a:	47a0      	blx	r4
  402c5c:	4818      	ldr	r0, [pc, #96]	; (402cc0 <spi_data_read+0xfc>)
  402c5e:	47a0      	blx	r4
			result = N_FAIL;
  402c60:	2000      	movs	r0, #0
			break;
  402c62:	e020      	b.n	402ca6 <spi_data_read+0xe2>
		}
		if(!clockless)
  402c64:	f1bb 0f00 	cmp.w	fp, #0
  402c68:	d112      	bne.n	402c90 <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  402c6a:	4b18      	ldr	r3, [pc, #96]	; (402ccc <spi_data_read+0x108>)
  402c6c:	781b      	ldrb	r3, [r3, #0]
  402c6e:	b97b      	cbnz	r3, 402c90 <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  402c70:	2102      	movs	r1, #2
  402c72:	a801      	add	r0, sp, #4
  402c74:	47a8      	blx	r5
  402c76:	b158      	cbz	r0, 402c90 <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  402c78:	f240 1277 	movw	r2, #375	; 0x177
  402c7c:	490c      	ldr	r1, [pc, #48]	; (402cb0 <spi_data_read+0xec>)
  402c7e:	480d      	ldr	r0, [pc, #52]	; (402cb4 <spi_data_read+0xf0>)
  402c80:	4c0d      	ldr	r4, [pc, #52]	; (402cb8 <spi_data_read+0xf4>)
  402c82:	47a0      	blx	r4
  402c84:	4812      	ldr	r0, [pc, #72]	; (402cd0 <spi_data_read+0x10c>)
  402c86:	47a0      	blx	r4
  402c88:	480d      	ldr	r0, [pc, #52]	; (402cc0 <spi_data_read+0xfc>)
  402c8a:	47a0      	blx	r4
					result = N_FAIL;
  402c8c:	2000      	movs	r0, #0
					break;
  402c8e:	e00a      	b.n	402ca6 <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  402c90:	44b8      	add	r8, r7
  402c92:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  402c96:	ebc7 0709 	rsb	r7, r7, r9
  402c9a:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  402c9e:	f1b9 0f00 	cmp.w	r9, #0
  402ca2:	d198      	bne.n	402bd6 <spi_data_read+0x12>
  402ca4:	2001      	movs	r0, #1

	return result;
}
  402ca6:	b003      	add	sp, #12
  402ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cac:	00402ae9 	.word	0x00402ae9
  402cb0:	00408a08 	.word	0x00408a08
  402cb4:	004081fc 	.word	0x004081fc
  402cb8:	00405121 	.word	0x00405121
  402cbc:	00408b74 	.word	0x00408b74
  402cc0:	00409330 	.word	0x00409330
  402cc4:	00408ba8 	.word	0x00408ba8
  402cc8:	00408bd8 	.word	0x00408bd8
  402ccc:	20400918 	.word	0x20400918
  402cd0:	00408c0c 	.word	0x00408c0c

00402cd4 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  402cd4:	b500      	push	{lr}
  402cd6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  402cd8:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  402cda:	2300      	movs	r3, #0
  402cdc:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  402cde:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402ce2:	a901      	add	r1, sp, #4
  402ce4:	2003      	movs	r0, #3
  402ce6:	4b02      	ldr	r3, [pc, #8]	; (402cf0 <nmi_spi_write+0x1c>)
  402ce8:	4798      	blx	r3
}
  402cea:	b005      	add	sp, #20
  402cec:	f85d fb04 	ldr.w	pc, [sp], #4
  402cf0:	004013dd 	.word	0x004013dd

00402cf4 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  402cf4:	b570      	push	{r4, r5, r6, lr}
  402cf6:	b084      	sub	sp, #16
  402cf8:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  402cfc:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  402d00:	38c1      	subs	r0, #193	; 0xc1
  402d02:	280e      	cmp	r0, #14
  402d04:	f200 80ae 	bhi.w	402e64 <spi_cmd+0x170>
  402d08:	e8df f000 	tbb	[pc, r0]
  402d0c:	125f3e3e 	.word	0x125f3e3e
  402d10:	4d4d2c23 	.word	0x4d4d2c23
  402d14:	acac0878 	.word	0xacac0878
  402d18:	acac      	.short	0xacac
  402d1a:	35          	.byte	0x35
  402d1b:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  402d1c:	0c0b      	lsrs	r3, r1, #16
  402d1e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402d22:	0a0b      	lsrs	r3, r1, #8
  402d24:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  402d28:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  402d2c:	2105      	movs	r1, #5
		break;
  402d2e:	e0a4      	b.n	402e7a <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  402d30:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  402d34:	b914      	cbnz	r4, 402d3c <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  402d36:	f88d 3005 	strb.w	r3, [sp, #5]
  402d3a:	e003      	b.n	402d44 <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  402d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402d40:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  402d44:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  402d48:	2300      	movs	r3, #0
  402d4a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402d4e:	2105      	movs	r1, #5
		break;
  402d50:	e093      	b.n	402e7a <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  402d52:	2300      	movs	r3, #0
  402d54:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402d58:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  402d5c:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402d60:	2105      	movs	r1, #5
		break;
  402d62:	e08a      	b.n	402e7a <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  402d64:	2300      	movs	r3, #0
  402d66:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402d6a:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  402d6e:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402d72:	2105      	movs	r1, #5
		break;
  402d74:	e081      	b.n	402e7a <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  402d76:	23ff      	movs	r3, #255	; 0xff
  402d78:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  402d7c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  402d80:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402d84:	2105      	movs	r1, #5
		break;
  402d86:	e078      	b.n	402e7a <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  402d88:	0c0a      	lsrs	r2, r1, #16
  402d8a:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402d8e:	0a0a      	lsrs	r2, r1, #8
  402d90:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  402d94:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  402d98:	0a1a      	lsrs	r2, r3, #8
  402d9a:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  402d9e:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  402da2:	2107      	movs	r1, #7
		break;
  402da4:	e069      	b.n	402e7a <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  402da6:	0c0a      	lsrs	r2, r1, #16
  402da8:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402dac:	0a0a      	lsrs	r2, r1, #8
  402dae:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  402db2:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  402db6:	0c1a      	lsrs	r2, r3, #16
  402db8:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  402dbc:	0a1a      	lsrs	r2, r3, #8
  402dbe:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  402dc2:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  402dc6:	2108      	movs	r1, #8
		break;
  402dc8:	e057      	b.n	402e7a <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  402dca:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  402dce:	b914      	cbnz	r4, 402dd6 <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  402dd0:	f88d 3005 	strb.w	r3, [sp, #5]
  402dd4:	e003      	b.n	402dde <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  402dd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402dda:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  402dde:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  402de2:	0e13      	lsrs	r3, r2, #24
  402de4:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  402de8:	0c13      	lsrs	r3, r2, #16
  402dea:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  402dee:	0a13      	lsrs	r3, r2, #8
  402df0:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  402df4:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  402df8:	2108      	movs	r1, #8
		break;
  402dfa:	e03e      	b.n	402e7a <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  402dfc:	0c0b      	lsrs	r3, r1, #16
  402dfe:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402e02:	0a0b      	lsrs	r3, r1, #8
  402e04:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  402e08:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  402e0c:	0e13      	lsrs	r3, r2, #24
  402e0e:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  402e12:	0c13      	lsrs	r3, r2, #16
  402e14:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  402e18:	0a13      	lsrs	r3, r2, #8
  402e1a:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  402e1e:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  402e22:	2109      	movs	r1, #9
		break;
  402e24:	e029      	b.n	402e7a <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  402e26:	f812 3b01 	ldrb.w	r3, [r2], #1
  402e2a:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  402e2e:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  402e30:	4295      	cmp	r5, r2
  402e32:	d1f8      	bne.n	402e26 <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402e34:	ab04      	add	r3, sp, #16
  402e36:	441e      	add	r6, r3
  402e38:	0043      	lsls	r3, r0, #1
  402e3a:	f806 3c0c 	strb.w	r3, [r6, #-12]
  402e3e:	e001      	b.n	402e44 <spi_cmd+0x150>
		else
			len-=1;
  402e40:	3901      	subs	r1, #1
  402e42:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  402e44:	a801      	add	r0, sp, #4
  402e46:	4b10      	ldr	r3, [pc, #64]	; (402e88 <spi_cmd+0x194>)
  402e48:	4798      	blx	r3
  402e4a:	b168      	cbz	r0, 402e68 <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  402e4c:	f44f 7284 	mov.w	r2, #264	; 0x108
  402e50:	490e      	ldr	r1, [pc, #56]	; (402e8c <spi_cmd+0x198>)
  402e52:	480f      	ldr	r0, [pc, #60]	; (402e90 <spi_cmd+0x19c>)
  402e54:	4c0f      	ldr	r4, [pc, #60]	; (402e94 <spi_cmd+0x1a0>)
  402e56:	47a0      	blx	r4
  402e58:	480f      	ldr	r0, [pc, #60]	; (402e98 <spi_cmd+0x1a4>)
  402e5a:	47a0      	blx	r4
  402e5c:	480f      	ldr	r0, [pc, #60]	; (402e9c <spi_cmd+0x1a8>)
  402e5e:	47a0      	blx	r4
			result = N_FAIL;
  402e60:	2000      	movs	r0, #0
  402e62:	e00f      	b.n	402e84 <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  402e64:	2000      	movs	r0, #0
  402e66:	e00d      	b.n	402e84 <spi_cmd+0x190>
  402e68:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  402e6a:	e00b      	b.n	402e84 <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402e6c:	1e4e      	subs	r6, r1, #1
  402e6e:	ab01      	add	r3, sp, #4
  402e70:	199d      	adds	r5, r3, r6
  402e72:	207f      	movs	r0, #127	; 0x7f
  402e74:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  402e76:	4c0a      	ldr	r4, [pc, #40]	; (402ea0 <spi_cmd+0x1ac>)
  402e78:	e7d5      	b.n	402e26 <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  402e7a:	4b0a      	ldr	r3, [pc, #40]	; (402ea4 <spi_cmd+0x1b0>)
  402e7c:	781b      	ldrb	r3, [r3, #0]
  402e7e:	2b00      	cmp	r3, #0
  402e80:	d1de      	bne.n	402e40 <spi_cmd+0x14c>
  402e82:	e7f3      	b.n	402e6c <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  402e84:	b004      	add	sp, #16
  402e86:	bd70      	pop	{r4, r5, r6, pc}
  402e88:	00402cd5 	.word	0x00402cd5
  402e8c:	00409004 	.word	0x00409004
  402e90:	004081fc 	.word	0x004081fc
  402e94:	00405121 	.word	0x00405121
  402e98:	00408c44 	.word	0x00408c44
  402e9c:	00409330 	.word	0x00409330
  402ea0:	00408a18 	.word	0x00408a18
  402ea4:	20400918 	.word	0x20400918

00402ea8 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  402ea8:	b570      	push	{r4, r5, r6, lr}
  402eaa:	b082      	sub	sp, #8
  402eac:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  402eae:	2831      	cmp	r0, #49	; 0x31
  402eb0:	bf35      	itete	cc
  402eb2:	2301      	movcc	r3, #1
  402eb4:	2300      	movcs	r3, #0
  402eb6:	25c3      	movcc	r5, #195	; 0xc3
  402eb8:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  402eba:	9300      	str	r3, [sp, #0]
  402ebc:	2304      	movs	r3, #4
  402ebe:	460a      	mov	r2, r1
  402ec0:	4601      	mov	r1, r0
  402ec2:	4628      	mov	r0, r5
  402ec4:	4e16      	ldr	r6, [pc, #88]	; (402f20 <spi_write_reg+0x78>)
  402ec6:	47b0      	blx	r6
	if (result != N_OK) {
  402ec8:	2801      	cmp	r0, #1
  402eca:	d00c      	beq.n	402ee6 <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  402ecc:	f240 12eb 	movw	r2, #491	; 0x1eb
  402ed0:	4914      	ldr	r1, [pc, #80]	; (402f24 <spi_write_reg+0x7c>)
  402ed2:	4815      	ldr	r0, [pc, #84]	; (402f28 <spi_write_reg+0x80>)
  402ed4:	4d15      	ldr	r5, [pc, #84]	; (402f2c <spi_write_reg+0x84>)
  402ed6:	47a8      	blx	r5
  402ed8:	4621      	mov	r1, r4
  402eda:	4815      	ldr	r0, [pc, #84]	; (402f30 <spi_write_reg+0x88>)
  402edc:	47a8      	blx	r5
  402ede:	4815      	ldr	r0, [pc, #84]	; (402f34 <spi_write_reg+0x8c>)
  402ee0:	47a8      	blx	r5
		return N_FAIL;
  402ee2:	2000      	movs	r0, #0
  402ee4:	e01a      	b.n	402f1c <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  402ee6:	4628      	mov	r0, r5
  402ee8:	4b13      	ldr	r3, [pc, #76]	; (402f38 <spi_write_reg+0x90>)
  402eea:	4798      	blx	r3
	if (result != N_OK) {
  402eec:	2801      	cmp	r0, #1
  402eee:	d014      	beq.n	402f1a <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  402ef0:	f240 12f1 	movw	r2, #497	; 0x1f1
  402ef4:	490b      	ldr	r1, [pc, #44]	; (402f24 <spi_write_reg+0x7c>)
  402ef6:	480c      	ldr	r0, [pc, #48]	; (402f28 <spi_write_reg+0x80>)
  402ef8:	4d0c      	ldr	r5, [pc, #48]	; (402f2c <spi_write_reg+0x84>)
  402efa:	47a8      	blx	r5
  402efc:	4621      	mov	r1, r4
  402efe:	480f      	ldr	r0, [pc, #60]	; (402f3c <spi_write_reg+0x94>)
  402f00:	47a8      	blx	r5
  402f02:	480c      	ldr	r0, [pc, #48]	; (402f34 <spi_write_reg+0x8c>)
  402f04:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402f06:	2400      	movs	r4, #0
  402f08:	9400      	str	r4, [sp, #0]
  402f0a:	4623      	mov	r3, r4
  402f0c:	4622      	mov	r2, r4
  402f0e:	4621      	mov	r1, r4
  402f10:	20cf      	movs	r0, #207	; 0xcf
  402f12:	4d03      	ldr	r5, [pc, #12]	; (402f20 <spi_write_reg+0x78>)
  402f14:	47a8      	blx	r5
		return N_FAIL;
  402f16:	4620      	mov	r0, r4
  402f18:	e000      	b.n	402f1c <spi_write_reg+0x74>
	}

	return N_OK;
  402f1a:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  402f1c:	b002      	add	sp, #8
  402f1e:	bd70      	pop	{r4, r5, r6, pc}
  402f20:	00402cf5 	.word	0x00402cf5
  402f24:	00408ff4 	.word	0x00408ff4
  402f28:	004081fc 	.word	0x004081fc
  402f2c:	00405121 	.word	0x00405121
  402f30:	00408c70 	.word	0x00408c70
  402f34:	00409330 	.word	0x00409330
  402f38:	00402b09 	.word	0x00402b09
  402f3c:	00408c9c 	.word	0x00408c9c

00402f40 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  402f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402f44:	b084      	sub	sp, #16
  402f46:	4604      	mov	r4, r0
  402f48:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  402f4a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  402f4e:	bf35      	itete	cc
  402f50:	2601      	movcc	r6, #1
  402f52:	2600      	movcs	r6, #0
  402f54:	25c4      	movcc	r5, #196	; 0xc4
  402f56:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  402f58:	9600      	str	r6, [sp, #0]
  402f5a:	2304      	movs	r3, #4
  402f5c:	2200      	movs	r2, #0
  402f5e:	4601      	mov	r1, r0
  402f60:	4628      	mov	r0, r5
  402f62:	4f2d      	ldr	r7, [pc, #180]	; (403018 <spi_read_reg+0xd8>)
  402f64:	47b8      	blx	r7
	if (result != N_OK) {
  402f66:	2801      	cmp	r0, #1
  402f68:	d00c      	beq.n	402f84 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  402f6a:	f240 2245 	movw	r2, #581	; 0x245
  402f6e:	492b      	ldr	r1, [pc, #172]	; (40301c <spi_read_reg+0xdc>)
  402f70:	482b      	ldr	r0, [pc, #172]	; (403020 <spi_read_reg+0xe0>)
  402f72:	4d2c      	ldr	r5, [pc, #176]	; (403024 <spi_read_reg+0xe4>)
  402f74:	47a8      	blx	r5
  402f76:	4621      	mov	r1, r4
  402f78:	482b      	ldr	r0, [pc, #172]	; (403028 <spi_read_reg+0xe8>)
  402f7a:	47a8      	blx	r5
  402f7c:	482b      	ldr	r0, [pc, #172]	; (40302c <spi_read_reg+0xec>)
  402f7e:	47a8      	blx	r5
		return N_FAIL;
  402f80:	2000      	movs	r0, #0
  402f82:	e045      	b.n	403010 <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  402f84:	4628      	mov	r0, r5
  402f86:	4b2a      	ldr	r3, [pc, #168]	; (403030 <spi_read_reg+0xf0>)
  402f88:	4798      	blx	r3
	if (result != N_OK) {
  402f8a:	2801      	cmp	r0, #1
  402f8c:	d014      	beq.n	402fb8 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  402f8e:	f240 224b 	movw	r2, #587	; 0x24b
  402f92:	4922      	ldr	r1, [pc, #136]	; (40301c <spi_read_reg+0xdc>)
  402f94:	4822      	ldr	r0, [pc, #136]	; (403020 <spi_read_reg+0xe0>)
  402f96:	4d23      	ldr	r5, [pc, #140]	; (403024 <spi_read_reg+0xe4>)
  402f98:	47a8      	blx	r5
  402f9a:	4621      	mov	r1, r4
  402f9c:	4825      	ldr	r0, [pc, #148]	; (403034 <spi_read_reg+0xf4>)
  402f9e:	47a8      	blx	r5
  402fa0:	4822      	ldr	r0, [pc, #136]	; (40302c <spi_read_reg+0xec>)
  402fa2:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402fa4:	2400      	movs	r4, #0
  402fa6:	9400      	str	r4, [sp, #0]
  402fa8:	4623      	mov	r3, r4
  402faa:	4622      	mov	r2, r4
  402fac:	4621      	mov	r1, r4
  402fae:	20cf      	movs	r0, #207	; 0xcf
  402fb0:	4d19      	ldr	r5, [pc, #100]	; (403018 <spi_read_reg+0xd8>)
  402fb2:	47a8      	blx	r5
		return N_FAIL;
  402fb4:	4620      	mov	r0, r4
  402fb6:	e02b      	b.n	403010 <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  402fb8:	4632      	mov	r2, r6
  402fba:	2104      	movs	r1, #4
  402fbc:	a803      	add	r0, sp, #12
  402fbe:	4b1e      	ldr	r3, [pc, #120]	; (403038 <spi_read_reg+0xf8>)
  402fc0:	4798      	blx	r3
	if (result != N_OK) {
  402fc2:	2801      	cmp	r0, #1
  402fc4:	d013      	beq.n	402fee <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  402fc6:	f240 2253 	movw	r2, #595	; 0x253
  402fca:	4914      	ldr	r1, [pc, #80]	; (40301c <spi_read_reg+0xdc>)
  402fcc:	4814      	ldr	r0, [pc, #80]	; (403020 <spi_read_reg+0xe0>)
  402fce:	4c15      	ldr	r4, [pc, #84]	; (403024 <spi_read_reg+0xe4>)
  402fd0:	47a0      	blx	r4
  402fd2:	481a      	ldr	r0, [pc, #104]	; (40303c <spi_read_reg+0xfc>)
  402fd4:	47a0      	blx	r4
  402fd6:	4815      	ldr	r0, [pc, #84]	; (40302c <spi_read_reg+0xec>)
  402fd8:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402fda:	2400      	movs	r4, #0
  402fdc:	9400      	str	r4, [sp, #0]
  402fde:	4623      	mov	r3, r4
  402fe0:	4622      	mov	r2, r4
  402fe2:	4621      	mov	r1, r4
  402fe4:	20cf      	movs	r0, #207	; 0xcf
  402fe6:	4d0c      	ldr	r5, [pc, #48]	; (403018 <spi_read_reg+0xd8>)
  402fe8:	47a8      	blx	r5
		return N_FAIL;
  402fea:	4620      	mov	r0, r4
  402fec:	e010      	b.n	403010 <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  402fee:	f89d 100d 	ldrb.w	r1, [sp, #13]
  402ff2:	f89d 200e 	ldrb.w	r2, [sp, #14]
  402ff6:	0413      	lsls	r3, r2, #16
  402ff8:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  402ffc:	f89d 300c 	ldrb.w	r3, [sp, #12]
  403000:	4313      	orrs	r3, r2
  403002:	f89d 200f 	ldrb.w	r2, [sp, #15]
  403006:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40300a:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  40300e:	2001      	movs	r0, #1
}
  403010:	b004      	add	sp, #16
  403012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403016:	bf00      	nop
  403018:	00402cf5 	.word	0x00402cf5
  40301c:	00409028 	.word	0x00409028
  403020:	004081fc 	.word	0x004081fc
  403024:	00405121 	.word	0x00405121
  403028:	00408cd4 	.word	0x00408cd4
  40302c:	00409330 	.word	0x00409330
  403030:	00402b09 	.word	0x00402b09
  403034:	00408d00 	.word	0x00408d00
  403038:	00402bc5 	.word	0x00402bc5
  40303c:	00408d34 	.word	0x00408d34

00403040 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  403040:	2000      	movs	r0, #0
  403042:	4b01      	ldr	r3, [pc, #4]	; (403048 <nm_spi_deinit+0x8>)
  403044:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  403046:	4770      	bx	lr
  403048:	20400918 	.word	0x20400918

0040304c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  40304c:	b500      	push	{lr}
  40304e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  403050:	a901      	add	r1, sp, #4
  403052:	4b03      	ldr	r3, [pc, #12]	; (403060 <nm_spi_read_reg+0x14>)
  403054:	4798      	blx	r3

	return u32Val;
}
  403056:	9801      	ldr	r0, [sp, #4]
  403058:	b003      	add	sp, #12
  40305a:	f85d fb04 	ldr.w	pc, [sp], #4
  40305e:	bf00      	nop
  403060:	00402f41 	.word	0x00402f41

00403064 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403064:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  403066:	4b04      	ldr	r3, [pc, #16]	; (403078 <nm_spi_read_reg_with_ret+0x14>)
  403068:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40306a:	2801      	cmp	r0, #1

	return s8Ret;
}
  40306c:	bf0c      	ite	eq
  40306e:	2000      	moveq	r0, #0
  403070:	f06f 0005 	mvnne.w	r0, #5
  403074:	bd08      	pop	{r3, pc}
  403076:	bf00      	nop
  403078:	00402f41 	.word	0x00402f41

0040307c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  40307c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  40307e:	4b04      	ldr	r3, [pc, #16]	; (403090 <nm_spi_write_reg+0x14>)
  403080:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403082:	2801      	cmp	r0, #1

	return s8Ret;
}
  403084:	bf0c      	ite	eq
  403086:	2000      	moveq	r0, #0
  403088:	f06f 0005 	mvnne.w	r0, #5
  40308c:	bd08      	pop	{r3, pc}
  40308e:	bf00      	nop
  403090:	00402ea9 	.word	0x00402ea9

00403094 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  403094:	b530      	push	{r4, r5, lr}
  403096:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  403098:	2300      	movs	r3, #0
  40309a:	a902      	add	r1, sp, #8
  40309c:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  4030a0:	4a32      	ldr	r2, [pc, #200]	; (40316c <nm_spi_init+0xd8>)
  4030a2:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4030a4:	f64e 0024 	movw	r0, #59428	; 0xe824
  4030a8:	4b31      	ldr	r3, [pc, #196]	; (403170 <nm_spi_init+0xdc>)
  4030aa:	4798      	blx	r3
  4030ac:	b9f0      	cbnz	r0, 4030ec <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  4030ae:	2201      	movs	r2, #1
  4030b0:	4b2e      	ldr	r3, [pc, #184]	; (40316c <nm_spi_init+0xd8>)
  4030b2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4030b4:	f240 22c5 	movw	r2, #709	; 0x2c5
  4030b8:	492e      	ldr	r1, [pc, #184]	; (403174 <nm_spi_init+0xe0>)
  4030ba:	482f      	ldr	r0, [pc, #188]	; (403178 <nm_spi_init+0xe4>)
  4030bc:	4c2f      	ldr	r4, [pc, #188]	; (40317c <nm_spi_init+0xe8>)
  4030be:	47a0      	blx	r4
  4030c0:	482f      	ldr	r0, [pc, #188]	; (403180 <nm_spi_init+0xec>)
  4030c2:	47a0      	blx	r4
  4030c4:	482f      	ldr	r0, [pc, #188]	; (403184 <nm_spi_init+0xf0>)
  4030c6:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  4030c8:	4669      	mov	r1, sp
  4030ca:	f64e 0024 	movw	r0, #59428	; 0xe824
  4030ce:	4b28      	ldr	r3, [pc, #160]	; (403170 <nm_spi_init+0xdc>)
  4030d0:	4798      	blx	r3
  4030d2:	4604      	mov	r4, r0
  4030d4:	b950      	cbnz	r0, 4030ec <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4030d6:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  4030da:	4926      	ldr	r1, [pc, #152]	; (403174 <nm_spi_init+0xe0>)
  4030dc:	4826      	ldr	r0, [pc, #152]	; (403178 <nm_spi_init+0xe4>)
  4030de:	4d27      	ldr	r5, [pc, #156]	; (40317c <nm_spi_init+0xe8>)
  4030e0:	47a8      	blx	r5
  4030e2:	4829      	ldr	r0, [pc, #164]	; (403188 <nm_spi_init+0xf4>)
  4030e4:	47a8      	blx	r5
  4030e6:	4827      	ldr	r0, [pc, #156]	; (403184 <nm_spi_init+0xf0>)
  4030e8:	47a8      	blx	r5
			return 0;
  4030ea:	e03c      	b.n	403166 <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  4030ec:	4b1f      	ldr	r3, [pc, #124]	; (40316c <nm_spi_init+0xd8>)
  4030ee:	781b      	ldrb	r3, [r3, #0]
  4030f0:	b9cb      	cbnz	r3, 403126 <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  4030f2:	9900      	ldr	r1, [sp, #0]
  4030f4:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  4030f8:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4030fc:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  4030fe:	f64e 0024 	movw	r0, #59428	; 0xe824
  403102:	4b22      	ldr	r3, [pc, #136]	; (40318c <nm_spi_init+0xf8>)
  403104:	4798      	blx	r3
  403106:	4604      	mov	r4, r0
  403108:	b950      	cbnz	r0, 403120 <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  40310a:	f240 22d2 	movw	r2, #722	; 0x2d2
  40310e:	4919      	ldr	r1, [pc, #100]	; (403174 <nm_spi_init+0xe0>)
  403110:	4819      	ldr	r0, [pc, #100]	; (403178 <nm_spi_init+0xe4>)
  403112:	4d1a      	ldr	r5, [pc, #104]	; (40317c <nm_spi_init+0xe8>)
  403114:	47a8      	blx	r5
  403116:	481e      	ldr	r0, [pc, #120]	; (403190 <nm_spi_init+0xfc>)
  403118:	47a8      	blx	r5
  40311a:	481a      	ldr	r0, [pc, #104]	; (403184 <nm_spi_init+0xf0>)
  40311c:	47a8      	blx	r5
			return 0;
  40311e:	e022      	b.n	403166 <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  403120:	2201      	movs	r2, #1
  403122:	4b12      	ldr	r3, [pc, #72]	; (40316c <nm_spi_init+0xd8>)
  403124:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  403126:	a901      	add	r1, sp, #4
  403128:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40312c:	4b10      	ldr	r3, [pc, #64]	; (403170 <nm_spi_init+0xdc>)
  40312e:	4798      	blx	r3
  403130:	b960      	cbnz	r0, 40314c <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  403132:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  403136:	490f      	ldr	r1, [pc, #60]	; (403174 <nm_spi_init+0xe0>)
  403138:	480f      	ldr	r0, [pc, #60]	; (403178 <nm_spi_init+0xe4>)
  40313a:	4c10      	ldr	r4, [pc, #64]	; (40317c <nm_spi_init+0xe8>)
  40313c:	47a0      	blx	r4
  40313e:	4815      	ldr	r0, [pc, #84]	; (403194 <nm_spi_init+0x100>)
  403140:	47a0      	blx	r4
  403142:	4810      	ldr	r0, [pc, #64]	; (403184 <nm_spi_init+0xf0>)
  403144:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  403146:	f06f 0405 	mvn.w	r4, #5
  40314a:	e00c      	b.n	403166 <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  40314c:	f64e 0024 	movw	r0, #59428	; 0xe824
  403150:	4b11      	ldr	r3, [pc, #68]	; (403198 <nm_spi_init+0x104>)
  403152:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  403154:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  403158:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  40315c:	f64e 0024 	movw	r0, #59428	; 0xe824
  403160:	4b0e      	ldr	r3, [pc, #56]	; (40319c <nm_spi_init+0x108>)
  403162:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  403164:	2400      	movs	r4, #0
}
  403166:	4620      	mov	r0, r4
  403168:	b003      	add	sp, #12
  40316a:	bd30      	pop	{r4, r5, pc}
  40316c:	20400918 	.word	0x20400918
  403170:	00402f41 	.word	0x00402f41
  403174:	00408b18 	.word	0x00408b18
  403178:	004081fc 	.word	0x004081fc
  40317c:	00405121 	.word	0x00405121
  403180:	00408d54 	.word	0x00408d54
  403184:	00409330 	.word	0x00409330
  403188:	00408da4 	.word	0x00408da4
  40318c:	00402ea9 	.word	0x00402ea9
  403190:	00408dd4 	.word	0x00408dd4
  403194:	00408e08 	.word	0x00408e08
  403198:	0040304d 	.word	0x0040304d
  40319c:	0040307d 	.word	0x0040307d

004031a0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4031a2:	b083      	sub	sp, #12
  4031a4:	4604      	mov	r4, r0
  4031a6:	460f      	mov	r7, r1
  4031a8:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4031aa:	2200      	movs	r2, #0
  4031ac:	9200      	str	r2, [sp, #0]
  4031ae:	462b      	mov	r3, r5
  4031b0:	4601      	mov	r1, r0
  4031b2:	20c8      	movs	r0, #200	; 0xc8
  4031b4:	4e23      	ldr	r6, [pc, #140]	; (403244 <nm_spi_read_block+0xa4>)
  4031b6:	47b0      	blx	r6
	if (result != N_OK) {
  4031b8:	2801      	cmp	r0, #1
  4031ba:	d00b      	beq.n	4031d4 <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4031bc:	f44f 721d 	mov.w	r2, #628	; 0x274
  4031c0:	4921      	ldr	r1, [pc, #132]	; (403248 <nm_spi_read_block+0xa8>)
  4031c2:	4822      	ldr	r0, [pc, #136]	; (40324c <nm_spi_read_block+0xac>)
  4031c4:	4d22      	ldr	r5, [pc, #136]	; (403250 <nm_spi_read_block+0xb0>)
  4031c6:	47a8      	blx	r5
  4031c8:	4621      	mov	r1, r4
  4031ca:	4822      	ldr	r0, [pc, #136]	; (403254 <nm_spi_read_block+0xb4>)
  4031cc:	47a8      	blx	r5
  4031ce:	4822      	ldr	r0, [pc, #136]	; (403258 <nm_spi_read_block+0xb8>)
  4031d0:	47a8      	blx	r5
  4031d2:	e032      	b.n	40323a <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  4031d4:	20c8      	movs	r0, #200	; 0xc8
  4031d6:	4b21      	ldr	r3, [pc, #132]	; (40325c <nm_spi_read_block+0xbc>)
  4031d8:	4798      	blx	r3
	if (result != N_OK) {
  4031da:	2801      	cmp	r0, #1
  4031dc:	d012      	beq.n	403204 <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  4031de:	f240 227a 	movw	r2, #634	; 0x27a
  4031e2:	4919      	ldr	r1, [pc, #100]	; (403248 <nm_spi_read_block+0xa8>)
  4031e4:	4819      	ldr	r0, [pc, #100]	; (40324c <nm_spi_read_block+0xac>)
  4031e6:	4d1a      	ldr	r5, [pc, #104]	; (403250 <nm_spi_read_block+0xb0>)
  4031e8:	47a8      	blx	r5
  4031ea:	4621      	mov	r1, r4
  4031ec:	481c      	ldr	r0, [pc, #112]	; (403260 <nm_spi_read_block+0xc0>)
  4031ee:	47a8      	blx	r5
  4031f0:	4819      	ldr	r0, [pc, #100]	; (403258 <nm_spi_read_block+0xb8>)
  4031f2:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4031f4:	2100      	movs	r1, #0
  4031f6:	9100      	str	r1, [sp, #0]
  4031f8:	460b      	mov	r3, r1
  4031fa:	460a      	mov	r2, r1
  4031fc:	20cf      	movs	r0, #207	; 0xcf
  4031fe:	4c11      	ldr	r4, [pc, #68]	; (403244 <nm_spi_read_block+0xa4>)
  403200:	47a0      	blx	r4
  403202:	e01a      	b.n	40323a <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  403204:	2200      	movs	r2, #0
  403206:	4629      	mov	r1, r5
  403208:	4638      	mov	r0, r7
  40320a:	4b16      	ldr	r3, [pc, #88]	; (403264 <nm_spi_read_block+0xc4>)
  40320c:	4798      	blx	r3
	if (result != N_OK) {
  40320e:	2801      	cmp	r0, #1
  403210:	d011      	beq.n	403236 <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  403212:	f44f 7221 	mov.w	r2, #644	; 0x284
  403216:	490c      	ldr	r1, [pc, #48]	; (403248 <nm_spi_read_block+0xa8>)
  403218:	480c      	ldr	r0, [pc, #48]	; (40324c <nm_spi_read_block+0xac>)
  40321a:	4c0d      	ldr	r4, [pc, #52]	; (403250 <nm_spi_read_block+0xb0>)
  40321c:	47a0      	blx	r4
  40321e:	4812      	ldr	r0, [pc, #72]	; (403268 <nm_spi_read_block+0xc8>)
  403220:	47a0      	blx	r4
  403222:	480d      	ldr	r0, [pc, #52]	; (403258 <nm_spi_read_block+0xb8>)
  403224:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403226:	2100      	movs	r1, #0
  403228:	9100      	str	r1, [sp, #0]
  40322a:	460b      	mov	r3, r1
  40322c:	460a      	mov	r2, r1
  40322e:	20cf      	movs	r0, #207	; 0xcf
  403230:	4c04      	ldr	r4, [pc, #16]	; (403244 <nm_spi_read_block+0xa4>)
  403232:	47a0      	blx	r4
  403234:	e001      	b.n	40323a <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403236:	2000      	movs	r0, #0
  403238:	e001      	b.n	40323e <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  40323a:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40323e:	b003      	add	sp, #12
  403240:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403242:	bf00      	nop
  403244:	00402cf5 	.word	0x00402cf5
  403248:	00408b34 	.word	0x00408b34
  40324c:	004081fc 	.word	0x004081fc
  403250:	00405121 	.word	0x00405121
  403254:	00408e30 	.word	0x00408e30
  403258:	00409330 	.word	0x00409330
  40325c:	00402b09 	.word	0x00402b09
  403260:	00408e60 	.word	0x00408e60
  403264:	00402bc5 	.word	0x00402bc5
  403268:	00408e98 	.word	0x00408e98

0040326c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40326c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403270:	b085      	sub	sp, #20
  403272:	4604      	mov	r4, r0
  403274:	4688      	mov	r8, r1
  403276:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  403278:	2200      	movs	r2, #0
  40327a:	9200      	str	r2, [sp, #0]
  40327c:	462b      	mov	r3, r5
  40327e:	4601      	mov	r1, r0
  403280:	20c7      	movs	r0, #199	; 0xc7
  403282:	4e4c      	ldr	r6, [pc, #304]	; (4033b4 <nm_spi_write_block+0x148>)
  403284:	47b0      	blx	r6
	if (result != N_OK) {
  403286:	2801      	cmp	r0, #1
  403288:	d00b      	beq.n	4032a2 <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  40328a:	f240 220f 	movw	r2, #527	; 0x20f
  40328e:	494a      	ldr	r1, [pc, #296]	; (4033b8 <nm_spi_write_block+0x14c>)
  403290:	484a      	ldr	r0, [pc, #296]	; (4033bc <nm_spi_write_block+0x150>)
  403292:	4d4b      	ldr	r5, [pc, #300]	; (4033c0 <nm_spi_write_block+0x154>)
  403294:	47a8      	blx	r5
  403296:	4621      	mov	r1, r4
  403298:	484a      	ldr	r0, [pc, #296]	; (4033c4 <nm_spi_write_block+0x158>)
  40329a:	47a8      	blx	r5
  40329c:	484a      	ldr	r0, [pc, #296]	; (4033c8 <nm_spi_write_block+0x15c>)
  40329e:	47a8      	blx	r5
  4032a0:	e082      	b.n	4033a8 <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  4032a2:	20c7      	movs	r0, #199	; 0xc7
  4032a4:	4b49      	ldr	r3, [pc, #292]	; (4033cc <nm_spi_write_block+0x160>)
  4032a6:	4798      	blx	r3
	if (result != N_OK) {
  4032a8:	2801      	cmp	r0, #1
  4032aa:	d012      	beq.n	4032d2 <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4032ac:	f240 2215 	movw	r2, #533	; 0x215
  4032b0:	4941      	ldr	r1, [pc, #260]	; (4033b8 <nm_spi_write_block+0x14c>)
  4032b2:	4842      	ldr	r0, [pc, #264]	; (4033bc <nm_spi_write_block+0x150>)
  4032b4:	4d42      	ldr	r5, [pc, #264]	; (4033c0 <nm_spi_write_block+0x154>)
  4032b6:	47a8      	blx	r5
  4032b8:	4621      	mov	r1, r4
  4032ba:	4845      	ldr	r0, [pc, #276]	; (4033d0 <nm_spi_write_block+0x164>)
  4032bc:	47a8      	blx	r5
  4032be:	4842      	ldr	r0, [pc, #264]	; (4033c8 <nm_spi_write_block+0x15c>)
  4032c0:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4032c2:	2100      	movs	r1, #0
  4032c4:	9100      	str	r1, [sp, #0]
  4032c6:	460b      	mov	r3, r1
  4032c8:	460a      	mov	r2, r1
  4032ca:	20cf      	movs	r0, #207	; 0xcf
  4032cc:	4c39      	ldr	r4, [pc, #228]	; (4033b4 <nm_spi_write_block+0x148>)
  4032ce:	47a0      	blx	r4
  4032d0:	e06a      	b.n	4033a8 <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  4032d2:	2400      	movs	r4, #0
  4032d4:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4032d8:	4f3e      	ldr	r7, [pc, #248]	; (4033d4 <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  4032da:	f8df 9110 	ldr.w	r9, [pc, #272]	; 4033ec <nm_spi_write_block+0x180>
  4032de:	462e      	mov	r6, r5
  4032e0:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4032e4:	bf28      	it	cs
  4032e6:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  4032ea:	b92c      	cbnz	r4, 4032f8 <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  4032ec:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4032f0:	bf94      	ite	ls
  4032f2:	2303      	movls	r3, #3
  4032f4:	2301      	movhi	r3, #1
  4032f6:	e004      	b.n	403302 <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  4032f8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4032fc:	bf94      	ite	ls
  4032fe:	2303      	movls	r3, #3
  403300:	2302      	movhi	r3, #2
		}
		cmd |= order;
  403302:	f063 030f 	orn	r3, r3, #15
  403306:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  40330a:	2101      	movs	r1, #1
  40330c:	f10d 000b 	add.w	r0, sp, #11
  403310:	47b8      	blx	r7
  403312:	b150      	cbz	r0, 40332a <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  403314:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  403318:	492f      	ldr	r1, [pc, #188]	; (4033d8 <nm_spi_write_block+0x16c>)
  40331a:	4828      	ldr	r0, [pc, #160]	; (4033bc <nm_spi_write_block+0x150>)
  40331c:	4c28      	ldr	r4, [pc, #160]	; (4033c0 <nm_spi_write_block+0x154>)
  40331e:	47a0      	blx	r4
  403320:	482e      	ldr	r0, [pc, #184]	; (4033dc <nm_spi_write_block+0x170>)
  403322:	47a0      	blx	r4
  403324:	4828      	ldr	r0, [pc, #160]	; (4033c8 <nm_spi_write_block+0x15c>)
  403326:	47a0      	blx	r4
  403328:	e028      	b.n	40337c <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  40332a:	4631      	mov	r1, r6
  40332c:	eb08 0004 	add.w	r0, r8, r4
  403330:	47b8      	blx	r7
  403332:	b150      	cbz	r0, 40334a <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  403334:	f240 12b1 	movw	r2, #433	; 0x1b1
  403338:	4927      	ldr	r1, [pc, #156]	; (4033d8 <nm_spi_write_block+0x16c>)
  40333a:	4820      	ldr	r0, [pc, #128]	; (4033bc <nm_spi_write_block+0x150>)
  40333c:	4c20      	ldr	r4, [pc, #128]	; (4033c0 <nm_spi_write_block+0x154>)
  40333e:	47a0      	blx	r4
  403340:	4827      	ldr	r0, [pc, #156]	; (4033e0 <nm_spi_write_block+0x174>)
  403342:	47a0      	blx	r4
  403344:	4820      	ldr	r0, [pc, #128]	; (4033c8 <nm_spi_write_block+0x15c>)
  403346:	47a0      	blx	r4
  403348:	e018      	b.n	40337c <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  40334a:	f899 3000 	ldrb.w	r3, [r9]
  40334e:	b973      	cbnz	r3, 40336e <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  403350:	2102      	movs	r1, #2
  403352:	a803      	add	r0, sp, #12
  403354:	47b8      	blx	r7
  403356:	b150      	cbz	r0, 40336e <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  403358:	f240 12bb 	movw	r2, #443	; 0x1bb
  40335c:	491e      	ldr	r1, [pc, #120]	; (4033d8 <nm_spi_write_block+0x16c>)
  40335e:	4817      	ldr	r0, [pc, #92]	; (4033bc <nm_spi_write_block+0x150>)
  403360:	4c17      	ldr	r4, [pc, #92]	; (4033c0 <nm_spi_write_block+0x154>)
  403362:	47a0      	blx	r4
  403364:	481f      	ldr	r0, [pc, #124]	; (4033e4 <nm_spi_write_block+0x178>)
  403366:	47a0      	blx	r4
  403368:	4817      	ldr	r0, [pc, #92]	; (4033c8 <nm_spi_write_block+0x15c>)
  40336a:	47a0      	blx	r4
  40336c:	e006      	b.n	40337c <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  40336e:	4434      	add	r4, r6
  403370:	b224      	sxth	r4, r4
		sz -= nbytes;
  403372:	1bad      	subs	r5, r5, r6
  403374:	b2ad      	uxth	r5, r5
	} while (sz);
  403376:	2d00      	cmp	r5, #0
  403378:	d1b1      	bne.n	4032de <nm_spi_write_block+0x72>
  40337a:	e013      	b.n	4033a4 <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  40337c:	f240 2226 	movw	r2, #550	; 0x226
  403380:	490d      	ldr	r1, [pc, #52]	; (4033b8 <nm_spi_write_block+0x14c>)
  403382:	480e      	ldr	r0, [pc, #56]	; (4033bc <nm_spi_write_block+0x150>)
  403384:	4c0e      	ldr	r4, [pc, #56]	; (4033c0 <nm_spi_write_block+0x154>)
  403386:	47a0      	blx	r4
  403388:	4817      	ldr	r0, [pc, #92]	; (4033e8 <nm_spi_write_block+0x17c>)
  40338a:	47a0      	blx	r4
  40338c:	480e      	ldr	r0, [pc, #56]	; (4033c8 <nm_spi_write_block+0x15c>)
  40338e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403390:	2400      	movs	r4, #0
  403392:	9400      	str	r4, [sp, #0]
  403394:	4623      	mov	r3, r4
  403396:	4622      	mov	r2, r4
  403398:	4621      	mov	r1, r4
  40339a:	20cf      	movs	r0, #207	; 0xcf
  40339c:	4d05      	ldr	r5, [pc, #20]	; (4033b4 <nm_spi_write_block+0x148>)
  40339e:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4033a0:	4620      	mov	r0, r4
  4033a2:	e003      	b.n	4033ac <nm_spi_write_block+0x140>
  4033a4:	2000      	movs	r0, #0
  4033a6:	e001      	b.n	4033ac <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4033a8:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4033ac:	b005      	add	sp, #20
  4033ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4033b2:	bf00      	nop
  4033b4:	00402cf5 	.word	0x00402cf5
  4033b8:	0040900c 	.word	0x0040900c
  4033bc:	004081fc 	.word	0x004081fc
  4033c0:	00405121 	.word	0x00405121
  4033c4:	00408ec0 	.word	0x00408ec0
  4033c8:	00409330 	.word	0x00409330
  4033cc:	00402b09 	.word	0x00402b09
  4033d0:	00408ef0 	.word	0x00408ef0
  4033d4:	00402cd5 	.word	0x00402cd5
  4033d8:	00408b24 	.word	0x00408b24
  4033dc:	00408f28 	.word	0x00408f28
  4033e0:	00408f60 	.word	0x00408f60
  4033e4:	00408f94 	.word	0x00408f94
  4033e8:	00408fcc 	.word	0x00408fcc
  4033ec:	20400918 	.word	0x20400918

004033f0 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  4033f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033f4:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  4033f8:	2c00      	cmp	r4, #0
  4033fa:	d047      	beq.n	40348c <Socket_ReadSocketData+0x9c>
  4033fc:	4681      	mov	r9, r0
  4033fe:	460e      	mov	r6, r1
  403400:	4692      	mov	sl, r2
  403402:	4698      	mov	r8, r3
  403404:	0103      	lsls	r3, r0, #4
  403406:	4922      	ldr	r1, [pc, #136]	; (403490 <Socket_ReadSocketData+0xa0>)
  403408:	58cb      	ldr	r3, [r1, r3]
  40340a:	2b00      	cmp	r3, #0
  40340c:	d03e      	beq.n	40348c <Socket_ReadSocketData+0x9c>
  40340e:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  403412:	889b      	ldrh	r3, [r3, #4]
  403414:	b29b      	uxth	r3, r3
  403416:	2b00      	cmp	r3, #0
  403418:	d038      	beq.n	40348c <Socket_ReadSocketData+0x9c>
  40341a:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40341e:	7a9b      	ldrb	r3, [r3, #10]
  403420:	b2db      	uxtb	r3, r3
  403422:	2b01      	cmp	r3, #1
  403424:	d132      	bne.n	40348c <Socket_ReadSocketData+0x9c>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  403426:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  403428:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  40342c:	f8df b078 	ldr.w	fp, [pc, #120]	; 4034a8 <Socket_ReadSocketData+0xb8>
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  403430:	88bb      	ldrh	r3, [r7, #4]
			if(s16Diff > 0)
  403432:	1ae3      	subs	r3, r4, r3
  403434:	b21b      	sxth	r3, r3
  403436:	2b00      	cmp	r3, #0
  403438:	dd03      	ble.n	403442 <Socket_ReadSocketData+0x52>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  40343a:	88bd      	ldrh	r5, [r7, #4]
  40343c:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
  40343e:	2300      	movs	r3, #0
  403440:	e001      	b.n	403446 <Socket_ReadSocketData+0x56>
  403442:	4625      	mov	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
  403444:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  403446:	6839      	ldr	r1, [r7, #0]
  403448:	462a      	mov	r2, r5
  40344a:	4640      	mov	r0, r8
  40344c:	47d8      	blx	fp
  40344e:	b9a8      	cbnz	r0, 40347c <Socket_ReadSocketData+0x8c>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  403450:	683b      	ldr	r3, [r7, #0]
  403452:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  403454:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  403456:	88f3      	ldrh	r3, [r6, #6]
  403458:	1b5b      	subs	r3, r3, r5
  40345a:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
  40345c:	4b0d      	ldr	r3, [pc, #52]	; (403494 <Socket_ReadSocketData+0xa4>)
  40345e:	681b      	ldr	r3, [r3, #0]
  403460:	b12b      	cbz	r3, 40346e <Socket_ReadSocketData+0x7e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  403462:	4b0c      	ldr	r3, [pc, #48]	; (403494 <Socket_ReadSocketData+0xa4>)
  403464:	681b      	ldr	r3, [r3, #0]
  403466:	4632      	mov	r2, r6
  403468:	4651      	mov	r1, sl
  40346a:	4648      	mov	r0, r9
  40346c:	4798      	blx	r3

				u16ReadCount -= u16Read;
  40346e:	1b64      	subs	r4, r4, r5
  403470:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  403472:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  403474:	2c00      	cmp	r4, #0
  403476:	d1db      	bne.n	403430 <Socket_ReadSocketData+0x40>
  403478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  40347c:	4806      	ldr	r0, [pc, #24]	; (403498 <Socket_ReadSocketData+0xa8>)
  40347e:	4d07      	ldr	r5, [pc, #28]	; (40349c <Socket_ReadSocketData+0xac>)
  403480:	47a8      	blx	r5
  403482:	4621      	mov	r1, r4
  403484:	4806      	ldr	r0, [pc, #24]	; (4034a0 <Socket_ReadSocketData+0xb0>)
  403486:	47a8      	blx	r5
  403488:	4806      	ldr	r0, [pc, #24]	; (4034a4 <Socket_ReadSocketData+0xb4>)
  40348a:	47a8      	blx	r5
  40348c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403490:	2040153c 	.word	0x2040153c
  403494:	204015ec 	.word	0x204015ec
  403498:	004084bc 	.word	0x004084bc
  40349c:	00405121 	.word	0x00405121
  4034a0:	00409038 	.word	0x00409038
  4034a4:	00409330 	.word	0x00409330
  4034a8:	00401b5d 	.word	0x00401b5d

004034ac <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  4034ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034ae:	b099      	sub	sp, #100	; 0x64
  4034b0:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  4034b2:	2841      	cmp	r0, #65	; 0x41
  4034b4:	d119      	bne.n	4034ea <m2m_ip_cb+0x3e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4034b6:	2300      	movs	r3, #0
  4034b8:	2204      	movs	r2, #4
  4034ba:	a907      	add	r1, sp, #28
  4034bc:	4620      	mov	r0, r4
  4034be:	4ca4      	ldr	r4, [pc, #656]	; (403750 <m2m_ip_cb+0x2a4>)
  4034c0:	47a0      	blx	r4
  4034c2:	2800      	cmp	r0, #0
  4034c4:	f040 8141 	bne.w	40374a <m2m_ip_cb+0x29e>
		{
			strBind.status = strBindReply.s8Status;
  4034c8:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4034cc:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4034d0:	4ba0      	ldr	r3, [pc, #640]	; (403754 <m2m_ip_cb+0x2a8>)
  4034d2:	681b      	ldr	r3, [r3, #0]
  4034d4:	2b00      	cmp	r3, #0
  4034d6:	f000 8138 	beq.w	40374a <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4034da:	4b9e      	ldr	r3, [pc, #632]	; (403754 <m2m_ip_cb+0x2a8>)
  4034dc:	681b      	ldr	r3, [r3, #0]
  4034de:	aa03      	add	r2, sp, #12
  4034e0:	2101      	movs	r1, #1
  4034e2:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4034e6:	4798      	blx	r3
  4034e8:	e12f      	b.n	40374a <m2m_ip_cb+0x29e>
  4034ea:	460d      	mov	r5, r1
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  4034ec:	2842      	cmp	r0, #66	; 0x42
  4034ee:	d119      	bne.n	403524 <m2m_ip_cb+0x78>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  4034f0:	2300      	movs	r3, #0
  4034f2:	2204      	movs	r2, #4
  4034f4:	a907      	add	r1, sp, #28
  4034f6:	4620      	mov	r0, r4
  4034f8:	4c95      	ldr	r4, [pc, #596]	; (403750 <m2m_ip_cb+0x2a4>)
  4034fa:	47a0      	blx	r4
  4034fc:	2800      	cmp	r0, #0
  4034fe:	f040 8124 	bne.w	40374a <m2m_ip_cb+0x29e>
		{
			strListen.status = strListenReply.s8Status;
  403502:	f89d 301d 	ldrb.w	r3, [sp, #29]
  403506:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  40350a:	4b92      	ldr	r3, [pc, #584]	; (403754 <m2m_ip_cb+0x2a8>)
  40350c:	681b      	ldr	r3, [r3, #0]
  40350e:	2b00      	cmp	r3, #0
  403510:	f000 811b 	beq.w	40374a <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  403514:	4b8f      	ldr	r3, [pc, #572]	; (403754 <m2m_ip_cb+0x2a8>)
  403516:	681b      	ldr	r3, [r3, #0]
  403518:	aa03      	add	r2, sp, #12
  40351a:	2102      	movs	r1, #2
  40351c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  403520:	4798      	blx	r3
  403522:	e112      	b.n	40374a <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  403524:	2843      	cmp	r0, #67	; 0x43
  403526:	d13f      	bne.n	4035a8 <m2m_ip_cb+0xfc>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  403528:	2300      	movs	r3, #0
  40352a:	220c      	movs	r2, #12
  40352c:	eb0d 0102 	add.w	r1, sp, r2
  403530:	4620      	mov	r0, r4
  403532:	4c87      	ldr	r4, [pc, #540]	; (403750 <m2m_ip_cb+0x2a4>)
  403534:	47a0      	blx	r4
  403536:	2800      	cmp	r0, #0
  403538:	f040 8107 	bne.w	40374a <m2m_ip_cb+0x29e>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  40353c:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  403540:	2b00      	cmp	r3, #0
  403542:	db19      	blt.n	403578 <m2m_ip_cb+0xcc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  403544:	4a84      	ldr	r2, [pc, #528]	; (403758 <m2m_ip_cb+0x2ac>)
  403546:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  40354a:	2100      	movs	r1, #0
  40354c:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  40354e:	2101      	movs	r1, #1
  403550:	7291      	strb	r1, [r2, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  403552:	4982      	ldr	r1, [pc, #520]	; (40375c <m2m_ip_cb+0x2b0>)
  403554:	880a      	ldrh	r2, [r1, #0]
  403556:	3201      	adds	r2, #1
  403558:	b292      	uxth	r2, r2
  40355a:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  40355c:	880a      	ldrh	r2, [r1, #0]
  40355e:	b292      	uxth	r2, r2
  403560:	b91a      	cbnz	r2, 40356a <m2m_ip_cb+0xbe>
					++gu16SessionID;
  403562:	880a      	ldrh	r2, [r1, #0]
  403564:	3201      	adds	r2, #1
  403566:	b292      	uxth	r2, r2
  403568:	800a      	strh	r2, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  40356a:	4a7c      	ldr	r2, [pc, #496]	; (40375c <m2m_ip_cb+0x2b0>)
  40356c:	8811      	ldrh	r1, [r2, #0]
  40356e:	b289      	uxth	r1, r1
  403570:	4a79      	ldr	r2, [pc, #484]	; (403758 <m2m_ip_cb+0x2ac>)
  403572:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  403576:	80d1      	strh	r1, [r2, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  403578:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  40357c:	2302      	movs	r3, #2
  40357e:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  403582:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  403586:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  40358a:	9b04      	ldr	r3, [sp, #16]
  40358c:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  40358e:	4b71      	ldr	r3, [pc, #452]	; (403754 <m2m_ip_cb+0x2a8>)
  403590:	681b      	ldr	r3, [r3, #0]
  403592:	2b00      	cmp	r3, #0
  403594:	f000 80d9 	beq.w	40374a <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  403598:	4b6e      	ldr	r3, [pc, #440]	; (403754 <m2m_ip_cb+0x2a8>)
  40359a:	681b      	ldr	r3, [r3, #0]
  40359c:	aa07      	add	r2, sp, #28
  40359e:	2104      	movs	r1, #4
  4035a0:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4035a4:	4798      	blx	r3
  4035a6:	e0d0      	b.n	40374a <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  4035a8:	2844      	cmp	r0, #68	; 0x44
  4035aa:	d001      	beq.n	4035b0 <m2m_ip_cb+0x104>
  4035ac:	284b      	cmp	r0, #75	; 0x4b
  4035ae:	d124      	bne.n	4035fa <m2m_ip_cb+0x14e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4035b0:	2300      	movs	r3, #0
  4035b2:	2204      	movs	r2, #4
  4035b4:	a907      	add	r1, sp, #28
  4035b6:	4620      	mov	r0, r4
  4035b8:	4c65      	ldr	r4, [pc, #404]	; (403750 <m2m_ip_cb+0x2a4>)
  4035ba:	47a0      	blx	r4
  4035bc:	2800      	cmp	r0, #0
  4035be:	f040 80c4 	bne.w	40374a <m2m_ip_cb+0x29e>
		{
			strConnMsg.sock		= strConnectReply.sock;
  4035c2:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4035c6:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4035ca:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4035ce:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4035d2:	b93b      	cbnz	r3, 4035e4 <m2m_ip_cb+0x138>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4035d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4035d8:	3b08      	subs	r3, #8
  4035da:	b29b      	uxth	r3, r3
  4035dc:	4a5e      	ldr	r2, [pc, #376]	; (403758 <m2m_ip_cb+0x2ac>)
  4035de:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4035e2:	8113      	strh	r3, [r2, #8]
			}
			if(gpfAppSocketCb)
  4035e4:	4b5b      	ldr	r3, [pc, #364]	; (403754 <m2m_ip_cb+0x2a8>)
  4035e6:	681b      	ldr	r3, [r3, #0]
  4035e8:	2b00      	cmp	r3, #0
  4035ea:	f000 80ae 	beq.w	40374a <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4035ee:	4b59      	ldr	r3, [pc, #356]	; (403754 <m2m_ip_cb+0x2a8>)
  4035f0:	681b      	ldr	r3, [r3, #0]
  4035f2:	aa03      	add	r2, sp, #12
  4035f4:	2105      	movs	r1, #5
  4035f6:	4798      	blx	r3
  4035f8:	e0a7      	b.n	40374a <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  4035fa:	284a      	cmp	r0, #74	; 0x4a
  4035fc:	d113      	bne.n	403626 <m2m_ip_cb+0x17a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4035fe:	2300      	movs	r3, #0
  403600:	2244      	movs	r2, #68	; 0x44
  403602:	a907      	add	r1, sp, #28
  403604:	4620      	mov	r0, r4
  403606:	4c52      	ldr	r4, [pc, #328]	; (403750 <m2m_ip_cb+0x2a4>)
  403608:	47a0      	blx	r4
  40360a:	2800      	cmp	r0, #0
  40360c:	f040 809d 	bne.w	40374a <m2m_ip_cb+0x29e>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
  403610:	4b53      	ldr	r3, [pc, #332]	; (403760 <m2m_ip_cb+0x2b4>)
  403612:	681b      	ldr	r3, [r3, #0]
  403614:	2b00      	cmp	r3, #0
  403616:	f000 8098 	beq.w	40374a <m2m_ip_cb+0x29e>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  40361a:	4b51      	ldr	r3, [pc, #324]	; (403760 <m2m_ip_cb+0x2b4>)
  40361c:	681b      	ldr	r3, [r3, #0]
  40361e:	9917      	ldr	r1, [sp, #92]	; 0x5c
  403620:	a807      	add	r0, sp, #28
  403622:	4798      	blx	r3
  403624:	e091      	b.n	40374a <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  403626:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  40362a:	b2db      	uxtb	r3, r3
  40362c:	2b07      	cmp	r3, #7
  40362e:	d84d      	bhi.n	4036cc <m2m_ip_cb+0x220>
  403630:	2285      	movs	r2, #133	; 0x85
  403632:	fa22 f303 	lsr.w	r3, r2, r3
  403636:	f013 0f01 	tst.w	r3, #1
  40363a:	d047      	beq.n	4036cc <m2m_ip_cb+0x220>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  40363c:	2848      	cmp	r0, #72	; 0x48
  40363e:	bf14      	ite	ne
  403640:	2706      	movne	r7, #6
  403642:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  403644:	2300      	movs	r3, #0
  403646:	2210      	movs	r2, #16
  403648:	a903      	add	r1, sp, #12
  40364a:	4620      	mov	r0, r4
  40364c:	4e40      	ldr	r6, [pc, #256]	; (403750 <m2m_ip_cb+0x2a4>)
  40364e:	47b0      	blx	r6
  403650:	2800      	cmp	r0, #0
  403652:	d17a      	bne.n	40374a <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  403654:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  403658:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  40365c:	4a3e      	ldr	r2, [pc, #248]	; (403758 <m2m_ip_cb+0x2ac>)
  40365e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  403662:	2300      	movs	r3, #0
  403664:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  403666:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  40366a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  40366e:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  403672:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  403676:	9e04      	ldr	r6, [sp, #16]
  403678:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  40367a:	88d2      	ldrh	r2, [r2, #6]
  40367c:	b292      	uxth	r2, r2
  40367e:	4291      	cmp	r1, r2
  403680:	d11b      	bne.n	4036ba <m2m_ip_cb+0x20e>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  403682:	f1be 0f00 	cmp.w	lr, #0
  403686:	dd0a      	ble.n	40369e <m2m_ip_cb+0x1f2>
  403688:	45ae      	cmp	lr, r5
  40368a:	da08      	bge.n	40369e <m2m_ip_cb+0x1f2>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  40368c:	fa1f f28e 	uxth.w	r2, lr
  403690:	9200      	str	r2, [sp, #0]
  403692:	4423      	add	r3, r4
  403694:	463a      	mov	r2, r7
  403696:	a907      	add	r1, sp, #28
  403698:	4c32      	ldr	r4, [pc, #200]	; (403764 <m2m_ip_cb+0x2b8>)
  40369a:	47a0      	blx	r4
  40369c:	e055      	b.n	40374a <m2m_ip_cb+0x29e>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  40369e:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  4036a2:	2300      	movs	r3, #0
  4036a4:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  4036a6:	4b2b      	ldr	r3, [pc, #172]	; (403754 <m2m_ip_cb+0x2a8>)
  4036a8:	681b      	ldr	r3, [r3, #0]
  4036aa:	2b00      	cmp	r3, #0
  4036ac:	d04d      	beq.n	40374a <m2m_ip_cb+0x29e>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  4036ae:	4b29      	ldr	r3, [pc, #164]	; (403754 <m2m_ip_cb+0x2a8>)
  4036b0:	681b      	ldr	r3, [r3, #0]
  4036b2:	aa07      	add	r2, sp, #28
  4036b4:	4639      	mov	r1, r7
  4036b6:	4798      	blx	r3
  4036b8:	e047      	b.n	40374a <m2m_ip_cb+0x29e>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4036ba:	2d10      	cmp	r5, #16
  4036bc:	d945      	bls.n	40374a <m2m_ip_cb+0x29e>
					hif_receive(0, NULL, 0, 1);
  4036be:	2301      	movs	r3, #1
  4036c0:	2200      	movs	r2, #0
  4036c2:	4611      	mov	r1, r2
  4036c4:	4610      	mov	r0, r2
  4036c6:	4c22      	ldr	r4, [pc, #136]	; (403750 <m2m_ip_cb+0x2a4>)
  4036c8:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  4036ca:	e03e      	b.n	40374a <m2m_ip_cb+0x29e>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  4036cc:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  4036d0:	2b45      	cmp	r3, #69	; 0x45
  4036d2:	d001      	beq.n	4036d8 <m2m_ip_cb+0x22c>
  4036d4:	284c      	cmp	r0, #76	; 0x4c
  4036d6:	d123      	bne.n	403720 <m2m_ip_cb+0x274>
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  4036d8:	2847      	cmp	r0, #71	; 0x47
  4036da:	bf14      	ite	ne
  4036dc:	2507      	movne	r5, #7
  4036de:	2508      	moveq	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  4036e0:	2300      	movs	r3, #0
  4036e2:	2208      	movs	r2, #8
  4036e4:	a907      	add	r1, sp, #28
  4036e6:	4620      	mov	r0, r4
  4036e8:	4c19      	ldr	r4, [pc, #100]	; (403750 <m2m_ip_cb+0x2a4>)
  4036ea:	47a0      	blx	r4
  4036ec:	2800      	cmp	r0, #0
  4036ee:	d12c      	bne.n	40374a <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
  4036f0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  4036f4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  4036f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4036fc:	f8ad 300c 	strh.w	r3, [sp, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  403700:	4b15      	ldr	r3, [pc, #84]	; (403758 <m2m_ip_cb+0x2ac>)
  403702:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403706:	88db      	ldrh	r3, [r3, #6]
  403708:	b29b      	uxth	r3, r3
  40370a:	429a      	cmp	r2, r3
  40370c:	d11d      	bne.n	40374a <m2m_ip_cb+0x29e>
			{
				if(gpfAppSocketCb)
  40370e:	4b11      	ldr	r3, [pc, #68]	; (403754 <m2m_ip_cb+0x2a8>)
  403710:	681b      	ldr	r3, [r3, #0]
  403712:	b1d3      	cbz	r3, 40374a <m2m_ip_cb+0x29e>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  403714:	4b0f      	ldr	r3, [pc, #60]	; (403754 <m2m_ip_cb+0x2a8>)
  403716:	681b      	ldr	r3, [r3, #0]
  403718:	aa03      	add	r2, sp, #12
  40371a:	4629      	mov	r1, r5
  40371c:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  40371e:	e014      	b.n	40374a <m2m_ip_cb+0x29e>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  403720:	2852      	cmp	r0, #82	; 0x52
  403722:	d112      	bne.n	40374a <m2m_ip_cb+0x29e>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  403724:	2301      	movs	r3, #1
  403726:	2214      	movs	r2, #20
  403728:	a907      	add	r1, sp, #28
  40372a:	4620      	mov	r0, r4
  40372c:	4c08      	ldr	r4, [pc, #32]	; (403750 <m2m_ip_cb+0x2a4>)
  40372e:	47a0      	blx	r4
  403730:	b958      	cbnz	r0, 40374a <m2m_ip_cb+0x29e>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  403732:	4b0d      	ldr	r3, [pc, #52]	; (403768 <m2m_ip_cb+0x2bc>)
  403734:	9a08      	ldr	r2, [sp, #32]
  403736:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  403738:	681b      	ldr	r3, [r3, #0]
  40373a:	b133      	cbz	r3, 40374a <m2m_ip_cb+0x29e>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40373c:	4b0a      	ldr	r3, [pc, #40]	; (403768 <m2m_ip_cb+0x2bc>)
  40373e:	681b      	ldr	r3, [r3, #0]
  403740:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  403744:	9909      	ldr	r1, [sp, #36]	; 0x24
  403746:	9807      	ldr	r0, [sp, #28]
  403748:	4798      	blx	r3
			}
		}
	}
}
  40374a:	b019      	add	sp, #100	; 0x64
  40374c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40374e:	bf00      	nop
  403750:	00401b5d 	.word	0x00401b5d
  403754:	204015ec 	.word	0x204015ec
  403758:	2040153c 	.word	0x2040153c
  40375c:	2040091a 	.word	0x2040091a
  403760:	204015f4 	.word	0x204015f4
  403764:	004033f1 	.word	0x004033f1
  403768:	204015f0 	.word	0x204015f0

0040376c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  40376c:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  40376e:	4b0a      	ldr	r3, [pc, #40]	; (403798 <socketInit+0x2c>)
  403770:	781b      	ldrb	r3, [r3, #0]
  403772:	f013 0fff 	tst.w	r3, #255	; 0xff
  403776:	d10e      	bne.n	403796 <socketInit+0x2a>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  403778:	22b0      	movs	r2, #176	; 0xb0
  40377a:	2100      	movs	r1, #0
  40377c:	4807      	ldr	r0, [pc, #28]	; (40379c <socketInit+0x30>)
  40377e:	4b08      	ldr	r3, [pc, #32]	; (4037a0 <socketInit+0x34>)
  403780:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  403782:	4908      	ldr	r1, [pc, #32]	; (4037a4 <socketInit+0x38>)
  403784:	2002      	movs	r0, #2
  403786:	4b08      	ldr	r3, [pc, #32]	; (4037a8 <socketInit+0x3c>)
  403788:	4798      	blx	r3
		gbSocketInit=1;
  40378a:	2201      	movs	r2, #1
  40378c:	4b02      	ldr	r3, [pc, #8]	; (403798 <socketInit+0x2c>)
  40378e:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  403790:	2200      	movs	r2, #0
  403792:	4b06      	ldr	r3, [pc, #24]	; (4037ac <socketInit+0x40>)
  403794:	801a      	strh	r2, [r3, #0]
  403796:	bd08      	pop	{r3, pc}
  403798:	20400919 	.word	0x20400919
  40379c:	2040153c 	.word	0x2040153c
  4037a0:	00401501 	.word	0x00401501
  4037a4:	004034ad 	.word	0x004034ad
  4037a8:	00401c6d 	.word	0x00401c6d
  4037ac:	2040091a 	.word	0x2040091a

004037b0 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  4037b0:	4b02      	ldr	r3, [pc, #8]	; (4037bc <registerSocketCallback+0xc>)
  4037b2:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  4037b4:	4b02      	ldr	r3, [pc, #8]	; (4037c0 <registerSocketCallback+0x10>)
  4037b6:	6019      	str	r1, [r3, #0]
  4037b8:	4770      	bx	lr
  4037ba:	bf00      	nop
  4037bc:	204015ec 	.word	0x204015ec
  4037c0:	204015f4 	.word	0x204015f4

004037c4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  4037c4:	b570      	push	{r4, r5, r6, lr}
  4037c6:	b086      	sub	sp, #24
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  4037c8:	2802      	cmp	r0, #2
  4037ca:	d14b      	bne.n	403864 <socket+0xa0>
	{
		if(u8Type == SOCK_STREAM)
  4037cc:	2901      	cmp	r1, #1
  4037ce:	d04c      	beq.n	40386a <socket+0xa6>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  4037d0:	2902      	cmp	r1, #2
  4037d2:	d04d      	beq.n	403870 <socket+0xac>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
  4037d4:	f04f 34ff 	mov.w	r4, #4294967295
  4037d8:	e058      	b.n	40388c <socket+0xc8>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4037da:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  4037dc:	eb00 1304 	add.w	r3, r0, r4, lsl #4
  4037e0:	7a9b      	ldrb	r3, [r3, #10]
  4037e2:	f013 0fff 	tst.w	r3, #255	; 0xff
  4037e6:	d136      	bne.n	403856 <socket+0x92>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4037e8:	482a      	ldr	r0, [pc, #168]	; (403894 <socket+0xd0>)
  4037ea:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4037ee:	4616      	mov	r6, r2
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  4037f0:	2210      	movs	r2, #16
  4037f2:	2100      	movs	r1, #0
  4037f4:	4b28      	ldr	r3, [pc, #160]	; (403898 <socket+0xd4>)
  4037f6:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  4037f8:	4b26      	ldr	r3, [pc, #152]	; (403894 <socket+0xd0>)
  4037fa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4037fe:	2201      	movs	r2, #1
  403800:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  403802:	4a26      	ldr	r2, [pc, #152]	; (40389c <socket+0xd8>)
  403804:	8813      	ldrh	r3, [r2, #0]
  403806:	3301      	adds	r3, #1
  403808:	b29b      	uxth	r3, r3
  40380a:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  40380c:	8813      	ldrh	r3, [r2, #0]
  40380e:	b29b      	uxth	r3, r3
  403810:	b91b      	cbnz	r3, 40381a <socket+0x56>
					++gu16SessionID;
  403812:	8813      	ldrh	r3, [r2, #0]
  403814:	3301      	adds	r3, #1
  403816:	b29b      	uxth	r3, r3
  403818:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  40381a:	4b20      	ldr	r3, [pc, #128]	; (40389c <socket+0xd8>)
  40381c:	881a      	ldrh	r2, [r3, #0]
  40381e:	b292      	uxth	r2, r2
  403820:	4b1c      	ldr	r3, [pc, #112]	; (403894 <socket+0xd0>)
  403822:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  403826:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  403828:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  40382a:	f016 0f01 	tst.w	r6, #1
  40382e:	d02d      	beq.n	40388c <socket+0xc8>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  403830:	aa06      	add	r2, sp, #24
  403832:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  403836:	4b17      	ldr	r3, [pc, #92]	; (403894 <socket+0xd0>)
  403838:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  40383c:	2321      	movs	r3, #33	; 0x21
  40383e:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  403840:	2300      	movs	r3, #0
  403842:	9302      	str	r3, [sp, #8]
  403844:	9301      	str	r3, [sp, #4]
  403846:	9300      	str	r3, [sp, #0]
  403848:	2304      	movs	r3, #4
  40384a:	2150      	movs	r1, #80	; 0x50
  40384c:	2002      	movs	r0, #2
  40384e:	4d14      	ldr	r5, [pc, #80]	; (4038a0 <socket+0xdc>)
  403850:	47a8      	blx	r5
  403852:	e01b      	b.n	40388c <socket+0xc8>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
  403854:	480f      	ldr	r0, [pc, #60]	; (403894 <socket+0xd0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  403856:	3401      	adds	r4, #1
  403858:	b2e4      	uxtb	r4, r4
  40385a:	428c      	cmp	r4, r1
  40385c:	d3bd      	bcc.n	4037da <socket+0x16>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
  40385e:	f04f 34ff 	mov.w	r4, #4294967295
  403862:	e013      	b.n	40388c <socket+0xc8>
  403864:	f04f 34ff 	mov.w	r4, #4294967295
  403868:	e010      	b.n	40388c <socket+0xc8>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
  40386a:	2107      	movs	r1, #7
			u8Count = 0;
  40386c:	2400      	movs	r4, #0
  40386e:	e001      	b.n	403874 <socket+0xb0>
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  403870:	210b      	movs	r1, #11
			u8Count = TCP_SOCK_MAX;
  403872:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  403874:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  403876:	4b07      	ldr	r3, [pc, #28]	; (403894 <socket+0xd0>)
  403878:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40387c:	7a9b      	ldrb	r3, [r3, #10]
  40387e:	f013 0fff 	tst.w	r3, #255	; 0xff
  403882:	d1e7      	bne.n	403854 <socket+0x90>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  403884:	4803      	ldr	r0, [pc, #12]	; (403894 <socket+0xd0>)
  403886:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  40388a:	e7b0      	b.n	4037ee <socket+0x2a>
				break;
			}
		}
	}
	return sock;
}
  40388c:	4620      	mov	r0, r4
  40388e:	b006      	add	sp, #24
  403890:	bd70      	pop	{r4, r5, r6, pc}
  403892:	bf00      	nop
  403894:	2040153c 	.word	0x2040153c
  403898:	00401501 	.word	0x00401501
  40389c:	2040091a 	.word	0x2040091a
  4038a0:	00401665 	.word	0x00401665

004038a4 <connect>:
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  4038a4:	2800      	cmp	r0, #0
  4038a6:	db38      	blt.n	40391a <connect+0x76>
  4038a8:	2900      	cmp	r1, #0
  4038aa:	d036      	beq.n	40391a <connect+0x76>
  4038ac:	4b1f      	ldr	r3, [pc, #124]	; (40392c <connect+0x88>)
  4038ae:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4038b2:	7a9b      	ldrb	r3, [r3, #10]
  4038b4:	b2db      	uxtb	r3, r3
  4038b6:	2a00      	cmp	r2, #0
  4038b8:	d032      	beq.n	403920 <connect+0x7c>
  4038ba:	2b01      	cmp	r3, #1
  4038bc:	d130      	bne.n	403920 <connect+0x7c>

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  4038be:	b530      	push	{r4, r5, lr}
  4038c0:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  4038c2:	4b1a      	ldr	r3, [pc, #104]	; (40392c <connect+0x88>)
  4038c4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4038c8:	7adb      	ldrb	r3, [r3, #11]
  4038ca:	f013 0f01 	tst.w	r3, #1
  4038ce:	d007      	beq.n	4038e0 <connect+0x3c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  4038d0:	4b16      	ldr	r3, [pc, #88]	; (40392c <connect+0x88>)
  4038d2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4038d6:	7adb      	ldrb	r3, [r3, #11]
  4038d8:	f88d 301d 	strb.w	r3, [sp, #29]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  4038dc:	254b      	movs	r5, #75	; 0x4b
  4038de:	e000      	b.n	4038e2 <connect+0x3e>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  4038e0:	2544      	movs	r5, #68	; 0x44
  4038e2:	4604      	mov	r4, r0
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
  4038e4:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  4038e8:	2208      	movs	r2, #8
  4038ea:	a805      	add	r0, sp, #20
  4038ec:	4b10      	ldr	r3, [pc, #64]	; (403930 <connect+0x8c>)
  4038ee:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  4038f0:	480e      	ldr	r0, [pc, #56]	; (40392c <connect+0x88>)
  4038f2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4038f6:	88c3      	ldrh	r3, [r0, #6]
  4038f8:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  4038fc:	2300      	movs	r3, #0
  4038fe:	9302      	str	r3, [sp, #8]
  403900:	9301      	str	r3, [sp, #4]
  403902:	9300      	str	r3, [sp, #0]
  403904:	230c      	movs	r3, #12
  403906:	aa05      	add	r2, sp, #20
  403908:	4629      	mov	r1, r5
  40390a:	2002      	movs	r0, #2
  40390c:	4c09      	ldr	r4, [pc, #36]	; (403934 <connect+0x90>)
  40390e:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  403910:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  403912:	bf18      	it	ne
  403914:	f06f 0008 	mvnne.w	r0, #8
  403918:	e005      	b.n	403926 <connect+0x82>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40391a:	f06f 0005 	mvn.w	r0, #5
  40391e:	4770      	bx	lr
  403920:	f06f 0005 	mvn.w	r0, #5
  403924:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  403926:	b009      	add	sp, #36	; 0x24
  403928:	bd30      	pop	{r4, r5, pc}
  40392a:	bf00      	nop
  40392c:	2040153c 	.word	0x2040153c
  403930:	004014ed 	.word	0x004014ed
  403934:	00401665 	.word	0x00401665

00403938 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  403938:	b530      	push	{r4, r5, lr}
  40393a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  40393c:	460c      	mov	r4, r1
  40393e:	3100      	adds	r1, #0
  403940:	bf18      	it	ne
  403942:	2101      	movne	r1, #1
  403944:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  403948:	bf88      	it	hi
  40394a:	2100      	movhi	r1, #0
  40394c:	2900      	cmp	r1, #0
  40394e:	d036      	beq.n	4039be <send+0x86>
  403950:	2800      	cmp	r0, #0
  403952:	db34      	blt.n	4039be <send+0x86>
  403954:	4b1d      	ldr	r3, [pc, #116]	; (4039cc <send+0x94>)
  403956:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40395a:	7a9b      	ldrb	r3, [r3, #10]
  40395c:	b2db      	uxtb	r3, r3
  40395e:	2b01      	cmp	r3, #1
  403960:	d130      	bne.n	4039c4 <send+0x8c>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  403962:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  403966:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  40396a:	4b18      	ldr	r3, [pc, #96]	; (4039cc <send+0x94>)
  40396c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403970:	88db      	ldrh	r3, [r3, #6]
  403972:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  403976:	2807      	cmp	r0, #7
  403978:	bfb4      	ite	lt
  40397a:	2550      	movlt	r5, #80	; 0x50
  40397c:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40397e:	4b13      	ldr	r3, [pc, #76]	; (4039cc <send+0x94>)
  403980:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403984:	7adb      	ldrb	r3, [r3, #11]
  403986:	f013 0f01 	tst.w	r3, #1
  40398a:	d006      	beq.n	40399a <send+0x62>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  40398c:	4b0f      	ldr	r3, [pc, #60]	; (4039cc <send+0x94>)
  40398e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403992:	8905      	ldrh	r5, [r0, #8]
  403994:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  403996:	214c      	movs	r1, #76	; 0x4c
  403998:	e000      	b.n	40399c <send+0x64>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  40399a:	2145      	movs	r1, #69	; 0x45
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  40399c:	9502      	str	r5, [sp, #8]
  40399e:	9201      	str	r2, [sp, #4]
  4039a0:	9400      	str	r4, [sp, #0]
  4039a2:	2310      	movs	r3, #16
  4039a4:	eb0d 0203 	add.w	r2, sp, r3
  4039a8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4039ac:	2002      	movs	r0, #2
  4039ae:	4c08      	ldr	r4, [pc, #32]	; (4039d0 <send+0x98>)
  4039b0:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  4039b2:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  4039b4:	bf0c      	ite	eq
  4039b6:	2000      	moveq	r0, #0
  4039b8:	f06f 000d 	mvnne.w	r0, #13
  4039bc:	e004      	b.n	4039c8 <send+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4039be:	f06f 0005 	mvn.w	r0, #5
  4039c2:	e001      	b.n	4039c8 <send+0x90>
  4039c4:	f06f 0005 	mvn.w	r0, #5
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  4039c8:	b009      	add	sp, #36	; 0x24
  4039ca:	bd30      	pop	{r4, r5, pc}
  4039cc:	2040153c 	.word	0x2040153c
  4039d0:	00401665 	.word	0x00401665

004039d4 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4039d4:	2900      	cmp	r1, #0
  4039d6:	bf18      	it	ne
  4039d8:	2a00      	cmpne	r2, #0
  4039da:	d045      	beq.n	403a68 <recv+0x94>

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  4039dc:	b570      	push	{r4, r5, r6, lr}
  4039de:	b086      	sub	sp, #24
  4039e0:	460e      	mov	r6, r1
  4039e2:	4615      	mov	r5, r2
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4039e4:	2800      	cmp	r0, #0
  4039e6:	db36      	blt.n	403a56 <recv+0x82>
  4039e8:	4a21      	ldr	r2, [pc, #132]	; (403a70 <recv+0x9c>)
  4039ea:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4039ee:	7a92      	ldrb	r2, [r2, #10]
  4039f0:	b2d2      	uxtb	r2, r2
  4039f2:	2a01      	cmp	r2, #1
  4039f4:	d132      	bne.n	403a5c <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  4039f6:	4c1e      	ldr	r4, [pc, #120]	; (403a70 <recv+0x9c>)
  4039f8:	0101      	lsls	r1, r0, #4
  4039fa:	1862      	adds	r2, r4, r1
  4039fc:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  4039fe:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  403a00:	7b12      	ldrb	r2, [r2, #12]
  403a02:	f012 0fff 	tst.w	r2, #255	; 0xff
  403a06:	d12c      	bne.n	403a62 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  403a08:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  403a0c:	2101      	movs	r1, #1
  403a0e:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403a10:	7ad2      	ldrb	r2, [r2, #11]
  403a12:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  403a14:	2a00      	cmp	r2, #0
  403a16:	bf0c      	ite	eq
  403a18:	2146      	moveq	r1, #70	; 0x46
  403a1a:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  403a1c:	b91b      	cbnz	r3, 403a26 <recv+0x52>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  403a1e:	f04f 33ff 	mov.w	r3, #4294967295
  403a22:	9304      	str	r3, [sp, #16]
  403a24:	e000      	b.n	403a28 <recv+0x54>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  403a26:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
  403a28:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  403a2c:	4b10      	ldr	r3, [pc, #64]	; (403a70 <recv+0x9c>)
  403a2e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403a32:	88c3      	ldrh	r3, [r0, #6]
  403a34:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  403a38:	2300      	movs	r3, #0
  403a3a:	9302      	str	r3, [sp, #8]
  403a3c:	9301      	str	r3, [sp, #4]
  403a3e:	9300      	str	r3, [sp, #0]
  403a40:	2308      	movs	r3, #8
  403a42:	aa04      	add	r2, sp, #16
  403a44:	2002      	movs	r0, #2
  403a46:	4c0b      	ldr	r4, [pc, #44]	; (403a74 <recv+0xa0>)
  403a48:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  403a4a:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  403a4c:	bf0c      	ite	eq
  403a4e:	2000      	moveq	r0, #0
  403a50:	f06f 000d 	mvnne.w	r0, #13
  403a54:	e006      	b.n	403a64 <recv+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  403a56:	f06f 0005 	mvn.w	r0, #5
  403a5a:	e003      	b.n	403a64 <recv+0x90>
  403a5c:	f06f 0005 	mvn.w	r0, #5
  403a60:	e000      	b.n	403a64 <recv+0x90>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  403a62:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  403a64:	b006      	add	sp, #24
  403a66:	bd70      	pop	{r4, r5, r6, pc}
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  403a68:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  403a6c:	4770      	bx	lr
  403a6e:	bf00      	nop
  403a70:	2040153c 	.word	0x2040153c
  403a74:	00401665 	.word	0x00401665

00403a78 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  403a78:	b530      	push	{r4, r5, lr}
  403a7a:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  403a7c:	2800      	cmp	r0, #0
  403a7e:	db2e      	blt.n	403ade <close+0x66>
  403a80:	4b1b      	ldr	r3, [pc, #108]	; (403af0 <close+0x78>)
  403a82:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403a86:	7a9b      	ldrb	r3, [r3, #10]
  403a88:	b2db      	uxtb	r3, r3
  403a8a:	2b01      	cmp	r3, #1
  403a8c:	d12a      	bne.n	403ae4 <close+0x6c>
  403a8e:	4604      	mov	r4, r0
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  403a90:	f88d 0014 	strb.w	r0, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  403a94:	4b16      	ldr	r3, [pc, #88]	; (403af0 <close+0x78>)
  403a96:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403a9a:	88da      	ldrh	r2, [r3, #6]
  403a9c:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  403aa0:	2200      	movs	r2, #0
  403aa2:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  403aa4:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403aa6:	7adb      	ldrb	r3, [r3, #11]
  403aa8:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  403aac:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  403aae:	9202      	str	r2, [sp, #8]
  403ab0:	9201      	str	r2, [sp, #4]
  403ab2:	9200      	str	r2, [sp, #0]
  403ab4:	f04f 0304 	mov.w	r3, #4
  403ab8:	aa05      	add	r2, sp, #20
  403aba:	bf0c      	ite	eq
  403abc:	2149      	moveq	r1, #73	; 0x49
  403abe:	214e      	movne	r1, #78	; 0x4e
  403ac0:	2002      	movs	r0, #2
  403ac2:	4d0c      	ldr	r5, [pc, #48]	; (403af4 <close+0x7c>)
  403ac4:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  403ac6:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  403ac8:	bf18      	it	ne
  403aca:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  403ace:	2210      	movs	r2, #16
  403ad0:	2100      	movs	r1, #0
  403ad2:	4807      	ldr	r0, [pc, #28]	; (403af0 <close+0x78>)
  403ad4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403ad8:	4b07      	ldr	r3, [pc, #28]	; (403af8 <close+0x80>)
  403ada:	4798      	blx	r3
  403adc:	e004      	b.n	403ae8 <close+0x70>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403ade:	f06f 0505 	mvn.w	r5, #5
  403ae2:	e001      	b.n	403ae8 <close+0x70>
  403ae4:	f06f 0505 	mvn.w	r5, #5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
  403ae8:	4628      	mov	r0, r5
  403aea:	b007      	add	sp, #28
  403aec:	bd30      	pop	{r4, r5, pc}
  403aee:	bf00      	nop
  403af0:	2040153c 	.word	0x2040153c
  403af4:	00401665 	.word	0x00401665
  403af8:	00401501 	.word	0x00401501

00403afc <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  403afc:	b570      	push	{r4, r5, r6, lr}
  403afe:	b082      	sub	sp, #8
  403b00:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  403b02:	4b2b      	ldr	r3, [pc, #172]	; (403bb0 <spi_flash_enable+0xb4>)
  403b04:	4798      	blx	r3
  403b06:	f3c0 000b 	ubfx	r0, r0, #0, #12
  403b0a:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  403b0e:	d34a      	bcc.n	403ba6 <spi_flash_enable+0xaa>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  403b10:	a901      	add	r1, sp, #4
  403b12:	f241 4010 	movw	r0, #5136	; 0x1410
  403b16:	4b27      	ldr	r3, [pc, #156]	; (403bb4 <spi_flash_enable+0xb8>)
  403b18:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  403b1a:	4604      	mov	r4, r0
  403b1c:	2800      	cmp	r0, #0
  403b1e:	d143      	bne.n	403ba8 <spi_flash_enable+0xac>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  403b20:	4b25      	ldr	r3, [pc, #148]	; (403bb8 <spi_flash_enable+0xbc>)
  403b22:	9a01      	ldr	r2, [sp, #4]
  403b24:	4013      	ands	r3, r2
  403b26:	4925      	ldr	r1, [pc, #148]	; (403bbc <spi_flash_enable+0xc0>)
  403b28:	4319      	orrs	r1, r3
  403b2a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  403b2c:	f241 4010 	movw	r0, #5136	; 0x1410
  403b30:	4b23      	ldr	r3, [pc, #140]	; (403bc0 <spi_flash_enable+0xc4>)
  403b32:	4798      	blx	r3
		if(enable) {
  403b34:	b1b5      	cbz	r5, 403b64 <spi_flash_enable+0x68>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  403b36:	2100      	movs	r1, #0
  403b38:	4822      	ldr	r0, [pc, #136]	; (403bc4 <spi_flash_enable+0xc8>)
  403b3a:	4d21      	ldr	r5, [pc, #132]	; (403bc0 <spi_flash_enable+0xc4>)
  403b3c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  403b3e:	21ab      	movs	r1, #171	; 0xab
  403b40:	4821      	ldr	r0, [pc, #132]	; (403bc8 <spi_flash_enable+0xcc>)
  403b42:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  403b44:	2101      	movs	r1, #1
  403b46:	4821      	ldr	r0, [pc, #132]	; (403bcc <spi_flash_enable+0xd0>)
  403b48:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  403b4a:	2100      	movs	r1, #0
  403b4c:	4820      	ldr	r0, [pc, #128]	; (403bd0 <spi_flash_enable+0xd4>)
  403b4e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  403b50:	2181      	movs	r1, #129	; 0x81
  403b52:	4820      	ldr	r0, [pc, #128]	; (403bd4 <spi_flash_enable+0xd8>)
  403b54:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403b56:	4e20      	ldr	r6, [pc, #128]	; (403bd8 <spi_flash_enable+0xdc>)
  403b58:	4d20      	ldr	r5, [pc, #128]	; (403bdc <spi_flash_enable+0xe0>)
  403b5a:	4630      	mov	r0, r6
  403b5c:	47a8      	blx	r5
  403b5e:	2801      	cmp	r0, #1
  403b60:	d1fb      	bne.n	403b5a <spi_flash_enable+0x5e>
  403b62:	e015      	b.n	403b90 <spi_flash_enable+0x94>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  403b64:	2100      	movs	r1, #0
  403b66:	4817      	ldr	r0, [pc, #92]	; (403bc4 <spi_flash_enable+0xc8>)
  403b68:	4d15      	ldr	r5, [pc, #84]	; (403bc0 <spi_flash_enable+0xc4>)
  403b6a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  403b6c:	21b9      	movs	r1, #185	; 0xb9
  403b6e:	4816      	ldr	r0, [pc, #88]	; (403bc8 <spi_flash_enable+0xcc>)
  403b70:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  403b72:	2101      	movs	r1, #1
  403b74:	4815      	ldr	r0, [pc, #84]	; (403bcc <spi_flash_enable+0xd0>)
  403b76:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  403b78:	2100      	movs	r1, #0
  403b7a:	4815      	ldr	r0, [pc, #84]	; (403bd0 <spi_flash_enable+0xd4>)
  403b7c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  403b7e:	2181      	movs	r1, #129	; 0x81
  403b80:	4814      	ldr	r0, [pc, #80]	; (403bd4 <spi_flash_enable+0xd8>)
  403b82:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403b84:	4e14      	ldr	r6, [pc, #80]	; (403bd8 <spi_flash_enable+0xdc>)
  403b86:	4d15      	ldr	r5, [pc, #84]	; (403bdc <spi_flash_enable+0xe0>)
  403b88:	4630      	mov	r0, r6
  403b8a:	47a8      	blx	r5
  403b8c:	2801      	cmp	r0, #1
  403b8e:	d1fb      	bne.n	403b88 <spi_flash_enable+0x8c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  403b90:	4909      	ldr	r1, [pc, #36]	; (403bb8 <spi_flash_enable+0xbc>)
  403b92:	9b01      	ldr	r3, [sp, #4]
  403b94:	4019      	ands	r1, r3
  403b96:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403b9a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  403b9c:	f241 4010 	movw	r0, #5136	; 0x1410
  403ba0:	4b07      	ldr	r3, [pc, #28]	; (403bc0 <spi_flash_enable+0xc4>)
  403ba2:	4798      	blx	r3
  403ba4:	e000      	b.n	403ba8 <spi_flash_enable+0xac>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  403ba6:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  403ba8:	4620      	mov	r0, r4
  403baa:	b002      	add	sp, #8
  403bac:	bd70      	pop	{r4, r5, r6, pc}
  403bae:	bf00      	nop
  403bb0:	00402511 	.word	0x00402511
  403bb4:	00402809 	.word	0x00402809
  403bb8:	f8888fff 	.word	0xf8888fff
  403bbc:	01111000 	.word	0x01111000
  403bc0:	00402815 	.word	0x00402815
  403bc4:	00010208 	.word	0x00010208
  403bc8:	0001020c 	.word	0x0001020c
  403bcc:	00010214 	.word	0x00010214
  403bd0:	0001021c 	.word	0x0001021c
  403bd4:	00010204 	.word	0x00010204
  403bd8:	00010218 	.word	0x00010218
  403bdc:	004027fd 	.word	0x004027fd

00403be0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403be0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403be2:	4810      	ldr	r0, [pc, #64]	; (403c24 <sysclk_init+0x44>)
  403be4:	4b10      	ldr	r3, [pc, #64]	; (403c28 <sysclk_init+0x48>)
  403be6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403be8:	213e      	movs	r1, #62	; 0x3e
  403bea:	2000      	movs	r0, #0
  403bec:	4b0f      	ldr	r3, [pc, #60]	; (403c2c <sysclk_init+0x4c>)
  403bee:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403bf0:	4c0f      	ldr	r4, [pc, #60]	; (403c30 <sysclk_init+0x50>)
  403bf2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  403bf4:	2800      	cmp	r0, #0
  403bf6:	d0fc      	beq.n	403bf2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  403bf8:	4b0e      	ldr	r3, [pc, #56]	; (403c34 <sysclk_init+0x54>)
  403bfa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403bfc:	4a0e      	ldr	r2, [pc, #56]	; (403c38 <sysclk_init+0x58>)
  403bfe:	4b0f      	ldr	r3, [pc, #60]	; (403c3c <sysclk_init+0x5c>)
  403c00:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  403c02:	4c0f      	ldr	r4, [pc, #60]	; (403c40 <sysclk_init+0x60>)
  403c04:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403c06:	2800      	cmp	r0, #0
  403c08:	d0fc      	beq.n	403c04 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  403c0a:	2002      	movs	r0, #2
  403c0c:	4b0d      	ldr	r3, [pc, #52]	; (403c44 <sysclk_init+0x64>)
  403c0e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403c10:	2000      	movs	r0, #0
  403c12:	4b0d      	ldr	r3, [pc, #52]	; (403c48 <sysclk_init+0x68>)
  403c14:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403c16:	4b0d      	ldr	r3, [pc, #52]	; (403c4c <sysclk_init+0x6c>)
  403c18:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403c1a:	4802      	ldr	r0, [pc, #8]	; (403c24 <sysclk_init+0x44>)
  403c1c:	4b02      	ldr	r3, [pc, #8]	; (403c28 <sysclk_init+0x48>)
  403c1e:	4798      	blx	r3
  403c20:	bd10      	pop	{r4, pc}
  403c22:	bf00      	nop
  403c24:	11e1a300 	.word	0x11e1a300
  403c28:	00404ac5 	.word	0x00404ac5
  403c2c:	00404551 	.word	0x00404551
  403c30:	004045a5 	.word	0x004045a5
  403c34:	004045b5 	.word	0x004045b5
  403c38:	20183f01 	.word	0x20183f01
  403c3c:	400e0600 	.word	0x400e0600
  403c40:	004045c5 	.word	0x004045c5
  403c44:	004044ad 	.word	0x004044ad
  403c48:	004044e9 	.word	0x004044e9
  403c4c:	004049b5 	.word	0x004049b5

00403c50 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  403c50:	b990      	cbnz	r0, 403c78 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  403c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c56:	460c      	mov	r4, r1
  403c58:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  403c5a:	2a00      	cmp	r2, #0
  403c5c:	dd0f      	ble.n	403c7e <_read+0x2e>
  403c5e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  403c60:	4e08      	ldr	r6, [pc, #32]	; (403c84 <_read+0x34>)
  403c62:	4d09      	ldr	r5, [pc, #36]	; (403c88 <_read+0x38>)
  403c64:	6830      	ldr	r0, [r6, #0]
  403c66:	4621      	mov	r1, r4
  403c68:	682b      	ldr	r3, [r5, #0]
  403c6a:	4798      	blx	r3
		ptr++;
  403c6c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  403c6e:	42a7      	cmp	r7, r4
  403c70:	d1f8      	bne.n	403c64 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  403c72:	4640      	mov	r0, r8
  403c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  403c78:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  403c7c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  403c7e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  403c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c84:	20401600 	.word	0x20401600
  403c88:	204015f8 	.word	0x204015f8

00403c8c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  403c8c:	3801      	subs	r0, #1
  403c8e:	2802      	cmp	r0, #2
  403c90:	d815      	bhi.n	403cbe <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  403c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c96:	460e      	mov	r6, r1
  403c98:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403c9a:	b19a      	cbz	r2, 403cc4 <_write+0x38>
  403c9c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  403c9e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403cd8 <_write+0x4c>
  403ca2:	4f0c      	ldr	r7, [pc, #48]	; (403cd4 <_write+0x48>)
  403ca4:	f8d8 0000 	ldr.w	r0, [r8]
  403ca8:	f815 1b01 	ldrb.w	r1, [r5], #1
  403cac:	683b      	ldr	r3, [r7, #0]
  403cae:	4798      	blx	r3
  403cb0:	2800      	cmp	r0, #0
  403cb2:	db0a      	blt.n	403cca <_write+0x3e>
  403cb4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403cb6:	3c01      	subs	r4, #1
  403cb8:	d1f4      	bne.n	403ca4 <_write+0x18>
  403cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  403cbe:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  403cc2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403cc4:	2000      	movs	r0, #0
  403cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  403cca:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  403cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403cd2:	bf00      	nop
  403cd4:	204015fc 	.word	0x204015fc
  403cd8:	20401600 	.word	0x20401600

00403cdc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  403cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  403cde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403ce2:	4bb6      	ldr	r3, [pc, #728]	; (403fbc <board_init+0x2e0>)
  403ce4:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403ce6:	f3bf 8f5f 	dmb	sy
		MPU_REGION_VALID |
		MPU_DEFAULT_ITCM_REGION;

	dw_region_attr =
		MPU_AP_PRIVILEGED_READ_WRITE |
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  403cea:	4fb5      	ldr	r7, [pc, #724]	; (403fc0 <board_init+0x2e4>)
  403cec:	4638      	mov	r0, r7
  403cee:	4db5      	ldr	r5, [pc, #724]	; (403fc4 <board_init+0x2e8>)
  403cf0:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403cf2:	4eb5      	ldr	r6, [pc, #724]	; (403fc8 <board_init+0x2ec>)
  403cf4:	ea40 0106 	orr.w	r1, r0, r6
  403cf8:	2011      	movs	r0, #17
  403cfa:	4cb4      	ldr	r4, [pc, #720]	; (403fcc <board_init+0x2f0>)
  403cfc:	47a0      	blx	r4
		MPU_DEFAULT_IFLASH_REGION;

	dw_region_attr =
		MPU_AP_READONLY |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  403cfe:	48b4      	ldr	r0, [pc, #720]	; (403fd0 <board_init+0x2f4>)
  403d00:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d02:	49b4      	ldr	r1, [pc, #720]	; (403fd4 <board_init+0x2f8>)
  403d04:	4301      	orrs	r1, r0
  403d06:	48b4      	ldr	r0, [pc, #720]	; (403fd8 <board_init+0x2fc>)
  403d08:	47a0      	blx	r4
		MPU_REGION_VALID |
		MPU_DEFAULT_DTCM_REGION;

	dw_region_attr =
		MPU_AP_PRIVILEGED_READ_WRITE |
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  403d0a:	4638      	mov	r0, r7
  403d0c:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d0e:	ea40 0106 	orr.w	r1, r0, r6
  403d12:	48b2      	ldr	r0, [pc, #712]	; (403fdc <board_init+0x300>)
  403d14:	47a0      	blx	r4
		MPU_DEFAULT_SRAM_REGION_1;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  403d16:	48b2      	ldr	r0, [pc, #712]	; (403fe0 <board_init+0x304>)
  403d18:	47a8      	blx	r5
		| MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d1a:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  403d1e:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
  403d22:	ea40 0106 	orr.w	r1, r0, r6
  403d26:	48af      	ldr	r0, [pc, #700]	; (403fe4 <board_init+0x308>)
  403d28:	47a0      	blx	r4
		MPU_DEFAULT_SRAM_REGION_2;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  403d2a:	48af      	ldr	r0, [pc, #700]	; (403fe8 <board_init+0x30c>)
  403d2c:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d2e:	ea40 0106 	orr.w	r1, r0, r6
  403d32:	48ae      	ldr	r0, [pc, #696]	; (403fec <board_init+0x310>)
  403d34:	47a0      	blx	r4
		MPU_PERIPHERALS_REGION;

	dw_region_attr = MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  403d36:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  403d3a:	47a8      	blx	r5
		|MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d3c:	4eac      	ldr	r6, [pc, #688]	; (403ff0 <board_init+0x314>)
  403d3e:	ea40 0106 	orr.w	r1, r0, r6
  403d42:	48ac      	ldr	r0, [pc, #688]	; (403ff4 <board_init+0x318>)
  403d44:	47a0      	blx	r4

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		/* External memory Must be defined with 'Device' or 'Strongly Ordered' attribute for write accesses (AXI) */
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  403d46:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  403d4a:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d4c:	4faa      	ldr	r7, [pc, #680]	; (403ff8 <board_init+0x31c>)
  403d4e:	ea40 0107 	orr.w	r1, r0, r7
  403d52:	48aa      	ldr	r0, [pc, #680]	; (403ffc <board_init+0x320>)
  403d54:	47a0      	blx	r4
		MPU_DEFAULT_SDRAM_REGION;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_RWA_TYPE( SHAREABLE ) |
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  403d56:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  403d5a:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d5c:	49a8      	ldr	r1, [pc, #672]	; (404000 <board_init+0x324>)
  403d5e:	4301      	orrs	r1, r0
  403d60:	48a8      	ldr	r0, [pc, #672]	; (404004 <board_init+0x328>)
  403d62:	47a0      	blx	r4
		MPU_QSPIMEM_REGION;

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  403d64:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  403d68:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d6a:	ea40 0107 	orr.w	r1, r0, r7
  403d6e:	48a6      	ldr	r0, [pc, #664]	; (404008 <board_init+0x32c>)
  403d70:	47a0      	blx	r4

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  403d72:	48a6      	ldr	r0, [pc, #664]	; (40400c <board_init+0x330>)
  403d74:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d76:	ea40 0106 	orr.w	r1, r0, r6
  403d7a:	48a5      	ldr	r0, [pc, #660]	; (404010 <board_init+0x334>)
  403d7c:	47a0      	blx	r4


	/* Enable the memory management fault , Bus Fault, Usage Fault exception */
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  403d7e:	4ca5      	ldr	r4, [pc, #660]	; (404014 <board_init+0x338>)
  403d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d82:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  403d86:	6263      	str	r3, [r4, #36]	; 0x24
					| SCB_SHCSR_USGFAULTENA_Msk);

	/* Enable the MPU region */
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  403d88:	2005      	movs	r0, #5
  403d8a:	4ba3      	ldr	r3, [pc, #652]	; (404018 <board_init+0x33c>)
  403d8c:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403d8e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403d92:	f3bf 8f6f 	isb	sy
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403d96:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403d9a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  403d9e:	2300      	movs	r3, #0
  403da0:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403da4:	6963      	ldr	r3, [r4, #20]
  403da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  403daa:	6163      	str	r3, [r4, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403dac:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403db0:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403db4:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403db8:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403dbc:	f006 0707 	and.w	r7, r6, #7
  403dc0:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403dc2:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403dc6:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  403dca:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403dce:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  403dd2:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  403dd4:	fa05 f107 	lsl.w	r1, r5, r7
  403dd8:	fa03 f200 	lsl.w	r2, r3, r0
  403ddc:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  403dde:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  403de2:	3b01      	subs	r3, #1
  403de4:	f1b3 3fff 	cmp.w	r3, #4294967295
  403de8:	d1f6      	bne.n	403dd8 <board_init+0xfc>
        } while(sets--);
  403dea:	3d01      	subs	r5, #1
  403dec:	f1b5 3fff 	cmp.w	r5, #4294967295
  403df0:	d1ef      	bne.n	403dd2 <board_init+0xf6>
  403df2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  403df6:	4b87      	ldr	r3, [pc, #540]	; (404014 <board_init+0x338>)
  403df8:	695a      	ldr	r2, [r3, #20]
  403dfa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  403dfe:	615a      	str	r2, [r3, #20]
  403e00:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403e04:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403e08:	4a84      	ldr	r2, [pc, #528]	; (40401c <board_init+0x340>)
  403e0a:	4985      	ldr	r1, [pc, #532]	; (404020 <board_init+0x344>)
  403e0c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403e0e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  403e12:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403e14:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403e18:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  403e1c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  403e20:	f022 0201 	bic.w	r2, r2, #1
  403e24:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  403e28:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  403e2c:	f022 0201 	bic.w	r2, r2, #1
  403e30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403e34:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403e38:	f3bf 8f6f 	isb	sy
  403e3c:	200a      	movs	r0, #10
  403e3e:	4c79      	ldr	r4, [pc, #484]	; (404024 <board_init+0x348>)
  403e40:	47a0      	blx	r4
  403e42:	200b      	movs	r0, #11
  403e44:	47a0      	blx	r4
  403e46:	200c      	movs	r0, #12
  403e48:	47a0      	blx	r4
  403e4a:	2010      	movs	r0, #16
  403e4c:	47a0      	blx	r4
  403e4e:	2011      	movs	r0, #17
  403e50:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403e52:	4a75      	ldr	r2, [pc, #468]	; (404028 <board_init+0x34c>)
  403e54:	f44f 7380 	mov.w	r3, #256	; 0x100
  403e58:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403e5a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403e5e:	6313      	str	r3, [r2, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403e60:	4b72      	ldr	r3, [pc, #456]	; (40402c <board_init+0x350>)
  403e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403e66:	6159      	str	r1, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403e68:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  403e6c:	6659      	str	r1, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403e6e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403e72:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  403e74:	6219      	str	r1, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  403e76:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403e7a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403e7c:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  403e80:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403e82:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403e84:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  403e88:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  403e8a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  403e8e:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  403e92:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  403e9a:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403e9c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403ea0:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403ea2:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403ea4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403ea8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403eaa:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  403eae:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403eb0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403eb2:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  403eb6:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403eb8:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  403eba:	485d      	ldr	r0, [pc, #372]	; (404030 <board_init+0x354>)
  403ebc:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  403ec0:	f041 0110 	orr.w	r1, r1, #16
  403ec4:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403ec8:	495a      	ldr	r1, [pc, #360]	; (404034 <board_init+0x358>)
  403eca:	2010      	movs	r0, #16
  403ecc:	6608      	str	r0, [r1, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403ece:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403ed2:	6548      	str	r0, [r1, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403ed4:	6248      	str	r0, [r1, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403ed6:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  403eda:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  403edc:	4304      	orrs	r4, r0
  403ede:	670c      	str	r4, [r1, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403ee0:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  403ee2:	4304      	orrs	r4, r0
  403ee4:	674c      	str	r4, [r1, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403ee6:	6048      	str	r0, [r1, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403ee8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403eec:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403eee:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403ef2:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403ef4:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403ef6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403efa:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403efc:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  403f00:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f02:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f04:	4308      	orrs	r0, r1
  403f06:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f08:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  403f0e:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f10:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403f14:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403f16:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f18:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  403f1c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f1e:	4308      	orrs	r0, r1
  403f20:	6718      	str	r0, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f22:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f24:	4308      	orrs	r0, r1
  403f26:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f28:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403f2e:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f30:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403f34:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403f36:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f38:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403f3c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f3e:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  403f42:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f44:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f46:	4308      	orrs	r0, r1
  403f48:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f4a:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f4c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403f50:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f52:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403f56:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403f58:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f5a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403f5e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f60:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  403f64:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f66:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f68:	4308      	orrs	r0, r1
  403f6a:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f6c:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f6e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403f72:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f74:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403f78:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403f7a:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f7c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403f80:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f82:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  403f86:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f88:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f8a:	4308      	orrs	r0, r1
  403f8c:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f8e:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403f94:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f96:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403f9a:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403f9c:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f9e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403fa2:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403fa4:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  403fa8:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403faa:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403fac:	4308      	orrs	r0, r1
  403fae:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403fb0:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  403fb6:	6153      	str	r3, [r2, #20]
  403fb8:	e03e      	b.n	404038 <board_init+0x35c>
  403fba:	bf00      	nop
  403fbc:	400e1850 	.word	0x400e1850
  403fc0:	003fffff 	.word	0x003fffff
  403fc4:	00404075 	.word	0x00404075
  403fc8:	01000001 	.word	0x01000001
  403fcc:	00404069 	.word	0x00404069
  403fd0:	001fffff 	.word	0x001fffff
  403fd4:	06230001 	.word	0x06230001
  403fd8:	00400012 	.word	0x00400012
  403fdc:	20000013 	.word	0x20000013
  403fe0:	0003ffff 	.word	0x0003ffff
  403fe4:	20400014 	.word	0x20400014
  403fe8:	0001ffff 	.word	0x0001ffff
  403fec:	20440015 	.word	0x20440015
  403ff0:	13010001 	.word	0x13010001
  403ff4:	40000016 	.word	0x40000016
  403ff8:	03000001 	.word	0x03000001
  403ffc:	60000017 	.word	0x60000017
  404000:	03250001 	.word	0x03250001
  404004:	70000018 	.word	0x70000018
  404008:	80000019 	.word	0x80000019
  40400c:	000fffff 	.word	0x000fffff
  404010:	a010001a 	.word	0xa010001a
  404014:	e000ed00 	.word	0xe000ed00
  404018:	0040405d 	.word	0x0040405d
  40401c:	400e0c00 	.word	0x400e0c00
  404020:	5a00080c 	.word	0x5a00080c
  404024:	004045d5 	.word	0x004045d5
  404028:	400e1200 	.word	0x400e1200
  40402c:	400e0e00 	.word	0x400e0e00
  404030:	40088000 	.word	0x40088000
  404034:	400e1000 	.word	0x400e1000
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404038:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40403c:	6653      	str	r3, [r2, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40403e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  404042:	6553      	str	r3, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  404044:	6253      	str	r3, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  404046:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40404a:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40404c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  404050:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  404052:	6f53      	ldr	r3, [r2, #116]	; 0x74
  404054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  404058:	6753      	str	r3, [r2, #116]	; 0x74
  40405a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040405c <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  40405c:	4b01      	ldr	r3, [pc, #4]	; (404064 <mpu_enable+0x8>)
  40405e:	6058      	str	r0, [r3, #4]
  404060:	4770      	bx	lr
  404062:	bf00      	nop
  404064:	e000ed90 	.word	0xe000ed90

00404068 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  404068:	4b01      	ldr	r3, [pc, #4]	; (404070 <mpu_set_region+0x8>)
  40406a:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  40406c:	6119      	str	r1, [r3, #16]
  40406e:	4770      	bx	lr
  404070:	e000ed90 	.word	0xe000ed90

00404074 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  404074:	2820      	cmp	r0, #32
  404076:	d908      	bls.n	40408a <mpu_cal_mpu_region_size+0x16>
  404078:	2304      	movs	r3, #4
  40407a:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  40407c:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  40407e:	0052      	lsls	r2, r2, #1
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  404080:	4290      	cmp	r0, r2
  404082:	d903      	bls.n	40408c <mpu_cal_mpu_region_size+0x18>
  404084:	2b1e      	cmp	r3, #30
  404086:	d9f9      	bls.n	40407c <mpu_cal_mpu_region_size+0x8>
  404088:	e000      	b.n	40408c <mpu_cal_mpu_region_size+0x18>
 * \brief Calculate region size for the RASR.
 */
uint32_t mpu_cal_mpu_region_size(uint32_t dw_actual_size_in_bytes)
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;
  40408a:	2304      	movs	r3, #4
		}
		dwRegionSize <<= 1;
	}

	return ( dwReturnValue << 1 );
}
  40408c:	0058      	lsls	r0, r3, #1
  40408e:	4770      	bx	lr

00404090 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404090:	b10a      	cbz	r2, 404096 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  404092:	6641      	str	r1, [r0, #100]	; 0x64
  404094:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404096:	6601      	str	r1, [r0, #96]	; 0x60
  404098:	4770      	bx	lr
  40409a:	bf00      	nop

0040409c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40409c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40409e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4040a2:	d02f      	beq.n	404104 <pio_set_peripheral+0x68>
  4040a4:	d807      	bhi.n	4040b6 <pio_set_peripheral+0x1a>
  4040a6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4040aa:	d014      	beq.n	4040d6 <pio_set_peripheral+0x3a>
  4040ac:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4040b0:	d01e      	beq.n	4040f0 <pio_set_peripheral+0x54>
  4040b2:	b939      	cbnz	r1, 4040c4 <pio_set_peripheral+0x28>
  4040b4:	4770      	bx	lr
  4040b6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4040ba:	d037      	beq.n	40412c <pio_set_peripheral+0x90>
  4040bc:	d804      	bhi.n	4040c8 <pio_set_peripheral+0x2c>
  4040be:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4040c2:	d029      	beq.n	404118 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4040c4:	6042      	str	r2, [r0, #4]
  4040c6:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4040c8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4040cc:	d02e      	beq.n	40412c <pio_set_peripheral+0x90>
  4040ce:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4040d2:	d02b      	beq.n	40412c <pio_set_peripheral+0x90>
  4040d4:	e7f6      	b.n	4040c4 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4040d6:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4040d8:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4040da:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4040dc:	43d3      	mvns	r3, r2
  4040de:	4021      	ands	r1, r4
  4040e0:	4019      	ands	r1, r3
  4040e2:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4040e4:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4040e6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4040e8:	4021      	ands	r1, r4
  4040ea:	400b      	ands	r3, r1
  4040ec:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4040ee:	e01a      	b.n	404126 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4040f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4040f2:	4313      	orrs	r3, r2
  4040f4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4040f6:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4040f8:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4040fa:	400b      	ands	r3, r1
  4040fc:	ea23 0302 	bic.w	r3, r3, r2
  404100:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404102:	e7df      	b.n	4040c4 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404104:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404106:	6f03      	ldr	r3, [r0, #112]	; 0x70
  404108:	400b      	ands	r3, r1
  40410a:	ea23 0302 	bic.w	r3, r3, r2
  40410e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404110:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404112:	4313      	orrs	r3, r2
  404114:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404116:	e7d5      	b.n	4040c4 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404118:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40411a:	4313      	orrs	r3, r2
  40411c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40411e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404120:	4313      	orrs	r3, r2
  404122:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404124:	e7ce      	b.n	4040c4 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404126:	6042      	str	r2, [r0, #4]
}
  404128:	f85d 4b04 	ldr.w	r4, [sp], #4
  40412c:	4770      	bx	lr
  40412e:	bf00      	nop

00404130 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404130:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404132:	f012 0f01 	tst.w	r2, #1
  404136:	d001      	beq.n	40413c <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  404138:	6641      	str	r1, [r0, #100]	; 0x64
  40413a:	e000      	b.n	40413e <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40413c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40413e:	f012 0f0a 	tst.w	r2, #10
  404142:	d001      	beq.n	404148 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  404144:	6201      	str	r1, [r0, #32]
  404146:	e000      	b.n	40414a <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  404148:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40414a:	f012 0f02 	tst.w	r2, #2
  40414e:	d002      	beq.n	404156 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  404150:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  404154:	e004      	b.n	404160 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  404156:	f012 0f08 	tst.w	r2, #8
  40415a:	d001      	beq.n	404160 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40415c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  404160:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404162:	6001      	str	r1, [r0, #0]
  404164:	4770      	bx	lr
  404166:	bf00      	nop

00404168 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  404168:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40416a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40416c:	9c01      	ldr	r4, [sp, #4]
  40416e:	b10c      	cbz	r4, 404174 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  404170:	6641      	str	r1, [r0, #100]	; 0x64
  404172:	e000      	b.n	404176 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404174:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  404176:	b10b      	cbz	r3, 40417c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  404178:	6501      	str	r1, [r0, #80]	; 0x50
  40417a:	e000      	b.n	40417e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40417c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40417e:	b10a      	cbz	r2, 404184 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  404180:	6301      	str	r1, [r0, #48]	; 0x30
  404182:	e000      	b.n	404186 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  404184:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  404186:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  404188:	6001      	str	r1, [r0, #0]
}
  40418a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40418e:	4770      	bx	lr

00404190 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  404190:	f012 0f10 	tst.w	r2, #16
  404194:	d012      	beq.n	4041bc <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  404196:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40419a:	f012 0f20 	tst.w	r2, #32
  40419e:	d002      	beq.n	4041a6 <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4041a0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  4041a4:	e001      	b.n	4041aa <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4041a6:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4041aa:	f012 0f40 	tst.w	r2, #64	; 0x40
  4041ae:	d002      	beq.n	4041b6 <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4041b0:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4041b4:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4041b6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4041ba:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4041bc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4041c0:	4770      	bx	lr
  4041c2:	bf00      	nop

004041c4 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  4041c4:	6401      	str	r1, [r0, #64]	; 0x40
  4041c6:	4770      	bx	lr

004041c8 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4041c8:	6441      	str	r1, [r0, #68]	; 0x44
  4041ca:	4770      	bx	lr

004041cc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4041cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4041ce:	4770      	bx	lr

004041d0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4041d0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4041d2:	4770      	bx	lr

004041d4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4041d4:	b570      	push	{r4, r5, r6, lr}
  4041d6:	b082      	sub	sp, #8
  4041d8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4041da:	4c47      	ldr	r4, [pc, #284]	; (4042f8 <pio_configure_pin+0x124>)
  4041dc:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4041e0:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4041e2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4041e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4041ea:	d04d      	beq.n	404288 <pio_configure_pin+0xb4>
  4041ec:	d809      	bhi.n	404202 <pio_configure_pin+0x2e>
  4041ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4041f2:	d023      	beq.n	40423c <pio_configure_pin+0x68>
  4041f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4041f8:	d033      	beq.n	404262 <pio_configure_pin+0x8e>
  4041fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4041fe:	d177      	bne.n	4042f0 <pio_configure_pin+0x11c>
  404200:	e009      	b.n	404216 <pio_configure_pin+0x42>
  404202:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404206:	d05d      	beq.n	4042c4 <pio_configure_pin+0xf0>
  404208:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40420c:	d05a      	beq.n	4042c4 <pio_configure_pin+0xf0>
  40420e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404212:	d04c      	beq.n	4042ae <pio_configure_pin+0xda>
  404214:	e06c      	b.n	4042f0 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  404216:	f000 001f 	and.w	r0, r0, #31
  40421a:	2601      	movs	r6, #1
  40421c:	4086      	lsls	r6, r0
  40421e:	4632      	mov	r2, r6
  404220:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404224:	4620      	mov	r0, r4
  404226:	4b35      	ldr	r3, [pc, #212]	; (4042fc <pio_configure_pin+0x128>)
  404228:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40422a:	f015 0f01 	tst.w	r5, #1
  40422e:	d002      	beq.n	404236 <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  404230:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  404232:	2001      	movs	r0, #1
  404234:	e05d      	b.n	4042f2 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404236:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  404238:	2001      	movs	r0, #1
  40423a:	e05a      	b.n	4042f2 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40423c:	f000 001f 	and.w	r0, r0, #31
  404240:	2601      	movs	r6, #1
  404242:	4086      	lsls	r6, r0
  404244:	4632      	mov	r2, r6
  404246:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40424a:	4620      	mov	r0, r4
  40424c:	4b2b      	ldr	r3, [pc, #172]	; (4042fc <pio_configure_pin+0x128>)
  40424e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404250:	f015 0f01 	tst.w	r5, #1
  404254:	d002      	beq.n	40425c <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  404256:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  404258:	2001      	movs	r0, #1
  40425a:	e04a      	b.n	4042f2 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40425c:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40425e:	2001      	movs	r0, #1
  404260:	e047      	b.n	4042f2 <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  404262:	f000 001f 	and.w	r0, r0, #31
  404266:	2601      	movs	r6, #1
  404268:	4086      	lsls	r6, r0
  40426a:	4632      	mov	r2, r6
  40426c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404270:	4620      	mov	r0, r4
  404272:	4b22      	ldr	r3, [pc, #136]	; (4042fc <pio_configure_pin+0x128>)
  404274:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404276:	f015 0f01 	tst.w	r5, #1
  40427a:	d002      	beq.n	404282 <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  40427c:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  40427e:	2001      	movs	r0, #1
  404280:	e037      	b.n	4042f2 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404282:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  404284:	2001      	movs	r0, #1
  404286:	e034      	b.n	4042f2 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404288:	f000 001f 	and.w	r0, r0, #31
  40428c:	2601      	movs	r6, #1
  40428e:	4086      	lsls	r6, r0
  404290:	4632      	mov	r2, r6
  404292:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404296:	4620      	mov	r0, r4
  404298:	4b18      	ldr	r3, [pc, #96]	; (4042fc <pio_configure_pin+0x128>)
  40429a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40429c:	f015 0f01 	tst.w	r5, #1
  4042a0:	d002      	beq.n	4042a8 <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  4042a2:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4042a4:	2001      	movs	r0, #1
  4042a6:	e024      	b.n	4042f2 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4042a8:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4042aa:	2001      	movs	r0, #1
  4042ac:	e021      	b.n	4042f2 <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4042ae:	f000 011f 	and.w	r1, r0, #31
  4042b2:	2601      	movs	r6, #1
  4042b4:	462a      	mov	r2, r5
  4042b6:	fa06 f101 	lsl.w	r1, r6, r1
  4042ba:	4620      	mov	r0, r4
  4042bc:	4b10      	ldr	r3, [pc, #64]	; (404300 <pio_configure_pin+0x12c>)
  4042be:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4042c0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4042c2:	e016      	b.n	4042f2 <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4042c4:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4042c8:	f000 011f 	and.w	r1, r0, #31
  4042cc:	2601      	movs	r6, #1
  4042ce:	ea05 0306 	and.w	r3, r5, r6
  4042d2:	9300      	str	r3, [sp, #0]
  4042d4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4042d8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4042dc:	bf14      	ite	ne
  4042de:	2200      	movne	r2, #0
  4042e0:	2201      	moveq	r2, #1
  4042e2:	fa06 f101 	lsl.w	r1, r6, r1
  4042e6:	4620      	mov	r0, r4
  4042e8:	4c06      	ldr	r4, [pc, #24]	; (404304 <pio_configure_pin+0x130>)
  4042ea:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4042ec:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4042ee:	e000      	b.n	4042f2 <pio_configure_pin+0x11e>

	default:
		return 0;
  4042f0:	2000      	movs	r0, #0
	}

	return 1;
}
  4042f2:	b002      	add	sp, #8
  4042f4:	bd70      	pop	{r4, r5, r6, pc}
  4042f6:	bf00      	nop
  4042f8:	00200707 	.word	0x00200707
  4042fc:	0040409d 	.word	0x0040409d
  404300:	00404131 	.word	0x00404131
  404304:	00404169 	.word	0x00404169

00404308 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40430c:	4604      	mov	r4, r0
  40430e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404310:	4b0e      	ldr	r3, [pc, #56]	; (40434c <pio_handler_process+0x44>)
  404312:	4798      	blx	r3
  404314:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  404316:	4620      	mov	r0, r4
  404318:	4b0d      	ldr	r3, [pc, #52]	; (404350 <pio_handler_process+0x48>)
  40431a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40431c:	4005      	ands	r5, r0
  40431e:	d013      	beq.n	404348 <pio_handler_process+0x40>
  404320:	4c0c      	ldr	r4, [pc, #48]	; (404354 <pio_handler_process+0x4c>)
  404322:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  404326:	6823      	ldr	r3, [r4, #0]
  404328:	4543      	cmp	r3, r8
  40432a:	d108      	bne.n	40433e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40432c:	6861      	ldr	r1, [r4, #4]
  40432e:	4229      	tst	r1, r5
  404330:	d005      	beq.n	40433e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404332:	68e3      	ldr	r3, [r4, #12]
  404334:	4640      	mov	r0, r8
  404336:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  404338:	6863      	ldr	r3, [r4, #4]
  40433a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40433e:	42b4      	cmp	r4, r6
  404340:	d002      	beq.n	404348 <pio_handler_process+0x40>
  404342:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  404344:	2d00      	cmp	r5, #0
  404346:	d1ee      	bne.n	404326 <pio_handler_process+0x1e>
  404348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40434c:	004041cd 	.word	0x004041cd
  404350:	004041d1 	.word	0x004041d1
  404354:	20400920 	.word	0x20400920

00404358 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40435a:	4c17      	ldr	r4, [pc, #92]	; (4043b8 <pio_handler_set+0x60>)
  40435c:	6826      	ldr	r6, [r4, #0]
  40435e:	2e06      	cmp	r6, #6
  404360:	d828      	bhi.n	4043b4 <pio_handler_set+0x5c>
  404362:	f04f 0c00 	mov.w	ip, #0
  404366:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404368:	4f14      	ldr	r7, [pc, #80]	; (4043bc <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  40436a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40436c:	0125      	lsls	r5, r4, #4
  40436e:	597d      	ldr	r5, [r7, r5]
  404370:	428d      	cmp	r5, r1
  404372:	d104      	bne.n	40437e <pio_handler_set+0x26>
  404374:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  404378:	686d      	ldr	r5, [r5, #4]
  40437a:	4295      	cmp	r5, r2
  40437c:	d004      	beq.n	404388 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40437e:	3401      	adds	r4, #1
  404380:	b2e4      	uxtb	r4, r4
  404382:	46a4      	mov	ip, r4
  404384:	42a6      	cmp	r6, r4
  404386:	d2f0      	bcs.n	40436a <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  404388:	4d0c      	ldr	r5, [pc, #48]	; (4043bc <pio_handler_set+0x64>)
  40438a:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40438e:	eb05 040e 	add.w	r4, r5, lr
  404392:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  404396:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  404398:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40439a:	9906      	ldr	r1, [sp, #24]
  40439c:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  40439e:	3601      	adds	r6, #1
  4043a0:	4566      	cmp	r6, ip
  4043a2:	d101      	bne.n	4043a8 <pio_handler_set+0x50>
		gs_ul_nb_sources++;
  4043a4:	4904      	ldr	r1, [pc, #16]	; (4043b8 <pio_handler_set+0x60>)
  4043a6:	600e      	str	r6, [r1, #0]
  4043a8:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4043aa:	461a      	mov	r2, r3
  4043ac:	4b04      	ldr	r3, [pc, #16]	; (4043c0 <pio_handler_set+0x68>)
  4043ae:	4798      	blx	r3

	return 0;
  4043b0:	2000      	movs	r0, #0
  4043b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4043b4:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4043b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043b8:	2040091c 	.word	0x2040091c
  4043bc:	20400920 	.word	0x20400920
  4043c0:	00404191 	.word	0x00404191

004043c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4043c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4043c6:	210a      	movs	r1, #10
  4043c8:	4801      	ldr	r0, [pc, #4]	; (4043d0 <PIOA_Handler+0xc>)
  4043ca:	4b02      	ldr	r3, [pc, #8]	; (4043d4 <PIOA_Handler+0x10>)
  4043cc:	4798      	blx	r3
  4043ce:	bd08      	pop	{r3, pc}
  4043d0:	400e0e00 	.word	0x400e0e00
  4043d4:	00404309 	.word	0x00404309

004043d8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4043d8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4043da:	210b      	movs	r1, #11
  4043dc:	4801      	ldr	r0, [pc, #4]	; (4043e4 <PIOB_Handler+0xc>)
  4043de:	4b02      	ldr	r3, [pc, #8]	; (4043e8 <PIOB_Handler+0x10>)
  4043e0:	4798      	blx	r3
  4043e2:	bd08      	pop	{r3, pc}
  4043e4:	400e1000 	.word	0x400e1000
  4043e8:	00404309 	.word	0x00404309

004043ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4043ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4043ee:	210c      	movs	r1, #12
  4043f0:	4801      	ldr	r0, [pc, #4]	; (4043f8 <PIOC_Handler+0xc>)
  4043f2:	4b02      	ldr	r3, [pc, #8]	; (4043fc <PIOC_Handler+0x10>)
  4043f4:	4798      	blx	r3
  4043f6:	bd08      	pop	{r3, pc}
  4043f8:	400e1200 	.word	0x400e1200
  4043fc:	00404309 	.word	0x00404309

00404400 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  404400:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  404402:	2110      	movs	r1, #16
  404404:	4801      	ldr	r0, [pc, #4]	; (40440c <PIOD_Handler+0xc>)
  404406:	4b02      	ldr	r3, [pc, #8]	; (404410 <PIOD_Handler+0x10>)
  404408:	4798      	blx	r3
  40440a:	bd08      	pop	{r3, pc}
  40440c:	400e1400 	.word	0x400e1400
  404410:	00404309 	.word	0x00404309

00404414 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  404414:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  404416:	2111      	movs	r1, #17
  404418:	4801      	ldr	r0, [pc, #4]	; (404420 <PIOE_Handler+0xc>)
  40441a:	4b02      	ldr	r3, [pc, #8]	; (404424 <PIOE_Handler+0x10>)
  40441c:	4798      	blx	r3
  40441e:	bd08      	pop	{r3, pc}
  404420:	400e1600 	.word	0x400e1600
  404424:	00404309 	.word	0x00404309

00404428 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40442a:	4606      	mov	r6, r0
  40442c:	460d      	mov	r5, r1
  40442e:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  404430:	4b17      	ldr	r3, [pc, #92]	; (404490 <pio_handler_set_priority+0x68>)
  404432:	4798      	blx	r3
  404434:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  404436:	f04f 31ff 	mov.w	r1, #4294967295
  40443a:	4630      	mov	r0, r6
  40443c:	4b15      	ldr	r3, [pc, #84]	; (404494 <pio_handler_set_priority+0x6c>)
  40443e:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  404440:	4630      	mov	r0, r6
  404442:	4b15      	ldr	r3, [pc, #84]	; (404498 <pio_handler_set_priority+0x70>)
  404444:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  404446:	fa5f fe85 	uxtb.w	lr, r5
  40444a:	f00e 031f 	and.w	r3, lr, #31
  40444e:	2201      	movs	r2, #1
  404450:	fa02 f303 	lsl.w	r3, r2, r3
  404454:	0968      	lsrs	r0, r5, #5
  404456:	4911      	ldr	r1, [pc, #68]	; (40449c <pio_handler_set_priority+0x74>)
  404458:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  40445c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404460:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  404464:	2d00      	cmp	r5, #0
  404466:	da07      	bge.n	404478 <pio_handler_set_priority+0x50>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404468:	f00e 0e0f 	and.w	lr, lr, #15
  40446c:	0164      	lsls	r4, r4, #5
  40446e:	b2e4      	uxtb	r4, r4
  404470:	4a0b      	ldr	r2, [pc, #44]	; (4044a0 <pio_handler_set_priority+0x78>)
  404472:	f802 400e 	strb.w	r4, [r2, lr]
  404476:	e003      	b.n	404480 <pio_handler_set_priority+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404478:	0164      	lsls	r4, r4, #5
  40447a:	b2e4      	uxtb	r4, r4
  40447c:	4a09      	ldr	r2, [pc, #36]	; (4044a4 <pio_handler_set_priority+0x7c>)
  40447e:	5554      	strb	r4, [r2, r5]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404480:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  404484:	4639      	mov	r1, r7
  404486:	4630      	mov	r0, r6
  404488:	4b07      	ldr	r3, [pc, #28]	; (4044a8 <pio_handler_set_priority+0x80>)
  40448a:	4798      	blx	r3
  40448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40448e:	bf00      	nop
  404490:	004041d1 	.word	0x004041d1
  404494:	004041c9 	.word	0x004041c9
  404498:	004041cd 	.word	0x004041cd
  40449c:	e000e100 	.word	0xe000e100
  4044a0:	e000ed14 	.word	0xe000ed14
  4044a4:	e000e400 	.word	0xe000e400
  4044a8:	004041c5 	.word	0x004041c5

004044ac <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4044ac:	2803      	cmp	r0, #3
  4044ae:	d007      	beq.n	4044c0 <pmc_mck_set_division+0x14>
  4044b0:	2804      	cmp	r0, #4
  4044b2:	d008      	beq.n	4044c6 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4044b4:	2802      	cmp	r0, #2
  4044b6:	bf0c      	ite	eq
  4044b8:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4044bc:	2200      	movne	r2, #0
  4044be:	e004      	b.n	4044ca <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4044c0:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  4044c4:	e001      	b.n	4044ca <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4044c6:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4044ca:	4906      	ldr	r1, [pc, #24]	; (4044e4 <pmc_mck_set_division+0x38>)
  4044cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4044ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4044d2:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4044d4:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4044d6:	460a      	mov	r2, r1
  4044d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4044da:	f013 0f08 	tst.w	r3, #8
  4044de:	d0fb      	beq.n	4044d8 <pmc_mck_set_division+0x2c>
}
  4044e0:	4770      	bx	lr
  4044e2:	bf00      	nop
  4044e4:	400e0600 	.word	0x400e0600

004044e8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4044e8:	4a18      	ldr	r2, [pc, #96]	; (40454c <pmc_switch_mck_to_pllack+0x64>)
  4044ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4044ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4044f0:	4318      	orrs	r0, r3
  4044f2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4044f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4044f6:	f013 0f08 	tst.w	r3, #8
  4044fa:	d003      	beq.n	404504 <pmc_switch_mck_to_pllack+0x1c>
  4044fc:	e009      	b.n	404512 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4044fe:	3b01      	subs	r3, #1
  404500:	d103      	bne.n	40450a <pmc_switch_mck_to_pllack+0x22>
  404502:	e01e      	b.n	404542 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404508:	4910      	ldr	r1, [pc, #64]	; (40454c <pmc_switch_mck_to_pllack+0x64>)
  40450a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40450c:	f012 0f08 	tst.w	r2, #8
  404510:	d0f5      	beq.n	4044fe <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404512:	4a0e      	ldr	r2, [pc, #56]	; (40454c <pmc_switch_mck_to_pllack+0x64>)
  404514:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404516:	f023 0303 	bic.w	r3, r3, #3
  40451a:	f043 0302 	orr.w	r3, r3, #2
  40451e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404520:	6e90      	ldr	r0, [r2, #104]	; 0x68
  404522:	f010 0008 	ands.w	r0, r0, #8
  404526:	d004      	beq.n	404532 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  404528:	2000      	movs	r0, #0
  40452a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40452c:	3b01      	subs	r3, #1
  40452e:	d103      	bne.n	404538 <pmc_switch_mck_to_pllack+0x50>
  404530:	e009      	b.n	404546 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404536:	4905      	ldr	r1, [pc, #20]	; (40454c <pmc_switch_mck_to_pllack+0x64>)
  404538:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40453a:	f012 0f08 	tst.w	r2, #8
  40453e:	d0f5      	beq.n	40452c <pmc_switch_mck_to_pllack+0x44>
  404540:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  404542:	2001      	movs	r0, #1
  404544:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  404546:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404548:	4770      	bx	lr
  40454a:	bf00      	nop
  40454c:	400e0600 	.word	0x400e0600

00404550 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  404550:	b138      	cbz	r0, 404562 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404552:	490e      	ldr	r1, [pc, #56]	; (40458c <pmc_switch_mainck_to_xtal+0x3c>)
  404554:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  404556:	4a0e      	ldr	r2, [pc, #56]	; (404590 <pmc_switch_mainck_to_xtal+0x40>)
  404558:	401a      	ands	r2, r3
  40455a:	4b0e      	ldr	r3, [pc, #56]	; (404594 <pmc_switch_mainck_to_xtal+0x44>)
  40455c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40455e:	620b      	str	r3, [r1, #32]
  404560:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404562:	480a      	ldr	r0, [pc, #40]	; (40458c <pmc_switch_mainck_to_xtal+0x3c>)
  404564:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404566:	0209      	lsls	r1, r1, #8
  404568:	b289      	uxth	r1, r1
  40456a:	4a0b      	ldr	r2, [pc, #44]	; (404598 <pmc_switch_mainck_to_xtal+0x48>)
  40456c:	401a      	ands	r2, r3
  40456e:	4b0b      	ldr	r3, [pc, #44]	; (40459c <pmc_switch_mainck_to_xtal+0x4c>)
  404570:	4313      	orrs	r3, r2
  404572:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404574:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  404576:	4602      	mov	r2, r0
  404578:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40457a:	f013 0f01 	tst.w	r3, #1
  40457e:	d0fb      	beq.n	404578 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404580:	4a02      	ldr	r2, [pc, #8]	; (40458c <pmc_switch_mainck_to_xtal+0x3c>)
  404582:	6a11      	ldr	r1, [r2, #32]
  404584:	4b06      	ldr	r3, [pc, #24]	; (4045a0 <pmc_switch_mainck_to_xtal+0x50>)
  404586:	430b      	orrs	r3, r1
  404588:	6213      	str	r3, [r2, #32]
  40458a:	4770      	bx	lr
  40458c:	400e0600 	.word	0x400e0600
  404590:	fec8fffc 	.word	0xfec8fffc
  404594:	01370002 	.word	0x01370002
  404598:	ffc8fffc 	.word	0xffc8fffc
  40459c:	00370001 	.word	0x00370001
  4045a0:	01370000 	.word	0x01370000

004045a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4045a4:	4b02      	ldr	r3, [pc, #8]	; (4045b0 <pmc_osc_is_ready_mainck+0xc>)
  4045a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4045a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4045ac:	4770      	bx	lr
  4045ae:	bf00      	nop
  4045b0:	400e0600 	.word	0x400e0600

004045b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4045b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4045b8:	4b01      	ldr	r3, [pc, #4]	; (4045c0 <pmc_disable_pllack+0xc>)
  4045ba:	629a      	str	r2, [r3, #40]	; 0x28
  4045bc:	4770      	bx	lr
  4045be:	bf00      	nop
  4045c0:	400e0600 	.word	0x400e0600

004045c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4045c4:	4b02      	ldr	r3, [pc, #8]	; (4045d0 <pmc_is_locked_pllack+0xc>)
  4045c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4045c8:	f000 0002 	and.w	r0, r0, #2
  4045cc:	4770      	bx	lr
  4045ce:	bf00      	nop
  4045d0:	400e0600 	.word	0x400e0600

004045d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4045d4:	283f      	cmp	r0, #63	; 0x3f
  4045d6:	d81e      	bhi.n	404616 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4045d8:	281f      	cmp	r0, #31
  4045da:	d80c      	bhi.n	4045f6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4045dc:	4b11      	ldr	r3, [pc, #68]	; (404624 <pmc_enable_periph_clk+0x50>)
  4045de:	699a      	ldr	r2, [r3, #24]
  4045e0:	2301      	movs	r3, #1
  4045e2:	4083      	lsls	r3, r0
  4045e4:	4393      	bics	r3, r2
  4045e6:	d018      	beq.n	40461a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4045e8:	2301      	movs	r3, #1
  4045ea:	fa03 f000 	lsl.w	r0, r3, r0
  4045ee:	4b0d      	ldr	r3, [pc, #52]	; (404624 <pmc_enable_periph_clk+0x50>)
  4045f0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4045f2:	2000      	movs	r0, #0
  4045f4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4045f6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4045f8:	4b0a      	ldr	r3, [pc, #40]	; (404624 <pmc_enable_periph_clk+0x50>)
  4045fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4045fe:	2301      	movs	r3, #1
  404600:	4083      	lsls	r3, r0
  404602:	4393      	bics	r3, r2
  404604:	d00b      	beq.n	40461e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  404606:	2301      	movs	r3, #1
  404608:	fa03 f000 	lsl.w	r0, r3, r0
  40460c:	4b05      	ldr	r3, [pc, #20]	; (404624 <pmc_enable_periph_clk+0x50>)
  40460e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  404612:	2000      	movs	r0, #0
  404614:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  404616:	2001      	movs	r0, #1
  404618:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40461a:	2000      	movs	r0, #0
  40461c:	4770      	bx	lr
  40461e:	2000      	movs	r0, #0
}
  404620:	4770      	bx	lr
  404622:	bf00      	nop
  404624:	400e0600 	.word	0x400e0600

00404628 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  404628:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40462a:	4b07      	ldr	r3, [pc, #28]	; (404648 <spi_enable_clock+0x20>)
  40462c:	4298      	cmp	r0, r3
  40462e:	d103      	bne.n	404638 <spi_enable_clock+0x10>
  404630:	2015      	movs	r0, #21
  404632:	4b06      	ldr	r3, [pc, #24]	; (40464c <spi_enable_clock+0x24>)
  404634:	4798      	blx	r3
  404636:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  404638:	4b05      	ldr	r3, [pc, #20]	; (404650 <spi_enable_clock+0x28>)
  40463a:	4298      	cmp	r0, r3
  40463c:	d102      	bne.n	404644 <spi_enable_clock+0x1c>
  40463e:	202a      	movs	r0, #42	; 0x2a
  404640:	4b02      	ldr	r3, [pc, #8]	; (40464c <spi_enable_clock+0x24>)
  404642:	4798      	blx	r3
  404644:	bd08      	pop	{r3, pc}
  404646:	bf00      	nop
  404648:	40008000 	.word	0x40008000
  40464c:	004045d5 	.word	0x004045d5
  404650:	40058000 	.word	0x40058000

00404654 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  404654:	6843      	ldr	r3, [r0, #4]
  404656:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40465a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40465c:	6843      	ldr	r3, [r0, #4]
  40465e:	0409      	lsls	r1, r1, #16
  404660:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  404664:	430b      	orrs	r3, r1
  404666:	6043      	str	r3, [r0, #4]
  404668:	4770      	bx	lr
  40466a:	bf00      	nop

0040466c <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  40466c:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  40466e:	f643 2399 	movw	r3, #15001	; 0x3a99
  404672:	e001      	b.n	404678 <spi_read+0xc>
		if (!timeout--) {
  404674:	3b01      	subs	r3, #1
  404676:	d00e      	beq.n	404696 <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  404678:	6904      	ldr	r4, [r0, #16]
  40467a:	f014 0f01 	tst.w	r4, #1
  40467e:	d0f9      	beq.n	404674 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  404680:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  404682:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  404684:	f010 0f02 	tst.w	r0, #2
  404688:	d002      	beq.n	404690 <spi_read+0x24>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  40468a:	f3c3 4003 	ubfx	r0, r3, #16, #4
  40468e:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  404690:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  404692:	2000      	movs	r0, #0
  404694:	e000      	b.n	404698 <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  404696:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  404698:	f85d 4b04 	ldr.w	r4, [sp], #4
  40469c:	4770      	bx	lr
  40469e:	bf00      	nop

004046a0 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4046a0:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4046a2:	f643 2499 	movw	r4, #15001	; 0x3a99
  4046a6:	e001      	b.n	4046ac <spi_write+0xc>
		if (!timeout--) {
  4046a8:	3c01      	subs	r4, #1
  4046aa:	d011      	beq.n	4046d0 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4046ac:	6905      	ldr	r5, [r0, #16]
  4046ae:	f015 0f02 	tst.w	r5, #2
  4046b2:	d0f9      	beq.n	4046a8 <spi_write+0x8>
  4046b4:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4046b6:	f014 0f02 	tst.w	r4, #2
  4046ba:	d006      	beq.n	4046ca <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4046bc:	0412      	lsls	r2, r2, #16
  4046be:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4046c2:	4311      	orrs	r1, r2
		if (uc_last) {
  4046c4:	b10b      	cbz	r3, 4046ca <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  4046c6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4046ca:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4046cc:	2000      	movs	r0, #0
  4046ce:	e000      	b.n	4046d2 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  4046d0:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  4046d2:	bc30      	pop	{r4, r5}
  4046d4:	4770      	bx	lr
  4046d6:	bf00      	nop

004046d8 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4046d8:	b132      	cbz	r2, 4046e8 <spi_set_clock_polarity+0x10>
  4046da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4046de:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4046e0:	f043 0301 	orr.w	r3, r3, #1
  4046e4:	6303      	str	r3, [r0, #48]	; 0x30
  4046e6:	4770      	bx	lr
  4046e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4046ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4046ee:	f023 0301 	bic.w	r3, r3, #1
  4046f2:	6303      	str	r3, [r0, #48]	; 0x30
  4046f4:	4770      	bx	lr
  4046f6:	bf00      	nop

004046f8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4046f8:	b132      	cbz	r2, 404708 <spi_set_clock_phase+0x10>
  4046fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4046fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404700:	f043 0302 	orr.w	r3, r3, #2
  404704:	6303      	str	r3, [r0, #48]	; 0x30
  404706:	4770      	bx	lr
  404708:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40470c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40470e:	f023 0302 	bic.w	r3, r3, #2
  404712:	6303      	str	r3, [r0, #48]	; 0x30
  404714:	4770      	bx	lr
  404716:	bf00      	nop

00404718 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  404718:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40471c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40471e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  404722:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  404724:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404726:	431a      	orrs	r2, r3
  404728:	630a      	str	r2, [r1, #48]	; 0x30
  40472a:	4770      	bx	lr

0040472c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40472c:	1e43      	subs	r3, r0, #1
  40472e:	4419      	add	r1, r3
  404730:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  404734:	1e43      	subs	r3, r0, #1
  404736:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  404738:	bf94      	ite	ls
  40473a:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  40473c:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  404740:	4770      	bx	lr
  404742:	bf00      	nop

00404744 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  404744:	b16a      	cbz	r2, 404762 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  404746:	b410      	push	{r4}
  404748:	4614      	mov	r4, r2
  40474a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40474e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  404754:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  404756:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  404758:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40475c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40475e:	2000      	movs	r0, #0
  404760:	e002      	b.n	404768 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  404762:	f04f 30ff 	mov.w	r0, #4294967295
  404766:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  404768:	f85d 4b04 	ldr.w	r4, [sp], #4
  40476c:	4770      	bx	lr
  40476e:	bf00      	nop

00404770 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  404770:	b410      	push	{r4}
  404772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  404776:	6b08      	ldr	r0, [r1, #48]	; 0x30
  404778:	b280      	uxth	r0, r0
  40477a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40477c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40477e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  404782:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  404786:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  404788:	f85d 4b04 	ldr.w	r4, [sp], #4
  40478c:	4770      	bx	lr
  40478e:	bf00      	nop

00404790 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  404790:	6943      	ldr	r3, [r0, #20]
  404792:	f013 0f02 	tst.w	r3, #2
  404796:	d002      	beq.n	40479e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  404798:	61c1      	str	r1, [r0, #28]
	return 0;
  40479a:	2000      	movs	r0, #0
  40479c:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  40479e:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4047a0:	4770      	bx	lr
  4047a2:	bf00      	nop

004047a4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4047a4:	6943      	ldr	r3, [r0, #20]
  4047a6:	f013 0f01 	tst.w	r3, #1
  4047aa:	d003      	beq.n	4047b4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4047ac:	6983      	ldr	r3, [r0, #24]
  4047ae:	700b      	strb	r3, [r1, #0]
	return 0;
  4047b0:	2000      	movs	r0, #0
  4047b2:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4047b4:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4047b6:	4770      	bx	lr

004047b8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4047b8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4047ba:	010c      	lsls	r4, r1, #4
  4047bc:	4294      	cmp	r4, r2
  4047be:	d90f      	bls.n	4047e0 <usart_set_async_baudrate+0x28>
  4047c0:	e01a      	b.n	4047f8 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4047c2:	6841      	ldr	r1, [r0, #4]
  4047c4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4047c8:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4047ca:	0412      	lsls	r2, r2, #16
  4047cc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4047d0:	431a      	orrs	r2, r3
  4047d2:	6202      	str	r2, [r0, #32]

	return 0;
  4047d4:	2000      	movs	r0, #0
  4047d6:	e01c      	b.n	404812 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  4047d8:	2001      	movs	r0, #1
  4047da:	e01a      	b.n	404812 <usart_set_async_baudrate+0x5a>
  4047dc:	2001      	movs	r0, #1
  4047de:	e018      	b.n	404812 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4047e0:	0863      	lsrs	r3, r4, #1
  4047e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4047e6:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  4047ea:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4047ec:	1e5c      	subs	r4, r3, #1
  4047ee:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4047f2:	428c      	cmp	r4, r1
  4047f4:	d9e9      	bls.n	4047ca <usart_set_async_baudrate+0x12>
  4047f6:	e7ef      	b.n	4047d8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4047f8:	00c9      	lsls	r1, r1, #3
  4047fa:	084b      	lsrs	r3, r1, #1
  4047fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  404800:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  404804:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  404806:	1e5c      	subs	r4, r3, #1
  404808:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40480c:	428c      	cmp	r4, r1
  40480e:	d8e5      	bhi.n	4047dc <usart_set_async_baudrate+0x24>
  404810:	e7d7      	b.n	4047c2 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  404812:	f85d 4b04 	ldr.w	r4, [sp], #4
  404816:	4770      	bx	lr

00404818 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  404818:	4b08      	ldr	r3, [pc, #32]	; (40483c <usart_reset+0x24>)
  40481a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40481e:	2300      	movs	r3, #0
  404820:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  404822:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  404824:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  404826:	2388      	movs	r3, #136	; 0x88
  404828:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40482a:	2324      	movs	r3, #36	; 0x24
  40482c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  40482e:	f44f 7380 	mov.w	r3, #256	; 0x100
  404832:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  404834:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  404838:	6003      	str	r3, [r0, #0]
  40483a:	4770      	bx	lr
  40483c:	55534100 	.word	0x55534100

00404840 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  404840:	b570      	push	{r4, r5, r6, lr}
  404842:	4605      	mov	r5, r0
  404844:	460c      	mov	r4, r1
  404846:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  404848:	4b0f      	ldr	r3, [pc, #60]	; (404888 <usart_init_rs232+0x48>)
  40484a:	4798      	blx	r3

	ul_reg_val = 0;
  40484c:	2200      	movs	r2, #0
  40484e:	4b0f      	ldr	r3, [pc, #60]	; (40488c <usart_init_rs232+0x4c>)
  404850:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  404852:	b19c      	cbz	r4, 40487c <usart_init_rs232+0x3c>
  404854:	4632      	mov	r2, r6
  404856:	6821      	ldr	r1, [r4, #0]
  404858:	4628      	mov	r0, r5
  40485a:	4b0d      	ldr	r3, [pc, #52]	; (404890 <usart_init_rs232+0x50>)
  40485c:	4798      	blx	r3
  40485e:	4602      	mov	r2, r0
  404860:	b970      	cbnz	r0, 404880 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  404862:	6861      	ldr	r1, [r4, #4]
  404864:	68a3      	ldr	r3, [r4, #8]
  404866:	4319      	orrs	r1, r3
  404868:	6923      	ldr	r3, [r4, #16]
  40486a:	4319      	orrs	r1, r3
  40486c:	68e3      	ldr	r3, [r4, #12]
  40486e:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404870:	4906      	ldr	r1, [pc, #24]	; (40488c <usart_init_rs232+0x4c>)
  404872:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  404874:	6869      	ldr	r1, [r5, #4]
  404876:	430b      	orrs	r3, r1
  404878:	606b      	str	r3, [r5, #4]

	return 0;
  40487a:	e002      	b.n	404882 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40487c:	2201      	movs	r2, #1
  40487e:	e000      	b.n	404882 <usart_init_rs232+0x42>
  404880:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  404882:	4610      	mov	r0, r2
  404884:	bd70      	pop	{r4, r5, r6, pc}
  404886:	bf00      	nop
  404888:	00404819 	.word	0x00404819
  40488c:	20400990 	.word	0x20400990
  404890:	004047b9 	.word	0x004047b9

00404894 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  404894:	2340      	movs	r3, #64	; 0x40
  404896:	6003      	str	r3, [r0, #0]
  404898:	4770      	bx	lr
  40489a:	bf00      	nop

0040489c <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  40489c:	2310      	movs	r3, #16
  40489e:	6003      	str	r3, [r0, #0]
  4048a0:	4770      	bx	lr
  4048a2:	bf00      	nop

004048a4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4048a4:	6943      	ldr	r3, [r0, #20]
  4048a6:	f013 0f02 	tst.w	r3, #2
  4048aa:	d004      	beq.n	4048b6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4048ac:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4048b0:	61c1      	str	r1, [r0, #28]
	return 0;
  4048b2:	2000      	movs	r0, #0
  4048b4:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4048b6:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4048b8:	4770      	bx	lr
  4048ba:	bf00      	nop

004048bc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4048bc:	6943      	ldr	r3, [r0, #20]
  4048be:	f013 0f01 	tst.w	r3, #1
  4048c2:	d005      	beq.n	4048d0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4048c4:	6983      	ldr	r3, [r0, #24]
  4048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4048ca:	600b      	str	r3, [r1, #0]

	return 0;
  4048cc:	2000      	movs	r0, #0
  4048ce:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4048d0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4048d2:	4770      	bx	lr

004048d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4048d4:	e7fe      	b.n	4048d4 <Dummy_Handler>
  4048d6:	bf00      	nop

004048d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4048d8:	b500      	push	{lr}
  4048da:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  4048dc:	4b27      	ldr	r3, [pc, #156]	; (40497c <Reset_Handler+0xa4>)
  4048de:	4a28      	ldr	r2, [pc, #160]	; (404980 <Reset_Handler+0xa8>)
  4048e0:	429a      	cmp	r2, r3
  4048e2:	d003      	beq.n	4048ec <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  4048e4:	4b27      	ldr	r3, [pc, #156]	; (404984 <Reset_Handler+0xac>)
  4048e6:	4a25      	ldr	r2, [pc, #148]	; (40497c <Reset_Handler+0xa4>)
  4048e8:	429a      	cmp	r2, r3
  4048ea:	d304      	bcc.n	4048f6 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4048ec:	4b26      	ldr	r3, [pc, #152]	; (404988 <Reset_Handler+0xb0>)
  4048ee:	4a27      	ldr	r2, [pc, #156]	; (40498c <Reset_Handler+0xb4>)
  4048f0:	429a      	cmp	r2, r3
  4048f2:	d30f      	bcc.n	404914 <Reset_Handler+0x3c>
  4048f4:	e01a      	b.n	40492c <Reset_Handler+0x54>
  4048f6:	4921      	ldr	r1, [pc, #132]	; (40497c <Reset_Handler+0xa4>)
  4048f8:	4b25      	ldr	r3, [pc, #148]	; (404990 <Reset_Handler+0xb8>)
  4048fa:	1a5b      	subs	r3, r3, r1
  4048fc:	f023 0303 	bic.w	r3, r3, #3
  404900:	3304      	adds	r3, #4
  404902:	4a1f      	ldr	r2, [pc, #124]	; (404980 <Reset_Handler+0xa8>)
  404904:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  404906:	f852 0b04 	ldr.w	r0, [r2], #4
  40490a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40490e:	429a      	cmp	r2, r3
  404910:	d1f9      	bne.n	404906 <Reset_Handler+0x2e>
  404912:	e7eb      	b.n	4048ec <Reset_Handler+0x14>
  404914:	4b1f      	ldr	r3, [pc, #124]	; (404994 <Reset_Handler+0xbc>)
  404916:	4a20      	ldr	r2, [pc, #128]	; (404998 <Reset_Handler+0xc0>)
  404918:	1ad2      	subs	r2, r2, r3
  40491a:	f022 0203 	bic.w	r2, r2, #3
  40491e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404920:	3b04      	subs	r3, #4
                *pDest++ = 0;
  404922:	2100      	movs	r1, #0
  404924:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404928:	4293      	cmp	r3, r2
  40492a:	d1fb      	bne.n	404924 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40492c:	4a1b      	ldr	r2, [pc, #108]	; (40499c <Reset_Handler+0xc4>)
  40492e:	4b1c      	ldr	r3, [pc, #112]	; (4049a0 <Reset_Handler+0xc8>)
  404930:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404934:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404936:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40493a:	fab3 f383 	clz	r3, r3
  40493e:	095b      	lsrs	r3, r3, #5
  404940:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  404942:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  404944:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404948:	2200      	movs	r2, #0
  40494a:	4b16      	ldr	r3, [pc, #88]	; (4049a4 <Reset_Handler+0xcc>)
  40494c:	701a      	strb	r2, [r3, #0]
	return flags;
  40494e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  404950:	4a15      	ldr	r2, [pc, #84]	; (4049a8 <Reset_Handler+0xd0>)
  404952:	6813      	ldr	r3, [r2, #0]
  404954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  404958:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40495a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40495e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  404962:	b129      	cbz	r1, 404970 <Reset_Handler+0x98>
		cpu_irq_enable();
  404964:	2201      	movs	r2, #1
  404966:	4b0f      	ldr	r3, [pc, #60]	; (4049a4 <Reset_Handler+0xcc>)
  404968:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40496a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40496e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  404970:	4b0e      	ldr	r3, [pc, #56]	; (4049ac <Reset_Handler+0xd4>)
  404972:	4798      	blx	r3

        /* Branch to main function */
        main();
  404974:	4b0e      	ldr	r3, [pc, #56]	; (4049b0 <Reset_Handler+0xd8>)
  404976:	4798      	blx	r3
  404978:	e7fe      	b.n	404978 <Reset_Handler+0xa0>
  40497a:	bf00      	nop
  40497c:	20400000 	.word	0x20400000
  404980:	00409440 	.word	0x00409440
  404984:	204008ac 	.word	0x204008ac
  404988:	20401608 	.word	0x20401608
  40498c:	204008ac 	.word	0x204008ac
  404990:	204008ab 	.word	0x204008ab
  404994:	204008b0 	.word	0x204008b0
  404998:	2040160b 	.word	0x2040160b
  40499c:	e000ed00 	.word	0xe000ed00
  4049a0:	00400000 	.word	0x00400000
  4049a4:	20400038 	.word	0x20400038
  4049a8:	e000ed88 	.word	0xe000ed88
  4049ac:	004050d1 	.word	0x004050d1
  4049b0:	00404ec1 	.word	0x00404ec1

004049b4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4049b4:	4b3c      	ldr	r3, [pc, #240]	; (404aa8 <SystemCoreClockUpdate+0xf4>)
  4049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4049b8:	f003 0303 	and.w	r3, r3, #3
  4049bc:	2b01      	cmp	r3, #1
  4049be:	d00f      	beq.n	4049e0 <SystemCoreClockUpdate+0x2c>
  4049c0:	b113      	cbz	r3, 4049c8 <SystemCoreClockUpdate+0x14>
  4049c2:	2b02      	cmp	r3, #2
  4049c4:	d029      	beq.n	404a1a <SystemCoreClockUpdate+0x66>
  4049c6:	e057      	b.n	404a78 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4049c8:	4b38      	ldr	r3, [pc, #224]	; (404aac <SystemCoreClockUpdate+0xf8>)
  4049ca:	695b      	ldr	r3, [r3, #20]
  4049cc:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4049d0:	bf14      	ite	ne
  4049d2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4049d6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4049da:	4b35      	ldr	r3, [pc, #212]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  4049dc:	601a      	str	r2, [r3, #0]
  4049de:	e04b      	b.n	404a78 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4049e0:	4b31      	ldr	r3, [pc, #196]	; (404aa8 <SystemCoreClockUpdate+0xf4>)
  4049e2:	6a1b      	ldr	r3, [r3, #32]
  4049e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4049e8:	d003      	beq.n	4049f2 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4049ea:	4a32      	ldr	r2, [pc, #200]	; (404ab4 <SystemCoreClockUpdate+0x100>)
  4049ec:	4b30      	ldr	r3, [pc, #192]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  4049ee:	601a      	str	r2, [r3, #0]
  4049f0:	e042      	b.n	404a78 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4049f2:	4a31      	ldr	r2, [pc, #196]	; (404ab8 <SystemCoreClockUpdate+0x104>)
  4049f4:	4b2e      	ldr	r3, [pc, #184]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  4049f6:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4049f8:	4b2b      	ldr	r3, [pc, #172]	; (404aa8 <SystemCoreClockUpdate+0xf4>)
  4049fa:	6a1b      	ldr	r3, [r3, #32]
  4049fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404a00:	2b10      	cmp	r3, #16
  404a02:	d002      	beq.n	404a0a <SystemCoreClockUpdate+0x56>
  404a04:	2b20      	cmp	r3, #32
  404a06:	d004      	beq.n	404a12 <SystemCoreClockUpdate+0x5e>
  404a08:	e036      	b.n	404a78 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  404a0a:	4a2c      	ldr	r2, [pc, #176]	; (404abc <SystemCoreClockUpdate+0x108>)
  404a0c:	4b28      	ldr	r3, [pc, #160]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  404a0e:	601a      	str	r2, [r3, #0]
          break;
  404a10:	e032      	b.n	404a78 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  404a12:	4a28      	ldr	r2, [pc, #160]	; (404ab4 <SystemCoreClockUpdate+0x100>)
  404a14:	4b26      	ldr	r3, [pc, #152]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  404a16:	601a      	str	r2, [r3, #0]
          break;
  404a18:	e02e      	b.n	404a78 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404a1a:	4b23      	ldr	r3, [pc, #140]	; (404aa8 <SystemCoreClockUpdate+0xf4>)
  404a1c:	6a1b      	ldr	r3, [r3, #32]
  404a1e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404a22:	d003      	beq.n	404a2c <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  404a24:	4a23      	ldr	r2, [pc, #140]	; (404ab4 <SystemCoreClockUpdate+0x100>)
  404a26:	4b22      	ldr	r3, [pc, #136]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  404a28:	601a      	str	r2, [r3, #0]
  404a2a:	e012      	b.n	404a52 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404a2c:	4a22      	ldr	r2, [pc, #136]	; (404ab8 <SystemCoreClockUpdate+0x104>)
  404a2e:	4b20      	ldr	r3, [pc, #128]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  404a30:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404a32:	4b1d      	ldr	r3, [pc, #116]	; (404aa8 <SystemCoreClockUpdate+0xf4>)
  404a34:	6a1b      	ldr	r3, [r3, #32]
  404a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404a3a:	2b10      	cmp	r3, #16
  404a3c:	d002      	beq.n	404a44 <SystemCoreClockUpdate+0x90>
  404a3e:	2b20      	cmp	r3, #32
  404a40:	d004      	beq.n	404a4c <SystemCoreClockUpdate+0x98>
  404a42:	e006      	b.n	404a52 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  404a44:	4a1d      	ldr	r2, [pc, #116]	; (404abc <SystemCoreClockUpdate+0x108>)
  404a46:	4b1a      	ldr	r3, [pc, #104]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  404a48:	601a      	str	r2, [r3, #0]
          break;
  404a4a:	e002      	b.n	404a52 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  404a4c:	4a19      	ldr	r2, [pc, #100]	; (404ab4 <SystemCoreClockUpdate+0x100>)
  404a4e:	4b18      	ldr	r3, [pc, #96]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  404a50:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  404a52:	4b15      	ldr	r3, [pc, #84]	; (404aa8 <SystemCoreClockUpdate+0xf4>)
  404a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404a56:	f003 0303 	and.w	r3, r3, #3
  404a5a:	2b02      	cmp	r3, #2
  404a5c:	d10c      	bne.n	404a78 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  404a5e:	4a12      	ldr	r2, [pc, #72]	; (404aa8 <SystemCoreClockUpdate+0xf4>)
  404a60:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  404a62:	6a92      	ldr	r2, [r2, #40]	; 0x28
  404a64:	4812      	ldr	r0, [pc, #72]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  404a66:	f3c3 410a 	ubfx	r1, r3, #16, #11
  404a6a:	6803      	ldr	r3, [r0, #0]
  404a6c:	fb01 3303 	mla	r3, r1, r3, r3
  404a70:	b2d2      	uxtb	r2, r2
  404a72:	fbb3 f3f2 	udiv	r3, r3, r2
  404a76:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  404a78:	4b0b      	ldr	r3, [pc, #44]	; (404aa8 <SystemCoreClockUpdate+0xf4>)
  404a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404a7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404a80:	2b70      	cmp	r3, #112	; 0x70
  404a82:	d107      	bne.n	404a94 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  404a84:	4a0a      	ldr	r2, [pc, #40]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  404a86:	6813      	ldr	r3, [r2, #0]
  404a88:	490d      	ldr	r1, [pc, #52]	; (404ac0 <SystemCoreClockUpdate+0x10c>)
  404a8a:	fba1 1303 	umull	r1, r3, r1, r3
  404a8e:	085b      	lsrs	r3, r3, #1
  404a90:	6013      	str	r3, [r2, #0]
  404a92:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404a94:	4b04      	ldr	r3, [pc, #16]	; (404aa8 <SystemCoreClockUpdate+0xf4>)
  404a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404a98:	4905      	ldr	r1, [pc, #20]	; (404ab0 <SystemCoreClockUpdate+0xfc>)
  404a9a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  404a9e:	680b      	ldr	r3, [r1, #0]
  404aa0:	40d3      	lsrs	r3, r2
  404aa2:	600b      	str	r3, [r1, #0]
  404aa4:	4770      	bx	lr
  404aa6:	bf00      	nop
  404aa8:	400e0600 	.word	0x400e0600
  404aac:	400e1810 	.word	0x400e1810
  404ab0:	2040003c 	.word	0x2040003c
  404ab4:	00b71b00 	.word	0x00b71b00
  404ab8:	003d0900 	.word	0x003d0900
  404abc:	007a1200 	.word	0x007a1200
  404ac0:	aaaaaaab 	.word	0xaaaaaaab

00404ac4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  404ac4:	4b12      	ldr	r3, [pc, #72]	; (404b10 <system_init_flash+0x4c>)
  404ac6:	4298      	cmp	r0, r3
  404ac8:	d804      	bhi.n	404ad4 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  404aca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404ace:	4b11      	ldr	r3, [pc, #68]	; (404b14 <system_init_flash+0x50>)
  404ad0:	601a      	str	r2, [r3, #0]
  404ad2:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  404ad4:	4b10      	ldr	r3, [pc, #64]	; (404b18 <system_init_flash+0x54>)
  404ad6:	4298      	cmp	r0, r3
  404ad8:	d803      	bhi.n	404ae2 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404ada:	4a10      	ldr	r2, [pc, #64]	; (404b1c <system_init_flash+0x58>)
  404adc:	4b0d      	ldr	r3, [pc, #52]	; (404b14 <system_init_flash+0x50>)
  404ade:	601a      	str	r2, [r3, #0]
  404ae0:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  404ae2:	4b0f      	ldr	r3, [pc, #60]	; (404b20 <system_init_flash+0x5c>)
  404ae4:	4298      	cmp	r0, r3
  404ae6:	d803      	bhi.n	404af0 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404ae8:	4a0e      	ldr	r2, [pc, #56]	; (404b24 <system_init_flash+0x60>)
  404aea:	4b0a      	ldr	r3, [pc, #40]	; (404b14 <system_init_flash+0x50>)
  404aec:	601a      	str	r2, [r3, #0]
  404aee:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  404af0:	4b0d      	ldr	r3, [pc, #52]	; (404b28 <system_init_flash+0x64>)
  404af2:	4298      	cmp	r0, r3
  404af4:	d803      	bhi.n	404afe <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404af6:	4a0d      	ldr	r2, [pc, #52]	; (404b2c <system_init_flash+0x68>)
  404af8:	4b06      	ldr	r3, [pc, #24]	; (404b14 <system_init_flash+0x50>)
  404afa:	601a      	str	r2, [r3, #0]
  404afc:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  404afe:	4b0c      	ldr	r3, [pc, #48]	; (404b30 <system_init_flash+0x6c>)
  404b00:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  404b02:	bf94      	ite	ls
  404b04:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  404b08:	4a0a      	ldrhi	r2, [pc, #40]	; (404b34 <system_init_flash+0x70>)
  404b0a:	4b02      	ldr	r3, [pc, #8]	; (404b14 <system_init_flash+0x50>)
  404b0c:	601a      	str	r2, [r3, #0]
  404b0e:	4770      	bx	lr
  404b10:	01312cff 	.word	0x01312cff
  404b14:	400e0c00 	.word	0x400e0c00
  404b18:	026259ff 	.word	0x026259ff
  404b1c:	04000100 	.word	0x04000100
  404b20:	039386ff 	.word	0x039386ff
  404b24:	04000200 	.word	0x04000200
  404b28:	04c4b3ff 	.word	0x04c4b3ff
  404b2c:	04000300 	.word	0x04000300
  404b30:	05f5e0ff 	.word	0x05f5e0ff
  404b34:	04000500 	.word	0x04000500

00404b38 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  404b38:	4b09      	ldr	r3, [pc, #36]	; (404b60 <_sbrk+0x28>)
  404b3a:	681b      	ldr	r3, [r3, #0]
  404b3c:	b913      	cbnz	r3, 404b44 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  404b3e:	4a09      	ldr	r2, [pc, #36]	; (404b64 <_sbrk+0x2c>)
  404b40:	4b07      	ldr	r3, [pc, #28]	; (404b60 <_sbrk+0x28>)
  404b42:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  404b44:	4b06      	ldr	r3, [pc, #24]	; (404b60 <_sbrk+0x28>)
  404b46:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  404b48:	181a      	adds	r2, r3, r0
  404b4a:	4907      	ldr	r1, [pc, #28]	; (404b68 <_sbrk+0x30>)
  404b4c:	4291      	cmp	r1, r2
  404b4e:	db04      	blt.n	404b5a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  404b50:	4610      	mov	r0, r2
  404b52:	4a03      	ldr	r2, [pc, #12]	; (404b60 <_sbrk+0x28>)
  404b54:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  404b56:	4618      	mov	r0, r3
  404b58:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  404b5a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  404b5e:	4770      	bx	lr
  404b60:	20400994 	.word	0x20400994
  404b64:	20403808 	.word	0x20403808
  404b68:	2045fffc 	.word	0x2045fffc

00404b6c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  404b6c:	f04f 30ff 	mov.w	r0, #4294967295
  404b70:	4770      	bx	lr
  404b72:	bf00      	nop

00404b74 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  404b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  404b78:	604b      	str	r3, [r1, #4]

	return 0;
}
  404b7a:	2000      	movs	r0, #0
  404b7c:	4770      	bx	lr
  404b7e:	bf00      	nop

00404b80 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  404b80:	2001      	movs	r0, #1
  404b82:	4770      	bx	lr

00404b84 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  404b84:	2000      	movs	r0, #0
  404b86:	4770      	bx	lr

00404b88 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  404b88:	b570      	push	{r4, r5, r6, lr}
  404b8a:	4616      	mov	r6, r2
	switch (u8Msg) {
  404b8c:	2906      	cmp	r1, #6
  404b8e:	d048      	beq.n	404c22 <socket_cb+0x9a>
  404b90:	2907      	cmp	r1, #7
  404b92:	d042      	beq.n	404c1a <socket_cb+0x92>
  404b94:	2905      	cmp	r1, #5
  404b96:	d15e      	bne.n	404c56 <socket_cb+0xce>
   
  /* Socket connected */
  case SOCKET_MSG_CONNECT:
  {
    uint16_t rtn;
    memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  404b98:	4c2f      	ldr	r4, [pc, #188]	; (404c58 <socket_cb+0xd0>)
  404b9a:	f240 52b4 	movw	r2, #1460	; 0x5b4
  404b9e:	2100      	movs	r1, #0
  404ba0:	4620      	mov	r0, r4
  404ba2:	4b2e      	ldr	r3, [pc, #184]	; (404c5c <socket_cb+0xd4>)
  404ba4:	4798      	blx	r3
    sprintf((char *)gau8ReceivedBuffer, "%s",HOST_MSG);
  404ba6:	4d2e      	ldr	r5, [pc, #184]	; (404c60 <socket_cb+0xd8>)
  404ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404bb4:	e895 0003 	ldmia.w	r5, {r0, r1}
  404bb8:	f844 0b04 	str.w	r0, [r4], #4
  404bbc:	8021      	strh	r1, [r4, #0]
    
    tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    if (pstrConnect && pstrConnect->s8Error >= 0) {
  404bbe:	b30e      	cbz	r6, 404c04 <socket_cb+0x7c>
  404bc0:	f996 3001 	ldrsb.w	r3, [r6, #1]
  404bc4:	2b00      	cmp	r3, #0
  404bc6:	db1d      	blt.n	404c04 <socket_cb+0x7c>
      printf("socket_cb: connect success!\r\n");
  404bc8:	4826      	ldr	r0, [pc, #152]	; (404c64 <socket_cb+0xdc>)
  404bca:	4b27      	ldr	r3, [pc, #156]	; (404c68 <socket_cb+0xe0>)
  404bcc:	4798      	blx	r3
      rtn = send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  404bce:	4c22      	ldr	r4, [pc, #136]	; (404c58 <socket_cb+0xd0>)
  404bd0:	4620      	mov	r0, r4
  404bd2:	4b26      	ldr	r3, [pc, #152]	; (404c6c <socket_cb+0xe4>)
  404bd4:	4798      	blx	r3
  404bd6:	4d26      	ldr	r5, [pc, #152]	; (404c70 <socket_cb+0xe8>)
  404bd8:	2300      	movs	r3, #0
  404bda:	b282      	uxth	r2, r0
  404bdc:	4621      	mov	r1, r4
  404bde:	f995 0000 	ldrsb.w	r0, [r5]
  404be2:	4e24      	ldr	r6, [pc, #144]	; (404c74 <socket_cb+0xec>)
  404be4:	47b0      	blx	r6
      memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  404be6:	f240 56b4 	movw	r6, #1460	; 0x5b4
  404bea:	4632      	mov	r2, r6
  404bec:	2100      	movs	r1, #0
  404bee:	4620      	mov	r0, r4
  404bf0:	4b1a      	ldr	r3, [pc, #104]	; (404c5c <socket_cb+0xd4>)
  404bf2:	4798      	blx	r3
      recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);  
  404bf4:	2300      	movs	r3, #0
  404bf6:	4632      	mov	r2, r6
  404bf8:	491f      	ldr	r1, [pc, #124]	; (404c78 <socket_cb+0xf0>)
  404bfa:	f995 0000 	ldrsb.w	r0, [r5]
  404bfe:	4c1f      	ldr	r4, [pc, #124]	; (404c7c <socket_cb+0xf4>)
  404c00:	47a0      	blx	r4
  404c02:	bd70      	pop	{r4, r5, r6, pc}
      } else {
      printf("socket_cb: connect error!\r\n");
  404c04:	481e      	ldr	r0, [pc, #120]	; (404c80 <socket_cb+0xf8>)
  404c06:	4b18      	ldr	r3, [pc, #96]	; (404c68 <socket_cb+0xe0>)
  404c08:	4798      	blx	r3
      close(tcp_client_socket);
  404c0a:	4c19      	ldr	r4, [pc, #100]	; (404c70 <socket_cb+0xe8>)
  404c0c:	f994 0000 	ldrsb.w	r0, [r4]
  404c10:	4b1c      	ldr	r3, [pc, #112]	; (404c84 <socket_cb+0xfc>)
  404c12:	4798      	blx	r3
      tcp_client_socket = -1;
  404c14:	23ff      	movs	r3, #255	; 0xff
  404c16:	7023      	strb	r3, [r4, #0]
  404c18:	bd70      	pop	{r4, r5, r6, pc}
  break;

	/* Message send */
	case SOCKET_MSG_SEND:
	{
		printf("socket_cb: send success!\r\n");
  404c1a:	481b      	ldr	r0, [pc, #108]	; (404c88 <socket_cb+0x100>)
  404c1c:	4b12      	ldr	r3, [pc, #72]	; (404c68 <socket_cb+0xe0>)
  404c1e:	4798      	blx	r3
	  //printf("TCP Server Test Complete!\r\n");
		//printf("close socket\n");
		//close(tcp_client_socket);
		//close(tcp_server_socket);
	}
	break;
  404c20:	bd70      	pop	{r4, r5, r6, pc}
    
    uint8_t  messageAck[64];
    uint16_t messageAckSize;
    uint8_t  command;
        
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {        
  404c22:	b172      	cbz	r2, 404c42 <socket_cb+0xba>
  404c24:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  404c28:	2b00      	cmp	r3, #0
  404c2a:	dd0a      	ble.n	404c42 <socket_cb+0xba>
      // Para debug das mensagens do socket
			printf("%s \r\n", pstrRecv->pu8Buffer);   
  404c2c:	6811      	ldr	r1, [r2, #0]
  404c2e:	4817      	ldr	r0, [pc, #92]	; (404c8c <socket_cb+0x104>)
  404c30:	4b0d      	ldr	r3, [pc, #52]	; (404c68 <socket_cb+0xe0>)
  404c32:	4798      	blx	r3
       
      // limpa o buffer de recepcao e tx
      memset(pstrRecv->pu8Buffer, 0, pstrRecv->s16BufferSize); 
  404c34:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  404c38:	2100      	movs	r1, #0
  404c3a:	6830      	ldr	r0, [r6, #0]
  404c3c:	4b07      	ldr	r3, [pc, #28]	; (404c5c <socket_cb+0xd4>)
  404c3e:	4798      	blx	r3
  404c40:	bd70      	pop	{r4, r5, r6, pc}
      
      // Requista novos dados
      //recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
      
 		} else {
			printf("socket_cb: recv error!\r\n");
  404c42:	4813      	ldr	r0, [pc, #76]	; (404c90 <socket_cb+0x108>)
  404c44:	4b08      	ldr	r3, [pc, #32]	; (404c68 <socket_cb+0xe0>)
  404c46:	4798      	blx	r3
			close(tcp_client_socket);
  404c48:	4c09      	ldr	r4, [pc, #36]	; (404c70 <socket_cb+0xe8>)
  404c4a:	f994 0000 	ldrsb.w	r0, [r4]
  404c4e:	4b0d      	ldr	r3, [pc, #52]	; (404c84 <socket_cb+0xfc>)
  404c50:	4798      	blx	r3
			tcp_client_socket = -1;
  404c52:	23ff      	movs	r3, #255	; 0xff
  404c54:	7023      	strb	r3, [r4, #0]
  404c56:	bd70      	pop	{r4, r5, r6, pc}
  404c58:	20400998 	.word	0x20400998
  404c5c:	00405149 	.word	0x00405149
  404c60:	00409094 	.word	0x00409094
  404c64:	004090cc 	.word	0x004090cc
  404c68:	00405121 	.word	0x00405121
  404c6c:	00405381 	.word	0x00405381
  404c70:	20400040 	.word	0x20400040
  404c74:	00403939 	.word	0x00403939
  404c78:	20400f4c 	.word	0x20400f4c
  404c7c:	004039d5 	.word	0x004039d5
  404c80:	004090ec 	.word	0x004090ec
  404c84:	00403a79 	.word	0x00403a79
  404c88:	00409108 	.word	0x00409108
  404c8c:	00409124 	.word	0x00409124
  404c90:	0040912c 	.word	0x0040912c

00404c94 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  404c94:	b510      	push	{r4, lr}
  404c96:	b082      	sub	sp, #8
	switch (u8MsgType) {
  404c98:	282c      	cmp	r0, #44	; 0x2c
  404c9a:	d002      	beq.n	404ca2 <wifi_cb+0xe>
  404c9c:	2832      	cmp	r0, #50	; 0x32
  404c9e:	d019      	beq.n	404cd4 <wifi_cb+0x40>
  404ca0:	e024      	b.n	404cec <wifi_cb+0x58>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  404ca2:	780b      	ldrb	r3, [r1, #0]
  404ca4:	2b01      	cmp	r3, #1
  404ca6:	d105      	bne.n	404cb4 <wifi_cb+0x20>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
  404ca8:	4811      	ldr	r0, [pc, #68]	; (404cf0 <wifi_cb+0x5c>)
  404caa:	4b12      	ldr	r3, [pc, #72]	; (404cf4 <wifi_cb+0x60>)
  404cac:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  404cae:	4b12      	ldr	r3, [pc, #72]	; (404cf8 <wifi_cb+0x64>)
  404cb0:	4798      	blx	r3
  404cb2:	e01b      	b.n	404cec <wifi_cb+0x58>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  404cb4:	b9d3      	cbnz	r3, 404cec <wifi_cb+0x58>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
  404cb6:	4811      	ldr	r0, [pc, #68]	; (404cfc <wifi_cb+0x68>)
  404cb8:	4b0e      	ldr	r3, [pc, #56]	; (404cf4 <wifi_cb+0x60>)
  404cba:	4798      	blx	r3
			wifi_connected = 0;
  404cbc:	2200      	movs	r2, #0
  404cbe:	4b10      	ldr	r3, [pc, #64]	; (404d00 <wifi_cb+0x6c>)
  404cc0:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  404cc2:	23ff      	movs	r3, #255	; 0xff
  404cc4:	9300      	str	r3, [sp, #0]
  404cc6:	4b0f      	ldr	r3, [pc, #60]	; (404d04 <wifi_cb+0x70>)
  404cc8:	2202      	movs	r2, #2
  404cca:	210d      	movs	r1, #13
  404ccc:	480e      	ldr	r0, [pc, #56]	; (404d08 <wifi_cb+0x74>)
  404cce:	4c0f      	ldr	r4, [pc, #60]	; (404d0c <wifi_cb+0x78>)
  404cd0:	47a0      	blx	r4
  404cd2:	e00b      	b.n	404cec <wifi_cb+0x58>
	break;

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1;
  404cd4:	2201      	movs	r2, #1
  404cd6:	4b0a      	ldr	r3, [pc, #40]	; (404d00 <wifi_cb+0x6c>)
  404cd8:	701a      	strb	r2, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  404cda:	788b      	ldrb	r3, [r1, #2]
  404cdc:	784a      	ldrb	r2, [r1, #1]
  404cde:	7808      	ldrb	r0, [r1, #0]
  404ce0:	78c9      	ldrb	r1, [r1, #3]
  404ce2:	9100      	str	r1, [sp, #0]
  404ce4:	4601      	mov	r1, r0
  404ce6:	480a      	ldr	r0, [pc, #40]	; (404d10 <wifi_cb+0x7c>)
  404ce8:	4c02      	ldr	r4, [pc, #8]	; (404cf4 <wifi_cb+0x60>)
  404cea:	47a0      	blx	r4
	break;

	default:
		break;
	}
}
  404cec:	b002      	add	sp, #8
  404cee:	bd10      	pop	{r4, pc}
  404cf0:	00409148 	.word	0x00409148
  404cf4:	00405121 	.word	0x00405121
  404cf8:	00402339 	.word	0x00402339
  404cfc:	00409180 	.word	0x00409180
  404d00:	20401500 	.word	0x20401500
  404d04:	004091bc 	.word	0x004091bc
  404d08:	004091c8 	.word	0x004091c8
  404d0c:	0040231d 	.word	0x0040231d
  404d10:	004091d8 	.word	0x004091d8

00404d14 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404d14:	b5f0      	push	{r4, r5, r6, r7, lr}
  404d16:	b083      	sub	sp, #12
  404d18:	4605      	mov	r5, r0
  404d1a:	460c      	mov	r4, r1
	uint32_t val = 0;
  404d1c:	2300      	movs	r3, #0
  404d1e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404d20:	4b29      	ldr	r3, [pc, #164]	; (404dc8 <usart_serial_getchar+0xb4>)
  404d22:	4298      	cmp	r0, r3
  404d24:	d107      	bne.n	404d36 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  404d26:	461f      	mov	r7, r3
  404d28:	4e28      	ldr	r6, [pc, #160]	; (404dcc <usart_serial_getchar+0xb8>)
  404d2a:	4621      	mov	r1, r4
  404d2c:	4638      	mov	r0, r7
  404d2e:	47b0      	blx	r6
  404d30:	2800      	cmp	r0, #0
  404d32:	d1fa      	bne.n	404d2a <usart_serial_getchar+0x16>
  404d34:	e015      	b.n	404d62 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404d36:	4b26      	ldr	r3, [pc, #152]	; (404dd0 <usart_serial_getchar+0xbc>)
  404d38:	4298      	cmp	r0, r3
  404d3a:	d107      	bne.n	404d4c <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  404d3c:	461f      	mov	r7, r3
  404d3e:	4e23      	ldr	r6, [pc, #140]	; (404dcc <usart_serial_getchar+0xb8>)
  404d40:	4621      	mov	r1, r4
  404d42:	4638      	mov	r0, r7
  404d44:	47b0      	blx	r6
  404d46:	2800      	cmp	r0, #0
  404d48:	d1fa      	bne.n	404d40 <usart_serial_getchar+0x2c>
  404d4a:	e015      	b.n	404d78 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  404d4c:	4b21      	ldr	r3, [pc, #132]	; (404dd4 <usart_serial_getchar+0xc0>)
  404d4e:	4298      	cmp	r0, r3
  404d50:	d107      	bne.n	404d62 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  404d52:	461f      	mov	r7, r3
  404d54:	4e1d      	ldr	r6, [pc, #116]	; (404dcc <usart_serial_getchar+0xb8>)
  404d56:	4621      	mov	r1, r4
  404d58:	4638      	mov	r0, r7
  404d5a:	47b0      	blx	r6
  404d5c:	2800      	cmp	r0, #0
  404d5e:	d1fa      	bne.n	404d56 <usart_serial_getchar+0x42>
  404d60:	e017      	b.n	404d92 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  404d62:	4b1d      	ldr	r3, [pc, #116]	; (404dd8 <usart_serial_getchar+0xc4>)
  404d64:	429d      	cmp	r5, r3
  404d66:	d107      	bne.n	404d78 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  404d68:	461f      	mov	r7, r3
  404d6a:	4e18      	ldr	r6, [pc, #96]	; (404dcc <usart_serial_getchar+0xb8>)
  404d6c:	4621      	mov	r1, r4
  404d6e:	4638      	mov	r0, r7
  404d70:	47b0      	blx	r6
  404d72:	2800      	cmp	r0, #0
  404d74:	d1fa      	bne.n	404d6c <usart_serial_getchar+0x58>
  404d76:	e019      	b.n	404dac <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404d78:	4b18      	ldr	r3, [pc, #96]	; (404ddc <usart_serial_getchar+0xc8>)
  404d7a:	429d      	cmp	r5, r3
  404d7c:	d109      	bne.n	404d92 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  404d7e:	461e      	mov	r6, r3
  404d80:	4d17      	ldr	r5, [pc, #92]	; (404de0 <usart_serial_getchar+0xcc>)
  404d82:	a901      	add	r1, sp, #4
  404d84:	4630      	mov	r0, r6
  404d86:	47a8      	blx	r5
  404d88:	2800      	cmp	r0, #0
  404d8a:	d1fa      	bne.n	404d82 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  404d8c:	9b01      	ldr	r3, [sp, #4]
  404d8e:	7023      	strb	r3, [r4, #0]
  404d90:	e018      	b.n	404dc4 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  404d92:	4b14      	ldr	r3, [pc, #80]	; (404de4 <usart_serial_getchar+0xd0>)
  404d94:	429d      	cmp	r5, r3
  404d96:	d109      	bne.n	404dac <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  404d98:	461e      	mov	r6, r3
  404d9a:	4d11      	ldr	r5, [pc, #68]	; (404de0 <usart_serial_getchar+0xcc>)
  404d9c:	a901      	add	r1, sp, #4
  404d9e:	4630      	mov	r0, r6
  404da0:	47a8      	blx	r5
  404da2:	2800      	cmp	r0, #0
  404da4:	d1fa      	bne.n	404d9c <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  404da6:	9b01      	ldr	r3, [sp, #4]
  404da8:	7023      	strb	r3, [r4, #0]
  404daa:	e00b      	b.n	404dc4 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  404dac:	4b0e      	ldr	r3, [pc, #56]	; (404de8 <usart_serial_getchar+0xd4>)
  404dae:	429d      	cmp	r5, r3
  404db0:	d108      	bne.n	404dc4 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  404db2:	461e      	mov	r6, r3
  404db4:	4d0a      	ldr	r5, [pc, #40]	; (404de0 <usart_serial_getchar+0xcc>)
  404db6:	a901      	add	r1, sp, #4
  404db8:	4630      	mov	r0, r6
  404dba:	47a8      	blx	r5
  404dbc:	2800      	cmp	r0, #0
  404dbe:	d1fa      	bne.n	404db6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  404dc0:	9b01      	ldr	r3, [sp, #4]
  404dc2:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  404dc4:	b003      	add	sp, #12
  404dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404dc8:	400e0800 	.word	0x400e0800
  404dcc:	004047a5 	.word	0x004047a5
  404dd0:	400e0a00 	.word	0x400e0a00
  404dd4:	400e1a00 	.word	0x400e1a00
  404dd8:	400e1c00 	.word	0x400e1c00
  404ddc:	40024000 	.word	0x40024000
  404de0:	004048bd 	.word	0x004048bd
  404de4:	40028000 	.word	0x40028000
  404de8:	4002c000 	.word	0x4002c000

00404dec <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  404dec:	b570      	push	{r4, r5, r6, lr}
  404dee:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404df0:	4b2a      	ldr	r3, [pc, #168]	; (404e9c <usart_serial_putchar+0xb0>)
  404df2:	4298      	cmp	r0, r3
  404df4:	d108      	bne.n	404e08 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  404df6:	461e      	mov	r6, r3
  404df8:	4d29      	ldr	r5, [pc, #164]	; (404ea0 <usart_serial_putchar+0xb4>)
  404dfa:	4621      	mov	r1, r4
  404dfc:	4630      	mov	r0, r6
  404dfe:	47a8      	blx	r5
  404e00:	2800      	cmp	r0, #0
  404e02:	d1fa      	bne.n	404dfa <usart_serial_putchar+0xe>
		return 1;
  404e04:	2001      	movs	r0, #1
  404e06:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404e08:	4b26      	ldr	r3, [pc, #152]	; (404ea4 <usart_serial_putchar+0xb8>)
  404e0a:	4298      	cmp	r0, r3
  404e0c:	d108      	bne.n	404e20 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  404e0e:	461e      	mov	r6, r3
  404e10:	4d23      	ldr	r5, [pc, #140]	; (404ea0 <usart_serial_putchar+0xb4>)
  404e12:	4621      	mov	r1, r4
  404e14:	4630      	mov	r0, r6
  404e16:	47a8      	blx	r5
  404e18:	2800      	cmp	r0, #0
  404e1a:	d1fa      	bne.n	404e12 <usart_serial_putchar+0x26>
		return 1;
  404e1c:	2001      	movs	r0, #1
  404e1e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  404e20:	4b21      	ldr	r3, [pc, #132]	; (404ea8 <usart_serial_putchar+0xbc>)
  404e22:	4298      	cmp	r0, r3
  404e24:	d108      	bne.n	404e38 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  404e26:	461e      	mov	r6, r3
  404e28:	4d1d      	ldr	r5, [pc, #116]	; (404ea0 <usart_serial_putchar+0xb4>)
  404e2a:	4621      	mov	r1, r4
  404e2c:	4630      	mov	r0, r6
  404e2e:	47a8      	blx	r5
  404e30:	2800      	cmp	r0, #0
  404e32:	d1fa      	bne.n	404e2a <usart_serial_putchar+0x3e>
		return 1;
  404e34:	2001      	movs	r0, #1
  404e36:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  404e38:	4b1c      	ldr	r3, [pc, #112]	; (404eac <usart_serial_putchar+0xc0>)
  404e3a:	4298      	cmp	r0, r3
  404e3c:	d108      	bne.n	404e50 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  404e3e:	461e      	mov	r6, r3
  404e40:	4d17      	ldr	r5, [pc, #92]	; (404ea0 <usart_serial_putchar+0xb4>)
  404e42:	4621      	mov	r1, r4
  404e44:	4630      	mov	r0, r6
  404e46:	47a8      	blx	r5
  404e48:	2800      	cmp	r0, #0
  404e4a:	d1fa      	bne.n	404e42 <usart_serial_putchar+0x56>
		return 1;
  404e4c:	2001      	movs	r0, #1
  404e4e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404e50:	4b17      	ldr	r3, [pc, #92]	; (404eb0 <usart_serial_putchar+0xc4>)
  404e52:	4298      	cmp	r0, r3
  404e54:	d108      	bne.n	404e68 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  404e56:	461e      	mov	r6, r3
  404e58:	4d16      	ldr	r5, [pc, #88]	; (404eb4 <usart_serial_putchar+0xc8>)
  404e5a:	4621      	mov	r1, r4
  404e5c:	4630      	mov	r0, r6
  404e5e:	47a8      	blx	r5
  404e60:	2800      	cmp	r0, #0
  404e62:	d1fa      	bne.n	404e5a <usart_serial_putchar+0x6e>
		return 1;
  404e64:	2001      	movs	r0, #1
  404e66:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  404e68:	4b13      	ldr	r3, [pc, #76]	; (404eb8 <usart_serial_putchar+0xcc>)
  404e6a:	4298      	cmp	r0, r3
  404e6c:	d108      	bne.n	404e80 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  404e6e:	461e      	mov	r6, r3
  404e70:	4d10      	ldr	r5, [pc, #64]	; (404eb4 <usart_serial_putchar+0xc8>)
  404e72:	4621      	mov	r1, r4
  404e74:	4630      	mov	r0, r6
  404e76:	47a8      	blx	r5
  404e78:	2800      	cmp	r0, #0
  404e7a:	d1fa      	bne.n	404e72 <usart_serial_putchar+0x86>
		return 1;
  404e7c:	2001      	movs	r0, #1
  404e7e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  404e80:	4b0e      	ldr	r3, [pc, #56]	; (404ebc <usart_serial_putchar+0xd0>)
  404e82:	4298      	cmp	r0, r3
  404e84:	d108      	bne.n	404e98 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  404e86:	461e      	mov	r6, r3
  404e88:	4d0a      	ldr	r5, [pc, #40]	; (404eb4 <usart_serial_putchar+0xc8>)
  404e8a:	4621      	mov	r1, r4
  404e8c:	4630      	mov	r0, r6
  404e8e:	47a8      	blx	r5
  404e90:	2800      	cmp	r0, #0
  404e92:	d1fa      	bne.n	404e8a <usart_serial_putchar+0x9e>
		return 1;
  404e94:	2001      	movs	r0, #1
  404e96:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  404e98:	2000      	movs	r0, #0
}
  404e9a:	bd70      	pop	{r4, r5, r6, pc}
  404e9c:	400e0800 	.word	0x400e0800
  404ea0:	00404791 	.word	0x00404791
  404ea4:	400e0a00 	.word	0x400e0a00
  404ea8:	400e1a00 	.word	0x400e1a00
  404eac:	400e1c00 	.word	0x400e1c00
  404eb0:	40024000 	.word	0x40024000
  404eb4:	004048a5 	.word	0x004048a5
  404eb8:	40028000 	.word	0x40028000
  404ebc:	4002c000 	.word	0x4002c000

00404ec0 <main>:
 * Initialize system, UART console, network then test function of TCP server.
 *
 * \return program return value.
 */
int main(void)
{
  404ec0:	b570      	push	{r4, r5, r6, lr}
  404ec2:	b092      	sub	sp, #72	; 0x48
	struct sockaddr_in addr;
	
	

	/* Initialize the board. */
	sysclk_init();
  404ec4:	4b54      	ldr	r3, [pc, #336]	; (405018 <main+0x158>)
  404ec6:	4798      	blx	r3
	board_init();
  404ec8:	4b54      	ldr	r3, [pc, #336]	; (40501c <main+0x15c>)
  404eca:	4798      	blx	r3
  404ecc:	200e      	movs	r0, #14
  404ece:	4e54      	ldr	r6, [pc, #336]	; (405020 <main+0x160>)
  404ed0:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404ed2:	4d54      	ldr	r5, [pc, #336]	; (405024 <main+0x164>)
  404ed4:	4b54      	ldr	r3, [pc, #336]	; (405028 <main+0x168>)
  404ed6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404ed8:	4a54      	ldr	r2, [pc, #336]	; (40502c <main+0x16c>)
  404eda:	4b55      	ldr	r3, [pc, #340]	; (405030 <main+0x170>)
  404edc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404ede:	4a55      	ldr	r2, [pc, #340]	; (405034 <main+0x174>)
  404ee0:	4b55      	ldr	r3, [pc, #340]	; (405038 <main+0x178>)
  404ee2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  404ee4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  404ee8:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  404eea:	23c0      	movs	r3, #192	; 0xc0
  404eec:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  404eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404ef2:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  404ef4:	2400      	movs	r4, #0
  404ef6:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404ef8:	9406      	str	r4, [sp, #24]
  404efa:	200e      	movs	r0, #14
  404efc:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404efe:	4a4f      	ldr	r2, [pc, #316]	; (40503c <main+0x17c>)
  404f00:	a902      	add	r1, sp, #8
  404f02:	4628      	mov	r0, r5
  404f04:	4b4e      	ldr	r3, [pc, #312]	; (405040 <main+0x180>)
  404f06:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  404f08:	4628      	mov	r0, r5
  404f0a:	4b4e      	ldr	r3, [pc, #312]	; (405044 <main+0x184>)
  404f0c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404f0e:	4628      	mov	r0, r5
  404f10:	4b4d      	ldr	r3, [pc, #308]	; (405048 <main+0x188>)
  404f12:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404f14:	4e4d      	ldr	r6, [pc, #308]	; (40504c <main+0x18c>)
  404f16:	6833      	ldr	r3, [r6, #0]
  404f18:	4621      	mov	r1, r4
  404f1a:	6898      	ldr	r0, [r3, #8]
  404f1c:	4d4c      	ldr	r5, [pc, #304]	; (405050 <main+0x190>)
  404f1e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404f20:	6833      	ldr	r3, [r6, #0]
  404f22:	4621      	mov	r1, r4
  404f24:	6858      	ldr	r0, [r3, #4]
  404f26:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  404f28:	484a      	ldr	r0, [pc, #296]	; (405054 <main+0x194>)
  404f2a:	4b4b      	ldr	r3, [pc, #300]	; (405058 <main+0x198>)
  404f2c:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  404f2e:	4b4b      	ldr	r3, [pc, #300]	; (40505c <main+0x19c>)
  404f30:	4798      	blx	r3

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  404f32:	2302      	movs	r3, #2
  404f34:	f8ad 3020 	strh.w	r3, [sp, #32]
	addr.sin_port = _htons(MAIN_SERVER_PORT);
  404f38:	f249 131f 	movw	r3, #37151	; 0x911f
  404f3c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	addr.sin_addr.s_addr = MAIN_SERVER_IP;
  404f40:	4b47      	ldr	r3, [pc, #284]	; (405060 <main+0x1a0>)
  404f42:	9309      	str	r3, [sp, #36]	; 0x24

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  404f44:	940d      	str	r4, [sp, #52]	; 0x34
  404f46:	940e      	str	r4, [sp, #56]	; 0x38
  404f48:	940f      	str	r4, [sp, #60]	; 0x3c
  404f4a:	9410      	str	r4, [sp, #64]	; 0x40
  404f4c:	9411      	str	r4, [sp, #68]	; 0x44

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  404f4e:	4b45      	ldr	r3, [pc, #276]	; (405064 <main+0x1a4>)
  404f50:	930c      	str	r3, [sp, #48]	; 0x30
	ret = m2m_wifi_init(&param);
  404f52:	a80c      	add	r0, sp, #48	; 0x30
  404f54:	4b44      	ldr	r3, [pc, #272]	; (405068 <main+0x1a8>)
  404f56:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404f58:	b120      	cbz	r0, 404f64 <main+0xa4>
  404f5a:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  404f5c:	4843      	ldr	r0, [pc, #268]	; (40506c <main+0x1ac>)
  404f5e:	4b3e      	ldr	r3, [pc, #248]	; (405058 <main+0x198>)
  404f60:	4798      	blx	r3
  404f62:	e7fe      	b.n	404f62 <main+0xa2>
		while (1) {
		}
	}

	/* Initialize socket module */
	socketInit();
  404f64:	4b42      	ldr	r3, [pc, #264]	; (405070 <main+0x1b0>)
  404f66:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
  404f68:	2100      	movs	r1, #0
  404f6a:	4842      	ldr	r0, [pc, #264]	; (405074 <main+0x1b4>)
  404f6c:	4b42      	ldr	r3, [pc, #264]	; (405078 <main+0x1b8>)
  404f6e:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  404f70:	23ff      	movs	r3, #255	; 0xff
  404f72:	9300      	str	r3, [sp, #0]
  404f74:	4b41      	ldr	r3, [pc, #260]	; (40507c <main+0x1bc>)
  404f76:	2202      	movs	r2, #2
  404f78:	210d      	movs	r1, #13
  404f7a:	4841      	ldr	r0, [pc, #260]	; (405080 <main+0x1c0>)
  404f7c:	4c41      	ldr	r4, [pc, #260]	; (405084 <main+0x1c4>)
  404f7e:	47a0      	blx	r4
  
	
	/** SDCARD */
	irq_initialize_vectors();
	cpu_irq_enable();
  404f80:	2201      	movs	r2, #1
  404f82:	4b41      	ldr	r3, [pc, #260]	; (405088 <main+0x1c8>)
  404f84:	701a      	strb	r2, [r3, #0]
  404f86:	f3bf 8f5f 	dmb	sy
  404f8a:	b662      	cpsie	i
	FRESULT res;
	FATFS fs;
	FIL file_object;
	
	/* Initialize SD MMC stack */
	sd_mmc_init();
  404f8c:	4b3f      	ldr	r3, [pc, #252]	; (40508c <main+0x1cc>)
  404f8e:	4798      	blx	r3
	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  404f90:	483f      	ldr	r0, [pc, #252]	; (405090 <main+0x1d0>)
  404f92:	4c31      	ldr	r4, [pc, #196]	; (405058 <main+0x198>)
  404f94:	47a0      	blx	r4
	
	printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  404f96:	483f      	ldr	r0, [pc, #252]	; (405094 <main+0x1d4>)
  404f98:	47a0      	blx	r4
	/* Wait card present and ready */
	do {
			status = sd_mmc_test_unit_ready(0);
  404f9a:	4e3f      	ldr	r6, [pc, #252]	; (405098 <main+0x1d8>)
			if (CTRL_FAIL == status) {
				printf("Card install FAIL\n\r");
				printf("Please unplug and re-plug the card.\n\r");
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  404f9c:	4d3f      	ldr	r5, [pc, #252]	; (40509c <main+0x1dc>)
	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
	
	printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
	/* Wait card present and ready */
	do {
			status = sd_mmc_test_unit_ready(0);
  404f9e:	2000      	movs	r0, #0
  404fa0:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
  404fa2:	2801      	cmp	r0, #1
  404fa4:	d10a      	bne.n	404fbc <main+0xfc>
				printf("Card install FAIL\n\r");
  404fa6:	483e      	ldr	r0, [pc, #248]	; (4050a0 <main+0x1e0>)
  404fa8:	4c2b      	ldr	r4, [pc, #172]	; (405058 <main+0x198>)
  404faa:	47a0      	blx	r4
				printf("Please unplug and re-plug the card.\n\r");
  404fac:	483d      	ldr	r0, [pc, #244]	; (4050a4 <main+0x1e4>)
  404fae:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  404fb0:	2400      	movs	r4, #0
  404fb2:	4620      	mov	r0, r4
  404fb4:	47a8      	blx	r5
  404fb6:	2802      	cmp	r0, #2
  404fb8:	d1fb      	bne.n	404fb2 <main+0xf2>
  404fba:	e7f0      	b.n	404f9e <main+0xde>
				}
			}
	} while (CTRL_GOOD != status);	
  404fbc:	2800      	cmp	r0, #0
  404fbe:	d1ee      	bne.n	404f9e <main+0xde>
	
	printf("Mount disk (f_mount)...\r\n");
  404fc0:	4839      	ldr	r0, [pc, #228]	; (4050a8 <main+0x1e8>)
  404fc2:	4b25      	ldr	r3, [pc, #148]	; (405058 <main+0x198>)
  404fc4:	4798      	blx	r3

	
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  404fc6:	4d39      	ldr	r5, [pc, #228]	; (4050ac <main+0x1ec>)

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  404fc8:	4c39      	ldr	r4, [pc, #228]	; (4050b0 <main+0x1f0>)
				if (tcp_client_socket < 0) {
  404fca:	4e3a      	ldr	r6, [pc, #232]	; (4050b4 <main+0x1f4>)
	printf("Mount disk (f_mount)...\r\n");

	
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  404fcc:	2000      	movs	r0, #0
  404fce:	47a8      	blx	r5

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  404fd0:	7823      	ldrb	r3, [r4, #0]
  404fd2:	2b01      	cmp	r3, #1
  404fd4:	d1fa      	bne.n	404fcc <main+0x10c>
				if (tcp_client_socket < 0) {
  404fd6:	f996 3000 	ldrsb.w	r3, [r6]
  404fda:	2b00      	cmp	r3, #0
  404fdc:	daf6      	bge.n	404fcc <main+0x10c>
  				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  404fde:	2200      	movs	r2, #0
  404fe0:	2101      	movs	r1, #1
  404fe2:	2002      	movs	r0, #2
  404fe4:	4b34      	ldr	r3, [pc, #208]	; (4050b8 <main+0x1f8>)
  404fe6:	4798      	blx	r3
  404fe8:	7030      	strb	r0, [r6, #0]
  404fea:	2800      	cmp	r0, #0
  404fec:	da03      	bge.n	404ff6 <main+0x136>
    				printf("main: failed to create TCP client socket error!\r\n");
  404fee:	4833      	ldr	r0, [pc, #204]	; (4050bc <main+0x1fc>)
  404ff0:	4b19      	ldr	r3, [pc, #100]	; (405058 <main+0x198>)
  404ff2:	4798      	blx	r3
    				continue;
  404ff4:	e7ea      	b.n	404fcc <main+0x10c>
  				}
          
          /* Connect TCP client socket. */
          if (connect(tcp_client_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR ) {
  404ff6:	2210      	movs	r2, #16
  404ff8:	a908      	add	r1, sp, #32
  404ffa:	4b31      	ldr	r3, [pc, #196]	; (4050c0 <main+0x200>)
  404ffc:	4798      	blx	r3
  404ffe:	b138      	cbz	r0, 405010 <main+0x150>
            printf("main: failed to connect socket error!\r\n");
  405000:	4830      	ldr	r0, [pc, #192]	; (4050c4 <main+0x204>)
  405002:	4b15      	ldr	r3, [pc, #84]	; (405058 <main+0x198>)
  405004:	4798      	blx	r3
            close(tcp_client_socket);
  405006:	f996 0000 	ldrsb.w	r0, [r6]
  40500a:	4b2f      	ldr	r3, [pc, #188]	; (4050c8 <main+0x208>)
  40500c:	4798      	blx	r3
            continue;
  40500e:	e7dd      	b.n	404fcc <main+0x10c>
          }else{
            printf("Conectado ! \n");
  405010:	482e      	ldr	r0, [pc, #184]	; (4050cc <main+0x20c>)
  405012:	4b11      	ldr	r3, [pc, #68]	; (405058 <main+0x198>)
  405014:	4798      	blx	r3
  405016:	e7d9      	b.n	404fcc <main+0x10c>
  405018:	00403be1 	.word	0x00403be1
  40501c:	00403cdd 	.word	0x00403cdd
  405020:	004045d5 	.word	0x004045d5
  405024:	40028000 	.word	0x40028000
  405028:	20401600 	.word	0x20401600
  40502c:	00404ded 	.word	0x00404ded
  405030:	204015fc 	.word	0x204015fc
  405034:	00404d15 	.word	0x00404d15
  405038:	204015f8 	.word	0x204015f8
  40503c:	08f0d180 	.word	0x08f0d180
  405040:	00404841 	.word	0x00404841
  405044:	00404895 	.word	0x00404895
  405048:	0040489d 	.word	0x0040489d
  40504c:	20400470 	.word	0x20400470
  405050:	004051e5 	.word	0x004051e5
  405054:	00409210 	.word	0x00409210
  405058:	00405121 	.word	0x00405121
  40505c:	004011a9 	.word	0x004011a9
  405060:	c900a8c0 	.word	0xc900a8c0
  405064:	00404c95 	.word	0x00404c95
  405068:	00401fd1 	.word	0x00401fd1
  40506c:	00409270 	.word	0x00409270
  405070:	0040376d 	.word	0x0040376d
  405074:	00404b89 	.word	0x00404b89
  405078:	004037b1 	.word	0x004037b1
  40507c:	004091bc 	.word	0x004091bc
  405080:	004091c8 	.word	0x004091c8
  405084:	0040231d 	.word	0x0040231d
  405088:	20400038 	.word	0x20400038
  40508c:	00400345 	.word	0x00400345
  405090:	00409298 	.word	0x00409298
  405094:	004092c8 	.word	0x004092c8
  405098:	00400c29 	.word	0x00400c29
  40509c:	00400371 	.word	0x00400371
  4050a0:	004092f8 	.word	0x004092f8
  4050a4:	0040930c 	.word	0x0040930c
  4050a8:	00409334 	.word	0x00409334
  4050ac:	004020cd 	.word	0x004020cd
  4050b0:	20401500 	.word	0x20401500
  4050b4:	20400040 	.word	0x20400040
  4050b8:	004037c5 	.word	0x004037c5
  4050bc:	00409350 	.word	0x00409350
  4050c0:	004038a5 	.word	0x004038a5
  4050c4:	00409384 	.word	0x00409384
  4050c8:	00403a79 	.word	0x00403a79
  4050cc:	004093ac 	.word	0x004093ac

004050d0 <__libc_init_array>:
  4050d0:	b570      	push	{r4, r5, r6, lr}
  4050d2:	4e0f      	ldr	r6, [pc, #60]	; (405110 <__libc_init_array+0x40>)
  4050d4:	4d0f      	ldr	r5, [pc, #60]	; (405114 <__libc_init_array+0x44>)
  4050d6:	1b76      	subs	r6, r6, r5
  4050d8:	10b6      	asrs	r6, r6, #2
  4050da:	bf18      	it	ne
  4050dc:	2400      	movne	r4, #0
  4050de:	d005      	beq.n	4050ec <__libc_init_array+0x1c>
  4050e0:	3401      	adds	r4, #1
  4050e2:	f855 3b04 	ldr.w	r3, [r5], #4
  4050e6:	4798      	blx	r3
  4050e8:	42a6      	cmp	r6, r4
  4050ea:	d1f9      	bne.n	4050e0 <__libc_init_array+0x10>
  4050ec:	4e0a      	ldr	r6, [pc, #40]	; (405118 <__libc_init_array+0x48>)
  4050ee:	4d0b      	ldr	r5, [pc, #44]	; (40511c <__libc_init_array+0x4c>)
  4050f0:	1b76      	subs	r6, r6, r5
  4050f2:	f004 f98f 	bl	409414 <_init>
  4050f6:	10b6      	asrs	r6, r6, #2
  4050f8:	bf18      	it	ne
  4050fa:	2400      	movne	r4, #0
  4050fc:	d006      	beq.n	40510c <__libc_init_array+0x3c>
  4050fe:	3401      	adds	r4, #1
  405100:	f855 3b04 	ldr.w	r3, [r5], #4
  405104:	4798      	blx	r3
  405106:	42a6      	cmp	r6, r4
  405108:	d1f9      	bne.n	4050fe <__libc_init_array+0x2e>
  40510a:	bd70      	pop	{r4, r5, r6, pc}
  40510c:	bd70      	pop	{r4, r5, r6, pc}
  40510e:	bf00      	nop
  405110:	00409420 	.word	0x00409420
  405114:	00409420 	.word	0x00409420
  405118:	00409428 	.word	0x00409428
  40511c:	00409420 	.word	0x00409420

00405120 <iprintf>:
  405120:	b40f      	push	{r0, r1, r2, r3}
  405122:	b500      	push	{lr}
  405124:	4907      	ldr	r1, [pc, #28]	; (405144 <iprintf+0x24>)
  405126:	b083      	sub	sp, #12
  405128:	ab04      	add	r3, sp, #16
  40512a:	6808      	ldr	r0, [r1, #0]
  40512c:	f853 2b04 	ldr.w	r2, [r3], #4
  405130:	6881      	ldr	r1, [r0, #8]
  405132:	9301      	str	r3, [sp, #4]
  405134:	f000 f9ce 	bl	4054d4 <_vfiprintf_r>
  405138:	b003      	add	sp, #12
  40513a:	f85d eb04 	ldr.w	lr, [sp], #4
  40513e:	b004      	add	sp, #16
  405140:	4770      	bx	lr
  405142:	bf00      	nop
  405144:	20400470 	.word	0x20400470

00405148 <memset>:
  405148:	b470      	push	{r4, r5, r6}
  40514a:	0784      	lsls	r4, r0, #30
  40514c:	d046      	beq.n	4051dc <memset+0x94>
  40514e:	1e54      	subs	r4, r2, #1
  405150:	2a00      	cmp	r2, #0
  405152:	d041      	beq.n	4051d8 <memset+0x90>
  405154:	b2cd      	uxtb	r5, r1
  405156:	4603      	mov	r3, r0
  405158:	e002      	b.n	405160 <memset+0x18>
  40515a:	1e62      	subs	r2, r4, #1
  40515c:	b3e4      	cbz	r4, 4051d8 <memset+0x90>
  40515e:	4614      	mov	r4, r2
  405160:	f803 5b01 	strb.w	r5, [r3], #1
  405164:	079a      	lsls	r2, r3, #30
  405166:	d1f8      	bne.n	40515a <memset+0x12>
  405168:	2c03      	cmp	r4, #3
  40516a:	d92e      	bls.n	4051ca <memset+0x82>
  40516c:	b2cd      	uxtb	r5, r1
  40516e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405172:	2c0f      	cmp	r4, #15
  405174:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405178:	d919      	bls.n	4051ae <memset+0x66>
  40517a:	f103 0210 	add.w	r2, r3, #16
  40517e:	4626      	mov	r6, r4
  405180:	3e10      	subs	r6, #16
  405182:	2e0f      	cmp	r6, #15
  405184:	f842 5c10 	str.w	r5, [r2, #-16]
  405188:	f842 5c0c 	str.w	r5, [r2, #-12]
  40518c:	f842 5c08 	str.w	r5, [r2, #-8]
  405190:	f842 5c04 	str.w	r5, [r2, #-4]
  405194:	f102 0210 	add.w	r2, r2, #16
  405198:	d8f2      	bhi.n	405180 <memset+0x38>
  40519a:	f1a4 0210 	sub.w	r2, r4, #16
  40519e:	f022 020f 	bic.w	r2, r2, #15
  4051a2:	f004 040f 	and.w	r4, r4, #15
  4051a6:	3210      	adds	r2, #16
  4051a8:	2c03      	cmp	r4, #3
  4051aa:	4413      	add	r3, r2
  4051ac:	d90d      	bls.n	4051ca <memset+0x82>
  4051ae:	461e      	mov	r6, r3
  4051b0:	4622      	mov	r2, r4
  4051b2:	3a04      	subs	r2, #4
  4051b4:	2a03      	cmp	r2, #3
  4051b6:	f846 5b04 	str.w	r5, [r6], #4
  4051ba:	d8fa      	bhi.n	4051b2 <memset+0x6a>
  4051bc:	1f22      	subs	r2, r4, #4
  4051be:	f022 0203 	bic.w	r2, r2, #3
  4051c2:	3204      	adds	r2, #4
  4051c4:	4413      	add	r3, r2
  4051c6:	f004 0403 	and.w	r4, r4, #3
  4051ca:	b12c      	cbz	r4, 4051d8 <memset+0x90>
  4051cc:	b2c9      	uxtb	r1, r1
  4051ce:	441c      	add	r4, r3
  4051d0:	f803 1b01 	strb.w	r1, [r3], #1
  4051d4:	42a3      	cmp	r3, r4
  4051d6:	d1fb      	bne.n	4051d0 <memset+0x88>
  4051d8:	bc70      	pop	{r4, r5, r6}
  4051da:	4770      	bx	lr
  4051dc:	4614      	mov	r4, r2
  4051de:	4603      	mov	r3, r0
  4051e0:	e7c2      	b.n	405168 <memset+0x20>
  4051e2:	bf00      	nop

004051e4 <setbuf>:
  4051e4:	2900      	cmp	r1, #0
  4051e6:	bf0c      	ite	eq
  4051e8:	2202      	moveq	r2, #2
  4051ea:	2200      	movne	r2, #0
  4051ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4051f0:	f000 b800 	b.w	4051f4 <setvbuf>

004051f4 <setvbuf>:
  4051f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4051f8:	4c51      	ldr	r4, [pc, #324]	; (405340 <setvbuf+0x14c>)
  4051fa:	6825      	ldr	r5, [r4, #0]
  4051fc:	b083      	sub	sp, #12
  4051fe:	4604      	mov	r4, r0
  405200:	460f      	mov	r7, r1
  405202:	4690      	mov	r8, r2
  405204:	461e      	mov	r6, r3
  405206:	b115      	cbz	r5, 40520e <setvbuf+0x1a>
  405208:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40520a:	2b00      	cmp	r3, #0
  40520c:	d079      	beq.n	405302 <setvbuf+0x10e>
  40520e:	f1b8 0f02 	cmp.w	r8, #2
  405212:	d004      	beq.n	40521e <setvbuf+0x2a>
  405214:	f1b8 0f01 	cmp.w	r8, #1
  405218:	d87f      	bhi.n	40531a <setvbuf+0x126>
  40521a:	2e00      	cmp	r6, #0
  40521c:	db7d      	blt.n	40531a <setvbuf+0x126>
  40521e:	4621      	mov	r1, r4
  405220:	4628      	mov	r0, r5
  405222:	f001 f9a3 	bl	40656c <_fflush_r>
  405226:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405228:	b141      	cbz	r1, 40523c <setvbuf+0x48>
  40522a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40522e:	4299      	cmp	r1, r3
  405230:	d002      	beq.n	405238 <setvbuf+0x44>
  405232:	4628      	mov	r0, r5
  405234:	f001 faf8 	bl	406828 <_free_r>
  405238:	2300      	movs	r3, #0
  40523a:	6323      	str	r3, [r4, #48]	; 0x30
  40523c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405240:	2200      	movs	r2, #0
  405242:	61a2      	str	r2, [r4, #24]
  405244:	6062      	str	r2, [r4, #4]
  405246:	061a      	lsls	r2, r3, #24
  405248:	d454      	bmi.n	4052f4 <setvbuf+0x100>
  40524a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40524e:	f023 0303 	bic.w	r3, r3, #3
  405252:	f1b8 0f02 	cmp.w	r8, #2
  405256:	81a3      	strh	r3, [r4, #12]
  405258:	d039      	beq.n	4052ce <setvbuf+0xda>
  40525a:	ab01      	add	r3, sp, #4
  40525c:	466a      	mov	r2, sp
  40525e:	4621      	mov	r1, r4
  405260:	4628      	mov	r0, r5
  405262:	f001 fd7f 	bl	406d64 <__swhatbuf_r>
  405266:	89a3      	ldrh	r3, [r4, #12]
  405268:	4318      	orrs	r0, r3
  40526a:	81a0      	strh	r0, [r4, #12]
  40526c:	b326      	cbz	r6, 4052b8 <setvbuf+0xc4>
  40526e:	b327      	cbz	r7, 4052ba <setvbuf+0xc6>
  405270:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405272:	2b00      	cmp	r3, #0
  405274:	d04d      	beq.n	405312 <setvbuf+0x11e>
  405276:	9b00      	ldr	r3, [sp, #0]
  405278:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  40527c:	6027      	str	r7, [r4, #0]
  40527e:	429e      	cmp	r6, r3
  405280:	bf1c      	itt	ne
  405282:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  405286:	81a0      	strhne	r0, [r4, #12]
  405288:	f1b8 0f01 	cmp.w	r8, #1
  40528c:	bf08      	it	eq
  40528e:	f040 0001 	orreq.w	r0, r0, #1
  405292:	b283      	uxth	r3, r0
  405294:	bf08      	it	eq
  405296:	81a0      	strheq	r0, [r4, #12]
  405298:	f003 0008 	and.w	r0, r3, #8
  40529c:	b280      	uxth	r0, r0
  40529e:	6127      	str	r7, [r4, #16]
  4052a0:	6166      	str	r6, [r4, #20]
  4052a2:	b318      	cbz	r0, 4052ec <setvbuf+0xf8>
  4052a4:	f013 0001 	ands.w	r0, r3, #1
  4052a8:	d02f      	beq.n	40530a <setvbuf+0x116>
  4052aa:	2000      	movs	r0, #0
  4052ac:	4276      	negs	r6, r6
  4052ae:	61a6      	str	r6, [r4, #24]
  4052b0:	60a0      	str	r0, [r4, #8]
  4052b2:	b003      	add	sp, #12
  4052b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4052b8:	9e00      	ldr	r6, [sp, #0]
  4052ba:	4630      	mov	r0, r6
  4052bc:	f001 fdc6 	bl	406e4c <malloc>
  4052c0:	4607      	mov	r7, r0
  4052c2:	b368      	cbz	r0, 405320 <setvbuf+0x12c>
  4052c4:	89a3      	ldrh	r3, [r4, #12]
  4052c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4052ca:	81a3      	strh	r3, [r4, #12]
  4052cc:	e7d0      	b.n	405270 <setvbuf+0x7c>
  4052ce:	2000      	movs	r0, #0
  4052d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4052d4:	f043 0302 	orr.w	r3, r3, #2
  4052d8:	2500      	movs	r5, #0
  4052da:	2101      	movs	r1, #1
  4052dc:	81a3      	strh	r3, [r4, #12]
  4052de:	60a5      	str	r5, [r4, #8]
  4052e0:	6022      	str	r2, [r4, #0]
  4052e2:	6122      	str	r2, [r4, #16]
  4052e4:	6161      	str	r1, [r4, #20]
  4052e6:	b003      	add	sp, #12
  4052e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4052ec:	60a0      	str	r0, [r4, #8]
  4052ee:	b003      	add	sp, #12
  4052f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4052f4:	6921      	ldr	r1, [r4, #16]
  4052f6:	4628      	mov	r0, r5
  4052f8:	f001 fa96 	bl	406828 <_free_r>
  4052fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405300:	e7a3      	b.n	40524a <setvbuf+0x56>
  405302:	4628      	mov	r0, r5
  405304:	f001 f9c6 	bl	406694 <__sinit>
  405308:	e781      	b.n	40520e <setvbuf+0x1a>
  40530a:	60a6      	str	r6, [r4, #8]
  40530c:	b003      	add	sp, #12
  40530e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405312:	4628      	mov	r0, r5
  405314:	f001 f9be 	bl	406694 <__sinit>
  405318:	e7ad      	b.n	405276 <setvbuf+0x82>
  40531a:	f04f 30ff 	mov.w	r0, #4294967295
  40531e:	e7e2      	b.n	4052e6 <setvbuf+0xf2>
  405320:	f8dd 9000 	ldr.w	r9, [sp]
  405324:	45b1      	cmp	r9, r6
  405326:	d006      	beq.n	405336 <setvbuf+0x142>
  405328:	4648      	mov	r0, r9
  40532a:	f001 fd8f 	bl	406e4c <malloc>
  40532e:	4607      	mov	r7, r0
  405330:	b108      	cbz	r0, 405336 <setvbuf+0x142>
  405332:	464e      	mov	r6, r9
  405334:	e7c6      	b.n	4052c4 <setvbuf+0xd0>
  405336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40533a:	f04f 30ff 	mov.w	r0, #4294967295
  40533e:	e7c7      	b.n	4052d0 <setvbuf+0xdc>
  405340:	20400470 	.word	0x20400470
	...

00405380 <strlen>:
  405380:	f890 f000 	pld	[r0]
  405384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405388:	f020 0107 	bic.w	r1, r0, #7
  40538c:	f06f 0c00 	mvn.w	ip, #0
  405390:	f010 0407 	ands.w	r4, r0, #7
  405394:	f891 f020 	pld	[r1, #32]
  405398:	f040 8049 	bne.w	40542e <strlen+0xae>
  40539c:	f04f 0400 	mov.w	r4, #0
  4053a0:	f06f 0007 	mvn.w	r0, #7
  4053a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4053a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4053ac:	f100 0008 	add.w	r0, r0, #8
  4053b0:	fa82 f24c 	uadd8	r2, r2, ip
  4053b4:	faa4 f28c 	sel	r2, r4, ip
  4053b8:	fa83 f34c 	uadd8	r3, r3, ip
  4053bc:	faa2 f38c 	sel	r3, r2, ip
  4053c0:	bb4b      	cbnz	r3, 405416 <strlen+0x96>
  4053c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4053c6:	fa82 f24c 	uadd8	r2, r2, ip
  4053ca:	f100 0008 	add.w	r0, r0, #8
  4053ce:	faa4 f28c 	sel	r2, r4, ip
  4053d2:	fa83 f34c 	uadd8	r3, r3, ip
  4053d6:	faa2 f38c 	sel	r3, r2, ip
  4053da:	b9e3      	cbnz	r3, 405416 <strlen+0x96>
  4053dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4053e0:	fa82 f24c 	uadd8	r2, r2, ip
  4053e4:	f100 0008 	add.w	r0, r0, #8
  4053e8:	faa4 f28c 	sel	r2, r4, ip
  4053ec:	fa83 f34c 	uadd8	r3, r3, ip
  4053f0:	faa2 f38c 	sel	r3, r2, ip
  4053f4:	b97b      	cbnz	r3, 405416 <strlen+0x96>
  4053f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4053fa:	f101 0120 	add.w	r1, r1, #32
  4053fe:	fa82 f24c 	uadd8	r2, r2, ip
  405402:	f100 0008 	add.w	r0, r0, #8
  405406:	faa4 f28c 	sel	r2, r4, ip
  40540a:	fa83 f34c 	uadd8	r3, r3, ip
  40540e:	faa2 f38c 	sel	r3, r2, ip
  405412:	2b00      	cmp	r3, #0
  405414:	d0c6      	beq.n	4053a4 <strlen+0x24>
  405416:	2a00      	cmp	r2, #0
  405418:	bf04      	itt	eq
  40541a:	3004      	addeq	r0, #4
  40541c:	461a      	moveq	r2, r3
  40541e:	ba12      	rev	r2, r2
  405420:	fab2 f282 	clz	r2, r2
  405424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40542c:	4770      	bx	lr
  40542e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405432:	f004 0503 	and.w	r5, r4, #3
  405436:	f1c4 0000 	rsb	r0, r4, #0
  40543a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40543e:	f014 0f04 	tst.w	r4, #4
  405442:	f891 f040 	pld	[r1, #64]	; 0x40
  405446:	fa0c f505 	lsl.w	r5, ip, r5
  40544a:	ea62 0205 	orn	r2, r2, r5
  40544e:	bf1c      	itt	ne
  405450:	ea63 0305 	ornne	r3, r3, r5
  405454:	4662      	movne	r2, ip
  405456:	f04f 0400 	mov.w	r4, #0
  40545a:	e7a9      	b.n	4053b0 <strlen+0x30>

0040545c <__sprint_r.part.0>:
  40545c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40545e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405462:	049c      	lsls	r4, r3, #18
  405464:	4692      	mov	sl, r2
  405466:	d52c      	bpl.n	4054c2 <__sprint_r.part.0+0x66>
  405468:	6893      	ldr	r3, [r2, #8]
  40546a:	6812      	ldr	r2, [r2, #0]
  40546c:	b33b      	cbz	r3, 4054be <__sprint_r.part.0+0x62>
  40546e:	460f      	mov	r7, r1
  405470:	4680      	mov	r8, r0
  405472:	f102 0908 	add.w	r9, r2, #8
  405476:	e919 0060 	ldmdb	r9, {r5, r6}
  40547a:	08b6      	lsrs	r6, r6, #2
  40547c:	d017      	beq.n	4054ae <__sprint_r.part.0+0x52>
  40547e:	3d04      	subs	r5, #4
  405480:	2400      	movs	r4, #0
  405482:	e001      	b.n	405488 <__sprint_r.part.0+0x2c>
  405484:	42a6      	cmp	r6, r4
  405486:	d010      	beq.n	4054aa <__sprint_r.part.0+0x4e>
  405488:	463a      	mov	r2, r7
  40548a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40548e:	4640      	mov	r0, r8
  405490:	f001 f96a 	bl	406768 <_fputwc_r>
  405494:	1c43      	adds	r3, r0, #1
  405496:	f104 0401 	add.w	r4, r4, #1
  40549a:	d1f3      	bne.n	405484 <__sprint_r.part.0+0x28>
  40549c:	2300      	movs	r3, #0
  40549e:	f8ca 3008 	str.w	r3, [sl, #8]
  4054a2:	f8ca 3004 	str.w	r3, [sl, #4]
  4054a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4054ae:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4054b2:	f8ca 3008 	str.w	r3, [sl, #8]
  4054b6:	f109 0908 	add.w	r9, r9, #8
  4054ba:	2b00      	cmp	r3, #0
  4054bc:	d1db      	bne.n	405476 <__sprint_r.part.0+0x1a>
  4054be:	2000      	movs	r0, #0
  4054c0:	e7ec      	b.n	40549c <__sprint_r.part.0+0x40>
  4054c2:	f001 fa99 	bl	4069f8 <__sfvwrite_r>
  4054c6:	2300      	movs	r3, #0
  4054c8:	f8ca 3008 	str.w	r3, [sl, #8]
  4054cc:	f8ca 3004 	str.w	r3, [sl, #4]
  4054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004054d4 <_vfiprintf_r>:
  4054d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054d8:	b0ab      	sub	sp, #172	; 0xac
  4054da:	461c      	mov	r4, r3
  4054dc:	9100      	str	r1, [sp, #0]
  4054de:	4690      	mov	r8, r2
  4054e0:	9304      	str	r3, [sp, #16]
  4054e2:	9005      	str	r0, [sp, #20]
  4054e4:	b118      	cbz	r0, 4054ee <_vfiprintf_r+0x1a>
  4054e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4054e8:	2b00      	cmp	r3, #0
  4054ea:	f000 80de 	beq.w	4056aa <_vfiprintf_r+0x1d6>
  4054ee:	9800      	ldr	r0, [sp, #0]
  4054f0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  4054f4:	b28a      	uxth	r2, r1
  4054f6:	0495      	lsls	r5, r2, #18
  4054f8:	d407      	bmi.n	40550a <_vfiprintf_r+0x36>
  4054fa:	6e43      	ldr	r3, [r0, #100]	; 0x64
  4054fc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  405500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405504:	8182      	strh	r2, [r0, #12]
  405506:	6643      	str	r3, [r0, #100]	; 0x64
  405508:	b292      	uxth	r2, r2
  40550a:	0711      	lsls	r1, r2, #28
  40550c:	f140 80b1 	bpl.w	405672 <_vfiprintf_r+0x19e>
  405510:	9b00      	ldr	r3, [sp, #0]
  405512:	691b      	ldr	r3, [r3, #16]
  405514:	2b00      	cmp	r3, #0
  405516:	f000 80ac 	beq.w	405672 <_vfiprintf_r+0x19e>
  40551a:	f002 021a 	and.w	r2, r2, #26
  40551e:	2a0a      	cmp	r2, #10
  405520:	f000 80b5 	beq.w	40568e <_vfiprintf_r+0x1ba>
  405524:	2300      	movs	r3, #0
  405526:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40552a:	9302      	str	r3, [sp, #8]
  40552c:	930f      	str	r3, [sp, #60]	; 0x3c
  40552e:	930e      	str	r3, [sp, #56]	; 0x38
  405530:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  405534:	46da      	mov	sl, fp
  405536:	f898 3000 	ldrb.w	r3, [r8]
  40553a:	4644      	mov	r4, r8
  40553c:	b1fb      	cbz	r3, 40557e <_vfiprintf_r+0xaa>
  40553e:	2b25      	cmp	r3, #37	; 0x25
  405540:	d102      	bne.n	405548 <_vfiprintf_r+0x74>
  405542:	e01c      	b.n	40557e <_vfiprintf_r+0xaa>
  405544:	2b25      	cmp	r3, #37	; 0x25
  405546:	d003      	beq.n	405550 <_vfiprintf_r+0x7c>
  405548:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40554c:	2b00      	cmp	r3, #0
  40554e:	d1f9      	bne.n	405544 <_vfiprintf_r+0x70>
  405550:	ebc8 0504 	rsb	r5, r8, r4
  405554:	b19d      	cbz	r5, 40557e <_vfiprintf_r+0xaa>
  405556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40555a:	f8ca 8000 	str.w	r8, [sl]
  40555e:	3301      	adds	r3, #1
  405560:	442a      	add	r2, r5
  405562:	2b07      	cmp	r3, #7
  405564:	f8ca 5004 	str.w	r5, [sl, #4]
  405568:	920f      	str	r2, [sp, #60]	; 0x3c
  40556a:	930e      	str	r3, [sp, #56]	; 0x38
  40556c:	dd7b      	ble.n	405666 <_vfiprintf_r+0x192>
  40556e:	2a00      	cmp	r2, #0
  405570:	f040 8528 	bne.w	405fc4 <_vfiprintf_r+0xaf0>
  405574:	9b02      	ldr	r3, [sp, #8]
  405576:	920e      	str	r2, [sp, #56]	; 0x38
  405578:	442b      	add	r3, r5
  40557a:	46da      	mov	sl, fp
  40557c:	9302      	str	r3, [sp, #8]
  40557e:	7823      	ldrb	r3, [r4, #0]
  405580:	2b00      	cmp	r3, #0
  405582:	f000 843e 	beq.w	405e02 <_vfiprintf_r+0x92e>
  405586:	2100      	movs	r1, #0
  405588:	f04f 0300 	mov.w	r3, #0
  40558c:	f04f 32ff 	mov.w	r2, #4294967295
  405590:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405594:	f104 0801 	add.w	r8, r4, #1
  405598:	7863      	ldrb	r3, [r4, #1]
  40559a:	9201      	str	r2, [sp, #4]
  40559c:	4608      	mov	r0, r1
  40559e:	460e      	mov	r6, r1
  4055a0:	460c      	mov	r4, r1
  4055a2:	f108 0801 	add.w	r8, r8, #1
  4055a6:	f1a3 0220 	sub.w	r2, r3, #32
  4055aa:	2a58      	cmp	r2, #88	; 0x58
  4055ac:	f200 8393 	bhi.w	405cd6 <_vfiprintf_r+0x802>
  4055b0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4055b4:	03910346 	.word	0x03910346
  4055b8:	034e0391 	.word	0x034e0391
  4055bc:	03910391 	.word	0x03910391
  4055c0:	03910391 	.word	0x03910391
  4055c4:	03910391 	.word	0x03910391
  4055c8:	02670289 	.word	0x02670289
  4055cc:	00800391 	.word	0x00800391
  4055d0:	0391026c 	.word	0x0391026c
  4055d4:	025901c6 	.word	0x025901c6
  4055d8:	02590259 	.word	0x02590259
  4055dc:	02590259 	.word	0x02590259
  4055e0:	02590259 	.word	0x02590259
  4055e4:	02590259 	.word	0x02590259
  4055e8:	03910391 	.word	0x03910391
  4055ec:	03910391 	.word	0x03910391
  4055f0:	03910391 	.word	0x03910391
  4055f4:	03910391 	.word	0x03910391
  4055f8:	03910391 	.word	0x03910391
  4055fc:	039101cb 	.word	0x039101cb
  405600:	03910391 	.word	0x03910391
  405604:	03910391 	.word	0x03910391
  405608:	03910391 	.word	0x03910391
  40560c:	03910391 	.word	0x03910391
  405610:	02140391 	.word	0x02140391
  405614:	03910391 	.word	0x03910391
  405618:	03910391 	.word	0x03910391
  40561c:	02ee0391 	.word	0x02ee0391
  405620:	03910391 	.word	0x03910391
  405624:	03910311 	.word	0x03910311
  405628:	03910391 	.word	0x03910391
  40562c:	03910391 	.word	0x03910391
  405630:	03910391 	.word	0x03910391
  405634:	03910391 	.word	0x03910391
  405638:	03340391 	.word	0x03340391
  40563c:	0391038a 	.word	0x0391038a
  405640:	03910391 	.word	0x03910391
  405644:	038a0367 	.word	0x038a0367
  405648:	03910391 	.word	0x03910391
  40564c:	0391036c 	.word	0x0391036c
  405650:	02950379 	.word	0x02950379
  405654:	02e90085 	.word	0x02e90085
  405658:	029b0391 	.word	0x029b0391
  40565c:	02ba0391 	.word	0x02ba0391
  405660:	03910391 	.word	0x03910391
  405664:	0353      	.short	0x0353
  405666:	f10a 0a08 	add.w	sl, sl, #8
  40566a:	9b02      	ldr	r3, [sp, #8]
  40566c:	442b      	add	r3, r5
  40566e:	9302      	str	r3, [sp, #8]
  405670:	e785      	b.n	40557e <_vfiprintf_r+0xaa>
  405672:	9900      	ldr	r1, [sp, #0]
  405674:	9805      	ldr	r0, [sp, #20]
  405676:	f000 fe61 	bl	40633c <__swsetup_r>
  40567a:	2800      	cmp	r0, #0
  40567c:	f040 8558 	bne.w	406130 <_vfiprintf_r+0xc5c>
  405680:	9b00      	ldr	r3, [sp, #0]
  405682:	899a      	ldrh	r2, [r3, #12]
  405684:	f002 021a 	and.w	r2, r2, #26
  405688:	2a0a      	cmp	r2, #10
  40568a:	f47f af4b 	bne.w	405524 <_vfiprintf_r+0x50>
  40568e:	9900      	ldr	r1, [sp, #0]
  405690:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  405694:	2b00      	cmp	r3, #0
  405696:	f6ff af45 	blt.w	405524 <_vfiprintf_r+0x50>
  40569a:	4623      	mov	r3, r4
  40569c:	4642      	mov	r2, r8
  40569e:	9805      	ldr	r0, [sp, #20]
  4056a0:	f000 fe16 	bl	4062d0 <__sbprintf>
  4056a4:	b02b      	add	sp, #172	; 0xac
  4056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056aa:	f000 fff3 	bl	406694 <__sinit>
  4056ae:	e71e      	b.n	4054ee <_vfiprintf_r+0x1a>
  4056b0:	4264      	negs	r4, r4
  4056b2:	9304      	str	r3, [sp, #16]
  4056b4:	f046 0604 	orr.w	r6, r6, #4
  4056b8:	f898 3000 	ldrb.w	r3, [r8]
  4056bc:	e771      	b.n	4055a2 <_vfiprintf_r+0xce>
  4056be:	2130      	movs	r1, #48	; 0x30
  4056c0:	9804      	ldr	r0, [sp, #16]
  4056c2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  4056c6:	9901      	ldr	r1, [sp, #4]
  4056c8:	9406      	str	r4, [sp, #24]
  4056ca:	f04f 0300 	mov.w	r3, #0
  4056ce:	2278      	movs	r2, #120	; 0x78
  4056d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4056d4:	2900      	cmp	r1, #0
  4056d6:	4603      	mov	r3, r0
  4056d8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  4056dc:	6804      	ldr	r4, [r0, #0]
  4056de:	f103 0304 	add.w	r3, r3, #4
  4056e2:	f04f 0500 	mov.w	r5, #0
  4056e6:	f046 0202 	orr.w	r2, r6, #2
  4056ea:	f2c0 8525 	blt.w	406138 <_vfiprintf_r+0xc64>
  4056ee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4056f2:	ea54 0205 	orrs.w	r2, r4, r5
  4056f6:	f046 0602 	orr.w	r6, r6, #2
  4056fa:	9304      	str	r3, [sp, #16]
  4056fc:	f040 84bf 	bne.w	40607e <_vfiprintf_r+0xbaa>
  405700:	48b3      	ldr	r0, [pc, #716]	; (4059d0 <_vfiprintf_r+0x4fc>)
  405702:	9b01      	ldr	r3, [sp, #4]
  405704:	2b00      	cmp	r3, #0
  405706:	f040 841c 	bne.w	405f42 <_vfiprintf_r+0xa6e>
  40570a:	4699      	mov	r9, r3
  40570c:	2300      	movs	r3, #0
  40570e:	9301      	str	r3, [sp, #4]
  405710:	9303      	str	r3, [sp, #12]
  405712:	465f      	mov	r7, fp
  405714:	9b01      	ldr	r3, [sp, #4]
  405716:	9a03      	ldr	r2, [sp, #12]
  405718:	4293      	cmp	r3, r2
  40571a:	bfb8      	it	lt
  40571c:	4613      	movlt	r3, r2
  40571e:	461d      	mov	r5, r3
  405720:	f1b9 0f00 	cmp.w	r9, #0
  405724:	d000      	beq.n	405728 <_vfiprintf_r+0x254>
  405726:	3501      	adds	r5, #1
  405728:	f016 0302 	ands.w	r3, r6, #2
  40572c:	9307      	str	r3, [sp, #28]
  40572e:	bf18      	it	ne
  405730:	3502      	addne	r5, #2
  405732:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  405736:	9308      	str	r3, [sp, #32]
  405738:	f040 82f1 	bne.w	405d1e <_vfiprintf_r+0x84a>
  40573c:	9b06      	ldr	r3, [sp, #24]
  40573e:	1b5c      	subs	r4, r3, r5
  405740:	2c00      	cmp	r4, #0
  405742:	f340 82ec 	ble.w	405d1e <_vfiprintf_r+0x84a>
  405746:	2c10      	cmp	r4, #16
  405748:	f340 8556 	ble.w	4061f8 <_vfiprintf_r+0xd24>
  40574c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 4059d4 <_vfiprintf_r+0x500>
  405750:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  405754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405756:	46d4      	mov	ip, sl
  405758:	2310      	movs	r3, #16
  40575a:	46c2      	mov	sl, r8
  40575c:	4670      	mov	r0, lr
  40575e:	46a8      	mov	r8, r5
  405760:	464d      	mov	r5, r9
  405762:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405766:	e007      	b.n	405778 <_vfiprintf_r+0x2a4>
  405768:	f100 0e02 	add.w	lr, r0, #2
  40576c:	f10c 0c08 	add.w	ip, ip, #8
  405770:	4608      	mov	r0, r1
  405772:	3c10      	subs	r4, #16
  405774:	2c10      	cmp	r4, #16
  405776:	dd13      	ble.n	4057a0 <_vfiprintf_r+0x2cc>
  405778:	1c41      	adds	r1, r0, #1
  40577a:	3210      	adds	r2, #16
  40577c:	2907      	cmp	r1, #7
  40577e:	920f      	str	r2, [sp, #60]	; 0x3c
  405780:	f8cc 5000 	str.w	r5, [ip]
  405784:	f8cc 3004 	str.w	r3, [ip, #4]
  405788:	910e      	str	r1, [sp, #56]	; 0x38
  40578a:	dded      	ble.n	405768 <_vfiprintf_r+0x294>
  40578c:	2a00      	cmp	r2, #0
  40578e:	f040 82b7 	bne.w	405d00 <_vfiprintf_r+0x82c>
  405792:	3c10      	subs	r4, #16
  405794:	2c10      	cmp	r4, #16
  405796:	4610      	mov	r0, r2
  405798:	f04f 0e01 	mov.w	lr, #1
  40579c:	46dc      	mov	ip, fp
  40579e:	dceb      	bgt.n	405778 <_vfiprintf_r+0x2a4>
  4057a0:	46a9      	mov	r9, r5
  4057a2:	4670      	mov	r0, lr
  4057a4:	4645      	mov	r5, r8
  4057a6:	46d0      	mov	r8, sl
  4057a8:	46e2      	mov	sl, ip
  4057aa:	4422      	add	r2, r4
  4057ac:	2807      	cmp	r0, #7
  4057ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4057b0:	f8ca 9000 	str.w	r9, [sl]
  4057b4:	f8ca 4004 	str.w	r4, [sl, #4]
  4057b8:	900e      	str	r0, [sp, #56]	; 0x38
  4057ba:	f300 8375 	bgt.w	405ea8 <_vfiprintf_r+0x9d4>
  4057be:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4057c2:	f10a 0a08 	add.w	sl, sl, #8
  4057c6:	f100 0e01 	add.w	lr, r0, #1
  4057ca:	2b00      	cmp	r3, #0
  4057cc:	f040 82b0 	bne.w	405d30 <_vfiprintf_r+0x85c>
  4057d0:	9b07      	ldr	r3, [sp, #28]
  4057d2:	2b00      	cmp	r3, #0
  4057d4:	f000 82c3 	beq.w	405d5e <_vfiprintf_r+0x88a>
  4057d8:	3202      	adds	r2, #2
  4057da:	a90c      	add	r1, sp, #48	; 0x30
  4057dc:	2302      	movs	r3, #2
  4057de:	f1be 0f07 	cmp.w	lr, #7
  4057e2:	920f      	str	r2, [sp, #60]	; 0x3c
  4057e4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4057e8:	e88a 000a 	stmia.w	sl, {r1, r3}
  4057ec:	f340 8378 	ble.w	405ee0 <_vfiprintf_r+0xa0c>
  4057f0:	2a00      	cmp	r2, #0
  4057f2:	f040 840a 	bne.w	40600a <_vfiprintf_r+0xb36>
  4057f6:	9b08      	ldr	r3, [sp, #32]
  4057f8:	2b80      	cmp	r3, #128	; 0x80
  4057fa:	f04f 0e01 	mov.w	lr, #1
  4057fe:	4610      	mov	r0, r2
  405800:	46da      	mov	sl, fp
  405802:	f040 82b0 	bne.w	405d66 <_vfiprintf_r+0x892>
  405806:	9b06      	ldr	r3, [sp, #24]
  405808:	1b5c      	subs	r4, r3, r5
  40580a:	2c00      	cmp	r4, #0
  40580c:	f340 82ab 	ble.w	405d66 <_vfiprintf_r+0x892>
  405810:	2c10      	cmp	r4, #16
  405812:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 4059d8 <_vfiprintf_r+0x504>
  405816:	f340 850b 	ble.w	406230 <_vfiprintf_r+0xd5c>
  40581a:	46d6      	mov	lr, sl
  40581c:	2310      	movs	r3, #16
  40581e:	46c2      	mov	sl, r8
  405820:	46a8      	mov	r8, r5
  405822:	464d      	mov	r5, r9
  405824:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405828:	e007      	b.n	40583a <_vfiprintf_r+0x366>
  40582a:	f100 0c02 	add.w	ip, r0, #2
  40582e:	f10e 0e08 	add.w	lr, lr, #8
  405832:	4608      	mov	r0, r1
  405834:	3c10      	subs	r4, #16
  405836:	2c10      	cmp	r4, #16
  405838:	dd13      	ble.n	405862 <_vfiprintf_r+0x38e>
  40583a:	1c41      	adds	r1, r0, #1
  40583c:	3210      	adds	r2, #16
  40583e:	2907      	cmp	r1, #7
  405840:	920f      	str	r2, [sp, #60]	; 0x3c
  405842:	f8ce 5000 	str.w	r5, [lr]
  405846:	f8ce 3004 	str.w	r3, [lr, #4]
  40584a:	910e      	str	r1, [sp, #56]	; 0x38
  40584c:	dded      	ble.n	40582a <_vfiprintf_r+0x356>
  40584e:	2a00      	cmp	r2, #0
  405850:	f040 8315 	bne.w	405e7e <_vfiprintf_r+0x9aa>
  405854:	3c10      	subs	r4, #16
  405856:	2c10      	cmp	r4, #16
  405858:	f04f 0c01 	mov.w	ip, #1
  40585c:	4610      	mov	r0, r2
  40585e:	46de      	mov	lr, fp
  405860:	dceb      	bgt.n	40583a <_vfiprintf_r+0x366>
  405862:	46a9      	mov	r9, r5
  405864:	4645      	mov	r5, r8
  405866:	46d0      	mov	r8, sl
  405868:	46f2      	mov	sl, lr
  40586a:	4422      	add	r2, r4
  40586c:	f1bc 0f07 	cmp.w	ip, #7
  405870:	920f      	str	r2, [sp, #60]	; 0x3c
  405872:	f8ca 9000 	str.w	r9, [sl]
  405876:	f8ca 4004 	str.w	r4, [sl, #4]
  40587a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  40587e:	f300 83d2 	bgt.w	406026 <_vfiprintf_r+0xb52>
  405882:	9b01      	ldr	r3, [sp, #4]
  405884:	9903      	ldr	r1, [sp, #12]
  405886:	1a5c      	subs	r4, r3, r1
  405888:	2c00      	cmp	r4, #0
  40588a:	f10a 0a08 	add.w	sl, sl, #8
  40588e:	f10c 0e01 	add.w	lr, ip, #1
  405892:	4660      	mov	r0, ip
  405894:	f300 826d 	bgt.w	405d72 <_vfiprintf_r+0x89e>
  405898:	9903      	ldr	r1, [sp, #12]
  40589a:	f8ca 7000 	str.w	r7, [sl]
  40589e:	440a      	add	r2, r1
  4058a0:	f1be 0f07 	cmp.w	lr, #7
  4058a4:	920f      	str	r2, [sp, #60]	; 0x3c
  4058a6:	f8ca 1004 	str.w	r1, [sl, #4]
  4058aa:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4058ae:	f340 82ce 	ble.w	405e4e <_vfiprintf_r+0x97a>
  4058b2:	2a00      	cmp	r2, #0
  4058b4:	f040 833a 	bne.w	405f2c <_vfiprintf_r+0xa58>
  4058b8:	0770      	lsls	r0, r6, #29
  4058ba:	920e      	str	r2, [sp, #56]	; 0x38
  4058bc:	d538      	bpl.n	405930 <_vfiprintf_r+0x45c>
  4058be:	9b06      	ldr	r3, [sp, #24]
  4058c0:	1b5c      	subs	r4, r3, r5
  4058c2:	2c00      	cmp	r4, #0
  4058c4:	dd34      	ble.n	405930 <_vfiprintf_r+0x45c>
  4058c6:	46da      	mov	sl, fp
  4058c8:	2c10      	cmp	r4, #16
  4058ca:	f340 84ab 	ble.w	406224 <_vfiprintf_r+0xd50>
  4058ce:	f8df 9104 	ldr.w	r9, [pc, #260]	; 4059d4 <_vfiprintf_r+0x500>
  4058d2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4058d4:	464f      	mov	r7, r9
  4058d6:	2610      	movs	r6, #16
  4058d8:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4058dc:	e006      	b.n	4058ec <_vfiprintf_r+0x418>
  4058de:	1c88      	adds	r0, r1, #2
  4058e0:	f10a 0a08 	add.w	sl, sl, #8
  4058e4:	4619      	mov	r1, r3
  4058e6:	3c10      	subs	r4, #16
  4058e8:	2c10      	cmp	r4, #16
  4058ea:	dd13      	ble.n	405914 <_vfiprintf_r+0x440>
  4058ec:	1c4b      	adds	r3, r1, #1
  4058ee:	3210      	adds	r2, #16
  4058f0:	2b07      	cmp	r3, #7
  4058f2:	920f      	str	r2, [sp, #60]	; 0x3c
  4058f4:	f8ca 7000 	str.w	r7, [sl]
  4058f8:	f8ca 6004 	str.w	r6, [sl, #4]
  4058fc:	930e      	str	r3, [sp, #56]	; 0x38
  4058fe:	ddee      	ble.n	4058de <_vfiprintf_r+0x40a>
  405900:	2a00      	cmp	r2, #0
  405902:	f040 828e 	bne.w	405e22 <_vfiprintf_r+0x94e>
  405906:	3c10      	subs	r4, #16
  405908:	2c10      	cmp	r4, #16
  40590a:	f04f 0001 	mov.w	r0, #1
  40590e:	4611      	mov	r1, r2
  405910:	46da      	mov	sl, fp
  405912:	dceb      	bgt.n	4058ec <_vfiprintf_r+0x418>
  405914:	46b9      	mov	r9, r7
  405916:	4422      	add	r2, r4
  405918:	2807      	cmp	r0, #7
  40591a:	920f      	str	r2, [sp, #60]	; 0x3c
  40591c:	f8ca 9000 	str.w	r9, [sl]
  405920:	f8ca 4004 	str.w	r4, [sl, #4]
  405924:	900e      	str	r0, [sp, #56]	; 0x38
  405926:	f340 829b 	ble.w	405e60 <_vfiprintf_r+0x98c>
  40592a:	2a00      	cmp	r2, #0
  40592c:	f040 8425 	bne.w	40617a <_vfiprintf_r+0xca6>
  405930:	9b02      	ldr	r3, [sp, #8]
  405932:	9a06      	ldr	r2, [sp, #24]
  405934:	42aa      	cmp	r2, r5
  405936:	bfac      	ite	ge
  405938:	189b      	addge	r3, r3, r2
  40593a:	195b      	addlt	r3, r3, r5
  40593c:	9302      	str	r3, [sp, #8]
  40593e:	e299      	b.n	405e74 <_vfiprintf_r+0x9a0>
  405940:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  405944:	f898 3000 	ldrb.w	r3, [r8]
  405948:	e62b      	b.n	4055a2 <_vfiprintf_r+0xce>
  40594a:	9406      	str	r4, [sp, #24]
  40594c:	2900      	cmp	r1, #0
  40594e:	f040 84af 	bne.w	4062b0 <_vfiprintf_r+0xddc>
  405952:	f046 0610 	orr.w	r6, r6, #16
  405956:	06b3      	lsls	r3, r6, #26
  405958:	f140 8312 	bpl.w	405f80 <_vfiprintf_r+0xaac>
  40595c:	9904      	ldr	r1, [sp, #16]
  40595e:	3107      	adds	r1, #7
  405960:	f021 0107 	bic.w	r1, r1, #7
  405964:	e9d1 2300 	ldrd	r2, r3, [r1]
  405968:	3108      	adds	r1, #8
  40596a:	9104      	str	r1, [sp, #16]
  40596c:	4614      	mov	r4, r2
  40596e:	461d      	mov	r5, r3
  405970:	2a00      	cmp	r2, #0
  405972:	f173 0300 	sbcs.w	r3, r3, #0
  405976:	f2c0 8386 	blt.w	406086 <_vfiprintf_r+0xbb2>
  40597a:	9b01      	ldr	r3, [sp, #4]
  40597c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405980:	2b00      	cmp	r3, #0
  405982:	f2c0 831a 	blt.w	405fba <_vfiprintf_r+0xae6>
  405986:	ea54 0305 	orrs.w	r3, r4, r5
  40598a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40598e:	f000 80ed 	beq.w	405b6c <_vfiprintf_r+0x698>
  405992:	2d00      	cmp	r5, #0
  405994:	bf08      	it	eq
  405996:	2c0a      	cmpeq	r4, #10
  405998:	f0c0 80ed 	bcc.w	405b76 <_vfiprintf_r+0x6a2>
  40599c:	465f      	mov	r7, fp
  40599e:	4620      	mov	r0, r4
  4059a0:	4629      	mov	r1, r5
  4059a2:	220a      	movs	r2, #10
  4059a4:	2300      	movs	r3, #0
  4059a6:	f002 fa47 	bl	407e38 <__aeabi_uldivmod>
  4059aa:	3230      	adds	r2, #48	; 0x30
  4059ac:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4059b0:	4620      	mov	r0, r4
  4059b2:	4629      	mov	r1, r5
  4059b4:	2300      	movs	r3, #0
  4059b6:	220a      	movs	r2, #10
  4059b8:	f002 fa3e 	bl	407e38 <__aeabi_uldivmod>
  4059bc:	4604      	mov	r4, r0
  4059be:	460d      	mov	r5, r1
  4059c0:	ea54 0305 	orrs.w	r3, r4, r5
  4059c4:	d1eb      	bne.n	40599e <_vfiprintf_r+0x4ca>
  4059c6:	ebc7 030b 	rsb	r3, r7, fp
  4059ca:	9303      	str	r3, [sp, #12]
  4059cc:	e6a2      	b.n	405714 <_vfiprintf_r+0x240>
  4059ce:	bf00      	nop
  4059d0:	004093e8 	.word	0x004093e8
  4059d4:	00409404 	.word	0x00409404
  4059d8:	004093c4 	.word	0x004093c4
  4059dc:	9406      	str	r4, [sp, #24]
  4059de:	2900      	cmp	r1, #0
  4059e0:	f040 8462 	bne.w	4062a8 <_vfiprintf_r+0xdd4>
  4059e4:	f046 0610 	orr.w	r6, r6, #16
  4059e8:	f016 0320 	ands.w	r3, r6, #32
  4059ec:	f000 82ae 	beq.w	405f4c <_vfiprintf_r+0xa78>
  4059f0:	9b04      	ldr	r3, [sp, #16]
  4059f2:	3307      	adds	r3, #7
  4059f4:	f023 0307 	bic.w	r3, r3, #7
  4059f8:	f04f 0200 	mov.w	r2, #0
  4059fc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  405a00:	e9d3 4500 	ldrd	r4, r5, [r3]
  405a04:	f103 0208 	add.w	r2, r3, #8
  405a08:	9b01      	ldr	r3, [sp, #4]
  405a0a:	9204      	str	r2, [sp, #16]
  405a0c:	2b00      	cmp	r3, #0
  405a0e:	f2c0 8174 	blt.w	405cfa <_vfiprintf_r+0x826>
  405a12:	ea54 0305 	orrs.w	r3, r4, r5
  405a16:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405a1a:	f040 816e 	bne.w	405cfa <_vfiprintf_r+0x826>
  405a1e:	9b01      	ldr	r3, [sp, #4]
  405a20:	2b00      	cmp	r3, #0
  405a22:	f000 8430 	beq.w	406286 <_vfiprintf_r+0xdb2>
  405a26:	f04f 0900 	mov.w	r9, #0
  405a2a:	2400      	movs	r4, #0
  405a2c:	2500      	movs	r5, #0
  405a2e:	465f      	mov	r7, fp
  405a30:	08e2      	lsrs	r2, r4, #3
  405a32:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405a36:	08e9      	lsrs	r1, r5, #3
  405a38:	f004 0307 	and.w	r3, r4, #7
  405a3c:	460d      	mov	r5, r1
  405a3e:	4614      	mov	r4, r2
  405a40:	3330      	adds	r3, #48	; 0x30
  405a42:	ea54 0205 	orrs.w	r2, r4, r5
  405a46:	f807 3d01 	strb.w	r3, [r7, #-1]!
  405a4a:	d1f1      	bne.n	405a30 <_vfiprintf_r+0x55c>
  405a4c:	07f4      	lsls	r4, r6, #31
  405a4e:	d5ba      	bpl.n	4059c6 <_vfiprintf_r+0x4f2>
  405a50:	2b30      	cmp	r3, #48	; 0x30
  405a52:	d0b8      	beq.n	4059c6 <_vfiprintf_r+0x4f2>
  405a54:	2230      	movs	r2, #48	; 0x30
  405a56:	1e7b      	subs	r3, r7, #1
  405a58:	f807 2c01 	strb.w	r2, [r7, #-1]
  405a5c:	ebc3 020b 	rsb	r2, r3, fp
  405a60:	9203      	str	r2, [sp, #12]
  405a62:	461f      	mov	r7, r3
  405a64:	e656      	b.n	405714 <_vfiprintf_r+0x240>
  405a66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405a6a:	2400      	movs	r4, #0
  405a6c:	f818 3b01 	ldrb.w	r3, [r8], #1
  405a70:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405a74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  405a78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405a7c:	2a09      	cmp	r2, #9
  405a7e:	d9f5      	bls.n	405a6c <_vfiprintf_r+0x598>
  405a80:	e591      	b.n	4055a6 <_vfiprintf_r+0xd2>
  405a82:	f898 3000 	ldrb.w	r3, [r8]
  405a86:	2101      	movs	r1, #1
  405a88:	202b      	movs	r0, #43	; 0x2b
  405a8a:	e58a      	b.n	4055a2 <_vfiprintf_r+0xce>
  405a8c:	f898 3000 	ldrb.w	r3, [r8]
  405a90:	2b2a      	cmp	r3, #42	; 0x2a
  405a92:	f108 0501 	add.w	r5, r8, #1
  405a96:	f000 83dd 	beq.w	406254 <_vfiprintf_r+0xd80>
  405a9a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405a9e:	2a09      	cmp	r2, #9
  405aa0:	46a8      	mov	r8, r5
  405aa2:	bf98      	it	ls
  405aa4:	2500      	movls	r5, #0
  405aa6:	f200 83ce 	bhi.w	406246 <_vfiprintf_r+0xd72>
  405aaa:	f818 3b01 	ldrb.w	r3, [r8], #1
  405aae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  405ab2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  405ab6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405aba:	2a09      	cmp	r2, #9
  405abc:	d9f5      	bls.n	405aaa <_vfiprintf_r+0x5d6>
  405abe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  405ac2:	9201      	str	r2, [sp, #4]
  405ac4:	e56f      	b.n	4055a6 <_vfiprintf_r+0xd2>
  405ac6:	9a04      	ldr	r2, [sp, #16]
  405ac8:	6814      	ldr	r4, [r2, #0]
  405aca:	4613      	mov	r3, r2
  405acc:	2c00      	cmp	r4, #0
  405ace:	f103 0304 	add.w	r3, r3, #4
  405ad2:	f6ff aded 	blt.w	4056b0 <_vfiprintf_r+0x1dc>
  405ad6:	9304      	str	r3, [sp, #16]
  405ad8:	f898 3000 	ldrb.w	r3, [r8]
  405adc:	e561      	b.n	4055a2 <_vfiprintf_r+0xce>
  405ade:	9406      	str	r4, [sp, #24]
  405ae0:	2900      	cmp	r1, #0
  405ae2:	d081      	beq.n	4059e8 <_vfiprintf_r+0x514>
  405ae4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405ae8:	e77e      	b.n	4059e8 <_vfiprintf_r+0x514>
  405aea:	9a04      	ldr	r2, [sp, #16]
  405aec:	9406      	str	r4, [sp, #24]
  405aee:	6817      	ldr	r7, [r2, #0]
  405af0:	f04f 0300 	mov.w	r3, #0
  405af4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405af8:	1d14      	adds	r4, r2, #4
  405afa:	9b01      	ldr	r3, [sp, #4]
  405afc:	2f00      	cmp	r7, #0
  405afe:	f000 8386 	beq.w	40620e <_vfiprintf_r+0xd3a>
  405b02:	2b00      	cmp	r3, #0
  405b04:	f2c0 835f 	blt.w	4061c6 <_vfiprintf_r+0xcf2>
  405b08:	461a      	mov	r2, r3
  405b0a:	2100      	movs	r1, #0
  405b0c:	4638      	mov	r0, r7
  405b0e:	f001 fc5f 	bl	4073d0 <memchr>
  405b12:	2800      	cmp	r0, #0
  405b14:	f000 838f 	beq.w	406236 <_vfiprintf_r+0xd62>
  405b18:	1bc3      	subs	r3, r0, r7
  405b1a:	9303      	str	r3, [sp, #12]
  405b1c:	2300      	movs	r3, #0
  405b1e:	9404      	str	r4, [sp, #16]
  405b20:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405b24:	9301      	str	r3, [sp, #4]
  405b26:	e5f5      	b.n	405714 <_vfiprintf_r+0x240>
  405b28:	9406      	str	r4, [sp, #24]
  405b2a:	2900      	cmp	r1, #0
  405b2c:	f040 83b9 	bne.w	4062a2 <_vfiprintf_r+0xdce>
  405b30:	f016 0920 	ands.w	r9, r6, #32
  405b34:	d135      	bne.n	405ba2 <_vfiprintf_r+0x6ce>
  405b36:	f016 0310 	ands.w	r3, r6, #16
  405b3a:	d103      	bne.n	405b44 <_vfiprintf_r+0x670>
  405b3c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  405b40:	f040 832a 	bne.w	406198 <_vfiprintf_r+0xcc4>
  405b44:	9a04      	ldr	r2, [sp, #16]
  405b46:	4613      	mov	r3, r2
  405b48:	6814      	ldr	r4, [r2, #0]
  405b4a:	9a01      	ldr	r2, [sp, #4]
  405b4c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405b50:	2a00      	cmp	r2, #0
  405b52:	f103 0304 	add.w	r3, r3, #4
  405b56:	f04f 0500 	mov.w	r5, #0
  405b5a:	f2c0 8332 	blt.w	4061c2 <_vfiprintf_r+0xcee>
  405b5e:	ea54 0205 	orrs.w	r2, r4, r5
  405b62:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405b66:	9304      	str	r3, [sp, #16]
  405b68:	f47f af13 	bne.w	405992 <_vfiprintf_r+0x4be>
  405b6c:	9b01      	ldr	r3, [sp, #4]
  405b6e:	2b00      	cmp	r3, #0
  405b70:	f43f adcc 	beq.w	40570c <_vfiprintf_r+0x238>
  405b74:	2400      	movs	r4, #0
  405b76:	af2a      	add	r7, sp, #168	; 0xa8
  405b78:	3430      	adds	r4, #48	; 0x30
  405b7a:	f807 4d41 	strb.w	r4, [r7, #-65]!
  405b7e:	ebc7 030b 	rsb	r3, r7, fp
  405b82:	9303      	str	r3, [sp, #12]
  405b84:	e5c6      	b.n	405714 <_vfiprintf_r+0x240>
  405b86:	f046 0620 	orr.w	r6, r6, #32
  405b8a:	f898 3000 	ldrb.w	r3, [r8]
  405b8e:	e508      	b.n	4055a2 <_vfiprintf_r+0xce>
  405b90:	9406      	str	r4, [sp, #24]
  405b92:	2900      	cmp	r1, #0
  405b94:	f040 836e 	bne.w	406274 <_vfiprintf_r+0xda0>
  405b98:	f046 0610 	orr.w	r6, r6, #16
  405b9c:	f016 0920 	ands.w	r9, r6, #32
  405ba0:	d0c9      	beq.n	405b36 <_vfiprintf_r+0x662>
  405ba2:	9b04      	ldr	r3, [sp, #16]
  405ba4:	3307      	adds	r3, #7
  405ba6:	f023 0307 	bic.w	r3, r3, #7
  405baa:	f04f 0200 	mov.w	r2, #0
  405bae:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  405bb2:	e9d3 4500 	ldrd	r4, r5, [r3]
  405bb6:	f103 0208 	add.w	r2, r3, #8
  405bba:	9b01      	ldr	r3, [sp, #4]
  405bbc:	9204      	str	r2, [sp, #16]
  405bbe:	2b00      	cmp	r3, #0
  405bc0:	f2c0 81f9 	blt.w	405fb6 <_vfiprintf_r+0xae2>
  405bc4:	ea54 0305 	orrs.w	r3, r4, r5
  405bc8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405bcc:	f04f 0900 	mov.w	r9, #0
  405bd0:	f47f aedf 	bne.w	405992 <_vfiprintf_r+0x4be>
  405bd4:	e7ca      	b.n	405b6c <_vfiprintf_r+0x698>
  405bd6:	9406      	str	r4, [sp, #24]
  405bd8:	2900      	cmp	r1, #0
  405bda:	f040 8351 	bne.w	406280 <_vfiprintf_r+0xdac>
  405bde:	06b2      	lsls	r2, r6, #26
  405be0:	48ae      	ldr	r0, [pc, #696]	; (405e9c <_vfiprintf_r+0x9c8>)
  405be2:	d541      	bpl.n	405c68 <_vfiprintf_r+0x794>
  405be4:	9a04      	ldr	r2, [sp, #16]
  405be6:	3207      	adds	r2, #7
  405be8:	f022 0207 	bic.w	r2, r2, #7
  405bec:	e9d2 4500 	ldrd	r4, r5, [r2]
  405bf0:	f102 0108 	add.w	r1, r2, #8
  405bf4:	9104      	str	r1, [sp, #16]
  405bf6:	f016 0901 	ands.w	r9, r6, #1
  405bfa:	f000 8177 	beq.w	405eec <_vfiprintf_r+0xa18>
  405bfe:	ea54 0205 	orrs.w	r2, r4, r5
  405c02:	f040 8226 	bne.w	406052 <_vfiprintf_r+0xb7e>
  405c06:	f04f 0300 	mov.w	r3, #0
  405c0a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405c0e:	9b01      	ldr	r3, [sp, #4]
  405c10:	2b00      	cmp	r3, #0
  405c12:	f2c0 8196 	blt.w	405f42 <_vfiprintf_r+0xa6e>
  405c16:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405c1a:	e572      	b.n	405702 <_vfiprintf_r+0x22e>
  405c1c:	9a04      	ldr	r2, [sp, #16]
  405c1e:	9406      	str	r4, [sp, #24]
  405c20:	6813      	ldr	r3, [r2, #0]
  405c22:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  405c26:	4613      	mov	r3, r2
  405c28:	f04f 0100 	mov.w	r1, #0
  405c2c:	2501      	movs	r5, #1
  405c2e:	3304      	adds	r3, #4
  405c30:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  405c34:	9304      	str	r3, [sp, #16]
  405c36:	9503      	str	r5, [sp, #12]
  405c38:	af10      	add	r7, sp, #64	; 0x40
  405c3a:	2300      	movs	r3, #0
  405c3c:	9301      	str	r3, [sp, #4]
  405c3e:	e573      	b.n	405728 <_vfiprintf_r+0x254>
  405c40:	f898 3000 	ldrb.w	r3, [r8]
  405c44:	2800      	cmp	r0, #0
  405c46:	f47f acac 	bne.w	4055a2 <_vfiprintf_r+0xce>
  405c4a:	2101      	movs	r1, #1
  405c4c:	2020      	movs	r0, #32
  405c4e:	e4a8      	b.n	4055a2 <_vfiprintf_r+0xce>
  405c50:	f046 0601 	orr.w	r6, r6, #1
  405c54:	f898 3000 	ldrb.w	r3, [r8]
  405c58:	e4a3      	b.n	4055a2 <_vfiprintf_r+0xce>
  405c5a:	9406      	str	r4, [sp, #24]
  405c5c:	2900      	cmp	r1, #0
  405c5e:	f040 830c 	bne.w	40627a <_vfiprintf_r+0xda6>
  405c62:	06b2      	lsls	r2, r6, #26
  405c64:	488e      	ldr	r0, [pc, #568]	; (405ea0 <_vfiprintf_r+0x9cc>)
  405c66:	d4bd      	bmi.n	405be4 <_vfiprintf_r+0x710>
  405c68:	9904      	ldr	r1, [sp, #16]
  405c6a:	06f7      	lsls	r7, r6, #27
  405c6c:	460a      	mov	r2, r1
  405c6e:	f100 819d 	bmi.w	405fac <_vfiprintf_r+0xad8>
  405c72:	0675      	lsls	r5, r6, #25
  405c74:	f140 819a 	bpl.w	405fac <_vfiprintf_r+0xad8>
  405c78:	3204      	adds	r2, #4
  405c7a:	880c      	ldrh	r4, [r1, #0]
  405c7c:	9204      	str	r2, [sp, #16]
  405c7e:	2500      	movs	r5, #0
  405c80:	e7b9      	b.n	405bf6 <_vfiprintf_r+0x722>
  405c82:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  405c86:	f898 3000 	ldrb.w	r3, [r8]
  405c8a:	e48a      	b.n	4055a2 <_vfiprintf_r+0xce>
  405c8c:	f898 3000 	ldrb.w	r3, [r8]
  405c90:	2b6c      	cmp	r3, #108	; 0x6c
  405c92:	bf03      	ittte	eq
  405c94:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  405c98:	f046 0620 	orreq.w	r6, r6, #32
  405c9c:	f108 0801 	addeq.w	r8, r8, #1
  405ca0:	f046 0610 	orrne.w	r6, r6, #16
  405ca4:	e47d      	b.n	4055a2 <_vfiprintf_r+0xce>
  405ca6:	2900      	cmp	r1, #0
  405ca8:	f040 8309 	bne.w	4062be <_vfiprintf_r+0xdea>
  405cac:	06b4      	lsls	r4, r6, #26
  405cae:	f140 821c 	bpl.w	4060ea <_vfiprintf_r+0xc16>
  405cb2:	9a04      	ldr	r2, [sp, #16]
  405cb4:	9902      	ldr	r1, [sp, #8]
  405cb6:	6813      	ldr	r3, [r2, #0]
  405cb8:	17cd      	asrs	r5, r1, #31
  405cba:	4608      	mov	r0, r1
  405cbc:	3204      	adds	r2, #4
  405cbe:	4629      	mov	r1, r5
  405cc0:	9204      	str	r2, [sp, #16]
  405cc2:	e9c3 0100 	strd	r0, r1, [r3]
  405cc6:	e436      	b.n	405536 <_vfiprintf_r+0x62>
  405cc8:	9406      	str	r4, [sp, #24]
  405cca:	2900      	cmp	r1, #0
  405ccc:	f43f ae43 	beq.w	405956 <_vfiprintf_r+0x482>
  405cd0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405cd4:	e63f      	b.n	405956 <_vfiprintf_r+0x482>
  405cd6:	9406      	str	r4, [sp, #24]
  405cd8:	2900      	cmp	r1, #0
  405cda:	f040 82ed 	bne.w	4062b8 <_vfiprintf_r+0xde4>
  405cde:	2b00      	cmp	r3, #0
  405ce0:	f000 808f 	beq.w	405e02 <_vfiprintf_r+0x92e>
  405ce4:	2501      	movs	r5, #1
  405ce6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  405cea:	f04f 0300 	mov.w	r3, #0
  405cee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405cf2:	9503      	str	r5, [sp, #12]
  405cf4:	af10      	add	r7, sp, #64	; 0x40
  405cf6:	e7a0      	b.n	405c3a <_vfiprintf_r+0x766>
  405cf8:	9304      	str	r3, [sp, #16]
  405cfa:	f04f 0900 	mov.w	r9, #0
  405cfe:	e696      	b.n	405a2e <_vfiprintf_r+0x55a>
  405d00:	aa0d      	add	r2, sp, #52	; 0x34
  405d02:	9900      	ldr	r1, [sp, #0]
  405d04:	9309      	str	r3, [sp, #36]	; 0x24
  405d06:	4648      	mov	r0, r9
  405d08:	f7ff fba8 	bl	40545c <__sprint_r.part.0>
  405d0c:	2800      	cmp	r0, #0
  405d0e:	d17f      	bne.n	405e10 <_vfiprintf_r+0x93c>
  405d10:	980e      	ldr	r0, [sp, #56]	; 0x38
  405d12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405d16:	f100 0e01 	add.w	lr, r0, #1
  405d1a:	46dc      	mov	ip, fp
  405d1c:	e529      	b.n	405772 <_vfiprintf_r+0x29e>
  405d1e:	980e      	ldr	r0, [sp, #56]	; 0x38
  405d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405d22:	f100 0e01 	add.w	lr, r0, #1
  405d26:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405d2a:	2b00      	cmp	r3, #0
  405d2c:	f43f ad50 	beq.w	4057d0 <_vfiprintf_r+0x2fc>
  405d30:	3201      	adds	r2, #1
  405d32:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  405d36:	2301      	movs	r3, #1
  405d38:	f1be 0f07 	cmp.w	lr, #7
  405d3c:	920f      	str	r2, [sp, #60]	; 0x3c
  405d3e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405d42:	e88a 000a 	stmia.w	sl, {r1, r3}
  405d46:	f340 80bf 	ble.w	405ec8 <_vfiprintf_r+0x9f4>
  405d4a:	2a00      	cmp	r2, #0
  405d4c:	f040 814e 	bne.w	405fec <_vfiprintf_r+0xb18>
  405d50:	9907      	ldr	r1, [sp, #28]
  405d52:	2900      	cmp	r1, #0
  405d54:	f040 80be 	bne.w	405ed4 <_vfiprintf_r+0xa00>
  405d58:	469e      	mov	lr, r3
  405d5a:	4610      	mov	r0, r2
  405d5c:	46da      	mov	sl, fp
  405d5e:	9b08      	ldr	r3, [sp, #32]
  405d60:	2b80      	cmp	r3, #128	; 0x80
  405d62:	f43f ad50 	beq.w	405806 <_vfiprintf_r+0x332>
  405d66:	9b01      	ldr	r3, [sp, #4]
  405d68:	9903      	ldr	r1, [sp, #12]
  405d6a:	1a5c      	subs	r4, r3, r1
  405d6c:	2c00      	cmp	r4, #0
  405d6e:	f77f ad93 	ble.w	405898 <_vfiprintf_r+0x3c4>
  405d72:	2c10      	cmp	r4, #16
  405d74:	f8df 912c 	ldr.w	r9, [pc, #300]	; 405ea4 <_vfiprintf_r+0x9d0>
  405d78:	dd25      	ble.n	405dc6 <_vfiprintf_r+0x8f2>
  405d7a:	46d4      	mov	ip, sl
  405d7c:	2310      	movs	r3, #16
  405d7e:	46c2      	mov	sl, r8
  405d80:	46a8      	mov	r8, r5
  405d82:	464d      	mov	r5, r9
  405d84:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405d88:	e007      	b.n	405d9a <_vfiprintf_r+0x8c6>
  405d8a:	f100 0e02 	add.w	lr, r0, #2
  405d8e:	f10c 0c08 	add.w	ip, ip, #8
  405d92:	4608      	mov	r0, r1
  405d94:	3c10      	subs	r4, #16
  405d96:	2c10      	cmp	r4, #16
  405d98:	dd11      	ble.n	405dbe <_vfiprintf_r+0x8ea>
  405d9a:	1c41      	adds	r1, r0, #1
  405d9c:	3210      	adds	r2, #16
  405d9e:	2907      	cmp	r1, #7
  405da0:	920f      	str	r2, [sp, #60]	; 0x3c
  405da2:	f8cc 5000 	str.w	r5, [ip]
  405da6:	f8cc 3004 	str.w	r3, [ip, #4]
  405daa:	910e      	str	r1, [sp, #56]	; 0x38
  405dac:	dded      	ble.n	405d8a <_vfiprintf_r+0x8b6>
  405dae:	b9d2      	cbnz	r2, 405de6 <_vfiprintf_r+0x912>
  405db0:	3c10      	subs	r4, #16
  405db2:	2c10      	cmp	r4, #16
  405db4:	f04f 0e01 	mov.w	lr, #1
  405db8:	4610      	mov	r0, r2
  405dba:	46dc      	mov	ip, fp
  405dbc:	dced      	bgt.n	405d9a <_vfiprintf_r+0x8c6>
  405dbe:	46a9      	mov	r9, r5
  405dc0:	4645      	mov	r5, r8
  405dc2:	46d0      	mov	r8, sl
  405dc4:	46e2      	mov	sl, ip
  405dc6:	4422      	add	r2, r4
  405dc8:	f1be 0f07 	cmp.w	lr, #7
  405dcc:	920f      	str	r2, [sp, #60]	; 0x3c
  405dce:	f8ca 9000 	str.w	r9, [sl]
  405dd2:	f8ca 4004 	str.w	r4, [sl, #4]
  405dd6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405dda:	dc2e      	bgt.n	405e3a <_vfiprintf_r+0x966>
  405ddc:	f10a 0a08 	add.w	sl, sl, #8
  405de0:	f10e 0e01 	add.w	lr, lr, #1
  405de4:	e558      	b.n	405898 <_vfiprintf_r+0x3c4>
  405de6:	aa0d      	add	r2, sp, #52	; 0x34
  405de8:	9900      	ldr	r1, [sp, #0]
  405dea:	9301      	str	r3, [sp, #4]
  405dec:	4648      	mov	r0, r9
  405dee:	f7ff fb35 	bl	40545c <__sprint_r.part.0>
  405df2:	b968      	cbnz	r0, 405e10 <_vfiprintf_r+0x93c>
  405df4:	980e      	ldr	r0, [sp, #56]	; 0x38
  405df6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405df8:	9b01      	ldr	r3, [sp, #4]
  405dfa:	f100 0e01 	add.w	lr, r0, #1
  405dfe:	46dc      	mov	ip, fp
  405e00:	e7c8      	b.n	405d94 <_vfiprintf_r+0x8c0>
  405e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405e04:	b123      	cbz	r3, 405e10 <_vfiprintf_r+0x93c>
  405e06:	9805      	ldr	r0, [sp, #20]
  405e08:	9900      	ldr	r1, [sp, #0]
  405e0a:	aa0d      	add	r2, sp, #52	; 0x34
  405e0c:	f7ff fb26 	bl	40545c <__sprint_r.part.0>
  405e10:	9b00      	ldr	r3, [sp, #0]
  405e12:	899b      	ldrh	r3, [r3, #12]
  405e14:	065a      	lsls	r2, r3, #25
  405e16:	f100 818b 	bmi.w	406130 <_vfiprintf_r+0xc5c>
  405e1a:	9802      	ldr	r0, [sp, #8]
  405e1c:	b02b      	add	sp, #172	; 0xac
  405e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e22:	aa0d      	add	r2, sp, #52	; 0x34
  405e24:	9900      	ldr	r1, [sp, #0]
  405e26:	4648      	mov	r0, r9
  405e28:	f7ff fb18 	bl	40545c <__sprint_r.part.0>
  405e2c:	2800      	cmp	r0, #0
  405e2e:	d1ef      	bne.n	405e10 <_vfiprintf_r+0x93c>
  405e30:	990e      	ldr	r1, [sp, #56]	; 0x38
  405e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405e34:	1c48      	adds	r0, r1, #1
  405e36:	46da      	mov	sl, fp
  405e38:	e555      	b.n	4058e6 <_vfiprintf_r+0x412>
  405e3a:	2a00      	cmp	r2, #0
  405e3c:	f040 80fb 	bne.w	406036 <_vfiprintf_r+0xb62>
  405e40:	9a03      	ldr	r2, [sp, #12]
  405e42:	921b      	str	r2, [sp, #108]	; 0x6c
  405e44:	2301      	movs	r3, #1
  405e46:	920f      	str	r2, [sp, #60]	; 0x3c
  405e48:	971a      	str	r7, [sp, #104]	; 0x68
  405e4a:	930e      	str	r3, [sp, #56]	; 0x38
  405e4c:	46da      	mov	sl, fp
  405e4e:	f10a 0a08 	add.w	sl, sl, #8
  405e52:	0771      	lsls	r1, r6, #29
  405e54:	d504      	bpl.n	405e60 <_vfiprintf_r+0x98c>
  405e56:	9b06      	ldr	r3, [sp, #24]
  405e58:	1b5c      	subs	r4, r3, r5
  405e5a:	2c00      	cmp	r4, #0
  405e5c:	f73f ad34 	bgt.w	4058c8 <_vfiprintf_r+0x3f4>
  405e60:	9b02      	ldr	r3, [sp, #8]
  405e62:	9906      	ldr	r1, [sp, #24]
  405e64:	42a9      	cmp	r1, r5
  405e66:	bfac      	ite	ge
  405e68:	185b      	addge	r3, r3, r1
  405e6a:	195b      	addlt	r3, r3, r5
  405e6c:	9302      	str	r3, [sp, #8]
  405e6e:	2a00      	cmp	r2, #0
  405e70:	f040 80b3 	bne.w	405fda <_vfiprintf_r+0xb06>
  405e74:	2300      	movs	r3, #0
  405e76:	930e      	str	r3, [sp, #56]	; 0x38
  405e78:	46da      	mov	sl, fp
  405e7a:	f7ff bb5c 	b.w	405536 <_vfiprintf_r+0x62>
  405e7e:	aa0d      	add	r2, sp, #52	; 0x34
  405e80:	9900      	ldr	r1, [sp, #0]
  405e82:	9307      	str	r3, [sp, #28]
  405e84:	4648      	mov	r0, r9
  405e86:	f7ff fae9 	bl	40545c <__sprint_r.part.0>
  405e8a:	2800      	cmp	r0, #0
  405e8c:	d1c0      	bne.n	405e10 <_vfiprintf_r+0x93c>
  405e8e:	980e      	ldr	r0, [sp, #56]	; 0x38
  405e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405e92:	9b07      	ldr	r3, [sp, #28]
  405e94:	f100 0c01 	add.w	ip, r0, #1
  405e98:	46de      	mov	lr, fp
  405e9a:	e4cb      	b.n	405834 <_vfiprintf_r+0x360>
  405e9c:	004093d4 	.word	0x004093d4
  405ea0:	004093e8 	.word	0x004093e8
  405ea4:	004093c4 	.word	0x004093c4
  405ea8:	2a00      	cmp	r2, #0
  405eaa:	f040 8133 	bne.w	406114 <_vfiprintf_r+0xc40>
  405eae:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405eb2:	2b00      	cmp	r3, #0
  405eb4:	f000 80f5 	beq.w	4060a2 <_vfiprintf_r+0xbce>
  405eb8:	2301      	movs	r3, #1
  405eba:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  405ebe:	461a      	mov	r2, r3
  405ec0:	931b      	str	r3, [sp, #108]	; 0x6c
  405ec2:	469e      	mov	lr, r3
  405ec4:	911a      	str	r1, [sp, #104]	; 0x68
  405ec6:	46da      	mov	sl, fp
  405ec8:	4670      	mov	r0, lr
  405eca:	f10a 0a08 	add.w	sl, sl, #8
  405ece:	f10e 0e01 	add.w	lr, lr, #1
  405ed2:	e47d      	b.n	4057d0 <_vfiprintf_r+0x2fc>
  405ed4:	a90c      	add	r1, sp, #48	; 0x30
  405ed6:	2202      	movs	r2, #2
  405ed8:	469e      	mov	lr, r3
  405eda:	911a      	str	r1, [sp, #104]	; 0x68
  405edc:	921b      	str	r2, [sp, #108]	; 0x6c
  405ede:	46da      	mov	sl, fp
  405ee0:	4670      	mov	r0, lr
  405ee2:	f10a 0a08 	add.w	sl, sl, #8
  405ee6:	f10e 0e01 	add.w	lr, lr, #1
  405eea:	e738      	b.n	405d5e <_vfiprintf_r+0x88a>
  405eec:	9b01      	ldr	r3, [sp, #4]
  405eee:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405ef2:	2b00      	cmp	r3, #0
  405ef4:	f2c0 812a 	blt.w	40614c <_vfiprintf_r+0xc78>
  405ef8:	ea54 0305 	orrs.w	r3, r4, r5
  405efc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405f00:	f43f abff 	beq.w	405702 <_vfiprintf_r+0x22e>
  405f04:	465f      	mov	r7, fp
  405f06:	0923      	lsrs	r3, r4, #4
  405f08:	f004 010f 	and.w	r1, r4, #15
  405f0c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405f10:	092a      	lsrs	r2, r5, #4
  405f12:	461c      	mov	r4, r3
  405f14:	4615      	mov	r5, r2
  405f16:	5c43      	ldrb	r3, [r0, r1]
  405f18:	f807 3d01 	strb.w	r3, [r7, #-1]!
  405f1c:	ea54 0305 	orrs.w	r3, r4, r5
  405f20:	d1f1      	bne.n	405f06 <_vfiprintf_r+0xa32>
  405f22:	ebc7 030b 	rsb	r3, r7, fp
  405f26:	9303      	str	r3, [sp, #12]
  405f28:	f7ff bbf4 	b.w	405714 <_vfiprintf_r+0x240>
  405f2c:	aa0d      	add	r2, sp, #52	; 0x34
  405f2e:	9900      	ldr	r1, [sp, #0]
  405f30:	9805      	ldr	r0, [sp, #20]
  405f32:	f7ff fa93 	bl	40545c <__sprint_r.part.0>
  405f36:	2800      	cmp	r0, #0
  405f38:	f47f af6a 	bne.w	405e10 <_vfiprintf_r+0x93c>
  405f3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405f3e:	46da      	mov	sl, fp
  405f40:	e787      	b.n	405e52 <_vfiprintf_r+0x97e>
  405f42:	f04f 0900 	mov.w	r9, #0
  405f46:	2400      	movs	r4, #0
  405f48:	2500      	movs	r5, #0
  405f4a:	e7db      	b.n	405f04 <_vfiprintf_r+0xa30>
  405f4c:	f016 0210 	ands.w	r2, r6, #16
  405f50:	f000 80b2 	beq.w	4060b8 <_vfiprintf_r+0xbe4>
  405f54:	9904      	ldr	r1, [sp, #16]
  405f56:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405f5a:	460a      	mov	r2, r1
  405f5c:	680c      	ldr	r4, [r1, #0]
  405f5e:	9901      	ldr	r1, [sp, #4]
  405f60:	2900      	cmp	r1, #0
  405f62:	f102 0204 	add.w	r2, r2, #4
  405f66:	f04f 0500 	mov.w	r5, #0
  405f6a:	f2c0 8159 	blt.w	406220 <_vfiprintf_r+0xd4c>
  405f6e:	ea54 0105 	orrs.w	r1, r4, r5
  405f72:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405f76:	9204      	str	r2, [sp, #16]
  405f78:	f43f ad51 	beq.w	405a1e <_vfiprintf_r+0x54a>
  405f7c:	4699      	mov	r9, r3
  405f7e:	e556      	b.n	405a2e <_vfiprintf_r+0x55a>
  405f80:	06f7      	lsls	r7, r6, #27
  405f82:	d40a      	bmi.n	405f9a <_vfiprintf_r+0xac6>
  405f84:	0675      	lsls	r5, r6, #25
  405f86:	d508      	bpl.n	405f9a <_vfiprintf_r+0xac6>
  405f88:	9904      	ldr	r1, [sp, #16]
  405f8a:	f9b1 4000 	ldrsh.w	r4, [r1]
  405f8e:	3104      	adds	r1, #4
  405f90:	17e5      	asrs	r5, r4, #31
  405f92:	4622      	mov	r2, r4
  405f94:	462b      	mov	r3, r5
  405f96:	9104      	str	r1, [sp, #16]
  405f98:	e4ea      	b.n	405970 <_vfiprintf_r+0x49c>
  405f9a:	9a04      	ldr	r2, [sp, #16]
  405f9c:	6814      	ldr	r4, [r2, #0]
  405f9e:	4613      	mov	r3, r2
  405fa0:	3304      	adds	r3, #4
  405fa2:	17e5      	asrs	r5, r4, #31
  405fa4:	9304      	str	r3, [sp, #16]
  405fa6:	4622      	mov	r2, r4
  405fa8:	462b      	mov	r3, r5
  405faa:	e4e1      	b.n	405970 <_vfiprintf_r+0x49c>
  405fac:	6814      	ldr	r4, [r2, #0]
  405fae:	3204      	adds	r2, #4
  405fb0:	9204      	str	r2, [sp, #16]
  405fb2:	2500      	movs	r5, #0
  405fb4:	e61f      	b.n	405bf6 <_vfiprintf_r+0x722>
  405fb6:	f04f 0900 	mov.w	r9, #0
  405fba:	ea54 0305 	orrs.w	r3, r4, r5
  405fbe:	f47f ace8 	bne.w	405992 <_vfiprintf_r+0x4be>
  405fc2:	e5d8      	b.n	405b76 <_vfiprintf_r+0x6a2>
  405fc4:	aa0d      	add	r2, sp, #52	; 0x34
  405fc6:	9900      	ldr	r1, [sp, #0]
  405fc8:	9805      	ldr	r0, [sp, #20]
  405fca:	f7ff fa47 	bl	40545c <__sprint_r.part.0>
  405fce:	2800      	cmp	r0, #0
  405fd0:	f47f af1e 	bne.w	405e10 <_vfiprintf_r+0x93c>
  405fd4:	46da      	mov	sl, fp
  405fd6:	f7ff bb48 	b.w	40566a <_vfiprintf_r+0x196>
  405fda:	aa0d      	add	r2, sp, #52	; 0x34
  405fdc:	9900      	ldr	r1, [sp, #0]
  405fde:	9805      	ldr	r0, [sp, #20]
  405fe0:	f7ff fa3c 	bl	40545c <__sprint_r.part.0>
  405fe4:	2800      	cmp	r0, #0
  405fe6:	f43f af45 	beq.w	405e74 <_vfiprintf_r+0x9a0>
  405fea:	e711      	b.n	405e10 <_vfiprintf_r+0x93c>
  405fec:	aa0d      	add	r2, sp, #52	; 0x34
  405fee:	9900      	ldr	r1, [sp, #0]
  405ff0:	9805      	ldr	r0, [sp, #20]
  405ff2:	f7ff fa33 	bl	40545c <__sprint_r.part.0>
  405ff6:	2800      	cmp	r0, #0
  405ff8:	f47f af0a 	bne.w	405e10 <_vfiprintf_r+0x93c>
  405ffc:	980e      	ldr	r0, [sp, #56]	; 0x38
  405ffe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406000:	f100 0e01 	add.w	lr, r0, #1
  406004:	46da      	mov	sl, fp
  406006:	f7ff bbe3 	b.w	4057d0 <_vfiprintf_r+0x2fc>
  40600a:	aa0d      	add	r2, sp, #52	; 0x34
  40600c:	9900      	ldr	r1, [sp, #0]
  40600e:	9805      	ldr	r0, [sp, #20]
  406010:	f7ff fa24 	bl	40545c <__sprint_r.part.0>
  406014:	2800      	cmp	r0, #0
  406016:	f47f aefb 	bne.w	405e10 <_vfiprintf_r+0x93c>
  40601a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40601c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40601e:	f100 0e01 	add.w	lr, r0, #1
  406022:	46da      	mov	sl, fp
  406024:	e69b      	b.n	405d5e <_vfiprintf_r+0x88a>
  406026:	2a00      	cmp	r2, #0
  406028:	f040 80d8 	bne.w	4061dc <_vfiprintf_r+0xd08>
  40602c:	f04f 0e01 	mov.w	lr, #1
  406030:	4610      	mov	r0, r2
  406032:	46da      	mov	sl, fp
  406034:	e697      	b.n	405d66 <_vfiprintf_r+0x892>
  406036:	aa0d      	add	r2, sp, #52	; 0x34
  406038:	9900      	ldr	r1, [sp, #0]
  40603a:	9805      	ldr	r0, [sp, #20]
  40603c:	f7ff fa0e 	bl	40545c <__sprint_r.part.0>
  406040:	2800      	cmp	r0, #0
  406042:	f47f aee5 	bne.w	405e10 <_vfiprintf_r+0x93c>
  406046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40604a:	f103 0e01 	add.w	lr, r3, #1
  40604e:	46da      	mov	sl, fp
  406050:	e422      	b.n	405898 <_vfiprintf_r+0x3c4>
  406052:	2230      	movs	r2, #48	; 0x30
  406054:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  406058:	9a01      	ldr	r2, [sp, #4]
  40605a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40605e:	2a00      	cmp	r2, #0
  406060:	f04f 0300 	mov.w	r3, #0
  406064:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406068:	f046 0302 	orr.w	r3, r6, #2
  40606c:	f2c0 80cb 	blt.w	406206 <_vfiprintf_r+0xd32>
  406070:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406074:	f046 0602 	orr.w	r6, r6, #2
  406078:	f04f 0900 	mov.w	r9, #0
  40607c:	e742      	b.n	405f04 <_vfiprintf_r+0xa30>
  40607e:	f04f 0900 	mov.w	r9, #0
  406082:	4890      	ldr	r0, [pc, #576]	; (4062c4 <_vfiprintf_r+0xdf0>)
  406084:	e73e      	b.n	405f04 <_vfiprintf_r+0xa30>
  406086:	9b01      	ldr	r3, [sp, #4]
  406088:	4264      	negs	r4, r4
  40608a:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40608e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406092:	2b00      	cmp	r3, #0
  406094:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  406098:	f6ff ac7b 	blt.w	405992 <_vfiprintf_r+0x4be>
  40609c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4060a0:	e477      	b.n	405992 <_vfiprintf_r+0x4be>
  4060a2:	9b07      	ldr	r3, [sp, #28]
  4060a4:	2b00      	cmp	r3, #0
  4060a6:	d072      	beq.n	40618e <_vfiprintf_r+0xcba>
  4060a8:	ab0c      	add	r3, sp, #48	; 0x30
  4060aa:	2202      	movs	r2, #2
  4060ac:	931a      	str	r3, [sp, #104]	; 0x68
  4060ae:	921b      	str	r2, [sp, #108]	; 0x6c
  4060b0:	f04f 0e01 	mov.w	lr, #1
  4060b4:	46da      	mov	sl, fp
  4060b6:	e713      	b.n	405ee0 <_vfiprintf_r+0xa0c>
  4060b8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4060bc:	d048      	beq.n	406150 <_vfiprintf_r+0xc7c>
  4060be:	9904      	ldr	r1, [sp, #16]
  4060c0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4060c4:	460b      	mov	r3, r1
  4060c6:	880c      	ldrh	r4, [r1, #0]
  4060c8:	9901      	ldr	r1, [sp, #4]
  4060ca:	2900      	cmp	r1, #0
  4060cc:	f103 0304 	add.w	r3, r3, #4
  4060d0:	f04f 0500 	mov.w	r5, #0
  4060d4:	f6ff ae10 	blt.w	405cf8 <_vfiprintf_r+0x824>
  4060d8:	ea54 0105 	orrs.w	r1, r4, r5
  4060dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4060e0:	9304      	str	r3, [sp, #16]
  4060e2:	f43f ac9c 	beq.w	405a1e <_vfiprintf_r+0x54a>
  4060e6:	4691      	mov	r9, r2
  4060e8:	e4a1      	b.n	405a2e <_vfiprintf_r+0x55a>
  4060ea:	06f0      	lsls	r0, r6, #27
  4060ec:	d40a      	bmi.n	406104 <_vfiprintf_r+0xc30>
  4060ee:	0671      	lsls	r1, r6, #25
  4060f0:	d508      	bpl.n	406104 <_vfiprintf_r+0xc30>
  4060f2:	9a04      	ldr	r2, [sp, #16]
  4060f4:	6813      	ldr	r3, [r2, #0]
  4060f6:	3204      	adds	r2, #4
  4060f8:	9204      	str	r2, [sp, #16]
  4060fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  4060fe:	801a      	strh	r2, [r3, #0]
  406100:	f7ff ba19 	b.w	405536 <_vfiprintf_r+0x62>
  406104:	9a04      	ldr	r2, [sp, #16]
  406106:	6813      	ldr	r3, [r2, #0]
  406108:	3204      	adds	r2, #4
  40610a:	9204      	str	r2, [sp, #16]
  40610c:	9a02      	ldr	r2, [sp, #8]
  40610e:	601a      	str	r2, [r3, #0]
  406110:	f7ff ba11 	b.w	405536 <_vfiprintf_r+0x62>
  406114:	aa0d      	add	r2, sp, #52	; 0x34
  406116:	9900      	ldr	r1, [sp, #0]
  406118:	9805      	ldr	r0, [sp, #20]
  40611a:	f7ff f99f 	bl	40545c <__sprint_r.part.0>
  40611e:	2800      	cmp	r0, #0
  406120:	f47f ae76 	bne.w	405e10 <_vfiprintf_r+0x93c>
  406124:	980e      	ldr	r0, [sp, #56]	; 0x38
  406126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406128:	f100 0e01 	add.w	lr, r0, #1
  40612c:	46da      	mov	sl, fp
  40612e:	e5fa      	b.n	405d26 <_vfiprintf_r+0x852>
  406130:	f04f 30ff 	mov.w	r0, #4294967295
  406134:	f7ff bab6 	b.w	4056a4 <_vfiprintf_r+0x1d0>
  406138:	4862      	ldr	r0, [pc, #392]	; (4062c4 <_vfiprintf_r+0xdf0>)
  40613a:	4616      	mov	r6, r2
  40613c:	ea54 0205 	orrs.w	r2, r4, r5
  406140:	9304      	str	r3, [sp, #16]
  406142:	f04f 0900 	mov.w	r9, #0
  406146:	f47f aedd 	bne.w	405f04 <_vfiprintf_r+0xa30>
  40614a:	e6fc      	b.n	405f46 <_vfiprintf_r+0xa72>
  40614c:	9b04      	ldr	r3, [sp, #16]
  40614e:	e7f5      	b.n	40613c <_vfiprintf_r+0xc68>
  406150:	9a04      	ldr	r2, [sp, #16]
  406152:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  406156:	4613      	mov	r3, r2
  406158:	6814      	ldr	r4, [r2, #0]
  40615a:	9a01      	ldr	r2, [sp, #4]
  40615c:	2a00      	cmp	r2, #0
  40615e:	f103 0304 	add.w	r3, r3, #4
  406162:	f04f 0500 	mov.w	r5, #0
  406166:	f6ff adc7 	blt.w	405cf8 <_vfiprintf_r+0x824>
  40616a:	ea54 0205 	orrs.w	r2, r4, r5
  40616e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406172:	9304      	str	r3, [sp, #16]
  406174:	f47f ac5b 	bne.w	405a2e <_vfiprintf_r+0x55a>
  406178:	e451      	b.n	405a1e <_vfiprintf_r+0x54a>
  40617a:	aa0d      	add	r2, sp, #52	; 0x34
  40617c:	9900      	ldr	r1, [sp, #0]
  40617e:	9805      	ldr	r0, [sp, #20]
  406180:	f7ff f96c 	bl	40545c <__sprint_r.part.0>
  406184:	2800      	cmp	r0, #0
  406186:	f47f ae43 	bne.w	405e10 <_vfiprintf_r+0x93c>
  40618a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40618c:	e668      	b.n	405e60 <_vfiprintf_r+0x98c>
  40618e:	4610      	mov	r0, r2
  406190:	f04f 0e01 	mov.w	lr, #1
  406194:	46da      	mov	sl, fp
  406196:	e5e6      	b.n	405d66 <_vfiprintf_r+0x892>
  406198:	9904      	ldr	r1, [sp, #16]
  40619a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40619e:	460a      	mov	r2, r1
  4061a0:	880c      	ldrh	r4, [r1, #0]
  4061a2:	9901      	ldr	r1, [sp, #4]
  4061a4:	2900      	cmp	r1, #0
  4061a6:	f102 0204 	add.w	r2, r2, #4
  4061aa:	f04f 0500 	mov.w	r5, #0
  4061ae:	db4e      	blt.n	40624e <_vfiprintf_r+0xd7a>
  4061b0:	ea54 0105 	orrs.w	r1, r4, r5
  4061b4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4061b8:	9204      	str	r2, [sp, #16]
  4061ba:	4699      	mov	r9, r3
  4061bc:	f47f abe9 	bne.w	405992 <_vfiprintf_r+0x4be>
  4061c0:	e4d4      	b.n	405b6c <_vfiprintf_r+0x698>
  4061c2:	9304      	str	r3, [sp, #16]
  4061c4:	e6f9      	b.n	405fba <_vfiprintf_r+0xae6>
  4061c6:	4638      	mov	r0, r7
  4061c8:	9404      	str	r4, [sp, #16]
  4061ca:	f7ff f8d9 	bl	405380 <strlen>
  4061ce:	2300      	movs	r3, #0
  4061d0:	9003      	str	r0, [sp, #12]
  4061d2:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4061d6:	9301      	str	r3, [sp, #4]
  4061d8:	f7ff ba9c 	b.w	405714 <_vfiprintf_r+0x240>
  4061dc:	aa0d      	add	r2, sp, #52	; 0x34
  4061de:	9900      	ldr	r1, [sp, #0]
  4061e0:	9805      	ldr	r0, [sp, #20]
  4061e2:	f7ff f93b 	bl	40545c <__sprint_r.part.0>
  4061e6:	2800      	cmp	r0, #0
  4061e8:	f47f ae12 	bne.w	405e10 <_vfiprintf_r+0x93c>
  4061ec:	980e      	ldr	r0, [sp, #56]	; 0x38
  4061ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4061f0:	f100 0e01 	add.w	lr, r0, #1
  4061f4:	46da      	mov	sl, fp
  4061f6:	e5b6      	b.n	405d66 <_vfiprintf_r+0x892>
  4061f8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4061fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4061fc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4062cc <_vfiprintf_r+0xdf8>
  406200:	3001      	adds	r0, #1
  406202:	f7ff bad2 	b.w	4057aa <_vfiprintf_r+0x2d6>
  406206:	461e      	mov	r6, r3
  406208:	f04f 0900 	mov.w	r9, #0
  40620c:	e67a      	b.n	405f04 <_vfiprintf_r+0xa30>
  40620e:	2b06      	cmp	r3, #6
  406210:	bf28      	it	cs
  406212:	2306      	movcs	r3, #6
  406214:	9303      	str	r3, [sp, #12]
  406216:	9404      	str	r4, [sp, #16]
  406218:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40621c:	4f2a      	ldr	r7, [pc, #168]	; (4062c8 <_vfiprintf_r+0xdf4>)
  40621e:	e50c      	b.n	405c3a <_vfiprintf_r+0x766>
  406220:	9204      	str	r2, [sp, #16]
  406222:	e56a      	b.n	405cfa <_vfiprintf_r+0x826>
  406224:	980e      	ldr	r0, [sp, #56]	; 0x38
  406226:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4062cc <_vfiprintf_r+0xdf8>
  40622a:	3001      	adds	r0, #1
  40622c:	f7ff bb73 	b.w	405916 <_vfiprintf_r+0x442>
  406230:	46f4      	mov	ip, lr
  406232:	f7ff bb1a 	b.w	40586a <_vfiprintf_r+0x396>
  406236:	9b01      	ldr	r3, [sp, #4]
  406238:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40623c:	9303      	str	r3, [sp, #12]
  40623e:	9404      	str	r4, [sp, #16]
  406240:	9001      	str	r0, [sp, #4]
  406242:	f7ff ba67 	b.w	405714 <_vfiprintf_r+0x240>
  406246:	2200      	movs	r2, #0
  406248:	9201      	str	r2, [sp, #4]
  40624a:	f7ff b9ac 	b.w	4055a6 <_vfiprintf_r+0xd2>
  40624e:	9204      	str	r2, [sp, #16]
  406250:	4699      	mov	r9, r3
  406252:	e6b2      	b.n	405fba <_vfiprintf_r+0xae6>
  406254:	9a04      	ldr	r2, [sp, #16]
  406256:	6813      	ldr	r3, [r2, #0]
  406258:	9301      	str	r3, [sp, #4]
  40625a:	3204      	adds	r2, #4
  40625c:	2b00      	cmp	r3, #0
  40625e:	9204      	str	r2, [sp, #16]
  406260:	f898 3001 	ldrb.w	r3, [r8, #1]
  406264:	46a8      	mov	r8, r5
  406266:	f6bf a99c 	bge.w	4055a2 <_vfiprintf_r+0xce>
  40626a:	f04f 32ff 	mov.w	r2, #4294967295
  40626e:	9201      	str	r2, [sp, #4]
  406270:	f7ff b997 	b.w	4055a2 <_vfiprintf_r+0xce>
  406274:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406278:	e48e      	b.n	405b98 <_vfiprintf_r+0x6c4>
  40627a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40627e:	e4f0      	b.n	405c62 <_vfiprintf_r+0x78e>
  406280:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  406284:	e4ab      	b.n	405bde <_vfiprintf_r+0x70a>
  406286:	4699      	mov	r9, r3
  406288:	07f3      	lsls	r3, r6, #31
  40628a:	d505      	bpl.n	406298 <_vfiprintf_r+0xdc4>
  40628c:	af2a      	add	r7, sp, #168	; 0xa8
  40628e:	2330      	movs	r3, #48	; 0x30
  406290:	f807 3d41 	strb.w	r3, [r7, #-65]!
  406294:	f7ff bb97 	b.w	4059c6 <_vfiprintf_r+0x4f2>
  406298:	9b01      	ldr	r3, [sp, #4]
  40629a:	9303      	str	r3, [sp, #12]
  40629c:	465f      	mov	r7, fp
  40629e:	f7ff ba39 	b.w	405714 <_vfiprintf_r+0x240>
  4062a2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4062a6:	e443      	b.n	405b30 <_vfiprintf_r+0x65c>
  4062a8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4062ac:	f7ff bb9a 	b.w	4059e4 <_vfiprintf_r+0x510>
  4062b0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4062b4:	f7ff bb4d 	b.w	405952 <_vfiprintf_r+0x47e>
  4062b8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4062bc:	e50f      	b.n	405cde <_vfiprintf_r+0x80a>
  4062be:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4062c2:	e4f3      	b.n	405cac <_vfiprintf_r+0x7d8>
  4062c4:	004093e8 	.word	0x004093e8
  4062c8:	004093fc 	.word	0x004093fc
  4062cc:	00409404 	.word	0x00409404

004062d0 <__sbprintf>:
  4062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4062d2:	460c      	mov	r4, r1
  4062d4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  4062d8:	8989      	ldrh	r1, [r1, #12]
  4062da:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4062dc:	89e5      	ldrh	r5, [r4, #14]
  4062de:	9619      	str	r6, [sp, #100]	; 0x64
  4062e0:	f021 0102 	bic.w	r1, r1, #2
  4062e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4062e6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4062ea:	2500      	movs	r5, #0
  4062ec:	69e7      	ldr	r7, [r4, #28]
  4062ee:	f8ad 100c 	strh.w	r1, [sp, #12]
  4062f2:	9609      	str	r6, [sp, #36]	; 0x24
  4062f4:	9506      	str	r5, [sp, #24]
  4062f6:	ae1a      	add	r6, sp, #104	; 0x68
  4062f8:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4062fc:	4669      	mov	r1, sp
  4062fe:	9600      	str	r6, [sp, #0]
  406300:	9604      	str	r6, [sp, #16]
  406302:	9502      	str	r5, [sp, #8]
  406304:	9505      	str	r5, [sp, #20]
  406306:	9707      	str	r7, [sp, #28]
  406308:	4606      	mov	r6, r0
  40630a:	f7ff f8e3 	bl	4054d4 <_vfiprintf_r>
  40630e:	1e05      	subs	r5, r0, #0
  406310:	db07      	blt.n	406322 <__sbprintf+0x52>
  406312:	4630      	mov	r0, r6
  406314:	4669      	mov	r1, sp
  406316:	f000 f929 	bl	40656c <_fflush_r>
  40631a:	2800      	cmp	r0, #0
  40631c:	bf18      	it	ne
  40631e:	f04f 35ff 	movne.w	r5, #4294967295
  406322:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406326:	065b      	lsls	r3, r3, #25
  406328:	d503      	bpl.n	406332 <__sbprintf+0x62>
  40632a:	89a3      	ldrh	r3, [r4, #12]
  40632c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406330:	81a3      	strh	r3, [r4, #12]
  406332:	4628      	mov	r0, r5
  406334:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  406338:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40633a:	bf00      	nop

0040633c <__swsetup_r>:
  40633c:	b538      	push	{r3, r4, r5, lr}
  40633e:	4b30      	ldr	r3, [pc, #192]	; (406400 <__swsetup_r+0xc4>)
  406340:	681b      	ldr	r3, [r3, #0]
  406342:	4605      	mov	r5, r0
  406344:	460c      	mov	r4, r1
  406346:	b113      	cbz	r3, 40634e <__swsetup_r+0x12>
  406348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40634a:	2a00      	cmp	r2, #0
  40634c:	d038      	beq.n	4063c0 <__swsetup_r+0x84>
  40634e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406352:	b293      	uxth	r3, r2
  406354:	0718      	lsls	r0, r3, #28
  406356:	d50c      	bpl.n	406372 <__swsetup_r+0x36>
  406358:	6920      	ldr	r0, [r4, #16]
  40635a:	b1a8      	cbz	r0, 406388 <__swsetup_r+0x4c>
  40635c:	f013 0201 	ands.w	r2, r3, #1
  406360:	d01e      	beq.n	4063a0 <__swsetup_r+0x64>
  406362:	6963      	ldr	r3, [r4, #20]
  406364:	2200      	movs	r2, #0
  406366:	425b      	negs	r3, r3
  406368:	61a3      	str	r3, [r4, #24]
  40636a:	60a2      	str	r2, [r4, #8]
  40636c:	b1f0      	cbz	r0, 4063ac <__swsetup_r+0x70>
  40636e:	2000      	movs	r0, #0
  406370:	bd38      	pop	{r3, r4, r5, pc}
  406372:	06d9      	lsls	r1, r3, #27
  406374:	d53c      	bpl.n	4063f0 <__swsetup_r+0xb4>
  406376:	0758      	lsls	r0, r3, #29
  406378:	d426      	bmi.n	4063c8 <__swsetup_r+0x8c>
  40637a:	6920      	ldr	r0, [r4, #16]
  40637c:	f042 0308 	orr.w	r3, r2, #8
  406380:	81a3      	strh	r3, [r4, #12]
  406382:	b29b      	uxth	r3, r3
  406384:	2800      	cmp	r0, #0
  406386:	d1e9      	bne.n	40635c <__swsetup_r+0x20>
  406388:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40638c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406390:	d0e4      	beq.n	40635c <__swsetup_r+0x20>
  406392:	4628      	mov	r0, r5
  406394:	4621      	mov	r1, r4
  406396:	f000 fd15 	bl	406dc4 <__smakebuf_r>
  40639a:	89a3      	ldrh	r3, [r4, #12]
  40639c:	6920      	ldr	r0, [r4, #16]
  40639e:	e7dd      	b.n	40635c <__swsetup_r+0x20>
  4063a0:	0799      	lsls	r1, r3, #30
  4063a2:	bf58      	it	pl
  4063a4:	6962      	ldrpl	r2, [r4, #20]
  4063a6:	60a2      	str	r2, [r4, #8]
  4063a8:	2800      	cmp	r0, #0
  4063aa:	d1e0      	bne.n	40636e <__swsetup_r+0x32>
  4063ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063b0:	061a      	lsls	r2, r3, #24
  4063b2:	d5dd      	bpl.n	406370 <__swsetup_r+0x34>
  4063b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4063b8:	81a3      	strh	r3, [r4, #12]
  4063ba:	f04f 30ff 	mov.w	r0, #4294967295
  4063be:	bd38      	pop	{r3, r4, r5, pc}
  4063c0:	4618      	mov	r0, r3
  4063c2:	f000 f967 	bl	406694 <__sinit>
  4063c6:	e7c2      	b.n	40634e <__swsetup_r+0x12>
  4063c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4063ca:	b151      	cbz	r1, 4063e2 <__swsetup_r+0xa6>
  4063cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4063d0:	4299      	cmp	r1, r3
  4063d2:	d004      	beq.n	4063de <__swsetup_r+0xa2>
  4063d4:	4628      	mov	r0, r5
  4063d6:	f000 fa27 	bl	406828 <_free_r>
  4063da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4063de:	2300      	movs	r3, #0
  4063e0:	6323      	str	r3, [r4, #48]	; 0x30
  4063e2:	2300      	movs	r3, #0
  4063e4:	6920      	ldr	r0, [r4, #16]
  4063e6:	6063      	str	r3, [r4, #4]
  4063e8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4063ec:	6020      	str	r0, [r4, #0]
  4063ee:	e7c5      	b.n	40637c <__swsetup_r+0x40>
  4063f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4063f4:	2309      	movs	r3, #9
  4063f6:	602b      	str	r3, [r5, #0]
  4063f8:	f04f 30ff 	mov.w	r0, #4294967295
  4063fc:	81a2      	strh	r2, [r4, #12]
  4063fe:	bd38      	pop	{r3, r4, r5, pc}
  406400:	20400470 	.word	0x20400470

00406404 <register_fini>:
  406404:	4b02      	ldr	r3, [pc, #8]	; (406410 <register_fini+0xc>)
  406406:	b113      	cbz	r3, 40640e <register_fini+0xa>
  406408:	4802      	ldr	r0, [pc, #8]	; (406414 <register_fini+0x10>)
  40640a:	f000 b805 	b.w	406418 <atexit>
  40640e:	4770      	bx	lr
  406410:	00000000 	.word	0x00000000
  406414:	004066a9 	.word	0x004066a9

00406418 <atexit>:
  406418:	2300      	movs	r3, #0
  40641a:	4601      	mov	r1, r0
  40641c:	461a      	mov	r2, r3
  40641e:	4618      	mov	r0, r3
  406420:	f001 bc12 	b.w	407c48 <__register_exitproc>

00406424 <__sflush_r>:
  406424:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406428:	b29a      	uxth	r2, r3
  40642a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40642e:	460d      	mov	r5, r1
  406430:	0711      	lsls	r1, r2, #28
  406432:	4680      	mov	r8, r0
  406434:	d43c      	bmi.n	4064b0 <__sflush_r+0x8c>
  406436:	686a      	ldr	r2, [r5, #4]
  406438:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40643c:	2a00      	cmp	r2, #0
  40643e:	81ab      	strh	r3, [r5, #12]
  406440:	dd73      	ble.n	40652a <__sflush_r+0x106>
  406442:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406444:	2c00      	cmp	r4, #0
  406446:	d04b      	beq.n	4064e0 <__sflush_r+0xbc>
  406448:	b29b      	uxth	r3, r3
  40644a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40644e:	2100      	movs	r1, #0
  406450:	b292      	uxth	r2, r2
  406452:	f8d8 6000 	ldr.w	r6, [r8]
  406456:	f8c8 1000 	str.w	r1, [r8]
  40645a:	2a00      	cmp	r2, #0
  40645c:	d069      	beq.n	406532 <__sflush_r+0x10e>
  40645e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406460:	075f      	lsls	r7, r3, #29
  406462:	d505      	bpl.n	406470 <__sflush_r+0x4c>
  406464:	6869      	ldr	r1, [r5, #4]
  406466:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406468:	1a52      	subs	r2, r2, r1
  40646a:	b10b      	cbz	r3, 406470 <__sflush_r+0x4c>
  40646c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40646e:	1ad2      	subs	r2, r2, r3
  406470:	2300      	movs	r3, #0
  406472:	69e9      	ldr	r1, [r5, #28]
  406474:	4640      	mov	r0, r8
  406476:	47a0      	blx	r4
  406478:	1c44      	adds	r4, r0, #1
  40647a:	d03c      	beq.n	4064f6 <__sflush_r+0xd2>
  40647c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406480:	692a      	ldr	r2, [r5, #16]
  406482:	602a      	str	r2, [r5, #0]
  406484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406488:	2200      	movs	r2, #0
  40648a:	81ab      	strh	r3, [r5, #12]
  40648c:	04db      	lsls	r3, r3, #19
  40648e:	606a      	str	r2, [r5, #4]
  406490:	d449      	bmi.n	406526 <__sflush_r+0x102>
  406492:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406494:	f8c8 6000 	str.w	r6, [r8]
  406498:	b311      	cbz	r1, 4064e0 <__sflush_r+0xbc>
  40649a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40649e:	4299      	cmp	r1, r3
  4064a0:	d002      	beq.n	4064a8 <__sflush_r+0x84>
  4064a2:	4640      	mov	r0, r8
  4064a4:	f000 f9c0 	bl	406828 <_free_r>
  4064a8:	2000      	movs	r0, #0
  4064aa:	6328      	str	r0, [r5, #48]	; 0x30
  4064ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064b0:	692e      	ldr	r6, [r5, #16]
  4064b2:	b1ae      	cbz	r6, 4064e0 <__sflush_r+0xbc>
  4064b4:	682c      	ldr	r4, [r5, #0]
  4064b6:	602e      	str	r6, [r5, #0]
  4064b8:	0790      	lsls	r0, r2, #30
  4064ba:	bf0c      	ite	eq
  4064bc:	696b      	ldreq	r3, [r5, #20]
  4064be:	2300      	movne	r3, #0
  4064c0:	1ba4      	subs	r4, r4, r6
  4064c2:	60ab      	str	r3, [r5, #8]
  4064c4:	e00a      	b.n	4064dc <__sflush_r+0xb8>
  4064c6:	4623      	mov	r3, r4
  4064c8:	4632      	mov	r2, r6
  4064ca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4064cc:	69e9      	ldr	r1, [r5, #28]
  4064ce:	4640      	mov	r0, r8
  4064d0:	47b8      	blx	r7
  4064d2:	2800      	cmp	r0, #0
  4064d4:	eba4 0400 	sub.w	r4, r4, r0
  4064d8:	4406      	add	r6, r0
  4064da:	dd04      	ble.n	4064e6 <__sflush_r+0xc2>
  4064dc:	2c00      	cmp	r4, #0
  4064de:	dcf2      	bgt.n	4064c6 <__sflush_r+0xa2>
  4064e0:	2000      	movs	r0, #0
  4064e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064e6:	89ab      	ldrh	r3, [r5, #12]
  4064e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4064ec:	81ab      	strh	r3, [r5, #12]
  4064ee:	f04f 30ff 	mov.w	r0, #4294967295
  4064f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064f6:	f8d8 2000 	ldr.w	r2, [r8]
  4064fa:	2a1d      	cmp	r2, #29
  4064fc:	d8f3      	bhi.n	4064e6 <__sflush_r+0xc2>
  4064fe:	4b1a      	ldr	r3, [pc, #104]	; (406568 <__sflush_r+0x144>)
  406500:	40d3      	lsrs	r3, r2
  406502:	f003 0301 	and.w	r3, r3, #1
  406506:	f083 0401 	eor.w	r4, r3, #1
  40650a:	2b00      	cmp	r3, #0
  40650c:	d0eb      	beq.n	4064e6 <__sflush_r+0xc2>
  40650e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406512:	6929      	ldr	r1, [r5, #16]
  406514:	6029      	str	r1, [r5, #0]
  406516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40651a:	04d9      	lsls	r1, r3, #19
  40651c:	606c      	str	r4, [r5, #4]
  40651e:	81ab      	strh	r3, [r5, #12]
  406520:	d5b7      	bpl.n	406492 <__sflush_r+0x6e>
  406522:	2a00      	cmp	r2, #0
  406524:	d1b5      	bne.n	406492 <__sflush_r+0x6e>
  406526:	6528      	str	r0, [r5, #80]	; 0x50
  406528:	e7b3      	b.n	406492 <__sflush_r+0x6e>
  40652a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40652c:	2a00      	cmp	r2, #0
  40652e:	dc88      	bgt.n	406442 <__sflush_r+0x1e>
  406530:	e7d6      	b.n	4064e0 <__sflush_r+0xbc>
  406532:	2301      	movs	r3, #1
  406534:	69e9      	ldr	r1, [r5, #28]
  406536:	4640      	mov	r0, r8
  406538:	47a0      	blx	r4
  40653a:	1c43      	adds	r3, r0, #1
  40653c:	4602      	mov	r2, r0
  40653e:	d002      	beq.n	406546 <__sflush_r+0x122>
  406540:	89ab      	ldrh	r3, [r5, #12]
  406542:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406544:	e78c      	b.n	406460 <__sflush_r+0x3c>
  406546:	f8d8 3000 	ldr.w	r3, [r8]
  40654a:	2b00      	cmp	r3, #0
  40654c:	d0f8      	beq.n	406540 <__sflush_r+0x11c>
  40654e:	2b1d      	cmp	r3, #29
  406550:	d001      	beq.n	406556 <__sflush_r+0x132>
  406552:	2b16      	cmp	r3, #22
  406554:	d102      	bne.n	40655c <__sflush_r+0x138>
  406556:	f8c8 6000 	str.w	r6, [r8]
  40655a:	e7c1      	b.n	4064e0 <__sflush_r+0xbc>
  40655c:	89ab      	ldrh	r3, [r5, #12]
  40655e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406562:	81ab      	strh	r3, [r5, #12]
  406564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406568:	20400001 	.word	0x20400001

0040656c <_fflush_r>:
  40656c:	b510      	push	{r4, lr}
  40656e:	4604      	mov	r4, r0
  406570:	b082      	sub	sp, #8
  406572:	b108      	cbz	r0, 406578 <_fflush_r+0xc>
  406574:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406576:	b153      	cbz	r3, 40658e <_fflush_r+0x22>
  406578:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40657c:	b908      	cbnz	r0, 406582 <_fflush_r+0x16>
  40657e:	b002      	add	sp, #8
  406580:	bd10      	pop	{r4, pc}
  406582:	4620      	mov	r0, r4
  406584:	b002      	add	sp, #8
  406586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40658a:	f7ff bf4b 	b.w	406424 <__sflush_r>
  40658e:	9101      	str	r1, [sp, #4]
  406590:	f000 f880 	bl	406694 <__sinit>
  406594:	9901      	ldr	r1, [sp, #4]
  406596:	e7ef      	b.n	406578 <_fflush_r+0xc>

00406598 <_cleanup_r>:
  406598:	4901      	ldr	r1, [pc, #4]	; (4065a0 <_cleanup_r+0x8>)
  40659a:	f000 bbaf 	b.w	406cfc <_fwalk_reent>
  40659e:	bf00      	nop
  4065a0:	00407d11 	.word	0x00407d11

004065a4 <__sinit.part.1>:
  4065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4065a8:	4b35      	ldr	r3, [pc, #212]	; (406680 <__sinit.part.1+0xdc>)
  4065aa:	6845      	ldr	r5, [r0, #4]
  4065ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  4065ae:	2400      	movs	r4, #0
  4065b0:	4607      	mov	r7, r0
  4065b2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4065b6:	2304      	movs	r3, #4
  4065b8:	2103      	movs	r1, #3
  4065ba:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4065be:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4065c2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4065c6:	b083      	sub	sp, #12
  4065c8:	602c      	str	r4, [r5, #0]
  4065ca:	606c      	str	r4, [r5, #4]
  4065cc:	60ac      	str	r4, [r5, #8]
  4065ce:	666c      	str	r4, [r5, #100]	; 0x64
  4065d0:	81ec      	strh	r4, [r5, #14]
  4065d2:	612c      	str	r4, [r5, #16]
  4065d4:	616c      	str	r4, [r5, #20]
  4065d6:	61ac      	str	r4, [r5, #24]
  4065d8:	81ab      	strh	r3, [r5, #12]
  4065da:	4621      	mov	r1, r4
  4065dc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4065e0:	2208      	movs	r2, #8
  4065e2:	f7fe fdb1 	bl	405148 <memset>
  4065e6:	68be      	ldr	r6, [r7, #8]
  4065e8:	f8df b098 	ldr.w	fp, [pc, #152]	; 406684 <__sinit.part.1+0xe0>
  4065ec:	f8df a098 	ldr.w	sl, [pc, #152]	; 406688 <__sinit.part.1+0xe4>
  4065f0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40668c <__sinit.part.1+0xe8>
  4065f4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 406690 <__sinit.part.1+0xec>
  4065f8:	f8c5 b020 	str.w	fp, [r5, #32]
  4065fc:	2301      	movs	r3, #1
  4065fe:	2209      	movs	r2, #9
  406600:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406604:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406608:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40660c:	61ed      	str	r5, [r5, #28]
  40660e:	4621      	mov	r1, r4
  406610:	81f3      	strh	r3, [r6, #14]
  406612:	81b2      	strh	r2, [r6, #12]
  406614:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  406618:	6034      	str	r4, [r6, #0]
  40661a:	6074      	str	r4, [r6, #4]
  40661c:	60b4      	str	r4, [r6, #8]
  40661e:	6674      	str	r4, [r6, #100]	; 0x64
  406620:	6134      	str	r4, [r6, #16]
  406622:	6174      	str	r4, [r6, #20]
  406624:	61b4      	str	r4, [r6, #24]
  406626:	2208      	movs	r2, #8
  406628:	9301      	str	r3, [sp, #4]
  40662a:	f7fe fd8d 	bl	405148 <memset>
  40662e:	68fd      	ldr	r5, [r7, #12]
  406630:	61f6      	str	r6, [r6, #28]
  406632:	2012      	movs	r0, #18
  406634:	2202      	movs	r2, #2
  406636:	f8c6 b020 	str.w	fp, [r6, #32]
  40663a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40663e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  406642:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  406646:	4621      	mov	r1, r4
  406648:	81a8      	strh	r0, [r5, #12]
  40664a:	81ea      	strh	r2, [r5, #14]
  40664c:	602c      	str	r4, [r5, #0]
  40664e:	606c      	str	r4, [r5, #4]
  406650:	60ac      	str	r4, [r5, #8]
  406652:	666c      	str	r4, [r5, #100]	; 0x64
  406654:	612c      	str	r4, [r5, #16]
  406656:	616c      	str	r4, [r5, #20]
  406658:	61ac      	str	r4, [r5, #24]
  40665a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40665e:	2208      	movs	r2, #8
  406660:	f7fe fd72 	bl	405148 <memset>
  406664:	9b01      	ldr	r3, [sp, #4]
  406666:	61ed      	str	r5, [r5, #28]
  406668:	f8c5 b020 	str.w	fp, [r5, #32]
  40666c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  406670:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  406674:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  406678:	63bb      	str	r3, [r7, #56]	; 0x38
  40667a:	b003      	add	sp, #12
  40667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406680:	00406599 	.word	0x00406599
  406684:	00407a79 	.word	0x00407a79
  406688:	00407a9d 	.word	0x00407a9d
  40668c:	00407ad9 	.word	0x00407ad9
  406690:	00407af9 	.word	0x00407af9

00406694 <__sinit>:
  406694:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406696:	b103      	cbz	r3, 40669a <__sinit+0x6>
  406698:	4770      	bx	lr
  40669a:	f7ff bf83 	b.w	4065a4 <__sinit.part.1>
  40669e:	bf00      	nop

004066a0 <__sfp_lock_acquire>:
  4066a0:	4770      	bx	lr
  4066a2:	bf00      	nop

004066a4 <__sfp_lock_release>:
  4066a4:	4770      	bx	lr
  4066a6:	bf00      	nop

004066a8 <__libc_fini_array>:
  4066a8:	b538      	push	{r3, r4, r5, lr}
  4066aa:	4d07      	ldr	r5, [pc, #28]	; (4066c8 <__libc_fini_array+0x20>)
  4066ac:	4c07      	ldr	r4, [pc, #28]	; (4066cc <__libc_fini_array+0x24>)
  4066ae:	1b2c      	subs	r4, r5, r4
  4066b0:	10a4      	asrs	r4, r4, #2
  4066b2:	d005      	beq.n	4066c0 <__libc_fini_array+0x18>
  4066b4:	3c01      	subs	r4, #1
  4066b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4066ba:	4798      	blx	r3
  4066bc:	2c00      	cmp	r4, #0
  4066be:	d1f9      	bne.n	4066b4 <__libc_fini_array+0xc>
  4066c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4066c4:	f002 beb0 	b.w	409428 <_fini>
  4066c8:	00409438 	.word	0x00409438
  4066cc:	00409434 	.word	0x00409434

004066d0 <__fputwc>:
  4066d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4066d4:	b082      	sub	sp, #8
  4066d6:	4680      	mov	r8, r0
  4066d8:	4689      	mov	r9, r1
  4066da:	4614      	mov	r4, r2
  4066dc:	f000 fb3c 	bl	406d58 <__locale_mb_cur_max>
  4066e0:	2801      	cmp	r0, #1
  4066e2:	d033      	beq.n	40674c <__fputwc+0x7c>
  4066e4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4066e8:	464a      	mov	r2, r9
  4066ea:	a901      	add	r1, sp, #4
  4066ec:	4640      	mov	r0, r8
  4066ee:	f001 fa5d 	bl	407bac <_wcrtomb_r>
  4066f2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4066f6:	4682      	mov	sl, r0
  4066f8:	d021      	beq.n	40673e <__fputwc+0x6e>
  4066fa:	b388      	cbz	r0, 406760 <__fputwc+0x90>
  4066fc:	f89d 6004 	ldrb.w	r6, [sp, #4]
  406700:	2500      	movs	r5, #0
  406702:	e008      	b.n	406716 <__fputwc+0x46>
  406704:	6823      	ldr	r3, [r4, #0]
  406706:	1c5a      	adds	r2, r3, #1
  406708:	6022      	str	r2, [r4, #0]
  40670a:	701e      	strb	r6, [r3, #0]
  40670c:	3501      	adds	r5, #1
  40670e:	4555      	cmp	r5, sl
  406710:	d226      	bcs.n	406760 <__fputwc+0x90>
  406712:	ab01      	add	r3, sp, #4
  406714:	5d5e      	ldrb	r6, [r3, r5]
  406716:	68a3      	ldr	r3, [r4, #8]
  406718:	3b01      	subs	r3, #1
  40671a:	2b00      	cmp	r3, #0
  40671c:	60a3      	str	r3, [r4, #8]
  40671e:	daf1      	bge.n	406704 <__fputwc+0x34>
  406720:	69a7      	ldr	r7, [r4, #24]
  406722:	42bb      	cmp	r3, r7
  406724:	4631      	mov	r1, r6
  406726:	4622      	mov	r2, r4
  406728:	4640      	mov	r0, r8
  40672a:	db01      	blt.n	406730 <__fputwc+0x60>
  40672c:	2e0a      	cmp	r6, #10
  40672e:	d1e9      	bne.n	406704 <__fputwc+0x34>
  406730:	f001 f9e6 	bl	407b00 <__swbuf_r>
  406734:	1c43      	adds	r3, r0, #1
  406736:	d1e9      	bne.n	40670c <__fputwc+0x3c>
  406738:	b002      	add	sp, #8
  40673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40673e:	89a3      	ldrh	r3, [r4, #12]
  406740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406744:	81a3      	strh	r3, [r4, #12]
  406746:	b002      	add	sp, #8
  406748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40674c:	f109 33ff 	add.w	r3, r9, #4294967295
  406750:	2bfe      	cmp	r3, #254	; 0xfe
  406752:	d8c7      	bhi.n	4066e4 <__fputwc+0x14>
  406754:	fa5f f689 	uxtb.w	r6, r9
  406758:	4682      	mov	sl, r0
  40675a:	f88d 6004 	strb.w	r6, [sp, #4]
  40675e:	e7cf      	b.n	406700 <__fputwc+0x30>
  406760:	4648      	mov	r0, r9
  406762:	b002      	add	sp, #8
  406764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00406768 <_fputwc_r>:
  406768:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40676c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  406770:	d10a      	bne.n	406788 <_fputwc_r+0x20>
  406772:	b410      	push	{r4}
  406774:	6e54      	ldr	r4, [r2, #100]	; 0x64
  406776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40677a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40677e:	6654      	str	r4, [r2, #100]	; 0x64
  406780:	8193      	strh	r3, [r2, #12]
  406782:	bc10      	pop	{r4}
  406784:	f7ff bfa4 	b.w	4066d0 <__fputwc>
  406788:	f7ff bfa2 	b.w	4066d0 <__fputwc>

0040678c <_malloc_trim_r>:
  40678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40678e:	4f23      	ldr	r7, [pc, #140]	; (40681c <_malloc_trim_r+0x90>)
  406790:	460c      	mov	r4, r1
  406792:	4606      	mov	r6, r0
  406794:	f000 ff6a 	bl	40766c <__malloc_lock>
  406798:	68bb      	ldr	r3, [r7, #8]
  40679a:	685d      	ldr	r5, [r3, #4]
  40679c:	f025 0503 	bic.w	r5, r5, #3
  4067a0:	1b29      	subs	r1, r5, r4
  4067a2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4067a6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4067aa:	f021 010f 	bic.w	r1, r1, #15
  4067ae:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4067b2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4067b6:	db07      	blt.n	4067c8 <_malloc_trim_r+0x3c>
  4067b8:	2100      	movs	r1, #0
  4067ba:	4630      	mov	r0, r6
  4067bc:	f001 f94a 	bl	407a54 <_sbrk_r>
  4067c0:	68bb      	ldr	r3, [r7, #8]
  4067c2:	442b      	add	r3, r5
  4067c4:	4298      	cmp	r0, r3
  4067c6:	d004      	beq.n	4067d2 <_malloc_trim_r+0x46>
  4067c8:	4630      	mov	r0, r6
  4067ca:	f000 ff51 	bl	407670 <__malloc_unlock>
  4067ce:	2000      	movs	r0, #0
  4067d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4067d2:	4261      	negs	r1, r4
  4067d4:	4630      	mov	r0, r6
  4067d6:	f001 f93d 	bl	407a54 <_sbrk_r>
  4067da:	3001      	adds	r0, #1
  4067dc:	d00d      	beq.n	4067fa <_malloc_trim_r+0x6e>
  4067de:	4b10      	ldr	r3, [pc, #64]	; (406820 <_malloc_trim_r+0x94>)
  4067e0:	68ba      	ldr	r2, [r7, #8]
  4067e2:	6819      	ldr	r1, [r3, #0]
  4067e4:	1b2d      	subs	r5, r5, r4
  4067e6:	f045 0501 	orr.w	r5, r5, #1
  4067ea:	4630      	mov	r0, r6
  4067ec:	1b09      	subs	r1, r1, r4
  4067ee:	6055      	str	r5, [r2, #4]
  4067f0:	6019      	str	r1, [r3, #0]
  4067f2:	f000 ff3d 	bl	407670 <__malloc_unlock>
  4067f6:	2001      	movs	r0, #1
  4067f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4067fa:	2100      	movs	r1, #0
  4067fc:	4630      	mov	r0, r6
  4067fe:	f001 f929 	bl	407a54 <_sbrk_r>
  406802:	68ba      	ldr	r2, [r7, #8]
  406804:	1a83      	subs	r3, r0, r2
  406806:	2b0f      	cmp	r3, #15
  406808:	ddde      	ble.n	4067c8 <_malloc_trim_r+0x3c>
  40680a:	4c06      	ldr	r4, [pc, #24]	; (406824 <_malloc_trim_r+0x98>)
  40680c:	4904      	ldr	r1, [pc, #16]	; (406820 <_malloc_trim_r+0x94>)
  40680e:	6824      	ldr	r4, [r4, #0]
  406810:	f043 0301 	orr.w	r3, r3, #1
  406814:	1b00      	subs	r0, r0, r4
  406816:	6053      	str	r3, [r2, #4]
  406818:	6008      	str	r0, [r1, #0]
  40681a:	e7d5      	b.n	4067c8 <_malloc_trim_r+0x3c>
  40681c:	20400498 	.word	0x20400498
  406820:	20401510 	.word	0x20401510
  406824:	204008a4 	.word	0x204008a4

00406828 <_free_r>:
  406828:	2900      	cmp	r1, #0
  40682a:	d045      	beq.n	4068b8 <_free_r+0x90>
  40682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406830:	460d      	mov	r5, r1
  406832:	4680      	mov	r8, r0
  406834:	f000 ff1a 	bl	40766c <__malloc_lock>
  406838:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40683c:	496a      	ldr	r1, [pc, #424]	; (4069e8 <_free_r+0x1c0>)
  40683e:	f027 0301 	bic.w	r3, r7, #1
  406842:	f1a5 0408 	sub.w	r4, r5, #8
  406846:	18e2      	adds	r2, r4, r3
  406848:	688e      	ldr	r6, [r1, #8]
  40684a:	6850      	ldr	r0, [r2, #4]
  40684c:	42b2      	cmp	r2, r6
  40684e:	f020 0003 	bic.w	r0, r0, #3
  406852:	d062      	beq.n	40691a <_free_r+0xf2>
  406854:	07fe      	lsls	r6, r7, #31
  406856:	6050      	str	r0, [r2, #4]
  406858:	d40b      	bmi.n	406872 <_free_r+0x4a>
  40685a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40685e:	1be4      	subs	r4, r4, r7
  406860:	f101 0e08 	add.w	lr, r1, #8
  406864:	68a5      	ldr	r5, [r4, #8]
  406866:	4575      	cmp	r5, lr
  406868:	443b      	add	r3, r7
  40686a:	d06f      	beq.n	40694c <_free_r+0x124>
  40686c:	68e7      	ldr	r7, [r4, #12]
  40686e:	60ef      	str	r7, [r5, #12]
  406870:	60bd      	str	r5, [r7, #8]
  406872:	1815      	adds	r5, r2, r0
  406874:	686d      	ldr	r5, [r5, #4]
  406876:	07ed      	lsls	r5, r5, #31
  406878:	d542      	bpl.n	406900 <_free_r+0xd8>
  40687a:	f043 0201 	orr.w	r2, r3, #1
  40687e:	6062      	str	r2, [r4, #4]
  406880:	50e3      	str	r3, [r4, r3]
  406882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406886:	d218      	bcs.n	4068ba <_free_r+0x92>
  406888:	08db      	lsrs	r3, r3, #3
  40688a:	1c5a      	adds	r2, r3, #1
  40688c:	684d      	ldr	r5, [r1, #4]
  40688e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  406892:	60a7      	str	r7, [r4, #8]
  406894:	2001      	movs	r0, #1
  406896:	109b      	asrs	r3, r3, #2
  406898:	fa00 f303 	lsl.w	r3, r0, r3
  40689c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4068a0:	431d      	orrs	r5, r3
  4068a2:	3808      	subs	r0, #8
  4068a4:	60e0      	str	r0, [r4, #12]
  4068a6:	604d      	str	r5, [r1, #4]
  4068a8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4068ac:	60fc      	str	r4, [r7, #12]
  4068ae:	4640      	mov	r0, r8
  4068b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4068b4:	f000 bedc 	b.w	407670 <__malloc_unlock>
  4068b8:	4770      	bx	lr
  4068ba:	0a5a      	lsrs	r2, r3, #9
  4068bc:	2a04      	cmp	r2, #4
  4068be:	d853      	bhi.n	406968 <_free_r+0x140>
  4068c0:	099a      	lsrs	r2, r3, #6
  4068c2:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4068c6:	007f      	lsls	r7, r7, #1
  4068c8:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4068cc:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4068d0:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4068d4:	4944      	ldr	r1, [pc, #272]	; (4069e8 <_free_r+0x1c0>)
  4068d6:	3808      	subs	r0, #8
  4068d8:	4290      	cmp	r0, r2
  4068da:	d04d      	beq.n	406978 <_free_r+0x150>
  4068dc:	6851      	ldr	r1, [r2, #4]
  4068de:	f021 0103 	bic.w	r1, r1, #3
  4068e2:	428b      	cmp	r3, r1
  4068e4:	d202      	bcs.n	4068ec <_free_r+0xc4>
  4068e6:	6892      	ldr	r2, [r2, #8]
  4068e8:	4290      	cmp	r0, r2
  4068ea:	d1f7      	bne.n	4068dc <_free_r+0xb4>
  4068ec:	68d0      	ldr	r0, [r2, #12]
  4068ee:	60e0      	str	r0, [r4, #12]
  4068f0:	60a2      	str	r2, [r4, #8]
  4068f2:	6084      	str	r4, [r0, #8]
  4068f4:	60d4      	str	r4, [r2, #12]
  4068f6:	4640      	mov	r0, r8
  4068f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4068fc:	f000 beb8 	b.w	407670 <__malloc_unlock>
  406900:	6895      	ldr	r5, [r2, #8]
  406902:	4f3a      	ldr	r7, [pc, #232]	; (4069ec <_free_r+0x1c4>)
  406904:	42bd      	cmp	r5, r7
  406906:	4403      	add	r3, r0
  406908:	d03f      	beq.n	40698a <_free_r+0x162>
  40690a:	68d0      	ldr	r0, [r2, #12]
  40690c:	60e8      	str	r0, [r5, #12]
  40690e:	f043 0201 	orr.w	r2, r3, #1
  406912:	6085      	str	r5, [r0, #8]
  406914:	6062      	str	r2, [r4, #4]
  406916:	50e3      	str	r3, [r4, r3]
  406918:	e7b3      	b.n	406882 <_free_r+0x5a>
  40691a:	07ff      	lsls	r7, r7, #31
  40691c:	4403      	add	r3, r0
  40691e:	d407      	bmi.n	406930 <_free_r+0x108>
  406920:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406924:	1aa4      	subs	r4, r4, r2
  406926:	4413      	add	r3, r2
  406928:	68a0      	ldr	r0, [r4, #8]
  40692a:	68e2      	ldr	r2, [r4, #12]
  40692c:	60c2      	str	r2, [r0, #12]
  40692e:	6090      	str	r0, [r2, #8]
  406930:	4a2f      	ldr	r2, [pc, #188]	; (4069f0 <_free_r+0x1c8>)
  406932:	6812      	ldr	r2, [r2, #0]
  406934:	f043 0001 	orr.w	r0, r3, #1
  406938:	4293      	cmp	r3, r2
  40693a:	6060      	str	r0, [r4, #4]
  40693c:	608c      	str	r4, [r1, #8]
  40693e:	d3b6      	bcc.n	4068ae <_free_r+0x86>
  406940:	4b2c      	ldr	r3, [pc, #176]	; (4069f4 <_free_r+0x1cc>)
  406942:	4640      	mov	r0, r8
  406944:	6819      	ldr	r1, [r3, #0]
  406946:	f7ff ff21 	bl	40678c <_malloc_trim_r>
  40694a:	e7b0      	b.n	4068ae <_free_r+0x86>
  40694c:	1811      	adds	r1, r2, r0
  40694e:	6849      	ldr	r1, [r1, #4]
  406950:	07c9      	lsls	r1, r1, #31
  406952:	d444      	bmi.n	4069de <_free_r+0x1b6>
  406954:	6891      	ldr	r1, [r2, #8]
  406956:	68d2      	ldr	r2, [r2, #12]
  406958:	60ca      	str	r2, [r1, #12]
  40695a:	4403      	add	r3, r0
  40695c:	f043 0001 	orr.w	r0, r3, #1
  406960:	6091      	str	r1, [r2, #8]
  406962:	6060      	str	r0, [r4, #4]
  406964:	50e3      	str	r3, [r4, r3]
  406966:	e7a2      	b.n	4068ae <_free_r+0x86>
  406968:	2a14      	cmp	r2, #20
  40696a:	d817      	bhi.n	40699c <_free_r+0x174>
  40696c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406970:	007f      	lsls	r7, r7, #1
  406972:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406976:	e7a9      	b.n	4068cc <_free_r+0xa4>
  406978:	10aa      	asrs	r2, r5, #2
  40697a:	684b      	ldr	r3, [r1, #4]
  40697c:	2501      	movs	r5, #1
  40697e:	fa05 f202 	lsl.w	r2, r5, r2
  406982:	4313      	orrs	r3, r2
  406984:	604b      	str	r3, [r1, #4]
  406986:	4602      	mov	r2, r0
  406988:	e7b1      	b.n	4068ee <_free_r+0xc6>
  40698a:	f043 0201 	orr.w	r2, r3, #1
  40698e:	614c      	str	r4, [r1, #20]
  406990:	610c      	str	r4, [r1, #16]
  406992:	60e5      	str	r5, [r4, #12]
  406994:	60a5      	str	r5, [r4, #8]
  406996:	6062      	str	r2, [r4, #4]
  406998:	50e3      	str	r3, [r4, r3]
  40699a:	e788      	b.n	4068ae <_free_r+0x86>
  40699c:	2a54      	cmp	r2, #84	; 0x54
  40699e:	d806      	bhi.n	4069ae <_free_r+0x186>
  4069a0:	0b1a      	lsrs	r2, r3, #12
  4069a2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4069a6:	007f      	lsls	r7, r7, #1
  4069a8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4069ac:	e78e      	b.n	4068cc <_free_r+0xa4>
  4069ae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4069b2:	d806      	bhi.n	4069c2 <_free_r+0x19a>
  4069b4:	0bda      	lsrs	r2, r3, #15
  4069b6:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4069ba:	007f      	lsls	r7, r7, #1
  4069bc:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4069c0:	e784      	b.n	4068cc <_free_r+0xa4>
  4069c2:	f240 5054 	movw	r0, #1364	; 0x554
  4069c6:	4282      	cmp	r2, r0
  4069c8:	d806      	bhi.n	4069d8 <_free_r+0x1b0>
  4069ca:	0c9a      	lsrs	r2, r3, #18
  4069cc:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4069d0:	007f      	lsls	r7, r7, #1
  4069d2:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4069d6:	e779      	b.n	4068cc <_free_r+0xa4>
  4069d8:	27fe      	movs	r7, #254	; 0xfe
  4069da:	257e      	movs	r5, #126	; 0x7e
  4069dc:	e776      	b.n	4068cc <_free_r+0xa4>
  4069de:	f043 0201 	orr.w	r2, r3, #1
  4069e2:	6062      	str	r2, [r4, #4]
  4069e4:	50e3      	str	r3, [r4, r3]
  4069e6:	e762      	b.n	4068ae <_free_r+0x86>
  4069e8:	20400498 	.word	0x20400498
  4069ec:	204004a0 	.word	0x204004a0
  4069f0:	204008a0 	.word	0x204008a0
  4069f4:	2040150c 	.word	0x2040150c

004069f8 <__sfvwrite_r>:
  4069f8:	6893      	ldr	r3, [r2, #8]
  4069fa:	2b00      	cmp	r3, #0
  4069fc:	d076      	beq.n	406aec <__sfvwrite_r+0xf4>
  4069fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a02:	898b      	ldrh	r3, [r1, #12]
  406a04:	b085      	sub	sp, #20
  406a06:	460c      	mov	r4, r1
  406a08:	0719      	lsls	r1, r3, #28
  406a0a:	9001      	str	r0, [sp, #4]
  406a0c:	4616      	mov	r6, r2
  406a0e:	d529      	bpl.n	406a64 <__sfvwrite_r+0x6c>
  406a10:	6922      	ldr	r2, [r4, #16]
  406a12:	b33a      	cbz	r2, 406a64 <__sfvwrite_r+0x6c>
  406a14:	f003 0802 	and.w	r8, r3, #2
  406a18:	fa1f f088 	uxth.w	r0, r8
  406a1c:	6835      	ldr	r5, [r6, #0]
  406a1e:	2800      	cmp	r0, #0
  406a20:	d02f      	beq.n	406a82 <__sfvwrite_r+0x8a>
  406a22:	f04f 0900 	mov.w	r9, #0
  406a26:	4fb4      	ldr	r7, [pc, #720]	; (406cf8 <__sfvwrite_r+0x300>)
  406a28:	46c8      	mov	r8, r9
  406a2a:	46b2      	mov	sl, r6
  406a2c:	45b8      	cmp	r8, r7
  406a2e:	4643      	mov	r3, r8
  406a30:	464a      	mov	r2, r9
  406a32:	bf28      	it	cs
  406a34:	463b      	movcs	r3, r7
  406a36:	9801      	ldr	r0, [sp, #4]
  406a38:	f1b8 0f00 	cmp.w	r8, #0
  406a3c:	d050      	beq.n	406ae0 <__sfvwrite_r+0xe8>
  406a3e:	69e1      	ldr	r1, [r4, #28]
  406a40:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406a42:	47b0      	blx	r6
  406a44:	2800      	cmp	r0, #0
  406a46:	dd71      	ble.n	406b2c <__sfvwrite_r+0x134>
  406a48:	f8da 3008 	ldr.w	r3, [sl, #8]
  406a4c:	1a1b      	subs	r3, r3, r0
  406a4e:	4481      	add	r9, r0
  406a50:	ebc0 0808 	rsb	r8, r0, r8
  406a54:	f8ca 3008 	str.w	r3, [sl, #8]
  406a58:	2b00      	cmp	r3, #0
  406a5a:	d1e7      	bne.n	406a2c <__sfvwrite_r+0x34>
  406a5c:	2000      	movs	r0, #0
  406a5e:	b005      	add	sp, #20
  406a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a64:	4621      	mov	r1, r4
  406a66:	9801      	ldr	r0, [sp, #4]
  406a68:	f7ff fc68 	bl	40633c <__swsetup_r>
  406a6c:	2800      	cmp	r0, #0
  406a6e:	f040 813a 	bne.w	406ce6 <__sfvwrite_r+0x2ee>
  406a72:	89a3      	ldrh	r3, [r4, #12]
  406a74:	6835      	ldr	r5, [r6, #0]
  406a76:	f003 0802 	and.w	r8, r3, #2
  406a7a:	fa1f f088 	uxth.w	r0, r8
  406a7e:	2800      	cmp	r0, #0
  406a80:	d1cf      	bne.n	406a22 <__sfvwrite_r+0x2a>
  406a82:	f013 0901 	ands.w	r9, r3, #1
  406a86:	d15b      	bne.n	406b40 <__sfvwrite_r+0x148>
  406a88:	464f      	mov	r7, r9
  406a8a:	9602      	str	r6, [sp, #8]
  406a8c:	b31f      	cbz	r7, 406ad6 <__sfvwrite_r+0xde>
  406a8e:	059a      	lsls	r2, r3, #22
  406a90:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406a94:	d52c      	bpl.n	406af0 <__sfvwrite_r+0xf8>
  406a96:	4547      	cmp	r7, r8
  406a98:	46c2      	mov	sl, r8
  406a9a:	f0c0 80a4 	bcc.w	406be6 <__sfvwrite_r+0x1ee>
  406a9e:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406aa2:	f040 80b1 	bne.w	406c08 <__sfvwrite_r+0x210>
  406aa6:	6820      	ldr	r0, [r4, #0]
  406aa8:	4652      	mov	r2, sl
  406aaa:	4649      	mov	r1, r9
  406aac:	f000 fd7a 	bl	4075a4 <memmove>
  406ab0:	68a0      	ldr	r0, [r4, #8]
  406ab2:	6823      	ldr	r3, [r4, #0]
  406ab4:	ebc8 0000 	rsb	r0, r8, r0
  406ab8:	4453      	add	r3, sl
  406aba:	60a0      	str	r0, [r4, #8]
  406abc:	6023      	str	r3, [r4, #0]
  406abe:	4638      	mov	r0, r7
  406ac0:	9a02      	ldr	r2, [sp, #8]
  406ac2:	6893      	ldr	r3, [r2, #8]
  406ac4:	1a1b      	subs	r3, r3, r0
  406ac6:	4481      	add	r9, r0
  406ac8:	1a3f      	subs	r7, r7, r0
  406aca:	6093      	str	r3, [r2, #8]
  406acc:	2b00      	cmp	r3, #0
  406ace:	d0c5      	beq.n	406a5c <__sfvwrite_r+0x64>
  406ad0:	89a3      	ldrh	r3, [r4, #12]
  406ad2:	2f00      	cmp	r7, #0
  406ad4:	d1db      	bne.n	406a8e <__sfvwrite_r+0x96>
  406ad6:	f8d5 9000 	ldr.w	r9, [r5]
  406ada:	686f      	ldr	r7, [r5, #4]
  406adc:	3508      	adds	r5, #8
  406ade:	e7d5      	b.n	406a8c <__sfvwrite_r+0x94>
  406ae0:	f8d5 9000 	ldr.w	r9, [r5]
  406ae4:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406ae8:	3508      	adds	r5, #8
  406aea:	e79f      	b.n	406a2c <__sfvwrite_r+0x34>
  406aec:	2000      	movs	r0, #0
  406aee:	4770      	bx	lr
  406af0:	6820      	ldr	r0, [r4, #0]
  406af2:	6923      	ldr	r3, [r4, #16]
  406af4:	4298      	cmp	r0, r3
  406af6:	d803      	bhi.n	406b00 <__sfvwrite_r+0x108>
  406af8:	6961      	ldr	r1, [r4, #20]
  406afa:	428f      	cmp	r7, r1
  406afc:	f080 80b7 	bcs.w	406c6e <__sfvwrite_r+0x276>
  406b00:	45b8      	cmp	r8, r7
  406b02:	bf28      	it	cs
  406b04:	46b8      	movcs	r8, r7
  406b06:	4642      	mov	r2, r8
  406b08:	4649      	mov	r1, r9
  406b0a:	f000 fd4b 	bl	4075a4 <memmove>
  406b0e:	68a3      	ldr	r3, [r4, #8]
  406b10:	6822      	ldr	r2, [r4, #0]
  406b12:	ebc8 0303 	rsb	r3, r8, r3
  406b16:	4442      	add	r2, r8
  406b18:	60a3      	str	r3, [r4, #8]
  406b1a:	6022      	str	r2, [r4, #0]
  406b1c:	2b00      	cmp	r3, #0
  406b1e:	d149      	bne.n	406bb4 <__sfvwrite_r+0x1bc>
  406b20:	4621      	mov	r1, r4
  406b22:	9801      	ldr	r0, [sp, #4]
  406b24:	f7ff fd22 	bl	40656c <_fflush_r>
  406b28:	2800      	cmp	r0, #0
  406b2a:	d043      	beq.n	406bb4 <__sfvwrite_r+0x1bc>
  406b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406b34:	f04f 30ff 	mov.w	r0, #4294967295
  406b38:	81a3      	strh	r3, [r4, #12]
  406b3a:	b005      	add	sp, #20
  406b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b40:	4680      	mov	r8, r0
  406b42:	9002      	str	r0, [sp, #8]
  406b44:	4682      	mov	sl, r0
  406b46:	4681      	mov	r9, r0
  406b48:	f1b9 0f00 	cmp.w	r9, #0
  406b4c:	d02a      	beq.n	406ba4 <__sfvwrite_r+0x1ac>
  406b4e:	9b02      	ldr	r3, [sp, #8]
  406b50:	2b00      	cmp	r3, #0
  406b52:	d04c      	beq.n	406bee <__sfvwrite_r+0x1f6>
  406b54:	6820      	ldr	r0, [r4, #0]
  406b56:	6923      	ldr	r3, [r4, #16]
  406b58:	6962      	ldr	r2, [r4, #20]
  406b5a:	45c8      	cmp	r8, r9
  406b5c:	46c3      	mov	fp, r8
  406b5e:	bf28      	it	cs
  406b60:	46cb      	movcs	fp, r9
  406b62:	4298      	cmp	r0, r3
  406b64:	465f      	mov	r7, fp
  406b66:	d904      	bls.n	406b72 <__sfvwrite_r+0x17a>
  406b68:	68a3      	ldr	r3, [r4, #8]
  406b6a:	4413      	add	r3, r2
  406b6c:	459b      	cmp	fp, r3
  406b6e:	f300 8090 	bgt.w	406c92 <__sfvwrite_r+0x29a>
  406b72:	4593      	cmp	fp, r2
  406b74:	db20      	blt.n	406bb8 <__sfvwrite_r+0x1c0>
  406b76:	4613      	mov	r3, r2
  406b78:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406b7a:	69e1      	ldr	r1, [r4, #28]
  406b7c:	9801      	ldr	r0, [sp, #4]
  406b7e:	4652      	mov	r2, sl
  406b80:	47b8      	blx	r7
  406b82:	1e07      	subs	r7, r0, #0
  406b84:	ddd2      	ble.n	406b2c <__sfvwrite_r+0x134>
  406b86:	ebb8 0807 	subs.w	r8, r8, r7
  406b8a:	d023      	beq.n	406bd4 <__sfvwrite_r+0x1dc>
  406b8c:	68b3      	ldr	r3, [r6, #8]
  406b8e:	1bdb      	subs	r3, r3, r7
  406b90:	44ba      	add	sl, r7
  406b92:	ebc7 0909 	rsb	r9, r7, r9
  406b96:	60b3      	str	r3, [r6, #8]
  406b98:	2b00      	cmp	r3, #0
  406b9a:	f43f af5f 	beq.w	406a5c <__sfvwrite_r+0x64>
  406b9e:	f1b9 0f00 	cmp.w	r9, #0
  406ba2:	d1d4      	bne.n	406b4e <__sfvwrite_r+0x156>
  406ba4:	2300      	movs	r3, #0
  406ba6:	f8d5 a000 	ldr.w	sl, [r5]
  406baa:	f8d5 9004 	ldr.w	r9, [r5, #4]
  406bae:	9302      	str	r3, [sp, #8]
  406bb0:	3508      	adds	r5, #8
  406bb2:	e7c9      	b.n	406b48 <__sfvwrite_r+0x150>
  406bb4:	4640      	mov	r0, r8
  406bb6:	e783      	b.n	406ac0 <__sfvwrite_r+0xc8>
  406bb8:	465a      	mov	r2, fp
  406bba:	4651      	mov	r1, sl
  406bbc:	f000 fcf2 	bl	4075a4 <memmove>
  406bc0:	68a2      	ldr	r2, [r4, #8]
  406bc2:	6823      	ldr	r3, [r4, #0]
  406bc4:	ebcb 0202 	rsb	r2, fp, r2
  406bc8:	445b      	add	r3, fp
  406bca:	ebb8 0807 	subs.w	r8, r8, r7
  406bce:	60a2      	str	r2, [r4, #8]
  406bd0:	6023      	str	r3, [r4, #0]
  406bd2:	d1db      	bne.n	406b8c <__sfvwrite_r+0x194>
  406bd4:	4621      	mov	r1, r4
  406bd6:	9801      	ldr	r0, [sp, #4]
  406bd8:	f7ff fcc8 	bl	40656c <_fflush_r>
  406bdc:	2800      	cmp	r0, #0
  406bde:	d1a5      	bne.n	406b2c <__sfvwrite_r+0x134>
  406be0:	f8cd 8008 	str.w	r8, [sp, #8]
  406be4:	e7d2      	b.n	406b8c <__sfvwrite_r+0x194>
  406be6:	6820      	ldr	r0, [r4, #0]
  406be8:	46b8      	mov	r8, r7
  406bea:	46ba      	mov	sl, r7
  406bec:	e75c      	b.n	406aa8 <__sfvwrite_r+0xb0>
  406bee:	464a      	mov	r2, r9
  406bf0:	210a      	movs	r1, #10
  406bf2:	4650      	mov	r0, sl
  406bf4:	f000 fbec 	bl	4073d0 <memchr>
  406bf8:	2800      	cmp	r0, #0
  406bfa:	d06f      	beq.n	406cdc <__sfvwrite_r+0x2e4>
  406bfc:	3001      	adds	r0, #1
  406bfe:	2301      	movs	r3, #1
  406c00:	ebca 0800 	rsb	r8, sl, r0
  406c04:	9302      	str	r3, [sp, #8]
  406c06:	e7a5      	b.n	406b54 <__sfvwrite_r+0x15c>
  406c08:	6962      	ldr	r2, [r4, #20]
  406c0a:	6820      	ldr	r0, [r4, #0]
  406c0c:	6921      	ldr	r1, [r4, #16]
  406c0e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406c12:	ebc1 0a00 	rsb	sl, r1, r0
  406c16:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406c1a:	f10a 0001 	add.w	r0, sl, #1
  406c1e:	ea4f 0868 	mov.w	r8, r8, asr #1
  406c22:	4438      	add	r0, r7
  406c24:	4540      	cmp	r0, r8
  406c26:	4642      	mov	r2, r8
  406c28:	bf84      	itt	hi
  406c2a:	4680      	movhi	r8, r0
  406c2c:	4642      	movhi	r2, r8
  406c2e:	055b      	lsls	r3, r3, #21
  406c30:	d542      	bpl.n	406cb8 <__sfvwrite_r+0x2c0>
  406c32:	4611      	mov	r1, r2
  406c34:	9801      	ldr	r0, [sp, #4]
  406c36:	f000 f911 	bl	406e5c <_malloc_r>
  406c3a:	4683      	mov	fp, r0
  406c3c:	2800      	cmp	r0, #0
  406c3e:	d055      	beq.n	406cec <__sfvwrite_r+0x2f4>
  406c40:	4652      	mov	r2, sl
  406c42:	6921      	ldr	r1, [r4, #16]
  406c44:	f000 fc14 	bl	407470 <memcpy>
  406c48:	89a3      	ldrh	r3, [r4, #12]
  406c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406c52:	81a3      	strh	r3, [r4, #12]
  406c54:	ebca 0308 	rsb	r3, sl, r8
  406c58:	eb0b 000a 	add.w	r0, fp, sl
  406c5c:	f8c4 8014 	str.w	r8, [r4, #20]
  406c60:	f8c4 b010 	str.w	fp, [r4, #16]
  406c64:	6020      	str	r0, [r4, #0]
  406c66:	60a3      	str	r3, [r4, #8]
  406c68:	46b8      	mov	r8, r7
  406c6a:	46ba      	mov	sl, r7
  406c6c:	e71c      	b.n	406aa8 <__sfvwrite_r+0xb0>
  406c6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  406c72:	42bb      	cmp	r3, r7
  406c74:	bf28      	it	cs
  406c76:	463b      	movcs	r3, r7
  406c78:	464a      	mov	r2, r9
  406c7a:	fb93 f3f1 	sdiv	r3, r3, r1
  406c7e:	9801      	ldr	r0, [sp, #4]
  406c80:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406c82:	fb01 f303 	mul.w	r3, r1, r3
  406c86:	69e1      	ldr	r1, [r4, #28]
  406c88:	47b0      	blx	r6
  406c8a:	2800      	cmp	r0, #0
  406c8c:	f73f af18 	bgt.w	406ac0 <__sfvwrite_r+0xc8>
  406c90:	e74c      	b.n	406b2c <__sfvwrite_r+0x134>
  406c92:	461a      	mov	r2, r3
  406c94:	4651      	mov	r1, sl
  406c96:	9303      	str	r3, [sp, #12]
  406c98:	f000 fc84 	bl	4075a4 <memmove>
  406c9c:	6822      	ldr	r2, [r4, #0]
  406c9e:	9b03      	ldr	r3, [sp, #12]
  406ca0:	9801      	ldr	r0, [sp, #4]
  406ca2:	441a      	add	r2, r3
  406ca4:	6022      	str	r2, [r4, #0]
  406ca6:	4621      	mov	r1, r4
  406ca8:	f7ff fc60 	bl	40656c <_fflush_r>
  406cac:	9b03      	ldr	r3, [sp, #12]
  406cae:	2800      	cmp	r0, #0
  406cb0:	f47f af3c 	bne.w	406b2c <__sfvwrite_r+0x134>
  406cb4:	461f      	mov	r7, r3
  406cb6:	e766      	b.n	406b86 <__sfvwrite_r+0x18e>
  406cb8:	9801      	ldr	r0, [sp, #4]
  406cba:	f000 fcdb 	bl	407674 <_realloc_r>
  406cbe:	4683      	mov	fp, r0
  406cc0:	2800      	cmp	r0, #0
  406cc2:	d1c7      	bne.n	406c54 <__sfvwrite_r+0x25c>
  406cc4:	9d01      	ldr	r5, [sp, #4]
  406cc6:	6921      	ldr	r1, [r4, #16]
  406cc8:	4628      	mov	r0, r5
  406cca:	f7ff fdad 	bl	406828 <_free_r>
  406cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406cd2:	220c      	movs	r2, #12
  406cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406cd8:	602a      	str	r2, [r5, #0]
  406cda:	e729      	b.n	406b30 <__sfvwrite_r+0x138>
  406cdc:	2301      	movs	r3, #1
  406cde:	f109 0801 	add.w	r8, r9, #1
  406ce2:	9302      	str	r3, [sp, #8]
  406ce4:	e736      	b.n	406b54 <__sfvwrite_r+0x15c>
  406ce6:	f04f 30ff 	mov.w	r0, #4294967295
  406cea:	e6b8      	b.n	406a5e <__sfvwrite_r+0x66>
  406cec:	9a01      	ldr	r2, [sp, #4]
  406cee:	230c      	movs	r3, #12
  406cf0:	6013      	str	r3, [r2, #0]
  406cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406cf6:	e71b      	b.n	406b30 <__sfvwrite_r+0x138>
  406cf8:	7ffffc00 	.word	0x7ffffc00

00406cfc <_fwalk_reent>:
  406cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406d00:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406d04:	d01f      	beq.n	406d46 <_fwalk_reent+0x4a>
  406d06:	4688      	mov	r8, r1
  406d08:	4606      	mov	r6, r0
  406d0a:	f04f 0900 	mov.w	r9, #0
  406d0e:	687d      	ldr	r5, [r7, #4]
  406d10:	68bc      	ldr	r4, [r7, #8]
  406d12:	3d01      	subs	r5, #1
  406d14:	d411      	bmi.n	406d3a <_fwalk_reent+0x3e>
  406d16:	89a3      	ldrh	r3, [r4, #12]
  406d18:	2b01      	cmp	r3, #1
  406d1a:	f105 35ff 	add.w	r5, r5, #4294967295
  406d1e:	d908      	bls.n	406d32 <_fwalk_reent+0x36>
  406d20:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406d24:	3301      	adds	r3, #1
  406d26:	4621      	mov	r1, r4
  406d28:	4630      	mov	r0, r6
  406d2a:	d002      	beq.n	406d32 <_fwalk_reent+0x36>
  406d2c:	47c0      	blx	r8
  406d2e:	ea49 0900 	orr.w	r9, r9, r0
  406d32:	1c6b      	adds	r3, r5, #1
  406d34:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406d38:	d1ed      	bne.n	406d16 <_fwalk_reent+0x1a>
  406d3a:	683f      	ldr	r7, [r7, #0]
  406d3c:	2f00      	cmp	r7, #0
  406d3e:	d1e6      	bne.n	406d0e <_fwalk_reent+0x12>
  406d40:	4648      	mov	r0, r9
  406d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406d46:	46b9      	mov	r9, r7
  406d48:	4648      	mov	r0, r9
  406d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406d4e:	bf00      	nop

00406d50 <__locale_charset>:
  406d50:	4800      	ldr	r0, [pc, #0]	; (406d54 <__locale_charset+0x4>)
  406d52:	4770      	bx	lr
  406d54:	20400474 	.word	0x20400474

00406d58 <__locale_mb_cur_max>:
  406d58:	4b01      	ldr	r3, [pc, #4]	; (406d60 <__locale_mb_cur_max+0x8>)
  406d5a:	6818      	ldr	r0, [r3, #0]
  406d5c:	4770      	bx	lr
  406d5e:	bf00      	nop
  406d60:	20400494 	.word	0x20400494

00406d64 <__swhatbuf_r>:
  406d64:	b570      	push	{r4, r5, r6, lr}
  406d66:	460d      	mov	r5, r1
  406d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406d6c:	2900      	cmp	r1, #0
  406d6e:	b090      	sub	sp, #64	; 0x40
  406d70:	4614      	mov	r4, r2
  406d72:	461e      	mov	r6, r3
  406d74:	db14      	blt.n	406da0 <__swhatbuf_r+0x3c>
  406d76:	aa01      	add	r2, sp, #4
  406d78:	f001 f80c 	bl	407d94 <_fstat_r>
  406d7c:	2800      	cmp	r0, #0
  406d7e:	db0f      	blt.n	406da0 <__swhatbuf_r+0x3c>
  406d80:	9a02      	ldr	r2, [sp, #8]
  406d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406d86:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406d8a:	fab2 f282 	clz	r2, r2
  406d8e:	0952      	lsrs	r2, r2, #5
  406d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406d94:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406d98:	6032      	str	r2, [r6, #0]
  406d9a:	6023      	str	r3, [r4, #0]
  406d9c:	b010      	add	sp, #64	; 0x40
  406d9e:	bd70      	pop	{r4, r5, r6, pc}
  406da0:	89a8      	ldrh	r0, [r5, #12]
  406da2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  406da6:	b282      	uxth	r2, r0
  406da8:	2000      	movs	r0, #0
  406daa:	6030      	str	r0, [r6, #0]
  406dac:	b11a      	cbz	r2, 406db6 <__swhatbuf_r+0x52>
  406dae:	2340      	movs	r3, #64	; 0x40
  406db0:	6023      	str	r3, [r4, #0]
  406db2:	b010      	add	sp, #64	; 0x40
  406db4:	bd70      	pop	{r4, r5, r6, pc}
  406db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406dba:	4610      	mov	r0, r2
  406dbc:	6023      	str	r3, [r4, #0]
  406dbe:	b010      	add	sp, #64	; 0x40
  406dc0:	bd70      	pop	{r4, r5, r6, pc}
  406dc2:	bf00      	nop

00406dc4 <__smakebuf_r>:
  406dc4:	898a      	ldrh	r2, [r1, #12]
  406dc6:	0792      	lsls	r2, r2, #30
  406dc8:	460b      	mov	r3, r1
  406dca:	d506      	bpl.n	406dda <__smakebuf_r+0x16>
  406dcc:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406dd0:	2101      	movs	r1, #1
  406dd2:	601a      	str	r2, [r3, #0]
  406dd4:	611a      	str	r2, [r3, #16]
  406dd6:	6159      	str	r1, [r3, #20]
  406dd8:	4770      	bx	lr
  406dda:	b5f0      	push	{r4, r5, r6, r7, lr}
  406ddc:	b083      	sub	sp, #12
  406dde:	ab01      	add	r3, sp, #4
  406de0:	466a      	mov	r2, sp
  406de2:	460c      	mov	r4, r1
  406de4:	4605      	mov	r5, r0
  406de6:	f7ff ffbd 	bl	406d64 <__swhatbuf_r>
  406dea:	9900      	ldr	r1, [sp, #0]
  406dec:	4606      	mov	r6, r0
  406dee:	4628      	mov	r0, r5
  406df0:	f000 f834 	bl	406e5c <_malloc_r>
  406df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406df8:	b1d0      	cbz	r0, 406e30 <__smakebuf_r+0x6c>
  406dfa:	9a01      	ldr	r2, [sp, #4]
  406dfc:	4f12      	ldr	r7, [pc, #72]	; (406e48 <__smakebuf_r+0x84>)
  406dfe:	9900      	ldr	r1, [sp, #0]
  406e00:	63ef      	str	r7, [r5, #60]	; 0x3c
  406e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406e06:	81a3      	strh	r3, [r4, #12]
  406e08:	6020      	str	r0, [r4, #0]
  406e0a:	6120      	str	r0, [r4, #16]
  406e0c:	6161      	str	r1, [r4, #20]
  406e0e:	b91a      	cbnz	r2, 406e18 <__smakebuf_r+0x54>
  406e10:	4333      	orrs	r3, r6
  406e12:	81a3      	strh	r3, [r4, #12]
  406e14:	b003      	add	sp, #12
  406e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e18:	4628      	mov	r0, r5
  406e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406e1e:	f000 ffcd 	bl	407dbc <_isatty_r>
  406e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406e26:	2800      	cmp	r0, #0
  406e28:	d0f2      	beq.n	406e10 <__smakebuf_r+0x4c>
  406e2a:	f043 0301 	orr.w	r3, r3, #1
  406e2e:	e7ef      	b.n	406e10 <__smakebuf_r+0x4c>
  406e30:	059a      	lsls	r2, r3, #22
  406e32:	d4ef      	bmi.n	406e14 <__smakebuf_r+0x50>
  406e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406e38:	f043 0302 	orr.w	r3, r3, #2
  406e3c:	2101      	movs	r1, #1
  406e3e:	81a3      	strh	r3, [r4, #12]
  406e40:	6022      	str	r2, [r4, #0]
  406e42:	6122      	str	r2, [r4, #16]
  406e44:	6161      	str	r1, [r4, #20]
  406e46:	e7e5      	b.n	406e14 <__smakebuf_r+0x50>
  406e48:	00406599 	.word	0x00406599

00406e4c <malloc>:
  406e4c:	4b02      	ldr	r3, [pc, #8]	; (406e58 <malloc+0xc>)
  406e4e:	4601      	mov	r1, r0
  406e50:	6818      	ldr	r0, [r3, #0]
  406e52:	f000 b803 	b.w	406e5c <_malloc_r>
  406e56:	bf00      	nop
  406e58:	20400470 	.word	0x20400470

00406e5c <_malloc_r>:
  406e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e60:	f101 050b 	add.w	r5, r1, #11
  406e64:	2d16      	cmp	r5, #22
  406e66:	b083      	sub	sp, #12
  406e68:	4606      	mov	r6, r0
  406e6a:	f240 809f 	bls.w	406fac <_malloc_r+0x150>
  406e6e:	f035 0507 	bics.w	r5, r5, #7
  406e72:	f100 80bf 	bmi.w	406ff4 <_malloc_r+0x198>
  406e76:	42a9      	cmp	r1, r5
  406e78:	f200 80bc 	bhi.w	406ff4 <_malloc_r+0x198>
  406e7c:	f000 fbf6 	bl	40766c <__malloc_lock>
  406e80:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  406e84:	f0c0 829c 	bcc.w	4073c0 <_malloc_r+0x564>
  406e88:	0a6b      	lsrs	r3, r5, #9
  406e8a:	f000 80ba 	beq.w	407002 <_malloc_r+0x1a6>
  406e8e:	2b04      	cmp	r3, #4
  406e90:	f200 8183 	bhi.w	40719a <_malloc_r+0x33e>
  406e94:	09a8      	lsrs	r0, r5, #6
  406e96:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  406e9a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406e9e:	3038      	adds	r0, #56	; 0x38
  406ea0:	4fc4      	ldr	r7, [pc, #784]	; (4071b4 <_malloc_r+0x358>)
  406ea2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406ea6:	f1a3 0108 	sub.w	r1, r3, #8
  406eaa:	685c      	ldr	r4, [r3, #4]
  406eac:	42a1      	cmp	r1, r4
  406eae:	d107      	bne.n	406ec0 <_malloc_r+0x64>
  406eb0:	e0ac      	b.n	40700c <_malloc_r+0x1b0>
  406eb2:	2a00      	cmp	r2, #0
  406eb4:	f280 80ac 	bge.w	407010 <_malloc_r+0x1b4>
  406eb8:	68e4      	ldr	r4, [r4, #12]
  406eba:	42a1      	cmp	r1, r4
  406ebc:	f000 80a6 	beq.w	40700c <_malloc_r+0x1b0>
  406ec0:	6863      	ldr	r3, [r4, #4]
  406ec2:	f023 0303 	bic.w	r3, r3, #3
  406ec6:	1b5a      	subs	r2, r3, r5
  406ec8:	2a0f      	cmp	r2, #15
  406eca:	ddf2      	ble.n	406eb2 <_malloc_r+0x56>
  406ecc:	49b9      	ldr	r1, [pc, #740]	; (4071b4 <_malloc_r+0x358>)
  406ece:	693c      	ldr	r4, [r7, #16]
  406ed0:	f101 0e08 	add.w	lr, r1, #8
  406ed4:	4574      	cmp	r4, lr
  406ed6:	f000 81b3 	beq.w	407240 <_malloc_r+0x3e4>
  406eda:	6863      	ldr	r3, [r4, #4]
  406edc:	f023 0303 	bic.w	r3, r3, #3
  406ee0:	1b5a      	subs	r2, r3, r5
  406ee2:	2a0f      	cmp	r2, #15
  406ee4:	f300 8199 	bgt.w	40721a <_malloc_r+0x3be>
  406ee8:	2a00      	cmp	r2, #0
  406eea:	f8c1 e014 	str.w	lr, [r1, #20]
  406eee:	f8c1 e010 	str.w	lr, [r1, #16]
  406ef2:	f280 809e 	bge.w	407032 <_malloc_r+0x1d6>
  406ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406efa:	f080 8167 	bcs.w	4071cc <_malloc_r+0x370>
  406efe:	08db      	lsrs	r3, r3, #3
  406f00:	f103 0c01 	add.w	ip, r3, #1
  406f04:	2201      	movs	r2, #1
  406f06:	109b      	asrs	r3, r3, #2
  406f08:	fa02 f303 	lsl.w	r3, r2, r3
  406f0c:	684a      	ldr	r2, [r1, #4]
  406f0e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  406f12:	f8c4 8008 	str.w	r8, [r4, #8]
  406f16:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  406f1a:	431a      	orrs	r2, r3
  406f1c:	f1a9 0308 	sub.w	r3, r9, #8
  406f20:	60e3      	str	r3, [r4, #12]
  406f22:	604a      	str	r2, [r1, #4]
  406f24:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  406f28:	f8c8 400c 	str.w	r4, [r8, #12]
  406f2c:	1083      	asrs	r3, r0, #2
  406f2e:	2401      	movs	r4, #1
  406f30:	409c      	lsls	r4, r3
  406f32:	4294      	cmp	r4, r2
  406f34:	f200 808a 	bhi.w	40704c <_malloc_r+0x1f0>
  406f38:	4214      	tst	r4, r2
  406f3a:	d106      	bne.n	406f4a <_malloc_r+0xee>
  406f3c:	f020 0003 	bic.w	r0, r0, #3
  406f40:	0064      	lsls	r4, r4, #1
  406f42:	4214      	tst	r4, r2
  406f44:	f100 0004 	add.w	r0, r0, #4
  406f48:	d0fa      	beq.n	406f40 <_malloc_r+0xe4>
  406f4a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406f4e:	46cc      	mov	ip, r9
  406f50:	4680      	mov	r8, r0
  406f52:	f8dc 100c 	ldr.w	r1, [ip, #12]
  406f56:	458c      	cmp	ip, r1
  406f58:	d107      	bne.n	406f6a <_malloc_r+0x10e>
  406f5a:	e173      	b.n	407244 <_malloc_r+0x3e8>
  406f5c:	2a00      	cmp	r2, #0
  406f5e:	f280 8181 	bge.w	407264 <_malloc_r+0x408>
  406f62:	68c9      	ldr	r1, [r1, #12]
  406f64:	458c      	cmp	ip, r1
  406f66:	f000 816d 	beq.w	407244 <_malloc_r+0x3e8>
  406f6a:	684b      	ldr	r3, [r1, #4]
  406f6c:	f023 0303 	bic.w	r3, r3, #3
  406f70:	1b5a      	subs	r2, r3, r5
  406f72:	2a0f      	cmp	r2, #15
  406f74:	ddf2      	ble.n	406f5c <_malloc_r+0x100>
  406f76:	460c      	mov	r4, r1
  406f78:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  406f7c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  406f80:	194b      	adds	r3, r1, r5
  406f82:	f045 0501 	orr.w	r5, r5, #1
  406f86:	604d      	str	r5, [r1, #4]
  406f88:	f042 0101 	orr.w	r1, r2, #1
  406f8c:	f8c8 c00c 	str.w	ip, [r8, #12]
  406f90:	4630      	mov	r0, r6
  406f92:	f8cc 8008 	str.w	r8, [ip, #8]
  406f96:	617b      	str	r3, [r7, #20]
  406f98:	613b      	str	r3, [r7, #16]
  406f9a:	f8c3 e00c 	str.w	lr, [r3, #12]
  406f9e:	f8c3 e008 	str.w	lr, [r3, #8]
  406fa2:	6059      	str	r1, [r3, #4]
  406fa4:	509a      	str	r2, [r3, r2]
  406fa6:	f000 fb63 	bl	407670 <__malloc_unlock>
  406faa:	e01f      	b.n	406fec <_malloc_r+0x190>
  406fac:	2910      	cmp	r1, #16
  406fae:	d821      	bhi.n	406ff4 <_malloc_r+0x198>
  406fb0:	f000 fb5c 	bl	40766c <__malloc_lock>
  406fb4:	2510      	movs	r5, #16
  406fb6:	2306      	movs	r3, #6
  406fb8:	2002      	movs	r0, #2
  406fba:	4f7e      	ldr	r7, [pc, #504]	; (4071b4 <_malloc_r+0x358>)
  406fbc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406fc0:	f1a3 0208 	sub.w	r2, r3, #8
  406fc4:	685c      	ldr	r4, [r3, #4]
  406fc6:	4294      	cmp	r4, r2
  406fc8:	f000 8145 	beq.w	407256 <_malloc_r+0x3fa>
  406fcc:	6863      	ldr	r3, [r4, #4]
  406fce:	68e1      	ldr	r1, [r4, #12]
  406fd0:	68a5      	ldr	r5, [r4, #8]
  406fd2:	f023 0303 	bic.w	r3, r3, #3
  406fd6:	4423      	add	r3, r4
  406fd8:	4630      	mov	r0, r6
  406fda:	685a      	ldr	r2, [r3, #4]
  406fdc:	60e9      	str	r1, [r5, #12]
  406fde:	f042 0201 	orr.w	r2, r2, #1
  406fe2:	608d      	str	r5, [r1, #8]
  406fe4:	605a      	str	r2, [r3, #4]
  406fe6:	f000 fb43 	bl	407670 <__malloc_unlock>
  406fea:	3408      	adds	r4, #8
  406fec:	4620      	mov	r0, r4
  406fee:	b003      	add	sp, #12
  406ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ff4:	2400      	movs	r4, #0
  406ff6:	230c      	movs	r3, #12
  406ff8:	4620      	mov	r0, r4
  406ffa:	6033      	str	r3, [r6, #0]
  406ffc:	b003      	add	sp, #12
  406ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407002:	2380      	movs	r3, #128	; 0x80
  407004:	f04f 0e40 	mov.w	lr, #64	; 0x40
  407008:	203f      	movs	r0, #63	; 0x3f
  40700a:	e749      	b.n	406ea0 <_malloc_r+0x44>
  40700c:	4670      	mov	r0, lr
  40700e:	e75d      	b.n	406ecc <_malloc_r+0x70>
  407010:	4423      	add	r3, r4
  407012:	68e1      	ldr	r1, [r4, #12]
  407014:	685a      	ldr	r2, [r3, #4]
  407016:	68a5      	ldr	r5, [r4, #8]
  407018:	f042 0201 	orr.w	r2, r2, #1
  40701c:	60e9      	str	r1, [r5, #12]
  40701e:	4630      	mov	r0, r6
  407020:	608d      	str	r5, [r1, #8]
  407022:	605a      	str	r2, [r3, #4]
  407024:	f000 fb24 	bl	407670 <__malloc_unlock>
  407028:	3408      	adds	r4, #8
  40702a:	4620      	mov	r0, r4
  40702c:	b003      	add	sp, #12
  40702e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407032:	4423      	add	r3, r4
  407034:	4630      	mov	r0, r6
  407036:	685a      	ldr	r2, [r3, #4]
  407038:	f042 0201 	orr.w	r2, r2, #1
  40703c:	605a      	str	r2, [r3, #4]
  40703e:	f000 fb17 	bl	407670 <__malloc_unlock>
  407042:	3408      	adds	r4, #8
  407044:	4620      	mov	r0, r4
  407046:	b003      	add	sp, #12
  407048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40704c:	68bc      	ldr	r4, [r7, #8]
  40704e:	6863      	ldr	r3, [r4, #4]
  407050:	f023 0803 	bic.w	r8, r3, #3
  407054:	45a8      	cmp	r8, r5
  407056:	d304      	bcc.n	407062 <_malloc_r+0x206>
  407058:	ebc5 0308 	rsb	r3, r5, r8
  40705c:	2b0f      	cmp	r3, #15
  40705e:	f300 808c 	bgt.w	40717a <_malloc_r+0x31e>
  407062:	4b55      	ldr	r3, [pc, #340]	; (4071b8 <_malloc_r+0x35c>)
  407064:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4071c8 <_malloc_r+0x36c>
  407068:	681a      	ldr	r2, [r3, #0]
  40706a:	f8d9 3000 	ldr.w	r3, [r9]
  40706e:	3301      	adds	r3, #1
  407070:	442a      	add	r2, r5
  407072:	eb04 0a08 	add.w	sl, r4, r8
  407076:	f000 8160 	beq.w	40733a <_malloc_r+0x4de>
  40707a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40707e:	320f      	adds	r2, #15
  407080:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  407084:	f022 020f 	bic.w	r2, r2, #15
  407088:	4611      	mov	r1, r2
  40708a:	4630      	mov	r0, r6
  40708c:	9201      	str	r2, [sp, #4]
  40708e:	f000 fce1 	bl	407a54 <_sbrk_r>
  407092:	f1b0 3fff 	cmp.w	r0, #4294967295
  407096:	4683      	mov	fp, r0
  407098:	9a01      	ldr	r2, [sp, #4]
  40709a:	f000 8158 	beq.w	40734e <_malloc_r+0x4f2>
  40709e:	4582      	cmp	sl, r0
  4070a0:	f200 80fc 	bhi.w	40729c <_malloc_r+0x440>
  4070a4:	4b45      	ldr	r3, [pc, #276]	; (4071bc <_malloc_r+0x360>)
  4070a6:	6819      	ldr	r1, [r3, #0]
  4070a8:	45da      	cmp	sl, fp
  4070aa:	4411      	add	r1, r2
  4070ac:	6019      	str	r1, [r3, #0]
  4070ae:	f000 8153 	beq.w	407358 <_malloc_r+0x4fc>
  4070b2:	f8d9 0000 	ldr.w	r0, [r9]
  4070b6:	f8df e110 	ldr.w	lr, [pc, #272]	; 4071c8 <_malloc_r+0x36c>
  4070ba:	3001      	adds	r0, #1
  4070bc:	bf1b      	ittet	ne
  4070be:	ebca 0a0b 	rsbne	sl, sl, fp
  4070c2:	4451      	addne	r1, sl
  4070c4:	f8ce b000 	streq.w	fp, [lr]
  4070c8:	6019      	strne	r1, [r3, #0]
  4070ca:	f01b 0107 	ands.w	r1, fp, #7
  4070ce:	f000 8117 	beq.w	407300 <_malloc_r+0x4a4>
  4070d2:	f1c1 0008 	rsb	r0, r1, #8
  4070d6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4070da:	4483      	add	fp, r0
  4070dc:	3108      	adds	r1, #8
  4070de:	445a      	add	r2, fp
  4070e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4070e4:	ebc2 0901 	rsb	r9, r2, r1
  4070e8:	4649      	mov	r1, r9
  4070ea:	4630      	mov	r0, r6
  4070ec:	9301      	str	r3, [sp, #4]
  4070ee:	f000 fcb1 	bl	407a54 <_sbrk_r>
  4070f2:	1c43      	adds	r3, r0, #1
  4070f4:	9b01      	ldr	r3, [sp, #4]
  4070f6:	f000 813f 	beq.w	407378 <_malloc_r+0x51c>
  4070fa:	ebcb 0200 	rsb	r2, fp, r0
  4070fe:	444a      	add	r2, r9
  407100:	f042 0201 	orr.w	r2, r2, #1
  407104:	6819      	ldr	r1, [r3, #0]
  407106:	f8c7 b008 	str.w	fp, [r7, #8]
  40710a:	4449      	add	r1, r9
  40710c:	42bc      	cmp	r4, r7
  40710e:	f8cb 2004 	str.w	r2, [fp, #4]
  407112:	6019      	str	r1, [r3, #0]
  407114:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4071bc <_malloc_r+0x360>
  407118:	d016      	beq.n	407148 <_malloc_r+0x2ec>
  40711a:	f1b8 0f0f 	cmp.w	r8, #15
  40711e:	f240 80fd 	bls.w	40731c <_malloc_r+0x4c0>
  407122:	6862      	ldr	r2, [r4, #4]
  407124:	f1a8 030c 	sub.w	r3, r8, #12
  407128:	f023 0307 	bic.w	r3, r3, #7
  40712c:	18e0      	adds	r0, r4, r3
  40712e:	f002 0201 	and.w	r2, r2, #1
  407132:	f04f 0e05 	mov.w	lr, #5
  407136:	431a      	orrs	r2, r3
  407138:	2b0f      	cmp	r3, #15
  40713a:	6062      	str	r2, [r4, #4]
  40713c:	f8c0 e004 	str.w	lr, [r0, #4]
  407140:	f8c0 e008 	str.w	lr, [r0, #8]
  407144:	f200 811c 	bhi.w	407380 <_malloc_r+0x524>
  407148:	4b1d      	ldr	r3, [pc, #116]	; (4071c0 <_malloc_r+0x364>)
  40714a:	68bc      	ldr	r4, [r7, #8]
  40714c:	681a      	ldr	r2, [r3, #0]
  40714e:	4291      	cmp	r1, r2
  407150:	bf88      	it	hi
  407152:	6019      	strhi	r1, [r3, #0]
  407154:	4b1b      	ldr	r3, [pc, #108]	; (4071c4 <_malloc_r+0x368>)
  407156:	681a      	ldr	r2, [r3, #0]
  407158:	4291      	cmp	r1, r2
  40715a:	6862      	ldr	r2, [r4, #4]
  40715c:	bf88      	it	hi
  40715e:	6019      	strhi	r1, [r3, #0]
  407160:	f022 0203 	bic.w	r2, r2, #3
  407164:	4295      	cmp	r5, r2
  407166:	eba2 0305 	sub.w	r3, r2, r5
  40716a:	d801      	bhi.n	407170 <_malloc_r+0x314>
  40716c:	2b0f      	cmp	r3, #15
  40716e:	dc04      	bgt.n	40717a <_malloc_r+0x31e>
  407170:	4630      	mov	r0, r6
  407172:	f000 fa7d 	bl	407670 <__malloc_unlock>
  407176:	2400      	movs	r4, #0
  407178:	e738      	b.n	406fec <_malloc_r+0x190>
  40717a:	1962      	adds	r2, r4, r5
  40717c:	f043 0301 	orr.w	r3, r3, #1
  407180:	f045 0501 	orr.w	r5, r5, #1
  407184:	6065      	str	r5, [r4, #4]
  407186:	4630      	mov	r0, r6
  407188:	60ba      	str	r2, [r7, #8]
  40718a:	6053      	str	r3, [r2, #4]
  40718c:	f000 fa70 	bl	407670 <__malloc_unlock>
  407190:	3408      	adds	r4, #8
  407192:	4620      	mov	r0, r4
  407194:	b003      	add	sp, #12
  407196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40719a:	2b14      	cmp	r3, #20
  40719c:	d971      	bls.n	407282 <_malloc_r+0x426>
  40719e:	2b54      	cmp	r3, #84	; 0x54
  4071a0:	f200 80a4 	bhi.w	4072ec <_malloc_r+0x490>
  4071a4:	0b28      	lsrs	r0, r5, #12
  4071a6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4071aa:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4071ae:	306e      	adds	r0, #110	; 0x6e
  4071b0:	e676      	b.n	406ea0 <_malloc_r+0x44>
  4071b2:	bf00      	nop
  4071b4:	20400498 	.word	0x20400498
  4071b8:	2040150c 	.word	0x2040150c
  4071bc:	20401510 	.word	0x20401510
  4071c0:	20401508 	.word	0x20401508
  4071c4:	20401504 	.word	0x20401504
  4071c8:	204008a4 	.word	0x204008a4
  4071cc:	0a5a      	lsrs	r2, r3, #9
  4071ce:	2a04      	cmp	r2, #4
  4071d0:	d95e      	bls.n	407290 <_malloc_r+0x434>
  4071d2:	2a14      	cmp	r2, #20
  4071d4:	f200 80b3 	bhi.w	40733e <_malloc_r+0x4e2>
  4071d8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4071dc:	0049      	lsls	r1, r1, #1
  4071de:	325b      	adds	r2, #91	; 0x5b
  4071e0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4071e4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4071e8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4073c8 <_malloc_r+0x56c>
  4071ec:	f1ac 0c08 	sub.w	ip, ip, #8
  4071f0:	458c      	cmp	ip, r1
  4071f2:	f000 8088 	beq.w	407306 <_malloc_r+0x4aa>
  4071f6:	684a      	ldr	r2, [r1, #4]
  4071f8:	f022 0203 	bic.w	r2, r2, #3
  4071fc:	4293      	cmp	r3, r2
  4071fe:	d202      	bcs.n	407206 <_malloc_r+0x3aa>
  407200:	6889      	ldr	r1, [r1, #8]
  407202:	458c      	cmp	ip, r1
  407204:	d1f7      	bne.n	4071f6 <_malloc_r+0x39a>
  407206:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40720a:	687a      	ldr	r2, [r7, #4]
  40720c:	f8c4 c00c 	str.w	ip, [r4, #12]
  407210:	60a1      	str	r1, [r4, #8]
  407212:	f8cc 4008 	str.w	r4, [ip, #8]
  407216:	60cc      	str	r4, [r1, #12]
  407218:	e688      	b.n	406f2c <_malloc_r+0xd0>
  40721a:	1963      	adds	r3, r4, r5
  40721c:	f042 0701 	orr.w	r7, r2, #1
  407220:	f045 0501 	orr.w	r5, r5, #1
  407224:	6065      	str	r5, [r4, #4]
  407226:	4630      	mov	r0, r6
  407228:	614b      	str	r3, [r1, #20]
  40722a:	610b      	str	r3, [r1, #16]
  40722c:	f8c3 e00c 	str.w	lr, [r3, #12]
  407230:	f8c3 e008 	str.w	lr, [r3, #8]
  407234:	605f      	str	r7, [r3, #4]
  407236:	509a      	str	r2, [r3, r2]
  407238:	3408      	adds	r4, #8
  40723a:	f000 fa19 	bl	407670 <__malloc_unlock>
  40723e:	e6d5      	b.n	406fec <_malloc_r+0x190>
  407240:	684a      	ldr	r2, [r1, #4]
  407242:	e673      	b.n	406f2c <_malloc_r+0xd0>
  407244:	f108 0801 	add.w	r8, r8, #1
  407248:	f018 0f03 	tst.w	r8, #3
  40724c:	f10c 0c08 	add.w	ip, ip, #8
  407250:	f47f ae7f 	bne.w	406f52 <_malloc_r+0xf6>
  407254:	e030      	b.n	4072b8 <_malloc_r+0x45c>
  407256:	68dc      	ldr	r4, [r3, #12]
  407258:	42a3      	cmp	r3, r4
  40725a:	bf08      	it	eq
  40725c:	3002      	addeq	r0, #2
  40725e:	f43f ae35 	beq.w	406ecc <_malloc_r+0x70>
  407262:	e6b3      	b.n	406fcc <_malloc_r+0x170>
  407264:	440b      	add	r3, r1
  407266:	460c      	mov	r4, r1
  407268:	685a      	ldr	r2, [r3, #4]
  40726a:	68c9      	ldr	r1, [r1, #12]
  40726c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  407270:	f042 0201 	orr.w	r2, r2, #1
  407274:	605a      	str	r2, [r3, #4]
  407276:	4630      	mov	r0, r6
  407278:	60e9      	str	r1, [r5, #12]
  40727a:	608d      	str	r5, [r1, #8]
  40727c:	f000 f9f8 	bl	407670 <__malloc_unlock>
  407280:	e6b4      	b.n	406fec <_malloc_r+0x190>
  407282:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  407286:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40728a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40728e:	e607      	b.n	406ea0 <_malloc_r+0x44>
  407290:	099a      	lsrs	r2, r3, #6
  407292:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407296:	0049      	lsls	r1, r1, #1
  407298:	3238      	adds	r2, #56	; 0x38
  40729a:	e7a1      	b.n	4071e0 <_malloc_r+0x384>
  40729c:	42bc      	cmp	r4, r7
  40729e:	4b4a      	ldr	r3, [pc, #296]	; (4073c8 <_malloc_r+0x56c>)
  4072a0:	f43f af00 	beq.w	4070a4 <_malloc_r+0x248>
  4072a4:	689c      	ldr	r4, [r3, #8]
  4072a6:	6862      	ldr	r2, [r4, #4]
  4072a8:	f022 0203 	bic.w	r2, r2, #3
  4072ac:	e75a      	b.n	407164 <_malloc_r+0x308>
  4072ae:	f859 3908 	ldr.w	r3, [r9], #-8
  4072b2:	4599      	cmp	r9, r3
  4072b4:	f040 8082 	bne.w	4073bc <_malloc_r+0x560>
  4072b8:	f010 0f03 	tst.w	r0, #3
  4072bc:	f100 30ff 	add.w	r0, r0, #4294967295
  4072c0:	d1f5      	bne.n	4072ae <_malloc_r+0x452>
  4072c2:	687b      	ldr	r3, [r7, #4]
  4072c4:	ea23 0304 	bic.w	r3, r3, r4
  4072c8:	607b      	str	r3, [r7, #4]
  4072ca:	0064      	lsls	r4, r4, #1
  4072cc:	429c      	cmp	r4, r3
  4072ce:	f63f aebd 	bhi.w	40704c <_malloc_r+0x1f0>
  4072d2:	2c00      	cmp	r4, #0
  4072d4:	f43f aeba 	beq.w	40704c <_malloc_r+0x1f0>
  4072d8:	421c      	tst	r4, r3
  4072da:	4640      	mov	r0, r8
  4072dc:	f47f ae35 	bne.w	406f4a <_malloc_r+0xee>
  4072e0:	0064      	lsls	r4, r4, #1
  4072e2:	421c      	tst	r4, r3
  4072e4:	f100 0004 	add.w	r0, r0, #4
  4072e8:	d0fa      	beq.n	4072e0 <_malloc_r+0x484>
  4072ea:	e62e      	b.n	406f4a <_malloc_r+0xee>
  4072ec:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4072f0:	d818      	bhi.n	407324 <_malloc_r+0x4c8>
  4072f2:	0be8      	lsrs	r0, r5, #15
  4072f4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4072f8:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4072fc:	3077      	adds	r0, #119	; 0x77
  4072fe:	e5cf      	b.n	406ea0 <_malloc_r+0x44>
  407300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407304:	e6eb      	b.n	4070de <_malloc_r+0x282>
  407306:	2101      	movs	r1, #1
  407308:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40730c:	1092      	asrs	r2, r2, #2
  40730e:	fa01 f202 	lsl.w	r2, r1, r2
  407312:	431a      	orrs	r2, r3
  407314:	f8c8 2004 	str.w	r2, [r8, #4]
  407318:	4661      	mov	r1, ip
  40731a:	e777      	b.n	40720c <_malloc_r+0x3b0>
  40731c:	2301      	movs	r3, #1
  40731e:	f8cb 3004 	str.w	r3, [fp, #4]
  407322:	e725      	b.n	407170 <_malloc_r+0x314>
  407324:	f240 5254 	movw	r2, #1364	; 0x554
  407328:	4293      	cmp	r3, r2
  40732a:	d820      	bhi.n	40736e <_malloc_r+0x512>
  40732c:	0ca8      	lsrs	r0, r5, #18
  40732e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  407332:	ea4f 034e 	mov.w	r3, lr, lsl #1
  407336:	307c      	adds	r0, #124	; 0x7c
  407338:	e5b2      	b.n	406ea0 <_malloc_r+0x44>
  40733a:	3210      	adds	r2, #16
  40733c:	e6a4      	b.n	407088 <_malloc_r+0x22c>
  40733e:	2a54      	cmp	r2, #84	; 0x54
  407340:	d826      	bhi.n	407390 <_malloc_r+0x534>
  407342:	0b1a      	lsrs	r2, r3, #12
  407344:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  407348:	0049      	lsls	r1, r1, #1
  40734a:	326e      	adds	r2, #110	; 0x6e
  40734c:	e748      	b.n	4071e0 <_malloc_r+0x384>
  40734e:	68bc      	ldr	r4, [r7, #8]
  407350:	6862      	ldr	r2, [r4, #4]
  407352:	f022 0203 	bic.w	r2, r2, #3
  407356:	e705      	b.n	407164 <_malloc_r+0x308>
  407358:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40735c:	2800      	cmp	r0, #0
  40735e:	f47f aea8 	bne.w	4070b2 <_malloc_r+0x256>
  407362:	4442      	add	r2, r8
  407364:	68bb      	ldr	r3, [r7, #8]
  407366:	f042 0201 	orr.w	r2, r2, #1
  40736a:	605a      	str	r2, [r3, #4]
  40736c:	e6ec      	b.n	407148 <_malloc_r+0x2ec>
  40736e:	23fe      	movs	r3, #254	; 0xfe
  407370:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  407374:	207e      	movs	r0, #126	; 0x7e
  407376:	e593      	b.n	406ea0 <_malloc_r+0x44>
  407378:	2201      	movs	r2, #1
  40737a:	f04f 0900 	mov.w	r9, #0
  40737e:	e6c1      	b.n	407104 <_malloc_r+0x2a8>
  407380:	f104 0108 	add.w	r1, r4, #8
  407384:	4630      	mov	r0, r6
  407386:	f7ff fa4f 	bl	406828 <_free_r>
  40738a:	f8d9 1000 	ldr.w	r1, [r9]
  40738e:	e6db      	b.n	407148 <_malloc_r+0x2ec>
  407390:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407394:	d805      	bhi.n	4073a2 <_malloc_r+0x546>
  407396:	0bda      	lsrs	r2, r3, #15
  407398:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40739c:	0049      	lsls	r1, r1, #1
  40739e:	3277      	adds	r2, #119	; 0x77
  4073a0:	e71e      	b.n	4071e0 <_malloc_r+0x384>
  4073a2:	f240 5154 	movw	r1, #1364	; 0x554
  4073a6:	428a      	cmp	r2, r1
  4073a8:	d805      	bhi.n	4073b6 <_malloc_r+0x55a>
  4073aa:	0c9a      	lsrs	r2, r3, #18
  4073ac:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4073b0:	0049      	lsls	r1, r1, #1
  4073b2:	327c      	adds	r2, #124	; 0x7c
  4073b4:	e714      	b.n	4071e0 <_malloc_r+0x384>
  4073b6:	21fe      	movs	r1, #254	; 0xfe
  4073b8:	227e      	movs	r2, #126	; 0x7e
  4073ba:	e711      	b.n	4071e0 <_malloc_r+0x384>
  4073bc:	687b      	ldr	r3, [r7, #4]
  4073be:	e784      	b.n	4072ca <_malloc_r+0x46e>
  4073c0:	08e8      	lsrs	r0, r5, #3
  4073c2:	1c43      	adds	r3, r0, #1
  4073c4:	005b      	lsls	r3, r3, #1
  4073c6:	e5f8      	b.n	406fba <_malloc_r+0x15e>
  4073c8:	20400498 	.word	0x20400498
  4073cc:	00000000 	.word	0x00000000

004073d0 <memchr>:
  4073d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4073d4:	2a10      	cmp	r2, #16
  4073d6:	db2b      	blt.n	407430 <memchr+0x60>
  4073d8:	f010 0f07 	tst.w	r0, #7
  4073dc:	d008      	beq.n	4073f0 <memchr+0x20>
  4073de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4073e2:	3a01      	subs	r2, #1
  4073e4:	428b      	cmp	r3, r1
  4073e6:	d02d      	beq.n	407444 <memchr+0x74>
  4073e8:	f010 0f07 	tst.w	r0, #7
  4073ec:	b342      	cbz	r2, 407440 <memchr+0x70>
  4073ee:	d1f6      	bne.n	4073de <memchr+0xe>
  4073f0:	b4f0      	push	{r4, r5, r6, r7}
  4073f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4073f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4073fa:	f022 0407 	bic.w	r4, r2, #7
  4073fe:	f07f 0700 	mvns.w	r7, #0
  407402:	2300      	movs	r3, #0
  407404:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407408:	3c08      	subs	r4, #8
  40740a:	ea85 0501 	eor.w	r5, r5, r1
  40740e:	ea86 0601 	eor.w	r6, r6, r1
  407412:	fa85 f547 	uadd8	r5, r5, r7
  407416:	faa3 f587 	sel	r5, r3, r7
  40741a:	fa86 f647 	uadd8	r6, r6, r7
  40741e:	faa5 f687 	sel	r6, r5, r7
  407422:	b98e      	cbnz	r6, 407448 <memchr+0x78>
  407424:	d1ee      	bne.n	407404 <memchr+0x34>
  407426:	bcf0      	pop	{r4, r5, r6, r7}
  407428:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40742c:	f002 0207 	and.w	r2, r2, #7
  407430:	b132      	cbz	r2, 407440 <memchr+0x70>
  407432:	f810 3b01 	ldrb.w	r3, [r0], #1
  407436:	3a01      	subs	r2, #1
  407438:	ea83 0301 	eor.w	r3, r3, r1
  40743c:	b113      	cbz	r3, 407444 <memchr+0x74>
  40743e:	d1f8      	bne.n	407432 <memchr+0x62>
  407440:	2000      	movs	r0, #0
  407442:	4770      	bx	lr
  407444:	3801      	subs	r0, #1
  407446:	4770      	bx	lr
  407448:	2d00      	cmp	r5, #0
  40744a:	bf06      	itte	eq
  40744c:	4635      	moveq	r5, r6
  40744e:	3803      	subeq	r0, #3
  407450:	3807      	subne	r0, #7
  407452:	f015 0f01 	tst.w	r5, #1
  407456:	d107      	bne.n	407468 <memchr+0x98>
  407458:	3001      	adds	r0, #1
  40745a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40745e:	bf02      	ittt	eq
  407460:	3001      	addeq	r0, #1
  407462:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407466:	3001      	addeq	r0, #1
  407468:	bcf0      	pop	{r4, r5, r6, r7}
  40746a:	3801      	subs	r0, #1
  40746c:	4770      	bx	lr
  40746e:	bf00      	nop

00407470 <memcpy>:
  407470:	4684      	mov	ip, r0
  407472:	ea41 0300 	orr.w	r3, r1, r0
  407476:	f013 0303 	ands.w	r3, r3, #3
  40747a:	d16d      	bne.n	407558 <memcpy+0xe8>
  40747c:	3a40      	subs	r2, #64	; 0x40
  40747e:	d341      	bcc.n	407504 <memcpy+0x94>
  407480:	f851 3b04 	ldr.w	r3, [r1], #4
  407484:	f840 3b04 	str.w	r3, [r0], #4
  407488:	f851 3b04 	ldr.w	r3, [r1], #4
  40748c:	f840 3b04 	str.w	r3, [r0], #4
  407490:	f851 3b04 	ldr.w	r3, [r1], #4
  407494:	f840 3b04 	str.w	r3, [r0], #4
  407498:	f851 3b04 	ldr.w	r3, [r1], #4
  40749c:	f840 3b04 	str.w	r3, [r0], #4
  4074a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074a4:	f840 3b04 	str.w	r3, [r0], #4
  4074a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074ac:	f840 3b04 	str.w	r3, [r0], #4
  4074b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074b4:	f840 3b04 	str.w	r3, [r0], #4
  4074b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074bc:	f840 3b04 	str.w	r3, [r0], #4
  4074c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074c4:	f840 3b04 	str.w	r3, [r0], #4
  4074c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074cc:	f840 3b04 	str.w	r3, [r0], #4
  4074d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074d4:	f840 3b04 	str.w	r3, [r0], #4
  4074d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074dc:	f840 3b04 	str.w	r3, [r0], #4
  4074e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074e4:	f840 3b04 	str.w	r3, [r0], #4
  4074e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074ec:	f840 3b04 	str.w	r3, [r0], #4
  4074f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074f4:	f840 3b04 	str.w	r3, [r0], #4
  4074f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074fc:	f840 3b04 	str.w	r3, [r0], #4
  407500:	3a40      	subs	r2, #64	; 0x40
  407502:	d2bd      	bcs.n	407480 <memcpy+0x10>
  407504:	3230      	adds	r2, #48	; 0x30
  407506:	d311      	bcc.n	40752c <memcpy+0xbc>
  407508:	f851 3b04 	ldr.w	r3, [r1], #4
  40750c:	f840 3b04 	str.w	r3, [r0], #4
  407510:	f851 3b04 	ldr.w	r3, [r1], #4
  407514:	f840 3b04 	str.w	r3, [r0], #4
  407518:	f851 3b04 	ldr.w	r3, [r1], #4
  40751c:	f840 3b04 	str.w	r3, [r0], #4
  407520:	f851 3b04 	ldr.w	r3, [r1], #4
  407524:	f840 3b04 	str.w	r3, [r0], #4
  407528:	3a10      	subs	r2, #16
  40752a:	d2ed      	bcs.n	407508 <memcpy+0x98>
  40752c:	320c      	adds	r2, #12
  40752e:	d305      	bcc.n	40753c <memcpy+0xcc>
  407530:	f851 3b04 	ldr.w	r3, [r1], #4
  407534:	f840 3b04 	str.w	r3, [r0], #4
  407538:	3a04      	subs	r2, #4
  40753a:	d2f9      	bcs.n	407530 <memcpy+0xc0>
  40753c:	3204      	adds	r2, #4
  40753e:	d008      	beq.n	407552 <memcpy+0xe2>
  407540:	07d2      	lsls	r2, r2, #31
  407542:	bf1c      	itt	ne
  407544:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407548:	f800 3b01 	strbne.w	r3, [r0], #1
  40754c:	d301      	bcc.n	407552 <memcpy+0xe2>
  40754e:	880b      	ldrh	r3, [r1, #0]
  407550:	8003      	strh	r3, [r0, #0]
  407552:	4660      	mov	r0, ip
  407554:	4770      	bx	lr
  407556:	bf00      	nop
  407558:	2a08      	cmp	r2, #8
  40755a:	d313      	bcc.n	407584 <memcpy+0x114>
  40755c:	078b      	lsls	r3, r1, #30
  40755e:	d08d      	beq.n	40747c <memcpy+0xc>
  407560:	f010 0303 	ands.w	r3, r0, #3
  407564:	d08a      	beq.n	40747c <memcpy+0xc>
  407566:	f1c3 0304 	rsb	r3, r3, #4
  40756a:	1ad2      	subs	r2, r2, r3
  40756c:	07db      	lsls	r3, r3, #31
  40756e:	bf1c      	itt	ne
  407570:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407574:	f800 3b01 	strbne.w	r3, [r0], #1
  407578:	d380      	bcc.n	40747c <memcpy+0xc>
  40757a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40757e:	f820 3b02 	strh.w	r3, [r0], #2
  407582:	e77b      	b.n	40747c <memcpy+0xc>
  407584:	3a04      	subs	r2, #4
  407586:	d3d9      	bcc.n	40753c <memcpy+0xcc>
  407588:	3a01      	subs	r2, #1
  40758a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40758e:	f800 3b01 	strb.w	r3, [r0], #1
  407592:	d2f9      	bcs.n	407588 <memcpy+0x118>
  407594:	780b      	ldrb	r3, [r1, #0]
  407596:	7003      	strb	r3, [r0, #0]
  407598:	784b      	ldrb	r3, [r1, #1]
  40759a:	7043      	strb	r3, [r0, #1]
  40759c:	788b      	ldrb	r3, [r1, #2]
  40759e:	7083      	strb	r3, [r0, #2]
  4075a0:	4660      	mov	r0, ip
  4075a2:	4770      	bx	lr

004075a4 <memmove>:
  4075a4:	4288      	cmp	r0, r1
  4075a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4075a8:	d90d      	bls.n	4075c6 <memmove+0x22>
  4075aa:	188b      	adds	r3, r1, r2
  4075ac:	4298      	cmp	r0, r3
  4075ae:	d20a      	bcs.n	4075c6 <memmove+0x22>
  4075b0:	1881      	adds	r1, r0, r2
  4075b2:	2a00      	cmp	r2, #0
  4075b4:	d051      	beq.n	40765a <memmove+0xb6>
  4075b6:	1a9a      	subs	r2, r3, r2
  4075b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4075bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4075c0:	4293      	cmp	r3, r2
  4075c2:	d1f9      	bne.n	4075b8 <memmove+0x14>
  4075c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075c6:	2a0f      	cmp	r2, #15
  4075c8:	d948      	bls.n	40765c <memmove+0xb8>
  4075ca:	ea41 0300 	orr.w	r3, r1, r0
  4075ce:	079b      	lsls	r3, r3, #30
  4075d0:	d146      	bne.n	407660 <memmove+0xbc>
  4075d2:	f100 0410 	add.w	r4, r0, #16
  4075d6:	f101 0310 	add.w	r3, r1, #16
  4075da:	4615      	mov	r5, r2
  4075dc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4075e0:	f844 6c10 	str.w	r6, [r4, #-16]
  4075e4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4075e8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4075ec:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4075f0:	f844 6c08 	str.w	r6, [r4, #-8]
  4075f4:	3d10      	subs	r5, #16
  4075f6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4075fa:	f844 6c04 	str.w	r6, [r4, #-4]
  4075fe:	2d0f      	cmp	r5, #15
  407600:	f103 0310 	add.w	r3, r3, #16
  407604:	f104 0410 	add.w	r4, r4, #16
  407608:	d8e8      	bhi.n	4075dc <memmove+0x38>
  40760a:	f1a2 0310 	sub.w	r3, r2, #16
  40760e:	f023 030f 	bic.w	r3, r3, #15
  407612:	f002 0e0f 	and.w	lr, r2, #15
  407616:	3310      	adds	r3, #16
  407618:	f1be 0f03 	cmp.w	lr, #3
  40761c:	4419      	add	r1, r3
  40761e:	4403      	add	r3, r0
  407620:	d921      	bls.n	407666 <memmove+0xc2>
  407622:	1f1e      	subs	r6, r3, #4
  407624:	460d      	mov	r5, r1
  407626:	4674      	mov	r4, lr
  407628:	3c04      	subs	r4, #4
  40762a:	f855 7b04 	ldr.w	r7, [r5], #4
  40762e:	f846 7f04 	str.w	r7, [r6, #4]!
  407632:	2c03      	cmp	r4, #3
  407634:	d8f8      	bhi.n	407628 <memmove+0x84>
  407636:	f1ae 0404 	sub.w	r4, lr, #4
  40763a:	f024 0403 	bic.w	r4, r4, #3
  40763e:	3404      	adds	r4, #4
  407640:	4423      	add	r3, r4
  407642:	4421      	add	r1, r4
  407644:	f002 0203 	and.w	r2, r2, #3
  407648:	b162      	cbz	r2, 407664 <memmove+0xc0>
  40764a:	3b01      	subs	r3, #1
  40764c:	440a      	add	r2, r1
  40764e:	f811 4b01 	ldrb.w	r4, [r1], #1
  407652:	f803 4f01 	strb.w	r4, [r3, #1]!
  407656:	428a      	cmp	r2, r1
  407658:	d1f9      	bne.n	40764e <memmove+0xaa>
  40765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40765c:	4603      	mov	r3, r0
  40765e:	e7f3      	b.n	407648 <memmove+0xa4>
  407660:	4603      	mov	r3, r0
  407662:	e7f2      	b.n	40764a <memmove+0xa6>
  407664:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407666:	4672      	mov	r2, lr
  407668:	e7ee      	b.n	407648 <memmove+0xa4>
  40766a:	bf00      	nop

0040766c <__malloc_lock>:
  40766c:	4770      	bx	lr
  40766e:	bf00      	nop

00407670 <__malloc_unlock>:
  407670:	4770      	bx	lr
  407672:	bf00      	nop

00407674 <_realloc_r>:
  407674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407678:	4617      	mov	r7, r2
  40767a:	b083      	sub	sp, #12
  40767c:	2900      	cmp	r1, #0
  40767e:	f000 80c1 	beq.w	407804 <_realloc_r+0x190>
  407682:	460e      	mov	r6, r1
  407684:	4681      	mov	r9, r0
  407686:	f107 050b 	add.w	r5, r7, #11
  40768a:	f7ff ffef 	bl	40766c <__malloc_lock>
  40768e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  407692:	2d16      	cmp	r5, #22
  407694:	f02e 0403 	bic.w	r4, lr, #3
  407698:	f1a6 0808 	sub.w	r8, r6, #8
  40769c:	d840      	bhi.n	407720 <_realloc_r+0xac>
  40769e:	2210      	movs	r2, #16
  4076a0:	4615      	mov	r5, r2
  4076a2:	42af      	cmp	r7, r5
  4076a4:	d841      	bhi.n	40772a <_realloc_r+0xb6>
  4076a6:	4294      	cmp	r4, r2
  4076a8:	da75      	bge.n	407796 <_realloc_r+0x122>
  4076aa:	4bc9      	ldr	r3, [pc, #804]	; (4079d0 <_realloc_r+0x35c>)
  4076ac:	6899      	ldr	r1, [r3, #8]
  4076ae:	eb08 0004 	add.w	r0, r8, r4
  4076b2:	4288      	cmp	r0, r1
  4076b4:	6841      	ldr	r1, [r0, #4]
  4076b6:	f000 80d9 	beq.w	40786c <_realloc_r+0x1f8>
  4076ba:	f021 0301 	bic.w	r3, r1, #1
  4076be:	4403      	add	r3, r0
  4076c0:	685b      	ldr	r3, [r3, #4]
  4076c2:	07db      	lsls	r3, r3, #31
  4076c4:	d57d      	bpl.n	4077c2 <_realloc_r+0x14e>
  4076c6:	f01e 0f01 	tst.w	lr, #1
  4076ca:	d035      	beq.n	407738 <_realloc_r+0xc4>
  4076cc:	4639      	mov	r1, r7
  4076ce:	4648      	mov	r0, r9
  4076d0:	f7ff fbc4 	bl	406e5c <_malloc_r>
  4076d4:	4607      	mov	r7, r0
  4076d6:	b1e0      	cbz	r0, 407712 <_realloc_r+0x9e>
  4076d8:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4076dc:	f023 0301 	bic.w	r3, r3, #1
  4076e0:	4443      	add	r3, r8
  4076e2:	f1a0 0208 	sub.w	r2, r0, #8
  4076e6:	429a      	cmp	r2, r3
  4076e8:	f000 8144 	beq.w	407974 <_realloc_r+0x300>
  4076ec:	1f22      	subs	r2, r4, #4
  4076ee:	2a24      	cmp	r2, #36	; 0x24
  4076f0:	f200 8131 	bhi.w	407956 <_realloc_r+0x2e2>
  4076f4:	2a13      	cmp	r2, #19
  4076f6:	f200 8104 	bhi.w	407902 <_realloc_r+0x28e>
  4076fa:	4603      	mov	r3, r0
  4076fc:	4632      	mov	r2, r6
  4076fe:	6811      	ldr	r1, [r2, #0]
  407700:	6019      	str	r1, [r3, #0]
  407702:	6851      	ldr	r1, [r2, #4]
  407704:	6059      	str	r1, [r3, #4]
  407706:	6892      	ldr	r2, [r2, #8]
  407708:	609a      	str	r2, [r3, #8]
  40770a:	4631      	mov	r1, r6
  40770c:	4648      	mov	r0, r9
  40770e:	f7ff f88b 	bl	406828 <_free_r>
  407712:	4648      	mov	r0, r9
  407714:	f7ff ffac 	bl	407670 <__malloc_unlock>
  407718:	4638      	mov	r0, r7
  40771a:	b003      	add	sp, #12
  40771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407720:	f025 0507 	bic.w	r5, r5, #7
  407724:	2d00      	cmp	r5, #0
  407726:	462a      	mov	r2, r5
  407728:	dabb      	bge.n	4076a2 <_realloc_r+0x2e>
  40772a:	230c      	movs	r3, #12
  40772c:	2000      	movs	r0, #0
  40772e:	f8c9 3000 	str.w	r3, [r9]
  407732:	b003      	add	sp, #12
  407734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407738:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40773c:	ebc3 0a08 	rsb	sl, r3, r8
  407740:	f8da 3004 	ldr.w	r3, [sl, #4]
  407744:	f023 0c03 	bic.w	ip, r3, #3
  407748:	eb04 030c 	add.w	r3, r4, ip
  40774c:	4293      	cmp	r3, r2
  40774e:	dbbd      	blt.n	4076cc <_realloc_r+0x58>
  407750:	4657      	mov	r7, sl
  407752:	f8da 100c 	ldr.w	r1, [sl, #12]
  407756:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40775a:	1f22      	subs	r2, r4, #4
  40775c:	2a24      	cmp	r2, #36	; 0x24
  40775e:	60c1      	str	r1, [r0, #12]
  407760:	6088      	str	r0, [r1, #8]
  407762:	f200 8117 	bhi.w	407994 <_realloc_r+0x320>
  407766:	2a13      	cmp	r2, #19
  407768:	f240 8112 	bls.w	407990 <_realloc_r+0x31c>
  40776c:	6831      	ldr	r1, [r6, #0]
  40776e:	f8ca 1008 	str.w	r1, [sl, #8]
  407772:	6871      	ldr	r1, [r6, #4]
  407774:	f8ca 100c 	str.w	r1, [sl, #12]
  407778:	2a1b      	cmp	r2, #27
  40777a:	f200 812b 	bhi.w	4079d4 <_realloc_r+0x360>
  40777e:	3608      	adds	r6, #8
  407780:	f10a 0210 	add.w	r2, sl, #16
  407784:	6831      	ldr	r1, [r6, #0]
  407786:	6011      	str	r1, [r2, #0]
  407788:	6871      	ldr	r1, [r6, #4]
  40778a:	6051      	str	r1, [r2, #4]
  40778c:	68b1      	ldr	r1, [r6, #8]
  40778e:	6091      	str	r1, [r2, #8]
  407790:	463e      	mov	r6, r7
  407792:	461c      	mov	r4, r3
  407794:	46d0      	mov	r8, sl
  407796:	1b63      	subs	r3, r4, r5
  407798:	2b0f      	cmp	r3, #15
  40779a:	d81d      	bhi.n	4077d8 <_realloc_r+0x164>
  40779c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4077a0:	f003 0301 	and.w	r3, r3, #1
  4077a4:	4323      	orrs	r3, r4
  4077a6:	4444      	add	r4, r8
  4077a8:	f8c8 3004 	str.w	r3, [r8, #4]
  4077ac:	6863      	ldr	r3, [r4, #4]
  4077ae:	f043 0301 	orr.w	r3, r3, #1
  4077b2:	6063      	str	r3, [r4, #4]
  4077b4:	4648      	mov	r0, r9
  4077b6:	f7ff ff5b 	bl	407670 <__malloc_unlock>
  4077ba:	4630      	mov	r0, r6
  4077bc:	b003      	add	sp, #12
  4077be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077c2:	f021 0103 	bic.w	r1, r1, #3
  4077c6:	4421      	add	r1, r4
  4077c8:	4291      	cmp	r1, r2
  4077ca:	db21      	blt.n	407810 <_realloc_r+0x19c>
  4077cc:	68c3      	ldr	r3, [r0, #12]
  4077ce:	6882      	ldr	r2, [r0, #8]
  4077d0:	460c      	mov	r4, r1
  4077d2:	60d3      	str	r3, [r2, #12]
  4077d4:	609a      	str	r2, [r3, #8]
  4077d6:	e7de      	b.n	407796 <_realloc_r+0x122>
  4077d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4077dc:	eb08 0105 	add.w	r1, r8, r5
  4077e0:	f002 0201 	and.w	r2, r2, #1
  4077e4:	4315      	orrs	r5, r2
  4077e6:	f043 0201 	orr.w	r2, r3, #1
  4077ea:	440b      	add	r3, r1
  4077ec:	f8c8 5004 	str.w	r5, [r8, #4]
  4077f0:	604a      	str	r2, [r1, #4]
  4077f2:	685a      	ldr	r2, [r3, #4]
  4077f4:	f042 0201 	orr.w	r2, r2, #1
  4077f8:	3108      	adds	r1, #8
  4077fa:	605a      	str	r2, [r3, #4]
  4077fc:	4648      	mov	r0, r9
  4077fe:	f7ff f813 	bl	406828 <_free_r>
  407802:	e7d7      	b.n	4077b4 <_realloc_r+0x140>
  407804:	4611      	mov	r1, r2
  407806:	b003      	add	sp, #12
  407808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40780c:	f7ff bb26 	b.w	406e5c <_malloc_r>
  407810:	f01e 0f01 	tst.w	lr, #1
  407814:	f47f af5a 	bne.w	4076cc <_realloc_r+0x58>
  407818:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40781c:	ebc3 0a08 	rsb	sl, r3, r8
  407820:	f8da 3004 	ldr.w	r3, [sl, #4]
  407824:	f023 0c03 	bic.w	ip, r3, #3
  407828:	eb01 0e0c 	add.w	lr, r1, ip
  40782c:	4596      	cmp	lr, r2
  40782e:	db8b      	blt.n	407748 <_realloc_r+0xd4>
  407830:	68c3      	ldr	r3, [r0, #12]
  407832:	6882      	ldr	r2, [r0, #8]
  407834:	4657      	mov	r7, sl
  407836:	60d3      	str	r3, [r2, #12]
  407838:	609a      	str	r2, [r3, #8]
  40783a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40783e:	f8da 300c 	ldr.w	r3, [sl, #12]
  407842:	60cb      	str	r3, [r1, #12]
  407844:	1f22      	subs	r2, r4, #4
  407846:	2a24      	cmp	r2, #36	; 0x24
  407848:	6099      	str	r1, [r3, #8]
  40784a:	f200 8099 	bhi.w	407980 <_realloc_r+0x30c>
  40784e:	2a13      	cmp	r2, #19
  407850:	d962      	bls.n	407918 <_realloc_r+0x2a4>
  407852:	6833      	ldr	r3, [r6, #0]
  407854:	f8ca 3008 	str.w	r3, [sl, #8]
  407858:	6873      	ldr	r3, [r6, #4]
  40785a:	f8ca 300c 	str.w	r3, [sl, #12]
  40785e:	2a1b      	cmp	r2, #27
  407860:	f200 80a0 	bhi.w	4079a4 <_realloc_r+0x330>
  407864:	3608      	adds	r6, #8
  407866:	f10a 0310 	add.w	r3, sl, #16
  40786a:	e056      	b.n	40791a <_realloc_r+0x2a6>
  40786c:	f021 0b03 	bic.w	fp, r1, #3
  407870:	44a3      	add	fp, r4
  407872:	f105 0010 	add.w	r0, r5, #16
  407876:	4583      	cmp	fp, r0
  407878:	da59      	bge.n	40792e <_realloc_r+0x2ba>
  40787a:	f01e 0f01 	tst.w	lr, #1
  40787e:	f47f af25 	bne.w	4076cc <_realloc_r+0x58>
  407882:	f856 1c08 	ldr.w	r1, [r6, #-8]
  407886:	ebc1 0a08 	rsb	sl, r1, r8
  40788a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40788e:	f021 0c03 	bic.w	ip, r1, #3
  407892:	44e3      	add	fp, ip
  407894:	4558      	cmp	r0, fp
  407896:	f73f af57 	bgt.w	407748 <_realloc_r+0xd4>
  40789a:	4657      	mov	r7, sl
  40789c:	f8da 100c 	ldr.w	r1, [sl, #12]
  4078a0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4078a4:	1f22      	subs	r2, r4, #4
  4078a6:	2a24      	cmp	r2, #36	; 0x24
  4078a8:	60c1      	str	r1, [r0, #12]
  4078aa:	6088      	str	r0, [r1, #8]
  4078ac:	f200 80b4 	bhi.w	407a18 <_realloc_r+0x3a4>
  4078b0:	2a13      	cmp	r2, #19
  4078b2:	f240 80a5 	bls.w	407a00 <_realloc_r+0x38c>
  4078b6:	6831      	ldr	r1, [r6, #0]
  4078b8:	f8ca 1008 	str.w	r1, [sl, #8]
  4078bc:	6871      	ldr	r1, [r6, #4]
  4078be:	f8ca 100c 	str.w	r1, [sl, #12]
  4078c2:	2a1b      	cmp	r2, #27
  4078c4:	f200 80af 	bhi.w	407a26 <_realloc_r+0x3b2>
  4078c8:	3608      	adds	r6, #8
  4078ca:	f10a 0210 	add.w	r2, sl, #16
  4078ce:	6831      	ldr	r1, [r6, #0]
  4078d0:	6011      	str	r1, [r2, #0]
  4078d2:	6871      	ldr	r1, [r6, #4]
  4078d4:	6051      	str	r1, [r2, #4]
  4078d6:	68b1      	ldr	r1, [r6, #8]
  4078d8:	6091      	str	r1, [r2, #8]
  4078da:	eb0a 0105 	add.w	r1, sl, r5
  4078de:	ebc5 020b 	rsb	r2, r5, fp
  4078e2:	f042 0201 	orr.w	r2, r2, #1
  4078e6:	6099      	str	r1, [r3, #8]
  4078e8:	604a      	str	r2, [r1, #4]
  4078ea:	f8da 3004 	ldr.w	r3, [sl, #4]
  4078ee:	f003 0301 	and.w	r3, r3, #1
  4078f2:	431d      	orrs	r5, r3
  4078f4:	4648      	mov	r0, r9
  4078f6:	f8ca 5004 	str.w	r5, [sl, #4]
  4078fa:	f7ff feb9 	bl	407670 <__malloc_unlock>
  4078fe:	4638      	mov	r0, r7
  407900:	e75c      	b.n	4077bc <_realloc_r+0x148>
  407902:	6833      	ldr	r3, [r6, #0]
  407904:	6003      	str	r3, [r0, #0]
  407906:	6873      	ldr	r3, [r6, #4]
  407908:	6043      	str	r3, [r0, #4]
  40790a:	2a1b      	cmp	r2, #27
  40790c:	d827      	bhi.n	40795e <_realloc_r+0x2ea>
  40790e:	f100 0308 	add.w	r3, r0, #8
  407912:	f106 0208 	add.w	r2, r6, #8
  407916:	e6f2      	b.n	4076fe <_realloc_r+0x8a>
  407918:	463b      	mov	r3, r7
  40791a:	6832      	ldr	r2, [r6, #0]
  40791c:	601a      	str	r2, [r3, #0]
  40791e:	6872      	ldr	r2, [r6, #4]
  407920:	605a      	str	r2, [r3, #4]
  407922:	68b2      	ldr	r2, [r6, #8]
  407924:	609a      	str	r2, [r3, #8]
  407926:	463e      	mov	r6, r7
  407928:	4674      	mov	r4, lr
  40792a:	46d0      	mov	r8, sl
  40792c:	e733      	b.n	407796 <_realloc_r+0x122>
  40792e:	eb08 0105 	add.w	r1, r8, r5
  407932:	ebc5 0b0b 	rsb	fp, r5, fp
  407936:	f04b 0201 	orr.w	r2, fp, #1
  40793a:	6099      	str	r1, [r3, #8]
  40793c:	604a      	str	r2, [r1, #4]
  40793e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407942:	f003 0301 	and.w	r3, r3, #1
  407946:	431d      	orrs	r5, r3
  407948:	4648      	mov	r0, r9
  40794a:	f846 5c04 	str.w	r5, [r6, #-4]
  40794e:	f7ff fe8f 	bl	407670 <__malloc_unlock>
  407952:	4630      	mov	r0, r6
  407954:	e732      	b.n	4077bc <_realloc_r+0x148>
  407956:	4631      	mov	r1, r6
  407958:	f7ff fe24 	bl	4075a4 <memmove>
  40795c:	e6d5      	b.n	40770a <_realloc_r+0x96>
  40795e:	68b3      	ldr	r3, [r6, #8]
  407960:	6083      	str	r3, [r0, #8]
  407962:	68f3      	ldr	r3, [r6, #12]
  407964:	60c3      	str	r3, [r0, #12]
  407966:	2a24      	cmp	r2, #36	; 0x24
  407968:	d028      	beq.n	4079bc <_realloc_r+0x348>
  40796a:	f100 0310 	add.w	r3, r0, #16
  40796e:	f106 0210 	add.w	r2, r6, #16
  407972:	e6c4      	b.n	4076fe <_realloc_r+0x8a>
  407974:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407978:	f023 0303 	bic.w	r3, r3, #3
  40797c:	441c      	add	r4, r3
  40797e:	e70a      	b.n	407796 <_realloc_r+0x122>
  407980:	4631      	mov	r1, r6
  407982:	4638      	mov	r0, r7
  407984:	4674      	mov	r4, lr
  407986:	46d0      	mov	r8, sl
  407988:	f7ff fe0c 	bl	4075a4 <memmove>
  40798c:	463e      	mov	r6, r7
  40798e:	e702      	b.n	407796 <_realloc_r+0x122>
  407990:	463a      	mov	r2, r7
  407992:	e6f7      	b.n	407784 <_realloc_r+0x110>
  407994:	4631      	mov	r1, r6
  407996:	4638      	mov	r0, r7
  407998:	461c      	mov	r4, r3
  40799a:	46d0      	mov	r8, sl
  40799c:	f7ff fe02 	bl	4075a4 <memmove>
  4079a0:	463e      	mov	r6, r7
  4079a2:	e6f8      	b.n	407796 <_realloc_r+0x122>
  4079a4:	68b3      	ldr	r3, [r6, #8]
  4079a6:	f8ca 3010 	str.w	r3, [sl, #16]
  4079aa:	68f3      	ldr	r3, [r6, #12]
  4079ac:	f8ca 3014 	str.w	r3, [sl, #20]
  4079b0:	2a24      	cmp	r2, #36	; 0x24
  4079b2:	d01b      	beq.n	4079ec <_realloc_r+0x378>
  4079b4:	3610      	adds	r6, #16
  4079b6:	f10a 0318 	add.w	r3, sl, #24
  4079ba:	e7ae      	b.n	40791a <_realloc_r+0x2a6>
  4079bc:	6933      	ldr	r3, [r6, #16]
  4079be:	6103      	str	r3, [r0, #16]
  4079c0:	6973      	ldr	r3, [r6, #20]
  4079c2:	6143      	str	r3, [r0, #20]
  4079c4:	f106 0218 	add.w	r2, r6, #24
  4079c8:	f100 0318 	add.w	r3, r0, #24
  4079cc:	e697      	b.n	4076fe <_realloc_r+0x8a>
  4079ce:	bf00      	nop
  4079d0:	20400498 	.word	0x20400498
  4079d4:	68b1      	ldr	r1, [r6, #8]
  4079d6:	f8ca 1010 	str.w	r1, [sl, #16]
  4079da:	68f1      	ldr	r1, [r6, #12]
  4079dc:	f8ca 1014 	str.w	r1, [sl, #20]
  4079e0:	2a24      	cmp	r2, #36	; 0x24
  4079e2:	d00f      	beq.n	407a04 <_realloc_r+0x390>
  4079e4:	3610      	adds	r6, #16
  4079e6:	f10a 0218 	add.w	r2, sl, #24
  4079ea:	e6cb      	b.n	407784 <_realloc_r+0x110>
  4079ec:	6933      	ldr	r3, [r6, #16]
  4079ee:	f8ca 3018 	str.w	r3, [sl, #24]
  4079f2:	6973      	ldr	r3, [r6, #20]
  4079f4:	f8ca 301c 	str.w	r3, [sl, #28]
  4079f8:	3618      	adds	r6, #24
  4079fa:	f10a 0320 	add.w	r3, sl, #32
  4079fe:	e78c      	b.n	40791a <_realloc_r+0x2a6>
  407a00:	463a      	mov	r2, r7
  407a02:	e764      	b.n	4078ce <_realloc_r+0x25a>
  407a04:	6932      	ldr	r2, [r6, #16]
  407a06:	f8ca 2018 	str.w	r2, [sl, #24]
  407a0a:	6972      	ldr	r2, [r6, #20]
  407a0c:	f8ca 201c 	str.w	r2, [sl, #28]
  407a10:	3618      	adds	r6, #24
  407a12:	f10a 0220 	add.w	r2, sl, #32
  407a16:	e6b5      	b.n	407784 <_realloc_r+0x110>
  407a18:	4631      	mov	r1, r6
  407a1a:	4638      	mov	r0, r7
  407a1c:	9301      	str	r3, [sp, #4]
  407a1e:	f7ff fdc1 	bl	4075a4 <memmove>
  407a22:	9b01      	ldr	r3, [sp, #4]
  407a24:	e759      	b.n	4078da <_realloc_r+0x266>
  407a26:	68b1      	ldr	r1, [r6, #8]
  407a28:	f8ca 1010 	str.w	r1, [sl, #16]
  407a2c:	68f1      	ldr	r1, [r6, #12]
  407a2e:	f8ca 1014 	str.w	r1, [sl, #20]
  407a32:	2a24      	cmp	r2, #36	; 0x24
  407a34:	d003      	beq.n	407a3e <_realloc_r+0x3ca>
  407a36:	3610      	adds	r6, #16
  407a38:	f10a 0218 	add.w	r2, sl, #24
  407a3c:	e747      	b.n	4078ce <_realloc_r+0x25a>
  407a3e:	6932      	ldr	r2, [r6, #16]
  407a40:	f8ca 2018 	str.w	r2, [sl, #24]
  407a44:	6972      	ldr	r2, [r6, #20]
  407a46:	f8ca 201c 	str.w	r2, [sl, #28]
  407a4a:	3618      	adds	r6, #24
  407a4c:	f10a 0220 	add.w	r2, sl, #32
  407a50:	e73d      	b.n	4078ce <_realloc_r+0x25a>
  407a52:	bf00      	nop

00407a54 <_sbrk_r>:
  407a54:	b538      	push	{r3, r4, r5, lr}
  407a56:	4c07      	ldr	r4, [pc, #28]	; (407a74 <_sbrk_r+0x20>)
  407a58:	2300      	movs	r3, #0
  407a5a:	4605      	mov	r5, r0
  407a5c:	4608      	mov	r0, r1
  407a5e:	6023      	str	r3, [r4, #0]
  407a60:	f7fd f86a 	bl	404b38 <_sbrk>
  407a64:	1c43      	adds	r3, r0, #1
  407a66:	d000      	beq.n	407a6a <_sbrk_r+0x16>
  407a68:	bd38      	pop	{r3, r4, r5, pc}
  407a6a:	6823      	ldr	r3, [r4, #0]
  407a6c:	2b00      	cmp	r3, #0
  407a6e:	d0fb      	beq.n	407a68 <_sbrk_r+0x14>
  407a70:	602b      	str	r3, [r5, #0]
  407a72:	bd38      	pop	{r3, r4, r5, pc}
  407a74:	20401604 	.word	0x20401604

00407a78 <__sread>:
  407a78:	b510      	push	{r4, lr}
  407a7a:	460c      	mov	r4, r1
  407a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407a80:	f000 f9c4 	bl	407e0c <_read_r>
  407a84:	2800      	cmp	r0, #0
  407a86:	db03      	blt.n	407a90 <__sread+0x18>
  407a88:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407a8a:	4403      	add	r3, r0
  407a8c:	6523      	str	r3, [r4, #80]	; 0x50
  407a8e:	bd10      	pop	{r4, pc}
  407a90:	89a3      	ldrh	r3, [r4, #12]
  407a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407a96:	81a3      	strh	r3, [r4, #12]
  407a98:	bd10      	pop	{r4, pc}
  407a9a:	bf00      	nop

00407a9c <__swrite>:
  407a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407aa0:	4616      	mov	r6, r2
  407aa2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407aa6:	461f      	mov	r7, r3
  407aa8:	05d3      	lsls	r3, r2, #23
  407aaa:	460c      	mov	r4, r1
  407aac:	4605      	mov	r5, r0
  407aae:	d507      	bpl.n	407ac0 <__swrite+0x24>
  407ab0:	2200      	movs	r2, #0
  407ab2:	2302      	movs	r3, #2
  407ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407ab8:	f000 f992 	bl	407de0 <_lseek_r>
  407abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407ac4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407ac8:	81a2      	strh	r2, [r4, #12]
  407aca:	463b      	mov	r3, r7
  407acc:	4632      	mov	r2, r6
  407ace:	4628      	mov	r0, r5
  407ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407ad4:	f000 b8a2 	b.w	407c1c <_write_r>

00407ad8 <__sseek>:
  407ad8:	b510      	push	{r4, lr}
  407ada:	460c      	mov	r4, r1
  407adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407ae0:	f000 f97e 	bl	407de0 <_lseek_r>
  407ae4:	89a3      	ldrh	r3, [r4, #12]
  407ae6:	1c42      	adds	r2, r0, #1
  407ae8:	bf0e      	itee	eq
  407aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407af2:	6520      	strne	r0, [r4, #80]	; 0x50
  407af4:	81a3      	strh	r3, [r4, #12]
  407af6:	bd10      	pop	{r4, pc}

00407af8 <__sclose>:
  407af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407afc:	f000 b8f6 	b.w	407cec <_close_r>

00407b00 <__swbuf_r>:
  407b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b02:	460e      	mov	r6, r1
  407b04:	4614      	mov	r4, r2
  407b06:	4607      	mov	r7, r0
  407b08:	b110      	cbz	r0, 407b10 <__swbuf_r+0x10>
  407b0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407b0c:	2b00      	cmp	r3, #0
  407b0e:	d04a      	beq.n	407ba6 <__swbuf_r+0xa6>
  407b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407b14:	69a3      	ldr	r3, [r4, #24]
  407b16:	60a3      	str	r3, [r4, #8]
  407b18:	b291      	uxth	r1, r2
  407b1a:	0708      	lsls	r0, r1, #28
  407b1c:	d538      	bpl.n	407b90 <__swbuf_r+0x90>
  407b1e:	6923      	ldr	r3, [r4, #16]
  407b20:	2b00      	cmp	r3, #0
  407b22:	d035      	beq.n	407b90 <__swbuf_r+0x90>
  407b24:	0489      	lsls	r1, r1, #18
  407b26:	b2f5      	uxtb	r5, r6
  407b28:	d515      	bpl.n	407b56 <__swbuf_r+0x56>
  407b2a:	6822      	ldr	r2, [r4, #0]
  407b2c:	6961      	ldr	r1, [r4, #20]
  407b2e:	1ad3      	subs	r3, r2, r3
  407b30:	428b      	cmp	r3, r1
  407b32:	da1c      	bge.n	407b6e <__swbuf_r+0x6e>
  407b34:	3301      	adds	r3, #1
  407b36:	68a1      	ldr	r1, [r4, #8]
  407b38:	1c50      	adds	r0, r2, #1
  407b3a:	3901      	subs	r1, #1
  407b3c:	60a1      	str	r1, [r4, #8]
  407b3e:	6020      	str	r0, [r4, #0]
  407b40:	7016      	strb	r6, [r2, #0]
  407b42:	6962      	ldr	r2, [r4, #20]
  407b44:	429a      	cmp	r2, r3
  407b46:	d01a      	beq.n	407b7e <__swbuf_r+0x7e>
  407b48:	89a3      	ldrh	r3, [r4, #12]
  407b4a:	07db      	lsls	r3, r3, #31
  407b4c:	d501      	bpl.n	407b52 <__swbuf_r+0x52>
  407b4e:	2d0a      	cmp	r5, #10
  407b50:	d015      	beq.n	407b7e <__swbuf_r+0x7e>
  407b52:	4628      	mov	r0, r5
  407b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407b56:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407b5c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  407b60:	81a2      	strh	r2, [r4, #12]
  407b62:	6822      	ldr	r2, [r4, #0]
  407b64:	6661      	str	r1, [r4, #100]	; 0x64
  407b66:	6961      	ldr	r1, [r4, #20]
  407b68:	1ad3      	subs	r3, r2, r3
  407b6a:	428b      	cmp	r3, r1
  407b6c:	dbe2      	blt.n	407b34 <__swbuf_r+0x34>
  407b6e:	4621      	mov	r1, r4
  407b70:	4638      	mov	r0, r7
  407b72:	f7fe fcfb 	bl	40656c <_fflush_r>
  407b76:	b940      	cbnz	r0, 407b8a <__swbuf_r+0x8a>
  407b78:	6822      	ldr	r2, [r4, #0]
  407b7a:	2301      	movs	r3, #1
  407b7c:	e7db      	b.n	407b36 <__swbuf_r+0x36>
  407b7e:	4621      	mov	r1, r4
  407b80:	4638      	mov	r0, r7
  407b82:	f7fe fcf3 	bl	40656c <_fflush_r>
  407b86:	2800      	cmp	r0, #0
  407b88:	d0e3      	beq.n	407b52 <__swbuf_r+0x52>
  407b8a:	f04f 30ff 	mov.w	r0, #4294967295
  407b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407b90:	4621      	mov	r1, r4
  407b92:	4638      	mov	r0, r7
  407b94:	f7fe fbd2 	bl	40633c <__swsetup_r>
  407b98:	2800      	cmp	r0, #0
  407b9a:	d1f6      	bne.n	407b8a <__swbuf_r+0x8a>
  407b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407ba0:	6923      	ldr	r3, [r4, #16]
  407ba2:	b291      	uxth	r1, r2
  407ba4:	e7be      	b.n	407b24 <__swbuf_r+0x24>
  407ba6:	f7fe fd75 	bl	406694 <__sinit>
  407baa:	e7b1      	b.n	407b10 <__swbuf_r+0x10>

00407bac <_wcrtomb_r>:
  407bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407bb0:	4605      	mov	r5, r0
  407bb2:	b086      	sub	sp, #24
  407bb4:	461e      	mov	r6, r3
  407bb6:	460c      	mov	r4, r1
  407bb8:	b1a1      	cbz	r1, 407be4 <_wcrtomb_r+0x38>
  407bba:	4b10      	ldr	r3, [pc, #64]	; (407bfc <_wcrtomb_r+0x50>)
  407bbc:	4617      	mov	r7, r2
  407bbe:	f8d3 8000 	ldr.w	r8, [r3]
  407bc2:	f7ff f8c5 	bl	406d50 <__locale_charset>
  407bc6:	9600      	str	r6, [sp, #0]
  407bc8:	4603      	mov	r3, r0
  407bca:	463a      	mov	r2, r7
  407bcc:	4621      	mov	r1, r4
  407bce:	4628      	mov	r0, r5
  407bd0:	47c0      	blx	r8
  407bd2:	1c43      	adds	r3, r0, #1
  407bd4:	d103      	bne.n	407bde <_wcrtomb_r+0x32>
  407bd6:	2200      	movs	r2, #0
  407bd8:	238a      	movs	r3, #138	; 0x8a
  407bda:	6032      	str	r2, [r6, #0]
  407bdc:	602b      	str	r3, [r5, #0]
  407bde:	b006      	add	sp, #24
  407be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407be4:	4b05      	ldr	r3, [pc, #20]	; (407bfc <_wcrtomb_r+0x50>)
  407be6:	681f      	ldr	r7, [r3, #0]
  407be8:	f7ff f8b2 	bl	406d50 <__locale_charset>
  407bec:	9600      	str	r6, [sp, #0]
  407bee:	4603      	mov	r3, r0
  407bf0:	4622      	mov	r2, r4
  407bf2:	a903      	add	r1, sp, #12
  407bf4:	4628      	mov	r0, r5
  407bf6:	47b8      	blx	r7
  407bf8:	e7eb      	b.n	407bd2 <_wcrtomb_r+0x26>
  407bfa:	bf00      	nop
  407bfc:	204008a8 	.word	0x204008a8

00407c00 <__ascii_wctomb>:
  407c00:	b121      	cbz	r1, 407c0c <__ascii_wctomb+0xc>
  407c02:	2aff      	cmp	r2, #255	; 0xff
  407c04:	d804      	bhi.n	407c10 <__ascii_wctomb+0x10>
  407c06:	700a      	strb	r2, [r1, #0]
  407c08:	2001      	movs	r0, #1
  407c0a:	4770      	bx	lr
  407c0c:	4608      	mov	r0, r1
  407c0e:	4770      	bx	lr
  407c10:	238a      	movs	r3, #138	; 0x8a
  407c12:	6003      	str	r3, [r0, #0]
  407c14:	f04f 30ff 	mov.w	r0, #4294967295
  407c18:	4770      	bx	lr
  407c1a:	bf00      	nop

00407c1c <_write_r>:
  407c1c:	b570      	push	{r4, r5, r6, lr}
  407c1e:	460d      	mov	r5, r1
  407c20:	4c08      	ldr	r4, [pc, #32]	; (407c44 <_write_r+0x28>)
  407c22:	4611      	mov	r1, r2
  407c24:	4606      	mov	r6, r0
  407c26:	461a      	mov	r2, r3
  407c28:	4628      	mov	r0, r5
  407c2a:	2300      	movs	r3, #0
  407c2c:	6023      	str	r3, [r4, #0]
  407c2e:	f7fc f82d 	bl	403c8c <_write>
  407c32:	1c43      	adds	r3, r0, #1
  407c34:	d000      	beq.n	407c38 <_write_r+0x1c>
  407c36:	bd70      	pop	{r4, r5, r6, pc}
  407c38:	6823      	ldr	r3, [r4, #0]
  407c3a:	2b00      	cmp	r3, #0
  407c3c:	d0fb      	beq.n	407c36 <_write_r+0x1a>
  407c3e:	6033      	str	r3, [r6, #0]
  407c40:	bd70      	pop	{r4, r5, r6, pc}
  407c42:	bf00      	nop
  407c44:	20401604 	.word	0x20401604

00407c48 <__register_exitproc>:
  407c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407c4c:	4c25      	ldr	r4, [pc, #148]	; (407ce4 <__register_exitproc+0x9c>)
  407c4e:	6825      	ldr	r5, [r4, #0]
  407c50:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  407c54:	4606      	mov	r6, r0
  407c56:	4688      	mov	r8, r1
  407c58:	4692      	mov	sl, r2
  407c5a:	4699      	mov	r9, r3
  407c5c:	b3c4      	cbz	r4, 407cd0 <__register_exitproc+0x88>
  407c5e:	6860      	ldr	r0, [r4, #4]
  407c60:	281f      	cmp	r0, #31
  407c62:	dc17      	bgt.n	407c94 <__register_exitproc+0x4c>
  407c64:	1c43      	adds	r3, r0, #1
  407c66:	b176      	cbz	r6, 407c86 <__register_exitproc+0x3e>
  407c68:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  407c6c:	2201      	movs	r2, #1
  407c6e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  407c72:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  407c76:	4082      	lsls	r2, r0
  407c78:	4311      	orrs	r1, r2
  407c7a:	2e02      	cmp	r6, #2
  407c7c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407c80:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  407c84:	d01e      	beq.n	407cc4 <__register_exitproc+0x7c>
  407c86:	3002      	adds	r0, #2
  407c88:	6063      	str	r3, [r4, #4]
  407c8a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  407c8e:	2000      	movs	r0, #0
  407c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c94:	4b14      	ldr	r3, [pc, #80]	; (407ce8 <__register_exitproc+0xa0>)
  407c96:	b303      	cbz	r3, 407cda <__register_exitproc+0x92>
  407c98:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407c9c:	f7ff f8d6 	bl	406e4c <malloc>
  407ca0:	4604      	mov	r4, r0
  407ca2:	b1d0      	cbz	r0, 407cda <__register_exitproc+0x92>
  407ca4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  407ca8:	2700      	movs	r7, #0
  407caa:	e880 0088 	stmia.w	r0, {r3, r7}
  407cae:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407cb2:	4638      	mov	r0, r7
  407cb4:	2301      	movs	r3, #1
  407cb6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  407cba:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  407cbe:	2e00      	cmp	r6, #0
  407cc0:	d0e1      	beq.n	407c86 <__register_exitproc+0x3e>
  407cc2:	e7d1      	b.n	407c68 <__register_exitproc+0x20>
  407cc4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  407cc8:	430a      	orrs	r2, r1
  407cca:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  407cce:	e7da      	b.n	407c86 <__register_exitproc+0x3e>
  407cd0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407cd4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407cd8:	e7c1      	b.n	407c5e <__register_exitproc+0x16>
  407cda:	f04f 30ff 	mov.w	r0, #4294967295
  407cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ce2:	bf00      	nop
  407ce4:	004093c0 	.word	0x004093c0
  407ce8:	00406e4d 	.word	0x00406e4d

00407cec <_close_r>:
  407cec:	b538      	push	{r3, r4, r5, lr}
  407cee:	4c07      	ldr	r4, [pc, #28]	; (407d0c <_close_r+0x20>)
  407cf0:	2300      	movs	r3, #0
  407cf2:	4605      	mov	r5, r0
  407cf4:	4608      	mov	r0, r1
  407cf6:	6023      	str	r3, [r4, #0]
  407cf8:	f7fc ff38 	bl	404b6c <_close>
  407cfc:	1c43      	adds	r3, r0, #1
  407cfe:	d000      	beq.n	407d02 <_close_r+0x16>
  407d00:	bd38      	pop	{r3, r4, r5, pc}
  407d02:	6823      	ldr	r3, [r4, #0]
  407d04:	2b00      	cmp	r3, #0
  407d06:	d0fb      	beq.n	407d00 <_close_r+0x14>
  407d08:	602b      	str	r3, [r5, #0]
  407d0a:	bd38      	pop	{r3, r4, r5, pc}
  407d0c:	20401604 	.word	0x20401604

00407d10 <_fclose_r>:
  407d10:	2900      	cmp	r1, #0
  407d12:	d03d      	beq.n	407d90 <_fclose_r+0x80>
  407d14:	b570      	push	{r4, r5, r6, lr}
  407d16:	4605      	mov	r5, r0
  407d18:	460c      	mov	r4, r1
  407d1a:	b108      	cbz	r0, 407d20 <_fclose_r+0x10>
  407d1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407d1e:	b37b      	cbz	r3, 407d80 <_fclose_r+0x70>
  407d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407d24:	b90b      	cbnz	r3, 407d2a <_fclose_r+0x1a>
  407d26:	2000      	movs	r0, #0
  407d28:	bd70      	pop	{r4, r5, r6, pc}
  407d2a:	4621      	mov	r1, r4
  407d2c:	4628      	mov	r0, r5
  407d2e:	f7fe fb79 	bl	406424 <__sflush_r>
  407d32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407d34:	4606      	mov	r6, r0
  407d36:	b133      	cbz	r3, 407d46 <_fclose_r+0x36>
  407d38:	69e1      	ldr	r1, [r4, #28]
  407d3a:	4628      	mov	r0, r5
  407d3c:	4798      	blx	r3
  407d3e:	2800      	cmp	r0, #0
  407d40:	bfb8      	it	lt
  407d42:	f04f 36ff 	movlt.w	r6, #4294967295
  407d46:	89a3      	ldrh	r3, [r4, #12]
  407d48:	061b      	lsls	r3, r3, #24
  407d4a:	d41c      	bmi.n	407d86 <_fclose_r+0x76>
  407d4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407d4e:	b141      	cbz	r1, 407d62 <_fclose_r+0x52>
  407d50:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407d54:	4299      	cmp	r1, r3
  407d56:	d002      	beq.n	407d5e <_fclose_r+0x4e>
  407d58:	4628      	mov	r0, r5
  407d5a:	f7fe fd65 	bl	406828 <_free_r>
  407d5e:	2300      	movs	r3, #0
  407d60:	6323      	str	r3, [r4, #48]	; 0x30
  407d62:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407d64:	b121      	cbz	r1, 407d70 <_fclose_r+0x60>
  407d66:	4628      	mov	r0, r5
  407d68:	f7fe fd5e 	bl	406828 <_free_r>
  407d6c:	2300      	movs	r3, #0
  407d6e:	6463      	str	r3, [r4, #68]	; 0x44
  407d70:	f7fe fc96 	bl	4066a0 <__sfp_lock_acquire>
  407d74:	2300      	movs	r3, #0
  407d76:	81a3      	strh	r3, [r4, #12]
  407d78:	f7fe fc94 	bl	4066a4 <__sfp_lock_release>
  407d7c:	4630      	mov	r0, r6
  407d7e:	bd70      	pop	{r4, r5, r6, pc}
  407d80:	f7fe fc88 	bl	406694 <__sinit>
  407d84:	e7cc      	b.n	407d20 <_fclose_r+0x10>
  407d86:	6921      	ldr	r1, [r4, #16]
  407d88:	4628      	mov	r0, r5
  407d8a:	f7fe fd4d 	bl	406828 <_free_r>
  407d8e:	e7dd      	b.n	407d4c <_fclose_r+0x3c>
  407d90:	2000      	movs	r0, #0
  407d92:	4770      	bx	lr

00407d94 <_fstat_r>:
  407d94:	b538      	push	{r3, r4, r5, lr}
  407d96:	460b      	mov	r3, r1
  407d98:	4c07      	ldr	r4, [pc, #28]	; (407db8 <_fstat_r+0x24>)
  407d9a:	4605      	mov	r5, r0
  407d9c:	4611      	mov	r1, r2
  407d9e:	4618      	mov	r0, r3
  407da0:	2300      	movs	r3, #0
  407da2:	6023      	str	r3, [r4, #0]
  407da4:	f7fc fee6 	bl	404b74 <_fstat>
  407da8:	1c43      	adds	r3, r0, #1
  407daa:	d000      	beq.n	407dae <_fstat_r+0x1a>
  407dac:	bd38      	pop	{r3, r4, r5, pc}
  407dae:	6823      	ldr	r3, [r4, #0]
  407db0:	2b00      	cmp	r3, #0
  407db2:	d0fb      	beq.n	407dac <_fstat_r+0x18>
  407db4:	602b      	str	r3, [r5, #0]
  407db6:	bd38      	pop	{r3, r4, r5, pc}
  407db8:	20401604 	.word	0x20401604

00407dbc <_isatty_r>:
  407dbc:	b538      	push	{r3, r4, r5, lr}
  407dbe:	4c07      	ldr	r4, [pc, #28]	; (407ddc <_isatty_r+0x20>)
  407dc0:	2300      	movs	r3, #0
  407dc2:	4605      	mov	r5, r0
  407dc4:	4608      	mov	r0, r1
  407dc6:	6023      	str	r3, [r4, #0]
  407dc8:	f7fc feda 	bl	404b80 <_isatty>
  407dcc:	1c43      	adds	r3, r0, #1
  407dce:	d000      	beq.n	407dd2 <_isatty_r+0x16>
  407dd0:	bd38      	pop	{r3, r4, r5, pc}
  407dd2:	6823      	ldr	r3, [r4, #0]
  407dd4:	2b00      	cmp	r3, #0
  407dd6:	d0fb      	beq.n	407dd0 <_isatty_r+0x14>
  407dd8:	602b      	str	r3, [r5, #0]
  407dda:	bd38      	pop	{r3, r4, r5, pc}
  407ddc:	20401604 	.word	0x20401604

00407de0 <_lseek_r>:
  407de0:	b570      	push	{r4, r5, r6, lr}
  407de2:	460d      	mov	r5, r1
  407de4:	4c08      	ldr	r4, [pc, #32]	; (407e08 <_lseek_r+0x28>)
  407de6:	4611      	mov	r1, r2
  407de8:	4606      	mov	r6, r0
  407dea:	461a      	mov	r2, r3
  407dec:	4628      	mov	r0, r5
  407dee:	2300      	movs	r3, #0
  407df0:	6023      	str	r3, [r4, #0]
  407df2:	f7fc fec7 	bl	404b84 <_lseek>
  407df6:	1c43      	adds	r3, r0, #1
  407df8:	d000      	beq.n	407dfc <_lseek_r+0x1c>
  407dfa:	bd70      	pop	{r4, r5, r6, pc}
  407dfc:	6823      	ldr	r3, [r4, #0]
  407dfe:	2b00      	cmp	r3, #0
  407e00:	d0fb      	beq.n	407dfa <_lseek_r+0x1a>
  407e02:	6033      	str	r3, [r6, #0]
  407e04:	bd70      	pop	{r4, r5, r6, pc}
  407e06:	bf00      	nop
  407e08:	20401604 	.word	0x20401604

00407e0c <_read_r>:
  407e0c:	b570      	push	{r4, r5, r6, lr}
  407e0e:	460d      	mov	r5, r1
  407e10:	4c08      	ldr	r4, [pc, #32]	; (407e34 <_read_r+0x28>)
  407e12:	4611      	mov	r1, r2
  407e14:	4606      	mov	r6, r0
  407e16:	461a      	mov	r2, r3
  407e18:	4628      	mov	r0, r5
  407e1a:	2300      	movs	r3, #0
  407e1c:	6023      	str	r3, [r4, #0]
  407e1e:	f7fb ff17 	bl	403c50 <_read>
  407e22:	1c43      	adds	r3, r0, #1
  407e24:	d000      	beq.n	407e28 <_read_r+0x1c>
  407e26:	bd70      	pop	{r4, r5, r6, pc}
  407e28:	6823      	ldr	r3, [r4, #0]
  407e2a:	2b00      	cmp	r3, #0
  407e2c:	d0fb      	beq.n	407e26 <_read_r+0x1a>
  407e2e:	6033      	str	r3, [r6, #0]
  407e30:	bd70      	pop	{r4, r5, r6, pc}
  407e32:	bf00      	nop
  407e34:	20401604 	.word	0x20401604

00407e38 <__aeabi_uldivmod>:
  407e38:	b953      	cbnz	r3, 407e50 <__aeabi_uldivmod+0x18>
  407e3a:	b94a      	cbnz	r2, 407e50 <__aeabi_uldivmod+0x18>
  407e3c:	2900      	cmp	r1, #0
  407e3e:	bf08      	it	eq
  407e40:	2800      	cmpeq	r0, #0
  407e42:	bf1c      	itt	ne
  407e44:	f04f 31ff 	movne.w	r1, #4294967295
  407e48:	f04f 30ff 	movne.w	r0, #4294967295
  407e4c:	f000 b97e 	b.w	40814c <__aeabi_idiv0>
  407e50:	f1ad 0c08 	sub.w	ip, sp, #8
  407e54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407e58:	f000 f806 	bl	407e68 <__udivmoddi4>
  407e5c:	f8dd e004 	ldr.w	lr, [sp, #4]
  407e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407e64:	b004      	add	sp, #16
  407e66:	4770      	bx	lr

00407e68 <__udivmoddi4>:
  407e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407e6c:	468c      	mov	ip, r1
  407e6e:	460e      	mov	r6, r1
  407e70:	4604      	mov	r4, r0
  407e72:	9d08      	ldr	r5, [sp, #32]
  407e74:	2b00      	cmp	r3, #0
  407e76:	d150      	bne.n	407f1a <__udivmoddi4+0xb2>
  407e78:	428a      	cmp	r2, r1
  407e7a:	4617      	mov	r7, r2
  407e7c:	d96c      	bls.n	407f58 <__udivmoddi4+0xf0>
  407e7e:	fab2 fe82 	clz	lr, r2
  407e82:	f1be 0f00 	cmp.w	lr, #0
  407e86:	d00b      	beq.n	407ea0 <__udivmoddi4+0x38>
  407e88:	f1ce 0420 	rsb	r4, lr, #32
  407e8c:	fa20 f404 	lsr.w	r4, r0, r4
  407e90:	fa01 f60e 	lsl.w	r6, r1, lr
  407e94:	ea44 0c06 	orr.w	ip, r4, r6
  407e98:	fa02 f70e 	lsl.w	r7, r2, lr
  407e9c:	fa00 f40e 	lsl.w	r4, r0, lr
  407ea0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  407ea4:	0c22      	lsrs	r2, r4, #16
  407ea6:	fbbc f0f9 	udiv	r0, ip, r9
  407eaa:	fa1f f887 	uxth.w	r8, r7
  407eae:	fb09 c610 	mls	r6, r9, r0, ip
  407eb2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  407eb6:	fb00 f308 	mul.w	r3, r0, r8
  407eba:	42b3      	cmp	r3, r6
  407ebc:	d909      	bls.n	407ed2 <__udivmoddi4+0x6a>
  407ebe:	19f6      	adds	r6, r6, r7
  407ec0:	f100 32ff 	add.w	r2, r0, #4294967295
  407ec4:	f080 8122 	bcs.w	40810c <__udivmoddi4+0x2a4>
  407ec8:	42b3      	cmp	r3, r6
  407eca:	f240 811f 	bls.w	40810c <__udivmoddi4+0x2a4>
  407ece:	3802      	subs	r0, #2
  407ed0:	443e      	add	r6, r7
  407ed2:	1af6      	subs	r6, r6, r3
  407ed4:	b2a2      	uxth	r2, r4
  407ed6:	fbb6 f3f9 	udiv	r3, r6, r9
  407eda:	fb09 6613 	mls	r6, r9, r3, r6
  407ede:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  407ee2:	fb03 f808 	mul.w	r8, r3, r8
  407ee6:	45a0      	cmp	r8, r4
  407ee8:	d909      	bls.n	407efe <__udivmoddi4+0x96>
  407eea:	19e4      	adds	r4, r4, r7
  407eec:	f103 32ff 	add.w	r2, r3, #4294967295
  407ef0:	f080 810a 	bcs.w	408108 <__udivmoddi4+0x2a0>
  407ef4:	45a0      	cmp	r8, r4
  407ef6:	f240 8107 	bls.w	408108 <__udivmoddi4+0x2a0>
  407efa:	3b02      	subs	r3, #2
  407efc:	443c      	add	r4, r7
  407efe:	ebc8 0404 	rsb	r4, r8, r4
  407f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407f06:	2100      	movs	r1, #0
  407f08:	2d00      	cmp	r5, #0
  407f0a:	d062      	beq.n	407fd2 <__udivmoddi4+0x16a>
  407f0c:	fa24 f40e 	lsr.w	r4, r4, lr
  407f10:	2300      	movs	r3, #0
  407f12:	602c      	str	r4, [r5, #0]
  407f14:	606b      	str	r3, [r5, #4]
  407f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f1a:	428b      	cmp	r3, r1
  407f1c:	d907      	bls.n	407f2e <__udivmoddi4+0xc6>
  407f1e:	2d00      	cmp	r5, #0
  407f20:	d055      	beq.n	407fce <__udivmoddi4+0x166>
  407f22:	2100      	movs	r1, #0
  407f24:	e885 0041 	stmia.w	r5, {r0, r6}
  407f28:	4608      	mov	r0, r1
  407f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f2e:	fab3 f183 	clz	r1, r3
  407f32:	2900      	cmp	r1, #0
  407f34:	f040 8090 	bne.w	408058 <__udivmoddi4+0x1f0>
  407f38:	42b3      	cmp	r3, r6
  407f3a:	d302      	bcc.n	407f42 <__udivmoddi4+0xda>
  407f3c:	4282      	cmp	r2, r0
  407f3e:	f200 80f8 	bhi.w	408132 <__udivmoddi4+0x2ca>
  407f42:	1a84      	subs	r4, r0, r2
  407f44:	eb66 0603 	sbc.w	r6, r6, r3
  407f48:	2001      	movs	r0, #1
  407f4a:	46b4      	mov	ip, r6
  407f4c:	2d00      	cmp	r5, #0
  407f4e:	d040      	beq.n	407fd2 <__udivmoddi4+0x16a>
  407f50:	e885 1010 	stmia.w	r5, {r4, ip}
  407f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f58:	b912      	cbnz	r2, 407f60 <__udivmoddi4+0xf8>
  407f5a:	2701      	movs	r7, #1
  407f5c:	fbb7 f7f2 	udiv	r7, r7, r2
  407f60:	fab7 fe87 	clz	lr, r7
  407f64:	f1be 0f00 	cmp.w	lr, #0
  407f68:	d135      	bne.n	407fd6 <__udivmoddi4+0x16e>
  407f6a:	1bf3      	subs	r3, r6, r7
  407f6c:	ea4f 4817 	mov.w	r8, r7, lsr #16
  407f70:	fa1f fc87 	uxth.w	ip, r7
  407f74:	2101      	movs	r1, #1
  407f76:	fbb3 f0f8 	udiv	r0, r3, r8
  407f7a:	0c22      	lsrs	r2, r4, #16
  407f7c:	fb08 3610 	mls	r6, r8, r0, r3
  407f80:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  407f84:	fb0c f300 	mul.w	r3, ip, r0
  407f88:	42b3      	cmp	r3, r6
  407f8a:	d907      	bls.n	407f9c <__udivmoddi4+0x134>
  407f8c:	19f6      	adds	r6, r6, r7
  407f8e:	f100 32ff 	add.w	r2, r0, #4294967295
  407f92:	d202      	bcs.n	407f9a <__udivmoddi4+0x132>
  407f94:	42b3      	cmp	r3, r6
  407f96:	f200 80ce 	bhi.w	408136 <__udivmoddi4+0x2ce>
  407f9a:	4610      	mov	r0, r2
  407f9c:	1af6      	subs	r6, r6, r3
  407f9e:	b2a2      	uxth	r2, r4
  407fa0:	fbb6 f3f8 	udiv	r3, r6, r8
  407fa4:	fb08 6613 	mls	r6, r8, r3, r6
  407fa8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  407fac:	fb0c fc03 	mul.w	ip, ip, r3
  407fb0:	45a4      	cmp	ip, r4
  407fb2:	d907      	bls.n	407fc4 <__udivmoddi4+0x15c>
  407fb4:	19e4      	adds	r4, r4, r7
  407fb6:	f103 32ff 	add.w	r2, r3, #4294967295
  407fba:	d202      	bcs.n	407fc2 <__udivmoddi4+0x15a>
  407fbc:	45a4      	cmp	ip, r4
  407fbe:	f200 80b5 	bhi.w	40812c <__udivmoddi4+0x2c4>
  407fc2:	4613      	mov	r3, r2
  407fc4:	ebcc 0404 	rsb	r4, ip, r4
  407fc8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407fcc:	e79c      	b.n	407f08 <__udivmoddi4+0xa0>
  407fce:	4629      	mov	r1, r5
  407fd0:	4628      	mov	r0, r5
  407fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407fd6:	f1ce 0120 	rsb	r1, lr, #32
  407fda:	fa06 f30e 	lsl.w	r3, r6, lr
  407fde:	fa07 f70e 	lsl.w	r7, r7, lr
  407fe2:	fa20 f901 	lsr.w	r9, r0, r1
  407fe6:	ea4f 4817 	mov.w	r8, r7, lsr #16
  407fea:	40ce      	lsrs	r6, r1
  407fec:	ea49 0903 	orr.w	r9, r9, r3
  407ff0:	fbb6 faf8 	udiv	sl, r6, r8
  407ff4:	ea4f 4419 	mov.w	r4, r9, lsr #16
  407ff8:	fb08 661a 	mls	r6, r8, sl, r6
  407ffc:	fa1f fc87 	uxth.w	ip, r7
  408000:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  408004:	fb0a f20c 	mul.w	r2, sl, ip
  408008:	429a      	cmp	r2, r3
  40800a:	fa00 f40e 	lsl.w	r4, r0, lr
  40800e:	d90a      	bls.n	408026 <__udivmoddi4+0x1be>
  408010:	19db      	adds	r3, r3, r7
  408012:	f10a 31ff 	add.w	r1, sl, #4294967295
  408016:	f080 8087 	bcs.w	408128 <__udivmoddi4+0x2c0>
  40801a:	429a      	cmp	r2, r3
  40801c:	f240 8084 	bls.w	408128 <__udivmoddi4+0x2c0>
  408020:	f1aa 0a02 	sub.w	sl, sl, #2
  408024:	443b      	add	r3, r7
  408026:	1a9b      	subs	r3, r3, r2
  408028:	fa1f f989 	uxth.w	r9, r9
  40802c:	fbb3 f1f8 	udiv	r1, r3, r8
  408030:	fb08 3311 	mls	r3, r8, r1, r3
  408034:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  408038:	fb01 f60c 	mul.w	r6, r1, ip
  40803c:	429e      	cmp	r6, r3
  40803e:	d907      	bls.n	408050 <__udivmoddi4+0x1e8>
  408040:	19db      	adds	r3, r3, r7
  408042:	f101 32ff 	add.w	r2, r1, #4294967295
  408046:	d26b      	bcs.n	408120 <__udivmoddi4+0x2b8>
  408048:	429e      	cmp	r6, r3
  40804a:	d969      	bls.n	408120 <__udivmoddi4+0x2b8>
  40804c:	3902      	subs	r1, #2
  40804e:	443b      	add	r3, r7
  408050:	1b9b      	subs	r3, r3, r6
  408052:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  408056:	e78e      	b.n	407f76 <__udivmoddi4+0x10e>
  408058:	f1c1 0e20 	rsb	lr, r1, #32
  40805c:	fa22 f40e 	lsr.w	r4, r2, lr
  408060:	408b      	lsls	r3, r1
  408062:	4323      	orrs	r3, r4
  408064:	fa20 f70e 	lsr.w	r7, r0, lr
  408068:	fa06 f401 	lsl.w	r4, r6, r1
  40806c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408070:	fa26 f60e 	lsr.w	r6, r6, lr
  408074:	433c      	orrs	r4, r7
  408076:	fbb6 f9fc 	udiv	r9, r6, ip
  40807a:	0c27      	lsrs	r7, r4, #16
  40807c:	fb0c 6619 	mls	r6, ip, r9, r6
  408080:	fa1f f883 	uxth.w	r8, r3
  408084:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  408088:	fb09 f708 	mul.w	r7, r9, r8
  40808c:	42b7      	cmp	r7, r6
  40808e:	fa02 f201 	lsl.w	r2, r2, r1
  408092:	fa00 fa01 	lsl.w	sl, r0, r1
  408096:	d908      	bls.n	4080aa <__udivmoddi4+0x242>
  408098:	18f6      	adds	r6, r6, r3
  40809a:	f109 30ff 	add.w	r0, r9, #4294967295
  40809e:	d241      	bcs.n	408124 <__udivmoddi4+0x2bc>
  4080a0:	42b7      	cmp	r7, r6
  4080a2:	d93f      	bls.n	408124 <__udivmoddi4+0x2bc>
  4080a4:	f1a9 0902 	sub.w	r9, r9, #2
  4080a8:	441e      	add	r6, r3
  4080aa:	1bf6      	subs	r6, r6, r7
  4080ac:	b2a0      	uxth	r0, r4
  4080ae:	fbb6 f4fc 	udiv	r4, r6, ip
  4080b2:	fb0c 6614 	mls	r6, ip, r4, r6
  4080b6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4080ba:	fb04 f808 	mul.w	r8, r4, r8
  4080be:	45b8      	cmp	r8, r7
  4080c0:	d907      	bls.n	4080d2 <__udivmoddi4+0x26a>
  4080c2:	18ff      	adds	r7, r7, r3
  4080c4:	f104 30ff 	add.w	r0, r4, #4294967295
  4080c8:	d228      	bcs.n	40811c <__udivmoddi4+0x2b4>
  4080ca:	45b8      	cmp	r8, r7
  4080cc:	d926      	bls.n	40811c <__udivmoddi4+0x2b4>
  4080ce:	3c02      	subs	r4, #2
  4080d0:	441f      	add	r7, r3
  4080d2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4080d6:	ebc8 0707 	rsb	r7, r8, r7
  4080da:	fba0 8902 	umull	r8, r9, r0, r2
  4080de:	454f      	cmp	r7, r9
  4080e0:	4644      	mov	r4, r8
  4080e2:	464e      	mov	r6, r9
  4080e4:	d314      	bcc.n	408110 <__udivmoddi4+0x2a8>
  4080e6:	d029      	beq.n	40813c <__udivmoddi4+0x2d4>
  4080e8:	b365      	cbz	r5, 408144 <__udivmoddi4+0x2dc>
  4080ea:	ebba 0304 	subs.w	r3, sl, r4
  4080ee:	eb67 0706 	sbc.w	r7, r7, r6
  4080f2:	fa07 fe0e 	lsl.w	lr, r7, lr
  4080f6:	40cb      	lsrs	r3, r1
  4080f8:	40cf      	lsrs	r7, r1
  4080fa:	ea4e 0303 	orr.w	r3, lr, r3
  4080fe:	e885 0088 	stmia.w	r5, {r3, r7}
  408102:	2100      	movs	r1, #0
  408104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408108:	4613      	mov	r3, r2
  40810a:	e6f8      	b.n	407efe <__udivmoddi4+0x96>
  40810c:	4610      	mov	r0, r2
  40810e:	e6e0      	b.n	407ed2 <__udivmoddi4+0x6a>
  408110:	ebb8 0402 	subs.w	r4, r8, r2
  408114:	eb69 0603 	sbc.w	r6, r9, r3
  408118:	3801      	subs	r0, #1
  40811a:	e7e5      	b.n	4080e8 <__udivmoddi4+0x280>
  40811c:	4604      	mov	r4, r0
  40811e:	e7d8      	b.n	4080d2 <__udivmoddi4+0x26a>
  408120:	4611      	mov	r1, r2
  408122:	e795      	b.n	408050 <__udivmoddi4+0x1e8>
  408124:	4681      	mov	r9, r0
  408126:	e7c0      	b.n	4080aa <__udivmoddi4+0x242>
  408128:	468a      	mov	sl, r1
  40812a:	e77c      	b.n	408026 <__udivmoddi4+0x1be>
  40812c:	3b02      	subs	r3, #2
  40812e:	443c      	add	r4, r7
  408130:	e748      	b.n	407fc4 <__udivmoddi4+0x15c>
  408132:	4608      	mov	r0, r1
  408134:	e70a      	b.n	407f4c <__udivmoddi4+0xe4>
  408136:	3802      	subs	r0, #2
  408138:	443e      	add	r6, r7
  40813a:	e72f      	b.n	407f9c <__udivmoddi4+0x134>
  40813c:	45c2      	cmp	sl, r8
  40813e:	d3e7      	bcc.n	408110 <__udivmoddi4+0x2a8>
  408140:	463e      	mov	r6, r7
  408142:	e7d1      	b.n	4080e8 <__udivmoddi4+0x280>
  408144:	4629      	mov	r1, r5
  408146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40814a:	bf00      	nop

0040814c <__aeabi_idiv0>:
  40814c:	4770      	bx	lr
  40814e:	bf00      	nop

00408150 <sd_trans_multipliers>:
  408150:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  408160:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  408170:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  408180:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00408190 <sd_mmc_trans_units>:
  408190:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

004081ac <mmc_trans_multipliers>:
  4081ac:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  4081bc:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  4081cc:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  4081dc:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

004081ec <__FUNCTION__.10333>:
  4081ec:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  4081fc:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  40820c:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  40821c:	204c 6f63 6d6d 6e61 2164 000a               L command!..

00408228 <__FUNCTION__.8784>:
  408228:	6968 5f66 7369 0072                         hif_isr.

00408230 <__FUNCTION__.8805>:
  408230:	6968 5f66 6572 6563 7669 0065 4828 4649     hif_receive.(HIF
  408240:	4629 6961 206c 6f74 7720 6b61 7075 7420     )Fail to wakup t
  408250:	6568 6320 6968 0a70 0000 0000 6828 6669     he chip.....(hif
  408260:	2029 4957 4946 485f 534f 5f54 4352 5f56     ) WIFI_HOST_RCV_
  408270:	5443 4c52 315f 6220 7375 6620 6961 0a6c     CTRL_1 bus fail.
  408280:	0000 0000 6828 6669 2029 6461 7264 7365     ....(hif) addres
  408290:	2073 7562 2073 6166 6c69 000a 6828 6669     s bus fail..(hif
  4082a0:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
  4082b0:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
  4082c0:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
  4082d0:	3d20 2520 3230 3e58 000a 0000 6828 6669      = %02X>....(hif
  4082e0:	2029 6e69 6176 696c 2064 7267 756f 2070     ) invalid group 
  4082f0:	4449 000a 6828 6669 2029 6f68 7473 6120     ID..(hif) host a
  408300:	7070 6420 6469 276e 2074 6573 2074 5852     pp didn't set RX
  408310:	4420 6e6f 0a65 0000 6828 6669 2029 7257      Done...(hif) Wr
  408320:	6e6f 2067 6953 657a 000a 0000 6828 6669     ong Size....(hif
  408330:	2029 6146 736c 2065 6e69 6574 7272 7075     ) False interrup
  408340:	2074 6c25 0078 0000 6828 6669 2029 6146     t %lx...(hif) Fa
  408350:	6c69 7420 206f 6552 6461 6920 746e 7265     il to Read inter
  408360:	7572 7470 7220 6765 000a 0000 6828 6669     rupt reg....(hif
  408370:	2029 4146 4c49 7420 206f 6177 656b 7075     ) FAIL to wakeup
  408380:	7420 6568 6320 6968 0a70 0000 4828 4649      the chip...(HIF
  408390:	2029 6146 6c69 7420 206f 6168 646e 656c     ) Fail to handle
  4083a0:	6920 746e 7265 7572 7470 2520 2064 7274      interrupt %d tr
  4083b0:	2079 6741 6961 2e6e 0a2e 0000 6820 6669     y Again..... hif
  4083c0:	725f 6365 6965 6576 203a 6e49 6176 696c     _receive: Invali
  4083d0:	2064 7261 7567 656d 746e 000a 5041 2050     d argument..APP 
  4083e0:	6552 7571 7365 6574 2064 6953 657a 6920     Requested Size i
  4083f0:	2073 616c 6772 7265 7420 6168 206e 6874     s larger than th
  408400:	2065 6572 6963 6576 2064 7562 6666 7265     e recived buffer
  408410:	7320 7a69 2065 253c 3e64 253c 3e64 000a      size <%d><%d>..
  408420:	5041 2050 6552 7571 7365 6574 2064 6441     APP Requested Ad
  408430:	7264 7365 2073 6562 6f79 646e 7420 6568     dress beyond the
  408440:	7220 6365 7669 6465 6220 6675 6566 2072      recived buffer 
  408450:	6461 7264 7365 2073 6e61 2064 656c 676e     address and leng
  408460:	6874 000a 5247 2070 203f 6425 000a 0000     th..GRp ? %d....

00408470 <__FUNCTION__.8820>:
  408470:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.

00408480 <__FUNCTION__.8774>:
  408480:	6968 5f66 6573 646e 0000 0000               hif_send....

0040848c <__FUNCTION__.8790>:
  40848c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0040849c <__FUNCTION__.8799>:
  40849c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  4084ac:	735f 0063                                   _sc.

004084b0 <__FUNCTION__.8747>:
  4084b0:	326d 5f6d 6977 6966 635f 0062 4128 5050     m2m_wifi_cb.(APP
  4084c0:	2829 4e49 4f46 0029 6f43 666e 696c 7463     )(INFO).Conflict
  4084d0:	6465 4920 2050 2022 7525 252e 2e75 7525     ed IP " %u.%u.%u
  4084e0:	252e 2075 2022 000a 4552 2051 6f4e 2074     .%u " ..REQ Not 
  4084f0:	6564 6966 656e 2064 6425 000a 4e49 4156     defined %d..INVA
  408500:	494c 2044 4f50 4e49 4554 0a52 0000 0000     LID POINTER.....
  408510:	4e49 4156 494c 2044 5353 4449 000a 0000     INVALID SSID....
  408520:	4e49 4156 494c 2044 4843 000a 4e49 4156     INVALID CH..INVA
  408530:	494c 2044 4844 5043 5320 5245 4556 2052     LID DHCP SERVER 
  408540:	5049 000a 4e49 4156 494c 2044 454b 2059     IP..INVALID KEY 
  408550:	4e49 4544 0a58 0000 4e49 4156 494c 2044     INDEX...INVALID 
  408560:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
  408570:	494c 2044 4557 2050 454b 0a59 0000 0000     LID WEP KEY.....
  408580:	4e49 4156 494c 2044 5541 4854 4e45 4954     INVALID AUTHENTI
  408590:	4143 4954 4e4f 4d20 444f 0a45 0000 0000     CATION MODE.....
  4085a0:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
  4085b0:	2520 2e75 7525 252e 0a75 0000 694d 206e      %u.%u.%u...Min 
  4085c0:	7264 7669 7265 7620 7265 3a20 2520 2e75     driver ver : %u.
  4085d0:	7525 252e 0a75 0000 7543 7272 6420 6972     %u.%u...Curr dri
  4085e0:	6576 2072 6576 3a72 2520 2e75 7525 252e     ver ver: %u.%u.%
  4085f0:	0a75 0000 694d 6d73 7461 6863 4620 7269     u...Mismatch Fir
  408600:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
  408610:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
  408620:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
  408630:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
  408640:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
  408650:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
  408660:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
  408670:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
  408680:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
  408690:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
  4086a0:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
  4086b0:	2064 6573 2063 7974 6570 000a 4e49 4156     d sec type..INVA
  4086c0:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
  4086d0:	6f6c 7374 0a21 0000 4e49 4156 494c 2044     lots!...INVALID 
  4086e0:	6373 6e61 7320 6f6c 2074 6974 656d 0a21     scan slot time!.
  4086f0:	0000 0000 4e49 4156 494c 2044 6f4e 6f20     ....INVALID No o
  408700:	2066 7270 626f 2065 6572 7571 7365 7374     f probe requests
  408710:	7020 7265 7320 6163 206e 6c73 746f 000a      per scan slot..
  408720:	4e49 4156 494c 2044 5352 4953 7420 7268     INVALID RSSI thr
  408730:	7365 6f68 646c 2520 2064 000a 505f 5f53     eshold %d .._PS_
  408740:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
  408750:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
  408760:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
  408770:	796c 6220 2065 2c31 3620 6f20 2072 3131     ly be 1, 6 or 11
  408780:	000a 0000 4f50 4557 2052 4153 4556 2520     ....POWER SAVE %
  408790:	0a64 0000 4e49 4156 494c 2044 4f44 414d     d...INVALID DOMA
  4087a0:	4e49 4e20 4d41 0a45 0000 0000 5250 474e     IN NAME.....PRNG
  4087b0:	4220 6675 6566 2072 7865 6563 6465 6465      Buffer exceeded
  4087c0:	6d20 7861 6d69 6d75 7320 7a69 2065 6425      maximum size %d
  4087d0:	6f20 2072 554e 4c4c 4220 6675 6566 0a72      or NULL Buffer.
  4087e0:	0000 0000                                   ....

004087e4 <__FUNCTION__.8771>:
  4087e4:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

004087f4 <__FUNCTION__.8678>:
  4087f4:	6863 7069 645f 6965 696e 0074               chip_deinit.

00408800 <__FUNCTION__.8584>:
  408800:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.
  408810:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  408820:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  408830:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  408840:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  408850:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  408860:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  408870:	000a 0000 6e5b 696d 7320 6174 7472 3a5d     ....[nmi start]:
  408880:	6620 6961 206c 6572 6461 7220 6765 3020      fail read reg 0
  408890:	3178 3131 2038 2e2e 0a2e 0000 6572 3a67     x1118 ......reg:
  4088a0:	7825 2f20 2520 2078 000a 0000 6166 6c69     %x / %x ....fail
  4088b0:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  4088c0:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  4088d0:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  4088e0:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  4088f0:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  408900:	705b 6c75 756c 5f70 7463 6c72 3a5d 6620     [pullup_ctrl]: f
  408910:	6961 656c 2064 6f74 7220 6165 0a64 0000     ailed to read...
  408920:	705b 6c75 756c 5f70 7463 6c72 3a5d 6620     [pullup_ctrl]: f
  408930:	6961 656c 2064 6f74 7720 6972 6574 000a     ailed to write..
  408940:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  408950:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  408960:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
  408970:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
  408980:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
  408990:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
  4089a0:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
  4089b0:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
  4089c0:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
  4089d0:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
  4089e0:	6920 696e 2074 7562 0a73 0000                init bus...

004089ec <__FUNCTION__.8665>:
  4089ec:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

004089f8 <__FUNCTION__.8672>:
  4089f8:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00408a08 <__FUNCTION__.8073>:
  408a08:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00408a18 <crc7_syndrome_table>:
  408a18:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  408a28:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  408a38:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  408a48:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  408a58:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  408a68:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  408a78:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  408a88:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  408a98:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  408aa8:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  408ab8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  408ac8:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  408ad8:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  408ae8:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  408af8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  408b08:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy

00408b18 <__FUNCTION__.8140>:
  408b18:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00408b24 <__FUNCTION__.8088>:
  408b24:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00408b34 <__FUNCTION__.8123>:
  408b34:	6d6e 735f 6970 725f 6165 0064 6e5b 696d     nm_spi_read.[nmi
  408b44:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  408b54:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
  408b64:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  408b74:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  408b84:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  408b94:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
  408ba4:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  408bb4:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  408bc4:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
  408bd4:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
  408be4:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  408bf4:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
  408c04:	2e2e 0a2e 0000 0000 6e5b 696d 7320 6970     ........[nmi spi
  408c14:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  408c24:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
  408c34:	7375 6520 7272 726f 2e2e 0a2e 0000 0000     us error........
  408c44:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  408c54:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
  408c64:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  408c74:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  408c84:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
  408c94:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
  408ca4:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
  408cb4:	7073 6e6f 6573 202c 7277 7469 2065 6572     sponse, write re
  408cc4:	2067 2528 3830 2978 2e2e 0a2e 0000 0000     g (%08x)........
  408cd4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  408ce4:	2064 6d63 2c64 7220 6165 2064 6572 2067     d cmd, read reg 
  408cf4:	2528 3830 2978 2e2e 0a2e 0000 6e5b 696d     (%08x)......[nmi
  408d04:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  408d14:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  408d24:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  408d34:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  408d44:	2064 6164 6174 7220 6165 2e64 2e2e 000a     d data read.....
  408d54:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  408d64:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  408d74:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  408d84:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  408d94:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  408da4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  408db4:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  408dc4:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  408dd4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  408de4:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  408df4:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  408e04:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  408e14:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  408e24:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  408e34:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  408e44:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  408e54:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  408e64:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  408e74:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  408e84:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  408e94:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  408ea4:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  408eb4:	7220 6165 2e64 2e2e 000a 0000 6e5b 696d      read.......[nmi
  408ec4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  408ed4:	2c64 7720 6972 6574 6220 6f6c 6b63 2820     d, write block (
  408ee4:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
  408ef4:	7320 6970 5d20 203a 6146 6c69 6465 6320      spi ]: Failed c
  408f04:	646d 7220 7365 6f70 736e 2c65 7720 6972     md response, wri
  408f14:	6574 6220 6f6c 6b63 2820 3025 7838 2e29     te block (%08x).
  408f24:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  408f34:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  408f44:	6320 646d 7720 6972 6574 202c 7562 2073      cmd write, bus 
  408f54:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  408f64:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  408f74:	6174 6220 6f6c 6b63 7720 6972 6574 202c     ta block write, 
  408f84:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  408f94:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  408fa4:	2064 6164 6174 6220 6f6c 6b63 6320 6372     d data block crc
  408fb4:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  408fc4:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  408fd4:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  408fe4:	6164 6174 7720 6972 6574 2e2e 0a2e 0000     data write......

00408ff4 <__FUNCTION__.8098>:
  408ff4:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00409004 <__FUNCTION__.8049>:
  409004:	7073 5f69 6d63 0064                         spi_cmd.

0040900c <__FUNCTION__.8106>:
  40900c:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0040901c <__FUNCTION__.8057>:
  40901c:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00409028 <__FUNCTION__.8115>:
  409028:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....
  409038:	4528 5252 2952 7543 7272 6e65 2074 253c     (ERRR)Current <%
  409048:	3e64 000a 4e53 2049 7845 6563 6465 2073     d>..SNI Exceeds 
  409058:	614d 2078 654c 676e 6874 000a 6e55 6e6b     Max Length..Unkn
  409068:	776f 206e 5353 204c 6f53 6b63 7465 4f20     own SSL Socket O
  409078:	7470 6f69 206e 6425 000a 0000 6f4e 2074     ption %d....Not 
  409088:	5353 204c 6f53 6b63 7465 000a 4547 2054     SSL Socket..GET 
  409098:	732f 6174 6974 2f63 6574 7478 742f 7365     /static/text/tes
  4090a8:	6574 742e 7478 4820 5454 2f50 2e31 0d31     te.txt HTTP/1.1.
  4090b8:	200a 6341 6563 7470 203a 2f2a 0d2a 0d0a     . Accept: */*...
  4090c8:	000a 0000 6f73 6b63 7465 635f 3a62 6320     ....socket_cb: c
  4090d8:	6e6f 656e 7463 7320 6375 6563 7373 0d21     onnect success!.
  4090e8:	000a 0000 6f73 6b63 7465 635f 3a62 6320     ....socket_cb: c
  4090f8:	6e6f 656e 7463 6520 7272 726f 0d21 000a     onnect error!...
  409108:	6f73 6b63 7465 635f 3a62 7320 6e65 2064     socket_cb: send 
  409118:	7573 6363 7365 2173 0a0d 0000 7325 0d20     success!....%s .
  409128:	000a 0000 6f73 6b63 7465 635f 3a62 7220     ....socket_cb: r
  409138:	6365 2076 7265 6f72 2172 0a0d 0000 0000     ecv error!......
  409148:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
  409158:	5f49 4552 5053 435f 4e4f 535f 4154 4554     I_RESP_CON_STATE
  409168:	435f 4148 474e 4445 203a 4f43 4e4e 4345     _CHANGED: CONNEC
  409178:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
  409188:	4d20 4d32 575f 4649 5f49 4552 5053 435f      M2M_WIFI_RESP_C
  409198:	4e4f 535f 4154 4554 435f 4148 474e 4445     ON_STATE_CHANGED
  4091a8:	203a 4944 4353 4e4f 454e 5443 4445 0a0d     : DISCONNECTED..
  4091b8:	0000 0000 3131 3030 3832 3137 0000 0000     ....11002871....
  4091c8:	5054 4c2d 4e49 5f4b 4139 3845 0000 0000     TP-LINK_9AE8....
  4091d8:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
  4091e8:	5f49 4552 5f51 4844 5043 435f 4e4f 3a46     I_REQ_DHCP_CONF:
  4091f8:	4920 2050 7369 2520 2e75 7525 252e 2e75      IP is %u.%u.%u.
  409208:	7525 0a0d 0000 0000 2d2d 5720 4e49 3143     %u......-- WINC1
  409218:	3035 2030 4354 2050 6573 7672 7265 6520     500 TCP server e
  409228:	6178 706d 656c 2d20 0d2d 2d0a 202d 4153     xample --..-- SA
  409238:	454d 3037 582d 4c50 2044 2d2d 0a0d 2d2d     ME70-XPLD --..--
  409248:	4320 6d6f 6970 656c 3a64 4d20 7961 2020      Compiled: May  
  409258:	2035 3032 3731 3120 3a35 3234 323a 2031     5 2017 15:42:21 
  409268:	2d2d 0a0d 0000 0000 616d 6e69 203a 326d     --......main: m2
  409278:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
  409288:	6520 7272 726f 2821 6425 0d29 000a 0000      error!(%d).....
  409298:	0a0c 2d0d 202d 4453 4d2f 434d 532f 4944     ...-- SD/MMC/SDI
  4092a8:	204f 6143 6472 4520 6178 706d 656c 6f20     O Card Example o
  4092b8:	206e 6146 4674 2073 2d2d 0d0a 0000 0000     n FatFs --......
  4092c8:	6c50 6165 6573 7020 756c 2067 6e61 5320     Please plug an S
  4092d8:	2c44 4d20 434d 6f20 2072 4453 4f49 6320     D, MMC or SDIO c
  4092e8:	7261 2064 6e69 7320 6f6c 2e74 0d0a 0000     ard in slot.....
  4092f8:	6143 6472 6920 736e 6174 6c6c 4620 4941     Card install FAI
  409308:	0a4c 000d 6c50 6165 6573 7520 706e 756c     L...Please unplu
  409318:	2067 6e61 2064 6572 702d 756c 2067 6874     g and re-plug th
  409328:	2065 6163 6472 0a2e 000d 0000 6f4d 6e75     e card......Moun
  409338:	2074 6964 6b73 2820 5f66 6f6d 6e75 2974     t disk (f_mount)
  409348:	2e2e 0d2e 000a 0000 616d 6e69 203a 6166     ........main: fa
  409358:	6c69 6465 7420 206f 7263 6165 6574 5420     iled to create T
  409368:	5043 6320 696c 6e65 2074 6f73 6b63 7465     CP client socket
  409378:	6520 7272 726f 0d21 000a 0000 616d 6e69      error!.....main
  409388:	203a 6166 6c69 6465 7420 206f 6f63 6e6e     : failed to conn
  409398:	6365 2074 6f73 6b63 7465 6520 7272 726f     ect socket error
  4093a8:	0d21 000a 6f43 656e 7463 6461 206f 2021     !...Conectado ! 
  4093b8:	000a 0000 0043 0000                         ....C...

004093c0 <_global_impure_ptr>:
  4093c0:	0048 2040                                   H.@ 

004093c4 <zeroes.6993>:
  4093c4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4093d4:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  4093e4:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  4093f4:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00409404 <blanks.6992>:
  409404:	2020 2020 2020 2020 2020 2020 2020 2020                     

00409414 <_init>:
  409414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409416:	bf00      	nop
  409418:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40941a:	bc08      	pop	{r3}
  40941c:	469e      	mov	lr, r3
  40941e:	4770      	bx	lr

00409420 <__init_array_start>:
  409420:	00406405 	.word	0x00406405

00409424 <__frame_dummy_init_array_entry>:
  409424:	00400165                                e.@.

00409428 <_fini>:
  409428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40942a:	bf00      	nop
  40942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40942e:	bc08      	pop	{r3}
  409430:	469e      	mov	lr, r3
  409432:	4770      	bx	lr

00409434 <__fini_array_start>:
  409434:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <egstrNmBusCapabilities>:
20400030:	1000 0000                                   ....

20400034 <clk_status_reg_adr>:
20400034:	000f 0000                                   ....

20400038 <g_interrupt_enabled>:
20400038:	0001 0000                                   ....

2040003c <SystemCoreClock>:
2040003c:	0900 003d                                   ..=.

20400040 <tcp_client_socket>:
20400040:	00ff 0000 0000 0000                         ........

20400048 <impure_data>:
20400048:	0000 0000 0334 2040 039c 2040 0404 2040     ....4.@ ..@ ..@ 
	...
2040007c:	93bc 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400470 <_impure_ptr>:
20400470:	0048 2040                                   H.@ 

20400474 <lc_ctype_charset>:
20400474:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20400494 <__mb_cur_max>:
20400494:	0001 0000                                   ....

20400498 <__malloc_av_>:
	...
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 

204008a0 <__malloc_trim_threshold>:
204008a0:	0000 0002                                   ....

204008a4 <__malloc_sbrk_base>:
204008a4:	ffff ffff                                   ....

204008a8 <__wctomb>:
204008a8:	7c01 0040                                   .|@.
