
Smart-pen-drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c6e4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040c6e4  0040c6e4  0001c6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ec  20400000  0040c6ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000d70  204009ec  0040d0d8  000209ec  2**2
                  ALLOC
  4 .stack        00002004  2040175c  0040de48  000209ec  2**0
                  ALLOC
  5 .heap         00000200  20403760  0040fe4c  000209ec  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209ec  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a1a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00035068  00000000  00000000  00020a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000068d8  00000000  00000000  00055adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016a6e  00000000  00000000  0005c3b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001468  00000000  00000000  00072e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000018e0  00000000  00000000  00074289  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029126  00000000  00000000  00075b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001b278  00000000  00000000  0009ec8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009a532  00000000  00000000  000b9f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004998  00000000  00000000  0015443c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 37 40 20 49 49 40 00 47 49 40 00 47 49 40 00     `7@ II@.GI@.GI@.
  400010:	47 49 40 00 47 49 40 00 47 49 40 00 00 00 00 00     GI@.GI@.GI@.....
	...
  40002c:	47 49 40 00 47 49 40 00 00 00 00 00 47 49 40 00     GI@.GI@.....GI@.
  40003c:	47 49 40 00 47 49 40 00 47 49 40 00 47 49 40 00     GI@.GI@.GI@.GI@.
  40004c:	47 49 40 00 47 49 40 00 47 49 40 00 47 49 40 00     GI@.GI@.GI@.GI@.
  40005c:	47 49 40 00 47 49 40 00 00 00 00 00 61 44 40 00     GI@.GI@.....aD@.
  40006c:	75 44 40 00 89 44 40 00 47 49 40 00 47 49 40 00     uD@..D@.GI@.GI@.
  40007c:	47 49 40 00 9d 44 40 00 b1 44 40 00 47 49 40 00     GI@..D@..D@.GI@.
  40008c:	47 49 40 00 47 49 40 00 47 49 40 00 47 49 40 00     GI@.GI@.GI@.GI@.
  40009c:	47 49 40 00 47 49 40 00 47 49 40 00 47 49 40 00     GI@.GI@.GI@.GI@.
  4000ac:	47 49 40 00 47 49 40 00 47 49 40 00 47 49 40 00     GI@.GI@.GI@.GI@.
  4000bc:	47 49 40 00 47 49 40 00 47 49 40 00 47 49 40 00     GI@.GI@.GI@.GI@.
  4000cc:	47 49 40 00 00 00 00 00 47 49 40 00 00 00 00 00     GI@.....GI@.....
  4000dc:	47 49 40 00 47 49 40 00 47 49 40 00 47 49 40 00     GI@.GI@.GI@.GI@.
  4000ec:	47 49 40 00 47 49 40 00 47 49 40 00 47 49 40 00     GI@.GI@.GI@.GI@.
  4000fc:	47 49 40 00 47 49 40 00 47 49 40 00 47 49 40 00     GI@.GI@.GI@.GI@.
  40010c:	47 49 40 00 47 49 40 00 00 00 00 00 00 00 00 00     GI@.GI@.........
  40011c:	00 00 00 00 47 49 40 00 47 49 40 00 47 49 40 00     ....GI@.GI@.GI@.
  40012c:	47 49 40 00 47 49 40 00 00 00 00 00 47 49 40 00     GI@.GI@.....GI@.
  40013c:	47 49 40 00                                         GI@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009ec 	.word	0x204009ec
  40015c:	00000000 	.word	0x00000000
  400160:	0040c6ec 	.word	0x0040c6ec

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040c6ec 	.word	0x0040c6ec
  4001a0:	204009f0 	.word	0x204009f0
  4001a4:	0040c6ec 	.word	0x0040c6ec
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001b6:	3300      	adds	r3, #0
  4001b8:	bf18      	it	ne
  4001ba:	2301      	movne	r3, #1
  4001bc:	7c4a      	ldrb	r2, [r1, #17]
  4001be:	6809      	ldr	r1, [r1, #0]
  4001c0:	4803      	ldr	r0, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c2:	7800      	ldrb	r0, [r0, #0]
  4001c4:	4c03      	ldr	r4, [pc, #12]	; (4001d4 <sd_mmc_configure_slot+0x28>)
  4001c6:	47a0      	blx	r4
  4001c8:	bd10      	pop	{r4, pc}
  4001ca:	bf00      	nop
  4001cc:	20400a08 	.word	0x20400a08
  4001d0:	20400a0d 	.word	0x20400a0d
  4001d4:	00400d89 	.word	0x00400d89

004001d8 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d8:	b108      	cbz	r0, 4001de <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001da:	2004      	movs	r0, #4
  4001dc:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001de:	4b32      	ldr	r3, [pc, #200]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001e0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001e2:	4b32      	ldr	r3, [pc, #200]	; (4002ac <sd_mmc_select_slot+0xd4>)
  4001e4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001e8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4001ec:	f002 021f 	and.w	r2, r2, #31
  4001f0:	2301      	movs	r3, #1
  4001f2:	fa03 f202 	lsl.w	r2, r3, r2
  4001f6:	420a      	tst	r2, r1
  4001f8:	d010      	beq.n	40021c <sd_mmc_select_slot+0x44>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  4001fc:	7b9b      	ldrb	r3, [r3, #14]
  4001fe:	2b01      	cmp	r3, #1
  400200:	d004      	beq.n	40020c <sd_mmc_select_slot+0x34>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400202:	2204      	movs	r2, #4
  400204:	4b28      	ldr	r3, [pc, #160]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400206:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400208:	2002      	movs	r0, #2
  40020a:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  40020c:	4b28      	ldr	r3, [pc, #160]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  40020e:	781b      	ldrb	r3, [r3, #0]
  400210:	2b00      	cmp	r3, #0
  400212:	d0f6      	beq.n	400202 <sd_mmc_select_slot+0x2a>
		SysTick->CTRL = 0;
  400214:	2200      	movs	r2, #0
  400216:	4b27      	ldr	r3, [pc, #156]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400218:	601a      	str	r2, [r3, #0]
  40021a:	e7f2      	b.n	400202 <sd_mmc_select_slot+0x2a>
{
  40021c:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  40021e:	4b22      	ldr	r3, [pc, #136]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400220:	7b9b      	ldrb	r3, [r3, #14]
  400222:	2b04      	cmp	r3, #4
  400224:	d005      	beq.n	400232 <sd_mmc_select_slot+0x5a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400226:	2b01      	cmp	r3, #1
  400228:	d019      	beq.n	40025e <sd_mmc_select_slot+0x86>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  40022a:	2b03      	cmp	r3, #3
  40022c:	d12c      	bne.n	400288 <sd_mmc_select_slot+0xb0>
		return SD_MMC_ERR_UNUSABLE;
  40022e:	2003      	movs	r0, #3
  400230:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400232:	2201      	movs	r2, #1
  400234:	4b1c      	ldr	r3, [pc, #112]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400236:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  400238:	4b1e      	ldr	r3, [pc, #120]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	b93b      	cbnz	r3, 40024e <sd_mmc_select_slot+0x76>
		sd_mmc_sam_systick_used = true;
  40023e:	4b1c      	ldr	r3, [pc, #112]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400240:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400242:	4b1c      	ldr	r3, [pc, #112]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400244:	491c      	ldr	r1, [pc, #112]	; (4002b8 <sd_mmc_select_slot+0xe0>)
  400246:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400248:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40024a:	2002      	movs	r0, #2
  40024c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40024e:	2200      	movs	r2, #0
  400250:	4b17      	ldr	r3, [pc, #92]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400252:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400254:	4819      	ldr	r0, [pc, #100]	; (4002bc <sd_mmc_select_slot+0xe4>)
  400256:	4b1a      	ldr	r3, [pc, #104]	; (4002c0 <sd_mmc_select_slot+0xe8>)
  400258:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40025a:	2002      	movs	r0, #2
  40025c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40025e:	4b14      	ldr	r3, [pc, #80]	; (4002b0 <sd_mmc_select_slot+0xd8>)
  400260:	781b      	ldrb	r3, [r3, #0]
  400262:	b13b      	cbz	r3, 400274 <sd_mmc_select_slot+0x9c>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400264:	4b13      	ldr	r3, [pc, #76]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40026c:	d01a      	beq.n	4002a4 <sd_mmc_select_slot+0xcc>
		SysTick->CTRL = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b10      	ldr	r3, [pc, #64]	; (4002b4 <sd_mmc_select_slot+0xdc>)
  400272:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400274:	4b0c      	ldr	r3, [pc, #48]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400276:	2202      	movs	r2, #2
  400278:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40027a:	4a12      	ldr	r2, [pc, #72]	; (4002c4 <sd_mmc_select_slot+0xec>)
  40027c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40027e:	2201      	movs	r2, #1
  400280:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400282:	2200      	movs	r2, #0
  400284:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  400288:	2200      	movs	r2, #0
  40028a:	4b0f      	ldr	r3, [pc, #60]	; (4002c8 <sd_mmc_select_slot+0xf0>)
  40028c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40028e:	4c06      	ldr	r4, [pc, #24]	; (4002a8 <sd_mmc_select_slot+0xd0>)
  400290:	4b0e      	ldr	r3, [pc, #56]	; (4002cc <sd_mmc_select_slot+0xf4>)
  400292:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400294:	4b0e      	ldr	r3, [pc, #56]	; (4002d0 <sd_mmc_select_slot+0xf8>)
  400296:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400298:	7ba0      	ldrb	r0, [r4, #14]
  40029a:	2802      	cmp	r0, #2
  40029c:	bf14      	ite	ne
  40029e:	2000      	movne	r0, #0
  4002a0:	2001      	moveq	r0, #1
  4002a2:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  4002a4:	2002      	movs	r0, #2
  4002a6:	bd10      	pop	{r4, pc}
  4002a8:	2040000c 	.word	0x2040000c
  4002ac:	00200707 	.word	0x00200707
  4002b0:	20400a0c 	.word	0x20400a0c
  4002b4:	e000e010 	.word	0xe000e010
  4002b8:	023c3460 	.word	0x023c3460
  4002bc:	0303af6b 	.word	0x0303af6b
  4002c0:	20400001 	.word	0x20400001
  4002c4:	00061a80 	.word	0x00061a80
  4002c8:	20400a0d 	.word	0x20400a0d
  4002cc:	20400a08 	.word	0x20400a08
  4002d0:	004001ad 	.word	0x004001ad

004002d4 <sdio_cmd52>:
{
  4002d4:	b538      	push	{r3, r4, r5, lr}
  4002d6:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4002d8:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002da:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4002de:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4002e2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4002e6:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002e8:	4311      	orrs	r1, r2
  4002ea:	f241 3034 	movw	r0, #4916	; 0x1334
  4002ee:	4b05      	ldr	r3, [pc, #20]	; (400304 <sdio_cmd52+0x30>)
  4002f0:	4798      	blx	r3
  4002f2:	4605      	mov	r5, r0
  4002f4:	b908      	cbnz	r0, 4002fa <sdio_cmd52+0x26>
}
  4002f6:	4628      	mov	r0, r5
  4002f8:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  4002fa:	4b03      	ldr	r3, [pc, #12]	; (400308 <sdio_cmd52+0x34>)
  4002fc:	4798      	blx	r3
  4002fe:	7020      	strb	r0, [r4, #0]
	return true;
  400300:	e7f9      	b.n	4002f6 <sdio_cmd52+0x22>
  400302:	bf00      	nop
  400304:	00400e71 	.word	0x00400e71
  400308:	00400e95 	.word	0x00400e95

0040030c <sd_mmc_cmd9_mci>:
{
  40030c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40030e:	4b09      	ldr	r3, [pc, #36]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	8999      	ldrh	r1, [r3, #12]
  400314:	0409      	lsls	r1, r1, #16
  400316:	f641 3009 	movw	r0, #6921	; 0x1b09
  40031a:	4b07      	ldr	r3, [pc, #28]	; (400338 <sd_mmc_cmd9_mci+0x2c>)
  40031c:	4798      	blx	r3
  40031e:	4604      	mov	r4, r0
  400320:	b908      	cbnz	r0, 400326 <sd_mmc_cmd9_mci+0x1a>
}
  400322:	4620      	mov	r0, r4
  400324:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400326:	4b03      	ldr	r3, [pc, #12]	; (400334 <sd_mmc_cmd9_mci+0x28>)
  400328:	6818      	ldr	r0, [r3, #0]
  40032a:	3012      	adds	r0, #18
  40032c:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_cmd9_mci+0x30>)
  40032e:	4798      	blx	r3
	return true;
  400330:	e7f7      	b.n	400322 <sd_mmc_cmd9_mci+0x16>
  400332:	bf00      	nop
  400334:	20400a08 	.word	0x20400a08
  400338:	00400e71 	.word	0x00400e71
  40033c:	00400e9d 	.word	0x00400e9d

00400340 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400340:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400342:	4b04      	ldr	r3, [pc, #16]	; (400354 <sd_mmc_deselect_slot+0x14>)
  400344:	781b      	ldrb	r3, [r3, #0]
  400346:	b103      	cbz	r3, 40034a <sd_mmc_deselect_slot+0xa>
  400348:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40034a:	2000      	movs	r0, #0
  40034c:	4b02      	ldr	r3, [pc, #8]	; (400358 <sd_mmc_deselect_slot+0x18>)
  40034e:	4798      	blx	r3
	}
}
  400350:	e7fa      	b.n	400348 <sd_mmc_deselect_slot+0x8>
  400352:	bf00      	nop
  400354:	20400a0d 	.word	0x20400a0d
  400358:	00400e4d 	.word	0x00400e4d

0040035c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40035c:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  40035e:	2010      	movs	r0, #16
  400360:	4b05      	ldr	r3, [pc, #20]	; (400378 <sd_mmc_init+0x1c>)
  400362:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400364:	2204      	movs	r2, #4
  400366:	4b05      	ldr	r3, [pc, #20]	; (40037c <sd_mmc_init+0x20>)
  400368:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40036a:	22ff      	movs	r2, #255	; 0xff
  40036c:	4b04      	ldr	r3, [pc, #16]	; (400380 <sd_mmc_init+0x24>)
  40036e:	701a      	strb	r2, [r3, #0]
	driver_init();
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <sd_mmc_init+0x28>)
  400372:	4798      	blx	r3
  400374:	bd08      	pop	{r3, pc}
  400376:	bf00      	nop
  400378:	00404669 	.word	0x00404669
  40037c:	2040000c 	.word	0x2040000c
  400380:	20400a0d 	.word	0x20400a0d
  400384:	00400d4d 	.word	0x00400d4d

00400388 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40038c:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40038e:	4ba7      	ldr	r3, [pc, #668]	; (40062c <sd_mmc_check+0x2a4>)
  400390:	4798      	blx	r3
  400392:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400394:	2801      	cmp	r0, #1
  400396:	d005      	beq.n	4003a4 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400398:	4ba5      	ldr	r3, [pc, #660]	; (400630 <sd_mmc_check+0x2a8>)
  40039a:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  40039c:	4620      	mov	r0, r4
  40039e:	b015      	add	sp, #84	; 0x54
  4003a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4003a4:	ae14      	add	r6, sp, #80	; 0x50
  4003a6:	2308      	movs	r3, #8
  4003a8:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4003ac:	4ba1      	ldr	r3, [pc, #644]	; (400634 <sd_mmc_check+0x2ac>)
  4003ae:	681b      	ldr	r3, [r3, #0]
  4003b0:	2701      	movs	r7, #1
  4003b2:	73df      	strb	r7, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4003b4:	2500      	movs	r5, #0
  4003b6:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  4003b8:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  4003ba:	4b9f      	ldr	r3, [pc, #636]	; (400638 <sd_mmc_check+0x2b0>)
  4003bc:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003be:	9600      	str	r6, [sp, #0]
  4003c0:	462b      	mov	r3, r5
  4003c2:	2206      	movs	r2, #6
  4003c4:	4629      	mov	r1, r5
  4003c6:	4638      	mov	r0, r7
  4003c8:	4e9c      	ldr	r6, [pc, #624]	; (40063c <sd_mmc_check+0x2b4>)
  4003ca:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003cc:	4629      	mov	r1, r5
  4003ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003d2:	4b9b      	ldr	r3, [pc, #620]	; (400640 <sd_mmc_check+0x2b8>)
  4003d4:	4798      	blx	r3
  4003d6:	b930      	cbnz	r0, 4003e6 <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4003d8:	4b96      	ldr	r3, [pc, #600]	; (400634 <sd_mmc_check+0x2ac>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	2403      	movs	r4, #3
  4003de:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  4003e0:	4b93      	ldr	r3, [pc, #588]	; (400630 <sd_mmc_check+0x2a8>)
  4003e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4003e4:	e7da      	b.n	40039c <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003ea:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ee:	4b94      	ldr	r3, [pc, #592]	; (400640 <sd_mmc_check+0x2b8>)
  4003f0:	4798      	blx	r3
  4003f2:	2800      	cmp	r0, #0
  4003f4:	f040 8093 	bne.w	40051e <sd_mmc_check+0x196>
	*v2 = 0;
  4003f8:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4003fc:	2100      	movs	r1, #0
  4003fe:	f244 5005 	movw	r0, #17669	; 0x4505
  400402:	4b8f      	ldr	r3, [pc, #572]	; (400640 <sd_mmc_check+0x2b8>)
  400404:	4798      	blx	r3
  400406:	2800      	cmp	r0, #0
  400408:	f040 8097 	bne.w	40053a <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40040c:	4b89      	ldr	r3, [pc, #548]	; (400634 <sd_mmc_check+0x2ac>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	7bdb      	ldrb	r3, [r3, #15]
  400412:	f013 0f01 	tst.w	r3, #1
  400416:	f040 80b5 	bne.w	400584 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40041a:	2100      	movs	r1, #0
  40041c:	f245 1003 	movw	r0, #20739	; 0x5103
  400420:	4b87      	ldr	r3, [pc, #540]	; (400640 <sd_mmc_check+0x2b8>)
  400422:	4798      	blx	r3
  400424:	2800      	cmp	r0, #0
  400426:	d0d7      	beq.n	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400428:	4d82      	ldr	r5, [pc, #520]	; (400634 <sd_mmc_check+0x2ac>)
  40042a:	682e      	ldr	r6, [r5, #0]
  40042c:	4b85      	ldr	r3, [pc, #532]	; (400644 <sd_mmc_check+0x2bc>)
  40042e:	4798      	blx	r3
  400430:	0c00      	lsrs	r0, r0, #16
  400432:	81b0      	strh	r0, [r6, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400434:	682b      	ldr	r3, [r5, #0]
  400436:	7bdb      	ldrb	r3, [r3, #15]
  400438:	f013 0f01 	tst.w	r3, #1
  40043c:	d034      	beq.n	4004a8 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  40043e:	4b82      	ldr	r3, [pc, #520]	; (400648 <sd_mmc_check+0x2c0>)
  400440:	4798      	blx	r3
  400442:	2800      	cmp	r0, #0
  400444:	d0c8      	beq.n	4003d8 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400446:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400448:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40044a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40044e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400452:	497e      	ldr	r1, [pc, #504]	; (40064c <sd_mmc_check+0x2c4>)
  400454:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40045c:	fb02 f201 	mul.w	r2, r2, r1
  400460:	497b      	ldr	r1, [pc, #492]	; (400650 <sd_mmc_check+0x2c8>)
  400462:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400466:	fb02 f201 	mul.w	r2, r2, r1
  40046a:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40046c:	7c9a      	ldrb	r2, [r3, #18]
  40046e:	0992      	lsrs	r2, r2, #6
  400470:	f040 820c 	bne.w	40088c <sd_mmc_check+0x504>
  400474:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400476:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400478:	7e1a      	ldrb	r2, [r3, #24]
  40047a:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40047c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400480:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400484:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400486:	7ed9      	ldrb	r1, [r3, #27]
  400488:	0049      	lsls	r1, r1, #1
  40048a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40048e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400492:	3201      	adds	r2, #1
  400494:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400498:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40049a:	408a      	lsls	r2, r1
  40049c:	7dd9      	ldrb	r1, [r3, #23]
  40049e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4004a2:	408a      	lsls	r2, r1
				/ 1024;
  4004a4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4004a6:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4004a8:	4b62      	ldr	r3, [pc, #392]	; (400634 <sd_mmc_check+0x2ac>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	8999      	ldrh	r1, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4004ae:	0409      	lsls	r1, r1, #16
  4004b0:	f243 1007 	movw	r0, #12551	; 0x3107
  4004b4:	4b62      	ldr	r3, [pc, #392]	; (400640 <sd_mmc_check+0x2b8>)
  4004b6:	4798      	blx	r3
  4004b8:	2800      	cmp	r0, #0
  4004ba:	d08d      	beq.n	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4004bc:	4b5d      	ldr	r3, [pc, #372]	; (400634 <sd_mmc_check+0x2ac>)
  4004be:	681b      	ldr	r3, [r3, #0]
  4004c0:	7bda      	ldrb	r2, [r3, #15]
  4004c2:	f012 0f01 	tst.w	r2, #1
  4004c6:	f040 81ee 	bne.w	4008a6 <sd_mmc_check+0x51e>
	if (IS_SDIO()) {
  4004ca:	4b5a      	ldr	r3, [pc, #360]	; (400634 <sd_mmc_check+0x2ac>)
  4004cc:	681b      	ldr	r3, [r3, #0]
  4004ce:	7bdb      	ldrb	r3, [r3, #15]
  4004d0:	f013 0f04 	tst.w	r3, #4
  4004d4:	f000 829d 	beq.w	400a12 <sd_mmc_check+0x68a>
  4004d8:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4004da:	2700      	movs	r7, #0
  4004dc:	4e57      	ldr	r6, [pc, #348]	; (40063c <sd_mmc_check+0x2b4>)
  4004de:	f1a5 0309 	sub.w	r3, r5, #9
  4004e2:	aa03      	add	r2, sp, #12
  4004e4:	4413      	add	r3, r2
  4004e6:	9300      	str	r3, [sp, #0]
  4004e8:	463b      	mov	r3, r7
  4004ea:	462a      	mov	r2, r5
  4004ec:	4639      	mov	r1, r7
  4004ee:	4638      	mov	r0, r7
  4004f0:	47b0      	blx	r6
		addr_old++;
  4004f2:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4004f4:	2d0d      	cmp	r5, #13
  4004f6:	d1f2      	bne.n	4004de <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4004f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4004fc:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400500:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400504:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400508:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40050c:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400510:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400514:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400516:	f04f 0800 	mov.w	r8, #0
  40051a:	4f48      	ldr	r7, [pc, #288]	; (40063c <sd_mmc_check+0x2b4>)
  40051c:	e23a      	b.n	400994 <sd_mmc_check+0x60c>
	resp = driver_get_response();
  40051e:	4b49      	ldr	r3, [pc, #292]	; (400644 <sd_mmc_check+0x2bc>)
  400520:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400522:	f1b0 3fff 	cmp.w	r0, #4294967295
  400526:	f000 834a 	beq.w	400bbe <sd_mmc_check+0x836>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40052a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40052e:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400532:	f47f af51 	bne.w	4003d8 <sd_mmc_check+0x50>
	*v2 = 1;
  400536:	46b9      	mov	r9, r7
  400538:	e760      	b.n	4003fc <sd_mmc_check+0x74>
	resp = driver_get_response();
  40053a:	4b42      	ldr	r3, [pc, #264]	; (400644 <sd_mmc_check+0x2bc>)
  40053c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  400542:	f43f af63 	beq.w	40040c <sd_mmc_check+0x84>
  400546:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40054a:	f244 5805 	movw	r8, #17669	; 0x4505
  40054e:	4e3c      	ldr	r6, [pc, #240]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400550:	4f3c      	ldr	r7, [pc, #240]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400552:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  400556:	4640      	mov	r0, r8
  400558:	47b0      	blx	r6
  40055a:	2800      	cmp	r0, #0
  40055c:	f43f af3c 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400560:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400562:	2800      	cmp	r0, #0
  400564:	db02      	blt.n	40056c <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  400566:	3d01      	subs	r5, #1
  400568:	d1f3      	bne.n	400552 <sd_mmc_check+0x1ca>
  40056a:	e735      	b.n	4003d8 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  40056c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400570:	d104      	bne.n	40057c <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400572:	4b30      	ldr	r3, [pc, #192]	; (400634 <sd_mmc_check+0x2ac>)
  400574:	681b      	ldr	r3, [r3, #0]
  400576:	2204      	movs	r2, #4
  400578:	73da      	strb	r2, [r3, #15]
  40057a:	e74e      	b.n	40041a <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40057c:	4b2d      	ldr	r3, [pc, #180]	; (400634 <sd_mmc_check+0x2ac>)
  40057e:	681b      	ldr	r3, [r3, #0]
  400580:	2205      	movs	r2, #5
  400582:	73da      	strb	r2, [r3, #15]
  400584:	f1b9 0f00 	cmp.w	r9, #0
  400588:	4f32      	ldr	r7, [pc, #200]	; (400654 <sd_mmc_check+0x2cc>)
  40058a:	bf14      	ite	ne
  40058c:	46b9      	movne	r9, r7
  40058e:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  400592:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400596:	f04f 0800 	mov.w	r8, #0
  40059a:	4e29      	ldr	r6, [pc, #164]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  40059c:	4f29      	ldr	r7, [pc, #164]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40059e:	4641      	mov	r1, r8
  4005a0:	f241 1037 	movw	r0, #4407	; 0x1137
  4005a4:	47b0      	blx	r6
  4005a6:	b148      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4005a8:	4649      	mov	r1, r9
  4005aa:	f244 5029 	movw	r0, #17705	; 0x4529
  4005ae:	47b0      	blx	r6
  4005b0:	b120      	cbz	r0, 4005bc <sd_mmc_check+0x234>
		resp = driver_get_response();
  4005b2:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005b4:	2800      	cmp	r0, #0
  4005b6:	db20      	blt.n	4005fa <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4005b8:	3d01      	subs	r5, #1
  4005ba:	d1f0      	bne.n	40059e <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4005bc:	4b1d      	ldr	r3, [pc, #116]	; (400634 <sd_mmc_check+0x2ac>)
  4005be:	681b      	ldr	r3, [r3, #0]
  4005c0:	2202      	movs	r2, #2
  4005c2:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4005c4:	2100      	movs	r1, #0
  4005c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4005ca:	4b1d      	ldr	r3, [pc, #116]	; (400640 <sd_mmc_check+0x2b8>)
  4005cc:	4798      	blx	r3
  4005ce:	2800      	cmp	r0, #0
  4005d0:	f43f af02 	beq.w	4003d8 <sd_mmc_check+0x50>
  4005d4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005d8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400654 <sd_mmc_check+0x2cc>
  4005dc:	4e18      	ldr	r6, [pc, #96]	; (400640 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4005de:	4f19      	ldr	r7, [pc, #100]	; (400644 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005e0:	4641      	mov	r1, r8
  4005e2:	f244 5001 	movw	r0, #17665	; 0x4501
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f43f aef5 	beq.w	4003d8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4005ee:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005f0:	2800      	cmp	r0, #0
  4005f2:	db31      	blt.n	400658 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4005f4:	3d01      	subs	r5, #1
  4005f6:	d1f3      	bne.n	4005e0 <sd_mmc_check+0x258>
  4005f8:	e6ee      	b.n	4003d8 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4005fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4005fe:	d005      	beq.n	40060c <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400600:	4b0c      	ldr	r3, [pc, #48]	; (400634 <sd_mmc_check+0x2ac>)
  400602:	681a      	ldr	r2, [r3, #0]
  400604:	7bd3      	ldrb	r3, [r2, #15]
  400606:	f043 0308 	orr.w	r3, r3, #8
  40060a:	73d3      	strb	r3, [r2, #15]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40060c:	4b09      	ldr	r3, [pc, #36]	; (400634 <sd_mmc_check+0x2ac>)
  40060e:	681b      	ldr	r3, [r3, #0]
  400610:	7bdb      	ldrb	r3, [r3, #15]
  400612:	f013 0f01 	tst.w	r3, #1
  400616:	f43f af00 	beq.w	40041a <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40061a:	2100      	movs	r1, #0
  40061c:	f645 3002 	movw	r0, #23298	; 0x5b02
  400620:	4b07      	ldr	r3, [pc, #28]	; (400640 <sd_mmc_check+0x2b8>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f47f aef8 	bne.w	40041a <sd_mmc_check+0x92>
  40062a:	e6d5      	b.n	4003d8 <sd_mmc_check+0x50>
  40062c:	004001d9 	.word	0x004001d9
  400630:	00400341 	.word	0x00400341
  400634:	20400a08 	.word	0x20400a08
  400638:	00400e4f 	.word	0x00400e4f
  40063c:	004002d5 	.word	0x004002d5
  400640:	00400e71 	.word	0x00400e71
  400644:	00400e95 	.word	0x00400e95
  400648:	0040030d 	.word	0x0040030d
  40064c:	0040b434 	.word	0x0040b434
  400650:	0040b450 	.word	0x0040b450
  400654:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400658:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40065c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400660:	d027      	beq.n	4006b2 <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400662:	2100      	movs	r1, #0
  400664:	f645 3002 	movw	r0, #23298	; 0x5b02
  400668:	4ba5      	ldr	r3, [pc, #660]	; (400900 <sd_mmc_check+0x578>)
  40066a:	4798      	blx	r3
  40066c:	2800      	cmp	r0, #0
  40066e:	f43f aeb3 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  400672:	4ba4      	ldr	r3, [pc, #656]	; (400904 <sd_mmc_check+0x57c>)
  400674:	681b      	ldr	r3, [r3, #0]
  400676:	2201      	movs	r2, #1
  400678:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40067a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40067e:	f241 1003 	movw	r0, #4355	; 0x1103
  400682:	4b9f      	ldr	r3, [pc, #636]	; (400900 <sd_mmc_check+0x578>)
  400684:	4798      	blx	r3
  400686:	2800      	cmp	r0, #0
  400688:	f43f aea6 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  40068c:	4b9e      	ldr	r3, [pc, #632]	; (400908 <sd_mmc_check+0x580>)
  40068e:	4798      	blx	r3
  400690:	2800      	cmp	r0, #0
  400692:	f43f aea1 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400696:	4b9b      	ldr	r3, [pc, #620]	; (400904 <sd_mmc_check+0x57c>)
  400698:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40069a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  40069c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4006a0:	3b01      	subs	r3, #1
  4006a2:	2b03      	cmp	r3, #3
  4006a4:	d80c      	bhi.n	4006c0 <sd_mmc_check+0x338>
  4006a6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4006aa:	00cd      	.short	0x00cd
  4006ac:	00d300d0 	.word	0x00d300d0
  4006b0:	00d6      	.short	0x00d6
				sd_mmc_card->type |= CARD_TYPE_HC;
  4006b2:	4b94      	ldr	r3, [pc, #592]	; (400904 <sd_mmc_check+0x57c>)
  4006b4:	681a      	ldr	r2, [r3, #0]
  4006b6:	7bd3      	ldrb	r3, [r2, #15]
  4006b8:	f043 0308 	orr.w	r3, r3, #8
  4006bc:	73d3      	strb	r3, [r2, #15]
  4006be:	e7d0      	b.n	400662 <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4006c0:	2312      	movs	r3, #18
  4006c2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4006c6:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4006ca:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4006ce:	498f      	ldr	r1, [pc, #572]	; (40090c <sd_mmc_check+0x584>)
  4006d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4006d8:	fb03 f301 	mul.w	r3, r3, r1
  4006dc:	498c      	ldr	r1, [pc, #560]	; (400910 <sd_mmc_check+0x588>)
  4006de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4006e2:	fb03 f301 	mul.w	r3, r3, r1
  4006e6:	6013      	str	r3, [r2, #0]
  4006e8:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006ea:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ec:	7e13      	ldrb	r3, [r2, #24]
  4006ee:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006f0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4006f4:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4006f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4006fc:	f640 71ff 	movw	r1, #4095	; 0xfff
  400700:	428b      	cmp	r3, r1
  400702:	d00f      	beq.n	400724 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400704:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400706:	7ed1      	ldrb	r1, [r2, #27]
  400708:	0049      	lsls	r1, r1, #1
  40070a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40070e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400710:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400714:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400716:	408b      	lsls	r3, r1
  400718:	7dd1      	ldrb	r1, [r2, #23]
  40071a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40071e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400720:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400722:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400724:	8991      	ldrh	r1, [r2, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400726:	0409      	lsls	r1, r1, #16
  400728:	f243 1007 	movw	r0, #12551	; 0x3107
  40072c:	4b74      	ldr	r3, [pc, #464]	; (400900 <sd_mmc_check+0x578>)
  40072e:	4798      	blx	r3
  400730:	2800      	cmp	r0, #0
  400732:	f43f ae51 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400736:	4b73      	ldr	r3, [pc, #460]	; (400904 <sd_mmc_check+0x57c>)
  400738:	681b      	ldr	r3, [r3, #0]
  40073a:	7c1b      	ldrb	r3, [r3, #16]
  40073c:	2b3f      	cmp	r3, #63	; 0x3f
  40073e:	f240 8097 	bls.w	400870 <sd_mmc_check+0x4e8>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400742:	2100      	movs	r1, #0
  400744:	9100      	str	r1, [sp, #0]
  400746:	2301      	movs	r3, #1
  400748:	f44f 7200 	mov.w	r2, #512	; 0x200
  40074c:	4871      	ldr	r0, [pc, #452]	; (400914 <sd_mmc_check+0x58c>)
  40074e:	4d72      	ldr	r5, [pc, #456]	; (400918 <sd_mmc_check+0x590>)
  400750:	47a8      	blx	r5
  400752:	2800      	cmp	r0, #0
  400754:	f43f ae40 	beq.w	4003d8 <sd_mmc_check+0x50>
  400758:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40075a:	4e70      	ldr	r6, [pc, #448]	; (40091c <sd_mmc_check+0x594>)
  40075c:	a803      	add	r0, sp, #12
  40075e:	47b0      	blx	r6
  400760:	2800      	cmp	r0, #0
  400762:	f43f ae39 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400766:	3501      	adds	r5, #1
  400768:	b2ad      	uxth	r5, r5
  40076a:	2d32      	cmp	r5, #50	; 0x32
  40076c:	d1f6      	bne.n	40075c <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  40076e:	9e03      	ldr	r6, [sp, #12]
  400770:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400774:	4b63      	ldr	r3, [pc, #396]	; (400904 <sd_mmc_check+0x57c>)
  400776:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400778:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40077a:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40077c:	7e1b      	ldrb	r3, [r3, #24]
  40077e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400780:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400784:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400788:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40078c:	f640 72ff 	movw	r2, #4095	; 0xfff
  400790:	4293      	cmp	r3, r2
  400792:	d10e      	bne.n	4007b2 <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400794:	4f61      	ldr	r7, [pc, #388]	; (40091c <sd_mmc_check+0x594>)
  400796:	a804      	add	r0, sp, #16
  400798:	47b8      	blx	r7
  40079a:	2800      	cmp	r0, #0
  40079c:	f43f ae1c 	beq.w	4003d8 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4007a0:	3501      	adds	r5, #1
  4007a2:	b2ad      	uxth	r5, r5
  4007a4:	2d35      	cmp	r5, #53	; 0x35
  4007a6:	d9f6      	bls.n	400796 <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4007a8:	4b56      	ldr	r3, [pc, #344]	; (400904 <sd_mmc_check+0x57c>)
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	9b04      	ldr	r3, [sp, #16]
  4007ae:	085b      	lsrs	r3, r3, #1
  4007b0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4007b2:	4f5a      	ldr	r7, [pc, #360]	; (40091c <sd_mmc_check+0x594>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4007b4:	2d7f      	cmp	r5, #127	; 0x7f
  4007b6:	d951      	bls.n	40085c <sd_mmc_check+0x4d4>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4007b8:	4b59      	ldr	r3, [pc, #356]	; (400920 <sd_mmc_check+0x598>)
  4007ba:	7818      	ldrb	r0, [r3, #0]
  4007bc:	4b59      	ldr	r3, [pc, #356]	; (400924 <sd_mmc_check+0x59c>)
  4007be:	4798      	blx	r3
  4007c0:	2803      	cmp	r0, #3
  4007c2:	d91d      	bls.n	400800 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4007c4:	4b56      	ldr	r3, [pc, #344]	; (400920 <sd_mmc_check+0x598>)
  4007c6:	7818      	ldrb	r0, [r3, #0]
  4007c8:	4b56      	ldr	r3, [pc, #344]	; (400924 <sd_mmc_check+0x59c>)
  4007ca:	4798      	blx	r3
  4007cc:	4605      	mov	r5, r0
	switch (bus_width) {
  4007ce:	2804      	cmp	r0, #4
  4007d0:	d04c      	beq.n	40086c <sd_mmc_check+0x4e4>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4007d2:	4b55      	ldr	r3, [pc, #340]	; (400928 <sd_mmc_check+0x5a0>)
  4007d4:	4955      	ldr	r1, [pc, #340]	; (40092c <sd_mmc_check+0x5a4>)
  4007d6:	2808      	cmp	r0, #8
  4007d8:	bf18      	it	ne
  4007da:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4007dc:	f243 1006 	movw	r0, #12550	; 0x3106
  4007e0:	4b47      	ldr	r3, [pc, #284]	; (400900 <sd_mmc_check+0x578>)
  4007e2:	4798      	blx	r3
  4007e4:	2800      	cmp	r0, #0
  4007e6:	f43f adf7 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007ea:	4b51      	ldr	r3, [pc, #324]	; (400930 <sd_mmc_check+0x5a8>)
  4007ec:	4798      	blx	r3
  4007ee:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007f2:	f47f adf1 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4007f6:	4b43      	ldr	r3, [pc, #268]	; (400904 <sd_mmc_check+0x57c>)
  4007f8:	681b      	ldr	r3, [r3, #0]
  4007fa:	745d      	strb	r5, [r3, #17]
			sd_mmc_configure_slot();
  4007fc:	4b4d      	ldr	r3, [pc, #308]	; (400934 <sd_mmc_check+0x5ac>)
  4007fe:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400800:	4b4d      	ldr	r3, [pc, #308]	; (400938 <sd_mmc_check+0x5b0>)
  400802:	4798      	blx	r3
  400804:	b1be      	cbz	r6, 400836 <sd_mmc_check+0x4ae>
  400806:	b1b0      	cbz	r0, 400836 <sd_mmc_check+0x4ae>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400808:	494c      	ldr	r1, [pc, #304]	; (40093c <sd_mmc_check+0x5b4>)
  40080a:	f243 1006 	movw	r0, #12550	; 0x3106
  40080e:	4b3c      	ldr	r3, [pc, #240]	; (400900 <sd_mmc_check+0x578>)
  400810:	4798      	blx	r3
  400812:	2800      	cmp	r0, #0
  400814:	f43f ade0 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400818:	4b45      	ldr	r3, [pc, #276]	; (400930 <sd_mmc_check+0x5a8>)
  40081a:	4798      	blx	r3
  40081c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400820:	f47f adda 	bne.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400824:	4b37      	ldr	r3, [pc, #220]	; (400904 <sd_mmc_check+0x57c>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2201      	movs	r2, #1
  40082a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  40082e:	4a44      	ldr	r2, [pc, #272]	; (400940 <sd_mmc_check+0x5b8>)
  400830:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400832:	4b40      	ldr	r3, [pc, #256]	; (400934 <sd_mmc_check+0x5ac>)
  400834:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400836:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400838:	f44f 7800 	mov.w	r8, #512	; 0x200
  40083c:	f241 1710 	movw	r7, #4368	; 0x1110
  400840:	4e2f      	ldr	r6, [pc, #188]	; (400900 <sd_mmc_check+0x578>)
  400842:	e01d      	b.n	400880 <sd_mmc_check+0x4f8>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400844:	2314      	movs	r3, #20
  400846:	7413      	strb	r3, [r2, #16]
  400848:	e73c      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40084a:	2322      	movs	r3, #34	; 0x22
  40084c:	7413      	strb	r3, [r2, #16]
  40084e:	e739      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400850:	2330      	movs	r3, #48	; 0x30
  400852:	7413      	strb	r3, [r2, #16]
  400854:	e736      	b.n	4006c4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400856:	2340      	movs	r3, #64	; 0x40
  400858:	7413      	strb	r3, [r2, #16]
  40085a:	e733      	b.n	4006c4 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  40085c:	a804      	add	r0, sp, #16
  40085e:	47b8      	blx	r7
  400860:	2800      	cmp	r0, #0
  400862:	f43f adb9 	beq.w	4003d8 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400866:	3501      	adds	r5, #1
  400868:	b2ad      	uxth	r5, r5
  40086a:	e7a3      	b.n	4007b4 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40086c:	4935      	ldr	r1, [pc, #212]	; (400944 <sd_mmc_check+0x5bc>)
  40086e:	e7b5      	b.n	4007dc <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  400870:	4b30      	ldr	r3, [pc, #192]	; (400934 <sd_mmc_check+0x5ac>)
  400872:	4798      	blx	r3
  400874:	e7df      	b.n	400836 <sd_mmc_check+0x4ae>
  400876:	3d01      	subs	r5, #1
	while (retry--) {
  400878:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  40087c:	f43f adac 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400880:	4641      	mov	r1, r8
  400882:	4638      	mov	r0, r7
  400884:	47b0      	blx	r6
  400886:	2800      	cmp	r0, #0
  400888:	d0f5      	beq.n	400876 <sd_mmc_check+0x4ee>
  40088a:	e10e      	b.n	400aaa <sd_mmc_check+0x722>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40088c:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40088e:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400890:	7e5a      	ldrb	r2, [r3, #25]
  400892:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400894:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  400898:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  40089a:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  40089e:	3201      	adds	r2, #1
  4008a0:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4008a2:	605a      	str	r2, [r3, #4]
  4008a4:	e600      	b.n	4004a8 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4008a6:	8999      	ldrh	r1, [r3, #12]
  4008a8:	0409      	lsls	r1, r1, #16
  4008aa:	f241 1037 	movw	r0, #4407	; 0x1137
  4008ae:	4b14      	ldr	r3, [pc, #80]	; (400900 <sd_mmc_check+0x578>)
  4008b0:	4798      	blx	r3
  4008b2:	2800      	cmp	r0, #0
  4008b4:	f43f ad90 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4008b8:	2301      	movs	r3, #1
  4008ba:	9300      	str	r3, [sp, #0]
  4008bc:	2208      	movs	r2, #8
  4008be:	2100      	movs	r1, #0
  4008c0:	4821      	ldr	r0, [pc, #132]	; (400948 <sd_mmc_check+0x5c0>)
  4008c2:	4d15      	ldr	r5, [pc, #84]	; (400918 <sd_mmc_check+0x590>)
  4008c4:	47a8      	blx	r5
  4008c6:	2800      	cmp	r0, #0
  4008c8:	f43f ad86 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4008cc:	2101      	movs	r1, #1
  4008ce:	a804      	add	r0, sp, #16
  4008d0:	4b1e      	ldr	r3, [pc, #120]	; (40094c <sd_mmc_check+0x5c4>)
  4008d2:	4798      	blx	r3
  4008d4:	2800      	cmp	r0, #0
  4008d6:	f43f ad7f 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4008da:	4b1d      	ldr	r3, [pc, #116]	; (400950 <sd_mmc_check+0x5c8>)
  4008dc:	4798      	blx	r3
  4008de:	2800      	cmp	r0, #0
  4008e0:	f43f ad7a 	beq.w	4003d8 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4008e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008e8:	f003 030f 	and.w	r3, r3, #15
  4008ec:	2b01      	cmp	r3, #1
  4008ee:	d036      	beq.n	40095e <sd_mmc_check+0x5d6>
  4008f0:	b383      	cbz	r3, 400954 <sd_mmc_check+0x5cc>
  4008f2:	2b02      	cmp	r3, #2
  4008f4:	d038      	beq.n	400968 <sd_mmc_check+0x5e0>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4008f6:	4b03      	ldr	r3, [pc, #12]	; (400904 <sd_mmc_check+0x57c>)
  4008f8:	681b      	ldr	r3, [r3, #0]
  4008fa:	2210      	movs	r2, #16
  4008fc:	741a      	strb	r2, [r3, #16]
  4008fe:	e5e4      	b.n	4004ca <sd_mmc_check+0x142>
  400900:	00400e71 	.word	0x00400e71
  400904:	20400a08 	.word	0x20400a08
  400908:	0040030d 	.word	0x0040030d
  40090c:	0040b434 	.word	0x0040b434
  400910:	0040b3f4 	.word	0x0040b3f4
  400914:	00081108 	.word	0x00081108
  400918:	00400ecd 	.word	0x00400ecd
  40091c:	00400f95 	.word	0x00400f95
  400920:	20400a0d 	.word	0x20400a0d
  400924:	00400d79 	.word	0x00400d79
  400928:	01b70000 	.word	0x01b70000
  40092c:	01b70200 	.word	0x01b70200
  400930:	00400e95 	.word	0x00400e95
  400934:	004001ad 	.word	0x004001ad
  400938:	00400d83 	.word	0x00400d83
  40093c:	03b90100 	.word	0x03b90100
  400940:	03197500 	.word	0x03197500
  400944:	01b70100 	.word	0x01b70100
  400948:	00081133 	.word	0x00081133
  40094c:	00401009 	.word	0x00401009
  400950:	004010d5 	.word	0x004010d5
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400954:	4b9b      	ldr	r3, [pc, #620]	; (400bc4 <sd_mmc_check+0x83c>)
  400956:	681b      	ldr	r3, [r3, #0]
  400958:	2210      	movs	r2, #16
  40095a:	741a      	strb	r2, [r3, #16]
  40095c:	e5b5      	b.n	4004ca <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40095e:	4b99      	ldr	r3, [pc, #612]	; (400bc4 <sd_mmc_check+0x83c>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	221a      	movs	r2, #26
  400964:	741a      	strb	r2, [r3, #16]
  400966:	e5b0      	b.n	4004ca <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400968:	f89d 3012 	ldrb.w	r3, [sp, #18]
  40096c:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  40096e:	4b95      	ldr	r3, [pc, #596]	; (400bc4 <sd_mmc_check+0x83c>)
  400970:	681b      	ldr	r3, [r3, #0]
  400972:	bf14      	ite	ne
  400974:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400976:	2220      	moveq	r2, #32
  400978:	741a      	strb	r2, [r3, #16]
  40097a:	e5a6      	b.n	4004ca <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  40097c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400980:	2b00      	cmp	r3, #0
  400982:	f43f ad29 	beq.w	4003d8 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400986:	3302      	adds	r3, #2
  400988:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  40098a:	f509 7380 	add.w	r3, r9, #256	; 0x100
  40098e:	429e      	cmp	r6, r3
  400990:	f63f ad22 	bhi.w	4003d8 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400994:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400996:	ab04      	add	r3, sp, #16
  400998:	442b      	add	r3, r5
  40099a:	9300      	str	r3, [sp, #0]
  40099c:	4643      	mov	r3, r8
  40099e:	1972      	adds	r2, r6, r5
  4009a0:	4641      	mov	r1, r8
  4009a2:	4640      	mov	r0, r8
  4009a4:	47b8      	blx	r7
  4009a6:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  4009a8:	2d03      	cmp	r5, #3
  4009aa:	d1f4      	bne.n	400996 <sd_mmc_check+0x60e>
		if (buf[0] == SDIO_CISTPL_END) {
  4009ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009b0:	2bff      	cmp	r3, #255	; 0xff
  4009b2:	f43f ad11 	beq.w	4003d8 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4009b6:	2b22      	cmp	r3, #34	; 0x22
  4009b8:	d1e0      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d1dc      	bne.n	40097c <sd_mmc_check+0x5f4>
  4009c2:	ad04      	add	r5, sp, #16
  4009c4:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4009c8:	f04f 0800 	mov.w	r8, #0
  4009cc:	4f7e      	ldr	r7, [pc, #504]	; (400bc8 <sd_mmc_check+0x840>)
  4009ce:	9500      	str	r5, [sp, #0]
  4009d0:	4643      	mov	r3, r8
  4009d2:	4632      	mov	r2, r6
  4009d4:	4641      	mov	r1, r8
  4009d6:	4640      	mov	r0, r8
  4009d8:	47b8      	blx	r7
		addr_new++;
  4009da:	3601      	adds	r6, #1
  4009dc:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  4009de:	454e      	cmp	r6, r9
  4009e0:	d1f5      	bne.n	4009ce <sd_mmc_check+0x646>
	tplfe_max_tran_speed = buf[5];
  4009e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4009e6:	2b32      	cmp	r3, #50	; 0x32
  4009e8:	bf28      	it	cs
  4009ea:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  4009ec:	4a75      	ldr	r2, [pc, #468]	; (400bc4 <sd_mmc_check+0x83c>)
  4009ee:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4009f0:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4009f4:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4009f8:	4974      	ldr	r1, [pc, #464]	; (400bcc <sd_mmc_check+0x844>)
  4009fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a02:	fb03 f301 	mul.w	r3, r3, r1
  400a06:	4972      	ldr	r1, [pc, #456]	; (400bd0 <sd_mmc_check+0x848>)
  400a08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400a0c:	fb03 f301 	mul.w	r3, r3, r1
  400a10:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400a12:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x84c>)
  400a14:	7818      	ldrb	r0, [r3, #0]
  400a16:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x850>)
  400a18:	4798      	blx	r3
  400a1a:	2803      	cmp	r0, #3
  400a1c:	d922      	bls.n	400a64 <sd_mmc_check+0x6dc>
		if (IS_SDIO()) {
  400a1e:	4b69      	ldr	r3, [pc, #420]	; (400bc4 <sd_mmc_check+0x83c>)
  400a20:	681b      	ldr	r3, [r3, #0]
  400a22:	7bdb      	ldrb	r3, [r3, #15]
  400a24:	f013 0f04 	tst.w	r3, #4
  400a28:	d146      	bne.n	400ab8 <sd_mmc_check+0x730>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a2a:	4b66      	ldr	r3, [pc, #408]	; (400bc4 <sd_mmc_check+0x83c>)
  400a2c:	681b      	ldr	r3, [r3, #0]
  400a2e:	7bda      	ldrb	r2, [r3, #15]
  400a30:	f012 0f01 	tst.w	r2, #1
  400a34:	d014      	beq.n	400a60 <sd_mmc_check+0x6d8>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a36:	8999      	ldrh	r1, [r3, #12]
  400a38:	0409      	lsls	r1, r1, #16
  400a3a:	f241 1037 	movw	r0, #4407	; 0x1137
  400a3e:	4b67      	ldr	r3, [pc, #412]	; (400bdc <sd_mmc_check+0x854>)
  400a40:	4798      	blx	r3
  400a42:	2800      	cmp	r0, #0
  400a44:	f43f acc8 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400a48:	2102      	movs	r1, #2
  400a4a:	f241 1006 	movw	r0, #4358	; 0x1106
  400a4e:	4b63      	ldr	r3, [pc, #396]	; (400bdc <sd_mmc_check+0x854>)
  400a50:	4798      	blx	r3
  400a52:	2800      	cmp	r0, #0
  400a54:	f43f acc0 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400a58:	4b5a      	ldr	r3, [pc, #360]	; (400bc4 <sd_mmc_check+0x83c>)
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	2204      	movs	r2, #4
  400a5e:	745a      	strb	r2, [r3, #17]
		sd_mmc_configure_slot();
  400a60:	4b5f      	ldr	r3, [pc, #380]	; (400be0 <sd_mmc_check+0x858>)
  400a62:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400a64:	4b5f      	ldr	r3, [pc, #380]	; (400be4 <sd_mmc_check+0x85c>)
  400a66:	4798      	blx	r3
  400a68:	b180      	cbz	r0, 400a8c <sd_mmc_check+0x704>
		if (IS_SDIO()) {
  400a6a:	4b56      	ldr	r3, [pc, #344]	; (400bc4 <sd_mmc_check+0x83c>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	7bdb      	ldrb	r3, [r3, #15]
  400a70:	f013 0f04 	tst.w	r3, #4
  400a74:	d141      	bne.n	400afa <sd_mmc_check+0x772>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a76:	4b53      	ldr	r3, [pc, #332]	; (400bc4 <sd_mmc_check+0x83c>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	7bda      	ldrb	r2, [r3, #15]
  400a7c:	f012 0f01 	tst.w	r2, #1
  400a80:	d002      	beq.n	400a88 <sd_mmc_check+0x700>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a82:	7c1b      	ldrb	r3, [r3, #16]
  400a84:	2b10      	cmp	r3, #16
  400a86:	d85e      	bhi.n	400b46 <sd_mmc_check+0x7be>
		sd_mmc_configure_slot();
  400a88:	4b55      	ldr	r3, [pc, #340]	; (400be0 <sd_mmc_check+0x858>)
  400a8a:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a8c:	4b4d      	ldr	r3, [pc, #308]	; (400bc4 <sd_mmc_check+0x83c>)
  400a8e:	681b      	ldr	r3, [r3, #0]
  400a90:	7bdb      	ldrb	r3, [r3, #15]
  400a92:	f013 0f01 	tst.w	r3, #1
  400a96:	d008      	beq.n	400aaa <sd_mmc_check+0x722>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400a98:	f44f 7100 	mov.w	r1, #512	; 0x200
  400a9c:	f241 1010 	movw	r0, #4368	; 0x1110
  400aa0:	4b4e      	ldr	r3, [pc, #312]	; (400bdc <sd_mmc_check+0x854>)
  400aa2:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400aa4:	2800      	cmp	r0, #0
  400aa6:	f43f ac97 	beq.w	4003d8 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400aaa:	4b46      	ldr	r3, [pc, #280]	; (400bc4 <sd_mmc_check+0x83c>)
  400aac:	681b      	ldr	r3, [r3, #0]
  400aae:	2200      	movs	r2, #0
  400ab0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400ab2:	4b4d      	ldr	r3, [pc, #308]	; (400be8 <sd_mmc_check+0x860>)
  400ab4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400ab6:	e471      	b.n	40039c <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400ab8:	ab04      	add	r3, sp, #16
  400aba:	9300      	str	r3, [sp, #0]
  400abc:	2300      	movs	r3, #0
  400abe:	2208      	movs	r2, #8
  400ac0:	4619      	mov	r1, r3
  400ac2:	4618      	mov	r0, r3
  400ac4:	4d40      	ldr	r5, [pc, #256]	; (400bc8 <sd_mmc_check+0x840>)
  400ac6:	47a8      	blx	r5
  400ac8:	2800      	cmp	r0, #0
  400aca:	f43f ac85 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400ace:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400ad2:	2b00      	cmp	r3, #0
  400ad4:	daa9      	bge.n	400a2a <sd_mmc_check+0x6a2>
	u8_value = SDIO_BUSWIDTH_4B;
  400ad6:	ab14      	add	r3, sp, #80	; 0x50
  400ad8:	2202      	movs	r2, #2
  400ada:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400ade:	9300      	str	r3, [sp, #0]
  400ae0:	2301      	movs	r3, #1
  400ae2:	2207      	movs	r2, #7
  400ae4:	2100      	movs	r1, #0
  400ae6:	4618      	mov	r0, r3
  400ae8:	47a8      	blx	r5
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ac74 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400af0:	4b34      	ldr	r3, [pc, #208]	; (400bc4 <sd_mmc_check+0x83c>)
  400af2:	681b      	ldr	r3, [r3, #0]
  400af4:	2204      	movs	r2, #4
  400af6:	745a      	strb	r2, [r3, #17]
  400af8:	e797      	b.n	400a2a <sd_mmc_check+0x6a2>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400afa:	ab04      	add	r3, sp, #16
  400afc:	9300      	str	r3, [sp, #0]
  400afe:	2300      	movs	r3, #0
  400b00:	2213      	movs	r2, #19
  400b02:	4619      	mov	r1, r3
  400b04:	4618      	mov	r0, r3
  400b06:	4d30      	ldr	r5, [pc, #192]	; (400bc8 <sd_mmc_check+0x840>)
  400b08:	47a8      	blx	r5
  400b0a:	2800      	cmp	r0, #0
  400b0c:	f43f ac64 	beq.w	4003d8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400b10:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400b14:	f013 0f01 	tst.w	r3, #1
  400b18:	d0ad      	beq.n	400a76 <sd_mmc_check+0x6ee>
	u8_value = SDIO_EHS;
  400b1a:	ab14      	add	r3, sp, #80	; 0x50
  400b1c:	2202      	movs	r2, #2
  400b1e:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400b22:	9300      	str	r3, [sp, #0]
  400b24:	2301      	movs	r3, #1
  400b26:	2213      	movs	r2, #19
  400b28:	2100      	movs	r1, #0
  400b2a:	4618      	mov	r0, r3
  400b2c:	47a8      	blx	r5
  400b2e:	2800      	cmp	r0, #0
  400b30:	f43f ac52 	beq.w	4003d8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400b34:	4b23      	ldr	r3, [pc, #140]	; (400bc4 <sd_mmc_check+0x83c>)
  400b36:	681b      	ldr	r3, [r3, #0]
  400b38:	2201      	movs	r2, #1
  400b3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400b3e:	681a      	ldr	r2, [r3, #0]
  400b40:	0052      	lsls	r2, r2, #1
  400b42:	601a      	str	r2, [r3, #0]
  400b44:	e797      	b.n	400a76 <sd_mmc_check+0x6ee>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400b46:	2540      	movs	r5, #64	; 0x40
  400b48:	462a      	mov	r2, r5
  400b4a:	2100      	movs	r1, #0
  400b4c:	a804      	add	r0, sp, #16
  400b4e:	4b27      	ldr	r3, [pc, #156]	; (400bec <sd_mmc_check+0x864>)
  400b50:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400b52:	2301      	movs	r3, #1
  400b54:	9300      	str	r3, [sp, #0]
  400b56:	462a      	mov	r2, r5
  400b58:	4925      	ldr	r1, [pc, #148]	; (400bf0 <sd_mmc_check+0x868>)
  400b5a:	4826      	ldr	r0, [pc, #152]	; (400bf4 <sd_mmc_check+0x86c>)
  400b5c:	4d26      	ldr	r5, [pc, #152]	; (400bf8 <sd_mmc_check+0x870>)
  400b5e:	47a8      	blx	r5
  400b60:	2800      	cmp	r0, #0
  400b62:	f43f ac39 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400b66:	2101      	movs	r1, #1
  400b68:	a804      	add	r0, sp, #16
  400b6a:	4b24      	ldr	r3, [pc, #144]	; (400bfc <sd_mmc_check+0x874>)
  400b6c:	4798      	blx	r3
  400b6e:	2800      	cmp	r0, #0
  400b70:	f43f ac32 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400b74:	4b22      	ldr	r3, [pc, #136]	; (400c00 <sd_mmc_check+0x878>)
  400b76:	4798      	blx	r3
  400b78:	2800      	cmp	r0, #0
  400b7a:	f43f ac2d 	beq.w	4003d8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400b7e:	4b21      	ldr	r3, [pc, #132]	; (400c04 <sd_mmc_check+0x87c>)
  400b80:	4798      	blx	r3
  400b82:	f010 0f80 	tst.w	r0, #128	; 0x80
  400b86:	f47f ac27 	bne.w	4003d8 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400b8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400b8e:	f003 030f 	and.w	r3, r3, #15
  400b92:	2b0f      	cmp	r3, #15
  400b94:	f43f af78 	beq.w	400a88 <sd_mmc_check+0x700>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400b98:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400b9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ba0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ba4:	f47f ac18 	bne.w	4003d8 <sd_mmc_check+0x50>
	driver_send_clock();
  400ba8:	4b17      	ldr	r3, [pc, #92]	; (400c08 <sd_mmc_check+0x880>)
  400baa:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400bac:	4b05      	ldr	r3, [pc, #20]	; (400bc4 <sd_mmc_check+0x83c>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	2201      	movs	r2, #1
  400bb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400bb6:	681a      	ldr	r2, [r3, #0]
  400bb8:	0052      	lsls	r2, r2, #1
  400bba:	601a      	str	r2, [r3, #0]
  400bbc:	e764      	b.n	400a88 <sd_mmc_check+0x700>
	*v2 = 0;
  400bbe:	f04f 0900 	mov.w	r9, #0
  400bc2:	e41b      	b.n	4003fc <sd_mmc_check+0x74>
  400bc4:	20400a08 	.word	0x20400a08
  400bc8:	004002d5 	.word	0x004002d5
  400bcc:	0040b434 	.word	0x0040b434
  400bd0:	0040b450 	.word	0x0040b450
  400bd4:	20400a0d 	.word	0x20400a0d
  400bd8:	00400d79 	.word	0x00400d79
  400bdc:	00400e71 	.word	0x00400e71
  400be0:	004001ad 	.word	0x004001ad
  400be4:	00400d83 	.word	0x00400d83
  400be8:	00400341 	.word	0x00400341
  400bec:	004051f5 	.word	0x004051f5
  400bf0:	80ffff01 	.word	0x80ffff01
  400bf4:	00081106 	.word	0x00081106
  400bf8:	00400ecd 	.word	0x00400ecd
  400bfc:	00401009 	.word	0x00401009
  400c00:	004010d5 	.word	0x004010d5
  400c04:	00400e95 	.word	0x00400e95
  400c08:	00400e4f 	.word	0x00400e4f

00400c0c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c0c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c0e:	4b05      	ldr	r3, [pc, #20]	; (400c24 <sd_mmc_get_type+0x18>)
  400c10:	4798      	blx	r3
  400c12:	b108      	cbz	r0, 400c18 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400c14:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c16:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c18:	4b03      	ldr	r3, [pc, #12]	; (400c28 <sd_mmc_get_type+0x1c>)
  400c1a:	4798      	blx	r3
	return sd_mmc_card->type;
  400c1c:	4b03      	ldr	r3, [pc, #12]	; (400c2c <sd_mmc_get_type+0x20>)
  400c1e:	681b      	ldr	r3, [r3, #0]
  400c20:	7bd8      	ldrb	r0, [r3, #15]
  400c22:	bd08      	pop	{r3, pc}
  400c24:	004001d9 	.word	0x004001d9
  400c28:	00400341 	.word	0x00400341
  400c2c:	20400a08 	.word	0x20400a08

00400c30 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400c30:	b510      	push	{r4, lr}
  400c32:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400c34:	4b0f      	ldr	r3, [pc, #60]	; (400c74 <sd_mmc_test_unit_ready+0x44>)
  400c36:	4798      	blx	r3
  400c38:	2801      	cmp	r0, #1
  400c3a:	d018      	beq.n	400c6e <sd_mmc_test_unit_ready+0x3e>
  400c3c:	b118      	cbz	r0, 400c46 <sd_mmc_test_unit_ready+0x16>
  400c3e:	2802      	cmp	r0, #2
  400c40:	d010      	beq.n	400c64 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400c42:	2001      	movs	r0, #1
  400c44:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400c46:	4b0c      	ldr	r3, [pc, #48]	; (400c78 <sd_mmc_test_unit_ready+0x48>)
  400c48:	5d1b      	ldrb	r3, [r3, r4]
  400c4a:	b10b      	cbz	r3, 400c50 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400c4c:	2002      	movs	r0, #2
	}
}
  400c4e:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400c50:	4620      	mov	r0, r4
  400c52:	4b0a      	ldr	r3, [pc, #40]	; (400c7c <sd_mmc_test_unit_ready+0x4c>)
  400c54:	4798      	blx	r3
  400c56:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400c5a:	2800      	cmp	r0, #0
  400c5c:	bf14      	ite	ne
  400c5e:	2000      	movne	r0, #0
  400c60:	2002      	moveq	r0, #2
  400c62:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400c64:	2200      	movs	r2, #0
  400c66:	4b04      	ldr	r3, [pc, #16]	; (400c78 <sd_mmc_test_unit_ready+0x48>)
  400c68:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400c6a:	2002      	movs	r0, #2
  400c6c:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400c6e:	2003      	movs	r0, #3
  400c70:	bd10      	pop	{r4, pc}
  400c72:	bf00      	nop
  400c74:	00400389 	.word	0x00400389
  400c78:	20400a10 	.word	0x20400a10
  400c7c:	00400c0d 	.word	0x00400c0d

00400c80 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400c80:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c86:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400c88:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400c8a:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400c8c:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400c8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400c90:	2680      	movs	r6, #128	; 0x80
  400c92:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400c94:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400c96:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400c98:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400c9a:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400c9c:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  400c9e:	2200      	movs	r2, #0
  400ca0:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400ca2:	2205      	movs	r2, #5
  400ca4:	601a      	str	r2, [r3, #0]
}
  400ca6:	bc70      	pop	{r4, r5, r6}
  400ca8:	4770      	bx	lr
	...

00400cac <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400cac:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400cae:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400cb2:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400cb4:	f411 7f80 	tst.w	r1, #256	; 0x100
  400cb8:	d004      	beq.n	400cc4 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400cba:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400cbe:	d00e      	beq.n	400cde <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400cc0:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400cc4:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  400cc8:	bf18      	it	ne
  400cca:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  400cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400cd2:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  400cd4:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400cd6:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  400cd8:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  400cdc:	e00d      	b.n	400cfa <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  400cde:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  400ce2:	bf14      	ite	ne
  400ce4:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  400ce8:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  400cec:	e7ea      	b.n	400cc4 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400cee:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400cf2:	d10c      	bne.n	400d0e <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  400cf4:	f013 0f01 	tst.w	r3, #1
  400cf8:	d10d      	bne.n	400d16 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  400cfa:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  400cfc:	2a00      	cmp	r2, #0
  400cfe:	d0f6      	beq.n	400cee <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400d00:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400d04:	d0f6      	beq.n	400cf4 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  400d06:	4b10      	ldr	r3, [pc, #64]	; (400d48 <hsmci_send_cmd_execute+0x9c>)
  400d08:	4798      	blx	r3
				return false;
  400d0a:	2000      	movs	r0, #0
  400d0c:	bd08      	pop	{r3, pc}
				hsmci_reset();
  400d0e:	4b0e      	ldr	r3, [pc, #56]	; (400d48 <hsmci_send_cmd_execute+0x9c>)
  400d10:	4798      	blx	r3
				return false;
  400d12:	2000      	movs	r0, #0
  400d14:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  400d16:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400d1a:	d103      	bne.n	400d24 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  400d1c:	2001      	movs	r0, #1
  400d1e:	bd08      	pop	{r3, pc}
	return true;
  400d20:	2001      	movs	r0, #1
  400d22:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  400d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400d2a:	f04f 32ff 	mov.w	r2, #4294967295
  400d2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  400d32:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400d36:	2b20      	cmp	r3, #32
  400d38:	d0f2      	beq.n	400d20 <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  400d3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  400d3c:	3a01      	subs	r2, #1
  400d3e:	d1f8      	bne.n	400d32 <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  400d40:	4b01      	ldr	r3, [pc, #4]	; (400d48 <hsmci_send_cmd_execute+0x9c>)
  400d42:	4798      	blx	r3
			return false;
  400d44:	2000      	movs	r0, #0
  400d46:	bd08      	pop	{r3, pc}
  400d48:	00400c81 	.word	0x00400c81

00400d4c <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  400d4c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  400d4e:	2012      	movs	r0, #18
  400d50:	4c08      	ldr	r4, [pc, #32]	; (400d74 <hsmci_init+0x28>)
  400d52:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  400d54:	203a      	movs	r0, #58	; 0x3a
  400d56:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  400d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d5c:	2272      	movs	r2, #114	; 0x72
  400d5e:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  400d60:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  400d62:	2211      	movs	r2, #17
  400d64:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  400d66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400d6a:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  400d6c:	2205      	movs	r2, #5
  400d6e:	601a      	str	r2, [r3, #0]
  400d70:	bd10      	pop	{r4, pc}
  400d72:	bf00      	nop
  400d74:	00404669 	.word	0x00404669

00400d78 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  400d78:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  400d7a:	bf0c      	ite	eq
  400d7c:	2004      	moveq	r0, #4
  400d7e:	2000      	movne	r0, #0
  400d80:	4770      	bx	lr

00400d82 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  400d82:	2001      	movs	r0, #1
  400d84:	4770      	bx	lr
	...

00400d88 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  400d88:	b37b      	cbz	r3, 400dea <hsmci_select_device+0x62>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  400d8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400d8e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400d94:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  400d96:	4b2b      	ldr	r3, [pc, #172]	; (400e44 <hsmci_select_device+0xbc>)
  400d98:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  400d9c:	d337      	bcc.n	400e0e <hsmci_select_device+0x86>
{
  400d9e:	b410      	push	{r4}
		div = (mck / speed) - 2;
  400da0:	4829      	ldr	r0, [pc, #164]	; (400e48 <hsmci_select_device+0xc0>)
  400da2:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  400da6:	fb01 0113 	mls	r1, r1, r3, r0
  400daa:	bb29      	cbnz	r1, 400df8 <hsmci_select_device+0x70>
		div = (mck / speed) - 2;
  400dac:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400dae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400db2:	6848      	ldr	r0, [r1, #4]
  400db4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400db8:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400dba:	684c      	ldr	r4, [r1, #4]
  400dbc:	f3c3 0047 	ubfx	r0, r3, #1, #8
  400dc0:	4320      	orrs	r0, r4
  400dc2:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  400dc4:	f013 0f01 	tst.w	r3, #1
  400dc8:	d018      	beq.n	400dfc <hsmci_select_device+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  400dca:	684b      	ldr	r3, [r1, #4]
  400dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400dd0:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  400dd2:	2a04      	cmp	r2, #4
  400dd4:	d019      	beq.n	400e0a <hsmci_select_device+0x82>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  400dd6:	2a08      	cmp	r2, #8
  400dd8:	bf0c      	ite	eq
  400dda:	22c0      	moveq	r2, #192	; 0xc0
  400ddc:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  400dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400de2:	60da      	str	r2, [r3, #12]
}
  400de4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400de8:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  400dea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400dee:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400df4:	6543      	str	r3, [r0, #84]	; 0x54
  400df6:	e7ce      	b.n	400d96 <hsmci_select_device+0xe>
			div++;
  400df8:	3b01      	subs	r3, #1
  400dfa:	e7d8      	b.n	400dae <hsmci_select_device+0x26>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  400dfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400e00:	684b      	ldr	r3, [r1, #4]
  400e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400e06:	604b      	str	r3, [r1, #4]
  400e08:	e7e3      	b.n	400dd2 <hsmci_select_device+0x4a>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  400e0a:	2280      	movs	r2, #128	; 0x80
  400e0c:	e7e7      	b.n	400dde <hsmci_select_device+0x56>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e12:	6859      	ldr	r1, [r3, #4]
  400e14:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  400e18:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400e1a:	6859      	ldr	r1, [r3, #4]
  400e1c:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  400e1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400e22:	684b      	ldr	r3, [r1, #4]
  400e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400e28:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  400e2a:	2a04      	cmp	r2, #4
  400e2c:	d007      	beq.n	400e3e <hsmci_select_device+0xb6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  400e2e:	2a08      	cmp	r2, #8
  400e30:	bf0c      	ite	eq
  400e32:	22c0      	moveq	r2, #192	; 0xc0
  400e34:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  400e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e3a:	60da      	str	r2, [r3, #12]
  400e3c:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  400e3e:	2280      	movs	r2, #128	; 0x80
  400e40:	e7f9      	b.n	400e36 <hsmci_select_device+0xae>
  400e42:	bf00      	nop
  400e44:	08f0d17f 	.word	0x08f0d17f
  400e48:	08f0d180 	.word	0x08f0d180

00400e4c <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  400e4c:	4770      	bx	lr

00400e4e <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e52:	685a      	ldr	r2, [r3, #4]
  400e54:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400e58:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  400e5a:	2200      	movs	r2, #0
  400e5c:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  400e5e:	f44f 6210 	mov.w	r2, #2304	; 0x900
  400e62:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  400e64:	461a      	mov	r2, r3
  400e66:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400e68:	f013 0f01 	tst.w	r3, #1
  400e6c:	d0fb      	beq.n	400e66 <hsmci_send_clock+0x18>
}
  400e6e:	4770      	bx	lr

00400e70 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  400e70:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e76:	685a      	ldr	r2, [r3, #4]
  400e78:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400e7c:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  400e7e:	2400      	movs	r4, #0
  400e80:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  400e82:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  400e84:	460a      	mov	r2, r1
  400e86:	4601      	mov	r1, r0
  400e88:	4620      	mov	r0, r4
  400e8a:	4b01      	ldr	r3, [pc, #4]	; (400e90 <hsmci_send_cmd+0x20>)
  400e8c:	4798      	blx	r3
}
  400e8e:	bd10      	pop	{r4, pc}
  400e90:	00400cad 	.word	0x00400cad

00400e94 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  400e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e98:	6a18      	ldr	r0, [r3, #32]
}
  400e9a:	4770      	bx	lr

00400e9c <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  400e9c:	b410      	push	{r4}
  400e9e:	1d03      	adds	r3, r0, #4
  400ea0:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  400ea2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400ea6:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  400ea8:	0e11      	lsrs	r1, r2, #24
  400eaa:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  400eae:	0c11      	lsrs	r1, r2, #16
  400eb0:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  400eb4:	0a11      	lsrs	r1, r2, #8
  400eb6:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  400eba:	f803 2c01 	strb.w	r2, [r3, #-1]
  400ebe:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  400ec0:	4283      	cmp	r3, r0
  400ec2:	d1f0      	bne.n	400ea6 <hsmci_get_response_128+0xa>
		response++;
	}
}
  400ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ec8:	4770      	bx	lr
	...

00400ecc <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  400ecc:	b570      	push	{r4, r5, r6, lr}
  400ece:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  400ed2:	b384      	cbz	r4, 400f36 <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  400ed4:	f44f 7580 	mov.w	r5, #256	; 0x100
  400ed8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400edc:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  400ede:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400ee2:	686c      	ldr	r4, [r5, #4]
  400ee4:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  400ee8:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  400eea:	f012 0f03 	tst.w	r2, #3
  400eee:	d027      	beq.n	400f40 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  400ef0:	686c      	ldr	r4, [r5, #4]
  400ef2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  400ef6:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  400ef8:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  400efc:	2c00      	cmp	r4, #0
  400efe:	bf14      	ite	ne
  400f00:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  400f04:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  400f08:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400f0c:	d11f      	bne.n	400f4e <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  400f0e:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  400f12:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400f16:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  400f18:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  400f1c:	d12b      	bne.n	400f76 <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  400f1e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  400f22:	d12b      	bne.n	400f7c <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  400f24:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400f28:	d118      	bne.n	400f5c <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  400f2a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  400f2e:	bf18      	it	ne
  400f30:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  400f34:	e012      	b.n	400f5c <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  400f36:	2500      	movs	r5, #0
  400f38:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400f3c:	6525      	str	r5, [r4, #80]	; 0x50
  400f3e:	e7ce      	b.n	400ede <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  400f40:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400f44:	686c      	ldr	r4, [r5, #4]
  400f46:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  400f4a:	606c      	str	r4, [r5, #4]
  400f4c:	e7d4      	b.n	400ef8 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  400f4e:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  400f52:	f3c2 0508 	ubfx	r5, r2, #0, #9
  400f56:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400f5a:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  400f5c:	2600      	movs	r6, #0
  400f5e:	4d09      	ldr	r5, [pc, #36]	; (400f84 <hsmci_adtc_start+0xb8>)
  400f60:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  400f62:	4d09      	ldr	r5, [pc, #36]	; (400f88 <hsmci_adtc_start+0xbc>)
  400f64:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  400f66:	4a09      	ldr	r2, [pc, #36]	; (400f8c <hsmci_adtc_start+0xc0>)
  400f68:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  400f6a:	460a      	mov	r2, r1
  400f6c:	4601      	mov	r1, r0
  400f6e:	4620      	mov	r0, r4
  400f70:	4b07      	ldr	r3, [pc, #28]	; (400f90 <hsmci_adtc_start+0xc4>)
  400f72:	4798      	blx	r3
}
  400f74:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  400f76:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  400f7a:	e7ef      	b.n	400f5c <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  400f7c:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  400f80:	e7ec      	b.n	400f5c <hsmci_adtc_start+0x90>
  400f82:	bf00      	nop
  400f84:	20400a18 	.word	0x20400a18
  400f88:	20400a12 	.word	0x20400a12
  400f8c:	20400a14 	.word	0x20400a14
  400f90:	00400cad 	.word	0x00400cad

00400f94 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  400f94:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400f96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f9a:	4a16      	ldr	r2, [pc, #88]	; (400ff4 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400f9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f9e:	4213      	tst	r3, r2
  400fa0:	d11d      	bne.n	400fde <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  400fa2:	f013 0f02 	tst.w	r3, #2
  400fa6:	d0f9      	beq.n	400f9c <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  400fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fae:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  400fb0:	4a11      	ldr	r2, [pc, #68]	; (400ff8 <hsmci_read_word+0x64>)
  400fb2:	6813      	ldr	r3, [r2, #0]
  400fb4:	3304      	adds	r3, #4
  400fb6:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400fb8:	4a10      	ldr	r2, [pc, #64]	; (400ffc <hsmci_read_word+0x68>)
  400fba:	8811      	ldrh	r1, [r2, #0]
  400fbc:	4a10      	ldr	r2, [pc, #64]	; (401000 <hsmci_read_word+0x6c>)
  400fbe:	8812      	ldrh	r2, [r2, #0]
  400fc0:	fb02 f201 	mul.w	r2, r2, r1
  400fc4:	4293      	cmp	r3, r2
  400fc6:	d312      	bcc.n	400fee <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400fc8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400fcc:	4a09      	ldr	r2, [pc, #36]	; (400ff4 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400fce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400fd0:	4213      	tst	r3, r2
  400fd2:	d108      	bne.n	400fe6 <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400fd4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400fd8:	d0f9      	beq.n	400fce <hsmci_read_word+0x3a>
	return true;
  400fda:	2001      	movs	r0, #1
  400fdc:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400fde:	4b09      	ldr	r3, [pc, #36]	; (401004 <hsmci_read_word+0x70>)
  400fe0:	4798      	blx	r3
			return false;
  400fe2:	2000      	movs	r0, #0
  400fe4:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400fe6:	4b07      	ldr	r3, [pc, #28]	; (401004 <hsmci_read_word+0x70>)
  400fe8:	4798      	blx	r3
			return false;
  400fea:	2000      	movs	r0, #0
  400fec:	bd08      	pop	{r3, pc}
		return true;
  400fee:	2001      	movs	r0, #1
}
  400ff0:	bd08      	pop	{r3, pc}
  400ff2:	bf00      	nop
  400ff4:	c0600000 	.word	0xc0600000
  400ff8:	20400a18 	.word	0x20400a18
  400ffc:	20400a12 	.word	0x20400a12
  401000:	20400a14 	.word	0x20400a14
  401004:	00400c81 	.word	0x00400c81

00401008 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  401008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40100c:	b088      	sub	sp, #32
  40100e:	4604      	mov	r4, r0
  401010:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401012:	2220      	movs	r2, #32
  401014:	2100      	movs	r1, #0
  401016:	4668      	mov	r0, sp
  401018:	4b26      	ldr	r3, [pc, #152]	; (4010b4 <hsmci_start_read_blocks+0xac>)
  40101a:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40101c:	4826      	ldr	r0, [pc, #152]	; (4010b8 <hsmci_start_read_blocks+0xb0>)
  40101e:	2301      	movs	r3, #1
  401020:	6203      	str	r3, [r0, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401022:	4b26      	ldr	r3, [pc, #152]	; (4010bc <hsmci_start_read_blocks+0xb4>)
  401024:	881b      	ldrh	r3, [r3, #0]
  401026:	fb05 f503 	mul.w	r5, r5, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  40102a:	4b25      	ldr	r3, [pc, #148]	; (4010c0 <hsmci_start_read_blocks+0xb8>)
  40102c:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  40102e:	08ab      	lsrs	r3, r5, #2
  401030:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  401032:	4b24      	ldr	r3, [pc, #144]	; (4010c4 <hsmci_start_read_blocks+0xbc>)
  401034:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  401036:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401038:	466a      	mov	r2, sp
  40103a:	2100      	movs	r1, #0
  40103c:	4b22      	ldr	r3, [pc, #136]	; (4010c8 <hsmci_start_read_blocks+0xc0>)
  40103e:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401040:	4b22      	ldr	r3, [pc, #136]	; (4010cc <hsmci_start_read_blocks+0xc4>)
  401042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401046:	f3c3 374e 	ubfx	r7, r3, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40104a:	f003 0007 	and.w	r0, r3, #7
  40104e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401050:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401054:	fabe fc8e 	clz	ip, lr
    wshift  = __CLZ(ways) & 0x1f;
  401058:	f00c 0c1f 	and.w	ip, ip, #31
  __ASM volatile ("dsb");
  40105c:	f3bf 8f4f 	dsb	sy
  401060:	f04f 34ff 	mov.w	r4, #4294967295
  401064:	fa04 f800 	lsl.w	r8, r4, r0
  401068:	fa07 f000 	lsl.w	r0, r7, r0
  40106c:	fa04 f40c 	lsl.w	r4, r4, ip
  401070:	fa0e fc0c 	lsl.w	ip, lr, ip

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401074:	4e15      	ldr	r6, [pc, #84]	; (4010cc <hsmci_start_read_blocks+0xc4>)
         int32_t tmpways = ways;
  401076:	4672      	mov	r2, lr
  401078:	4663      	mov	r3, ip
              sw = ((tmpways << wshift) | (sets << sshift));
  40107a:	ea43 0100 	orr.w	r1, r3, r0
              SCB->DCCISW = sw;
  40107e:	f8c6 1274 	str.w	r1, [r6, #628]	; 0x274
            } while(tmpways--);
  401082:	3a01      	subs	r2, #1
  401084:	4423      	add	r3, r4
  401086:	f1b2 3fff 	cmp.w	r2, #4294967295
  40108a:	d1f6      	bne.n	40107a <hsmci_start_read_blocks+0x72>
        } while(sets--);
  40108c:	3f01      	subs	r7, #1
  40108e:	4440      	add	r0, r8
  401090:	f1b7 3fff 	cmp.w	r7, #4294967295
  401094:	d1ef      	bne.n	401076 <hsmci_start_read_blocks+0x6e>
  401096:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40109a:	f3bf 8f6f 	isb	sy
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40109e:	2001      	movs	r0, #1
  4010a0:	4b05      	ldr	r3, [pc, #20]	; (4010b8 <hsmci_start_read_blocks+0xb0>)
  4010a2:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  4010a4:	4a0a      	ldr	r2, [pc, #40]	; (4010d0 <hsmci_start_read_blocks+0xc8>)
  4010a6:	6813      	ldr	r3, [r2, #0]
  4010a8:	442b      	add	r3, r5
  4010aa:	6013      	str	r3, [r2, #0]
	return true;
}
  4010ac:	b008      	add	sp, #32
  4010ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010b2:	bf00      	nop
  4010b4:	004051f5 	.word	0x004051f5
  4010b8:	40078000 	.word	0x40078000
  4010bc:	20400a12 	.word	0x20400a12
  4010c0:	00043001 	.word	0x00043001
  4010c4:	40000200 	.word	0x40000200
  4010c8:	00401139 	.word	0x00401139
  4010cc:	e000ed00 	.word	0xe000ed00
  4010d0:	20400a18 	.word	0x20400a18

004010d4 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  4010d4:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4010d6:	4b12      	ldr	r3, [pc, #72]	; (401120 <hsmci_wait_end_of_read_blocks+0x4c>)
  4010d8:	881b      	ldrh	r3, [r3, #0]
  4010da:	4a12      	ldr	r2, [pc, #72]	; (401124 <hsmci_wait_end_of_read_blocks+0x50>)
  4010dc:	8812      	ldrh	r2, [r2, #0]
  4010de:	fb02 f203 	mul.w	r2, r2, r3
  4010e2:	4b11      	ldr	r3, [pc, #68]	; (401128 <hsmci_wait_end_of_read_blocks+0x54>)
  4010e4:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  4010e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4010ea:	4910      	ldr	r1, [pc, #64]	; (40112c <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4010ec:	4e10      	ldr	r6, [pc, #64]	; (401130 <hsmci_wait_end_of_read_blocks+0x5c>)
  4010ee:	e009      	b.n	401104 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  4010f0:	4b10      	ldr	r3, [pc, #64]	; (401134 <hsmci_wait_end_of_read_blocks+0x60>)
  4010f2:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4010f4:	2201      	movs	r2, #1
  4010f6:	4b0e      	ldr	r3, [pc, #56]	; (401130 <hsmci_wait_end_of_read_blocks+0x5c>)
  4010f8:	621a      	str	r2, [r3, #32]
			return false;
  4010fa:	2000      	movs	r0, #0
  4010fc:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4010fe:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401102:	d10a      	bne.n	40111a <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  401104:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401106:	420b      	tst	r3, r1
  401108:	d1f2      	bne.n	4010f0 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40110a:	42a2      	cmp	r2, r4
  40110c:	d9f7      	bls.n	4010fe <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  40110e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401110:	f015 0f01 	tst.w	r5, #1
  401114:	d0f3      	beq.n	4010fe <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  401116:	2001      	movs	r0, #1
	return true;
}
  401118:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  40111a:	2001      	movs	r0, #1
  40111c:	bd70      	pop	{r4, r5, r6, pc}
  40111e:	bf00      	nop
  401120:	20400a12 	.word	0x20400a12
  401124:	20400a14 	.word	0x20400a14
  401128:	20400a18 	.word	0x20400a18
  40112c:	c0600000 	.word	0xc0600000
  401130:	40078000 	.word	0x40078000
  401134:	00400c81 	.word	0x00400c81

00401138 <xdmac_configure_transfer>:
  401138:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40113c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  40113e:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401140:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401142:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401144:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401146:	6813      	ldr	r3, [r2, #0]
  401148:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40114c:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  40114e:	6913      	ldr	r3, [r2, #16]
  401150:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401154:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401156:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401158:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  40115a:	6993      	ldr	r3, [r2, #24]
  40115c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401160:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401164:	69d3      	ldr	r3, [r2, #28]
  401166:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40116a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  40116e:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401170:	678b      	str	r3, [r1, #120]	; 0x78
  401172:	4770      	bx	lr

00401174 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  401174:	2807      	cmp	r0, #7
  401176:	d901      	bls.n	40117c <f_mount+0x8>
		return FR_INVALID_DRIVE;
  401178:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  40117a:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  40117c:	4b06      	ldr	r3, [pc, #24]	; (401198 <f_mount+0x24>)
  40117e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  401182:	b10b      	cbz	r3, 401188 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  401184:	2200      	movs	r2, #0
  401186:	701a      	strb	r2, [r3, #0]
	if (fs) {
  401188:	b109      	cbz	r1, 40118e <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  40118a:	2300      	movs	r3, #0
  40118c:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  40118e:	4b02      	ldr	r3, [pc, #8]	; (401198 <f_mount+0x24>)
  401190:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  401194:	2000      	movs	r0, #0
  401196:	4770      	bx	lr
  401198:	20400a1c 	.word	0x20400a1c

0040119c <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40119c:	2810      	cmp	r0, #16
  40119e:	d108      	bne.n	4011b2 <chip_isr+0x16>
  4011a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4011a4:	d105      	bne.n	4011b2 <chip_isr+0x16>
{
  4011a6:	b508      	push	{r3, lr}
		if (gpfIsr) {
  4011a8:	4b02      	ldr	r3, [pc, #8]	; (4011b4 <chip_isr+0x18>)
  4011aa:	681b      	ldr	r3, [r3, #0]
  4011ac:	b103      	cbz	r3, 4011b0 <chip_isr+0x14>
			gpfIsr();
  4011ae:	4798      	blx	r3
  4011b0:	bd08      	pop	{r3, pc}
  4011b2:	4770      	bx	lr
  4011b4:	20400a3c 	.word	0x20400a3c

004011b8 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4011b8:	b150      	cbz	r0, 4011d0 <nm_bsp_sleep+0x18>
{
  4011ba:	b570      	push	{r4, r5, r6, lr}
  4011bc:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  4011be:	4e05      	ldr	r6, [pc, #20]	; (4011d4 <nm_bsp_sleep+0x1c>)
  4011c0:	4d05      	ldr	r5, [pc, #20]	; (4011d8 <nm_bsp_sleep+0x20>)
  4011c2:	4630      	mov	r0, r6
  4011c4:	47a8      	blx	r5
	while(u32TimeMsec--) {
  4011c6:	3c01      	subs	r4, #1
  4011c8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4011cc:	d1f9      	bne.n	4011c2 <nm_bsp_sleep+0xa>
  4011ce:	bd70      	pop	{r4, r5, r6, pc}
  4011d0:	4770      	bx	lr
  4011d2:	bf00      	nop
  4011d4:	00031635 	.word	0x00031635
  4011d8:	20400001 	.word	0x20400001

004011dc <nm_bsp_reset>:
{
  4011dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4011e0:	4f09      	ldr	r7, [pc, #36]	; (401208 <nm_bsp_reset+0x2c>)
  4011e2:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4011e6:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4011ea:	4d08      	ldr	r5, [pc, #32]	; (40120c <nm_bsp_reset+0x30>)
  4011ec:	2608      	movs	r6, #8
  4011ee:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  4011f0:	2064      	movs	r0, #100	; 0x64
  4011f2:	4c07      	ldr	r4, [pc, #28]	; (401210 <nm_bsp_reset+0x34>)
  4011f4:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011f6:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  4011fa:	2064      	movs	r0, #100	; 0x64
  4011fc:	47a0      	blx	r4
  4011fe:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  401200:	2064      	movs	r0, #100	; 0x64
  401202:	47a0      	blx	r4
  401204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401208:	400e1200 	.word	0x400e1200
  40120c:	400e1000 	.word	0x400e1000
  401210:	004011b9 	.word	0x004011b9

00401214 <nm_bsp_init>:
{
  401214:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  401216:	2200      	movs	r2, #0
  401218:	4b14      	ldr	r3, [pc, #80]	; (40126c <nm_bsp_init+0x58>)
  40121a:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40121c:	200a      	movs	r0, #10
  40121e:	4c14      	ldr	r4, [pc, #80]	; (401270 <nm_bsp_init+0x5c>)
  401220:	47a0      	blx	r4
  401222:	200b      	movs	r0, #11
  401224:	47a0      	blx	r4
  401226:	200c      	movs	r0, #12
  401228:	47a0      	blx	r4
  40122a:	2010      	movs	r0, #16
  40122c:	47a0      	blx	r4
  40122e:	2011      	movs	r0, #17
  401230:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401232:	4b10      	ldr	r3, [pc, #64]	; (401274 <nm_bsp_init+0x60>)
  401234:	2208      	movs	r2, #8
  401236:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401238:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40123c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40123e:	4a0e      	ldr	r2, [pc, #56]	; (401278 <nm_bsp_init+0x64>)
  401240:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401244:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401246:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40124a:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40124c:	2204      	movs	r2, #4
  40124e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401250:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401254:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  401256:	4b09      	ldr	r3, [pc, #36]	; (40127c <nm_bsp_init+0x68>)
  401258:	681b      	ldr	r3, [r3, #0]
  40125a:	f013 0f01 	tst.w	r3, #1
  40125e:	d001      	beq.n	401264 <nm_bsp_init+0x50>
  401260:	4b06      	ldr	r3, [pc, #24]	; (40127c <nm_bsp_init+0x68>)
  401262:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  401264:	4b06      	ldr	r3, [pc, #24]	; (401280 <nm_bsp_init+0x6c>)
  401266:	4798      	blx	r3
}
  401268:	2000      	movs	r0, #0
  40126a:	bd10      	pop	{r4, pc}
  40126c:	20400a3c 	.word	0x20400a3c
  401270:	00404669 	.word	0x00404669
  401274:	400e1000 	.word	0x400e1000
  401278:	400e1200 	.word	0x400e1200
  40127c:	e000e010 	.word	0xe000e010
  401280:	004011dd 	.word	0x004011dd

00401284 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  401284:	b530      	push	{r4, r5, lr}
  401286:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  401288:	4b14      	ldr	r3, [pc, #80]	; (4012dc <nm_bsp_register_isr+0x58>)
  40128a:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  40128c:	2010      	movs	r0, #16
  40128e:	4b14      	ldr	r3, [pc, #80]	; (4012e0 <nm_bsp_register_isr+0x5c>)
  401290:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  401292:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401296:	207c      	movs	r0, #124	; 0x7c
  401298:	4b12      	ldr	r3, [pc, #72]	; (4012e4 <nm_bsp_register_isr+0x60>)
  40129a:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  40129c:	4c12      	ldr	r4, [pc, #72]	; (4012e8 <nm_bsp_register_isr+0x64>)
  40129e:	2201      	movs	r2, #1
  4012a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012a4:	4620      	mov	r0, r4
  4012a6:	4b11      	ldr	r3, [pc, #68]	; (4012ec <nm_bsp_register_isr+0x68>)
  4012a8:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4012aa:	4b11      	ldr	r3, [pc, #68]	; (4012f0 <nm_bsp_register_isr+0x6c>)
  4012ac:	9300      	str	r3, [sp, #0]
  4012ae:	2351      	movs	r3, #81	; 0x51
  4012b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012b4:	2110      	movs	r1, #16
  4012b6:	4620      	mov	r0, r4
  4012b8:	4d0e      	ldr	r5, [pc, #56]	; (4012f4 <nm_bsp_register_isr+0x70>)
  4012ba:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4012bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012c0:	4620      	mov	r0, r4
  4012c2:	4b0d      	ldr	r3, [pc, #52]	; (4012f8 <nm_bsp_register_isr+0x74>)
  4012c4:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4012c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4012ca:	4b0c      	ldr	r3, [pc, #48]	; (4012fc <nm_bsp_register_isr+0x78>)
  4012cc:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4012ce:	2200      	movs	r2, #0
  4012d0:	2110      	movs	r1, #16
  4012d2:	4620      	mov	r0, r4
  4012d4:	4b0a      	ldr	r3, [pc, #40]	; (401300 <nm_bsp_register_isr+0x7c>)
  4012d6:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4012d8:	b003      	add	sp, #12
  4012da:	bd30      	pop	{r4, r5, pc}
  4012dc:	20400a3c 	.word	0x20400a3c
  4012e0:	00404669 	.word	0x00404669
  4012e4:	00404271 	.word	0x00404271
  4012e8:	400e1400 	.word	0x400e1400
  4012ec:	00404135 	.word	0x00404135
  4012f0:	0040119d 	.word	0x0040119d
  4012f4:	004043f1 	.word	0x004043f1
  4012f8:	00404261 	.word	0x00404261
  4012fc:	e000e100 	.word	0xe000e100
  401300:	004044c5 	.word	0x004044c5

00401304 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  401304:	b508      	push	{r3, lr}
	if (u8Enable) {
  401306:	b928      	cbnz	r0, 401314 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401308:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40130c:	4804      	ldr	r0, [pc, #16]	; (401320 <nm_bsp_interrupt_ctrl+0x1c>)
  40130e:	4b05      	ldr	r3, [pc, #20]	; (401324 <nm_bsp_interrupt_ctrl+0x20>)
  401310:	4798      	blx	r3
  401312:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401314:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401318:	4801      	ldr	r0, [pc, #4]	; (401320 <nm_bsp_interrupt_ctrl+0x1c>)
  40131a:	4b03      	ldr	r3, [pc, #12]	; (401328 <nm_bsp_interrupt_ctrl+0x24>)
  40131c:	4798      	blx	r3
  40131e:	bd08      	pop	{r3, pc}
  401320:	400e1400 	.word	0x400e1400
  401324:	00404265 	.word	0x00404265
  401328:	00404261 	.word	0x00404261

0040132c <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  40132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  40132e:	4c39      	ldr	r4, [pc, #228]	; (401414 <nm_bus_init+0xe8>)
  401330:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401334:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401336:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40133a:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40133c:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40133e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401342:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401344:	430b      	orrs	r3, r1
  401346:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401348:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40134a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40134e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  401350:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401354:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401356:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40135a:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40135c:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40135e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401362:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401364:	4313      	orrs	r3, r2
  401366:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401368:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40136a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40136e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  401370:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401374:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401376:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40137a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40137c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40137e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401382:	6f20      	ldr	r0, [r4, #112]	; 0x70
  401384:	4318      	orrs	r0, r3
  401386:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401388:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40138a:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40138e:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401390:	6061      	str	r1, [r4, #4]
  401392:	6062      	str	r2, [r4, #4]
  401394:	6063      	str	r3, [r4, #4]
  401396:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  40139a:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  40139c:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40139e:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  4013a0:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  4013a2:	4d1d      	ldr	r5, [pc, #116]	; (401418 <nm_bus_init+0xec>)
  4013a4:	4628      	mov	r0, r5
  4013a6:	4b1d      	ldr	r3, [pc, #116]	; (40141c <nm_bus_init+0xf0>)
  4013a8:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4013aa:	2302      	movs	r3, #2
  4013ac:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4013ae:	2380      	movs	r3, #128	; 0x80
  4013b0:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4013b2:	686b      	ldr	r3, [r5, #4]
  4013b4:	f043 0301 	orr.w	r3, r3, #1
  4013b8:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4013ba:	686b      	ldr	r3, [r5, #4]
  4013bc:	f043 0310 	orr.w	r3, r3, #16
  4013c0:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4013c2:	2101      	movs	r1, #1
  4013c4:	4628      	mov	r0, r5
  4013c6:	4b16      	ldr	r3, [pc, #88]	; (401420 <nm_bus_init+0xf4>)
  4013c8:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4013ca:	2200      	movs	r2, #0
  4013cc:	2101      	movs	r1, #1
  4013ce:	4628      	mov	r0, r5
  4013d0:	4b14      	ldr	r3, [pc, #80]	; (401424 <nm_bus_init+0xf8>)
  4013d2:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4013d4:	2201      	movs	r2, #1
  4013d6:	4611      	mov	r1, r2
  4013d8:	4628      	mov	r0, r5
  4013da:	4b13      	ldr	r3, [pc, #76]	; (401428 <nm_bus_init+0xfc>)
  4013dc:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4013de:	2200      	movs	r2, #0
  4013e0:	2101      	movs	r1, #1
  4013e2:	4628      	mov	r0, r5
  4013e4:	4b11      	ldr	r3, [pc, #68]	; (40142c <nm_bus_init+0x100>)
  4013e6:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4013e8:	4911      	ldr	r1, [pc, #68]	; (401430 <nm_bus_init+0x104>)
  4013ea:	4812      	ldr	r0, [pc, #72]	; (401434 <nm_bus_init+0x108>)
  4013ec:	4b12      	ldr	r3, [pc, #72]	; (401438 <nm_bus_init+0x10c>)
  4013ee:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4013f0:	b2c2      	uxtb	r2, r0
  4013f2:	2101      	movs	r1, #1
  4013f4:	4628      	mov	r0, r5
  4013f6:	4b11      	ldr	r3, [pc, #68]	; (40143c <nm_bus_init+0x110>)
  4013f8:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4013fa:	2300      	movs	r3, #0
  4013fc:	461a      	mov	r2, r3
  4013fe:	2101      	movs	r1, #1
  401400:	4628      	mov	r0, r5
  401402:	4f0f      	ldr	r7, [pc, #60]	; (401440 <nm_bus_init+0x114>)
  401404:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401406:	2301      	movs	r3, #1
  401408:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  40140a:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  40140c:	4b0d      	ldr	r3, [pc, #52]	; (401444 <nm_bus_init+0x118>)
  40140e:	4798      	blx	r3
#endif
	return result;
}
  401410:	2000      	movs	r0, #0
  401412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401414:	400e1400 	.word	0x400e1400
  401418:	40008000 	.word	0x40008000
  40141c:	004046bd 	.word	0x004046bd
  401420:	004046e9 	.word	0x004046e9
  401424:	00404763 	.word	0x00404763
  401428:	00404781 	.word	0x00404781
  40142c:	0040479f 	.word	0x0040479f
  401430:	11e1a300 	.word	0x11e1a300
  401434:	02dc6c00 	.word	0x02dc6c00
  401438:	004047b3 	.word	0x004047b3
  40143c:	004047c9 	.word	0x004047c9
  401440:	004047f1 	.word	0x004047f1
  401444:	004011dd 	.word	0x004011dd

00401448 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  401448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40144c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40144e:	2803      	cmp	r0, #3
  401450:	d144      	bne.n	4014dc <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  401452:	680e      	ldr	r6, [r1, #0]
  401454:	684d      	ldr	r5, [r1, #4]
  401456:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  401458:	2300      	movs	r3, #0
  40145a:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  40145e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  401462:	b186      	cbz	r6, 401486 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  401464:	2d00      	cmp	r5, #0
  401466:	d136      	bne.n	4014d6 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  401468:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40146c:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40146e:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  401470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401474:	4b20      	ldr	r3, [pc, #128]	; (4014f8 <nm_bus_ioctl+0xb0>)
  401476:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  401478:	b32c      	cbz	r4, 4014c6 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40147a:	4f20      	ldr	r7, [pc, #128]	; (4014fc <nm_bus_ioctl+0xb4>)
  40147c:	f8df b094 	ldr.w	fp, [pc, #148]	; 401514 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  401480:	f8df a094 	ldr.w	sl, [pc, #148]	; 401518 <nm_bus_ioctl+0xd0>
  401484:	e006      	b.n	401494 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  401486:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  40148a:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  40148e:	ae01      	add	r6, sp, #4
  401490:	e7ee      	b.n	401470 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  401492:	b1c4      	cbz	r4, 4014c6 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  401494:	2300      	movs	r3, #0
  401496:	461a      	mov	r2, r3
  401498:	7831      	ldrb	r1, [r6, #0]
  40149a:	4638      	mov	r0, r7
  40149c:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40149e:	f10d 0205 	add.w	r2, sp, #5
  4014a2:	f10d 0106 	add.w	r1, sp, #6
  4014a6:	4638      	mov	r0, r7
  4014a8:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4014aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4014ae:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  4014b0:	3c01      	subs	r4, #1
  4014b2:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4014b4:	f1b8 0f00 	cmp.w	r8, #0
  4014b8:	d100      	bne.n	4014bc <nm_bus_ioctl+0x74>
			pu8Miso++;
  4014ba:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4014bc:	f1b9 0f00 	cmp.w	r9, #0
  4014c0:	d1e7      	bne.n	401492 <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  4014c2:	3601      	adds	r6, #1
  4014c4:	e7e5      	b.n	401492 <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  4014c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4014ca:	4b0b      	ldr	r3, [pc, #44]	; (4014f8 <nm_bus_ioctl+0xb0>)
  4014cc:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  4014ce:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4014d0:	b003      	add	sp, #12
  4014d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  4014d6:	f06f 0005 	mvn.w	r0, #5
		break;
  4014da:	e7f9      	b.n	4014d0 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  4014dc:	f240 121f 	movw	r2, #287	; 0x11f
  4014e0:	4907      	ldr	r1, [pc, #28]	; (401500 <nm_bus_ioctl+0xb8>)
  4014e2:	4808      	ldr	r0, [pc, #32]	; (401504 <nm_bus_ioctl+0xbc>)
  4014e4:	4c08      	ldr	r4, [pc, #32]	; (401508 <nm_bus_ioctl+0xc0>)
  4014e6:	47a0      	blx	r4
  4014e8:	4808      	ldr	r0, [pc, #32]	; (40150c <nm_bus_ioctl+0xc4>)
  4014ea:	47a0      	blx	r4
  4014ec:	4808      	ldr	r0, [pc, #32]	; (401510 <nm_bus_ioctl+0xc8>)
  4014ee:	47a0      	blx	r4
			s8Ret = -1;
  4014f0:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  4014f4:	e7ec      	b.n	4014d0 <nm_bus_ioctl+0x88>
  4014f6:	bf00      	nop
  4014f8:	400e1400 	.word	0x400e1400
  4014fc:	40008000 	.word	0x40008000
  401500:	0040b490 	.word	0x0040b490
  401504:	0040b4a0 	.word	0x0040b4a0
  401508:	004051cd 	.word	0x004051cd
  40150c:	0040b4b4 	.word	0x0040b4b4
  401510:	0040c1dc 	.word	0x0040c1dc
  401514:	0040472f 	.word	0x0040472f
  401518:	004046ff 	.word	0x004046ff

0040151c <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40151c:	2202      	movs	r2, #2
  40151e:	4b0e      	ldr	r3, [pc, #56]	; (401558 <nm_bus_deinit+0x3c>)
  401520:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401522:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  401526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40152a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40152e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401530:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401534:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401538:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40153a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40153e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401542:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401544:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40154c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40154e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  401552:	2000      	movs	r0, #0
  401554:	4770      	bx	lr
  401556:	bf00      	nop
  401558:	40008000 	.word	0x40008000

0040155c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  40155c:	b13a      	cbz	r2, 40156e <m2m_memcpy+0x12>
  40155e:	3901      	subs	r1, #1
  401560:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  401562:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  401566:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  40156a:	4290      	cmp	r0, r2
  40156c:	d1f9      	bne.n	401562 <m2m_memcpy+0x6>
  40156e:	4770      	bx	lr

00401570 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  401570:	b122      	cbz	r2, 40157c <m2m_memset+0xc>
  401572:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  401574:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  401578:	4290      	cmp	r0, r2
  40157a:	d1fb      	bne.n	401574 <m2m_memset+0x4>
  40157c:	4770      	bx	lr

0040157e <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40157e:	7803      	ldrb	r3, [r0, #0]
  401580:	b143      	cbz	r3, 401594 <m2m_strlen+0x16>
  401582:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  401584:	3301      	adds	r3, #1
  401586:	b29b      	uxth	r3, r3
	while(*pcStr)
  401588:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40158c:	2a00      	cmp	r2, #0
  40158e:	d1f9      	bne.n	401584 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  401590:	4618      	mov	r0, r3
  401592:	4770      	bx	lr
	uint16	u16StrLen = 0;
  401594:	2300      	movs	r3, #0
  401596:	e7fb      	b.n	401590 <m2m_strlen+0x12>

00401598 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  401598:	4a02      	ldr	r2, [pc, #8]	; (4015a4 <isr+0xc>)
  40159a:	7813      	ldrb	r3, [r2, #0]
  40159c:	3301      	adds	r3, #1
  40159e:	b2db      	uxtb	r3, r3
  4015a0:	7013      	strb	r3, [r2, #0]
  4015a2:	4770      	bx	lr
  4015a4:	20400a43 	.word	0x20400a43

004015a8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4015a8:	4770      	bx	lr
	...

004015ac <hif_set_rx_done>:
{
  4015ac:	b500      	push	{lr}
  4015ae:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  4015b0:	2001      	movs	r0, #1
  4015b2:	4b0b      	ldr	r3, [pc, #44]	; (4015e0 <hif_set_rx_done+0x34>)
  4015b4:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4015b6:	a901      	add	r1, sp, #4
  4015b8:	f241 0070 	movw	r0, #4208	; 0x1070
  4015bc:	4b09      	ldr	r3, [pc, #36]	; (4015e4 <hif_set_rx_done+0x38>)
  4015be:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4015c0:	4603      	mov	r3, r0
  4015c2:	b118      	cbz	r0, 4015cc <hif_set_rx_done+0x20>
}
  4015c4:	4618      	mov	r0, r3
  4015c6:	b003      	add	sp, #12
  4015c8:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  4015cc:	9901      	ldr	r1, [sp, #4]
  4015ce:	f041 0102 	orr.w	r1, r1, #2
  4015d2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4015d4:	f241 0070 	movw	r0, #4208	; 0x1070
  4015d8:	4b03      	ldr	r3, [pc, #12]	; (4015e8 <hif_set_rx_done+0x3c>)
  4015da:	4798      	blx	r3
  4015dc:	4603      	mov	r3, r0
  4015de:	e7f1      	b.n	4015c4 <hif_set_rx_done+0x18>
  4015e0:	00401305 	.word	0x00401305
  4015e4:	00402899 	.word	0x00402899
  4015e8:	004028a5 	.word	0x004028a5

004015ec <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4015ec:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4015ee:	4b12      	ldr	r3, [pc, #72]	; (401638 <hif_chip_wake+0x4c>)
  4015f0:	781b      	ldrb	r3, [r3, #0]
  4015f2:	b94b      	cbnz	r3, 401608 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4015f4:	4b11      	ldr	r3, [pc, #68]	; (40163c <hif_chip_wake+0x50>)
  4015f6:	781b      	ldrb	r3, [r3, #0]
  4015f8:	b2db      	uxtb	r3, r3
  4015fa:	2b03      	cmp	r3, #3
  4015fc:	d00c      	beq.n	401618 <hif_chip_wake+0x2c>
  4015fe:	4b0f      	ldr	r3, [pc, #60]	; (40163c <hif_chip_wake+0x50>)
  401600:	781b      	ldrb	r3, [r3, #0]
  401602:	b2db      	uxtb	r3, r3
  401604:	2b04      	cmp	r3, #4
  401606:	d007      	beq.n	401618 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  401608:	4a0b      	ldr	r2, [pc, #44]	; (401638 <hif_chip_wake+0x4c>)
  40160a:	7813      	ldrb	r3, [r2, #0]
  40160c:	3301      	adds	r3, #1
  40160e:	b2db      	uxtb	r3, r3
  401610:	7013      	strb	r3, [r2, #0]
  401612:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  401614:	4618      	mov	r0, r3
  401616:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  401618:	4b09      	ldr	r3, [pc, #36]	; (401640 <hif_chip_wake+0x54>)
  40161a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40161c:	4603      	mov	r3, r0
  40161e:	2800      	cmp	r0, #0
  401620:	d1f8      	bne.n	401614 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  401622:	f245 6178 	movw	r1, #22136	; 0x5678
  401626:	f241 0074 	movw	r0, #4212	; 0x1074
  40162a:	4b06      	ldr	r3, [pc, #24]	; (401644 <hif_chip_wake+0x58>)
  40162c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40162e:	4603      	mov	r3, r0
  401630:	2800      	cmp	r0, #0
  401632:	d0e9      	beq.n	401608 <hif_chip_wake+0x1c>
  401634:	e7ee      	b.n	401614 <hif_chip_wake+0x28>
  401636:	bf00      	nop
  401638:	20400a41 	.word	0x20400a41
  40163c:	20400a40 	.word	0x20400a40
  401640:	00402409 	.word	0x00402409
  401644:	004028a5 	.word	0x004028a5

00401648 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  401648:	4b1e      	ldr	r3, [pc, #120]	; (4016c4 <hif_chip_sleep+0x7c>)
  40164a:	781b      	ldrb	r3, [r3, #0]
  40164c:	b123      	cbz	r3, 401658 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  40164e:	4a1d      	ldr	r2, [pc, #116]	; (4016c4 <hif_chip_sleep+0x7c>)
  401650:	7813      	ldrb	r3, [r2, #0]
  401652:	3b01      	subs	r3, #1
  401654:	b2db      	uxtb	r3, r3
  401656:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  401658:	4b1a      	ldr	r3, [pc, #104]	; (4016c4 <hif_chip_sleep+0x7c>)
  40165a:	781b      	ldrb	r3, [r3, #0]
  40165c:	2b00      	cmp	r3, #0
  40165e:	d12e      	bne.n	4016be <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  401660:	4b19      	ldr	r3, [pc, #100]	; (4016c8 <hif_chip_sleep+0x80>)
  401662:	781b      	ldrb	r3, [r3, #0]
  401664:	b2db      	uxtb	r3, r3
  401666:	2b03      	cmp	r3, #3
  401668:	d006      	beq.n	401678 <hif_chip_sleep+0x30>
  40166a:	4b17      	ldr	r3, [pc, #92]	; (4016c8 <hif_chip_sleep+0x80>)
  40166c:	781b      	ldrb	r3, [r3, #0]
  40166e:	b2db      	uxtb	r3, r3
  401670:	2b04      	cmp	r3, #4
  401672:	d001      	beq.n	401678 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  401674:	2300      	movs	r3, #0
  401676:	e023      	b.n	4016c0 <hif_chip_sleep+0x78>
{
  401678:	b500      	push	{lr}
  40167a:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  40167c:	2300      	movs	r3, #0
  40167e:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  401680:	f244 3121 	movw	r1, #17185	; 0x4321
  401684:	f241 0074 	movw	r0, #4212	; 0x1074
  401688:	4b10      	ldr	r3, [pc, #64]	; (4016cc <hif_chip_sleep+0x84>)
  40168a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40168c:	4603      	mov	r3, r0
  40168e:	b118      	cbz	r0, 401698 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  401690:	4618      	mov	r0, r3
  401692:	b003      	add	sp, #12
  401694:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  401698:	a901      	add	r1, sp, #4
  40169a:	2001      	movs	r0, #1
  40169c:	4b0c      	ldr	r3, [pc, #48]	; (4016d0 <hif_chip_sleep+0x88>)
  40169e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4016a0:	4603      	mov	r3, r0
  4016a2:	2800      	cmp	r0, #0
  4016a4:	d1f4      	bne.n	401690 <hif_chip_sleep+0x48>
			if(reg&0x2)
  4016a6:	9901      	ldr	r1, [sp, #4]
  4016a8:	f011 0f02 	tst.w	r1, #2
  4016ac:	d0f0      	beq.n	401690 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  4016ae:	f021 0102 	bic.w	r1, r1, #2
  4016b2:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4016b4:	2001      	movs	r0, #1
  4016b6:	4b05      	ldr	r3, [pc, #20]	; (4016cc <hif_chip_sleep+0x84>)
  4016b8:	4798      	blx	r3
  4016ba:	4603      	mov	r3, r0
  4016bc:	e7e8      	b.n	401690 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  4016be:	2300      	movs	r3, #0
}
  4016c0:	4618      	mov	r0, r3
  4016c2:	4770      	bx	lr
  4016c4:	20400a41 	.word	0x20400a41
  4016c8:	20400a40 	.word	0x20400a40
  4016cc:	004028a5 	.word	0x004028a5
  4016d0:	00402899 	.word	0x00402899

004016d4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4016d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016d8:	b087      	sub	sp, #28
  4016da:	4607      	mov	r7, r0
  4016dc:	4688      	mov	r8, r1
  4016de:	4692      	mov	sl, r2
  4016e0:	4699      	mov	r9, r3
  4016e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4016e4:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4016e8:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4016ec:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4016f0:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4016f4:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4016f8:	2308      	movs	r3, #8
  4016fa:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4016fe:	2c00      	cmp	r4, #0
  401700:	f000 809f 	beq.w	401842 <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  401704:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  401708:	fa16 f383 	uxtah	r3, r6, r3
  40170c:	442b      	add	r3, r5
  40170e:	b29b      	uxth	r3, r3
  401710:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  401714:	4b5c      	ldr	r3, [pc, #368]	; (401888 <hif_send+0x1b4>)
  401716:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  401718:	4683      	mov	fp, r0
  40171a:	2800      	cmp	r0, #0
  40171c:	f040 80a2 	bne.w	401864 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  401720:	2300      	movs	r3, #0
  401722:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  401724:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  401728:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  40172a:	9b02      	ldr	r3, [sp, #8]
  40172c:	431f      	orrs	r7, r3
  40172e:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  401730:	9b02      	ldr	r3, [sp, #8]
  401732:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  401736:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  401738:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40173c:	9b02      	ldr	r3, [sp, #8]
  40173e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401742:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  401744:	9902      	ldr	r1, [sp, #8]
  401746:	f241 008c 	movw	r0, #4236	; 0x108c
  40174a:	4b50      	ldr	r3, [pc, #320]	; (40188c <hif_send+0x1b8>)
  40174c:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40174e:	4683      	mov	fp, r0
  401750:	2800      	cmp	r0, #0
  401752:	f040 8091 	bne.w	401878 <hif_send+0x1a4>


		reg = 0;
  401756:	2300      	movs	r3, #0
  401758:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  40175a:	9b02      	ldr	r3, [sp, #8]
  40175c:	f043 0302 	orr.w	r3, r3, #2
  401760:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  401762:	9902      	ldr	r1, [sp, #8]
  401764:	f241 0078 	movw	r0, #4216	; 0x1078
  401768:	4b48      	ldr	r3, [pc, #288]	; (40188c <hif_send+0x1b8>)
  40176a:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40176c:	4683      	mov	fp, r0
  40176e:	2800      	cmp	r0, #0
  401770:	f040 8082 	bne.w	401878 <hif_send+0x1a4>
		dma_addr = 0;
  401774:	2300      	movs	r3, #0
  401776:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  401778:	f8ad 3006 	strh.w	r3, [sp, #6]
  40177c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401780:	b29b      	uxth	r3, r3
  401782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401786:	d216      	bcs.n	4017b6 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  401788:	f241 0878 	movw	r8, #4216	; 0x1078
  40178c:	4f40      	ldr	r7, [pc, #256]	; (401890 <hif_send+0x1bc>)
  40178e:	a902      	add	r1, sp, #8
  401790:	4640      	mov	r0, r8
  401792:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  401794:	b978      	cbnz	r0, 4017b6 <hif_send+0xe2>
			if (!(reg & 0x2))
  401796:	9b02      	ldr	r3, [sp, #8]
  401798:	f013 0f02 	tst.w	r3, #2
  40179c:	d059      	beq.n	401852 <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  40179e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4017a2:	3301      	adds	r3, #1
  4017a4:	b29b      	uxth	r3, r3
  4017a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  4017aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4017ae:	b29b      	uxth	r3, r3
  4017b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4017b4:	d3eb      	bcc.n	40178e <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4017b6:	9b03      	ldr	r3, [sp, #12]
  4017b8:	2b00      	cmp	r3, #0
  4017ba:	d061      	beq.n	401880 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4017bc:	9b03      	ldr	r3, [sp, #12]
  4017be:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4017c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4017c4:	b29b      	uxth	r3, r3
  4017c6:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4017ca:	9804      	ldr	r0, [sp, #16]
  4017cc:	2208      	movs	r2, #8
  4017ce:	a905      	add	r1, sp, #20
  4017d0:	4b30      	ldr	r3, [pc, #192]	; (401894 <hif_send+0x1c0>)
  4017d2:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4017d4:	4683      	mov	fp, r0
  4017d6:	2800      	cmp	r0, #0
  4017d8:	d14e      	bne.n	401878 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4017da:	9b04      	ldr	r3, [sp, #16]
  4017dc:	3308      	adds	r3, #8
  4017de:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4017e0:	f1ba 0f00 	cmp.w	sl, #0
  4017e4:	d00a      	beq.n	4017fc <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4017e6:	9804      	ldr	r0, [sp, #16]
  4017e8:	464a      	mov	r2, r9
  4017ea:	4651      	mov	r1, sl
  4017ec:	4b29      	ldr	r3, [pc, #164]	; (401894 <hif_send+0x1c0>)
  4017ee:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4017f0:	4683      	mov	fp, r0
  4017f2:	2800      	cmp	r0, #0
  4017f4:	d140      	bne.n	401878 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4017f6:	9b04      	ldr	r3, [sp, #16]
  4017f8:	444b      	add	r3, r9
  4017fa:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4017fc:	b17c      	cbz	r4, 40181e <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4017fe:	9b04      	ldr	r3, [sp, #16]
  401800:	eba5 0509 	sub.w	r5, r5, r9
  401804:	441d      	add	r5, r3
  401806:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  401808:	9804      	ldr	r0, [sp, #16]
  40180a:	4632      	mov	r2, r6
  40180c:	4621      	mov	r1, r4
  40180e:	4b21      	ldr	r3, [pc, #132]	; (401894 <hif_send+0x1c0>)
  401810:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  401812:	4683      	mov	fp, r0
  401814:	2800      	cmp	r0, #0
  401816:	d12f      	bne.n	401878 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  401818:	9b04      	ldr	r3, [sp, #16]
  40181a:	441e      	add	r6, r3
  40181c:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  40181e:	9b03      	ldr	r3, [sp, #12]
  401820:	009b      	lsls	r3, r3, #2
  401822:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  401824:	9b02      	ldr	r3, [sp, #8]
  401826:	f043 0302 	orr.w	r3, r3, #2
  40182a:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  40182c:	9902      	ldr	r1, [sp, #8]
  40182e:	f241 006c 	movw	r0, #4204	; 0x106c
  401832:	4b16      	ldr	r3, [pc, #88]	; (40188c <hif_send+0x1b8>)
  401834:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  401836:	4683      	mov	fp, r0
  401838:	b9f0      	cbnz	r0, 401878 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  40183a:	4b17      	ldr	r3, [pc, #92]	; (401898 <hif_send+0x1c4>)
  40183c:	4798      	blx	r3
  40183e:	4683      	mov	fp, r0
  401840:	e01a      	b.n	401878 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  401842:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  401846:	fa19 f383 	uxtah	r3, r9, r3
  40184a:	b29b      	uxth	r3, r3
  40184c:	f8ad 3016 	strh.w	r3, [sp, #22]
  401850:	e760      	b.n	401714 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  401852:	a903      	add	r1, sp, #12
  401854:	4811      	ldr	r0, [pc, #68]	; (40189c <hif_send+0x1c8>)
  401856:	4b0e      	ldr	r3, [pc, #56]	; (401890 <hif_send+0x1bc>)
  401858:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40185a:	2800      	cmp	r0, #0
  40185c:	d0ab      	beq.n	4017b6 <hif_send+0xe2>
					dma_addr = 0;
  40185e:	2300      	movs	r3, #0
  401860:	9303      	str	r3, [sp, #12]
  401862:	e7a8      	b.n	4017b6 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  401864:	f240 129f 	movw	r2, #415	; 0x19f
  401868:	490d      	ldr	r1, [pc, #52]	; (4018a0 <hif_send+0x1cc>)
  40186a:	480e      	ldr	r0, [pc, #56]	; (4018a4 <hif_send+0x1d0>)
  40186c:	4c0e      	ldr	r4, [pc, #56]	; (4018a8 <hif_send+0x1d4>)
  40186e:	47a0      	blx	r4
  401870:	480e      	ldr	r0, [pc, #56]	; (4018ac <hif_send+0x1d8>)
  401872:	47a0      	blx	r4
  401874:	480e      	ldr	r0, [pc, #56]	; (4018b0 <hif_send+0x1dc>)
  401876:	47a0      	blx	r4

ERR1:
	return ret;
}
  401878:	4658      	mov	r0, fp
  40187a:	b007      	add	sp, #28
  40187c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  401880:	f06f 0b02 	mvn.w	fp, #2
  401884:	e7f8      	b.n	401878 <hif_send+0x1a4>
  401886:	bf00      	nop
  401888:	004015ed 	.word	0x004015ed
  40188c:	004028a5 	.word	0x004028a5
  401890:	00402899 	.word	0x00402899
  401894:	0040290d 	.word	0x0040290d
  401898:	00401649 	.word	0x00401649
  40189c:	00150400 	.word	0x00150400
  4018a0:	0040b4cc 	.word	0x0040b4cc
  4018a4:	0040b4a0 	.word	0x0040b4a0
  4018a8:	004051cd 	.word	0x004051cd
  4018ac:	0040b720 	.word	0x0040b720
  4018b0:	0040c1dc 	.word	0x0040c1dc

004018b4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4018b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4018b8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4018ba:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 401bb4 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  4018be:	4fa2      	ldr	r7, [pc, #648]	; (401b48 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4018c0:	4ea2      	ldr	r6, [pc, #648]	; (401b4c <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4018c2:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 401bb8 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  4018c6:	e0d5      	b.n	401a74 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4018c8:	2204      	movs	r2, #4
  4018ca:	a904      	add	r1, sp, #16
  4018cc:	9805      	ldr	r0, [sp, #20]
  4018ce:	4ba0      	ldr	r3, [pc, #640]	; (401b50 <hif_handle_isr+0x29c>)
  4018d0:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4018d2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4018d6:	b29b      	uxth	r3, r3
  4018d8:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4018dc:	4604      	mov	r4, r0
  4018de:	2800      	cmp	r0, #0
  4018e0:	d130      	bne.n	401944 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  4018e2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4018e6:	b29b      	uxth	r3, r3
  4018e8:	429d      	cmp	r5, r3
  4018ea:	d005      	beq.n	4018f8 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  4018ec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4018f0:	b29b      	uxth	r3, r3
  4018f2:	1aeb      	subs	r3, r5, r3
  4018f4:	2b04      	cmp	r3, #4
  4018f6:	dc33      	bgt.n	401960 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4018f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4018fc:	b2db      	uxtb	r3, r3
  4018fe:	2b01      	cmp	r3, #1
  401900:	d047      	beq.n	401992 <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  401902:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401906:	b2db      	uxtb	r3, r3
  401908:	2b02      	cmp	r3, #2
  40190a:	d05f      	beq.n	4019cc <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  40190c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401910:	b2db      	uxtb	r3, r3
  401912:	2b04      	cmp	r3, #4
  401914:	d068      	beq.n	4019e8 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  401916:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40191a:	b2db      	uxtb	r3, r3
  40191c:	2b06      	cmp	r3, #6
  40191e:	d071      	beq.n	401a04 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  401920:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401924:	b2db      	uxtb	r3, r3
  401926:	2b07      	cmp	r3, #7
  401928:	d07a      	beq.n	401a20 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  40192a:	f240 2202 	movw	r2, #514	; 0x202
  40192e:	4641      	mov	r1, r8
  401930:	4630      	mov	r0, r6
  401932:	4c88      	ldr	r4, [pc, #544]	; (401b54 <hif_handle_isr+0x2a0>)
  401934:	47a0      	blx	r4
  401936:	4888      	ldr	r0, [pc, #544]	; (401b58 <hif_handle_isr+0x2a4>)
  401938:	47a0      	blx	r4
  40193a:	4888      	ldr	r0, [pc, #544]	; (401b5c <hif_handle_isr+0x2a8>)
  40193c:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  40193e:	f06f 0405 	mvn.w	r4, #5
  401942:	e096      	b.n	401a72 <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  401944:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  401948:	4641      	mov	r1, r8
  40194a:	4630      	mov	r0, r6
  40194c:	4d81      	ldr	r5, [pc, #516]	; (401b54 <hif_handle_isr+0x2a0>)
  40194e:	47a8      	blx	r5
  401950:	4883      	ldr	r0, [pc, #524]	; (401b60 <hif_handle_isr+0x2ac>)
  401952:	47a8      	blx	r5
  401954:	4881      	ldr	r0, [pc, #516]	; (401b5c <hif_handle_isr+0x2a8>)
  401956:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  401958:	2001      	movs	r0, #1
  40195a:	4b82      	ldr	r3, [pc, #520]	; (401b64 <hif_handle_isr+0x2b0>)
  40195c:	4798      	blx	r3
  40195e:	e088      	b.n	401a72 <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  401960:	f240 12df 	movw	r2, #479	; 0x1df
  401964:	4641      	mov	r1, r8
  401966:	4630      	mov	r0, r6
  401968:	4c7a      	ldr	r4, [pc, #488]	; (401b54 <hif_handle_isr+0x2a0>)
  40196a:	47a0      	blx	r4
  40196c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  401970:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401974:	f89d 1011 	ldrb.w	r1, [sp, #17]
  401978:	9100      	str	r1, [sp, #0]
  40197a:	b292      	uxth	r2, r2
  40197c:	4629      	mov	r1, r5
  40197e:	487a      	ldr	r0, [pc, #488]	; (401b68 <hif_handle_isr+0x2b4>)
  401980:	47a0      	blx	r4
  401982:	4876      	ldr	r0, [pc, #472]	; (401b5c <hif_handle_isr+0x2a8>)
  401984:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  401986:	2001      	movs	r0, #1
  401988:	4b76      	ldr	r3, [pc, #472]	; (401b64 <hif_handle_isr+0x2b0>)
  40198a:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  40198c:	f06f 0405 	mvn.w	r4, #5
  401990:	e06f      	b.n	401a72 <hif_handle_isr+0x1be>
						if(pfWifiCb)
  401992:	4b76      	ldr	r3, [pc, #472]	; (401b6c <hif_handle_isr+0x2b8>)
  401994:	681b      	ldr	r3, [r3, #0]
  401996:	b143      	cbz	r3, 4019aa <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401998:	f89d 0011 	ldrb.w	r0, [sp, #17]
  40199c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4019a0:	3908      	subs	r1, #8
  4019a2:	9a05      	ldr	r2, [sp, #20]
  4019a4:	3208      	adds	r2, #8
  4019a6:	b289      	uxth	r1, r1
  4019a8:	4798      	blx	r3
					if(!gu8HifSizeDone)
  4019aa:	4b71      	ldr	r3, [pc, #452]	; (401b70 <hif_handle_isr+0x2bc>)
  4019ac:	781b      	ldrb	r3, [r3, #0]
  4019ae:	2b00      	cmp	r3, #0
  4019b0:	d15c      	bne.n	401a6c <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  4019b2:	f240 2209 	movw	r2, #521	; 0x209
  4019b6:	4641      	mov	r1, r8
  4019b8:	4630      	mov	r0, r6
  4019ba:	4c66      	ldr	r4, [pc, #408]	; (401b54 <hif_handle_isr+0x2a0>)
  4019bc:	47a0      	blx	r4
  4019be:	486d      	ldr	r0, [pc, #436]	; (401b74 <hif_handle_isr+0x2c0>)
  4019c0:	47a0      	blx	r4
  4019c2:	4866      	ldr	r0, [pc, #408]	; (401b5c <hif_handle_isr+0x2a8>)
  4019c4:	47a0      	blx	r4
						ret = hif_set_rx_done();
  4019c6:	4b6c      	ldr	r3, [pc, #432]	; (401b78 <hif_handle_isr+0x2c4>)
  4019c8:	4798      	blx	r3
  4019ca:	e04f      	b.n	401a6c <hif_handle_isr+0x1b8>
						if(pfIpCb)
  4019cc:	4b6b      	ldr	r3, [pc, #428]	; (401b7c <hif_handle_isr+0x2c8>)
  4019ce:	681b      	ldr	r3, [r3, #0]
  4019d0:	2b00      	cmp	r3, #0
  4019d2:	d0ea      	beq.n	4019aa <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4019d4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4019d8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4019dc:	3908      	subs	r1, #8
  4019de:	9a05      	ldr	r2, [sp, #20]
  4019e0:	3208      	adds	r2, #8
  4019e2:	b289      	uxth	r1, r1
  4019e4:	4798      	blx	r3
  4019e6:	e7e0      	b.n	4019aa <hif_handle_isr+0xf6>
						if(pfOtaCb)
  4019e8:	4b65      	ldr	r3, [pc, #404]	; (401b80 <hif_handle_isr+0x2cc>)
  4019ea:	681b      	ldr	r3, [r3, #0]
  4019ec:	2b00      	cmp	r3, #0
  4019ee:	d0dc      	beq.n	4019aa <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4019f0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4019f4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4019f8:	3908      	subs	r1, #8
  4019fa:	9a05      	ldr	r2, [sp, #20]
  4019fc:	3208      	adds	r2, #8
  4019fe:	b289      	uxth	r1, r1
  401a00:	4798      	blx	r3
  401a02:	e7d2      	b.n	4019aa <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  401a04:	4b5f      	ldr	r3, [pc, #380]	; (401b84 <hif_handle_isr+0x2d0>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	2b00      	cmp	r3, #0
  401a0a:	d0ce      	beq.n	4019aa <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401a0c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401a10:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  401a14:	3908      	subs	r1, #8
  401a16:	9a05      	ldr	r2, [sp, #20]
  401a18:	3208      	adds	r2, #8
  401a1a:	b289      	uxth	r1, r1
  401a1c:	4798      	blx	r3
  401a1e:	e7c4      	b.n	4019aa <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  401a20:	4b59      	ldr	r3, [pc, #356]	; (401b88 <hif_handle_isr+0x2d4>)
  401a22:	681b      	ldr	r3, [r3, #0]
  401a24:	2b00      	cmp	r3, #0
  401a26:	d0c0      	beq.n	4019aa <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401a28:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401a2c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  401a30:	3908      	subs	r1, #8
  401a32:	9a05      	ldr	r2, [sp, #20]
  401a34:	3208      	adds	r2, #8
  401a36:	b289      	uxth	r1, r1
  401a38:	4798      	blx	r3
  401a3a:	e7b6      	b.n	4019aa <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  401a3c:	f240 2211 	movw	r2, #529	; 0x211
  401a40:	4641      	mov	r1, r8
  401a42:	4630      	mov	r0, r6
  401a44:	4c43      	ldr	r4, [pc, #268]	; (401b54 <hif_handle_isr+0x2a0>)
  401a46:	47a0      	blx	r4
  401a48:	4850      	ldr	r0, [pc, #320]	; (401b8c <hif_handle_isr+0x2d8>)
  401a4a:	47a0      	blx	r4
  401a4c:	4843      	ldr	r0, [pc, #268]	; (401b5c <hif_handle_isr+0x2a8>)
  401a4e:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  401a50:	f06f 0401 	mvn.w	r4, #1
  401a54:	e02f      	b.n	401ab6 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  401a56:	f44f 7206 	mov.w	r2, #536	; 0x218
  401a5a:	4641      	mov	r1, r8
  401a5c:	4630      	mov	r0, r6
  401a5e:	4c3d      	ldr	r4, [pc, #244]	; (401b54 <hif_handle_isr+0x2a0>)
  401a60:	47a0      	blx	r4
  401a62:	9903      	ldr	r1, [sp, #12]
  401a64:	484a      	ldr	r0, [pc, #296]	; (401b90 <hif_handle_isr+0x2dc>)
  401a66:	47a0      	blx	r4
  401a68:	483c      	ldr	r0, [pc, #240]	; (401b5c <hif_handle_isr+0x2a8>)
  401a6a:	47a0      	blx	r4
	ret = hif_chip_sleep();
  401a6c:	4b49      	ldr	r3, [pc, #292]	; (401b94 <hif_handle_isr+0x2e0>)
  401a6e:	4798      	blx	r3
  401a70:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  401a72:	bb04      	cbnz	r4, 401ab6 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  401a74:	f899 3000 	ldrb.w	r3, [r9]
  401a78:	2b00      	cmp	r3, #0
  401a7a:	f000 809f 	beq.w	401bbc <hif_handle_isr+0x308>
		gu8Interrupt--;
  401a7e:	f899 3000 	ldrb.w	r3, [r9]
  401a82:	3b01      	subs	r3, #1
  401a84:	b2db      	uxtb	r3, r3
  401a86:	f889 3000 	strb.w	r3, [r9]
  401a8a:	e01f      	b.n	401acc <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  401a8c:	f240 221e 	movw	r2, #542	; 0x21e
  401a90:	4641      	mov	r1, r8
  401a92:	4630      	mov	r0, r6
  401a94:	4d2f      	ldr	r5, [pc, #188]	; (401b54 <hif_handle_isr+0x2a0>)
  401a96:	47a8      	blx	r5
  401a98:	483f      	ldr	r0, [pc, #252]	; (401b98 <hif_handle_isr+0x2e4>)
  401a9a:	47a8      	blx	r5
  401a9c:	482f      	ldr	r0, [pc, #188]	; (401b5c <hif_handle_isr+0x2a8>)
  401a9e:	47a8      	blx	r5
  401aa0:	e009      	b.n	401ab6 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  401aa2:	f44f 7209 	mov.w	r2, #548	; 0x224
  401aa6:	4641      	mov	r1, r8
  401aa8:	4630      	mov	r0, r6
  401aaa:	4d2a      	ldr	r5, [pc, #168]	; (401b54 <hif_handle_isr+0x2a0>)
  401aac:	47a8      	blx	r5
  401aae:	483b      	ldr	r0, [pc, #236]	; (401b9c <hif_handle_isr+0x2e8>)
  401ab0:	47a8      	blx	r5
  401ab2:	482a      	ldr	r0, [pc, #168]	; (401b5c <hif_handle_isr+0x2a8>)
  401ab4:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  401ab6:	f240 2243 	movw	r2, #579	; 0x243
  401aba:	4939      	ldr	r1, [pc, #228]	; (401ba0 <hif_handle_isr+0x2ec>)
  401abc:	4630      	mov	r0, r6
  401abe:	4d25      	ldr	r5, [pc, #148]	; (401b54 <hif_handle_isr+0x2a0>)
  401ac0:	47a8      	blx	r5
  401ac2:	4621      	mov	r1, r4
  401ac4:	4837      	ldr	r0, [pc, #220]	; (401ba4 <hif_handle_isr+0x2f0>)
  401ac6:	47a8      	blx	r5
  401ac8:	4824      	ldr	r0, [pc, #144]	; (401b5c <hif_handle_isr+0x2a8>)
  401aca:	47a8      	blx	r5
	ret = hif_chip_wake();
  401acc:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  401ace:	4604      	mov	r4, r0
  401ad0:	2800      	cmp	r0, #0
  401ad2:	d1e6      	bne.n	401aa2 <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  401ad4:	a903      	add	r1, sp, #12
  401ad6:	f241 0070 	movw	r0, #4208	; 0x1070
  401ada:	4b33      	ldr	r3, [pc, #204]	; (401ba8 <hif_handle_isr+0x2f4>)
  401adc:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  401ade:	4604      	mov	r4, r0
  401ae0:	2800      	cmp	r0, #0
  401ae2:	d1d3      	bne.n	401a8c <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  401ae4:	9b03      	ldr	r3, [sp, #12]
  401ae6:	f013 0f01 	tst.w	r3, #1
  401aea:	d0b4      	beq.n	401a56 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  401aec:	4b1d      	ldr	r3, [pc, #116]	; (401b64 <hif_handle_isr+0x2b0>)
  401aee:	4798      	blx	r3
				reg &= ~(1<<0);
  401af0:	9903      	ldr	r1, [sp, #12]
  401af2:	f021 0101 	bic.w	r1, r1, #1
  401af6:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  401af8:	f241 0070 	movw	r0, #4208	; 0x1070
  401afc:	4b2b      	ldr	r3, [pc, #172]	; (401bac <hif_handle_isr+0x2f8>)
  401afe:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  401b00:	4604      	mov	r4, r0
  401b02:	2800      	cmp	r0, #0
  401b04:	d1d7      	bne.n	401ab6 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  401b06:	2200      	movs	r2, #0
  401b08:	4b19      	ldr	r3, [pc, #100]	; (401b70 <hif_handle_isr+0x2bc>)
  401b0a:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  401b0c:	9d03      	ldr	r5, [sp, #12]
  401b0e:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  401b12:	2d00      	cmp	r5, #0
  401b14:	d092      	beq.n	401a3c <hif_handle_isr+0x188>
					uint32 address = 0;
  401b16:	a906      	add	r1, sp, #24
  401b18:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  401b1c:	f241 0084 	movw	r0, #4228	; 0x1084
  401b20:	4b21      	ldr	r3, [pc, #132]	; (401ba8 <hif_handle_isr+0x2f4>)
  401b22:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  401b24:	4604      	mov	r4, r0
  401b26:	2800      	cmp	r0, #0
  401b28:	f43f aece 	beq.w	4018c8 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  401b2c:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  401b30:	4641      	mov	r1, r8
  401b32:	4630      	mov	r0, r6
  401b34:	4d07      	ldr	r5, [pc, #28]	; (401b54 <hif_handle_isr+0x2a0>)
  401b36:	47a8      	blx	r5
  401b38:	481d      	ldr	r0, [pc, #116]	; (401bb0 <hif_handle_isr+0x2fc>)
  401b3a:	47a8      	blx	r5
  401b3c:	4807      	ldr	r0, [pc, #28]	; (401b5c <hif_handle_isr+0x2a8>)
  401b3e:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  401b40:	2001      	movs	r0, #1
  401b42:	4b08      	ldr	r3, [pc, #32]	; (401b64 <hif_handle_isr+0x2b0>)
  401b44:	4798      	blx	r3
  401b46:	e794      	b.n	401a72 <hif_handle_isr+0x1be>
  401b48:	004015ed 	.word	0x004015ed
  401b4c:	0040b4a0 	.word	0x0040b4a0
  401b50:	004028b1 	.word	0x004028b1
  401b54:	004051cd 	.word	0x004051cd
  401b58:	0040b58c 	.word	0x0040b58c
  401b5c:	0040c1dc 	.word	0x0040c1dc
  401b60:	0040b534 	.word	0x0040b534
  401b64:	00401305 	.word	0x00401305
  401b68:	0040b54c 	.word	0x0040b54c
  401b6c:	20400a58 	.word	0x20400a58
  401b70:	20400a42 	.word	0x20400a42
  401b74:	0040b5a4 	.word	0x0040b5a4
  401b78:	004015ad 	.word	0x004015ad
  401b7c:	20400a4c 	.word	0x20400a4c
  401b80:	20400a50 	.word	0x20400a50
  401b84:	20400a44 	.word	0x20400a44
  401b88:	20400a54 	.word	0x20400a54
  401b8c:	0040b5c8 	.word	0x0040b5c8
  401b90:	0040b5dc 	.word	0x0040b5dc
  401b94:	00401649 	.word	0x00401649
  401b98:	0040b5f8 	.word	0x0040b5f8
  401b9c:	0040b61c 	.word	0x0040b61c
  401ba0:	0040b4e0 	.word	0x0040b4e0
  401ba4:	0040b63c 	.word	0x0040b63c
  401ba8:	00402899 	.word	0x00402899
  401bac:	004028a5 	.word	0x004028a5
  401bb0:	0040b50c 	.word	0x0040b50c
  401bb4:	20400a43 	.word	0x20400a43
  401bb8:	0040b4d8 	.word	0x0040b4d8
			}
		}
	}

	return ret;
}
  401bbc:	2000      	movs	r0, #0
  401bbe:	b007      	add	sp, #28
  401bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00401bc4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  401bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401bc8:	b083      	sub	sp, #12
  401bca:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  401bcc:	2a00      	cmp	r2, #0
  401bce:	bf18      	it	ne
  401bd0:	2900      	cmpne	r1, #0
  401bd2:	d003      	beq.n	401bdc <hif_receive+0x18>
  401bd4:	4605      	mov	r5, r0
  401bd6:	460f      	mov	r7, r1
  401bd8:	4616      	mov	r6, r2
  401bda:	b9b8      	cbnz	r0, 401c0c <hif_receive+0x48>
	{
		if(isDone)
  401bdc:	b14c      	cbz	r4, 401bf2 <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  401bde:	2201      	movs	r2, #1
  401be0:	4b32      	ldr	r3, [pc, #200]	; (401cac <hif_receive+0xe8>)
  401be2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  401be4:	4b32      	ldr	r3, [pc, #200]	; (401cb0 <hif_receive+0xec>)
  401be6:	4798      	blx	r3
  401be8:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  401bea:	4618      	mov	r0, r3
  401bec:	b003      	add	sp, #12
  401bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  401bf2:	f240 2269 	movw	r2, #617	; 0x269
  401bf6:	492f      	ldr	r1, [pc, #188]	; (401cb4 <hif_receive+0xf0>)
  401bf8:	482f      	ldr	r0, [pc, #188]	; (401cb8 <hif_receive+0xf4>)
  401bfa:	4c30      	ldr	r4, [pc, #192]	; (401cbc <hif_receive+0xf8>)
  401bfc:	47a0      	blx	r4
  401bfe:	4830      	ldr	r0, [pc, #192]	; (401cc0 <hif_receive+0xfc>)
  401c00:	47a0      	blx	r4
  401c02:	4830      	ldr	r0, [pc, #192]	; (401cc4 <hif_receive+0x100>)
  401c04:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401c06:	f06f 030b 	mvn.w	r3, #11
  401c0a:	e7ee      	b.n	401bea <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  401c0c:	4669      	mov	r1, sp
  401c0e:	f241 0070 	movw	r0, #4208	; 0x1070
  401c12:	4b2d      	ldr	r3, [pc, #180]	; (401cc8 <hif_receive+0x104>)
  401c14:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401c16:	4603      	mov	r3, r0
  401c18:	2800      	cmp	r0, #0
  401c1a:	d1e6      	bne.n	401bea <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  401c1c:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  401c20:	a901      	add	r1, sp, #4
  401c22:	f241 0084 	movw	r0, #4228	; 0x1084
  401c26:	4b28      	ldr	r3, [pc, #160]	; (401cc8 <hif_receive+0x104>)
  401c28:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401c2a:	4603      	mov	r3, r0
  401c2c:	2800      	cmp	r0, #0
  401c2e:	d1dc      	bne.n	401bea <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  401c30:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  401c34:	4546      	cmp	r6, r8
  401c36:	d81c      	bhi.n	401c72 <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  401c38:	9b01      	ldr	r3, [sp, #4]
  401c3a:	429d      	cmp	r5, r3
  401c3c:	d328      	bcc.n	401c90 <hif_receive+0xcc>
  401c3e:	eb05 0906 	add.w	r9, r5, r6
  401c42:	4443      	add	r3, r8
  401c44:	4599      	cmp	r9, r3
  401c46:	d823      	bhi.n	401c90 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  401c48:	4632      	mov	r2, r6
  401c4a:	4639      	mov	r1, r7
  401c4c:	4628      	mov	r0, r5
  401c4e:	4b1f      	ldr	r3, [pc, #124]	; (401ccc <hif_receive+0x108>)
  401c50:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401c52:	4603      	mov	r3, r0
  401c54:	2800      	cmp	r0, #0
  401c56:	d1c8      	bne.n	401bea <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  401c58:	9a01      	ldr	r2, [sp, #4]
  401c5a:	4490      	add	r8, r2
  401c5c:	45c8      	cmp	r8, r9
  401c5e:	d001      	beq.n	401c64 <hif_receive+0xa0>
  401c60:	2c00      	cmp	r4, #0
  401c62:	d0c2      	beq.n	401bea <hif_receive+0x26>
		gu8HifSizeDone = 1;
  401c64:	2201      	movs	r2, #1
  401c66:	4b11      	ldr	r3, [pc, #68]	; (401cac <hif_receive+0xe8>)
  401c68:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  401c6a:	4b11      	ldr	r3, [pc, #68]	; (401cb0 <hif_receive+0xec>)
  401c6c:	4798      	blx	r3
  401c6e:	4603      	mov	r3, r0
  401c70:	e7bb      	b.n	401bea <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  401c72:	f240 227a 	movw	r2, #634	; 0x27a
  401c76:	490f      	ldr	r1, [pc, #60]	; (401cb4 <hif_receive+0xf0>)
  401c78:	480f      	ldr	r0, [pc, #60]	; (401cb8 <hif_receive+0xf4>)
  401c7a:	4c10      	ldr	r4, [pc, #64]	; (401cbc <hif_receive+0xf8>)
  401c7c:	47a0      	blx	r4
  401c7e:	4642      	mov	r2, r8
  401c80:	4631      	mov	r1, r6
  401c82:	4813      	ldr	r0, [pc, #76]	; (401cd0 <hif_receive+0x10c>)
  401c84:	47a0      	blx	r4
  401c86:	480f      	ldr	r0, [pc, #60]	; (401cc4 <hif_receive+0x100>)
  401c88:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401c8a:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  401c8e:	e7ac      	b.n	401bea <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  401c90:	f44f 7220 	mov.w	r2, #640	; 0x280
  401c94:	4907      	ldr	r1, [pc, #28]	; (401cb4 <hif_receive+0xf0>)
  401c96:	4808      	ldr	r0, [pc, #32]	; (401cb8 <hif_receive+0xf4>)
  401c98:	4c08      	ldr	r4, [pc, #32]	; (401cbc <hif_receive+0xf8>)
  401c9a:	47a0      	blx	r4
  401c9c:	480d      	ldr	r0, [pc, #52]	; (401cd4 <hif_receive+0x110>)
  401c9e:	47a0      	blx	r4
  401ca0:	4808      	ldr	r0, [pc, #32]	; (401cc4 <hif_receive+0x100>)
  401ca2:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  401ca4:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  401ca8:	e79f      	b.n	401bea <hif_receive+0x26>
  401caa:	bf00      	nop
  401cac:	20400a42 	.word	0x20400a42
  401cb0:	004015ad 	.word	0x004015ad
  401cb4:	0040b4f0 	.word	0x0040b4f0
  401cb8:	0040b4a0 	.word	0x0040b4a0
  401cbc:	004051cd 	.word	0x004051cd
  401cc0:	0040b66c 	.word	0x0040b66c
  401cc4:	0040c1dc 	.word	0x0040c1dc
  401cc8:	00402899 	.word	0x00402899
  401ccc:	004028b1 	.word	0x004028b1
  401cd0:	0040b68c 	.word	0x0040b68c
  401cd4:	0040b6d0 	.word	0x0040b6d0

00401cd8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  401cd8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  401cda:	1e43      	subs	r3, r0, #1
  401cdc:	2b06      	cmp	r3, #6
  401cde:	d81d      	bhi.n	401d1c <hif_register_cb+0x44>
  401ce0:	e8df f003 	tbb	[pc, r3]
  401ce4:	0c100408 	.word	0x0c100408
  401ce8:	141c      	.short	0x141c
  401cea:	18          	.byte	0x18
  401ceb:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  401cec:	4b13      	ldr	r3, [pc, #76]	; (401d3c <hif_register_cb+0x64>)
  401cee:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401cf0:	2000      	movs	r0, #0
			break;
  401cf2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  401cf4:	4b12      	ldr	r3, [pc, #72]	; (401d40 <hif_register_cb+0x68>)
  401cf6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401cf8:	2000      	movs	r0, #0
			break;
  401cfa:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  401cfc:	4b11      	ldr	r3, [pc, #68]	; (401d44 <hif_register_cb+0x6c>)
  401cfe:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401d00:	2000      	movs	r0, #0
			break;
  401d02:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  401d04:	4b10      	ldr	r3, [pc, #64]	; (401d48 <hif_register_cb+0x70>)
  401d06:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401d08:	2000      	movs	r0, #0
			break;
  401d0a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  401d0c:	4b0f      	ldr	r3, [pc, #60]	; (401d4c <hif_register_cb+0x74>)
  401d0e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401d10:	2000      	movs	r0, #0
			break;
  401d12:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  401d14:	4b0e      	ldr	r3, [pc, #56]	; (401d50 <hif_register_cb+0x78>)
  401d16:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  401d18:	2000      	movs	r0, #0
			break;
  401d1a:	bd38      	pop	{r3, r4, r5, pc}
  401d1c:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  401d1e:	f240 22b9 	movw	r2, #697	; 0x2b9
  401d22:	490c      	ldr	r1, [pc, #48]	; (401d54 <hif_register_cb+0x7c>)
  401d24:	480c      	ldr	r0, [pc, #48]	; (401d58 <hif_register_cb+0x80>)
  401d26:	4d0d      	ldr	r5, [pc, #52]	; (401d5c <hif_register_cb+0x84>)
  401d28:	47a8      	blx	r5
  401d2a:	4621      	mov	r1, r4
  401d2c:	480c      	ldr	r0, [pc, #48]	; (401d60 <hif_register_cb+0x88>)
  401d2e:	47a8      	blx	r5
  401d30:	480c      	ldr	r0, [pc, #48]	; (401d64 <hif_register_cb+0x8c>)
  401d32:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  401d34:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  401d38:	bd38      	pop	{r3, r4, r5, pc}
  401d3a:	bf00      	nop
  401d3c:	20400a4c 	.word	0x20400a4c
  401d40:	20400a58 	.word	0x20400a58
  401d44:	20400a50 	.word	0x20400a50
  401d48:	20400a48 	.word	0x20400a48
  401d4c:	20400a44 	.word	0x20400a44
  401d50:	20400a54 	.word	0x20400a54
  401d54:	0040b4fc 	.word	0x0040b4fc
  401d58:	0040b4a0 	.word	0x0040b4a0
  401d5c:	004051cd 	.word	0x004051cd
  401d60:	0040b714 	.word	0x0040b714
  401d64:	0040c1dc 	.word	0x0040c1dc

00401d68 <hif_init>:
{
  401d68:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  401d6a:	2400      	movs	r4, #0
  401d6c:	4b09      	ldr	r3, [pc, #36]	; (401d94 <hif_init+0x2c>)
  401d6e:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  401d70:	4b09      	ldr	r3, [pc, #36]	; (401d98 <hif_init+0x30>)
  401d72:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  401d74:	4b09      	ldr	r3, [pc, #36]	; (401d9c <hif_init+0x34>)
  401d76:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  401d78:	4b09      	ldr	r3, [pc, #36]	; (401da0 <hif_init+0x38>)
  401d7a:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  401d7c:	4b09      	ldr	r3, [pc, #36]	; (401da4 <hif_init+0x3c>)
  401d7e:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  401d80:	4809      	ldr	r0, [pc, #36]	; (401da8 <hif_init+0x40>)
  401d82:	4b0a      	ldr	r3, [pc, #40]	; (401dac <hif_init+0x44>)
  401d84:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  401d86:	490a      	ldr	r1, [pc, #40]	; (401db0 <hif_init+0x48>)
  401d88:	2003      	movs	r0, #3
  401d8a:	4b0a      	ldr	r3, [pc, #40]	; (401db4 <hif_init+0x4c>)
  401d8c:	4798      	blx	r3
}
  401d8e:	4620      	mov	r0, r4
  401d90:	bd10      	pop	{r4, pc}
  401d92:	bf00      	nop
  401d94:	20400a58 	.word	0x20400a58
  401d98:	20400a4c 	.word	0x20400a4c
  401d9c:	20400a41 	.word	0x20400a41
  401da0:	20400a40 	.word	0x20400a40
  401da4:	20400a43 	.word	0x20400a43
  401da8:	00401599 	.word	0x00401599
  401dac:	00401285 	.word	0x00401285
  401db0:	004015a9 	.word	0x004015a9
  401db4:	00401cd9 	.word	0x00401cd9

00401db8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  401db8:	b530      	push	{r4, r5, lr}
  401dba:	b09f      	sub	sp, #124	; 0x7c
  401dbc:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  401dbe:	282c      	cmp	r0, #44	; 0x2c
  401dc0:	d02e      	beq.n	401e20 <m2m_wifi_cb+0x68>
  401dc2:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  401dc4:	281b      	cmp	r0, #27
  401dc6:	d03b      	beq.n	401e40 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  401dc8:	2806      	cmp	r0, #6
  401dca:	d049      	beq.n	401e60 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  401dcc:	280e      	cmp	r0, #14
  401dce:	d025      	beq.n	401e1c <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  401dd0:	2832      	cmp	r0, #50	; 0x32
  401dd2:	d055      	beq.n	401e80 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  401dd4:	282f      	cmp	r0, #47	; 0x2f
  401dd6:	d063      	beq.n	401ea0 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  401dd8:	2834      	cmp	r0, #52	; 0x34
  401dda:	d076      	beq.n	401eca <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  401ddc:	2811      	cmp	r0, #17
  401dde:	f000 8093 	beq.w	401f08 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  401de2:	2813      	cmp	r0, #19
  401de4:	f000 80a8 	beq.w	401f38 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  401de8:	2804      	cmp	r0, #4
  401dea:	f000 80b7 	beq.w	401f5c <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  401dee:	2865      	cmp	r0, #101	; 0x65
  401df0:	f000 80c6 	beq.w	401f80 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  401df4:	2809      	cmp	r0, #9
  401df6:	f000 80d5 	beq.w	401fa4 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  401dfa:	282a      	cmp	r0, #42	; 0x2a
  401dfc:	f000 80e4 	beq.w	401fc8 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  401e00:	2820      	cmp	r0, #32
  401e02:	f000 80f3 	beq.w	401fec <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  401e06:	f44f 7295 	mov.w	r2, #298	; 0x12a
  401e0a:	4986      	ldr	r1, [pc, #536]	; (402024 <m2m_wifi_cb+0x26c>)
  401e0c:	4886      	ldr	r0, [pc, #536]	; (402028 <m2m_wifi_cb+0x270>)
  401e0e:	4d87      	ldr	r5, [pc, #540]	; (40202c <m2m_wifi_cb+0x274>)
  401e10:	47a8      	blx	r5
  401e12:	4621      	mov	r1, r4
  401e14:	4886      	ldr	r0, [pc, #536]	; (402030 <m2m_wifi_cb+0x278>)
  401e16:	47a8      	blx	r5
  401e18:	4886      	ldr	r0, [pc, #536]	; (402034 <m2m_wifi_cb+0x27c>)
  401e1a:	47a8      	blx	r5
	}
}
  401e1c:	b01f      	add	sp, #124	; 0x7c
  401e1e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  401e20:	2300      	movs	r3, #0
  401e22:	2204      	movs	r2, #4
  401e24:	a903      	add	r1, sp, #12
  401e26:	4628      	mov	r0, r5
  401e28:	4c83      	ldr	r4, [pc, #524]	; (402038 <m2m_wifi_cb+0x280>)
  401e2a:	47a0      	blx	r4
  401e2c:	2800      	cmp	r0, #0
  401e2e:	d1f5      	bne.n	401e1c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401e30:	4b82      	ldr	r3, [pc, #520]	; (40203c <m2m_wifi_cb+0x284>)
  401e32:	681b      	ldr	r3, [r3, #0]
  401e34:	2b00      	cmp	r3, #0
  401e36:	d0f1      	beq.n	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  401e38:	a903      	add	r1, sp, #12
  401e3a:	202c      	movs	r0, #44	; 0x2c
  401e3c:	4798      	blx	r3
  401e3e:	e7ed      	b.n	401e1c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  401e40:	2300      	movs	r3, #0
  401e42:	2208      	movs	r2, #8
  401e44:	a903      	add	r1, sp, #12
  401e46:	4628      	mov	r0, r5
  401e48:	4c7b      	ldr	r4, [pc, #492]	; (402038 <m2m_wifi_cb+0x280>)
  401e4a:	47a0      	blx	r4
  401e4c:	2800      	cmp	r0, #0
  401e4e:	d1e5      	bne.n	401e1c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401e50:	4b7a      	ldr	r3, [pc, #488]	; (40203c <m2m_wifi_cb+0x284>)
  401e52:	681b      	ldr	r3, [r3, #0]
  401e54:	2b00      	cmp	r3, #0
  401e56:	d0e1      	beq.n	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  401e58:	a903      	add	r1, sp, #12
  401e5a:	201b      	movs	r0, #27
  401e5c:	4798      	blx	r3
  401e5e:	e7dd      	b.n	401e1c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  401e60:	2301      	movs	r3, #1
  401e62:	2230      	movs	r2, #48	; 0x30
  401e64:	a903      	add	r1, sp, #12
  401e66:	4628      	mov	r0, r5
  401e68:	4c73      	ldr	r4, [pc, #460]	; (402038 <m2m_wifi_cb+0x280>)
  401e6a:	47a0      	blx	r4
  401e6c:	2800      	cmp	r0, #0
  401e6e:	d1d5      	bne.n	401e1c <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  401e70:	4b72      	ldr	r3, [pc, #456]	; (40203c <m2m_wifi_cb+0x284>)
  401e72:	681b      	ldr	r3, [r3, #0]
  401e74:	2b00      	cmp	r3, #0
  401e76:	d0d1      	beq.n	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  401e78:	a903      	add	r1, sp, #12
  401e7a:	2006      	movs	r0, #6
  401e7c:	4798      	blx	r3
  401e7e:	e7cd      	b.n	401e1c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  401e80:	2300      	movs	r3, #0
  401e82:	2210      	movs	r2, #16
  401e84:	a903      	add	r1, sp, #12
  401e86:	4628      	mov	r0, r5
  401e88:	4c6b      	ldr	r4, [pc, #428]	; (402038 <m2m_wifi_cb+0x280>)
  401e8a:	47a0      	blx	r4
  401e8c:	2800      	cmp	r0, #0
  401e8e:	d1c5      	bne.n	401e1c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401e90:	4b6a      	ldr	r3, [pc, #424]	; (40203c <m2m_wifi_cb+0x284>)
  401e92:	681b      	ldr	r3, [r3, #0]
  401e94:	2b00      	cmp	r3, #0
  401e96:	d0c1      	beq.n	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  401e98:	a903      	add	r1, sp, #12
  401e9a:	2032      	movs	r0, #50	; 0x32
  401e9c:	4798      	blx	r3
  401e9e:	e7bd      	b.n	401e1c <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  401ea0:	2264      	movs	r2, #100	; 0x64
  401ea2:	2100      	movs	r1, #0
  401ea4:	a803      	add	r0, sp, #12
  401ea6:	4b66      	ldr	r3, [pc, #408]	; (402040 <m2m_wifi_cb+0x288>)
  401ea8:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  401eaa:	2300      	movs	r3, #0
  401eac:	2264      	movs	r2, #100	; 0x64
  401eae:	a903      	add	r1, sp, #12
  401eb0:	4628      	mov	r0, r5
  401eb2:	4c61      	ldr	r4, [pc, #388]	; (402038 <m2m_wifi_cb+0x280>)
  401eb4:	47a0      	blx	r4
  401eb6:	2800      	cmp	r0, #0
  401eb8:	d1b0      	bne.n	401e1c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401eba:	4b60      	ldr	r3, [pc, #384]	; (40203c <m2m_wifi_cb+0x284>)
  401ebc:	681b      	ldr	r3, [r3, #0]
  401ebe:	2b00      	cmp	r3, #0
  401ec0:	d0ac      	beq.n	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  401ec2:	a903      	add	r1, sp, #12
  401ec4:	202f      	movs	r0, #47	; 0x2f
  401ec6:	4798      	blx	r3
  401ec8:	e7a8      	b.n	401e1c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  401eca:	2300      	movs	r3, #0
  401ecc:	2204      	movs	r2, #4
  401ece:	a903      	add	r1, sp, #12
  401ed0:	4628      	mov	r0, r5
  401ed2:	4c59      	ldr	r4, [pc, #356]	; (402038 <m2m_wifi_cb+0x280>)
  401ed4:	47a0      	blx	r4
  401ed6:	2800      	cmp	r0, #0
  401ed8:	d1a0      	bne.n	401e1c <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  401eda:	485a      	ldr	r0, [pc, #360]	; (402044 <m2m_wifi_cb+0x28c>)
  401edc:	4c53      	ldr	r4, [pc, #332]	; (40202c <m2m_wifi_cb+0x274>)
  401ede:	47a0      	blx	r4
  401ee0:	9903      	ldr	r1, [sp, #12]
  401ee2:	b2cb      	uxtb	r3, r1
  401ee4:	9300      	str	r3, [sp, #0]
  401ee6:	f3c1 2307 	ubfx	r3, r1, #8, #8
  401eea:	f3c1 4207 	ubfx	r2, r1, #16, #8
  401eee:	0e09      	lsrs	r1, r1, #24
  401ef0:	4855      	ldr	r0, [pc, #340]	; (402048 <m2m_wifi_cb+0x290>)
  401ef2:	47a0      	blx	r4
  401ef4:	484f      	ldr	r0, [pc, #316]	; (402034 <m2m_wifi_cb+0x27c>)
  401ef6:	47a0      	blx	r4
			if (gpfAppWifiCb)
  401ef8:	4b50      	ldr	r3, [pc, #320]	; (40203c <m2m_wifi_cb+0x284>)
  401efa:	681b      	ldr	r3, [r3, #0]
  401efc:	2b00      	cmp	r3, #0
  401efe:	d08d      	beq.n	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  401f00:	2100      	movs	r1, #0
  401f02:	2034      	movs	r0, #52	; 0x34
  401f04:	4798      	blx	r3
  401f06:	e789      	b.n	401e1c <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  401f08:	2300      	movs	r3, #0
  401f0a:	4a50      	ldr	r2, [pc, #320]	; (40204c <m2m_wifi_cb+0x294>)
  401f0c:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  401f0e:	2204      	movs	r2, #4
  401f10:	a903      	add	r1, sp, #12
  401f12:	4628      	mov	r0, r5
  401f14:	4c48      	ldr	r4, [pc, #288]	; (402038 <m2m_wifi_cb+0x280>)
  401f16:	47a0      	blx	r4
  401f18:	2800      	cmp	r0, #0
  401f1a:	f47f af7f 	bne.w	401e1c <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  401f1e:	f89d 200c 	ldrb.w	r2, [sp, #12]
  401f22:	4b4b      	ldr	r3, [pc, #300]	; (402050 <m2m_wifi_cb+0x298>)
  401f24:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  401f26:	4b45      	ldr	r3, [pc, #276]	; (40203c <m2m_wifi_cb+0x284>)
  401f28:	681b      	ldr	r3, [r3, #0]
  401f2a:	2b00      	cmp	r3, #0
  401f2c:	f43f af76 	beq.w	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  401f30:	a903      	add	r1, sp, #12
  401f32:	2011      	movs	r0, #17
  401f34:	4798      	blx	r3
  401f36:	e771      	b.n	401e1c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  401f38:	2300      	movs	r3, #0
  401f3a:	222c      	movs	r2, #44	; 0x2c
  401f3c:	a903      	add	r1, sp, #12
  401f3e:	4628      	mov	r0, r5
  401f40:	4c3d      	ldr	r4, [pc, #244]	; (402038 <m2m_wifi_cb+0x280>)
  401f42:	47a0      	blx	r4
  401f44:	2800      	cmp	r0, #0
  401f46:	f47f af69 	bne.w	401e1c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401f4a:	4b3c      	ldr	r3, [pc, #240]	; (40203c <m2m_wifi_cb+0x284>)
  401f4c:	681b      	ldr	r3, [r3, #0]
  401f4e:	2b00      	cmp	r3, #0
  401f50:	f43f af64 	beq.w	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  401f54:	a903      	add	r1, sp, #12
  401f56:	2013      	movs	r0, #19
  401f58:	4798      	blx	r3
  401f5a:	e75f      	b.n	401e1c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401f5c:	2300      	movs	r3, #0
  401f5e:	2204      	movs	r2, #4
  401f60:	a91c      	add	r1, sp, #112	; 0x70
  401f62:	4628      	mov	r0, r5
  401f64:	4c34      	ldr	r4, [pc, #208]	; (402038 <m2m_wifi_cb+0x280>)
  401f66:	47a0      	blx	r4
  401f68:	2800      	cmp	r0, #0
  401f6a:	f47f af57 	bne.w	401e1c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401f6e:	4b33      	ldr	r3, [pc, #204]	; (40203c <m2m_wifi_cb+0x284>)
  401f70:	681b      	ldr	r3, [r3, #0]
  401f72:	2b00      	cmp	r3, #0
  401f74:	f43f af52 	beq.w	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  401f78:	a91c      	add	r1, sp, #112	; 0x70
  401f7a:	2004      	movs	r0, #4
  401f7c:	4798      	blx	r3
  401f7e:	e74d      	b.n	401e1c <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401f80:	2300      	movs	r3, #0
  401f82:	2204      	movs	r2, #4
  401f84:	a91c      	add	r1, sp, #112	; 0x70
  401f86:	4628      	mov	r0, r5
  401f88:	4c2b      	ldr	r4, [pc, #172]	; (402038 <m2m_wifi_cb+0x280>)
  401f8a:	47a0      	blx	r4
  401f8c:	2800      	cmp	r0, #0
  401f8e:	f47f af45 	bne.w	401e1c <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  401f92:	4b2a      	ldr	r3, [pc, #168]	; (40203c <m2m_wifi_cb+0x284>)
  401f94:	681b      	ldr	r3, [r3, #0]
  401f96:	2b00      	cmp	r3, #0
  401f98:	f43f af40 	beq.w	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  401f9c:	a91c      	add	r1, sp, #112	; 0x70
  401f9e:	2065      	movs	r0, #101	; 0x65
  401fa0:	4798      	blx	r3
  401fa2:	e73b      	b.n	401e1c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  401fa4:	2301      	movs	r3, #1
  401fa6:	2264      	movs	r2, #100	; 0x64
  401fa8:	a903      	add	r1, sp, #12
  401faa:	4628      	mov	r0, r5
  401fac:	4c22      	ldr	r4, [pc, #136]	; (402038 <m2m_wifi_cb+0x280>)
  401fae:	47a0      	blx	r4
  401fb0:	2800      	cmp	r0, #0
  401fb2:	f47f af33 	bne.w	401e1c <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  401fb6:	4b21      	ldr	r3, [pc, #132]	; (40203c <m2m_wifi_cb+0x284>)
  401fb8:	681b      	ldr	r3, [r3, #0]
  401fba:	2b00      	cmp	r3, #0
  401fbc:	f43f af2e 	beq.w	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  401fc0:	a903      	add	r1, sp, #12
  401fc2:	2009      	movs	r0, #9
  401fc4:	4798      	blx	r3
  401fc6:	e729      	b.n	401e1c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  401fc8:	2301      	movs	r3, #1
  401fca:	2204      	movs	r2, #4
  401fcc:	a903      	add	r1, sp, #12
  401fce:	4628      	mov	r0, r5
  401fd0:	4c19      	ldr	r4, [pc, #100]	; (402038 <m2m_wifi_cb+0x280>)
  401fd2:	47a0      	blx	r4
  401fd4:	2800      	cmp	r0, #0
  401fd6:	f47f af21 	bne.w	401e1c <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  401fda:	4b18      	ldr	r3, [pc, #96]	; (40203c <m2m_wifi_cb+0x284>)
  401fdc:	681b      	ldr	r3, [r3, #0]
  401fde:	2b00      	cmp	r3, #0
  401fe0:	f43f af1c 	beq.w	401e1c <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  401fe4:	a903      	add	r1, sp, #12
  401fe6:	202a      	movs	r0, #42	; 0x2a
  401fe8:	4798      	blx	r3
  401fea:	e717      	b.n	401e1c <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  401fec:	2300      	movs	r3, #0
  401fee:	2208      	movs	r2, #8
  401ff0:	a903      	add	r1, sp, #12
  401ff2:	4628      	mov	r0, r5
  401ff4:	4c10      	ldr	r4, [pc, #64]	; (402038 <m2m_wifi_cb+0x280>)
  401ff6:	47a0      	blx	r4
  401ff8:	2800      	cmp	r0, #0
  401ffa:	f47f af0f 	bne.w	401e1c <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  401ffe:	2301      	movs	r3, #1
  402000:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402004:	9903      	ldr	r1, [sp, #12]
  402006:	f105 0008 	add.w	r0, r5, #8
  40200a:	47a0      	blx	r4
  40200c:	2800      	cmp	r0, #0
  40200e:	f47f af05 	bne.w	401e1c <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  402012:	4b0a      	ldr	r3, [pc, #40]	; (40203c <m2m_wifi_cb+0x284>)
  402014:	681b      	ldr	r3, [r3, #0]
  402016:	2b00      	cmp	r3, #0
  402018:	f43f af00 	beq.w	401e1c <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  40201c:	a903      	add	r1, sp, #12
  40201e:	2020      	movs	r0, #32
  402020:	4798      	blx	r3
  402022:	e6fb      	b.n	401e1c <m2m_wifi_cb+0x64>
  402024:	0040b740 	.word	0x0040b740
  402028:	0040b4a0 	.word	0x0040b4a0
  40202c:	004051cd 	.word	0x004051cd
  402030:	0040b79c 	.word	0x0040b79c
  402034:	0040c1dc 	.word	0x0040c1dc
  402038:	00401bc5 	.word	0x00401bc5
  40203c:	20400a5c 	.word	0x20400a5c
  402040:	00401571 	.word	0x00401571
  402044:	0040b770 	.word	0x0040b770
  402048:	0040b77c 	.word	0x0040b77c
  40204c:	20400a61 	.word	0x20400a61
  402050:	20400a60 	.word	0x20400a60

00402054 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  402054:	b5f0      	push	{r4, r5, r6, r7, lr}
  402056:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  402058:	2301      	movs	r3, #1
  40205a:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  40205e:	2800      	cmp	r0, #0
  402060:	d050      	beq.n	402104 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  402062:	6802      	ldr	r2, [r0, #0]
  402064:	4b29      	ldr	r3, [pc, #164]	; (40210c <m2m_wifi_init+0xb8>)
  402066:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  402068:	2200      	movs	r2, #0
  40206a:	4b29      	ldr	r3, [pc, #164]	; (402110 <m2m_wifi_init+0xbc>)
  40206c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  40206e:	f10d 0007 	add.w	r0, sp, #7
  402072:	4b28      	ldr	r3, [pc, #160]	; (402114 <m2m_wifi_init+0xc0>)
  402074:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  402076:	4604      	mov	r4, r0
  402078:	b110      	cbz	r0, 402080 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  40207a:	4620      	mov	r0, r4
  40207c:	b00b      	add	sp, #44	; 0x2c
  40207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  402080:	4b25      	ldr	r3, [pc, #148]	; (402118 <m2m_wifi_init+0xc4>)
  402082:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  402084:	4604      	mov	r4, r0
  402086:	2800      	cmp	r0, #0
  402088:	d138      	bne.n	4020fc <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40208a:	4924      	ldr	r1, [pc, #144]	; (40211c <m2m_wifi_init+0xc8>)
  40208c:	2001      	movs	r0, #1
  40208e:	4b24      	ldr	r3, [pc, #144]	; (402120 <m2m_wifi_init+0xcc>)
  402090:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  402092:	a802      	add	r0, sp, #8
  402094:	4b23      	ldr	r3, [pc, #140]	; (402124 <m2m_wifi_init+0xd0>)
  402096:	4798      	blx	r3
  402098:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40209a:	4f23      	ldr	r7, [pc, #140]	; (402128 <m2m_wifi_init+0xd4>)
  40209c:	4638      	mov	r0, r7
  40209e:	4d23      	ldr	r5, [pc, #140]	; (40212c <m2m_wifi_init+0xd8>)
  4020a0:	47a8      	blx	r5
  4020a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
  4020a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
  4020aa:	f89d 100c 	ldrb.w	r1, [sp, #12]
  4020ae:	4820      	ldr	r0, [pc, #128]	; (402130 <m2m_wifi_init+0xdc>)
  4020b0:	47a8      	blx	r5
  4020b2:	4e20      	ldr	r6, [pc, #128]	; (402134 <m2m_wifi_init+0xe0>)
  4020b4:	4630      	mov	r0, r6
  4020b6:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  4020b8:	4638      	mov	r0, r7
  4020ba:	47a8      	blx	r5
  4020bc:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4020c0:	f89d 2010 	ldrb.w	r2, [sp, #16]
  4020c4:	f89d 100f 	ldrb.w	r1, [sp, #15]
  4020c8:	481b      	ldr	r0, [pc, #108]	; (402138 <m2m_wifi_init+0xe4>)
  4020ca:	47a8      	blx	r5
  4020cc:	4630      	mov	r0, r6
  4020ce:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  4020d0:	4638      	mov	r0, r7
  4020d2:	47a8      	blx	r5
  4020d4:	2300      	movs	r3, #0
  4020d6:	2203      	movs	r2, #3
  4020d8:	2113      	movs	r1, #19
  4020da:	4818      	ldr	r0, [pc, #96]	; (40213c <m2m_wifi_init+0xe8>)
  4020dc:	47a8      	blx	r5
  4020de:	4630      	mov	r0, r6
  4020e0:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4020e2:	f114 0f0d 	cmn.w	r4, #13
  4020e6:	d1c8      	bne.n	40207a <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  4020e8:	f240 12d5 	movw	r2, #469	; 0x1d5
  4020ec:	4914      	ldr	r1, [pc, #80]	; (402140 <m2m_wifi_init+0xec>)
  4020ee:	4815      	ldr	r0, [pc, #84]	; (402144 <m2m_wifi_init+0xf0>)
  4020f0:	47a8      	blx	r5
  4020f2:	4815      	ldr	r0, [pc, #84]	; (402148 <m2m_wifi_init+0xf4>)
  4020f4:	47a8      	blx	r5
  4020f6:	4630      	mov	r0, r6
  4020f8:	47a8      	blx	r5
  4020fa:	e7be      	b.n	40207a <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  4020fc:	2000      	movs	r0, #0
  4020fe:	4b13      	ldr	r3, [pc, #76]	; (40214c <m2m_wifi_init+0xf8>)
  402100:	4798      	blx	r3
  402102:	e7ba      	b.n	40207a <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  402104:	f06f 040b 	mvn.w	r4, #11
  402108:	e7b7      	b.n	40207a <m2m_wifi_init+0x26>
  40210a:	bf00      	nop
  40210c:	20400a5c 	.word	0x20400a5c
  402110:	20400a61 	.word	0x20400a61
  402114:	00402a19 	.word	0x00402a19
  402118:	00401d69 	.word	0x00401d69
  40211c:	00401db9 	.word	0x00401db9
  402120:	00401cd9 	.word	0x00401cd9
  402124:	00402969 	.word	0x00402969
  402128:	0040b770 	.word	0x0040b770
  40212c:	004051cd 	.word	0x004051cd
  402130:	0040b85c 	.word	0x0040b85c
  402134:	0040c1dc 	.word	0x0040c1dc
  402138:	0040b878 	.word	0x0040b878
  40213c:	0040b894 	.word	0x0040b894
  402140:	0040b74c 	.word	0x0040b74c
  402144:	0040b4a0 	.word	0x0040b4a0
  402148:	0040b8b0 	.word	0x0040b8b0
  40214c:	00402ae5 	.word	0x00402ae5

00402150 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  402150:	b508      	push	{r3, lr}
	return hif_handle_isr();
  402152:	4b01      	ldr	r3, [pc, #4]	; (402158 <m2m_wifi_handle_events+0x8>)
  402154:	4798      	blx	r3
}
  402156:	bd08      	pop	{r3, pc}
  402158:	004018b5 	.word	0x004018b5

0040215c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  40215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402160:	b0a0      	sub	sp, #128	; 0x80
  402162:	4680      	mov	r8, r0
  402164:	460d      	mov	r5, r1
  402166:	4614      	mov	r4, r2
  402168:	461e      	mov	r6, r3
  40216a:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  40216e:	2a01      	cmp	r2, #1
  402170:	d003      	beq.n	40217a <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  402172:	2b00      	cmp	r3, #0
  402174:	d037      	beq.n	4021e6 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402176:	2a02      	cmp	r2, #2
  402178:	d042      	beq.n	402200 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  40217a:	1e6b      	subs	r3, r5, #1
  40217c:	b2db      	uxtb	r3, r3
  40217e:	2b1f      	cmp	r3, #31
  402180:	d875      	bhi.n	40226e <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  402182:	2fff      	cmp	r7, #255	; 0xff
  402184:	d001      	beq.n	40218a <m2m_wifi_connect_sc+0x2e>
  402186:	2f0d      	cmp	r7, #13
  402188:	d87e      	bhi.n	402288 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  40218a:	462a      	mov	r2, r5
  40218c:	4641      	mov	r1, r8
  40218e:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  402192:	4b77      	ldr	r3, [pc, #476]	; (402370 <m2m_wifi_connect_sc+0x214>)
  402194:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  402196:	ab20      	add	r3, sp, #128	; 0x80
  402198:	441d      	add	r5, r3
  40219a:	2300      	movs	r3, #0
  40219c:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4021a0:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4021a4:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4021a8:	3300      	adds	r3, #0
  4021aa:	bf18      	it	ne
  4021ac:	2301      	movne	r3, #1
  4021ae:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4021b2:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4021b6:	2c03      	cmp	r4, #3
  4021b8:	d073      	beq.n	4022a2 <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4021ba:	2c02      	cmp	r4, #2
  4021bc:	f000 80aa 	beq.w	402314 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  4021c0:	2c04      	cmp	r4, #4
  4021c2:	f000 80c1 	beq.w	402348 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4021c6:	2c01      	cmp	r4, #1
  4021c8:	f040 80c4 	bne.w	402354 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4021cc:	2300      	movs	r3, #0
  4021ce:	9302      	str	r3, [sp, #8]
  4021d0:	9301      	str	r3, [sp, #4]
  4021d2:	9300      	str	r3, [sp, #0]
  4021d4:	236c      	movs	r3, #108	; 0x6c
  4021d6:	aa05      	add	r2, sp, #20
  4021d8:	2128      	movs	r1, #40	; 0x28
  4021da:	2001      	movs	r0, #1
  4021dc:	4c65      	ldr	r4, [pc, #404]	; (402374 <m2m_wifi_connect_sc+0x218>)
  4021de:	47a0      	blx	r4

ERR1:
	return ret;
}
  4021e0:	b020      	add	sp, #128	; 0x80
  4021e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  4021e6:	f240 2203 	movw	r2, #515	; 0x203
  4021ea:	4963      	ldr	r1, [pc, #396]	; (402378 <m2m_wifi_connect_sc+0x21c>)
  4021ec:	4863      	ldr	r0, [pc, #396]	; (40237c <m2m_wifi_connect_sc+0x220>)
  4021ee:	4c64      	ldr	r4, [pc, #400]	; (402380 <m2m_wifi_connect_sc+0x224>)
  4021f0:	47a0      	blx	r4
  4021f2:	4864      	ldr	r0, [pc, #400]	; (402384 <m2m_wifi_connect_sc+0x228>)
  4021f4:	47a0      	blx	r4
  4021f6:	4864      	ldr	r0, [pc, #400]	; (402388 <m2m_wifi_connect_sc+0x22c>)
  4021f8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4021fa:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4021fe:	e7ef      	b.n	4021e0 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402200:	4618      	mov	r0, r3
  402202:	4b62      	ldr	r3, [pc, #392]	; (40238c <m2m_wifi_connect_sc+0x230>)
  402204:	4798      	blx	r3
  402206:	2840      	cmp	r0, #64	; 0x40
  402208:	d1b7      	bne.n	40217a <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  40220a:	7833      	ldrb	r3, [r6, #0]
  40220c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402210:	b2d2      	uxtb	r2, r2
  402212:	2a06      	cmp	r2, #6
  402214:	d91e      	bls.n	402254 <m2m_wifi_connect_sc+0xf8>
  402216:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40221a:	b2d2      	uxtb	r2, r2
  40221c:	2a36      	cmp	r2, #54	; 0x36
  40221e:	d819      	bhi.n	402254 <m2m_wifi_connect_sc+0xf8>
  402220:	3b47      	subs	r3, #71	; 0x47
  402222:	b2db      	uxtb	r3, r3
  402224:	2b19      	cmp	r3, #25
  402226:	d915      	bls.n	402254 <m2m_wifi_connect_sc+0xf8>
  402228:	4631      	mov	r1, r6
  40222a:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  40222e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402232:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402236:	b2d2      	uxtb	r2, r2
  402238:	2a06      	cmp	r2, #6
  40223a:	d90b      	bls.n	402254 <m2m_wifi_connect_sc+0xf8>
  40223c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402240:	b2d2      	uxtb	r2, r2
  402242:	2a36      	cmp	r2, #54	; 0x36
  402244:	d806      	bhi.n	402254 <m2m_wifi_connect_sc+0xf8>
  402246:	3b47      	subs	r3, #71	; 0x47
  402248:	b2db      	uxtb	r3, r3
  40224a:	2b19      	cmp	r3, #25
  40224c:	d902      	bls.n	402254 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  40224e:	4288      	cmp	r0, r1
  402250:	d1ed      	bne.n	40222e <m2m_wifi_connect_sc+0xd2>
  402252:	e792      	b.n	40217a <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  402254:	f240 220f 	movw	r2, #527	; 0x20f
  402258:	4947      	ldr	r1, [pc, #284]	; (402378 <m2m_wifi_connect_sc+0x21c>)
  40225a:	4848      	ldr	r0, [pc, #288]	; (40237c <m2m_wifi_connect_sc+0x220>)
  40225c:	4c48      	ldr	r4, [pc, #288]	; (402380 <m2m_wifi_connect_sc+0x224>)
  40225e:	47a0      	blx	r4
  402260:	484b      	ldr	r0, [pc, #300]	; (402390 <m2m_wifi_connect_sc+0x234>)
  402262:	47a0      	blx	r4
  402264:	4848      	ldr	r0, [pc, #288]	; (402388 <m2m_wifi_connect_sc+0x22c>)
  402266:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  402268:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  40226c:	e7b8      	b.n	4021e0 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  40226e:	f240 2219 	movw	r2, #537	; 0x219
  402272:	4941      	ldr	r1, [pc, #260]	; (402378 <m2m_wifi_connect_sc+0x21c>)
  402274:	4841      	ldr	r0, [pc, #260]	; (40237c <m2m_wifi_connect_sc+0x220>)
  402276:	4c42      	ldr	r4, [pc, #264]	; (402380 <m2m_wifi_connect_sc+0x224>)
  402278:	47a0      	blx	r4
  40227a:	4846      	ldr	r0, [pc, #280]	; (402394 <m2m_wifi_connect_sc+0x238>)
  40227c:	47a0      	blx	r4
  40227e:	4842      	ldr	r0, [pc, #264]	; (402388 <m2m_wifi_connect_sc+0x22c>)
  402280:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402282:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  402286:	e7ab      	b.n	4021e0 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  402288:	f240 2222 	movw	r2, #546	; 0x222
  40228c:	493a      	ldr	r1, [pc, #232]	; (402378 <m2m_wifi_connect_sc+0x21c>)
  40228e:	483b      	ldr	r0, [pc, #236]	; (40237c <m2m_wifi_connect_sc+0x220>)
  402290:	4c3b      	ldr	r4, [pc, #236]	; (402380 <m2m_wifi_connect_sc+0x224>)
  402292:	47a0      	blx	r4
  402294:	4840      	ldr	r0, [pc, #256]	; (402398 <m2m_wifi_connect_sc+0x23c>)
  402296:	47a0      	blx	r4
  402298:	483b      	ldr	r0, [pc, #236]	; (402388 <m2m_wifi_connect_sc+0x22c>)
  40229a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40229c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4022a0:	e79e      	b.n	4021e0 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4022a2:	7833      	ldrb	r3, [r6, #0]
  4022a4:	3b01      	subs	r3, #1
  4022a6:	b2db      	uxtb	r3, r3
  4022a8:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4022ac:	2b03      	cmp	r3, #3
  4022ae:	d813      	bhi.n	4022d8 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  4022b0:	7872      	ldrb	r2, [r6, #1]
  4022b2:	1e53      	subs	r3, r2, #1
  4022b4:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  4022b8:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  4022bc:	2b0b      	cmp	r3, #11
  4022be:	d11a      	bne.n	4022f6 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  4022c0:	1cb1      	adds	r1, r6, #2
  4022c2:	f10d 0016 	add.w	r0, sp, #22
  4022c6:	4b2a      	ldr	r3, [pc, #168]	; (402370 <m2m_wifi_connect_sc+0x214>)
  4022c8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  4022ca:	7873      	ldrb	r3, [r6, #1]
  4022cc:	aa20      	add	r2, sp, #128	; 0x80
  4022ce:	4413      	add	r3, r2
  4022d0:	2200      	movs	r2, #0
  4022d2:	f803 2c6a 	strb.w	r2, [r3, #-106]
  4022d6:	e779      	b.n	4021cc <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4022d8:	f240 2239 	movw	r2, #569	; 0x239
  4022dc:	4926      	ldr	r1, [pc, #152]	; (402378 <m2m_wifi_connect_sc+0x21c>)
  4022de:	4827      	ldr	r0, [pc, #156]	; (40237c <m2m_wifi_connect_sc+0x220>)
  4022e0:	4c27      	ldr	r4, [pc, #156]	; (402380 <m2m_wifi_connect_sc+0x224>)
  4022e2:	47a0      	blx	r4
  4022e4:	f89d 1014 	ldrb.w	r1, [sp, #20]
  4022e8:	482c      	ldr	r0, [pc, #176]	; (40239c <m2m_wifi_connect_sc+0x240>)
  4022ea:	47a0      	blx	r4
  4022ec:	4826      	ldr	r0, [pc, #152]	; (402388 <m2m_wifi_connect_sc+0x22c>)
  4022ee:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4022f0:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4022f4:	e774      	b.n	4021e0 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  4022f6:	f44f 7210 	mov.w	r2, #576	; 0x240
  4022fa:	491f      	ldr	r1, [pc, #124]	; (402378 <m2m_wifi_connect_sc+0x21c>)
  4022fc:	481f      	ldr	r0, [pc, #124]	; (40237c <m2m_wifi_connect_sc+0x220>)
  4022fe:	4c20      	ldr	r4, [pc, #128]	; (402380 <m2m_wifi_connect_sc+0x224>)
  402300:	47a0      	blx	r4
  402302:	f89d 1015 	ldrb.w	r1, [sp, #21]
  402306:	4826      	ldr	r0, [pc, #152]	; (4023a0 <m2m_wifi_connect_sc+0x244>)
  402308:	47a0      	blx	r4
  40230a:	481f      	ldr	r0, [pc, #124]	; (402388 <m2m_wifi_connect_sc+0x22c>)
  40230c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40230e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402312:	e765      	b.n	4021e0 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  402314:	4630      	mov	r0, r6
  402316:	4b1d      	ldr	r3, [pc, #116]	; (40238c <m2m_wifi_connect_sc+0x230>)
  402318:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  40231a:	1e43      	subs	r3, r0, #1
  40231c:	b29b      	uxth	r3, r3
  40231e:	2b3f      	cmp	r3, #63	; 0x3f
  402320:	d805      	bhi.n	40232e <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  402322:	1c42      	adds	r2, r0, #1
  402324:	4631      	mov	r1, r6
  402326:	a805      	add	r0, sp, #20
  402328:	4b11      	ldr	r3, [pc, #68]	; (402370 <m2m_wifi_connect_sc+0x214>)
  40232a:	4798      	blx	r3
  40232c:	e74e      	b.n	4021cc <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  40232e:	f240 224f 	movw	r2, #591	; 0x24f
  402332:	4911      	ldr	r1, [pc, #68]	; (402378 <m2m_wifi_connect_sc+0x21c>)
  402334:	4811      	ldr	r0, [pc, #68]	; (40237c <m2m_wifi_connect_sc+0x220>)
  402336:	4c12      	ldr	r4, [pc, #72]	; (402380 <m2m_wifi_connect_sc+0x224>)
  402338:	47a0      	blx	r4
  40233a:	481a      	ldr	r0, [pc, #104]	; (4023a4 <m2m_wifi_connect_sc+0x248>)
  40233c:	47a0      	blx	r4
  40233e:	4812      	ldr	r0, [pc, #72]	; (402388 <m2m_wifi_connect_sc+0x22c>)
  402340:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402342:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402346:	e74b      	b.n	4021e0 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  402348:	223e      	movs	r2, #62	; 0x3e
  40234a:	4631      	mov	r1, r6
  40234c:	a805      	add	r0, sp, #20
  40234e:	4b08      	ldr	r3, [pc, #32]	; (402370 <m2m_wifi_connect_sc+0x214>)
  402350:	4798      	blx	r3
  402352:	e73b      	b.n	4021cc <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  402354:	f240 225f 	movw	r2, #607	; 0x25f
  402358:	4907      	ldr	r1, [pc, #28]	; (402378 <m2m_wifi_connect_sc+0x21c>)
  40235a:	4808      	ldr	r0, [pc, #32]	; (40237c <m2m_wifi_connect_sc+0x220>)
  40235c:	4c08      	ldr	r4, [pc, #32]	; (402380 <m2m_wifi_connect_sc+0x224>)
  40235e:	47a0      	blx	r4
  402360:	4811      	ldr	r0, [pc, #68]	; (4023a8 <m2m_wifi_connect_sc+0x24c>)
  402362:	47a0      	blx	r4
  402364:	4808      	ldr	r0, [pc, #32]	; (402388 <m2m_wifi_connect_sc+0x22c>)
  402366:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402368:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40236c:	e738      	b.n	4021e0 <m2m_wifi_connect_sc+0x84>
  40236e:	bf00      	nop
  402370:	0040155d 	.word	0x0040155d
  402374:	004016d5 	.word	0x004016d5
  402378:	0040b75c 	.word	0x0040b75c
  40237c:	0040b4a0 	.word	0x0040b4a0
  402380:	004051cd 	.word	0x004051cd
  402384:	0040b7b0 	.word	0x0040b7b0
  402388:	0040c1dc 	.word	0x0040c1dc
  40238c:	0040157f 	.word	0x0040157f
  402390:	0040b7c4 	.word	0x0040b7c4
  402394:	0040b7d4 	.word	0x0040b7d4
  402398:	0040b7e8 	.word	0x0040b7e8
  40239c:	0040b7f4 	.word	0x0040b7f4
  4023a0:	0040b810 	.word	0x0040b810
  4023a4:	0040b82c 	.word	0x0040b82c
  4023a8:	0040b848 	.word	0x0040b848

004023ac <m2m_wifi_connect>:
{
  4023ac:	b510      	push	{r4, lr}
  4023ae:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  4023b0:	2400      	movs	r4, #0
  4023b2:	9401      	str	r4, [sp, #4]
  4023b4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4023b8:	9400      	str	r4, [sp, #0]
  4023ba:	4c02      	ldr	r4, [pc, #8]	; (4023c4 <m2m_wifi_connect+0x18>)
  4023bc:	47a0      	blx	r4
}
  4023be:	b002      	add	sp, #8
  4023c0:	bd10      	pop	{r4, pc}
  4023c2:	bf00      	nop
  4023c4:	0040215d 	.word	0x0040215d

004023c8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  4023c8:	2000      	movs	r0, #0
  4023ca:	4770      	bx	lr

004023cc <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4023cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4023ce:	b083      	sub	sp, #12
  4023d0:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4023d2:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4023d6:	4e0a      	ldr	r6, [pc, #40]	; (402400 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4023d8:	4f0a      	ldr	r7, [pc, #40]	; (402404 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  4023da:	4621      	mov	r1, r4
  4023dc:	4628      	mov	r0, r5
  4023de:	47b0      	blx	r6
		if(val32 != 0) {		
  4023e0:	b154      	cbz	r4, 4023f8 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4023e2:	a902      	add	r1, sp, #8
  4023e4:	2300      	movs	r3, #0
  4023e6:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4023ea:	4628      	mov	r0, r5
  4023ec:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4023ee:	2800      	cmp	r0, #0
  4023f0:	d1f3      	bne.n	4023da <chip_apply_conf+0xe>
				if(reg == val32)
  4023f2:	9b01      	ldr	r3, [sp, #4]
  4023f4:	429c      	cmp	r4, r3
  4023f6:	d1f0      	bne.n	4023da <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4023f8:	2000      	movs	r0, #0
  4023fa:	b003      	add	sp, #12
  4023fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4023fe:	bf00      	nop
  402400:	004028a5 	.word	0x004028a5
  402404:	00402899 	.word	0x00402899

00402408 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  402408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40240c:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  40240e:	2001      	movs	r0, #1
  402410:	4b3c      	ldr	r3, [pc, #240]	; (402504 <nm_clkless_wake+0xfc>)
  402412:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  402414:	a901      	add	r1, sp, #4
  402416:	2001      	movs	r0, #1
  402418:	4b3b      	ldr	r3, [pc, #236]	; (402508 <nm_clkless_wake+0x100>)
  40241a:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  40241c:	4682      	mov	sl, r0
  40241e:	b938      	cbnz	r0, 402430 <nm_clkless_wake+0x28>
  402420:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  402422:	f04f 0801 	mov.w	r8, #1
  402426:	f8df 9108 	ldr.w	r9, [pc, #264]	; 402530 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  40242a:	4d36      	ldr	r5, [pc, #216]	; (402504 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  40242c:	4f37      	ldr	r7, [pc, #220]	; (40250c <nm_clkless_wake+0x104>)
  40242e:	e020      	b.n	402472 <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  402430:	2272      	movs	r2, #114	; 0x72
  402432:	4937      	ldr	r1, [pc, #220]	; (402510 <nm_clkless_wake+0x108>)
  402434:	4837      	ldr	r0, [pc, #220]	; (402514 <nm_clkless_wake+0x10c>)
  402436:	4c38      	ldr	r4, [pc, #224]	; (402518 <nm_clkless_wake+0x110>)
  402438:	47a0      	blx	r4
  40243a:	4838      	ldr	r0, [pc, #224]	; (40251c <nm_clkless_wake+0x114>)
  40243c:	47a0      	blx	r4
  40243e:	4838      	ldr	r0, [pc, #224]	; (402520 <nm_clkless_wake+0x118>)
  402440:	47a0      	blx	r4
		goto _WAKE_EXIT;
  402442:	e009      	b.n	402458 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  402444:	2296      	movs	r2, #150	; 0x96
  402446:	4932      	ldr	r1, [pc, #200]	; (402510 <nm_clkless_wake+0x108>)
  402448:	4832      	ldr	r0, [pc, #200]	; (402514 <nm_clkless_wake+0x10c>)
  40244a:	4c33      	ldr	r4, [pc, #204]	; (402518 <nm_clkless_wake+0x110>)
  40244c:	47a0      	blx	r4
  40244e:	4835      	ldr	r0, [pc, #212]	; (402524 <nm_clkless_wake+0x11c>)
  402450:	47a0      	blx	r4
  402452:	4833      	ldr	r0, [pc, #204]	; (402520 <nm_clkless_wake+0x118>)
  402454:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402456:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  402458:	4650      	mov	r0, sl
  40245a:	b003      	add	sp, #12
  40245c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  402460:	9901      	ldr	r1, [sp, #4]
  402462:	f041 0102 	orr.w	r1, r1, #2
  402466:	4640      	mov	r0, r8
  402468:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  40246a:	9b00      	ldr	r3, [sp, #0]
  40246c:	f013 0f04 	tst.w	r3, #4
  402470:	d1f2      	bne.n	402458 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  402472:	9901      	ldr	r1, [sp, #4]
  402474:	f041 0102 	orr.w	r1, r1, #2
  402478:	4640      	mov	r0, r8
  40247a:	47c8      	blx	r9
		nm_bsp_sleep(1);
  40247c:	4640      	mov	r0, r8
  40247e:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402480:	4669      	mov	r1, sp
  402482:	4b29      	ldr	r3, [pc, #164]	; (402528 <nm_clkless_wake+0x120>)
  402484:	6818      	ldr	r0, [r3, #0]
  402486:	4b20      	ldr	r3, [pc, #128]	; (402508 <nm_clkless_wake+0x100>)
  402488:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40248a:	b908      	cbnz	r0, 402490 <nm_clkless_wake+0x88>
  40248c:	9b00      	ldr	r3, [sp, #0]
  40248e:	b9bb      	cbnz	r3, 4024c0 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  402490:	4e25      	ldr	r6, [pc, #148]	; (402528 <nm_clkless_wake+0x120>)
  402492:	230e      	movs	r3, #14
  402494:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  402496:	4640      	mov	r0, r8
  402498:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40249a:	4669      	mov	r1, sp
  40249c:	6830      	ldr	r0, [r6, #0]
  40249e:	4b1a      	ldr	r3, [pc, #104]	; (402508 <nm_clkless_wake+0x100>)
  4024a0:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4024a2:	b908      	cbnz	r0, 4024a8 <nm_clkless_wake+0xa0>
  4024a4:	9b00      	ldr	r3, [sp, #0]
  4024a6:	b95b      	cbnz	r3, 4024c0 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  4024a8:	4e1f      	ldr	r6, [pc, #124]	; (402528 <nm_clkless_wake+0x120>)
  4024aa:	2313      	movs	r3, #19
  4024ac:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  4024ae:	4640      	mov	r0, r8
  4024b0:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4024b2:	4669      	mov	r1, sp
  4024b4:	6830      	ldr	r0, [r6, #0]
  4024b6:	4b14      	ldr	r3, [pc, #80]	; (402508 <nm_clkless_wake+0x100>)
  4024b8:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4024ba:	4606      	mov	r6, r0
  4024bc:	2800      	cmp	r0, #0
  4024be:	d1c1      	bne.n	402444 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4024c0:	4e19      	ldr	r6, [pc, #100]	; (402528 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4024c2:	9b00      	ldr	r3, [sp, #0]
  4024c4:	f013 0f04 	tst.w	r3, #4
  4024c8:	d1c6      	bne.n	402458 <nm_clkless_wake+0x50>
  4024ca:	3401      	adds	r4, #1
  4024cc:	fba7 2304 	umull	r2, r3, r7, r4
  4024d0:	085b      	lsrs	r3, r3, #1
  4024d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4024d6:	429c      	cmp	r4, r3
  4024d8:	d1c2      	bne.n	402460 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  4024da:	2002      	movs	r0, #2
  4024dc:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4024de:	4669      	mov	r1, sp
  4024e0:	6830      	ldr	r0, [r6, #0]
  4024e2:	4b09      	ldr	r3, [pc, #36]	; (402508 <nm_clkless_wake+0x100>)
  4024e4:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  4024e6:	9b00      	ldr	r3, [sp, #0]
  4024e8:	f013 0f04 	tst.w	r3, #4
  4024ec:	d1e9      	bne.n	4024c2 <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4024ee:	22aa      	movs	r2, #170	; 0xaa
  4024f0:	4907      	ldr	r1, [pc, #28]	; (402510 <nm_clkless_wake+0x108>)
  4024f2:	4808      	ldr	r0, [pc, #32]	; (402514 <nm_clkless_wake+0x10c>)
  4024f4:	f8df b020 	ldr.w	fp, [pc, #32]	; 402518 <nm_clkless_wake+0x110>
  4024f8:	47d8      	blx	fp
  4024fa:	480c      	ldr	r0, [pc, #48]	; (40252c <nm_clkless_wake+0x124>)
  4024fc:	47d8      	blx	fp
  4024fe:	4808      	ldr	r0, [pc, #32]	; (402520 <nm_clkless_wake+0x118>)
  402500:	47d8      	blx	fp
  402502:	e7de      	b.n	4024c2 <nm_clkless_wake+0xba>
  402504:	004011b9 	.word	0x004011b9
  402508:	00402899 	.word	0x00402899
  40250c:	aaaaaaab 	.word	0xaaaaaaab
  402510:	0040b8cc 	.word	0x0040b8cc
  402514:	0040b4a0 	.word	0x0040b4a0
  402518:	004051cd 	.word	0x004051cd
  40251c:	0040b93c 	.word	0x0040b93c
  402520:	0040c1dc 	.word	0x0040c1dc
  402524:	0040b95c 	.word	0x0040b95c
  402528:	20400034 	.word	0x20400034
  40252c:	0040b97c 	.word	0x0040b97c
  402530:	004028a5 	.word	0x004028a5

00402534 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  402534:	b500      	push	{lr}
  402536:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  402538:	a901      	add	r1, sp, #4
  40253a:	f241 4008 	movw	r0, #5128	; 0x1408
  40253e:	4b15      	ldr	r3, [pc, #84]	; (402594 <enable_interrupts+0x60>)
  402540:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402542:	b9e8      	cbnz	r0, 402580 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  402544:	9901      	ldr	r1, [sp, #4]
  402546:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  40254a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  40254c:	f241 4008 	movw	r0, #5128	; 0x1408
  402550:	4b11      	ldr	r3, [pc, #68]	; (402598 <enable_interrupts+0x64>)
  402552:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402554:	b9b8      	cbnz	r0, 402586 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  402556:	a901      	add	r1, sp, #4
  402558:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40255c:	4b0d      	ldr	r3, [pc, #52]	; (402594 <enable_interrupts+0x60>)
  40255e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402560:	b9a0      	cbnz	r0, 40258c <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  402562:	9901      	ldr	r1, [sp, #4]
  402564:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402568:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  40256a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40256e:	4b0a      	ldr	r3, [pc, #40]	; (402598 <enable_interrupts+0x64>)
  402570:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402572:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  402574:	bf18      	it	ne
  402576:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  40257a:	b003      	add	sp, #12
  40257c:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  402580:	f06f 0005 	mvn.w	r0, #5
  402584:	e7f9      	b.n	40257a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  402586:	f06f 0005 	mvn.w	r0, #5
  40258a:	e7f6      	b.n	40257a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  40258c:	f06f 0005 	mvn.w	r0, #5
  402590:	e7f3      	b.n	40257a <enable_interrupts+0x46>
  402592:	bf00      	nop
  402594:	00402899 	.word	0x00402899
  402598:	004028a5 	.word	0x004028a5

0040259c <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  40259c:	b510      	push	{r4, lr}
  40259e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  4025a0:	4b25      	ldr	r3, [pc, #148]	; (402638 <nmi_get_chipid+0x9c>)
  4025a2:	681c      	ldr	r4, [r3, #0]
  4025a4:	b124      	cbz	r4, 4025b0 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  4025a6:	4b24      	ldr	r3, [pc, #144]	; (402638 <nmi_get_chipid+0x9c>)
  4025a8:	681c      	ldr	r4, [r3, #0]
}
  4025aa:	4620      	mov	r0, r4
  4025ac:	b002      	add	sp, #8
  4025ae:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  4025b0:	4619      	mov	r1, r3
  4025b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4025b6:	4b21      	ldr	r3, [pc, #132]	; (40263c <nmi_get_chipid+0xa0>)
  4025b8:	4798      	blx	r3
  4025ba:	b118      	cbz	r0, 4025c4 <nmi_get_chipid+0x28>
			chipid = 0;
  4025bc:	2200      	movs	r2, #0
  4025be:	4b1e      	ldr	r3, [pc, #120]	; (402638 <nmi_get_chipid+0x9c>)
  4025c0:	601a      	str	r2, [r3, #0]
			return 0;
  4025c2:	e7f2      	b.n	4025aa <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4025c4:	a901      	add	r1, sp, #4
  4025c6:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4025ca:	4b1c      	ldr	r3, [pc, #112]	; (40263c <nmi_get_chipid+0xa0>)
  4025cc:	4798      	blx	r3
  4025ce:	b118      	cbz	r0, 4025d8 <nmi_get_chipid+0x3c>
			chipid = 0;
  4025d0:	2200      	movs	r2, #0
  4025d2:	4b19      	ldr	r3, [pc, #100]	; (402638 <nmi_get_chipid+0x9c>)
  4025d4:	601a      	str	r2, [r3, #0]
			return 0;
  4025d6:	e7e8      	b.n	4025aa <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4025d8:	4b17      	ldr	r3, [pc, #92]	; (402638 <nmi_get_chipid+0x9c>)
  4025da:	681b      	ldr	r3, [r3, #0]
  4025dc:	4a18      	ldr	r2, [pc, #96]	; (402640 <nmi_get_chipid+0xa4>)
  4025de:	4293      	cmp	r3, r2
  4025e0:	d00d      	beq.n	4025fe <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4025e2:	4a18      	ldr	r2, [pc, #96]	; (402644 <nmi_get_chipid+0xa8>)
  4025e4:	4293      	cmp	r3, r2
  4025e6:	d011      	beq.n	40260c <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  4025e8:	4a17      	ldr	r2, [pc, #92]	; (402648 <nmi_get_chipid+0xac>)
  4025ea:	4293      	cmp	r3, r2
  4025ec:	d018      	beq.n	402620 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  4025ee:	4a12      	ldr	r2, [pc, #72]	; (402638 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  4025f0:	6813      	ldr	r3, [r2, #0]
  4025f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  4025f6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4025fa:	6013      	str	r3, [r2, #0]
  4025fc:	e7d3      	b.n	4025a6 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  4025fe:	9b01      	ldr	r3, [sp, #4]
  402600:	2b01      	cmp	r3, #1
  402602:	d0f4      	beq.n	4025ee <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  402604:	3201      	adds	r2, #1
  402606:	4b0c      	ldr	r3, [pc, #48]	; (402638 <nmi_get_chipid+0x9c>)
  402608:	601a      	str	r2, [r3, #0]
  40260a:	e7f0      	b.n	4025ee <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  40260c:	9b01      	ldr	r3, [sp, #4]
  40260e:	2b03      	cmp	r3, #3
  402610:	d0ed      	beq.n	4025ee <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  402612:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  402614:	bf0c      	ite	eq
  402616:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  402618:	4a0c      	ldrne	r2, [pc, #48]	; (40264c <nmi_get_chipid+0xb0>)
  40261a:	4b07      	ldr	r3, [pc, #28]	; (402638 <nmi_get_chipid+0x9c>)
  40261c:	601a      	str	r2, [r3, #0]
  40261e:	e7e6      	b.n	4025ee <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  402620:	4905      	ldr	r1, [pc, #20]	; (402638 <nmi_get_chipid+0x9c>)
  402622:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  402626:	4b05      	ldr	r3, [pc, #20]	; (40263c <nmi_get_chipid+0xa0>)
  402628:	4798      	blx	r3
  40262a:	2800      	cmp	r0, #0
  40262c:	d0df      	beq.n	4025ee <nmi_get_chipid+0x52>
			chipid = 0;
  40262e:	2200      	movs	r2, #0
  402630:	4b01      	ldr	r3, [pc, #4]	; (402638 <nmi_get_chipid+0x9c>)
  402632:	601a      	str	r2, [r3, #0]
			return 0;
  402634:	e7b9      	b.n	4025aa <nmi_get_chipid+0xe>
  402636:	bf00      	nop
  402638:	20400a64 	.word	0x20400a64
  40263c:	00402899 	.word	0x00402899
  402640:	001002a0 	.word	0x001002a0
  402644:	001002b0 	.word	0x001002b0
  402648:	001000f0 	.word	0x001000f0
  40264c:	001002b2 	.word	0x001002b2

00402650 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  402650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402654:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  402656:	f241 0514 	movw	r5, #4116	; 0x1014
  40265a:	4c28      	ldr	r4, [pc, #160]	; (4026fc <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40265c:	4e28      	ldr	r6, [pc, #160]	; (402700 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40265e:	4628      	mov	r0, r5
  402660:	47a0      	blx	r4
		if (reg & 0x80000000) {
  402662:	2800      	cmp	r0, #0
  402664:	db02      	blt.n	40266c <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  402666:	2001      	movs	r0, #1
  402668:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40266a:	e7f8      	b.n	40265e <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  40266c:	4825      	ldr	r0, [pc, #148]	; (402704 <wait_for_bootrom+0xb4>)
  40266e:	4b23      	ldr	r3, [pc, #140]	; (4026fc <wait_for_bootrom+0xac>)
  402670:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  402672:	f010 0f01 	tst.w	r0, #1
  402676:	d110      	bne.n	40269a <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  402678:	f8df 8084 	ldr.w	r8, [pc, #132]	; 402700 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  40267c:	4e1f      	ldr	r6, [pc, #124]	; (4026fc <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40267e:	4d22      	ldr	r5, [pc, #136]	; (402708 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  402680:	2001      	movs	r0, #1
  402682:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  402684:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  402688:	47b0      	blx	r6
  40268a:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40268c:	462a      	mov	r2, r5
  40268e:	4601      	mov	r1, r0
  402690:	481e      	ldr	r0, [pc, #120]	; (40270c <wait_for_bootrom+0xbc>)
  402692:	4b1f      	ldr	r3, [pc, #124]	; (402710 <wait_for_bootrom+0xc0>)
  402694:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  402696:	42ac      	cmp	r4, r5
  402698:	d1f2      	bne.n	402680 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  40269a:	2f02      	cmp	r7, #2
  40269c:	d019      	beq.n	4026d2 <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40269e:	2f03      	cmp	r7, #3
  4026a0:	d022      	beq.n	4026e8 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4026a2:	2f04      	cmp	r7, #4
  4026a4:	bf14      	ite	ne
  4026a6:	2400      	movne	r4, #0
  4026a8:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4026aa:	4b1a      	ldr	r3, [pc, #104]	; (402714 <wait_for_bootrom+0xc4>)
  4026ac:	4798      	blx	r3
  4026ae:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4026b2:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4026b6:	bf0c      	ite	eq
  4026b8:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4026bc:	4620      	movne	r0, r4
  4026be:	4b16      	ldr	r3, [pc, #88]	; (402718 <wait_for_bootrom+0xc8>)
  4026c0:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4026c2:	4916      	ldr	r1, [pc, #88]	; (40271c <wait_for_bootrom+0xcc>)
  4026c4:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4026c8:	4b15      	ldr	r3, [pc, #84]	; (402720 <wait_for_bootrom+0xd0>)
  4026ca:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4026cc:	2000      	movs	r0, #0
  4026ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4026d2:	4914      	ldr	r1, [pc, #80]	; (402724 <wait_for_bootrom+0xd4>)
  4026d4:	4814      	ldr	r0, [pc, #80]	; (402728 <wait_for_bootrom+0xd8>)
  4026d6:	4c12      	ldr	r4, [pc, #72]	; (402720 <wait_for_bootrom+0xd0>)
  4026d8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4026da:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4026de:	f241 008c 	movw	r0, #4236	; 0x108c
  4026e2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4026e4:	2400      	movs	r4, #0
  4026e6:	e7e0      	b.n	4026aa <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4026e8:	490e      	ldr	r1, [pc, #56]	; (402724 <wait_for_bootrom+0xd4>)
  4026ea:	480f      	ldr	r0, [pc, #60]	; (402728 <wait_for_bootrom+0xd8>)
  4026ec:	4c0c      	ldr	r4, [pc, #48]	; (402720 <wait_for_bootrom+0xd0>)
  4026ee:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4026f0:	2100      	movs	r1, #0
  4026f2:	f241 008c 	movw	r0, #4236	; 0x108c
  4026f6:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4026f8:	2400      	movs	r4, #0
  4026fa:	e7d6      	b.n	4026aa <wait_for_bootrom+0x5a>
  4026fc:	0040288d 	.word	0x0040288d
  402700:	004011b9 	.word	0x004011b9
  402704:	000207bc 	.word	0x000207bc
  402708:	10add09e 	.word	0x10add09e
  40270c:	0040b9a0 	.word	0x0040b9a0
  402710:	004051cd 	.word	0x004051cd
  402714:	0040259d 	.word	0x0040259d
  402718:	004023cd 	.word	0x004023cd
  40271c:	ef522f61 	.word	0xef522f61
  402720:	004028a5 	.word	0x004028a5
  402724:	3c1cd57d 	.word	0x3c1cd57d
  402728:	000207ac 	.word	0x000207ac

0040272c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  40272c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40272e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  402730:	f241 038c 	movw	r3, #4236	; 0x108c
  402734:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  402736:	4b18      	ldr	r3, [pc, #96]	; (402798 <wait_for_firmware_start+0x6c>)
  402738:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  40273a:	3802      	subs	r0, #2
  40273c:	b2c0      	uxtb	r0, r0
  40273e:	2801      	cmp	r0, #1
  402740:	d911      	bls.n	402766 <wait_for_firmware_start+0x3a>
{
  402742:	f04f 34ff 	mov.w	r4, #4294967295
  402746:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  402748:	2702      	movs	r7, #2
  40274a:	4e14      	ldr	r6, [pc, #80]	; (40279c <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  40274c:	4d14      	ldr	r5, [pc, #80]	; (4027a0 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  40274e:	9b00      	ldr	r3, [sp, #0]
  402750:	4298      	cmp	r0, r3
  402752:	d012      	beq.n	40277a <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  402754:	4638      	mov	r0, r7
  402756:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  402758:	9801      	ldr	r0, [sp, #4]
  40275a:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  40275c:	3c01      	subs	r4, #1
  40275e:	d1f6      	bne.n	40274e <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  402760:	f06f 0004 	mvn.w	r0, #4
  402764:	e00e      	b.n	402784 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  402766:	4b0f      	ldr	r3, [pc, #60]	; (4027a4 <wait_for_firmware_start+0x78>)
  402768:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  40276a:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40276e:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  402772:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  402776:	9300      	str	r3, [sp, #0]
  402778:	e7e3      	b.n	402742 <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  40277a:	9a00      	ldr	r2, [sp, #0]
  40277c:	4b06      	ldr	r3, [pc, #24]	; (402798 <wait_for_firmware_start+0x6c>)
  40277e:	429a      	cmp	r2, r3
  402780:	d002      	beq.n	402788 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  402782:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  402784:	b003      	add	sp, #12
  402786:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  402788:	2100      	movs	r1, #0
  40278a:	f241 008c 	movw	r0, #4236	; 0x108c
  40278e:	4b06      	ldr	r3, [pc, #24]	; (4027a8 <wait_for_firmware_start+0x7c>)
  402790:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  402792:	2000      	movs	r0, #0
  402794:	e7f6      	b.n	402784 <wait_for_firmware_start+0x58>
  402796:	bf00      	nop
  402798:	02532636 	.word	0x02532636
  40279c:	004011b9 	.word	0x004011b9
  4027a0:	0040288d 	.word	0x0040288d
  4027a4:	000207ac 	.word	0x000207ac
  4027a8:	004028a5 	.word	0x004028a5

004027ac <chip_deinit>:

sint8 chip_deinit(void)
{
  4027ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4027ae:	b083      	sub	sp, #12
	uint32 reg = 0;
  4027b0:	a902      	add	r1, sp, #8
  4027b2:	2300      	movs	r3, #0
  4027b4:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4027b8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4027bc:	4b24      	ldr	r3, [pc, #144]	; (402850 <chip_deinit+0xa4>)
  4027be:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  4027c0:	bb20      	cbnz	r0, 40280c <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  4027c2:	9901      	ldr	r1, [sp, #4]
  4027c4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4027c8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4027ca:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4027ce:	4b21      	ldr	r3, [pc, #132]	; (402854 <chip_deinit+0xa8>)
  4027d0:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4027d2:	4605      	mov	r5, r0
  4027d4:	bb28      	cbnz	r0, 402822 <chip_deinit+0x76>
  4027d6:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4027d8:	4e1d      	ldr	r6, [pc, #116]	; (402850 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4027da:	4f1e      	ldr	r7, [pc, #120]	; (402854 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4027dc:	a901      	add	r1, sp, #4
  4027de:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4027e2:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4027e4:	4605      	mov	r5, r0
  4027e6:	bb38      	cbnz	r0, 402838 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  4027e8:	9901      	ldr	r1, [sp, #4]
  4027ea:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4027ee:	d00a      	beq.n	402806 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  4027f0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4027f4:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4027f6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4027fa:	47b8      	blx	r7
  4027fc:	4605      	mov	r5, r0
  4027fe:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  402800:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  402804:	d1ea      	bne.n	4027dc <chip_deinit+0x30>

	return ret;
}
  402806:	4628      	mov	r0, r5
  402808:	b003      	add	sp, #12
  40280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  40280c:	f240 2231 	movw	r2, #561	; 0x231
  402810:	4911      	ldr	r1, [pc, #68]	; (402858 <chip_deinit+0xac>)
  402812:	4812      	ldr	r0, [pc, #72]	; (40285c <chip_deinit+0xb0>)
  402814:	4c12      	ldr	r4, [pc, #72]	; (402860 <chip_deinit+0xb4>)
  402816:	47a0      	blx	r4
  402818:	4812      	ldr	r0, [pc, #72]	; (402864 <chip_deinit+0xb8>)
  40281a:	47a0      	blx	r4
  40281c:	4812      	ldr	r0, [pc, #72]	; (402868 <chip_deinit+0xbc>)
  40281e:	47a0      	blx	r4
  402820:	e7cf      	b.n	4027c2 <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  402822:	f240 2237 	movw	r2, #567	; 0x237
  402826:	490c      	ldr	r1, [pc, #48]	; (402858 <chip_deinit+0xac>)
  402828:	480c      	ldr	r0, [pc, #48]	; (40285c <chip_deinit+0xb0>)
  40282a:	4c0d      	ldr	r4, [pc, #52]	; (402860 <chip_deinit+0xb4>)
  40282c:	47a0      	blx	r4
  40282e:	480f      	ldr	r0, [pc, #60]	; (40286c <chip_deinit+0xc0>)
  402830:	47a0      	blx	r4
  402832:	480d      	ldr	r0, [pc, #52]	; (402868 <chip_deinit+0xbc>)
  402834:	47a0      	blx	r4
		return ret;
  402836:	e7e6      	b.n	402806 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  402838:	f240 223e 	movw	r2, #574	; 0x23e
  40283c:	4906      	ldr	r1, [pc, #24]	; (402858 <chip_deinit+0xac>)
  40283e:	4807      	ldr	r0, [pc, #28]	; (40285c <chip_deinit+0xb0>)
  402840:	4c07      	ldr	r4, [pc, #28]	; (402860 <chip_deinit+0xb4>)
  402842:	47a0      	blx	r4
  402844:	480a      	ldr	r0, [pc, #40]	; (402870 <chip_deinit+0xc4>)
  402846:	47a0      	blx	r4
  402848:	4807      	ldr	r0, [pc, #28]	; (402868 <chip_deinit+0xbc>)
  40284a:	47a0      	blx	r4
			return ret;
  40284c:	e7db      	b.n	402806 <chip_deinit+0x5a>
  40284e:	bf00      	nop
  402850:	00402899 	.word	0x00402899
  402854:	004028a5 	.word	0x004028a5
  402858:	0040b8dc 	.word	0x0040b8dc
  40285c:	0040b4a0 	.word	0x0040b4a0
  402860:	004051cd 	.word	0x004051cd
  402864:	0040b8e8 	.word	0x0040b8e8
  402868:	0040c1dc 	.word	0x0040c1dc
  40286c:	0040b904 	.word	0x0040b904
  402870:	0040b920 	.word	0x0040b920

00402874 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  402874:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  402876:	4b01      	ldr	r3, [pc, #4]	; (40287c <nm_bus_iface_init+0x8>)
  402878:	4798      	blx	r3

	return ret;
}
  40287a:	bd08      	pop	{r3, pc}
  40287c:	0040132d 	.word	0x0040132d

00402880 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  402880:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  402882:	4b01      	ldr	r3, [pc, #4]	; (402888 <nm_bus_iface_deinit+0x8>)
  402884:	4798      	blx	r3

	return ret;
}
  402886:	bd08      	pop	{r3, pc}
  402888:	0040151d 	.word	0x0040151d

0040288c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  40288c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40288e:	4b01      	ldr	r3, [pc, #4]	; (402894 <nm_read_reg+0x8>)
  402890:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  402892:	bd08      	pop	{r3, pc}
  402894:	004030e1 	.word	0x004030e1

00402898 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402898:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  40289a:	4b01      	ldr	r3, [pc, #4]	; (4028a0 <nm_read_reg_with_ret+0x8>)
  40289c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40289e:	bd08      	pop	{r3, pc}
  4028a0:	004030f9 	.word	0x004030f9

004028a4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4028a4:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  4028a6:	4b01      	ldr	r3, [pc, #4]	; (4028ac <nm_write_reg+0x8>)
  4028a8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  4028aa:	bd08      	pop	{r3, pc}
  4028ac:	00403111 	.word	0x00403111

004028b0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4028b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4028b4:	4607      	mov	r7, r0
  4028b6:	4689      	mov	r9, r1
  4028b8:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4028ba:	4b12      	ldr	r3, [pc, #72]	; (402904 <nm_read_block+0x54>)
  4028bc:	f8b3 8000 	ldrh.w	r8, [r3]
  4028c0:	f1a8 0808 	sub.w	r8, r8, #8
  4028c4:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4028c8:	4542      	cmp	r2, r8
  4028ca:	d919      	bls.n	402900 <nm_read_block+0x50>
  4028cc:	4644      	mov	r4, r8
  4028ce:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4028d0:	f8df a034 	ldr.w	sl, [pc, #52]	; 402908 <nm_read_block+0x58>
  4028d4:	4642      	mov	r2, r8
  4028d6:	eb09 0106 	add.w	r1, r9, r6
  4028da:	4638      	mov	r0, r7
  4028dc:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4028de:	4603      	mov	r3, r0
  4028e0:	b958      	cbnz	r0, 4028fa <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4028e2:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4028e4:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4028e6:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4028e8:	42a5      	cmp	r5, r4
  4028ea:	d8f3      	bhi.n	4028d4 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4028ec:	b2aa      	uxth	r2, r5
  4028ee:	eb09 0106 	add.w	r1, r9, r6
  4028f2:	4638      	mov	r0, r7
  4028f4:	4b04      	ldr	r3, [pc, #16]	; (402908 <nm_read_block+0x58>)
  4028f6:	4798      	blx	r3
  4028f8:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  4028fa:	4618      	mov	r0, r3
  4028fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  402900:	2600      	movs	r6, #0
  402902:	e7f3      	b.n	4028ec <nm_read_block+0x3c>
  402904:	20400030 	.word	0x20400030
  402908:	0040323d 	.word	0x0040323d

0040290c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  40290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402910:	4607      	mov	r7, r0
  402912:	4689      	mov	r9, r1
  402914:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  402916:	4b12      	ldr	r3, [pc, #72]	; (402960 <nm_write_block+0x54>)
  402918:	f8b3 8000 	ldrh.w	r8, [r3]
  40291c:	f1a8 0808 	sub.w	r8, r8, #8
  402920:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402924:	4542      	cmp	r2, r8
  402926:	d919      	bls.n	40295c <nm_write_block+0x50>
  402928:	4644      	mov	r4, r8
  40292a:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  40292c:	f8df a034 	ldr.w	sl, [pc, #52]	; 402964 <nm_write_block+0x58>
  402930:	4642      	mov	r2, r8
  402932:	eb09 0106 	add.w	r1, r9, r6
  402936:	4638      	mov	r0, r7
  402938:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40293a:	4603      	mov	r3, r0
  40293c:	b958      	cbnz	r0, 402956 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40293e:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  402940:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  402942:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  402944:	42a5      	cmp	r5, r4
  402946:	d8f3      	bhi.n	402930 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  402948:	b2aa      	uxth	r2, r5
  40294a:	eb09 0106 	add.w	r1, r9, r6
  40294e:	4638      	mov	r0, r7
  402950:	4b04      	ldr	r3, [pc, #16]	; (402964 <nm_write_block+0x58>)
  402952:	4798      	blx	r3
  402954:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  402956:	4618      	mov	r0, r3
  402958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  40295c:	2600      	movs	r6, #0
  40295e:	e7f3      	b.n	402948 <nm_write_block+0x3c>
  402960:	20400030 	.word	0x20400030
  402964:	00403305 	.word	0x00403305

00402968 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  402968:	b530      	push	{r4, r5, lr}
  40296a:	b083      	sub	sp, #12
  40296c:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40296e:	a902      	add	r1, sp, #8
  402970:	2300      	movs	r3, #0
  402972:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  402976:	4824      	ldr	r0, [pc, #144]	; (402a08 <nm_get_firmware_info+0xa0>)
  402978:	4b24      	ldr	r3, [pc, #144]	; (402a0c <nm_get_firmware_info+0xa4>)
  40297a:	4798      	blx	r3
  40297c:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40297e:	9a01      	ldr	r2, [sp, #4]
  402980:	4b23      	ldr	r3, [pc, #140]	; (402a10 <nm_get_firmware_info+0xa8>)
  402982:	429a      	cmp	r2, r3
  402984:	d039      	beq.n	4029fa <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  402986:	9b01      	ldr	r3, [sp, #4]
  402988:	0c1a      	lsrs	r2, r3, #16
  40298a:	b291      	uxth	r1, r2
  40298c:	0a08      	lsrs	r0, r1, #8
  40298e:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  402990:	f3c1 1103 	ubfx	r1, r1, #4, #4
  402994:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  402996:	f002 020f 	and.w	r2, r2, #15
  40299a:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  40299c:	b29a      	uxth	r2, r3
  40299e:	0a11      	lsrs	r1, r2, #8
  4029a0:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  4029a2:	f3c2 1203 	ubfx	r2, r2, #4, #4
  4029a6:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  4029a8:	f003 030f 	and.w	r3, r3, #15
  4029ac:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  4029ae:	4b19      	ldr	r3, [pc, #100]	; (402a14 <nm_get_firmware_info+0xac>)
  4029b0:	4798      	blx	r3
  4029b2:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  4029b4:	7922      	ldrb	r2, [r4, #4]
  4029b6:	79a3      	ldrb	r3, [r4, #6]
  4029b8:	f003 030f 	and.w	r3, r3, #15
  4029bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4029c0:	7962      	ldrb	r2, [r4, #5]
  4029c2:	0112      	lsls	r2, r2, #4
  4029c4:	b2d2      	uxtb	r2, r2
  4029c6:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  4029c8:	79e1      	ldrb	r1, [r4, #7]
  4029ca:	7a62      	ldrb	r2, [r4, #9]
  4029cc:	f002 020f 	and.w	r2, r2, #15
  4029d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4029d4:	7a21      	ldrb	r1, [r4, #8]
  4029d6:	0109      	lsls	r1, r1, #4
  4029d8:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  4029da:	430a      	orrs	r2, r1
  4029dc:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4029e0:	428a      	cmp	r2, r1
  4029e2:	bf88      	it	hi
  4029e4:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4029e8:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4029ec:	4293      	cmp	r3, r2
	}
	return ret;
}
  4029ee:	bf8c      	ite	hi
  4029f0:	4628      	movhi	r0, r5
  4029f2:	f06f 000c 	mvnls.w	r0, #12
  4029f6:	b003      	add	sp, #12
  4029f8:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4029fa:	a901      	add	r1, sp, #4
  4029fc:	f241 0048 	movw	r0, #4168	; 0x1048
  402a00:	4b02      	ldr	r3, [pc, #8]	; (402a0c <nm_get_firmware_info+0xa4>)
  402a02:	4798      	blx	r3
  402a04:	4605      	mov	r5, r0
  402a06:	e7be      	b.n	402986 <nm_get_firmware_info+0x1e>
  402a08:	000207ac 	.word	0x000207ac
  402a0c:	00402899 	.word	0x00402899
  402a10:	d75dc1c3 	.word	0xd75dc1c3
  402a14:	0040259d 	.word	0x0040259d

00402a18 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  402a18:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  402a1a:	2800      	cmp	r0, #0
  402a1c:	d037      	beq.n	402a8e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  402a1e:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  402a20:	1e63      	subs	r3, r4, #1
  402a22:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  402a24:	2b04      	cmp	r3, #4
  402a26:	bf28      	it	cs
  402a28:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  402a2a:	2000      	movs	r0, #0
  402a2c:	4b1e      	ldr	r3, [pc, #120]	; (402aa8 <nm_drv_init+0x90>)
  402a2e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a30:	4605      	mov	r5, r0
  402a32:	2800      	cmp	r0, #0
  402a34:	d12d      	bne.n	402a92 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  402a36:	481d      	ldr	r0, [pc, #116]	; (402aac <nm_drv_init+0x94>)
  402a38:	4d1d      	ldr	r5, [pc, #116]	; (402ab0 <nm_drv_init+0x98>)
  402a3a:	47a8      	blx	r5
  402a3c:	4b1d      	ldr	r3, [pc, #116]	; (402ab4 <nm_drv_init+0x9c>)
  402a3e:	4798      	blx	r3
  402a40:	4601      	mov	r1, r0
  402a42:	481d      	ldr	r0, [pc, #116]	; (402ab8 <nm_drv_init+0xa0>)
  402a44:	47a8      	blx	r5
  402a46:	481d      	ldr	r0, [pc, #116]	; (402abc <nm_drv_init+0xa4>)
  402a48:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  402a4a:	4b1d      	ldr	r3, [pc, #116]	; (402ac0 <nm_drv_init+0xa8>)
  402a4c:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  402a4e:	4620      	mov	r0, r4
  402a50:	4b1c      	ldr	r3, [pc, #112]	; (402ac4 <nm_drv_init+0xac>)
  402a52:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a54:	4605      	mov	r5, r0
  402a56:	b9b0      	cbnz	r0, 402a86 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  402a58:	4620      	mov	r0, r4
  402a5a:	4b1b      	ldr	r3, [pc, #108]	; (402ac8 <nm_drv_init+0xb0>)
  402a5c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a5e:	4605      	mov	r5, r0
  402a60:	b988      	cbnz	r0, 402a86 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  402a62:	3c02      	subs	r4, #2
  402a64:	b2e4      	uxtb	r4, r4
  402a66:	2c01      	cmp	r4, #1
  402a68:	d90f      	bls.n	402a8a <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  402a6a:	4b18      	ldr	r3, [pc, #96]	; (402acc <nm_drv_init+0xb4>)
  402a6c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a6e:	4605      	mov	r5, r0
  402a70:	b158      	cbz	r0, 402a8a <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  402a72:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  402a76:	4916      	ldr	r1, [pc, #88]	; (402ad0 <nm_drv_init+0xb8>)
  402a78:	4816      	ldr	r0, [pc, #88]	; (402ad4 <nm_drv_init+0xbc>)
  402a7a:	4c0d      	ldr	r4, [pc, #52]	; (402ab0 <nm_drv_init+0x98>)
  402a7c:	47a0      	blx	r4
  402a7e:	4816      	ldr	r0, [pc, #88]	; (402ad8 <nm_drv_init+0xc0>)
  402a80:	47a0      	blx	r4
  402a82:	480e      	ldr	r0, [pc, #56]	; (402abc <nm_drv_init+0xa4>)
  402a84:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  402a86:	4b15      	ldr	r3, [pc, #84]	; (402adc <nm_drv_init+0xc4>)
  402a88:	4798      	blx	r3
ERR1:
	return ret;
}
  402a8a:	4628      	mov	r0, r5
  402a8c:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  402a8e:	2401      	movs	r4, #1
  402a90:	e7cb      	b.n	402a2a <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  402a92:	f44f 7292 	mov.w	r2, #292	; 0x124
  402a96:	490e      	ldr	r1, [pc, #56]	; (402ad0 <nm_drv_init+0xb8>)
  402a98:	480e      	ldr	r0, [pc, #56]	; (402ad4 <nm_drv_init+0xbc>)
  402a9a:	4c05      	ldr	r4, [pc, #20]	; (402ab0 <nm_drv_init+0x98>)
  402a9c:	47a0      	blx	r4
  402a9e:	4810      	ldr	r0, [pc, #64]	; (402ae0 <nm_drv_init+0xc8>)
  402aa0:	47a0      	blx	r4
  402aa2:	4806      	ldr	r0, [pc, #24]	; (402abc <nm_drv_init+0xa4>)
  402aa4:	47a0      	blx	r4
		goto ERR1;
  402aa6:	e7f0      	b.n	402a8a <nm_drv_init+0x72>
  402aa8:	00402875 	.word	0x00402875
  402aac:	0040b770 	.word	0x0040b770
  402ab0:	004051cd 	.word	0x004051cd
  402ab4:	0040259d 	.word	0x0040259d
  402ab8:	0040ba68 	.word	0x0040ba68
  402abc:	0040c1dc 	.word	0x0040c1dc
  402ac0:	00403129 	.word	0x00403129
  402ac4:	00402651 	.word	0x00402651
  402ac8:	0040272d 	.word	0x0040272d
  402acc:	00402535 	.word	0x00402535
  402ad0:	0040b9b0 	.word	0x0040b9b0
  402ad4:	0040b4a0 	.word	0x0040b4a0
  402ad8:	0040ba2c 	.word	0x0040ba2c
  402adc:	00402881 	.word	0x00402881
  402ae0:	0040ba4c 	.word	0x0040ba4c

00402ae4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  402ae4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  402ae6:	4b19      	ldr	r3, [pc, #100]	; (402b4c <nm_drv_deinit+0x68>)
  402ae8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402aea:	b958      	cbnz	r0, 402b04 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  402aec:	2000      	movs	r0, #0
  402aee:	4b18      	ldr	r3, [pc, #96]	; (402b50 <nm_drv_deinit+0x6c>)
  402af0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402af2:	4604      	mov	r4, r0
  402af4:	b998      	cbnz	r0, 402b1e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  402af6:	4b17      	ldr	r3, [pc, #92]	; (402b54 <nm_drv_deinit+0x70>)
  402af8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402afa:	4604      	mov	r4, r0
  402afc:	b9d0      	cbnz	r0, 402b34 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  402afe:	4b16      	ldr	r3, [pc, #88]	; (402b58 <nm_drv_deinit+0x74>)
  402b00:	4798      	blx	r3
  402b02:	e00a      	b.n	402b1a <nm_drv_deinit+0x36>
  402b04:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  402b06:	f44f 72ba 	mov.w	r2, #372	; 0x174
  402b0a:	4914      	ldr	r1, [pc, #80]	; (402b5c <nm_drv_deinit+0x78>)
  402b0c:	4814      	ldr	r0, [pc, #80]	; (402b60 <nm_drv_deinit+0x7c>)
  402b0e:	4d15      	ldr	r5, [pc, #84]	; (402b64 <nm_drv_deinit+0x80>)
  402b10:	47a8      	blx	r5
  402b12:	4815      	ldr	r0, [pc, #84]	; (402b68 <nm_drv_deinit+0x84>)
  402b14:	47a8      	blx	r5
  402b16:	4815      	ldr	r0, [pc, #84]	; (402b6c <nm_drv_deinit+0x88>)
  402b18:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  402b1a:	4620      	mov	r0, r4
  402b1c:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  402b1e:	f240 127b 	movw	r2, #379	; 0x17b
  402b22:	490e      	ldr	r1, [pc, #56]	; (402b5c <nm_drv_deinit+0x78>)
  402b24:	480e      	ldr	r0, [pc, #56]	; (402b60 <nm_drv_deinit+0x7c>)
  402b26:	4d0f      	ldr	r5, [pc, #60]	; (402b64 <nm_drv_deinit+0x80>)
  402b28:	47a8      	blx	r5
  402b2a:	4811      	ldr	r0, [pc, #68]	; (402b70 <nm_drv_deinit+0x8c>)
  402b2c:	47a8      	blx	r5
  402b2e:	480f      	ldr	r0, [pc, #60]	; (402b6c <nm_drv_deinit+0x88>)
  402b30:	47a8      	blx	r5
		goto ERR1;
  402b32:	e7f2      	b.n	402b1a <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  402b34:	f240 1281 	movw	r2, #385	; 0x181
  402b38:	4908      	ldr	r1, [pc, #32]	; (402b5c <nm_drv_deinit+0x78>)
  402b3a:	4809      	ldr	r0, [pc, #36]	; (402b60 <nm_drv_deinit+0x7c>)
  402b3c:	4d09      	ldr	r5, [pc, #36]	; (402b64 <nm_drv_deinit+0x80>)
  402b3e:	47a8      	blx	r5
  402b40:	480c      	ldr	r0, [pc, #48]	; (402b74 <nm_drv_deinit+0x90>)
  402b42:	47a8      	blx	r5
  402b44:	4809      	ldr	r0, [pc, #36]	; (402b6c <nm_drv_deinit+0x88>)
  402b46:	47a8      	blx	r5
		goto ERR1;
  402b48:	e7e7      	b.n	402b1a <nm_drv_deinit+0x36>
  402b4a:	bf00      	nop
  402b4c:	004027ad 	.word	0x004027ad
  402b50:	00403b89 	.word	0x00403b89
  402b54:	00402881 	.word	0x00402881
  402b58:	004030d5 	.word	0x004030d5
  402b5c:	0040b9bc 	.word	0x0040b9bc
  402b60:	0040b4a0 	.word	0x0040b4a0
  402b64:	004051cd 	.word	0x004051cd
  402b68:	0040b9cc 	.word	0x0040b9cc
  402b6c:	0040c1dc 	.word	0x0040c1dc
  402b70:	0040b9ec 	.word	0x0040b9ec
  402b74:	0040ba10 	.word	0x0040ba10

00402b78 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  402b78:	b500      	push	{lr}
  402b7a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  402b7c:	2300      	movs	r3, #0
  402b7e:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  402b80:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  402b82:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402b86:	a901      	add	r1, sp, #4
  402b88:	2003      	movs	r0, #3
  402b8a:	4b02      	ldr	r3, [pc, #8]	; (402b94 <nmi_spi_read+0x1c>)
  402b8c:	4798      	blx	r3
}
  402b8e:	b005      	add	sp, #20
  402b90:	f85d fb04 	ldr.w	pc, [sp], #4
  402b94:	00401449 	.word	0x00401449

00402b98 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b9c:	b082      	sub	sp, #8
  402b9e:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  402ba0:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  402ba4:	b2db      	uxtb	r3, r3
  402ba6:	2b01      	cmp	r3, #1
  402ba8:	d927      	bls.n	402bfa <spi_cmd_rsp+0x62>
  402baa:	28cf      	cmp	r0, #207	; 0xcf
  402bac:	d025      	beq.n	402bfa <spi_cmd_rsp+0x62>
{
  402bae:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402bb0:	f04f 0801 	mov.w	r8, #1
  402bb4:	4f23      	ldr	r7, [pc, #140]	; (402c44 <spi_cmd_rsp+0xac>)
  402bb6:	4641      	mov	r1, r8
  402bb8:	f10d 0007 	add.w	r0, sp, #7
  402bbc:	47b8      	blx	r7
  402bbe:	4606      	mov	r6, r0
  402bc0:	bb20      	cbnz	r0, 402c0c <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  402bc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402bc6:	42ab      	cmp	r3, r5
  402bc8:	d02c      	beq.n	402c24 <spi_cmd_rsp+0x8c>
  402bca:	1e63      	subs	r3, r4, #1
  402bcc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  402bd0:	d1f1      	bne.n	402bb6 <spi_cmd_rsp+0x1e>
  402bd2:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402bd4:	2701      	movs	r7, #1
  402bd6:	4d1b      	ldr	r5, [pc, #108]	; (402c44 <spi_cmd_rsp+0xac>)
  402bd8:	4639      	mov	r1, r7
  402bda:	f10d 0007 	add.w	r0, sp, #7
  402bde:	47a8      	blx	r5
  402be0:	bb10      	cbnz	r0, 402c28 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  402be2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402be6:	b353      	cbz	r3, 402c3e <spi_cmd_rsp+0xa6>
  402be8:	1e63      	subs	r3, r4, #1
  402bea:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  402bee:	d1f3      	bne.n	402bd8 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  402bf0:	2601      	movs	r6, #1

_fail_:

	return result;
}
  402bf2:	4630      	mov	r0, r6
  402bf4:	b002      	add	sp, #8
  402bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402bfa:	2101      	movs	r1, #1
  402bfc:	f10d 0007 	add.w	r0, sp, #7
  402c00:	4b10      	ldr	r3, [pc, #64]	; (402c44 <spi_cmd_rsp+0xac>)
  402c02:	4798      	blx	r3
  402c04:	2800      	cmp	r0, #0
  402c06:	d0d2      	beq.n	402bae <spi_cmd_rsp+0x16>
			result = N_FAIL;
  402c08:	2600      	movs	r6, #0
  402c0a:	e7f2      	b.n	402bf2 <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402c0c:	f240 1227 	movw	r2, #295	; 0x127
  402c10:	490d      	ldr	r1, [pc, #52]	; (402c48 <spi_cmd_rsp+0xb0>)
  402c12:	480e      	ldr	r0, [pc, #56]	; (402c4c <spi_cmd_rsp+0xb4>)
  402c14:	4c0e      	ldr	r4, [pc, #56]	; (402c50 <spi_cmd_rsp+0xb8>)
  402c16:	47a0      	blx	r4
  402c18:	480e      	ldr	r0, [pc, #56]	; (402c54 <spi_cmd_rsp+0xbc>)
  402c1a:	47a0      	blx	r4
  402c1c:	480e      	ldr	r0, [pc, #56]	; (402c58 <spi_cmd_rsp+0xc0>)
  402c1e:	47a0      	blx	r4
			result = N_FAIL;
  402c20:	2600      	movs	r6, #0
			goto _fail_;
  402c22:	e7e6      	b.n	402bf2 <spi_cmd_rsp+0x5a>
  402c24:	240b      	movs	r4, #11
  402c26:	e7d5      	b.n	402bd4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402c28:	f240 1235 	movw	r2, #309	; 0x135
  402c2c:	4906      	ldr	r1, [pc, #24]	; (402c48 <spi_cmd_rsp+0xb0>)
  402c2e:	4807      	ldr	r0, [pc, #28]	; (402c4c <spi_cmd_rsp+0xb4>)
  402c30:	4c07      	ldr	r4, [pc, #28]	; (402c50 <spi_cmd_rsp+0xb8>)
  402c32:	47a0      	blx	r4
  402c34:	4807      	ldr	r0, [pc, #28]	; (402c54 <spi_cmd_rsp+0xbc>)
  402c36:	47a0      	blx	r4
  402c38:	4807      	ldr	r0, [pc, #28]	; (402c58 <spi_cmd_rsp+0xc0>)
  402c3a:	47a0      	blx	r4
			goto _fail_;
  402c3c:	e7d9      	b.n	402bf2 <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  402c3e:	2601      	movs	r6, #1
  402c40:	e7d7      	b.n	402bf2 <spi_cmd_rsp+0x5a>
  402c42:	bf00      	nop
  402c44:	00402b79 	.word	0x00402b79
  402c48:	0040ba80 	.word	0x0040ba80
  402c4c:	0040b4a0 	.word	0x0040b4a0
  402c50:	004051cd 	.word	0x004051cd
  402c54:	0040bec0 	.word	0x0040bec0
  402c58:	0040c1dc 	.word	0x0040c1dc

00402c5c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  402c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c60:	b085      	sub	sp, #20
  402c62:	4683      	mov	fp, r0
  402c64:	468a      	mov	sl, r1
  402c66:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  402c68:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402c6c:	4d37      	ldr	r5, [pc, #220]	; (402d4c <spi_data_read+0xf0>)
  402c6e:	e027      	b.n	402cc0 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  402c70:	f240 1257 	movw	r2, #343	; 0x157
  402c74:	4936      	ldr	r1, [pc, #216]	; (402d50 <spi_data_read+0xf4>)
  402c76:	4837      	ldr	r0, [pc, #220]	; (402d54 <spi_data_read+0xf8>)
  402c78:	4c37      	ldr	r4, [pc, #220]	; (402d58 <spi_data_read+0xfc>)
  402c7a:	47a0      	blx	r4
  402c7c:	4837      	ldr	r0, [pc, #220]	; (402d5c <spi_data_read+0x100>)
  402c7e:	47a0      	blx	r4
  402c80:	4837      	ldr	r0, [pc, #220]	; (402d60 <spi_data_read+0x104>)
  402c82:	47a0      	blx	r4
  402c84:	2300      	movs	r3, #0
  402c86:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  402c88:	9801      	ldr	r0, [sp, #4]
  402c8a:	b005      	add	sp, #20
  402c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  402c90:	2c00      	cmp	r4, #0
  402c92:	dd2e      	ble.n	402cf2 <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  402c94:	4641      	mov	r1, r8
  402c96:	eb0b 0009 	add.w	r0, fp, r9
  402c9a:	47a8      	blx	r5
  402c9c:	4604      	mov	r4, r0
  402c9e:	2800      	cmp	r0, #0
  402ca0:	d134      	bne.n	402d0c <spi_data_read+0xb0>
		if(!clockless)
  402ca2:	b91f      	cbnz	r7, 402cac <spi_data_read+0x50>
			if (!gu8Crc_off) {
  402ca4:	4b2f      	ldr	r3, [pc, #188]	; (402d64 <spi_data_read+0x108>)
  402ca6:	781b      	ldrb	r3, [r3, #0]
  402ca8:	2b00      	cmp	r3, #0
  402caa:	d03a      	beq.n	402d22 <spi_data_read+0xc6>
		ix += nbytes;
  402cac:	44c1      	add	r9, r8
  402cae:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  402cb2:	ebaa 0a08 	sub.w	sl, sl, r8
  402cb6:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  402cba:	f1ba 0f00 	cmp.w	sl, #0
  402cbe:	d041      	beq.n	402d44 <spi_data_read+0xe8>
  402cc0:	46d0      	mov	r8, sl
  402cc2:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  402cc6:	bf28      	it	cs
  402cc8:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  402ccc:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402cce:	2601      	movs	r6, #1
  402cd0:	4631      	mov	r1, r6
  402cd2:	f10d 000b 	add.w	r0, sp, #11
  402cd6:	47a8      	blx	r5
  402cd8:	9001      	str	r0, [sp, #4]
  402cda:	2800      	cmp	r0, #0
  402cdc:	d1c8      	bne.n	402c70 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  402cde:	f89d 300b 	ldrb.w	r3, [sp, #11]
  402ce2:	091b      	lsrs	r3, r3, #4
  402ce4:	2b0f      	cmp	r3, #15
  402ce6:	d0d3      	beq.n	402c90 <spi_data_read+0x34>
  402ce8:	3c01      	subs	r4, #1
  402cea:	b224      	sxth	r4, r4
		} while (retry--);
  402cec:	f1b4 3fff 	cmp.w	r4, #4294967295
  402cf0:	d1ee      	bne.n	402cd0 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  402cf2:	f240 1263 	movw	r2, #355	; 0x163
  402cf6:	4916      	ldr	r1, [pc, #88]	; (402d50 <spi_data_read+0xf4>)
  402cf8:	4816      	ldr	r0, [pc, #88]	; (402d54 <spi_data_read+0xf8>)
  402cfa:	4c17      	ldr	r4, [pc, #92]	; (402d58 <spi_data_read+0xfc>)
  402cfc:	47a0      	blx	r4
  402cfe:	f89d 100b 	ldrb.w	r1, [sp, #11]
  402d02:	4819      	ldr	r0, [pc, #100]	; (402d68 <spi_data_read+0x10c>)
  402d04:	47a0      	blx	r4
  402d06:	4816      	ldr	r0, [pc, #88]	; (402d60 <spi_data_read+0x104>)
  402d08:	47a0      	blx	r4
			break;
  402d0a:	e7bd      	b.n	402c88 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  402d0c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  402d10:	490f      	ldr	r1, [pc, #60]	; (402d50 <spi_data_read+0xf4>)
  402d12:	4810      	ldr	r0, [pc, #64]	; (402d54 <spi_data_read+0xf8>)
  402d14:	4c10      	ldr	r4, [pc, #64]	; (402d58 <spi_data_read+0xfc>)
  402d16:	47a0      	blx	r4
  402d18:	4814      	ldr	r0, [pc, #80]	; (402d6c <spi_data_read+0x110>)
  402d1a:	47a0      	blx	r4
  402d1c:	4810      	ldr	r0, [pc, #64]	; (402d60 <spi_data_read+0x104>)
  402d1e:	47a0      	blx	r4
			break;
  402d20:	e7b2      	b.n	402c88 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  402d22:	2102      	movs	r1, #2
  402d24:	a803      	add	r0, sp, #12
  402d26:	47a8      	blx	r5
  402d28:	2800      	cmp	r0, #0
  402d2a:	d0bf      	beq.n	402cac <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  402d2c:	f240 1277 	movw	r2, #375	; 0x177
  402d30:	4907      	ldr	r1, [pc, #28]	; (402d50 <spi_data_read+0xf4>)
  402d32:	4808      	ldr	r0, [pc, #32]	; (402d54 <spi_data_read+0xf8>)
  402d34:	4d08      	ldr	r5, [pc, #32]	; (402d58 <spi_data_read+0xfc>)
  402d36:	47a8      	blx	r5
  402d38:	480d      	ldr	r0, [pc, #52]	; (402d70 <spi_data_read+0x114>)
  402d3a:	47a8      	blx	r5
  402d3c:	4808      	ldr	r0, [pc, #32]	; (402d60 <spi_data_read+0x104>)
  402d3e:	47a8      	blx	r5
					result = N_FAIL;
  402d40:	9401      	str	r4, [sp, #4]
					break;
  402d42:	e7a1      	b.n	402c88 <spi_data_read+0x2c>
  402d44:	2301      	movs	r3, #1
  402d46:	9301      	str	r3, [sp, #4]
  402d48:	e79e      	b.n	402c88 <spi_data_read+0x2c>
  402d4a:	bf00      	nop
  402d4c:	00402b79 	.word	0x00402b79
  402d50:	0040ba8c 	.word	0x0040ba8c
  402d54:	0040b4a0 	.word	0x0040b4a0
  402d58:	004051cd 	.word	0x004051cd
  402d5c:	0040bef4 	.word	0x0040bef4
  402d60:	0040c1dc 	.word	0x0040c1dc
  402d64:	20400a68 	.word	0x20400a68
  402d68:	0040bf28 	.word	0x0040bf28
  402d6c:	0040bf58 	.word	0x0040bf58
  402d70:	0040bf8c 	.word	0x0040bf8c

00402d74 <nmi_spi_write>:
{
  402d74:	b500      	push	{lr}
  402d76:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  402d78:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  402d7a:	2300      	movs	r3, #0
  402d7c:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  402d7e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402d82:	a901      	add	r1, sp, #4
  402d84:	2003      	movs	r0, #3
  402d86:	4b02      	ldr	r3, [pc, #8]	; (402d90 <nmi_spi_write+0x1c>)
  402d88:	4798      	blx	r3
}
  402d8a:	b005      	add	sp, #20
  402d8c:	f85d fb04 	ldr.w	pc, [sp], #4
  402d90:	00401449 	.word	0x00401449

00402d94 <spi_cmd>:
{
  402d94:	b570      	push	{r4, r5, r6, lr}
  402d96:	b084      	sub	sp, #16
  402d98:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  402d9c:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  402da0:	38c1      	subs	r0, #193	; 0xc1
  402da2:	280e      	cmp	r0, #14
  402da4:	f200 80a2 	bhi.w	402eec <spi_cmd+0x158>
  402da8:	e8df f000 	tbb	[pc, r0]
  402dac:	19664545 	.word	0x19664545
  402db0:	5454332a 	.word	0x5454332a
  402db4:	a0a0087f 	.word	0xa0a0087f
  402db8:	a0a0      	.short	0xa0a0
  402dba:	3c          	.byte	0x3c
  402dbb:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  402dbc:	0c0b      	lsrs	r3, r1, #16
  402dbe:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402dc2:	0a0b      	lsrs	r3, r1, #8
  402dc4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  402dc8:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  402dcc:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  402dce:	4b55      	ldr	r3, [pc, #340]	; (402f24 <spi_cmd+0x190>)
  402dd0:	781b      	ldrb	r3, [r3, #0]
  402dd2:	2b00      	cmp	r3, #0
  402dd4:	f000 808c 	beq.w	402ef0 <spi_cmd+0x15c>
			len-=1;
  402dd8:	3901      	subs	r1, #1
  402dda:	b2c9      	uxtb	r1, r1
  402ddc:	e09a      	b.n	402f14 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  402dde:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  402de2:	b944      	cbnz	r4, 402df6 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  402de4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  402de8:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  402dec:	2300      	movs	r3, #0
  402dee:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402df2:	2105      	movs	r1, #5
		break;
  402df4:	e7eb      	b.n	402dce <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  402df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402dfa:	f88d 3005 	strb.w	r3, [sp, #5]
  402dfe:	e7f3      	b.n	402de8 <spi_cmd+0x54>
		bc[1] = 0x00;
  402e00:	2300      	movs	r3, #0
  402e02:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402e06:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  402e0a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402e0e:	2105      	movs	r1, #5
		break;
  402e10:	e7dd      	b.n	402dce <spi_cmd+0x3a>
		bc[1] = 0x00;
  402e12:	2300      	movs	r3, #0
  402e14:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402e18:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  402e1c:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402e20:	2105      	movs	r1, #5
		break;
  402e22:	e7d4      	b.n	402dce <spi_cmd+0x3a>
		bc[1] = 0xff;
  402e24:	23ff      	movs	r3, #255	; 0xff
  402e26:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  402e2a:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  402e2e:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402e32:	2105      	movs	r1, #5
		break;
  402e34:	e7cb      	b.n	402dce <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  402e36:	0c0a      	lsrs	r2, r1, #16
  402e38:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402e3c:	0a0a      	lsrs	r2, r1, #8
  402e3e:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  402e42:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  402e46:	0a1a      	lsrs	r2, r3, #8
  402e48:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  402e4c:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  402e50:	2107      	movs	r1, #7
		break;
  402e52:	e7bc      	b.n	402dce <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  402e54:	0c0a      	lsrs	r2, r1, #16
  402e56:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402e5a:	0a0a      	lsrs	r2, r1, #8
  402e5c:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  402e60:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  402e64:	0c1a      	lsrs	r2, r3, #16
  402e66:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  402e6a:	0a1a      	lsrs	r2, r3, #8
  402e6c:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  402e70:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  402e74:	2108      	movs	r1, #8
		break;
  402e76:	e7aa      	b.n	402dce <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  402e78:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  402e7c:	b984      	cbnz	r4, 402ea0 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  402e7e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  402e82:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  402e86:	0e13      	lsrs	r3, r2, #24
  402e88:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  402e8c:	0c13      	lsrs	r3, r2, #16
  402e8e:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  402e92:	0a13      	lsrs	r3, r2, #8
  402e94:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  402e98:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  402e9c:	2108      	movs	r1, #8
		break;
  402e9e:	e796      	b.n	402dce <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  402ea0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402ea4:	f88d 3005 	strb.w	r3, [sp, #5]
  402ea8:	e7eb      	b.n	402e82 <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  402eaa:	0c0b      	lsrs	r3, r1, #16
  402eac:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402eb0:	0a0b      	lsrs	r3, r1, #8
  402eb2:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  402eb6:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  402eba:	0e13      	lsrs	r3, r2, #24
  402ebc:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  402ec0:	0c13      	lsrs	r3, r2, #16
  402ec2:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  402ec6:	0a13      	lsrs	r3, r2, #8
  402ec8:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  402ecc:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  402ed0:	2109      	movs	r1, #9
		break;
  402ed2:	e77c      	b.n	402dce <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  402ed4:	f44f 7284 	mov.w	r2, #264	; 0x108
  402ed8:	4913      	ldr	r1, [pc, #76]	; (402f28 <spi_cmd+0x194>)
  402eda:	4814      	ldr	r0, [pc, #80]	; (402f2c <spi_cmd+0x198>)
  402edc:	4c14      	ldr	r4, [pc, #80]	; (402f30 <spi_cmd+0x19c>)
  402ede:	47a0      	blx	r4
  402ee0:	4814      	ldr	r0, [pc, #80]	; (402f34 <spi_cmd+0x1a0>)
  402ee2:	47a0      	blx	r4
  402ee4:	4814      	ldr	r0, [pc, #80]	; (402f38 <spi_cmd+0x1a4>)
  402ee6:	47a0      	blx	r4
			result = N_FAIL;
  402ee8:	2000      	movs	r0, #0
  402eea:	e019      	b.n	402f20 <spi_cmd+0x18c>
	switch (cmd) {
  402eec:	2000      	movs	r0, #0
  402eee:	e017      	b.n	402f20 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402ef0:	1e4e      	subs	r6, r1, #1
  402ef2:	ab01      	add	r3, sp, #4
  402ef4:	199d      	adds	r5, r3, r6
  402ef6:	207f      	movs	r0, #127	; 0x7f
  402ef8:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  402efa:	4c10      	ldr	r4, [pc, #64]	; (402f3c <spi_cmd+0x1a8>)
  402efc:	f812 3b01 	ldrb.w	r3, [r2], #1
  402f00:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  402f04:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  402f06:	4295      	cmp	r5, r2
  402f08:	d1f8      	bne.n	402efc <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402f0a:	ab04      	add	r3, sp, #16
  402f0c:	441e      	add	r6, r3
  402f0e:	0043      	lsls	r3, r0, #1
  402f10:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  402f14:	a801      	add	r0, sp, #4
  402f16:	4b0a      	ldr	r3, [pc, #40]	; (402f40 <spi_cmd+0x1ac>)
  402f18:	4798      	blx	r3
  402f1a:	2800      	cmp	r0, #0
  402f1c:	d1da      	bne.n	402ed4 <spi_cmd+0x140>
  402f1e:	2001      	movs	r0, #1
}
  402f20:	b004      	add	sp, #16
  402f22:	bd70      	pop	{r4, r5, r6, pc}
  402f24:	20400a68 	.word	0x20400a68
  402f28:	0040ba78 	.word	0x0040ba78
  402f2c:	0040b4a0 	.word	0x0040b4a0
  402f30:	004051cd 	.word	0x004051cd
  402f34:	0040be94 	.word	0x0040be94
  402f38:	0040c1dc 	.word	0x0040c1dc
  402f3c:	0040baf4 	.word	0x0040baf4
  402f40:	00402d75 	.word	0x00402d75

00402f44 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  402f44:	b570      	push	{r4, r5, r6, lr}
  402f46:	b082      	sub	sp, #8
  402f48:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  402f4a:	2831      	cmp	r0, #49	; 0x31
  402f4c:	bf35      	itete	cc
  402f4e:	2301      	movcc	r3, #1
  402f50:	2300      	movcs	r3, #0
  402f52:	25c3      	movcc	r5, #195	; 0xc3
  402f54:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  402f56:	9300      	str	r3, [sp, #0]
  402f58:	2304      	movs	r3, #4
  402f5a:	460a      	mov	r2, r1
  402f5c:	4601      	mov	r1, r0
  402f5e:	4628      	mov	r0, r5
  402f60:	4e15      	ldr	r6, [pc, #84]	; (402fb8 <spi_write_reg+0x74>)
  402f62:	47b0      	blx	r6
	if (result != N_OK) {
  402f64:	2801      	cmp	r0, #1
  402f66:	d00d      	beq.n	402f84 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  402f68:	f240 12eb 	movw	r2, #491	; 0x1eb
  402f6c:	4913      	ldr	r1, [pc, #76]	; (402fbc <spi_write_reg+0x78>)
  402f6e:	4814      	ldr	r0, [pc, #80]	; (402fc0 <spi_write_reg+0x7c>)
  402f70:	4d14      	ldr	r5, [pc, #80]	; (402fc4 <spi_write_reg+0x80>)
  402f72:	47a8      	blx	r5
  402f74:	4621      	mov	r1, r4
  402f76:	4814      	ldr	r0, [pc, #80]	; (402fc8 <spi_write_reg+0x84>)
  402f78:	47a8      	blx	r5
  402f7a:	4814      	ldr	r0, [pc, #80]	; (402fcc <spi_write_reg+0x88>)
  402f7c:	47a8      	blx	r5
		return N_FAIL;
  402f7e:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  402f80:	b002      	add	sp, #8
  402f82:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  402f84:	4628      	mov	r0, r5
  402f86:	4b12      	ldr	r3, [pc, #72]	; (402fd0 <spi_write_reg+0x8c>)
  402f88:	4798      	blx	r3
	if (result != N_OK) {
  402f8a:	2801      	cmp	r0, #1
  402f8c:	d0f8      	beq.n	402f80 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  402f8e:	f240 12f1 	movw	r2, #497	; 0x1f1
  402f92:	490a      	ldr	r1, [pc, #40]	; (402fbc <spi_write_reg+0x78>)
  402f94:	480a      	ldr	r0, [pc, #40]	; (402fc0 <spi_write_reg+0x7c>)
  402f96:	4d0b      	ldr	r5, [pc, #44]	; (402fc4 <spi_write_reg+0x80>)
  402f98:	47a8      	blx	r5
  402f9a:	4621      	mov	r1, r4
  402f9c:	480d      	ldr	r0, [pc, #52]	; (402fd4 <spi_write_reg+0x90>)
  402f9e:	47a8      	blx	r5
  402fa0:	480a      	ldr	r0, [pc, #40]	; (402fcc <spi_write_reg+0x88>)
  402fa2:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402fa4:	2400      	movs	r4, #0
  402fa6:	9400      	str	r4, [sp, #0]
  402fa8:	4623      	mov	r3, r4
  402faa:	4622      	mov	r2, r4
  402fac:	4621      	mov	r1, r4
  402fae:	20cf      	movs	r0, #207	; 0xcf
  402fb0:	4d01      	ldr	r5, [pc, #4]	; (402fb8 <spi_write_reg+0x74>)
  402fb2:	47a8      	blx	r5
		return N_FAIL;
  402fb4:	4620      	mov	r0, r4
  402fb6:	e7e3      	b.n	402f80 <spi_write_reg+0x3c>
  402fb8:	00402d95 	.word	0x00402d95
  402fbc:	0040baac 	.word	0x0040baac
  402fc0:	0040b4a0 	.word	0x0040b4a0
  402fc4:	004051cd 	.word	0x004051cd
  402fc8:	0040c044 	.word	0x0040c044
  402fcc:	0040c1dc 	.word	0x0040c1dc
  402fd0:	00402b99 	.word	0x00402b99
  402fd4:	0040c070 	.word	0x0040c070

00402fd8 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  402fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402fdc:	b084      	sub	sp, #16
  402fde:	4604      	mov	r4, r0
  402fe0:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  402fe2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  402fe6:	bf35      	itete	cc
  402fe8:	2601      	movcc	r6, #1
  402fea:	2600      	movcs	r6, #0
  402fec:	25c4      	movcc	r5, #196	; 0xc4
  402fee:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  402ff0:	9600      	str	r6, [sp, #0]
  402ff2:	2304      	movs	r3, #4
  402ff4:	2200      	movs	r2, #0
  402ff6:	4601      	mov	r1, r0
  402ff8:	4628      	mov	r0, r5
  402ffa:	4f2c      	ldr	r7, [pc, #176]	; (4030ac <spi_read_reg+0xd4>)
  402ffc:	47b8      	blx	r7
	if (result != N_OK) {
  402ffe:	2801      	cmp	r0, #1
  403000:	d00e      	beq.n	403020 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  403002:	f240 2245 	movw	r2, #581	; 0x245
  403006:	492a      	ldr	r1, [pc, #168]	; (4030b0 <spi_read_reg+0xd8>)
  403008:	482a      	ldr	r0, [pc, #168]	; (4030b4 <spi_read_reg+0xdc>)
  40300a:	4d2b      	ldr	r5, [pc, #172]	; (4030b8 <spi_read_reg+0xe0>)
  40300c:	47a8      	blx	r5
  40300e:	4621      	mov	r1, r4
  403010:	482a      	ldr	r0, [pc, #168]	; (4030bc <spi_read_reg+0xe4>)
  403012:	47a8      	blx	r5
  403014:	482a      	ldr	r0, [pc, #168]	; (4030c0 <spi_read_reg+0xe8>)
  403016:	47a8      	blx	r5
		return N_FAIL;
  403018:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  40301a:	b004      	add	sp, #16
  40301c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  403020:	4628      	mov	r0, r5
  403022:	4b28      	ldr	r3, [pc, #160]	; (4030c4 <spi_read_reg+0xec>)
  403024:	4798      	blx	r3
	if (result != N_OK) {
  403026:	2801      	cmp	r0, #1
  403028:	d014      	beq.n	403054 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  40302a:	f240 224b 	movw	r2, #587	; 0x24b
  40302e:	4920      	ldr	r1, [pc, #128]	; (4030b0 <spi_read_reg+0xd8>)
  403030:	4820      	ldr	r0, [pc, #128]	; (4030b4 <spi_read_reg+0xdc>)
  403032:	4d21      	ldr	r5, [pc, #132]	; (4030b8 <spi_read_reg+0xe0>)
  403034:	47a8      	blx	r5
  403036:	4621      	mov	r1, r4
  403038:	4823      	ldr	r0, [pc, #140]	; (4030c8 <spi_read_reg+0xf0>)
  40303a:	47a8      	blx	r5
  40303c:	4820      	ldr	r0, [pc, #128]	; (4030c0 <spi_read_reg+0xe8>)
  40303e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403040:	2400      	movs	r4, #0
  403042:	9400      	str	r4, [sp, #0]
  403044:	4623      	mov	r3, r4
  403046:	4622      	mov	r2, r4
  403048:	4621      	mov	r1, r4
  40304a:	20cf      	movs	r0, #207	; 0xcf
  40304c:	4d17      	ldr	r5, [pc, #92]	; (4030ac <spi_read_reg+0xd4>)
  40304e:	47a8      	blx	r5
		return N_FAIL;
  403050:	4620      	mov	r0, r4
  403052:	e7e2      	b.n	40301a <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  403054:	4632      	mov	r2, r6
  403056:	2104      	movs	r1, #4
  403058:	a803      	add	r0, sp, #12
  40305a:	4b1c      	ldr	r3, [pc, #112]	; (4030cc <spi_read_reg+0xf4>)
  40305c:	4798      	blx	r3
	if (result != N_OK) {
  40305e:	2801      	cmp	r0, #1
  403060:	d110      	bne.n	403084 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  403062:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  403066:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40306a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  40306c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  403070:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  403074:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  403076:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  40307a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  40307e:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  403082:	e7ca      	b.n	40301a <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  403084:	f240 2253 	movw	r2, #595	; 0x253
  403088:	4909      	ldr	r1, [pc, #36]	; (4030b0 <spi_read_reg+0xd8>)
  40308a:	480a      	ldr	r0, [pc, #40]	; (4030b4 <spi_read_reg+0xdc>)
  40308c:	4c0a      	ldr	r4, [pc, #40]	; (4030b8 <spi_read_reg+0xe0>)
  40308e:	47a0      	blx	r4
  403090:	480f      	ldr	r0, [pc, #60]	; (4030d0 <spi_read_reg+0xf8>)
  403092:	47a0      	blx	r4
  403094:	480a      	ldr	r0, [pc, #40]	; (4030c0 <spi_read_reg+0xe8>)
  403096:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403098:	2400      	movs	r4, #0
  40309a:	9400      	str	r4, [sp, #0]
  40309c:	4623      	mov	r3, r4
  40309e:	4622      	mov	r2, r4
  4030a0:	4621      	mov	r1, r4
  4030a2:	20cf      	movs	r0, #207	; 0xcf
  4030a4:	4d01      	ldr	r5, [pc, #4]	; (4030ac <spi_read_reg+0xd4>)
  4030a6:	47a8      	blx	r5
		return N_FAIL;
  4030a8:	4620      	mov	r0, r4
  4030aa:	e7b6      	b.n	40301a <spi_read_reg+0x42>
  4030ac:	00402d95 	.word	0x00402d95
  4030b0:	0040bacc 	.word	0x0040bacc
  4030b4:	0040b4a0 	.word	0x0040b4a0
  4030b8:	004051cd 	.word	0x004051cd
  4030bc:	0040bfc4 	.word	0x0040bfc4
  4030c0:	0040c1dc 	.word	0x0040c1dc
  4030c4:	00402b99 	.word	0x00402b99
  4030c8:	0040bff0 	.word	0x0040bff0
  4030cc:	00402c5d 	.word	0x00402c5d
  4030d0:	0040c024 	.word	0x0040c024

004030d4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4030d4:	2000      	movs	r0, #0
  4030d6:	4b01      	ldr	r3, [pc, #4]	; (4030dc <nm_spi_deinit+0x8>)
  4030d8:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4030da:	4770      	bx	lr
  4030dc:	20400a68 	.word	0x20400a68

004030e0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4030e0:	b500      	push	{lr}
  4030e2:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4030e4:	a901      	add	r1, sp, #4
  4030e6:	4b03      	ldr	r3, [pc, #12]	; (4030f4 <nm_spi_read_reg+0x14>)
  4030e8:	4798      	blx	r3

	return u32Val;
}
  4030ea:	9801      	ldr	r0, [sp, #4]
  4030ec:	b003      	add	sp, #12
  4030ee:	f85d fb04 	ldr.w	pc, [sp], #4
  4030f2:	bf00      	nop
  4030f4:	00402fd9 	.word	0x00402fd9

004030f8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4030f8:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4030fa:	4b04      	ldr	r3, [pc, #16]	; (40310c <nm_spi_read_reg_with_ret+0x14>)
  4030fc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4030fe:	2801      	cmp	r0, #1

	return s8Ret;
}
  403100:	bf0c      	ite	eq
  403102:	2000      	moveq	r0, #0
  403104:	f06f 0005 	mvnne.w	r0, #5
  403108:	bd08      	pop	{r3, pc}
  40310a:	bf00      	nop
  40310c:	00402fd9 	.word	0x00402fd9

00403110 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403110:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  403112:	4b04      	ldr	r3, [pc, #16]	; (403124 <nm_spi_write_reg+0x14>)
  403114:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403116:	2801      	cmp	r0, #1

	return s8Ret;
}
  403118:	bf0c      	ite	eq
  40311a:	2000      	moveq	r0, #0
  40311c:	f06f 0005 	mvnne.w	r0, #5
  403120:	bd08      	pop	{r3, pc}
  403122:	bf00      	nop
  403124:	00402f45 	.word	0x00402f45

00403128 <nm_spi_init>:
{
  403128:	b530      	push	{r4, r5, lr}
  40312a:	b083      	sub	sp, #12
	uint32 reg =0;
  40312c:	2300      	movs	r3, #0
  40312e:	a902      	add	r1, sp, #8
  403130:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  403134:	4a34      	ldr	r2, [pc, #208]	; (403208 <nm_spi_init+0xe0>)
  403136:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  403138:	f64e 0024 	movw	r0, #59428	; 0xe824
  40313c:	4b33      	ldr	r3, [pc, #204]	; (40320c <nm_spi_init+0xe4>)
  40313e:	4798      	blx	r3
  403140:	b348      	cbz	r0, 403196 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  403142:	4b31      	ldr	r3, [pc, #196]	; (403208 <nm_spi_init+0xe0>)
  403144:	781b      	ldrb	r3, [r3, #0]
  403146:	b97b      	cbnz	r3, 403168 <nm_spi_init+0x40>
		reg &= ~0x70;
  403148:	9900      	ldr	r1, [sp, #0]
  40314a:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  40314e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403152:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  403154:	f64e 0024 	movw	r0, #59428	; 0xe824
  403158:	4b2d      	ldr	r3, [pc, #180]	; (403210 <nm_spi_init+0xe8>)
  40315a:	4798      	blx	r3
  40315c:	4604      	mov	r4, r0
  40315e:	2800      	cmp	r0, #0
  403160:	d039      	beq.n	4031d6 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  403162:	2201      	movs	r2, #1
  403164:	4b28      	ldr	r3, [pc, #160]	; (403208 <nm_spi_init+0xe0>)
  403166:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  403168:	a901      	add	r1, sp, #4
  40316a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40316e:	4b27      	ldr	r3, [pc, #156]	; (40320c <nm_spi_init+0xe4>)
  403170:	4798      	blx	r3
  403172:	2800      	cmp	r0, #0
  403174:	d03a      	beq.n	4031ec <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  403176:	f64e 0024 	movw	r0, #59428	; 0xe824
  40317a:	4b26      	ldr	r3, [pc, #152]	; (403214 <nm_spi_init+0xec>)
  40317c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  40317e:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  403182:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403186:	f64e 0024 	movw	r0, #59428	; 0xe824
  40318a:	4b23      	ldr	r3, [pc, #140]	; (403218 <nm_spi_init+0xf0>)
  40318c:	4798      	blx	r3
	return M2M_SUCCESS;
  40318e:	2400      	movs	r4, #0
}
  403190:	4620      	mov	r0, r4
  403192:	b003      	add	sp, #12
  403194:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  403196:	2201      	movs	r2, #1
  403198:	4b1b      	ldr	r3, [pc, #108]	; (403208 <nm_spi_init+0xe0>)
  40319a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  40319c:	f240 22c5 	movw	r2, #709	; 0x2c5
  4031a0:	491e      	ldr	r1, [pc, #120]	; (40321c <nm_spi_init+0xf4>)
  4031a2:	481f      	ldr	r0, [pc, #124]	; (403220 <nm_spi_init+0xf8>)
  4031a4:	4c1f      	ldr	r4, [pc, #124]	; (403224 <nm_spi_init+0xfc>)
  4031a6:	47a0      	blx	r4
  4031a8:	481f      	ldr	r0, [pc, #124]	; (403228 <nm_spi_init+0x100>)
  4031aa:	47a0      	blx	r4
  4031ac:	481f      	ldr	r0, [pc, #124]	; (40322c <nm_spi_init+0x104>)
  4031ae:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  4031b0:	4669      	mov	r1, sp
  4031b2:	f64e 0024 	movw	r0, #59428	; 0xe824
  4031b6:	4b15      	ldr	r3, [pc, #84]	; (40320c <nm_spi_init+0xe4>)
  4031b8:	4798      	blx	r3
  4031ba:	4604      	mov	r4, r0
  4031bc:	2800      	cmp	r0, #0
  4031be:	d1c0      	bne.n	403142 <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4031c0:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  4031c4:	4915      	ldr	r1, [pc, #84]	; (40321c <nm_spi_init+0xf4>)
  4031c6:	4816      	ldr	r0, [pc, #88]	; (403220 <nm_spi_init+0xf8>)
  4031c8:	4d16      	ldr	r5, [pc, #88]	; (403224 <nm_spi_init+0xfc>)
  4031ca:	47a8      	blx	r5
  4031cc:	4818      	ldr	r0, [pc, #96]	; (403230 <nm_spi_init+0x108>)
  4031ce:	47a8      	blx	r5
  4031d0:	4816      	ldr	r0, [pc, #88]	; (40322c <nm_spi_init+0x104>)
  4031d2:	47a8      	blx	r5
			return 0;
  4031d4:	e7dc      	b.n	403190 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  4031d6:	f240 22d2 	movw	r2, #722	; 0x2d2
  4031da:	4910      	ldr	r1, [pc, #64]	; (40321c <nm_spi_init+0xf4>)
  4031dc:	4810      	ldr	r0, [pc, #64]	; (403220 <nm_spi_init+0xf8>)
  4031de:	4d11      	ldr	r5, [pc, #68]	; (403224 <nm_spi_init+0xfc>)
  4031e0:	47a8      	blx	r5
  4031e2:	4814      	ldr	r0, [pc, #80]	; (403234 <nm_spi_init+0x10c>)
  4031e4:	47a8      	blx	r5
  4031e6:	4811      	ldr	r0, [pc, #68]	; (40322c <nm_spi_init+0x104>)
  4031e8:	47a8      	blx	r5
			return 0;
  4031ea:	e7d1      	b.n	403190 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  4031ec:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  4031f0:	490a      	ldr	r1, [pc, #40]	; (40321c <nm_spi_init+0xf4>)
  4031f2:	480b      	ldr	r0, [pc, #44]	; (403220 <nm_spi_init+0xf8>)
  4031f4:	4c0b      	ldr	r4, [pc, #44]	; (403224 <nm_spi_init+0xfc>)
  4031f6:	47a0      	blx	r4
  4031f8:	480f      	ldr	r0, [pc, #60]	; (403238 <nm_spi_init+0x110>)
  4031fa:	47a0      	blx	r4
  4031fc:	480b      	ldr	r0, [pc, #44]	; (40322c <nm_spi_init+0x104>)
  4031fe:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  403200:	f06f 0405 	mvn.w	r4, #5
  403204:	e7c4      	b.n	403190 <nm_spi_init+0x68>
  403206:	bf00      	nop
  403208:	20400a68 	.word	0x20400a68
  40320c:	00402fd9 	.word	0x00402fd9
  403210:	00402f45 	.word	0x00402f45
  403214:	004030e1 	.word	0x004030e1
  403218:	00403111 	.word	0x00403111
  40321c:	0040bae8 	.word	0x0040bae8
  403220:	0040b4a0 	.word	0x0040b4a0
  403224:	004051cd 	.word	0x004051cd
  403228:	0040bbf4 	.word	0x0040bbf4
  40322c:	0040c1dc 	.word	0x0040c1dc
  403230:	0040bc44 	.word	0x0040bc44
  403234:	0040bc74 	.word	0x0040bc74
  403238:	0040bca8 	.word	0x0040bca8

0040323c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  40323c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40323e:	b083      	sub	sp, #12
  403240:	4604      	mov	r4, r0
  403242:	460f      	mov	r7, r1
  403244:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  403246:	2200      	movs	r2, #0
  403248:	9200      	str	r2, [sp, #0]
  40324a:	462b      	mov	r3, r5
  40324c:	4601      	mov	r1, r0
  40324e:	20c8      	movs	r0, #200	; 0xc8
  403250:	4e22      	ldr	r6, [pc, #136]	; (4032dc <nm_spi_read_block+0xa0>)
  403252:	47b0      	blx	r6
	if (result != N_OK) {
  403254:	2801      	cmp	r0, #1
  403256:	d00e      	beq.n	403276 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  403258:	f44f 721d 	mov.w	r2, #628	; 0x274
  40325c:	4920      	ldr	r1, [pc, #128]	; (4032e0 <nm_spi_read_block+0xa4>)
  40325e:	4821      	ldr	r0, [pc, #132]	; (4032e4 <nm_spi_read_block+0xa8>)
  403260:	4d21      	ldr	r5, [pc, #132]	; (4032e8 <nm_spi_read_block+0xac>)
  403262:	47a8      	blx	r5
  403264:	4621      	mov	r1, r4
  403266:	4821      	ldr	r0, [pc, #132]	; (4032ec <nm_spi_read_block+0xb0>)
  403268:	47a8      	blx	r5
  40326a:	4821      	ldr	r0, [pc, #132]	; (4032f0 <nm_spi_read_block+0xb4>)
  40326c:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40326e:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  403272:	b003      	add	sp, #12
  403274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  403276:	20c8      	movs	r0, #200	; 0xc8
  403278:	4b1e      	ldr	r3, [pc, #120]	; (4032f4 <nm_spi_read_block+0xb8>)
  40327a:	4798      	blx	r3
	if (result != N_OK) {
  40327c:	2801      	cmp	r0, #1
  40327e:	d012      	beq.n	4032a6 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  403280:	f240 227a 	movw	r2, #634	; 0x27a
  403284:	4916      	ldr	r1, [pc, #88]	; (4032e0 <nm_spi_read_block+0xa4>)
  403286:	4817      	ldr	r0, [pc, #92]	; (4032e4 <nm_spi_read_block+0xa8>)
  403288:	4d17      	ldr	r5, [pc, #92]	; (4032e8 <nm_spi_read_block+0xac>)
  40328a:	47a8      	blx	r5
  40328c:	4621      	mov	r1, r4
  40328e:	481a      	ldr	r0, [pc, #104]	; (4032f8 <nm_spi_read_block+0xbc>)
  403290:	47a8      	blx	r5
  403292:	4817      	ldr	r0, [pc, #92]	; (4032f0 <nm_spi_read_block+0xb4>)
  403294:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403296:	2100      	movs	r1, #0
  403298:	9100      	str	r1, [sp, #0]
  40329a:	460b      	mov	r3, r1
  40329c:	460a      	mov	r2, r1
  40329e:	20cf      	movs	r0, #207	; 0xcf
  4032a0:	4c0e      	ldr	r4, [pc, #56]	; (4032dc <nm_spi_read_block+0xa0>)
  4032a2:	47a0      	blx	r4
  4032a4:	e7e3      	b.n	40326e <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  4032a6:	2200      	movs	r2, #0
  4032a8:	4629      	mov	r1, r5
  4032aa:	4638      	mov	r0, r7
  4032ac:	4b13      	ldr	r3, [pc, #76]	; (4032fc <nm_spi_read_block+0xc0>)
  4032ae:	4798      	blx	r3
	if (result != N_OK) {
  4032b0:	2801      	cmp	r0, #1
  4032b2:	d011      	beq.n	4032d8 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  4032b4:	f44f 7221 	mov.w	r2, #644	; 0x284
  4032b8:	4909      	ldr	r1, [pc, #36]	; (4032e0 <nm_spi_read_block+0xa4>)
  4032ba:	480a      	ldr	r0, [pc, #40]	; (4032e4 <nm_spi_read_block+0xa8>)
  4032bc:	4c0a      	ldr	r4, [pc, #40]	; (4032e8 <nm_spi_read_block+0xac>)
  4032be:	47a0      	blx	r4
  4032c0:	480f      	ldr	r0, [pc, #60]	; (403300 <nm_spi_read_block+0xc4>)
  4032c2:	47a0      	blx	r4
  4032c4:	480a      	ldr	r0, [pc, #40]	; (4032f0 <nm_spi_read_block+0xb4>)
  4032c6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4032c8:	2100      	movs	r1, #0
  4032ca:	9100      	str	r1, [sp, #0]
  4032cc:	460b      	mov	r3, r1
  4032ce:	460a      	mov	r2, r1
  4032d0:	20cf      	movs	r0, #207	; 0xcf
  4032d2:	4c02      	ldr	r4, [pc, #8]	; (4032dc <nm_spi_read_block+0xa0>)
  4032d4:	47a0      	blx	r4
  4032d6:	e7ca      	b.n	40326e <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4032d8:	2000      	movs	r0, #0
  4032da:	e7ca      	b.n	403272 <nm_spi_read_block+0x36>
  4032dc:	00402d95 	.word	0x00402d95
  4032e0:	0040badc 	.word	0x0040badc
  4032e4:	0040b4a0 	.word	0x0040b4a0
  4032e8:	004051cd 	.word	0x004051cd
  4032ec:	0040bcd0 	.word	0x0040bcd0
  4032f0:	0040c1dc 	.word	0x0040c1dc
  4032f4:	00402b99 	.word	0x00402b99
  4032f8:	0040bd00 	.word	0x0040bd00
  4032fc:	00402c5d 	.word	0x00402c5d
  403300:	0040bd38 	.word	0x0040bd38

00403304 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403308:	b085      	sub	sp, #20
  40330a:	4604      	mov	r4, r0
  40330c:	4688      	mov	r8, r1
  40330e:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  403310:	2200      	movs	r2, #0
  403312:	9200      	str	r2, [sp, #0]
  403314:	462b      	mov	r3, r5
  403316:	4601      	mov	r1, r0
  403318:	20c7      	movs	r0, #199	; 0xc7
  40331a:	4e4d      	ldr	r6, [pc, #308]	; (403450 <nm_spi_write_block+0x14c>)
  40331c:	47b0      	blx	r6
	if (result != N_OK) {
  40331e:	2801      	cmp	r0, #1
  403320:	d00f      	beq.n	403342 <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  403322:	f240 220f 	movw	r2, #527	; 0x20f
  403326:	494b      	ldr	r1, [pc, #300]	; (403454 <nm_spi_write_block+0x150>)
  403328:	484b      	ldr	r0, [pc, #300]	; (403458 <nm_spi_write_block+0x154>)
  40332a:	4d4c      	ldr	r5, [pc, #304]	; (40345c <nm_spi_write_block+0x158>)
  40332c:	47a8      	blx	r5
  40332e:	4621      	mov	r1, r4
  403330:	484b      	ldr	r0, [pc, #300]	; (403460 <nm_spi_write_block+0x15c>)
  403332:	47a8      	blx	r5
  403334:	484b      	ldr	r0, [pc, #300]	; (403464 <nm_spi_write_block+0x160>)
  403336:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403338:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40333c:	b005      	add	sp, #20
  40333e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  403342:	20c7      	movs	r0, #199	; 0xc7
  403344:	4b48      	ldr	r3, [pc, #288]	; (403468 <nm_spi_write_block+0x164>)
  403346:	4798      	blx	r3
	if (result != N_OK) {
  403348:	2801      	cmp	r0, #1
  40334a:	d012      	beq.n	403372 <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  40334c:	f240 2215 	movw	r2, #533	; 0x215
  403350:	4940      	ldr	r1, [pc, #256]	; (403454 <nm_spi_write_block+0x150>)
  403352:	4841      	ldr	r0, [pc, #260]	; (403458 <nm_spi_write_block+0x154>)
  403354:	4d41      	ldr	r5, [pc, #260]	; (40345c <nm_spi_write_block+0x158>)
  403356:	47a8      	blx	r5
  403358:	4621      	mov	r1, r4
  40335a:	4844      	ldr	r0, [pc, #272]	; (40346c <nm_spi_write_block+0x168>)
  40335c:	47a8      	blx	r5
  40335e:	4841      	ldr	r0, [pc, #260]	; (403464 <nm_spi_write_block+0x160>)
  403360:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403362:	2100      	movs	r1, #0
  403364:	9100      	str	r1, [sp, #0]
  403366:	460b      	mov	r3, r1
  403368:	460a      	mov	r2, r1
  40336a:	20cf      	movs	r0, #207	; 0xcf
  40336c:	4c38      	ldr	r4, [pc, #224]	; (403450 <nm_spi_write_block+0x14c>)
  40336e:	47a0      	blx	r4
  403370:	e7e2      	b.n	403338 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  403372:	2400      	movs	r4, #0
  403374:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  403378:	4f3d      	ldr	r7, [pc, #244]	; (403470 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  40337a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 403488 <nm_spi_write_block+0x184>
  40337e:	e01d      	b.n	4033bc <nm_spi_write_block+0xb8>
				order = 0x2;
  403380:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  403384:	bf94      	ite	ls
  403386:	2303      	movls	r3, #3
  403388:	2302      	movhi	r3, #2
		cmd |= order;
  40338a:	f063 030f 	orn	r3, r3, #15
  40338e:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  403392:	2101      	movs	r1, #1
  403394:	f10d 000b 	add.w	r0, sp, #11
  403398:	47b8      	blx	r7
  40339a:	b9e8      	cbnz	r0, 4033d8 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  40339c:	4631      	mov	r1, r6
  40339e:	eb08 0004 	add.w	r0, r8, r4
  4033a2:	47b8      	blx	r7
  4033a4:	2800      	cmp	r0, #0
  4033a6:	d135      	bne.n	403414 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  4033a8:	f899 3000 	ldrb.w	r3, [r9]
  4033ac:	2b00      	cmp	r3, #0
  4033ae:	d03c      	beq.n	40342a <nm_spi_write_block+0x126>
		ix += nbytes;
  4033b0:	4434      	add	r4, r6
  4033b2:	b224      	sxth	r4, r4
		sz -= nbytes;
  4033b4:	1bad      	subs	r5, r5, r6
  4033b6:	b2ad      	uxth	r5, r5
	} while (sz);
  4033b8:	2d00      	cmp	r5, #0
  4033ba:	d046      	beq.n	40344a <nm_spi_write_block+0x146>
  4033bc:	462e      	mov	r6, r5
  4033be:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4033c2:	bf28      	it	cs
  4033c4:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  4033c8:	2c00      	cmp	r4, #0
  4033ca:	d1d9      	bne.n	403380 <nm_spi_write_block+0x7c>
				order = 0x1;
  4033cc:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4033d0:	bf94      	ite	ls
  4033d2:	2303      	movls	r3, #3
  4033d4:	2301      	movhi	r3, #1
  4033d6:	e7d8      	b.n	40338a <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4033d8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4033dc:	4925      	ldr	r1, [pc, #148]	; (403474 <nm_spi_write_block+0x170>)
  4033de:	481e      	ldr	r0, [pc, #120]	; (403458 <nm_spi_write_block+0x154>)
  4033e0:	4c1e      	ldr	r4, [pc, #120]	; (40345c <nm_spi_write_block+0x158>)
  4033e2:	47a0      	blx	r4
  4033e4:	4824      	ldr	r0, [pc, #144]	; (403478 <nm_spi_write_block+0x174>)
  4033e6:	47a0      	blx	r4
  4033e8:	481e      	ldr	r0, [pc, #120]	; (403464 <nm_spi_write_block+0x160>)
  4033ea:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4033ec:	f240 2226 	movw	r2, #550	; 0x226
  4033f0:	4918      	ldr	r1, [pc, #96]	; (403454 <nm_spi_write_block+0x150>)
  4033f2:	4819      	ldr	r0, [pc, #100]	; (403458 <nm_spi_write_block+0x154>)
  4033f4:	4c19      	ldr	r4, [pc, #100]	; (40345c <nm_spi_write_block+0x158>)
  4033f6:	47a0      	blx	r4
  4033f8:	4820      	ldr	r0, [pc, #128]	; (40347c <nm_spi_write_block+0x178>)
  4033fa:	47a0      	blx	r4
  4033fc:	4819      	ldr	r0, [pc, #100]	; (403464 <nm_spi_write_block+0x160>)
  4033fe:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403400:	2400      	movs	r4, #0
  403402:	9400      	str	r4, [sp, #0]
  403404:	4623      	mov	r3, r4
  403406:	4622      	mov	r2, r4
  403408:	4621      	mov	r1, r4
  40340a:	20cf      	movs	r0, #207	; 0xcf
  40340c:	4d10      	ldr	r5, [pc, #64]	; (403450 <nm_spi_write_block+0x14c>)
  40340e:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403410:	4620      	mov	r0, r4
  403412:	e793      	b.n	40333c <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  403414:	f240 12b1 	movw	r2, #433	; 0x1b1
  403418:	4916      	ldr	r1, [pc, #88]	; (403474 <nm_spi_write_block+0x170>)
  40341a:	480f      	ldr	r0, [pc, #60]	; (403458 <nm_spi_write_block+0x154>)
  40341c:	4c0f      	ldr	r4, [pc, #60]	; (40345c <nm_spi_write_block+0x158>)
  40341e:	47a0      	blx	r4
  403420:	4817      	ldr	r0, [pc, #92]	; (403480 <nm_spi_write_block+0x17c>)
  403422:	47a0      	blx	r4
  403424:	480f      	ldr	r0, [pc, #60]	; (403464 <nm_spi_write_block+0x160>)
  403426:	47a0      	blx	r4
  403428:	e7e0      	b.n	4033ec <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  40342a:	2102      	movs	r1, #2
  40342c:	a803      	add	r0, sp, #12
  40342e:	47b8      	blx	r7
  403430:	2800      	cmp	r0, #0
  403432:	d0bd      	beq.n	4033b0 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  403434:	f240 12bb 	movw	r2, #443	; 0x1bb
  403438:	490e      	ldr	r1, [pc, #56]	; (403474 <nm_spi_write_block+0x170>)
  40343a:	4807      	ldr	r0, [pc, #28]	; (403458 <nm_spi_write_block+0x154>)
  40343c:	4c07      	ldr	r4, [pc, #28]	; (40345c <nm_spi_write_block+0x158>)
  40343e:	47a0      	blx	r4
  403440:	4810      	ldr	r0, [pc, #64]	; (403484 <nm_spi_write_block+0x180>)
  403442:	47a0      	blx	r4
  403444:	4807      	ldr	r0, [pc, #28]	; (403464 <nm_spi_write_block+0x160>)
  403446:	47a0      	blx	r4
  403448:	e7d0      	b.n	4033ec <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40344a:	2000      	movs	r0, #0
  40344c:	e776      	b.n	40333c <nm_spi_write_block+0x38>
  40344e:	bf00      	nop
  403450:	00402d95 	.word	0x00402d95
  403454:	0040babc 	.word	0x0040babc
  403458:	0040b4a0 	.word	0x0040b4a0
  40345c:	004051cd 	.word	0x004051cd
  403460:	0040bd60 	.word	0x0040bd60
  403464:	0040c1dc 	.word	0x0040c1dc
  403468:	00402b99 	.word	0x00402b99
  40346c:	0040bd90 	.word	0x0040bd90
  403470:	00402d75 	.word	0x00402d75
  403474:	0040ba9c 	.word	0x0040ba9c
  403478:	0040bdc8 	.word	0x0040bdc8
  40347c:	0040be6c 	.word	0x0040be6c
  403480:	0040be00 	.word	0x0040be00
  403484:	0040be34 	.word	0x0040be34
  403488:	20400a68 	.word	0x20400a68

0040348c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  40348c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403490:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  403494:	b194      	cbz	r4, 4034bc <Socket_ReadSocketData+0x30>
  403496:	4681      	mov	r9, r0
  403498:	460e      	mov	r6, r1
  40349a:	4692      	mov	sl, r2
  40349c:	4698      	mov	r8, r3
  40349e:	0103      	lsls	r3, r0, #4
  4034a0:	4922      	ldr	r1, [pc, #136]	; (40352c <Socket_ReadSocketData+0xa0>)
  4034a2:	58cb      	ldr	r3, [r1, r3]
  4034a4:	b153      	cbz	r3, 4034bc <Socket_ReadSocketData+0x30>
  4034a6:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4034aa:	889b      	ldrh	r3, [r3, #4]
  4034ac:	b29b      	uxth	r3, r3
  4034ae:	b12b      	cbz	r3, 4034bc <Socket_ReadSocketData+0x30>
  4034b0:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4034b4:	7a9b      	ldrb	r3, [r3, #10]
  4034b6:	b2db      	uxtb	r3, r3
  4034b8:	2b01      	cmp	r3, #1
  4034ba:	d001      	beq.n	4034c0 <Socket_ReadSocketData+0x34>
  4034bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  4034c0:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4034c2:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4034c6:	f8df b07c 	ldr.w	fp, [pc, #124]	; 403544 <Socket_ReadSocketData+0xb8>
  4034ca:	e006      	b.n	4034da <Socket_ReadSocketData+0x4e>
  4034cc:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  4034ce:	2301      	movs	r3, #1
  4034d0:	e00b      	b.n	4034ea <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  4034d2:	1b64      	subs	r4, r4, r5
  4034d4:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4034d6:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4034d8:	b1ec      	cbz	r4, 403516 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4034da:	88bb      	ldrh	r3, [r7, #4]
  4034dc:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4034de:	b21b      	sxth	r3, r3
  4034e0:	2b00      	cmp	r3, #0
  4034e2:	ddf3      	ble.n	4034cc <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4034e4:	88bd      	ldrh	r5, [r7, #4]
  4034e6:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  4034e8:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4034ea:	6839      	ldr	r1, [r7, #0]
  4034ec:	462a      	mov	r2, r5
  4034ee:	4640      	mov	r0, r8
  4034f0:	47d8      	blx	fp
  4034f2:	b990      	cbnz	r0, 40351a <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4034f4:	683b      	ldr	r3, [r7, #0]
  4034f6:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4034f8:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4034fa:	88f3      	ldrh	r3, [r6, #6]
  4034fc:	1b5b      	subs	r3, r3, r5
  4034fe:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  403500:	4b0b      	ldr	r3, [pc, #44]	; (403530 <Socket_ReadSocketData+0xa4>)
  403502:	681b      	ldr	r3, [r3, #0]
  403504:	2b00      	cmp	r3, #0
  403506:	d0e4      	beq.n	4034d2 <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  403508:	4b09      	ldr	r3, [pc, #36]	; (403530 <Socket_ReadSocketData+0xa4>)
  40350a:	681b      	ldr	r3, [r3, #0]
  40350c:	4632      	mov	r2, r6
  40350e:	4651      	mov	r1, sl
  403510:	4648      	mov	r0, r9
  403512:	4798      	blx	r3
  403514:	e7dd      	b.n	4034d2 <Socket_ReadSocketData+0x46>
  403516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  40351a:	4806      	ldr	r0, [pc, #24]	; (403534 <Socket_ReadSocketData+0xa8>)
  40351c:	4d06      	ldr	r5, [pc, #24]	; (403538 <Socket_ReadSocketData+0xac>)
  40351e:	47a8      	blx	r5
  403520:	4621      	mov	r1, r4
  403522:	4806      	ldr	r0, [pc, #24]	; (40353c <Socket_ReadSocketData+0xb0>)
  403524:	47a8      	blx	r5
  403526:	4806      	ldr	r0, [pc, #24]	; (403540 <Socket_ReadSocketData+0xb4>)
  403528:	47a8      	blx	r5
	}
}
  40352a:	e7c7      	b.n	4034bc <Socket_ReadSocketData+0x30>
  40352c:	20401690 	.word	0x20401690
  403530:	20401740 	.word	0x20401740
  403534:	0040b770 	.word	0x0040b770
  403538:	004051cd 	.word	0x004051cd
  40353c:	0040c0a8 	.word	0x0040c0a8
  403540:	0040c1dc 	.word	0x0040c1dc
  403544:	00401bc5 	.word	0x00401bc5

00403548 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  403548:	b5f0      	push	{r4, r5, r6, r7, lr}
  40354a:	b099      	sub	sp, #100	; 0x64
  40354c:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40354e:	2841      	cmp	r0, #65	; 0x41
  403550:	d049      	beq.n	4035e6 <m2m_ip_cb+0x9e>
  403552:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  403554:	2842      	cmp	r0, #66	; 0x42
  403556:	d05f      	beq.n	403618 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  403558:	2843      	cmp	r0, #67	; 0x43
  40355a:	d075      	beq.n	403648 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  40355c:	2844      	cmp	r0, #68	; 0x44
  40355e:	f000 80b0 	beq.w	4036c2 <m2m_ip_cb+0x17a>
  403562:	284b      	cmp	r0, #75	; 0x4b
  403564:	f000 80ad 	beq.w	4036c2 <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  403568:	284a      	cmp	r0, #74	; 0x4a
  40356a:	f000 80cc 	beq.w	403706 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40356e:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  403572:	b2db      	uxtb	r3, r3
  403574:	2b07      	cmp	r3, #7
  403576:	f200 80f4 	bhi.w	403762 <m2m_ip_cb+0x21a>
  40357a:	2285      	movs	r2, #133	; 0x85
  40357c:	fa22 f303 	lsr.w	r3, r2, r3
  403580:	f013 0f01 	tst.w	r3, #1
  403584:	f000 80ed 	beq.w	403762 <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  403588:	2848      	cmp	r0, #72	; 0x48
  40358a:	bf14      	ite	ne
  40358c:	2706      	movne	r7, #6
  40358e:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  403590:	2300      	movs	r3, #0
  403592:	2210      	movs	r2, #16
  403594:	a903      	add	r1, sp, #12
  403596:	4620      	mov	r0, r4
  403598:	4e93      	ldr	r6, [pc, #588]	; (4037e8 <m2m_ip_cb+0x2a0>)
  40359a:	47b0      	blx	r6
  40359c:	2800      	cmp	r0, #0
  40359e:	f040 80b0 	bne.w	403702 <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  4035a2:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  4035a6:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  4035aa:	4a90      	ldr	r2, [pc, #576]	; (4037ec <m2m_ip_cb+0x2a4>)
  4035ac:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4035b0:	2300      	movs	r3, #0
  4035b2:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4035b4:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4035b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4035bc:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4035c0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4035c4:	9e04      	ldr	r6, [sp, #16]
  4035c6:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4035c8:	88d2      	ldrh	r2, [r2, #6]
  4035ca:	b292      	uxth	r2, r2
  4035cc:	4291      	cmp	r1, r2
  4035ce:	f000 80ac 	beq.w	40372a <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4035d2:	2d10      	cmp	r5, #16
  4035d4:	f240 8095 	bls.w	403702 <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4035d8:	2301      	movs	r3, #1
  4035da:	2200      	movs	r2, #0
  4035dc:	4611      	mov	r1, r2
  4035de:	4610      	mov	r0, r2
  4035e0:	4c81      	ldr	r4, [pc, #516]	; (4037e8 <m2m_ip_cb+0x2a0>)
  4035e2:	47a0      	blx	r4
	{
  4035e4:	e08d      	b.n	403702 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4035e6:	2300      	movs	r3, #0
  4035e8:	2204      	movs	r2, #4
  4035ea:	a907      	add	r1, sp, #28
  4035ec:	4620      	mov	r0, r4
  4035ee:	4c7e      	ldr	r4, [pc, #504]	; (4037e8 <m2m_ip_cb+0x2a0>)
  4035f0:	47a0      	blx	r4
  4035f2:	2800      	cmp	r0, #0
  4035f4:	f040 8085 	bne.w	403702 <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  4035f8:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4035fc:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  403600:	4b7b      	ldr	r3, [pc, #492]	; (4037f0 <m2m_ip_cb+0x2a8>)
  403602:	681b      	ldr	r3, [r3, #0]
  403604:	2b00      	cmp	r3, #0
  403606:	d07c      	beq.n	403702 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  403608:	4b79      	ldr	r3, [pc, #484]	; (4037f0 <m2m_ip_cb+0x2a8>)
  40360a:	681b      	ldr	r3, [r3, #0]
  40360c:	aa03      	add	r2, sp, #12
  40360e:	2101      	movs	r1, #1
  403610:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  403614:	4798      	blx	r3
  403616:	e074      	b.n	403702 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  403618:	2300      	movs	r3, #0
  40361a:	2204      	movs	r2, #4
  40361c:	a907      	add	r1, sp, #28
  40361e:	4620      	mov	r0, r4
  403620:	4c71      	ldr	r4, [pc, #452]	; (4037e8 <m2m_ip_cb+0x2a0>)
  403622:	47a0      	blx	r4
  403624:	2800      	cmp	r0, #0
  403626:	d16c      	bne.n	403702 <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  403628:	f89d 301d 	ldrb.w	r3, [sp, #29]
  40362c:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  403630:	4b6f      	ldr	r3, [pc, #444]	; (4037f0 <m2m_ip_cb+0x2a8>)
  403632:	681b      	ldr	r3, [r3, #0]
  403634:	2b00      	cmp	r3, #0
  403636:	d064      	beq.n	403702 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  403638:	4b6d      	ldr	r3, [pc, #436]	; (4037f0 <m2m_ip_cb+0x2a8>)
  40363a:	681b      	ldr	r3, [r3, #0]
  40363c:	aa03      	add	r2, sp, #12
  40363e:	2102      	movs	r1, #2
  403640:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  403644:	4798      	blx	r3
  403646:	e05c      	b.n	403702 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  403648:	2300      	movs	r3, #0
  40364a:	220c      	movs	r2, #12
  40364c:	eb0d 0102 	add.w	r1, sp, r2
  403650:	4620      	mov	r0, r4
  403652:	4c65      	ldr	r4, [pc, #404]	; (4037e8 <m2m_ip_cb+0x2a0>)
  403654:	47a0      	blx	r4
  403656:	2800      	cmp	r0, #0
  403658:	d153      	bne.n	403702 <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  40365a:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40365e:	2b00      	cmp	r3, #0
  403660:	db19      	blt.n	403696 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  403662:	4a62      	ldr	r2, [pc, #392]	; (4037ec <m2m_ip_cb+0x2a4>)
  403664:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  403668:	2100      	movs	r1, #0
  40366a:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  40366c:	2101      	movs	r1, #1
  40366e:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  403670:	4960      	ldr	r1, [pc, #384]	; (4037f4 <m2m_ip_cb+0x2ac>)
  403672:	880a      	ldrh	r2, [r1, #0]
  403674:	3201      	adds	r2, #1
  403676:	b292      	uxth	r2, r2
  403678:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  40367a:	880a      	ldrh	r2, [r1, #0]
  40367c:	b292      	uxth	r2, r2
  40367e:	b91a      	cbnz	r2, 403688 <m2m_ip_cb+0x140>
					++gu16SessionID;
  403680:	880a      	ldrh	r2, [r1, #0]
  403682:	3201      	adds	r2, #1
  403684:	b292      	uxth	r2, r2
  403686:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  403688:	4a5a      	ldr	r2, [pc, #360]	; (4037f4 <m2m_ip_cb+0x2ac>)
  40368a:	8811      	ldrh	r1, [r2, #0]
  40368c:	b289      	uxth	r1, r1
  40368e:	4a57      	ldr	r2, [pc, #348]	; (4037ec <m2m_ip_cb+0x2a4>)
  403690:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  403694:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  403696:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  40369a:	2302      	movs	r3, #2
  40369c:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4036a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4036a4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4036a8:	9b04      	ldr	r3, [sp, #16]
  4036aa:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4036ac:	4b50      	ldr	r3, [pc, #320]	; (4037f0 <m2m_ip_cb+0x2a8>)
  4036ae:	681b      	ldr	r3, [r3, #0]
  4036b0:	b33b      	cbz	r3, 403702 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  4036b2:	4b4f      	ldr	r3, [pc, #316]	; (4037f0 <m2m_ip_cb+0x2a8>)
  4036b4:	681b      	ldr	r3, [r3, #0]
  4036b6:	aa07      	add	r2, sp, #28
  4036b8:	2104      	movs	r1, #4
  4036ba:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4036be:	4798      	blx	r3
  4036c0:	e01f      	b.n	403702 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4036c2:	2300      	movs	r3, #0
  4036c4:	2204      	movs	r2, #4
  4036c6:	a907      	add	r1, sp, #28
  4036c8:	4620      	mov	r0, r4
  4036ca:	4c47      	ldr	r4, [pc, #284]	; (4037e8 <m2m_ip_cb+0x2a0>)
  4036cc:	47a0      	blx	r4
  4036ce:	b9c0      	cbnz	r0, 403702 <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  4036d0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4036d4:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4036d8:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4036dc:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4036e0:	b93b      	cbnz	r3, 4036f2 <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4036e2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4036e6:	3b08      	subs	r3, #8
  4036e8:	b29b      	uxth	r3, r3
  4036ea:	4a40      	ldr	r2, [pc, #256]	; (4037ec <m2m_ip_cb+0x2a4>)
  4036ec:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4036f0:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  4036f2:	4b3f      	ldr	r3, [pc, #252]	; (4037f0 <m2m_ip_cb+0x2a8>)
  4036f4:	681b      	ldr	r3, [r3, #0]
  4036f6:	b123      	cbz	r3, 403702 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4036f8:	4b3d      	ldr	r3, [pc, #244]	; (4037f0 <m2m_ip_cb+0x2a8>)
  4036fa:	681b      	ldr	r3, [r3, #0]
  4036fc:	aa03      	add	r2, sp, #12
  4036fe:	2105      	movs	r1, #5
  403700:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  403702:	b019      	add	sp, #100	; 0x64
  403704:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  403706:	2300      	movs	r3, #0
  403708:	2244      	movs	r2, #68	; 0x44
  40370a:	a907      	add	r1, sp, #28
  40370c:	4620      	mov	r0, r4
  40370e:	4c36      	ldr	r4, [pc, #216]	; (4037e8 <m2m_ip_cb+0x2a0>)
  403710:	47a0      	blx	r4
  403712:	2800      	cmp	r0, #0
  403714:	d1f5      	bne.n	403702 <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  403716:	4b38      	ldr	r3, [pc, #224]	; (4037f8 <m2m_ip_cb+0x2b0>)
  403718:	681b      	ldr	r3, [r3, #0]
  40371a:	2b00      	cmp	r3, #0
  40371c:	d0f1      	beq.n	403702 <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  40371e:	4b36      	ldr	r3, [pc, #216]	; (4037f8 <m2m_ip_cb+0x2b0>)
  403720:	681b      	ldr	r3, [r3, #0]
  403722:	9917      	ldr	r1, [sp, #92]	; 0x5c
  403724:	a807      	add	r0, sp, #28
  403726:	4798      	blx	r3
  403728:	e7eb      	b.n	403702 <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  40372a:	f1be 0f00 	cmp.w	lr, #0
  40372e:	dd01      	ble.n	403734 <m2m_ip_cb+0x1ec>
  403730:	45ae      	cmp	lr, r5
  403732:	db0d      	blt.n	403750 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  403734:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  403738:	2300      	movs	r3, #0
  40373a:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  40373c:	4b2c      	ldr	r3, [pc, #176]	; (4037f0 <m2m_ip_cb+0x2a8>)
  40373e:	681b      	ldr	r3, [r3, #0]
  403740:	2b00      	cmp	r3, #0
  403742:	d0de      	beq.n	403702 <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  403744:	4b2a      	ldr	r3, [pc, #168]	; (4037f0 <m2m_ip_cb+0x2a8>)
  403746:	681b      	ldr	r3, [r3, #0]
  403748:	aa07      	add	r2, sp, #28
  40374a:	4639      	mov	r1, r7
  40374c:	4798      	blx	r3
  40374e:	e7d8      	b.n	403702 <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  403750:	fa1f f28e 	uxth.w	r2, lr
  403754:	9200      	str	r2, [sp, #0]
  403756:	4423      	add	r3, r4
  403758:	463a      	mov	r2, r7
  40375a:	a907      	add	r1, sp, #28
  40375c:	4c27      	ldr	r4, [pc, #156]	; (4037fc <m2m_ip_cb+0x2b4>)
  40375e:	47a0      	blx	r4
  403760:	e7cf      	b.n	403702 <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  403762:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  403766:	2b45      	cmp	r3, #69	; 0x45
  403768:	d019      	beq.n	40379e <m2m_ip_cb+0x256>
  40376a:	284c      	cmp	r0, #76	; 0x4c
  40376c:	d017      	beq.n	40379e <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40376e:	2852      	cmp	r0, #82	; 0x52
  403770:	d1c7      	bne.n	403702 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  403772:	2301      	movs	r3, #1
  403774:	2214      	movs	r2, #20
  403776:	a907      	add	r1, sp, #28
  403778:	4620      	mov	r0, r4
  40377a:	4c1b      	ldr	r4, [pc, #108]	; (4037e8 <m2m_ip_cb+0x2a0>)
  40377c:	47a0      	blx	r4
  40377e:	2800      	cmp	r0, #0
  403780:	d1bf      	bne.n	403702 <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  403782:	4b1f      	ldr	r3, [pc, #124]	; (403800 <m2m_ip_cb+0x2b8>)
  403784:	9a08      	ldr	r2, [sp, #32]
  403786:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  403788:	681b      	ldr	r3, [r3, #0]
  40378a:	2b00      	cmp	r3, #0
  40378c:	d0b9      	beq.n	403702 <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40378e:	4b1c      	ldr	r3, [pc, #112]	; (403800 <m2m_ip_cb+0x2b8>)
  403790:	681b      	ldr	r3, [r3, #0]
  403792:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  403796:	9909      	ldr	r1, [sp, #36]	; 0x24
  403798:	9807      	ldr	r0, [sp, #28]
  40379a:	4798      	blx	r3
}
  40379c:	e7b1      	b.n	403702 <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  40379e:	2847      	cmp	r0, #71	; 0x47
  4037a0:	bf14      	ite	ne
  4037a2:	2507      	movne	r5, #7
  4037a4:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  4037a6:	2300      	movs	r3, #0
  4037a8:	2208      	movs	r2, #8
  4037aa:	a907      	add	r1, sp, #28
  4037ac:	4620      	mov	r0, r4
  4037ae:	4c0e      	ldr	r4, [pc, #56]	; (4037e8 <m2m_ip_cb+0x2a0>)
  4037b0:	47a0      	blx	r4
  4037b2:	2800      	cmp	r0, #0
  4037b4:	d1a5      	bne.n	403702 <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  4037b6:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  4037ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  4037be:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4037c2:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4037c6:	4b09      	ldr	r3, [pc, #36]	; (4037ec <m2m_ip_cb+0x2a4>)
  4037c8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4037cc:	88db      	ldrh	r3, [r3, #6]
  4037ce:	b29b      	uxth	r3, r3
  4037d0:	429a      	cmp	r2, r3
  4037d2:	d196      	bne.n	403702 <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  4037d4:	4b06      	ldr	r3, [pc, #24]	; (4037f0 <m2m_ip_cb+0x2a8>)
  4037d6:	681b      	ldr	r3, [r3, #0]
  4037d8:	2b00      	cmp	r3, #0
  4037da:	d092      	beq.n	403702 <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  4037dc:	4b04      	ldr	r3, [pc, #16]	; (4037f0 <m2m_ip_cb+0x2a8>)
  4037de:	681b      	ldr	r3, [r3, #0]
  4037e0:	aa03      	add	r2, sp, #12
  4037e2:	4629      	mov	r1, r5
  4037e4:	4798      	blx	r3
	{
  4037e6:	e78c      	b.n	403702 <m2m_ip_cb+0x1ba>
  4037e8:	00401bc5 	.word	0x00401bc5
  4037ec:	20401690 	.word	0x20401690
  4037f0:	20401740 	.word	0x20401740
  4037f4:	20400a6a 	.word	0x20400a6a
  4037f8:	20401748 	.word	0x20401748
  4037fc:	0040348d 	.word	0x0040348d
  403800:	20401744 	.word	0x20401744

00403804 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  403804:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  403806:	4b0a      	ldr	r3, [pc, #40]	; (403830 <socketInit+0x2c>)
  403808:	781b      	ldrb	r3, [r3, #0]
  40380a:	b103      	cbz	r3, 40380e <socketInit+0xa>
  40380c:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  40380e:	22b0      	movs	r2, #176	; 0xb0
  403810:	2100      	movs	r1, #0
  403812:	4808      	ldr	r0, [pc, #32]	; (403834 <socketInit+0x30>)
  403814:	4b08      	ldr	r3, [pc, #32]	; (403838 <socketInit+0x34>)
  403816:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  403818:	4908      	ldr	r1, [pc, #32]	; (40383c <socketInit+0x38>)
  40381a:	2002      	movs	r0, #2
  40381c:	4b08      	ldr	r3, [pc, #32]	; (403840 <socketInit+0x3c>)
  40381e:	4798      	blx	r3
		gbSocketInit=1;
  403820:	2201      	movs	r2, #1
  403822:	4b03      	ldr	r3, [pc, #12]	; (403830 <socketInit+0x2c>)
  403824:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  403826:	2200      	movs	r2, #0
  403828:	4b06      	ldr	r3, [pc, #24]	; (403844 <socketInit+0x40>)
  40382a:	801a      	strh	r2, [r3, #0]
	}
}
  40382c:	e7ee      	b.n	40380c <socketInit+0x8>
  40382e:	bf00      	nop
  403830:	20400a69 	.word	0x20400a69
  403834:	20401690 	.word	0x20401690
  403838:	00401571 	.word	0x00401571
  40383c:	00403549 	.word	0x00403549
  403840:	00401cd9 	.word	0x00401cd9
  403844:	20400a6a 	.word	0x20400a6a

00403848 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  403848:	4b02      	ldr	r3, [pc, #8]	; (403854 <registerSocketCallback+0xc>)
  40384a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  40384c:	4b02      	ldr	r3, [pc, #8]	; (403858 <registerSocketCallback+0x10>)
  40384e:	6019      	str	r1, [r3, #0]
  403850:	4770      	bx	lr
  403852:	bf00      	nop
  403854:	20401740 	.word	0x20401740
  403858:	20401748 	.word	0x20401748

0040385c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  40385c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40385e:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  403860:	2802      	cmp	r0, #2
  403862:	d158      	bne.n	403916 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  403864:	2901      	cmp	r1, #1
  403866:	d059      	beq.n	40391c <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  403868:	2902      	cmp	r1, #2
  40386a:	d116      	bne.n	40389a <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  40386c:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40386e:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  403870:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  403872:	4b2e      	ldr	r3, [pc, #184]	; (40392c <socket+0xd0>)
  403874:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  403878:	7a9b      	ldrb	r3, [r3, #10]
  40387a:	2b00      	cmp	r3, #0
  40387c:	d051      	beq.n	403922 <socket+0xc6>
  40387e:	1c63      	adds	r3, r4, #1
  403880:	b2db      	uxtb	r3, r3
  403882:	4f2a      	ldr	r7, [pc, #168]	; (40392c <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  403884:	b2dc      	uxtb	r4, r3
  403886:	42b4      	cmp	r4, r6
  403888:	d240      	bcs.n	40390c <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  40388a:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  40388c:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  403890:	7a89      	ldrb	r1, [r1, #10]
  403892:	1c58      	adds	r0, r3, #1
  403894:	b121      	cbz	r1, 4038a0 <socket+0x44>
  403896:	4603      	mov	r3, r0
  403898:	e7f4      	b.n	403884 <socket+0x28>
			return sock;
  40389a:	f04f 34ff 	mov.w	r4, #4294967295
  40389e:	e037      	b.n	403910 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  4038a0:	4822      	ldr	r0, [pc, #136]	; (40392c <socket+0xd0>)
  4038a2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4038a6:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  4038a8:	2210      	movs	r2, #16
  4038aa:	2100      	movs	r1, #0
  4038ac:	4b20      	ldr	r3, [pc, #128]	; (403930 <socket+0xd4>)
  4038ae:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  4038b0:	4b1e      	ldr	r3, [pc, #120]	; (40392c <socket+0xd0>)
  4038b2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4038b6:	2201      	movs	r2, #1
  4038b8:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4038ba:	4a1e      	ldr	r2, [pc, #120]	; (403934 <socket+0xd8>)
  4038bc:	8813      	ldrh	r3, [r2, #0]
  4038be:	3301      	adds	r3, #1
  4038c0:	b29b      	uxth	r3, r3
  4038c2:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  4038c4:	8813      	ldrh	r3, [r2, #0]
  4038c6:	b29b      	uxth	r3, r3
  4038c8:	b91b      	cbnz	r3, 4038d2 <socket+0x76>
					++gu16SessionID;
  4038ca:	8813      	ldrh	r3, [r2, #0]
  4038cc:	3301      	adds	r3, #1
  4038ce:	b29b      	uxth	r3, r3
  4038d0:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  4038d2:	4b18      	ldr	r3, [pc, #96]	; (403934 <socket+0xd8>)
  4038d4:	881a      	ldrh	r2, [r3, #0]
  4038d6:	b292      	uxth	r2, r2
  4038d8:	4b14      	ldr	r3, [pc, #80]	; (40392c <socket+0xd0>)
  4038da:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4038de:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  4038e0:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  4038e2:	f016 0f01 	tst.w	r6, #1
  4038e6:	d013      	beq.n	403910 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  4038e8:	aa06      	add	r2, sp, #24
  4038ea:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  4038ee:	4b0f      	ldr	r3, [pc, #60]	; (40392c <socket+0xd0>)
  4038f0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4038f4:	2321      	movs	r3, #33	; 0x21
  4038f6:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4038f8:	2300      	movs	r3, #0
  4038fa:	9302      	str	r3, [sp, #8]
  4038fc:	9301      	str	r3, [sp, #4]
  4038fe:	9300      	str	r3, [sp, #0]
  403900:	2304      	movs	r3, #4
  403902:	2150      	movs	r1, #80	; 0x50
  403904:	2002      	movs	r0, #2
  403906:	4d0c      	ldr	r5, [pc, #48]	; (403938 <socket+0xdc>)
  403908:	47a8      	blx	r5
  40390a:	e001      	b.n	403910 <socket+0xb4>
	SOCKET		sock = -1;
  40390c:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  403910:	4620      	mov	r0, r4
  403912:	b007      	add	sp, #28
  403914:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  403916:	f04f 34ff 	mov.w	r4, #4294967295
  40391a:	e7f9      	b.n	403910 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  40391c:	2607      	movs	r6, #7
			u8Count = 0;
  40391e:	2400      	movs	r4, #0
  403920:	e7a6      	b.n	403870 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  403922:	4802      	ldr	r0, [pc, #8]	; (40392c <socket+0xd0>)
  403924:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403928:	e7bd      	b.n	4038a6 <socket+0x4a>
  40392a:	bf00      	nop
  40392c:	20401690 	.word	0x20401690
  403930:	00401571 	.word	0x00401571
  403934:	20400a6a 	.word	0x20400a6a
  403938:	004016d5 	.word	0x004016d5

0040393c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  40393c:	b530      	push	{r4, r5, lr}
  40393e:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  403940:	1e04      	subs	r4, r0, #0
  403942:	db36      	blt.n	4039b2 <connect+0x76>
  403944:	2900      	cmp	r1, #0
  403946:	d034      	beq.n	4039b2 <connect+0x76>
  403948:	4b1d      	ldr	r3, [pc, #116]	; (4039c0 <connect+0x84>)
  40394a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40394e:	7a9b      	ldrb	r3, [r3, #10]
  403950:	b2db      	uxtb	r3, r3
  403952:	2a00      	cmp	r2, #0
  403954:	d030      	beq.n	4039b8 <connect+0x7c>
  403956:	2b01      	cmp	r3, #1
  403958:	d12e      	bne.n	4039b8 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  40395a:	4b19      	ldr	r3, [pc, #100]	; (4039c0 <connect+0x84>)
  40395c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  403960:	7adb      	ldrb	r3, [r3, #11]
  403962:	f013 0f01 	tst.w	r3, #1
  403966:	d022      	beq.n	4039ae <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  403968:	4b15      	ldr	r3, [pc, #84]	; (4039c0 <connect+0x84>)
  40396a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40396e:	7adb      	ldrb	r3, [r3, #11]
  403970:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  403974:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  403976:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  40397a:	2208      	movs	r2, #8
  40397c:	a805      	add	r0, sp, #20
  40397e:	4b11      	ldr	r3, [pc, #68]	; (4039c4 <connect+0x88>)
  403980:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  403982:	480f      	ldr	r0, [pc, #60]	; (4039c0 <connect+0x84>)
  403984:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403988:	88c3      	ldrh	r3, [r0, #6]
  40398a:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  40398e:	2300      	movs	r3, #0
  403990:	9302      	str	r3, [sp, #8]
  403992:	9301      	str	r3, [sp, #4]
  403994:	9300      	str	r3, [sp, #0]
  403996:	230c      	movs	r3, #12
  403998:	aa05      	add	r2, sp, #20
  40399a:	4629      	mov	r1, r5
  40399c:	2002      	movs	r0, #2
  40399e:	4c0a      	ldr	r4, [pc, #40]	; (4039c8 <connect+0x8c>)
  4039a0:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4039a2:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  4039a4:	bf18      	it	ne
  4039a6:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  4039aa:	b009      	add	sp, #36	; 0x24
  4039ac:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  4039ae:	2544      	movs	r5, #68	; 0x44
  4039b0:	e7e1      	b.n	403976 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4039b2:	f06f 0005 	mvn.w	r0, #5
  4039b6:	e7f8      	b.n	4039aa <connect+0x6e>
  4039b8:	f06f 0005 	mvn.w	r0, #5
  4039bc:	e7f5      	b.n	4039aa <connect+0x6e>
  4039be:	bf00      	nop
  4039c0:	20401690 	.word	0x20401690
  4039c4:	0040155d 	.word	0x0040155d
  4039c8:	004016d5 	.word	0x004016d5

004039cc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  4039cc:	b530      	push	{r4, r5, lr}
  4039ce:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4039d0:	460c      	mov	r4, r1
  4039d2:	3100      	adds	r1, #0
  4039d4:	bf18      	it	ne
  4039d6:	2101      	movne	r1, #1
  4039d8:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4039dc:	bf88      	it	hi
  4039de:	2100      	movhi	r1, #0
  4039e0:	2900      	cmp	r1, #0
  4039e2:	d037      	beq.n	403a54 <send+0x88>
  4039e4:	2800      	cmp	r0, #0
  4039e6:	db35      	blt.n	403a54 <send+0x88>
  4039e8:	4b1d      	ldr	r3, [pc, #116]	; (403a60 <send+0x94>)
  4039ea:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4039ee:	7a9b      	ldrb	r3, [r3, #10]
  4039f0:	b2db      	uxtb	r3, r3
  4039f2:	2b01      	cmp	r3, #1
  4039f4:	d131      	bne.n	403a5a <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  4039f6:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  4039fa:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  4039fe:	4b18      	ldr	r3, [pc, #96]	; (403a60 <send+0x94>)
  403a00:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403a04:	88db      	ldrh	r3, [r3, #6]
  403a06:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  403a0a:	2807      	cmp	r0, #7
  403a0c:	bfb4      	ite	lt
  403a0e:	2550      	movlt	r5, #80	; 0x50
  403a10:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403a12:	4b13      	ldr	r3, [pc, #76]	; (403a60 <send+0x94>)
  403a14:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403a18:	7adb      	ldrb	r3, [r3, #11]
  403a1a:	f013 0f01 	tst.w	r3, #1
  403a1e:	d017      	beq.n	403a50 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  403a20:	4b0f      	ldr	r3, [pc, #60]	; (403a60 <send+0x94>)
  403a22:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403a26:	8905      	ldrh	r5, [r0, #8]
  403a28:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  403a2a:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  403a2c:	9502      	str	r5, [sp, #8]
  403a2e:	9201      	str	r2, [sp, #4]
  403a30:	9400      	str	r4, [sp, #0]
  403a32:	2310      	movs	r3, #16
  403a34:	eb0d 0203 	add.w	r2, sp, r3
  403a38:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403a3c:	2002      	movs	r0, #2
  403a3e:	4c09      	ldr	r4, [pc, #36]	; (403a64 <send+0x98>)
  403a40:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  403a42:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  403a44:	bf0c      	ite	eq
  403a46:	2000      	moveq	r0, #0
  403a48:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  403a4c:	b009      	add	sp, #36	; 0x24
  403a4e:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  403a50:	2145      	movs	r1, #69	; 0x45
  403a52:	e7eb      	b.n	403a2c <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  403a54:	f06f 0005 	mvn.w	r0, #5
  403a58:	e7f8      	b.n	403a4c <send+0x80>
  403a5a:	f06f 0005 	mvn.w	r0, #5
  403a5e:	e7f5      	b.n	403a4c <send+0x80>
  403a60:	20401690 	.word	0x20401690
  403a64:	004016d5 	.word	0x004016d5

00403a68 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  403a68:	2900      	cmp	r1, #0
  403a6a:	bf18      	it	ne
  403a6c:	2a00      	cmpne	r2, #0
  403a6e:	d044      	beq.n	403afa <recv+0x92>
{
  403a70:	b570      	push	{r4, r5, r6, lr}
  403a72:	b086      	sub	sp, #24
  403a74:	460e      	mov	r6, r1
  403a76:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  403a78:	2800      	cmp	r0, #0
  403a7a:	db36      	blt.n	403aea <recv+0x82>
  403a7c:	4a20      	ldr	r2, [pc, #128]	; (403b00 <recv+0x98>)
  403a7e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  403a82:	7a92      	ldrb	r2, [r2, #10]
  403a84:	b2d2      	uxtb	r2, r2
  403a86:	2a01      	cmp	r2, #1
  403a88:	d132      	bne.n	403af0 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  403a8a:	4c1d      	ldr	r4, [pc, #116]	; (403b00 <recv+0x98>)
  403a8c:	0101      	lsls	r1, r0, #4
  403a8e:	1862      	adds	r2, r4, r1
  403a90:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  403a92:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  403a94:	7b12      	ldrb	r2, [r2, #12]
  403a96:	2a00      	cmp	r2, #0
  403a98:	d12d      	bne.n	403af6 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  403a9a:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  403a9e:	2101      	movs	r1, #1
  403aa0:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403aa2:	7ad2      	ldrb	r2, [r2, #11]
  403aa4:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  403aa6:	2a00      	cmp	r2, #0
  403aa8:	bf0c      	ite	eq
  403aaa:	2146      	moveq	r1, #70	; 0x46
  403aac:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  403aae:	b9d3      	cbnz	r3, 403ae6 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  403ab0:	f04f 33ff 	mov.w	r3, #4294967295
  403ab4:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  403ab6:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  403aba:	4b11      	ldr	r3, [pc, #68]	; (403b00 <recv+0x98>)
  403abc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403ac0:	88c3      	ldrh	r3, [r0, #6]
  403ac2:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  403ac6:	2300      	movs	r3, #0
  403ac8:	9302      	str	r3, [sp, #8]
  403aca:	9301      	str	r3, [sp, #4]
  403acc:	9300      	str	r3, [sp, #0]
  403ace:	2308      	movs	r3, #8
  403ad0:	aa04      	add	r2, sp, #16
  403ad2:	2002      	movs	r0, #2
  403ad4:	4c0b      	ldr	r4, [pc, #44]	; (403b04 <recv+0x9c>)
  403ad6:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  403ad8:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  403ada:	bf0c      	ite	eq
  403adc:	2000      	moveq	r0, #0
  403ade:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  403ae2:	b006      	add	sp, #24
  403ae4:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  403ae6:	9304      	str	r3, [sp, #16]
  403ae8:	e7e5      	b.n	403ab6 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  403aea:	f06f 0005 	mvn.w	r0, #5
  403aee:	e7f8      	b.n	403ae2 <recv+0x7a>
  403af0:	f06f 0005 	mvn.w	r0, #5
  403af4:	e7f5      	b.n	403ae2 <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  403af6:	2000      	movs	r0, #0
  403af8:	e7f3      	b.n	403ae2 <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  403afa:	f06f 0005 	mvn.w	r0, #5
}
  403afe:	4770      	bx	lr
  403b00:	20401690 	.word	0x20401690
  403b04:	004016d5 	.word	0x004016d5

00403b08 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  403b08:	b530      	push	{r4, r5, lr}
  403b0a:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  403b0c:	1e04      	subs	r4, r0, #0
  403b0e:	db2f      	blt.n	403b70 <close+0x68>
  403b10:	4b1a      	ldr	r3, [pc, #104]	; (403b7c <close+0x74>)
  403b12:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  403b16:	7a9b      	ldrb	r3, [r3, #10]
  403b18:	b2db      	uxtb	r3, r3
  403b1a:	2b01      	cmp	r3, #1
  403b1c:	d12b      	bne.n	403b76 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  403b1e:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  403b22:	4b16      	ldr	r3, [pc, #88]	; (403b7c <close+0x74>)
  403b24:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  403b28:	88da      	ldrh	r2, [r3, #6]
  403b2a:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  403b2e:	2200      	movs	r2, #0
  403b30:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  403b32:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403b34:	7adb      	ldrb	r3, [r3, #11]
  403b36:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  403b3a:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  403b3c:	9202      	str	r2, [sp, #8]
  403b3e:	9201      	str	r2, [sp, #4]
  403b40:	9200      	str	r2, [sp, #0]
  403b42:	f04f 0304 	mov.w	r3, #4
  403b46:	aa05      	add	r2, sp, #20
  403b48:	bf0c      	ite	eq
  403b4a:	2149      	moveq	r1, #73	; 0x49
  403b4c:	214e      	movne	r1, #78	; 0x4e
  403b4e:	2002      	movs	r0, #2
  403b50:	4d0b      	ldr	r5, [pc, #44]	; (403b80 <close+0x78>)
  403b52:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  403b54:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  403b56:	bf18      	it	ne
  403b58:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  403b5c:	2210      	movs	r2, #16
  403b5e:	2100      	movs	r1, #0
  403b60:	4806      	ldr	r0, [pc, #24]	; (403b7c <close+0x74>)
  403b62:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403b66:	4b07      	ldr	r3, [pc, #28]	; (403b84 <close+0x7c>)
  403b68:	4798      	blx	r3
	}
	return s8Ret;
}
  403b6a:	4628      	mov	r0, r5
  403b6c:	b007      	add	sp, #28
  403b6e:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403b70:	f06f 0505 	mvn.w	r5, #5
  403b74:	e7f9      	b.n	403b6a <close+0x62>
  403b76:	f06f 0505 	mvn.w	r5, #5
  403b7a:	e7f6      	b.n	403b6a <close+0x62>
  403b7c:	20401690 	.word	0x20401690
  403b80:	004016d5 	.word	0x004016d5
  403b84:	00401571 	.word	0x00401571

00403b88 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  403b88:	b570      	push	{r4, r5, r6, lr}
  403b8a:	b082      	sub	sp, #8
  403b8c:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  403b8e:	4b2b      	ldr	r3, [pc, #172]	; (403c3c <spi_flash_enable+0xb4>)
  403b90:	4798      	blx	r3
  403b92:	f3c0 000b 	ubfx	r0, r0, #0, #12
  403b96:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  403b9a:	d203      	bcs.n	403ba4 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  403b9c:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  403b9e:	4620      	mov	r0, r4
  403ba0:	b002      	add	sp, #8
  403ba2:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  403ba4:	a901      	add	r1, sp, #4
  403ba6:	f241 4010 	movw	r0, #5136	; 0x1410
  403baa:	4b25      	ldr	r3, [pc, #148]	; (403c40 <spi_flash_enable+0xb8>)
  403bac:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  403bae:	4604      	mov	r4, r0
  403bb0:	2800      	cmp	r0, #0
  403bb2:	d1f4      	bne.n	403b9e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  403bb4:	4b23      	ldr	r3, [pc, #140]	; (403c44 <spi_flash_enable+0xbc>)
  403bb6:	9a01      	ldr	r2, [sp, #4]
  403bb8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  403bba:	4923      	ldr	r1, [pc, #140]	; (403c48 <spi_flash_enable+0xc0>)
  403bbc:	4319      	orrs	r1, r3
  403bbe:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  403bc0:	f241 4010 	movw	r0, #5136	; 0x1410
  403bc4:	4b21      	ldr	r3, [pc, #132]	; (403c4c <spi_flash_enable+0xc4>)
  403bc6:	4798      	blx	r3
		if(enable) {
  403bc8:	b305      	cbz	r5, 403c0c <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  403bca:	2100      	movs	r1, #0
  403bcc:	4820      	ldr	r0, [pc, #128]	; (403c50 <spi_flash_enable+0xc8>)
  403bce:	4d1f      	ldr	r5, [pc, #124]	; (403c4c <spi_flash_enable+0xc4>)
  403bd0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  403bd2:	21ab      	movs	r1, #171	; 0xab
  403bd4:	481f      	ldr	r0, [pc, #124]	; (403c54 <spi_flash_enable+0xcc>)
  403bd6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  403bd8:	2101      	movs	r1, #1
  403bda:	481f      	ldr	r0, [pc, #124]	; (403c58 <spi_flash_enable+0xd0>)
  403bdc:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  403bde:	2100      	movs	r1, #0
  403be0:	481e      	ldr	r0, [pc, #120]	; (403c5c <spi_flash_enable+0xd4>)
  403be2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  403be4:	2181      	movs	r1, #129	; 0x81
  403be6:	481e      	ldr	r0, [pc, #120]	; (403c60 <spi_flash_enable+0xd8>)
  403be8:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403bea:	4e1e      	ldr	r6, [pc, #120]	; (403c64 <spi_flash_enable+0xdc>)
  403bec:	4d1e      	ldr	r5, [pc, #120]	; (403c68 <spi_flash_enable+0xe0>)
  403bee:	4630      	mov	r0, r6
  403bf0:	47a8      	blx	r5
  403bf2:	2801      	cmp	r0, #1
  403bf4:	d1fb      	bne.n	403bee <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  403bf6:	4913      	ldr	r1, [pc, #76]	; (403c44 <spi_flash_enable+0xbc>)
  403bf8:	9b01      	ldr	r3, [sp, #4]
  403bfa:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  403bfc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403c00:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  403c02:	f241 4010 	movw	r0, #5136	; 0x1410
  403c06:	4b11      	ldr	r3, [pc, #68]	; (403c4c <spi_flash_enable+0xc4>)
  403c08:	4798      	blx	r3
  403c0a:	e7c8      	b.n	403b9e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  403c0c:	2100      	movs	r1, #0
  403c0e:	4810      	ldr	r0, [pc, #64]	; (403c50 <spi_flash_enable+0xc8>)
  403c10:	4d0e      	ldr	r5, [pc, #56]	; (403c4c <spi_flash_enable+0xc4>)
  403c12:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  403c14:	21b9      	movs	r1, #185	; 0xb9
  403c16:	480f      	ldr	r0, [pc, #60]	; (403c54 <spi_flash_enable+0xcc>)
  403c18:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  403c1a:	2101      	movs	r1, #1
  403c1c:	480e      	ldr	r0, [pc, #56]	; (403c58 <spi_flash_enable+0xd0>)
  403c1e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  403c20:	2100      	movs	r1, #0
  403c22:	480e      	ldr	r0, [pc, #56]	; (403c5c <spi_flash_enable+0xd4>)
  403c24:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  403c26:	2181      	movs	r1, #129	; 0x81
  403c28:	480d      	ldr	r0, [pc, #52]	; (403c60 <spi_flash_enable+0xd8>)
  403c2a:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403c2c:	4e0d      	ldr	r6, [pc, #52]	; (403c64 <spi_flash_enable+0xdc>)
  403c2e:	4d0e      	ldr	r5, [pc, #56]	; (403c68 <spi_flash_enable+0xe0>)
  403c30:	4630      	mov	r0, r6
  403c32:	47a8      	blx	r5
  403c34:	2801      	cmp	r0, #1
  403c36:	d1fb      	bne.n	403c30 <spi_flash_enable+0xa8>
  403c38:	e7dd      	b.n	403bf6 <spi_flash_enable+0x6e>
  403c3a:	bf00      	nop
  403c3c:	0040259d 	.word	0x0040259d
  403c40:	00402899 	.word	0x00402899
  403c44:	f8888fff 	.word	0xf8888fff
  403c48:	01111000 	.word	0x01111000
  403c4c:	004028a5 	.word	0x004028a5
  403c50:	00010208 	.word	0x00010208
  403c54:	0001020c 	.word	0x0001020c
  403c58:	00010214 	.word	0x00010214
  403c5c:	0001021c 	.word	0x0001021c
  403c60:	00010204 	.word	0x00010204
  403c64:	00010218 	.word	0x00010218
  403c68:	0040288d 	.word	0x0040288d

00403c6c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403c6c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403c6e:	4810      	ldr	r0, [pc, #64]	; (403cb0 <sysclk_init+0x44>)
  403c70:	4b10      	ldr	r3, [pc, #64]	; (403cb4 <sysclk_init+0x48>)
  403c72:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403c74:	213e      	movs	r1, #62	; 0x3e
  403c76:	2000      	movs	r0, #0
  403c78:	4b0f      	ldr	r3, [pc, #60]	; (403cb8 <sysclk_init+0x4c>)
  403c7a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403c7c:	4c0f      	ldr	r4, [pc, #60]	; (403cbc <sysclk_init+0x50>)
  403c7e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  403c80:	2800      	cmp	r0, #0
  403c82:	d0fc      	beq.n	403c7e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  403c84:	4b0e      	ldr	r3, [pc, #56]	; (403cc0 <sysclk_init+0x54>)
  403c86:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403c88:	4a0e      	ldr	r2, [pc, #56]	; (403cc4 <sysclk_init+0x58>)
  403c8a:	4b0f      	ldr	r3, [pc, #60]	; (403cc8 <sysclk_init+0x5c>)
  403c8c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  403c8e:	4c0f      	ldr	r4, [pc, #60]	; (403ccc <sysclk_init+0x60>)
  403c90:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403c92:	2800      	cmp	r0, #0
  403c94:	d0fc      	beq.n	403c90 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  403c96:	2002      	movs	r0, #2
  403c98:	4b0d      	ldr	r3, [pc, #52]	; (403cd0 <sysclk_init+0x64>)
  403c9a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403c9c:	2000      	movs	r0, #0
  403c9e:	4b0d      	ldr	r3, [pc, #52]	; (403cd4 <sysclk_init+0x68>)
  403ca0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403ca2:	4b0d      	ldr	r3, [pc, #52]	; (403cd8 <sysclk_init+0x6c>)
  403ca4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403ca6:	4802      	ldr	r0, [pc, #8]	; (403cb0 <sysclk_init+0x44>)
  403ca8:	4b02      	ldr	r3, [pc, #8]	; (403cb4 <sysclk_init+0x48>)
  403caa:	4798      	blx	r3
  403cac:	bd10      	pop	{r4, pc}
  403cae:	bf00      	nop
  403cb0:	11e1a300 	.word	0x11e1a300
  403cb4:	00404b1d 	.word	0x00404b1d
  403cb8:	004045e5 	.word	0x004045e5
  403cbc:	00404639 	.word	0x00404639
  403cc0:	00404649 	.word	0x00404649
  403cc4:	20183f01 	.word	0x20183f01
  403cc8:	400e0600 	.word	0x400e0600
  403ccc:	00404659 	.word	0x00404659
  403cd0:	00404549 	.word	0x00404549
  403cd4:	00404581 	.word	0x00404581
  403cd8:	00404a11 	.word	0x00404a11

00403cdc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  403cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  403ce0:	b980      	cbnz	r0, 403d04 <_read+0x28>
  403ce2:	460c      	mov	r4, r1
  403ce4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  403ce6:	2a00      	cmp	r2, #0
  403ce8:	dd0f      	ble.n	403d0a <_read+0x2e>
  403cea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  403cec:	4e08      	ldr	r6, [pc, #32]	; (403d10 <_read+0x34>)
  403cee:	4d09      	ldr	r5, [pc, #36]	; (403d14 <_read+0x38>)
  403cf0:	6830      	ldr	r0, [r6, #0]
  403cf2:	4621      	mov	r1, r4
  403cf4:	682b      	ldr	r3, [r5, #0]
  403cf6:	4798      	blx	r3
		ptr++;
  403cf8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  403cfa:	42bc      	cmp	r4, r7
  403cfc:	d1f8      	bne.n	403cf0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  403cfe:	4640      	mov	r0, r8
  403d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  403d04:	f04f 38ff 	mov.w	r8, #4294967295
  403d08:	e7f9      	b.n	403cfe <_read+0x22>
	for (; len > 0; --len) {
  403d0a:	4680      	mov	r8, r0
  403d0c:	e7f7      	b.n	403cfe <_read+0x22>
  403d0e:	bf00      	nop
  403d10:	20401754 	.word	0x20401754
  403d14:	2040174c 	.word	0x2040174c

00403d18 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  403d18:	3801      	subs	r0, #1
  403d1a:	2802      	cmp	r0, #2
  403d1c:	d815      	bhi.n	403d4a <_write+0x32>
{
  403d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d22:	460e      	mov	r6, r1
  403d24:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  403d26:	b19a      	cbz	r2, 403d50 <_write+0x38>
  403d28:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  403d2a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403d64 <_write+0x4c>
  403d2e:	4f0c      	ldr	r7, [pc, #48]	; (403d60 <_write+0x48>)
  403d30:	f8d8 0000 	ldr.w	r0, [r8]
  403d34:	f815 1b01 	ldrb.w	r1, [r5], #1
  403d38:	683b      	ldr	r3, [r7, #0]
  403d3a:	4798      	blx	r3
  403d3c:	2800      	cmp	r0, #0
  403d3e:	db0a      	blt.n	403d56 <_write+0x3e>
  403d40:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  403d42:	3c01      	subs	r4, #1
  403d44:	d1f4      	bne.n	403d30 <_write+0x18>
  403d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  403d4a:	f04f 30ff 	mov.w	r0, #4294967295
  403d4e:	4770      	bx	lr
	for (; len != 0; --len) {
  403d50:	4610      	mov	r0, r2
  403d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  403d56:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  403d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d5e:	bf00      	nop
  403d60:	20401750 	.word	0x20401750
  403d64:	20401754 	.word	0x20401754

00403d68 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  403d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  403d6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403d6e:	4bb8      	ldr	r3, [pc, #736]	; (404050 <board_init+0x2e8>)
  403d70:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb");
  403d72:	f3bf 8f5f 	dmb	sy
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  403d76:	4fb7      	ldr	r7, [pc, #732]	; (404054 <board_init+0x2ec>)
  403d78:	4638      	mov	r0, r7
  403d7a:	4db7      	ldr	r5, [pc, #732]	; (404058 <board_init+0x2f0>)
  403d7c:	47a8      	blx	r5
	dw_region_attr =
  403d7e:	4eb7      	ldr	r6, [pc, #732]	; (40405c <board_init+0x2f4>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d80:	ea40 0106 	orr.w	r1, r0, r6
  403d84:	2011      	movs	r0, #17
  403d86:	4cb6      	ldr	r4, [pc, #728]	; (404060 <board_init+0x2f8>)
  403d88:	47a0      	blx	r4
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  403d8a:	48b6      	ldr	r0, [pc, #728]	; (404064 <board_init+0x2fc>)
  403d8c:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d8e:	49b6      	ldr	r1, [pc, #728]	; (404068 <board_init+0x300>)
  403d90:	4301      	orrs	r1, r0
  403d92:	48b6      	ldr	r0, [pc, #728]	; (40406c <board_init+0x304>)
  403d94:	47a0      	blx	r4
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  403d96:	4638      	mov	r0, r7
  403d98:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d9a:	ea40 0106 	orr.w	r1, r0, r6
  403d9e:	48b4      	ldr	r0, [pc, #720]	; (404070 <board_init+0x308>)
  403da0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  403da2:	48b4      	ldr	r0, [pc, #720]	; (404074 <board_init+0x30c>)
  403da4:	47a8      	blx	r5
	dw_region_attr =
  403da6:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  403daa:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403dae:	ea40 0106 	orr.w	r1, r0, r6
  403db2:	48b1      	ldr	r0, [pc, #708]	; (404078 <board_init+0x310>)
  403db4:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  403db6:	48b1      	ldr	r0, [pc, #708]	; (40407c <board_init+0x314>)
  403db8:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403dba:	ea40 0106 	orr.w	r1, r0, r6
  403dbe:	48b0      	ldr	r0, [pc, #704]	; (404080 <board_init+0x318>)
  403dc0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  403dc2:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  403dc6:	47a8      	blx	r5
	dw_region_attr = MPU_AP_FULL_ACCESS |
  403dc8:	4eae      	ldr	r6, [pc, #696]	; (404084 <board_init+0x31c>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403dca:	ea40 0106 	orr.w	r1, r0, r6
  403dce:	48ae      	ldr	r0, [pc, #696]	; (404088 <board_init+0x320>)
  403dd0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  403dd2:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  403dd6:	47a8      	blx	r5
	dw_region_attr =
  403dd8:	4fac      	ldr	r7, [pc, #688]	; (40408c <board_init+0x324>)
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403dda:	ea40 0107 	orr.w	r1, r0, r7
  403dde:	48ac      	ldr	r0, [pc, #688]	; (404090 <board_init+0x328>)
  403de0:	47a0      	blx	r4
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  403de2:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  403de6:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403de8:	49aa      	ldr	r1, [pc, #680]	; (404094 <board_init+0x32c>)
  403dea:	4301      	orrs	r1, r0
  403dec:	48aa      	ldr	r0, [pc, #680]	; (404098 <board_init+0x330>)
  403dee:	47a0      	blx	r4
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  403df0:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  403df4:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403df6:	ea40 0107 	orr.w	r1, r0, r7
  403dfa:	48a8      	ldr	r0, [pc, #672]	; (40409c <board_init+0x334>)
  403dfc:	47a0      	blx	r4
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  403dfe:	48a8      	ldr	r0, [pc, #672]	; (4040a0 <board_init+0x338>)
  403e00:	47a8      	blx	r5
	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403e02:	ea40 0106 	orr.w	r1, r0, r6
  403e06:	48a7      	ldr	r0, [pc, #668]	; (4040a4 <board_init+0x33c>)
  403e08:	47a0      	blx	r4
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  403e0a:	4ca7      	ldr	r4, [pc, #668]	; (4040a8 <board_init+0x340>)
  403e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403e0e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  403e12:	6263      	str	r3, [r4, #36]	; 0x24
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  403e14:	2005      	movs	r0, #5
  403e16:	4ba5      	ldr	r3, [pc, #660]	; (4040ac <board_init+0x344>)
  403e18:	4798      	blx	r3
  __ASM volatile ("dsb");
  403e1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403e1e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb");
  403e22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403e26:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  403e2a:	2300      	movs	r3, #0
  403e2c:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403e30:	6963      	ldr	r3, [r4, #20]
  403e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  403e36:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  403e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403e3c:	f3bf 8f6f 	isb	sy
    ccsidr  = SCB->CCSIDR;
  403e40:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403e44:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403e48:	f007 0007 	and.w	r0, r7, #7
  403e4c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403e4e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403e52:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  403e56:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  403e5a:	f3bf 8f4f 	dsb	sy
  403e5e:	f04f 34ff 	mov.w	r4, #4294967295
  403e62:	fa04 fc00 	lsl.w	ip, r4, r0
  403e66:	fa06 f000 	lsl.w	r0, r6, r0
  403e6a:	fa04 f40e 	lsl.w	r4, r4, lr
  403e6e:	fa07 fe0e 	lsl.w	lr, r7, lr
              SCB->DCISW = sw;
  403e72:	4d8d      	ldr	r5, [pc, #564]	; (4040a8 <board_init+0x340>)
         int32_t tmpways = ways;
  403e74:	463a      	mov	r2, r7
  403e76:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  403e78:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  403e7c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  403e80:	3a01      	subs	r2, #1
  403e82:	4423      	add	r3, r4
  403e84:	f1b2 3fff 	cmp.w	r2, #4294967295
  403e88:	d1f6      	bne.n	403e78 <board_init+0x110>
        } while(sets--);
  403e8a:	3e01      	subs	r6, #1
  403e8c:	4460      	add	r0, ip
  403e8e:	f1b6 3fff 	cmp.w	r6, #4294967295
  403e92:	d1ef      	bne.n	403e74 <board_init+0x10c>
  403e94:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  403e98:	4b83      	ldr	r3, [pc, #524]	; (4040a8 <board_init+0x340>)
  403e9a:	695a      	ldr	r2, [r3, #20]
  403e9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  403ea0:	615a      	str	r2, [r3, #20]
  403ea2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403ea6:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403eaa:	4a81      	ldr	r2, [pc, #516]	; (4040b0 <board_init+0x348>)
  403eac:	4981      	ldr	r1, [pc, #516]	; (4040b4 <board_init+0x34c>)
  403eae:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403eb0:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  403eb4:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  403eb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403eba:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  403ebe:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  403ec2:	f022 0201 	bic.w	r2, r2, #1
  403ec6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  403eca:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  403ece:	f022 0201 	bic.w	r2, r2, #1
  403ed2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  403ed6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403eda:	f3bf 8f6f 	isb	sy
  403ede:	200a      	movs	r0, #10
  403ee0:	4c75      	ldr	r4, [pc, #468]	; (4040b8 <board_init+0x350>)
  403ee2:	47a0      	blx	r4
  403ee4:	200b      	movs	r0, #11
  403ee6:	47a0      	blx	r4
  403ee8:	200c      	movs	r0, #12
  403eea:	47a0      	blx	r4
  403eec:	2010      	movs	r0, #16
  403eee:	47a0      	blx	r4
  403ef0:	2011      	movs	r0, #17
  403ef2:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403ef4:	4a71      	ldr	r2, [pc, #452]	; (4040bc <board_init+0x354>)
  403ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
  403efa:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403efc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403f00:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403f02:	4b6f      	ldr	r3, [pc, #444]	; (4040c0 <board_init+0x358>)
  403f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403f08:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403f0a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  403f0e:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  403f10:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  403f14:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  403f16:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  403f18:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  403f1c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f1e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  403f22:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  403f24:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f26:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  403f2a:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  403f2c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  403f30:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  403f34:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  403f38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  403f3c:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  403f3e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  403f42:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  403f44:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403f46:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  403f4a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f4c:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  403f50:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  403f52:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f54:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  403f58:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f5a:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  403f5c:	4859      	ldr	r0, [pc, #356]	; (4040c4 <board_init+0x35c>)
  403f5e:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  403f62:	f041 0110 	orr.w	r1, r1, #16
  403f66:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
		base->PIO_PUDR = mask;
  403f6a:	4957      	ldr	r1, [pc, #348]	; (4040c8 <board_init+0x360>)
  403f6c:	2010      	movs	r0, #16
  403f6e:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  403f70:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  403f74:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  403f76:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403f78:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  403f7c:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  403f7e:	4304      	orrs	r4, r0
  403f80:	670c      	str	r4, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  403f82:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  403f84:	4304      	orrs	r4, r0
  403f86:	674c      	str	r4, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f88:	6048      	str	r0, [r1, #4]
		base->PIO_PUDR = mask;
  403f8a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403f8e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  403f90:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  403f94:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  403f96:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403f98:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  403f9c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f9e:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  403fa2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  403fa4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403fa6:	4308      	orrs	r0, r1
  403fa8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403faa:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  403fac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  403fb0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  403fb2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  403fb6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  403fb8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403fba:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  403fbe:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403fc0:	4308      	orrs	r0, r1
  403fc2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  403fc4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403fc6:	4308      	orrs	r0, r1
  403fc8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403fca:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  403fcc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403fd0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  403fd2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  403fd6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  403fd8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403fda:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  403fde:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403fe0:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  403fe4:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  403fe6:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403fe8:	4308      	orrs	r0, r1
  403fea:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403fec:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  403fee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403ff2:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  403ff4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  403ff8:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  403ffa:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  403ffc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404000:	6f18      	ldr	r0, [r3, #112]	; 0x70
  404002:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  404006:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  404008:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40400a:	4308      	orrs	r0, r1
  40400c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40400e:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  404010:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  404014:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404016:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40401a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40401c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40401e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404022:	6f18      	ldr	r0, [r3, #112]	; 0x70
  404024:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  404028:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40402a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40402c:	4308      	orrs	r0, r1
  40402e:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404030:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  404032:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404036:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404038:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40403c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40403e:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404040:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404044:	6f18      	ldr	r0, [r3, #112]	; 0x70
  404046:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  40404a:	6718      	str	r0, [r3, #112]	; 0x70
  40404c:	e03e      	b.n	4040cc <board_init+0x364>
  40404e:	bf00      	nop
  404050:	400e1850 	.word	0x400e1850
  404054:	003fffff 	.word	0x003fffff
  404058:	00404119 	.word	0x00404119
  40405c:	01000001 	.word	0x01000001
  404060:	0040410d 	.word	0x0040410d
  404064:	001fffff 	.word	0x001fffff
  404068:	06230001 	.word	0x06230001
  40406c:	00400012 	.word	0x00400012
  404070:	20000013 	.word	0x20000013
  404074:	0003ffff 	.word	0x0003ffff
  404078:	20400014 	.word	0x20400014
  40407c:	0001ffff 	.word	0x0001ffff
  404080:	20440015 	.word	0x20440015
  404084:	13010001 	.word	0x13010001
  404088:	40000016 	.word	0x40000016
  40408c:	03000001 	.word	0x03000001
  404090:	60000017 	.word	0x60000017
  404094:	03250001 	.word	0x03250001
  404098:	70000018 	.word	0x70000018
  40409c:	80000019 	.word	0x80000019
  4040a0:	000fffff 	.word	0x000fffff
  4040a4:	a010001a 	.word	0xa010001a
  4040a8:	e000ed00 	.word	0xe000ed00
  4040ac:	00404101 	.word	0x00404101
  4040b0:	400e0c00 	.word	0x400e0c00
  4040b4:	5a00080c 	.word	0x5a00080c
  4040b8:	00404669 	.word	0x00404669
  4040bc:	400e1200 	.word	0x400e1200
  4040c0:	400e0e00 	.word	0x400e0e00
  4040c4:	40088000 	.word	0x40088000
  4040c8:	400e1000 	.word	0x400e1000
		base->PIO_ABCDSR[1] |= mask;
  4040cc:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4040ce:	4308      	orrs	r0, r1
  4040d0:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4040d2:	6059      	str	r1, [r3, #4]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4040d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  4040d8:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4040da:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4040de:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4040e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4040e4:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4040e6:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4040e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4040ec:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4040ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4040f2:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4040f4:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4040f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4040fa:	6753      	str	r3, [r2, #116]	; 0x74
  4040fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040fe:	bf00      	nop

00404100 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  404100:	4b01      	ldr	r3, [pc, #4]	; (404108 <mpu_enable+0x8>)
  404102:	6058      	str	r0, [r3, #4]
  404104:	4770      	bx	lr
  404106:	bf00      	nop
  404108:	e000ed90 	.word	0xe000ed90

0040410c <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  40410c:	4b01      	ldr	r3, [pc, #4]	; (404114 <mpu_set_region+0x8>)
  40410e:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  404110:	6119      	str	r1, [r3, #16]
  404112:	4770      	bx	lr
  404114:	e000ed90 	.word	0xe000ed90

00404118 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  404118:	2820      	cmp	r0, #32
  40411a:	d909      	bls.n	404130 <mpu_cal_mpu_region_size+0x18>
  40411c:	2304      	movs	r3, #4
  40411e:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  404120:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  404122:	0052      	lsls	r2, r2, #1
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  404124:	4290      	cmp	r0, r2
  404126:	d901      	bls.n	40412c <mpu_cal_mpu_region_size+0x14>
  404128:	2b1e      	cmp	r3, #30
  40412a:	d9f9      	bls.n	404120 <mpu_cal_mpu_region_size+0x8>
	}

	return ( dwReturnValue << 1 );
}
  40412c:	0058      	lsls	r0, r3, #1
  40412e:	4770      	bx	lr
	uint32_t dwReturnValue = 4;
  404130:	2304      	movs	r3, #4
  404132:	e7fb      	b.n	40412c <mpu_cal_mpu_region_size+0x14>

00404134 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404134:	b90a      	cbnz	r2, 40413a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404136:	6601      	str	r1, [r0, #96]	; 0x60
  404138:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40413a:	6641      	str	r1, [r0, #100]	; 0x64
  40413c:	4770      	bx	lr

0040413e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40413e:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404140:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  404144:	d03a      	beq.n	4041bc <pio_set_peripheral+0x7e>
  404146:	d813      	bhi.n	404170 <pio_set_peripheral+0x32>
  404148:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40414c:	d025      	beq.n	40419a <pio_set_peripheral+0x5c>
  40414e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404152:	d10a      	bne.n	40416a <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404154:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404156:	4313      	orrs	r3, r2
  404158:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40415a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40415c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40415e:	400b      	ands	r3, r1
  404160:	ea23 0302 	bic.w	r3, r3, r2
  404164:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404166:	6042      	str	r2, [r0, #4]
  404168:	4770      	bx	lr
	switch (ul_type) {
  40416a:	2900      	cmp	r1, #0
  40416c:	d1fb      	bne.n	404166 <pio_set_peripheral+0x28>
  40416e:	4770      	bx	lr
  404170:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  404174:	d021      	beq.n	4041ba <pio_set_peripheral+0x7c>
  404176:	d809      	bhi.n	40418c <pio_set_peripheral+0x4e>
  404178:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40417c:	d1f3      	bne.n	404166 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40417e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404180:	4313      	orrs	r3, r2
  404182:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404184:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404186:	4313      	orrs	r3, r2
  404188:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40418a:	e7ec      	b.n	404166 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40418c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404190:	d013      	beq.n	4041ba <pio_set_peripheral+0x7c>
  404192:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404196:	d010      	beq.n	4041ba <pio_set_peripheral+0x7c>
  404198:	e7e5      	b.n	404166 <pio_set_peripheral+0x28>
{
  40419a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40419c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40419e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4041a0:	43d3      	mvns	r3, r2
  4041a2:	4021      	ands	r1, r4
  4041a4:	461c      	mov	r4, r3
  4041a6:	4019      	ands	r1, r3
  4041a8:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4041aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4041ac:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4041ae:	400b      	ands	r3, r1
  4041b0:	4023      	ands	r3, r4
  4041b2:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4041b4:	6042      	str	r2, [r0, #4]
}
  4041b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4041ba:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4041bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4041be:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4041c0:	400b      	ands	r3, r1
  4041c2:	ea23 0302 	bic.w	r3, r3, r2
  4041c6:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4041c8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4041ca:	4313      	orrs	r3, r2
  4041cc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4041ce:	e7ca      	b.n	404166 <pio_set_peripheral+0x28>

004041d0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4041d0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4041d2:	f012 0f01 	tst.w	r2, #1
  4041d6:	d10d      	bne.n	4041f4 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4041d8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4041da:	f012 0f0a 	tst.w	r2, #10
  4041de:	d00b      	beq.n	4041f8 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4041e0:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4041e2:	f012 0f02 	tst.w	r2, #2
  4041e6:	d109      	bne.n	4041fc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4041e8:	f012 0f08 	tst.w	r2, #8
  4041ec:	d008      	beq.n	404200 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4041ee:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4041f2:	e005      	b.n	404200 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4041f4:	6641      	str	r1, [r0, #100]	; 0x64
  4041f6:	e7f0      	b.n	4041da <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4041f8:	6241      	str	r1, [r0, #36]	; 0x24
  4041fa:	e7f2      	b.n	4041e2 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4041fc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  404200:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404202:	6001      	str	r1, [r0, #0]
  404204:	4770      	bx	lr

00404206 <pio_set_output>:
{
  404206:	b410      	push	{r4}
  404208:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40420a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40420c:	b94c      	cbnz	r4, 404222 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40420e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  404210:	b14b      	cbz	r3, 404226 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  404212:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  404214:	b94a      	cbnz	r2, 40422a <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  404216:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  404218:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40421a:	6001      	str	r1, [r0, #0]
}
  40421c:	f85d 4b04 	ldr.w	r4, [sp], #4
  404220:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404222:	6641      	str	r1, [r0, #100]	; 0x64
  404224:	e7f4      	b.n	404210 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  404226:	6541      	str	r1, [r0, #84]	; 0x54
  404228:	e7f4      	b.n	404214 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40422a:	6301      	str	r1, [r0, #48]	; 0x30
  40422c:	e7f4      	b.n	404218 <pio_set_output+0x12>

0040422e <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  40422e:	f012 0f10 	tst.w	r2, #16
  404232:	d012      	beq.n	40425a <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  404234:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404238:	f012 0f20 	tst.w	r2, #32
  40423c:	d007      	beq.n	40424e <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  40423e:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  404242:	f012 0f40 	tst.w	r2, #64	; 0x40
  404246:	d005      	beq.n	404254 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  404248:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40424c:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  40424e:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  404252:	e7f6      	b.n	404242 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  404254:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  404258:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  40425a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40425e:	4770      	bx	lr

00404260 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  404260:	6401      	str	r1, [r0, #64]	; 0x40
  404262:	4770      	bx	lr

00404264 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  404264:	6441      	str	r1, [r0, #68]	; 0x44
  404266:	4770      	bx	lr

00404268 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  404268:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40426a:	4770      	bx	lr

0040426c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40426c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40426e:	4770      	bx	lr

00404270 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404270:	b570      	push	{r4, r5, r6, lr}
  404272:	b082      	sub	sp, #8
  404274:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404276:	4c46      	ldr	r4, [pc, #280]	; (404390 <pio_configure_pin+0x120>)
  404278:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  40427c:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40427e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  404282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404286:	d059      	beq.n	40433c <pio_configure_pin+0xcc>
  404288:	d80a      	bhi.n	4042a0 <pio_configure_pin+0x30>
  40428a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40428e:	d02f      	beq.n	4042f0 <pio_configure_pin+0x80>
  404290:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404294:	d03f      	beq.n	404316 <pio_configure_pin+0xa6>
  404296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40429a:	d016      	beq.n	4042ca <pio_configure_pin+0x5a>
		return 0;
  40429c:	2000      	movs	r0, #0
  40429e:	e012      	b.n	4042c6 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4042a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4042a4:	d05d      	beq.n	404362 <pio_configure_pin+0xf2>
  4042a6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4042aa:	d05a      	beq.n	404362 <pio_configure_pin+0xf2>
  4042ac:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4042b0:	d1f4      	bne.n	40429c <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4042b2:	f000 011f 	and.w	r1, r0, #31
  4042b6:	2601      	movs	r6, #1
  4042b8:	462a      	mov	r2, r5
  4042ba:	fa06 f101 	lsl.w	r1, r6, r1
  4042be:	4620      	mov	r0, r4
  4042c0:	4b34      	ldr	r3, [pc, #208]	; (404394 <pio_configure_pin+0x124>)
  4042c2:	4798      	blx	r3
	return 1;
  4042c4:	4630      	mov	r0, r6
}
  4042c6:	b002      	add	sp, #8
  4042c8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4042ca:	f000 001f 	and.w	r0, r0, #31
  4042ce:	2601      	movs	r6, #1
  4042d0:	4086      	lsls	r6, r0
  4042d2:	4632      	mov	r2, r6
  4042d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4042d8:	4620      	mov	r0, r4
  4042da:	4b2f      	ldr	r3, [pc, #188]	; (404398 <pio_configure_pin+0x128>)
  4042dc:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4042de:	f015 0f01 	tst.w	r5, #1
  4042e2:	d102      	bne.n	4042ea <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4042e4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4042e6:	2001      	movs	r0, #1
  4042e8:	e7ed      	b.n	4042c6 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4042ea:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4042ec:	2001      	movs	r0, #1
  4042ee:	e7ea      	b.n	4042c6 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4042f0:	f000 001f 	and.w	r0, r0, #31
  4042f4:	2601      	movs	r6, #1
  4042f6:	4086      	lsls	r6, r0
  4042f8:	4632      	mov	r2, r6
  4042fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4042fe:	4620      	mov	r0, r4
  404300:	4b25      	ldr	r3, [pc, #148]	; (404398 <pio_configure_pin+0x128>)
  404302:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404304:	f015 0f01 	tst.w	r5, #1
  404308:	d102      	bne.n	404310 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  40430a:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40430c:	2001      	movs	r0, #1
  40430e:	e7da      	b.n	4042c6 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404310:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404312:	2001      	movs	r0, #1
  404314:	e7d7      	b.n	4042c6 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  404316:	f000 001f 	and.w	r0, r0, #31
  40431a:	2601      	movs	r6, #1
  40431c:	4086      	lsls	r6, r0
  40431e:	4632      	mov	r2, r6
  404320:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404324:	4620      	mov	r0, r4
  404326:	4b1c      	ldr	r3, [pc, #112]	; (404398 <pio_configure_pin+0x128>)
  404328:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40432a:	f015 0f01 	tst.w	r5, #1
  40432e:	d102      	bne.n	404336 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  404330:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404332:	2001      	movs	r0, #1
  404334:	e7c7      	b.n	4042c6 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404336:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404338:	2001      	movs	r0, #1
  40433a:	e7c4      	b.n	4042c6 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40433c:	f000 001f 	and.w	r0, r0, #31
  404340:	2601      	movs	r6, #1
  404342:	4086      	lsls	r6, r0
  404344:	4632      	mov	r2, r6
  404346:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40434a:	4620      	mov	r0, r4
  40434c:	4b12      	ldr	r3, [pc, #72]	; (404398 <pio_configure_pin+0x128>)
  40434e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404350:	f015 0f01 	tst.w	r5, #1
  404354:	d102      	bne.n	40435c <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  404356:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404358:	2001      	movs	r0, #1
  40435a:	e7b4      	b.n	4042c6 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40435c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40435e:	2001      	movs	r0, #1
  404360:	e7b1      	b.n	4042c6 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404362:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404366:	f000 011f 	and.w	r1, r0, #31
  40436a:	2601      	movs	r6, #1
  40436c:	ea05 0306 	and.w	r3, r5, r6
  404370:	9300      	str	r3, [sp, #0]
  404372:	f3c5 0380 	ubfx	r3, r5, #2, #1
  404376:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40437a:	bf14      	ite	ne
  40437c:	2200      	movne	r2, #0
  40437e:	2201      	moveq	r2, #1
  404380:	fa06 f101 	lsl.w	r1, r6, r1
  404384:	4620      	mov	r0, r4
  404386:	4c05      	ldr	r4, [pc, #20]	; (40439c <pio_configure_pin+0x12c>)
  404388:	47a0      	blx	r4
	return 1;
  40438a:	4630      	mov	r0, r6
		break;
  40438c:	e79b      	b.n	4042c6 <pio_configure_pin+0x56>
  40438e:	bf00      	nop
  404390:	00200707 	.word	0x00200707
  404394:	004041d1 	.word	0x004041d1
  404398:	0040413f 	.word	0x0040413f
  40439c:	00404207 	.word	0x00404207

004043a0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4043a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4043a4:	4604      	mov	r4, r0
  4043a6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4043a8:	4b0e      	ldr	r3, [pc, #56]	; (4043e4 <pio_handler_process+0x44>)
  4043aa:	4798      	blx	r3
  4043ac:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4043ae:	4620      	mov	r0, r4
  4043b0:	4b0d      	ldr	r3, [pc, #52]	; (4043e8 <pio_handler_process+0x48>)
  4043b2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4043b4:	4005      	ands	r5, r0
  4043b6:	d013      	beq.n	4043e0 <pio_handler_process+0x40>
  4043b8:	4c0c      	ldr	r4, [pc, #48]	; (4043ec <pio_handler_process+0x4c>)
  4043ba:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4043be:	e003      	b.n	4043c8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4043c0:	42b4      	cmp	r4, r6
  4043c2:	d00d      	beq.n	4043e0 <pio_handler_process+0x40>
  4043c4:	3410      	adds	r4, #16
		while (status != 0) {
  4043c6:	b15d      	cbz	r5, 4043e0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4043c8:	6820      	ldr	r0, [r4, #0]
  4043ca:	4540      	cmp	r0, r8
  4043cc:	d1f8      	bne.n	4043c0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4043ce:	6861      	ldr	r1, [r4, #4]
  4043d0:	4229      	tst	r1, r5
  4043d2:	d0f5      	beq.n	4043c0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4043d4:	68e3      	ldr	r3, [r4, #12]
  4043d6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4043d8:	6863      	ldr	r3, [r4, #4]
  4043da:	ea25 0503 	bic.w	r5, r5, r3
  4043de:	e7ef      	b.n	4043c0 <pio_handler_process+0x20>
  4043e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4043e4:	00404269 	.word	0x00404269
  4043e8:	0040426d 	.word	0x0040426d
  4043ec:	20400a6c 	.word	0x20400a6c

004043f0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4043f2:	4c18      	ldr	r4, [pc, #96]	; (404454 <pio_handler_set+0x64>)
  4043f4:	6826      	ldr	r6, [r4, #0]
  4043f6:	2e06      	cmp	r6, #6
  4043f8:	d82a      	bhi.n	404450 <pio_handler_set+0x60>
  4043fa:	f04f 0c00 	mov.w	ip, #0
  4043fe:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404400:	4f15      	ldr	r7, [pc, #84]	; (404458 <pio_handler_set+0x68>)
  404402:	e004      	b.n	40440e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404404:	3401      	adds	r4, #1
  404406:	b2e4      	uxtb	r4, r4
  404408:	46a4      	mov	ip, r4
  40440a:	42a6      	cmp	r6, r4
  40440c:	d309      	bcc.n	404422 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40440e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404410:	0125      	lsls	r5, r4, #4
  404412:	597d      	ldr	r5, [r7, r5]
  404414:	428d      	cmp	r5, r1
  404416:	d1f5      	bne.n	404404 <pio_handler_set+0x14>
  404418:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40441c:	686d      	ldr	r5, [r5, #4]
  40441e:	4295      	cmp	r5, r2
  404420:	d1f0      	bne.n	404404 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  404422:	4d0d      	ldr	r5, [pc, #52]	; (404458 <pio_handler_set+0x68>)
  404424:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  404428:	eb05 040e 	add.w	r4, r5, lr
  40442c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  404430:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  404432:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  404434:	9906      	ldr	r1, [sp, #24]
  404436:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  404438:	3601      	adds	r6, #1
  40443a:	4566      	cmp	r6, ip
  40443c:	d005      	beq.n	40444a <pio_handler_set+0x5a>
  40443e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404440:	461a      	mov	r2, r3
  404442:	4b06      	ldr	r3, [pc, #24]	; (40445c <pio_handler_set+0x6c>)
  404444:	4798      	blx	r3

	return 0;
  404446:	2000      	movs	r0, #0
  404448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40444a:	4902      	ldr	r1, [pc, #8]	; (404454 <pio_handler_set+0x64>)
  40444c:	600e      	str	r6, [r1, #0]
  40444e:	e7f6      	b.n	40443e <pio_handler_set+0x4e>
		return 1;
  404450:	2001      	movs	r0, #1
}
  404452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404454:	20400adc 	.word	0x20400adc
  404458:	20400a6c 	.word	0x20400a6c
  40445c:	0040422f 	.word	0x0040422f

00404460 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404460:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  404462:	210a      	movs	r1, #10
  404464:	4801      	ldr	r0, [pc, #4]	; (40446c <PIOA_Handler+0xc>)
  404466:	4b02      	ldr	r3, [pc, #8]	; (404470 <PIOA_Handler+0x10>)
  404468:	4798      	blx	r3
  40446a:	bd08      	pop	{r3, pc}
  40446c:	400e0e00 	.word	0x400e0e00
  404470:	004043a1 	.word	0x004043a1

00404474 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404474:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  404476:	210b      	movs	r1, #11
  404478:	4801      	ldr	r0, [pc, #4]	; (404480 <PIOB_Handler+0xc>)
  40447a:	4b02      	ldr	r3, [pc, #8]	; (404484 <PIOB_Handler+0x10>)
  40447c:	4798      	blx	r3
  40447e:	bd08      	pop	{r3, pc}
  404480:	400e1000 	.word	0x400e1000
  404484:	004043a1 	.word	0x004043a1

00404488 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404488:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40448a:	210c      	movs	r1, #12
  40448c:	4801      	ldr	r0, [pc, #4]	; (404494 <PIOC_Handler+0xc>)
  40448e:	4b02      	ldr	r3, [pc, #8]	; (404498 <PIOC_Handler+0x10>)
  404490:	4798      	blx	r3
  404492:	bd08      	pop	{r3, pc}
  404494:	400e1200 	.word	0x400e1200
  404498:	004043a1 	.word	0x004043a1

0040449c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40449c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40449e:	2110      	movs	r1, #16
  4044a0:	4801      	ldr	r0, [pc, #4]	; (4044a8 <PIOD_Handler+0xc>)
  4044a2:	4b02      	ldr	r3, [pc, #8]	; (4044ac <PIOD_Handler+0x10>)
  4044a4:	4798      	blx	r3
  4044a6:	bd08      	pop	{r3, pc}
  4044a8:	400e1400 	.word	0x400e1400
  4044ac:	004043a1 	.word	0x004043a1

004044b0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4044b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4044b2:	2111      	movs	r1, #17
  4044b4:	4801      	ldr	r0, [pc, #4]	; (4044bc <PIOE_Handler+0xc>)
  4044b6:	4b02      	ldr	r3, [pc, #8]	; (4044c0 <PIOE_Handler+0x10>)
  4044b8:	4798      	blx	r3
  4044ba:	bd08      	pop	{r3, pc}
  4044bc:	400e1600 	.word	0x400e1600
  4044c0:	004043a1 	.word	0x004043a1

004044c4 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4044c6:	4606      	mov	r6, r0
  4044c8:	460d      	mov	r5, r1
  4044ca:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4044cc:	4b17      	ldr	r3, [pc, #92]	; (40452c <pio_handler_set_priority+0x68>)
  4044ce:	4798      	blx	r3
  4044d0:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4044d2:	f04f 31ff 	mov.w	r1, #4294967295
  4044d6:	4630      	mov	r0, r6
  4044d8:	4b15      	ldr	r3, [pc, #84]	; (404530 <pio_handler_set_priority+0x6c>)
  4044da:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4044dc:	4630      	mov	r0, r6
  4044de:	4b15      	ldr	r3, [pc, #84]	; (404534 <pio_handler_set_priority+0x70>)
  4044e0:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4044e2:	fa5f fe85 	uxtb.w	lr, r5
  4044e6:	f00e 031f 	and.w	r3, lr, #31
  4044ea:	2201      	movs	r2, #1
  4044ec:	fa02 f303 	lsl.w	r3, r2, r3
  4044f0:	0968      	lsrs	r0, r5, #5
  4044f2:	4911      	ldr	r1, [pc, #68]	; (404538 <pio_handler_set_priority+0x74>)
  4044f4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4044f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4044fc:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  404500:	2d00      	cmp	r5, #0
  404502:	db0a      	blt.n	40451a <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404504:	0164      	lsls	r4, r4, #5
  404506:	b2e4      	uxtb	r4, r4
  404508:	4a0c      	ldr	r2, [pc, #48]	; (40453c <pio_handler_set_priority+0x78>)
  40450a:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40450c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  404510:	4639      	mov	r1, r7
  404512:	4630      	mov	r0, r6
  404514:	4b0a      	ldr	r3, [pc, #40]	; (404540 <pio_handler_set_priority+0x7c>)
  404516:	4798      	blx	r3
  404518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40451a:	f00e 0e0f 	and.w	lr, lr, #15
  40451e:	0164      	lsls	r4, r4, #5
  404520:	b2e4      	uxtb	r4, r4
  404522:	4a08      	ldr	r2, [pc, #32]	; (404544 <pio_handler_set_priority+0x80>)
  404524:	f802 400e 	strb.w	r4, [r2, lr]
  404528:	e7f0      	b.n	40450c <pio_handler_set_priority+0x48>
  40452a:	bf00      	nop
  40452c:	0040426d 	.word	0x0040426d
  404530:	00404265 	.word	0x00404265
  404534:	00404269 	.word	0x00404269
  404538:	e000e100 	.word	0xe000e100
  40453c:	e000e400 	.word	0xe000e400
  404540:	00404261 	.word	0x00404261
  404544:	e000ed14 	.word	0xe000ed14

00404548 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  404548:	2803      	cmp	r0, #3
  40454a:	d011      	beq.n	404570 <pmc_mck_set_division+0x28>
  40454c:	2804      	cmp	r0, #4
  40454e:	d012      	beq.n	404576 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  404550:	2802      	cmp	r0, #2
  404552:	bf0c      	ite	eq
  404554:	f44f 7180 	moveq.w	r1, #256	; 0x100
  404558:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40455a:	4a08      	ldr	r2, [pc, #32]	; (40457c <pmc_mck_set_division+0x34>)
  40455c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40455e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  404562:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  404564:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  404566:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404568:	f013 0f08 	tst.w	r3, #8
  40456c:	d0fb      	beq.n	404566 <pmc_mck_set_division+0x1e>
}
  40456e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  404570:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  404574:	e7f1      	b.n	40455a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  404576:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40457a:	e7ee      	b.n	40455a <pmc_mck_set_division+0x12>
  40457c:	400e0600 	.word	0x400e0600

00404580 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404580:	4a17      	ldr	r2, [pc, #92]	; (4045e0 <pmc_switch_mck_to_pllack+0x60>)
  404582:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  404588:	4318      	orrs	r0, r3
  40458a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40458c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40458e:	f013 0f08 	tst.w	r3, #8
  404592:	d10a      	bne.n	4045aa <pmc_switch_mck_to_pllack+0x2a>
  404594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404598:	4911      	ldr	r1, [pc, #68]	; (4045e0 <pmc_switch_mck_to_pllack+0x60>)
  40459a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40459c:	f012 0f08 	tst.w	r2, #8
  4045a0:	d103      	bne.n	4045aa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4045a2:	3b01      	subs	r3, #1
  4045a4:	d1f9      	bne.n	40459a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4045a6:	2001      	movs	r0, #1
  4045a8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4045aa:	4a0d      	ldr	r2, [pc, #52]	; (4045e0 <pmc_switch_mck_to_pllack+0x60>)
  4045ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4045ae:	f023 0303 	bic.w	r3, r3, #3
  4045b2:	f043 0302 	orr.w	r3, r3, #2
  4045b6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4045b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4045ba:	f013 0f08 	tst.w	r3, #8
  4045be:	d10a      	bne.n	4045d6 <pmc_switch_mck_to_pllack+0x56>
  4045c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4045c4:	4906      	ldr	r1, [pc, #24]	; (4045e0 <pmc_switch_mck_to_pllack+0x60>)
  4045c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4045c8:	f012 0f08 	tst.w	r2, #8
  4045cc:	d105      	bne.n	4045da <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4045ce:	3b01      	subs	r3, #1
  4045d0:	d1f9      	bne.n	4045c6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4045d2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4045d4:	4770      	bx	lr
	return 0;
  4045d6:	2000      	movs	r0, #0
  4045d8:	4770      	bx	lr
  4045da:	2000      	movs	r0, #0
  4045dc:	4770      	bx	lr
  4045de:	bf00      	nop
  4045e0:	400e0600 	.word	0x400e0600

004045e4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4045e4:	b9a0      	cbnz	r0, 404610 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4045e6:	480e      	ldr	r0, [pc, #56]	; (404620 <pmc_switch_mainck_to_xtal+0x3c>)
  4045e8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4045ea:	0209      	lsls	r1, r1, #8
  4045ec:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4045ee:	4a0d      	ldr	r2, [pc, #52]	; (404624 <pmc_switch_mainck_to_xtal+0x40>)
  4045f0:	401a      	ands	r2, r3
  4045f2:	4b0d      	ldr	r3, [pc, #52]	; (404628 <pmc_switch_mainck_to_xtal+0x44>)
  4045f4:	4313      	orrs	r3, r2
  4045f6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4045f8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4045fa:	4602      	mov	r2, r0
  4045fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4045fe:	f013 0f01 	tst.w	r3, #1
  404602:	d0fb      	beq.n	4045fc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404604:	4a06      	ldr	r2, [pc, #24]	; (404620 <pmc_switch_mainck_to_xtal+0x3c>)
  404606:	6a11      	ldr	r1, [r2, #32]
  404608:	4b08      	ldr	r3, [pc, #32]	; (40462c <pmc_switch_mainck_to_xtal+0x48>)
  40460a:	430b      	orrs	r3, r1
  40460c:	6213      	str	r3, [r2, #32]
  40460e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404610:	4903      	ldr	r1, [pc, #12]	; (404620 <pmc_switch_mainck_to_xtal+0x3c>)
  404612:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  404614:	4a06      	ldr	r2, [pc, #24]	; (404630 <pmc_switch_mainck_to_xtal+0x4c>)
  404616:	401a      	ands	r2, r3
  404618:	4b06      	ldr	r3, [pc, #24]	; (404634 <pmc_switch_mainck_to_xtal+0x50>)
  40461a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40461c:	620b      	str	r3, [r1, #32]
  40461e:	4770      	bx	lr
  404620:	400e0600 	.word	0x400e0600
  404624:	ffc8fffc 	.word	0xffc8fffc
  404628:	00370001 	.word	0x00370001
  40462c:	01370000 	.word	0x01370000
  404630:	fec8fffc 	.word	0xfec8fffc
  404634:	01370002 	.word	0x01370002

00404638 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404638:	4b02      	ldr	r3, [pc, #8]	; (404644 <pmc_osc_is_ready_mainck+0xc>)
  40463a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40463c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  404640:	4770      	bx	lr
  404642:	bf00      	nop
  404644:	400e0600 	.word	0x400e0600

00404648 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  404648:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40464c:	4b01      	ldr	r3, [pc, #4]	; (404654 <pmc_disable_pllack+0xc>)
  40464e:	629a      	str	r2, [r3, #40]	; 0x28
  404650:	4770      	bx	lr
  404652:	bf00      	nop
  404654:	400e0600 	.word	0x400e0600

00404658 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404658:	4b02      	ldr	r3, [pc, #8]	; (404664 <pmc_is_locked_pllack+0xc>)
  40465a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40465c:	f000 0002 	and.w	r0, r0, #2
  404660:	4770      	bx	lr
  404662:	bf00      	nop
  404664:	400e0600 	.word	0x400e0600

00404668 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  404668:	283f      	cmp	r0, #63	; 0x3f
  40466a:	d81e      	bhi.n	4046aa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40466c:	281f      	cmp	r0, #31
  40466e:	d80c      	bhi.n	40468a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404670:	4b11      	ldr	r3, [pc, #68]	; (4046b8 <pmc_enable_periph_clk+0x50>)
  404672:	699a      	ldr	r2, [r3, #24]
  404674:	2301      	movs	r3, #1
  404676:	4083      	lsls	r3, r0
  404678:	4393      	bics	r3, r2
  40467a:	d018      	beq.n	4046ae <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40467c:	2301      	movs	r3, #1
  40467e:	fa03 f000 	lsl.w	r0, r3, r0
  404682:	4b0d      	ldr	r3, [pc, #52]	; (4046b8 <pmc_enable_periph_clk+0x50>)
  404684:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  404686:	2000      	movs	r0, #0
  404688:	4770      	bx	lr
		ul_id -= 32;
  40468a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40468c:	4b0a      	ldr	r3, [pc, #40]	; (4046b8 <pmc_enable_periph_clk+0x50>)
  40468e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404692:	2301      	movs	r3, #1
  404694:	4083      	lsls	r3, r0
  404696:	4393      	bics	r3, r2
  404698:	d00b      	beq.n	4046b2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40469a:	2301      	movs	r3, #1
  40469c:	fa03 f000 	lsl.w	r0, r3, r0
  4046a0:	4b05      	ldr	r3, [pc, #20]	; (4046b8 <pmc_enable_periph_clk+0x50>)
  4046a2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4046a6:	2000      	movs	r0, #0
  4046a8:	4770      	bx	lr
		return 1;
  4046aa:	2001      	movs	r0, #1
  4046ac:	4770      	bx	lr
	return 0;
  4046ae:	2000      	movs	r0, #0
  4046b0:	4770      	bx	lr
  4046b2:	2000      	movs	r0, #0
}
  4046b4:	4770      	bx	lr
  4046b6:	bf00      	nop
  4046b8:	400e0600 	.word	0x400e0600

004046bc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4046bc:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4046be:	4b07      	ldr	r3, [pc, #28]	; (4046dc <spi_enable_clock+0x20>)
  4046c0:	4298      	cmp	r0, r3
  4046c2:	d003      	beq.n	4046cc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4046c4:	4b06      	ldr	r3, [pc, #24]	; (4046e0 <spi_enable_clock+0x24>)
  4046c6:	4298      	cmp	r0, r3
  4046c8:	d004      	beq.n	4046d4 <spi_enable_clock+0x18>
  4046ca:	bd08      	pop	{r3, pc}
  4046cc:	2015      	movs	r0, #21
  4046ce:	4b05      	ldr	r3, [pc, #20]	; (4046e4 <spi_enable_clock+0x28>)
  4046d0:	4798      	blx	r3
  4046d2:	bd08      	pop	{r3, pc}
  4046d4:	202a      	movs	r0, #42	; 0x2a
  4046d6:	4b03      	ldr	r3, [pc, #12]	; (4046e4 <spi_enable_clock+0x28>)
  4046d8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4046da:	e7f6      	b.n	4046ca <spi_enable_clock+0xe>
  4046dc:	40008000 	.word	0x40008000
  4046e0:	40058000 	.word	0x40058000
  4046e4:	00404669 	.word	0x00404669

004046e8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4046e8:	6843      	ldr	r3, [r0, #4]
  4046ea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4046ee:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4046f0:	6843      	ldr	r3, [r0, #4]
  4046f2:	0409      	lsls	r1, r1, #16
  4046f4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4046f8:	4319      	orrs	r1, r3
  4046fa:	6041      	str	r1, [r0, #4]
  4046fc:	4770      	bx	lr

004046fe <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4046fe:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  404700:	f643 2399 	movw	r3, #15001	; 0x3a99
  404704:	6904      	ldr	r4, [r0, #16]
  404706:	f014 0f01 	tst.w	r4, #1
  40470a:	d103      	bne.n	404714 <spi_read+0x16>
		if (!timeout--) {
  40470c:	3b01      	subs	r3, #1
  40470e:	d1f9      	bne.n	404704 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  404710:	2001      	movs	r0, #1
  404712:	e009      	b.n	404728 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  404714:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  404716:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  404718:	f010 0f02 	tst.w	r0, #2
  40471c:	d002      	beq.n	404724 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  40471e:	f3c3 4003 	ubfx	r0, r3, #16, #4
  404722:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  404724:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  404726:	2000      	movs	r0, #0
}
  404728:	f85d 4b04 	ldr.w	r4, [sp], #4
  40472c:	4770      	bx	lr

0040472e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40472e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  404730:	f643 2499 	movw	r4, #15001	; 0x3a99
  404734:	6905      	ldr	r5, [r0, #16]
  404736:	f015 0f02 	tst.w	r5, #2
  40473a:	d103      	bne.n	404744 <spi_write+0x16>
		if (!timeout--) {
  40473c:	3c01      	subs	r4, #1
  40473e:	d1f9      	bne.n	404734 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  404740:	2001      	movs	r0, #1
  404742:	e00c      	b.n	40475e <spi_write+0x30>
  404744:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  404746:	f014 0f02 	tst.w	r4, #2
  40474a:	d006      	beq.n	40475a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40474c:	0412      	lsls	r2, r2, #16
  40474e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  404752:	4311      	orrs	r1, r2
		if (uc_last) {
  404754:	b10b      	cbz	r3, 40475a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  404756:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40475a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40475c:	2000      	movs	r0, #0
}
  40475e:	bc30      	pop	{r4, r5}
  404760:	4770      	bx	lr

00404762 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  404762:	b932      	cbnz	r2, 404772 <spi_set_clock_polarity+0x10>
  404764:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  404768:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40476a:	f023 0301 	bic.w	r3, r3, #1
  40476e:	6303      	str	r3, [r0, #48]	; 0x30
  404770:	4770      	bx	lr
  404772:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  404776:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404778:	f043 0301 	orr.w	r3, r3, #1
  40477c:	6303      	str	r3, [r0, #48]	; 0x30
  40477e:	4770      	bx	lr

00404780 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  404780:	b932      	cbnz	r2, 404790 <spi_set_clock_phase+0x10>
  404782:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  404786:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404788:	f023 0302 	bic.w	r3, r3, #2
  40478c:	6303      	str	r3, [r0, #48]	; 0x30
  40478e:	4770      	bx	lr
  404790:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  404794:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404796:	f043 0302 	orr.w	r3, r3, #2
  40479a:	6303      	str	r3, [r0, #48]	; 0x30
  40479c:	4770      	bx	lr

0040479e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40479e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4047a2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4047a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4047a8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4047aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4047ac:	431a      	orrs	r2, r3
  4047ae:	630a      	str	r2, [r1, #48]	; 0x30
  4047b0:	4770      	bx	lr

004047b2 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4047b2:	1e43      	subs	r3, r0, #1
  4047b4:	4419      	add	r1, r3
  4047b6:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4047ba:	1e43      	subs	r3, r0, #1
  4047bc:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4047be:	bf94      	ite	ls
  4047c0:	b200      	sxthls	r0, r0
		return -1;
  4047c2:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4047c6:	4770      	bx	lr

004047c8 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4047c8:	b17a      	cbz	r2, 4047ea <spi_set_baudrate_div+0x22>
{
  4047ca:	b410      	push	{r4}
  4047cc:	4614      	mov	r4, r2
  4047ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4047d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4047d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4047d8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4047da:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4047dc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4047e0:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4047e2:	2000      	movs	r0, #0
}
  4047e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4047e8:	4770      	bx	lr
        return -1;
  4047ea:	f04f 30ff 	mov.w	r0, #4294967295
  4047ee:	4770      	bx	lr

004047f0 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4047f0:	b410      	push	{r4}
  4047f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4047f6:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4047f8:	b280      	uxth	r0, r0
  4047fa:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4047fc:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4047fe:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  404802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404806:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  404808:	f85d 4b04 	ldr.w	r4, [sp], #4
  40480c:	4770      	bx	lr

0040480e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40480e:	6943      	ldr	r3, [r0, #20]
  404810:	f013 0f02 	tst.w	r3, #2
  404814:	d002      	beq.n	40481c <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  404816:	61c1      	str	r1, [r0, #28]
	return 0;
  404818:	2000      	movs	r0, #0
  40481a:	4770      	bx	lr
		return 1;
  40481c:	2001      	movs	r0, #1
}
  40481e:	4770      	bx	lr

00404820 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  404820:	6943      	ldr	r3, [r0, #20]
  404822:	f013 0f01 	tst.w	r3, #1
  404826:	d003      	beq.n	404830 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  404828:	6983      	ldr	r3, [r0, #24]
  40482a:	700b      	strb	r3, [r1, #0]
	return 0;
  40482c:	2000      	movs	r0, #0
  40482e:	4770      	bx	lr
		return 1;
  404830:	2001      	movs	r0, #1
}
  404832:	4770      	bx	lr

00404834 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  404834:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  404836:	010b      	lsls	r3, r1, #4
  404838:	4293      	cmp	r3, r2
  40483a:	d914      	bls.n	404866 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40483c:	00c9      	lsls	r1, r1, #3
  40483e:	084b      	lsrs	r3, r1, #1
  404840:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  404844:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  404848:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40484a:	1e5c      	subs	r4, r3, #1
  40484c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  404850:	428c      	cmp	r4, r1
  404852:	d901      	bls.n	404858 <usart_set_async_baudrate+0x24>
		return 1;
  404854:	2001      	movs	r0, #1
  404856:	e017      	b.n	404888 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  404858:	6841      	ldr	r1, [r0, #4]
  40485a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40485e:	6041      	str	r1, [r0, #4]
  404860:	e00c      	b.n	40487c <usart_set_async_baudrate+0x48>
		return 1;
  404862:	2001      	movs	r0, #1
  404864:	e010      	b.n	404888 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  404866:	0859      	lsrs	r1, r3, #1
  404868:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40486c:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  404870:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  404872:	1e5c      	subs	r4, r3, #1
  404874:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  404878:	428c      	cmp	r4, r1
  40487a:	d8f2      	bhi.n	404862 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40487c:	0412      	lsls	r2, r2, #16
  40487e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  404882:	431a      	orrs	r2, r3
  404884:	6202      	str	r2, [r0, #32]

	return 0;
  404886:	2000      	movs	r0, #0
}
  404888:	f85d 4b04 	ldr.w	r4, [sp], #4
  40488c:	4770      	bx	lr
	...

00404890 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  404890:	4b08      	ldr	r3, [pc, #32]	; (4048b4 <usart_reset+0x24>)
  404892:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  404896:	2300      	movs	r3, #0
  404898:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40489a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40489c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40489e:	2388      	movs	r3, #136	; 0x88
  4048a0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4048a2:	2324      	movs	r3, #36	; 0x24
  4048a4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4048a6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4048aa:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4048ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4048b0:	6003      	str	r3, [r0, #0]
  4048b2:	4770      	bx	lr
  4048b4:	55534100 	.word	0x55534100

004048b8 <usart_init_rs232>:
{
  4048b8:	b570      	push	{r4, r5, r6, lr}
  4048ba:	4605      	mov	r5, r0
  4048bc:	460c      	mov	r4, r1
  4048be:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4048c0:	4b0f      	ldr	r3, [pc, #60]	; (404900 <usart_init_rs232+0x48>)
  4048c2:	4798      	blx	r3
	ul_reg_val = 0;
  4048c4:	2200      	movs	r2, #0
  4048c6:	4b0f      	ldr	r3, [pc, #60]	; (404904 <usart_init_rs232+0x4c>)
  4048c8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4048ca:	b1a4      	cbz	r4, 4048f6 <usart_init_rs232+0x3e>
  4048cc:	4632      	mov	r2, r6
  4048ce:	6821      	ldr	r1, [r4, #0]
  4048d0:	4628      	mov	r0, r5
  4048d2:	4b0d      	ldr	r3, [pc, #52]	; (404908 <usart_init_rs232+0x50>)
  4048d4:	4798      	blx	r3
  4048d6:	4602      	mov	r2, r0
  4048d8:	b978      	cbnz	r0, 4048fa <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4048da:	6863      	ldr	r3, [r4, #4]
  4048dc:	68a1      	ldr	r1, [r4, #8]
  4048de:	430b      	orrs	r3, r1
  4048e0:	6921      	ldr	r1, [r4, #16]
  4048e2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4048e4:	68e1      	ldr	r1, [r4, #12]
  4048e6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4048e8:	4906      	ldr	r1, [pc, #24]	; (404904 <usart_init_rs232+0x4c>)
  4048ea:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4048ec:	6869      	ldr	r1, [r5, #4]
  4048ee:	430b      	orrs	r3, r1
  4048f0:	606b      	str	r3, [r5, #4]
}
  4048f2:	4610      	mov	r0, r2
  4048f4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4048f6:	2201      	movs	r2, #1
  4048f8:	e7fb      	b.n	4048f2 <usart_init_rs232+0x3a>
  4048fa:	2201      	movs	r2, #1
  4048fc:	e7f9      	b.n	4048f2 <usart_init_rs232+0x3a>
  4048fe:	bf00      	nop
  404900:	00404891 	.word	0x00404891
  404904:	20400ae0 	.word	0x20400ae0
  404908:	00404835 	.word	0x00404835

0040490c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40490c:	2340      	movs	r3, #64	; 0x40
  40490e:	6003      	str	r3, [r0, #0]
  404910:	4770      	bx	lr

00404912 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  404912:	2310      	movs	r3, #16
  404914:	6003      	str	r3, [r0, #0]
  404916:	4770      	bx	lr

00404918 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  404918:	6943      	ldr	r3, [r0, #20]
  40491a:	f013 0f02 	tst.w	r3, #2
  40491e:	d004      	beq.n	40492a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  404920:	f3c1 0108 	ubfx	r1, r1, #0, #9
  404924:	61c1      	str	r1, [r0, #28]
	return 0;
  404926:	2000      	movs	r0, #0
  404928:	4770      	bx	lr
		return 1;
  40492a:	2001      	movs	r0, #1
}
  40492c:	4770      	bx	lr

0040492e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40492e:	6943      	ldr	r3, [r0, #20]
  404930:	f013 0f01 	tst.w	r3, #1
  404934:	d005      	beq.n	404942 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  404936:	6983      	ldr	r3, [r0, #24]
  404938:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40493c:	600b      	str	r3, [r1, #0]
	return 0;
  40493e:	2000      	movs	r0, #0
  404940:	4770      	bx	lr
		return 1;
  404942:	2001      	movs	r0, #1
}
  404944:	4770      	bx	lr

00404946 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  404946:	e7fe      	b.n	404946 <Dummy_Handler>

00404948 <Reset_Handler>:
{
  404948:	b500      	push	{lr}
  40494a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40494c:	4b25      	ldr	r3, [pc, #148]	; (4049e4 <Reset_Handler+0x9c>)
  40494e:	4a26      	ldr	r2, [pc, #152]	; (4049e8 <Reset_Handler+0xa0>)
  404950:	429a      	cmp	r2, r3
  404952:	d010      	beq.n	404976 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  404954:	4b25      	ldr	r3, [pc, #148]	; (4049ec <Reset_Handler+0xa4>)
  404956:	4a23      	ldr	r2, [pc, #140]	; (4049e4 <Reset_Handler+0x9c>)
  404958:	429a      	cmp	r2, r3
  40495a:	d20c      	bcs.n	404976 <Reset_Handler+0x2e>
  40495c:	3b01      	subs	r3, #1
  40495e:	1a9b      	subs	r3, r3, r2
  404960:	f023 0303 	bic.w	r3, r3, #3
  404964:	3304      	adds	r3, #4
  404966:	4413      	add	r3, r2
  404968:	491f      	ldr	r1, [pc, #124]	; (4049e8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40496a:	f851 0b04 	ldr.w	r0, [r1], #4
  40496e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  404972:	429a      	cmp	r2, r3
  404974:	d1f9      	bne.n	40496a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  404976:	4b1e      	ldr	r3, [pc, #120]	; (4049f0 <Reset_Handler+0xa8>)
  404978:	4a1e      	ldr	r2, [pc, #120]	; (4049f4 <Reset_Handler+0xac>)
  40497a:	429a      	cmp	r2, r3
  40497c:	d20a      	bcs.n	404994 <Reset_Handler+0x4c>
  40497e:	3b01      	subs	r3, #1
  404980:	1a9b      	subs	r3, r3, r2
  404982:	f023 0303 	bic.w	r3, r3, #3
  404986:	3304      	adds	r3, #4
  404988:	4413      	add	r3, r2
                *pDest++ = 0;
  40498a:	2100      	movs	r1, #0
  40498c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  404990:	4293      	cmp	r3, r2
  404992:	d1fb      	bne.n	40498c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404994:	4a18      	ldr	r2, [pc, #96]	; (4049f8 <Reset_Handler+0xb0>)
  404996:	4b19      	ldr	r3, [pc, #100]	; (4049fc <Reset_Handler+0xb4>)
  404998:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40499c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40499e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4049a2:	fab3 f383 	clz	r3, r3
  4049a6:	095b      	lsrs	r3, r3, #5
  4049a8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4049aa:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4049ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4049b0:	2200      	movs	r2, #0
  4049b2:	4b13      	ldr	r3, [pc, #76]	; (404a00 <Reset_Handler+0xb8>)
  4049b4:	701a      	strb	r2, [r3, #0]
	return flags;
  4049b6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4049b8:	4a12      	ldr	r2, [pc, #72]	; (404a04 <Reset_Handler+0xbc>)
  4049ba:	6813      	ldr	r3, [r2, #0]
  4049bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4049c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4049c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4049c6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4049ca:	b129      	cbz	r1, 4049d8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4049cc:	2201      	movs	r2, #1
  4049ce:	4b0c      	ldr	r3, [pc, #48]	; (404a00 <Reset_Handler+0xb8>)
  4049d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4049d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4049d6:	b662      	cpsie	i
        __libc_init_array();
  4049d8:	4b0b      	ldr	r3, [pc, #44]	; (404a08 <Reset_Handler+0xc0>)
  4049da:	4798      	blx	r3
        main();
  4049dc:	4b0b      	ldr	r3, [pc, #44]	; (404a0c <Reset_Handler+0xc4>)
  4049de:	4798      	blx	r3
  4049e0:	e7fe      	b.n	4049e0 <Reset_Handler+0x98>
  4049e2:	bf00      	nop
  4049e4:	20400000 	.word	0x20400000
  4049e8:	0040c6ec 	.word	0x0040c6ec
  4049ec:	204009ec 	.word	0x204009ec
  4049f0:	2040175c 	.word	0x2040175c
  4049f4:	204009ec 	.word	0x204009ec
  4049f8:	e000ed00 	.word	0xe000ed00
  4049fc:	00400000 	.word	0x00400000
  404a00:	20400038 	.word	0x20400038
  404a04:	e000ed88 	.word	0xe000ed88
  404a08:	0040517d 	.word	0x0040517d
  404a0c:	00404f2d 	.word	0x00404f2d

00404a10 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  404a10:	4b3b      	ldr	r3, [pc, #236]	; (404b00 <SystemCoreClockUpdate+0xf0>)
  404a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404a14:	f003 0303 	and.w	r3, r3, #3
  404a18:	2b01      	cmp	r3, #1
  404a1a:	d01d      	beq.n	404a58 <SystemCoreClockUpdate+0x48>
  404a1c:	b183      	cbz	r3, 404a40 <SystemCoreClockUpdate+0x30>
  404a1e:	2b02      	cmp	r3, #2
  404a20:	d036      	beq.n	404a90 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  404a22:	4b37      	ldr	r3, [pc, #220]	; (404b00 <SystemCoreClockUpdate+0xf0>)
  404a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404a2a:	2b70      	cmp	r3, #112	; 0x70
  404a2c:	d05f      	beq.n	404aee <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404a2e:	4b34      	ldr	r3, [pc, #208]	; (404b00 <SystemCoreClockUpdate+0xf0>)
  404a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404a32:	4934      	ldr	r1, [pc, #208]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404a34:	f3c2 1202 	ubfx	r2, r2, #4, #3
  404a38:	680b      	ldr	r3, [r1, #0]
  404a3a:	40d3      	lsrs	r3, r2
  404a3c:	600b      	str	r3, [r1, #0]
  404a3e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  404a40:	4b31      	ldr	r3, [pc, #196]	; (404b08 <SystemCoreClockUpdate+0xf8>)
  404a42:	695b      	ldr	r3, [r3, #20]
  404a44:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  404a48:	bf14      	ite	ne
  404a4a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404a4e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  404a52:	4b2c      	ldr	r3, [pc, #176]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404a54:	601a      	str	r2, [r3, #0]
  404a56:	e7e4      	b.n	404a22 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404a58:	4b29      	ldr	r3, [pc, #164]	; (404b00 <SystemCoreClockUpdate+0xf0>)
  404a5a:	6a1b      	ldr	r3, [r3, #32]
  404a5c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404a60:	d003      	beq.n	404a6a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  404a62:	4a2a      	ldr	r2, [pc, #168]	; (404b0c <SystemCoreClockUpdate+0xfc>)
  404a64:	4b27      	ldr	r3, [pc, #156]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404a66:	601a      	str	r2, [r3, #0]
  404a68:	e7db      	b.n	404a22 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404a6a:	4a29      	ldr	r2, [pc, #164]	; (404b10 <SystemCoreClockUpdate+0x100>)
  404a6c:	4b25      	ldr	r3, [pc, #148]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404a6e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404a70:	4b23      	ldr	r3, [pc, #140]	; (404b00 <SystemCoreClockUpdate+0xf0>)
  404a72:	6a1b      	ldr	r3, [r3, #32]
  404a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404a78:	2b10      	cmp	r3, #16
  404a7a:	d005      	beq.n	404a88 <SystemCoreClockUpdate+0x78>
  404a7c:	2b20      	cmp	r3, #32
  404a7e:	d1d0      	bne.n	404a22 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  404a80:	4a22      	ldr	r2, [pc, #136]	; (404b0c <SystemCoreClockUpdate+0xfc>)
  404a82:	4b20      	ldr	r3, [pc, #128]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404a84:	601a      	str	r2, [r3, #0]
          break;
  404a86:	e7cc      	b.n	404a22 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  404a88:	4a22      	ldr	r2, [pc, #136]	; (404b14 <SystemCoreClockUpdate+0x104>)
  404a8a:	4b1e      	ldr	r3, [pc, #120]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404a8c:	601a      	str	r2, [r3, #0]
          break;
  404a8e:	e7c8      	b.n	404a22 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404a90:	4b1b      	ldr	r3, [pc, #108]	; (404b00 <SystemCoreClockUpdate+0xf0>)
  404a92:	6a1b      	ldr	r3, [r3, #32]
  404a94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404a98:	d016      	beq.n	404ac8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  404a9a:	4a1c      	ldr	r2, [pc, #112]	; (404b0c <SystemCoreClockUpdate+0xfc>)
  404a9c:	4b19      	ldr	r3, [pc, #100]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404a9e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  404aa0:	4b17      	ldr	r3, [pc, #92]	; (404b00 <SystemCoreClockUpdate+0xf0>)
  404aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404aa4:	f003 0303 	and.w	r3, r3, #3
  404aa8:	2b02      	cmp	r3, #2
  404aaa:	d1ba      	bne.n	404a22 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  404aac:	4a14      	ldr	r2, [pc, #80]	; (404b00 <SystemCoreClockUpdate+0xf0>)
  404aae:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  404ab0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  404ab2:	4814      	ldr	r0, [pc, #80]	; (404b04 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  404ab4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  404ab8:	6803      	ldr	r3, [r0, #0]
  404aba:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  404abe:	b2d2      	uxtb	r2, r2
  404ac0:	fbb3 f3f2 	udiv	r3, r3, r2
  404ac4:	6003      	str	r3, [r0, #0]
  404ac6:	e7ac      	b.n	404a22 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404ac8:	4a11      	ldr	r2, [pc, #68]	; (404b10 <SystemCoreClockUpdate+0x100>)
  404aca:	4b0e      	ldr	r3, [pc, #56]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404acc:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404ace:	4b0c      	ldr	r3, [pc, #48]	; (404b00 <SystemCoreClockUpdate+0xf0>)
  404ad0:	6a1b      	ldr	r3, [r3, #32]
  404ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404ad6:	2b10      	cmp	r3, #16
  404ad8:	d005      	beq.n	404ae6 <SystemCoreClockUpdate+0xd6>
  404ada:	2b20      	cmp	r3, #32
  404adc:	d1e0      	bne.n	404aa0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  404ade:	4a0b      	ldr	r2, [pc, #44]	; (404b0c <SystemCoreClockUpdate+0xfc>)
  404ae0:	4b08      	ldr	r3, [pc, #32]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404ae2:	601a      	str	r2, [r3, #0]
          break;
  404ae4:	e7dc      	b.n	404aa0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  404ae6:	4a0b      	ldr	r2, [pc, #44]	; (404b14 <SystemCoreClockUpdate+0x104>)
  404ae8:	4b06      	ldr	r3, [pc, #24]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404aea:	601a      	str	r2, [r3, #0]
          break;
  404aec:	e7d8      	b.n	404aa0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  404aee:	4a05      	ldr	r2, [pc, #20]	; (404b04 <SystemCoreClockUpdate+0xf4>)
  404af0:	6813      	ldr	r3, [r2, #0]
  404af2:	4909      	ldr	r1, [pc, #36]	; (404b18 <SystemCoreClockUpdate+0x108>)
  404af4:	fba1 1303 	umull	r1, r3, r1, r3
  404af8:	085b      	lsrs	r3, r3, #1
  404afa:	6013      	str	r3, [r2, #0]
  404afc:	4770      	bx	lr
  404afe:	bf00      	nop
  404b00:	400e0600 	.word	0x400e0600
  404b04:	2040003c 	.word	0x2040003c
  404b08:	400e1810 	.word	0x400e1810
  404b0c:	00b71b00 	.word	0x00b71b00
  404b10:	003d0900 	.word	0x003d0900
  404b14:	007a1200 	.word	0x007a1200
  404b18:	aaaaaaab 	.word	0xaaaaaaab

00404b1c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  404b1c:	4b12      	ldr	r3, [pc, #72]	; (404b68 <system_init_flash+0x4c>)
  404b1e:	4298      	cmp	r0, r3
  404b20:	d911      	bls.n	404b46 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  404b22:	4b12      	ldr	r3, [pc, #72]	; (404b6c <system_init_flash+0x50>)
  404b24:	4298      	cmp	r0, r3
  404b26:	d913      	bls.n	404b50 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  404b28:	4b11      	ldr	r3, [pc, #68]	; (404b70 <system_init_flash+0x54>)
  404b2a:	4298      	cmp	r0, r3
  404b2c:	d914      	bls.n	404b58 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  404b2e:	4b11      	ldr	r3, [pc, #68]	; (404b74 <system_init_flash+0x58>)
  404b30:	4298      	cmp	r0, r3
  404b32:	d915      	bls.n	404b60 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  404b34:	4b10      	ldr	r3, [pc, #64]	; (404b78 <system_init_flash+0x5c>)
  404b36:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  404b38:	bf94      	ite	ls
  404b3a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  404b3e:	4a0f      	ldrhi	r2, [pc, #60]	; (404b7c <system_init_flash+0x60>)
  404b40:	4b0f      	ldr	r3, [pc, #60]	; (404b80 <system_init_flash+0x64>)
  404b42:	601a      	str	r2, [r3, #0]
  404b44:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  404b46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404b4a:	4b0d      	ldr	r3, [pc, #52]	; (404b80 <system_init_flash+0x64>)
  404b4c:	601a      	str	r2, [r3, #0]
  404b4e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404b50:	4a0c      	ldr	r2, [pc, #48]	; (404b84 <system_init_flash+0x68>)
  404b52:	4b0b      	ldr	r3, [pc, #44]	; (404b80 <system_init_flash+0x64>)
  404b54:	601a      	str	r2, [r3, #0]
  404b56:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404b58:	4a0b      	ldr	r2, [pc, #44]	; (404b88 <system_init_flash+0x6c>)
  404b5a:	4b09      	ldr	r3, [pc, #36]	; (404b80 <system_init_flash+0x64>)
  404b5c:	601a      	str	r2, [r3, #0]
  404b5e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404b60:	4a0a      	ldr	r2, [pc, #40]	; (404b8c <system_init_flash+0x70>)
  404b62:	4b07      	ldr	r3, [pc, #28]	; (404b80 <system_init_flash+0x64>)
  404b64:	601a      	str	r2, [r3, #0]
  404b66:	4770      	bx	lr
  404b68:	01312cff 	.word	0x01312cff
  404b6c:	026259ff 	.word	0x026259ff
  404b70:	039386ff 	.word	0x039386ff
  404b74:	04c4b3ff 	.word	0x04c4b3ff
  404b78:	05f5e0ff 	.word	0x05f5e0ff
  404b7c:	04000500 	.word	0x04000500
  404b80:	400e0c00 	.word	0x400e0c00
  404b84:	04000100 	.word	0x04000100
  404b88:	04000200 	.word	0x04000200
  404b8c:	04000300 	.word	0x04000300

00404b90 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  404b90:	4b0a      	ldr	r3, [pc, #40]	; (404bbc <_sbrk+0x2c>)
  404b92:	681b      	ldr	r3, [r3, #0]
  404b94:	b153      	cbz	r3, 404bac <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  404b96:	4b09      	ldr	r3, [pc, #36]	; (404bbc <_sbrk+0x2c>)
  404b98:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  404b9a:	181a      	adds	r2, r3, r0
  404b9c:	4908      	ldr	r1, [pc, #32]	; (404bc0 <_sbrk+0x30>)
  404b9e:	4291      	cmp	r1, r2
  404ba0:	db08      	blt.n	404bb4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  404ba2:	4610      	mov	r0, r2
  404ba4:	4a05      	ldr	r2, [pc, #20]	; (404bbc <_sbrk+0x2c>)
  404ba6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  404ba8:	4618      	mov	r0, r3
  404baa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  404bac:	4a05      	ldr	r2, [pc, #20]	; (404bc4 <_sbrk+0x34>)
  404bae:	4b03      	ldr	r3, [pc, #12]	; (404bbc <_sbrk+0x2c>)
  404bb0:	601a      	str	r2, [r3, #0]
  404bb2:	e7f0      	b.n	404b96 <_sbrk+0x6>
		return (caddr_t) -1;	
  404bb4:	f04f 30ff 	mov.w	r0, #4294967295
}
  404bb8:	4770      	bx	lr
  404bba:	bf00      	nop
  404bbc:	20400ae4 	.word	0x20400ae4
  404bc0:	2045fffc 	.word	0x2045fffc
  404bc4:	20403960 	.word	0x20403960

00404bc8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  404bc8:	f04f 30ff 	mov.w	r0, #4294967295
  404bcc:	4770      	bx	lr

00404bce <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  404bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  404bd2:	604b      	str	r3, [r1, #4]

	return 0;
}
  404bd4:	2000      	movs	r0, #0
  404bd6:	4770      	bx	lr

00404bd8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  404bd8:	2001      	movs	r0, #1
  404bda:	4770      	bx	lr

00404bdc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  404bdc:	2000      	movs	r0, #0
  404bde:	4770      	bx	lr

00404be0 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  404be0:	b570      	push	{r4, r5, r6, lr}
  404be2:	4614      	mov	r4, r2
	switch (u8Msg) {
  404be4:	2906      	cmp	r1, #6
  404be6:	d043      	beq.n	404c70 <socket_cb+0x90>
  404be8:	2907      	cmp	r1, #7
  404bea:	d03d      	beq.n	404c68 <socket_cb+0x88>
  404bec:	2905      	cmp	r1, #5
  404bee:	d000      	beq.n	404bf2 <socket_cb+0x12>
  404bf0:	bd70      	pop	{r4, r5, r6, pc}
   
  /* Socket connected */
  case SOCKET_MSG_CONNECT:
  {
    uint16_t rtn;
    memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  404bf2:	4d2e      	ldr	r5, [pc, #184]	; (404cac <socket_cb+0xcc>)
  404bf4:	f240 52b4 	movw	r2, #1460	; 0x5b4
  404bf8:	2100      	movs	r1, #0
  404bfa:	4628      	mov	r0, r5
  404bfc:	4b2c      	ldr	r3, [pc, #176]	; (404cb0 <socket_cb+0xd0>)
  404bfe:	4798      	blx	r3
    sprintf((char *)gau8ReceivedBuffer, "%s%s", HOST_MSG, HOST_MSG_SUFFIX);
  404c00:	4b2c      	ldr	r3, [pc, #176]	; (404cb4 <socket_cb+0xd4>)
  404c02:	4a2d      	ldr	r2, [pc, #180]	; (404cb8 <socket_cb+0xd8>)
  404c04:	492d      	ldr	r1, [pc, #180]	; (404cbc <socket_cb+0xdc>)
  404c06:	4628      	mov	r0, r5
  404c08:	4d2d      	ldr	r5, [pc, #180]	; (404cc0 <socket_cb+0xe0>)
  404c0a:	47a8      	blx	r5
    
    tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    if (pstrConnect && pstrConnect->s8Error >= 0) {
  404c0c:	b30c      	cbz	r4, 404c52 <socket_cb+0x72>
  404c0e:	f994 3001 	ldrsb.w	r3, [r4, #1]
  404c12:	2b00      	cmp	r3, #0
  404c14:	db1d      	blt.n	404c52 <socket_cb+0x72>
      printf("socket_cb: connect success!\r\n");
  404c16:	482b      	ldr	r0, [pc, #172]	; (404cc4 <socket_cb+0xe4>)
  404c18:	4b2b      	ldr	r3, [pc, #172]	; (404cc8 <socket_cb+0xe8>)
  404c1a:	4798      	blx	r3
      rtn = send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  404c1c:	4c23      	ldr	r4, [pc, #140]	; (404cac <socket_cb+0xcc>)
  404c1e:	4620      	mov	r0, r4
  404c20:	4b2a      	ldr	r3, [pc, #168]	; (404ccc <socket_cb+0xec>)
  404c22:	4798      	blx	r3
  404c24:	4d2a      	ldr	r5, [pc, #168]	; (404cd0 <socket_cb+0xf0>)
  404c26:	2300      	movs	r3, #0
  404c28:	b282      	uxth	r2, r0
  404c2a:	4621      	mov	r1, r4
  404c2c:	f995 0000 	ldrsb.w	r0, [r5]
  404c30:	4e28      	ldr	r6, [pc, #160]	; (404cd4 <socket_cb+0xf4>)
  404c32:	47b0      	blx	r6
      memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  404c34:	f240 56b4 	movw	r6, #1460	; 0x5b4
  404c38:	4632      	mov	r2, r6
  404c3a:	2100      	movs	r1, #0
  404c3c:	4620      	mov	r0, r4
  404c3e:	4b1c      	ldr	r3, [pc, #112]	; (404cb0 <socket_cb+0xd0>)
  404c40:	4798      	blx	r3
      recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);  
  404c42:	2300      	movs	r3, #0
  404c44:	4632      	mov	r2, r6
  404c46:	4924      	ldr	r1, [pc, #144]	; (404cd8 <socket_cb+0xf8>)
  404c48:	f995 0000 	ldrsb.w	r0, [r5]
  404c4c:	4c23      	ldr	r4, [pc, #140]	; (404cdc <socket_cb+0xfc>)
  404c4e:	47a0      	blx	r4
  404c50:	bd70      	pop	{r4, r5, r6, pc}
      } else {
      printf("socket_cb: connect error!\r\n");
  404c52:	4823      	ldr	r0, [pc, #140]	; (404ce0 <socket_cb+0x100>)
  404c54:	4b1c      	ldr	r3, [pc, #112]	; (404cc8 <socket_cb+0xe8>)
  404c56:	4798      	blx	r3
      close(tcp_client_socket);
  404c58:	4c1d      	ldr	r4, [pc, #116]	; (404cd0 <socket_cb+0xf0>)
  404c5a:	f994 0000 	ldrsb.w	r0, [r4]
  404c5e:	4b21      	ldr	r3, [pc, #132]	; (404ce4 <socket_cb+0x104>)
  404c60:	4798      	blx	r3
      tcp_client_socket = -1;
  404c62:	23ff      	movs	r3, #255	; 0xff
  404c64:	7023      	strb	r3, [r4, #0]
  404c66:	bd70      	pop	{r4, r5, r6, pc}
  break;

	/* Message send */
	case SOCKET_MSG_SEND:
	{
		printf("socket_cb: send success!\r\n");
  404c68:	481f      	ldr	r0, [pc, #124]	; (404ce8 <socket_cb+0x108>)
  404c6a:	4b17      	ldr	r3, [pc, #92]	; (404cc8 <socket_cb+0xe8>)
  404c6c:	4798      	blx	r3
	  //printf("TCP Server Test Complete!\r\n");
		//printf("close socket\n");
		//close(tcp_client_socket);
		//close(tcp_server_socket);
	}
	break;
  404c6e:	bd70      	pop	{r4, r5, r6, pc}
    
    uint8_t  messageAck[64];
    uint16_t messageAckSize;
    uint8_t  command;
        
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {     
  404c70:	b11a      	cbz	r2, 404c7a <socket_cb+0x9a>
  404c72:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  404c76:	2b00      	cmp	r3, #0
  404c78:	dc0a      	bgt.n	404c90 <socket_cb+0xb0>
      
      // Requista novos dados
      //recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
      
 		} else {
			printf("socket_cb: recv error!\r\n");
  404c7a:	481c      	ldr	r0, [pc, #112]	; (404cec <socket_cb+0x10c>)
  404c7c:	4b12      	ldr	r3, [pc, #72]	; (404cc8 <socket_cb+0xe8>)
  404c7e:	4798      	blx	r3
			close(tcp_client_socket);
  404c80:	4c13      	ldr	r4, [pc, #76]	; (404cd0 <socket_cb+0xf0>)
  404c82:	f994 0000 	ldrsb.w	r0, [r4]
  404c86:	4b17      	ldr	r3, [pc, #92]	; (404ce4 <socket_cb+0x104>)
  404c88:	4798      	blx	r3
			tcp_client_socket = -1;
  404c8a:	23ff      	movs	r3, #255	; 0xff
  404c8c:	7023      	strb	r3, [r4, #0]
	break;

	default:
		break;
	}
}
  404c8e:	e7af      	b.n	404bf0 <socket_cb+0x10>
			printf(" ---------- \n Cnt : %d \n -----------\n", ++g_rxCnt);
  404c90:	4b17      	ldr	r3, [pc, #92]	; (404cf0 <socket_cb+0x110>)
  404c92:	6819      	ldr	r1, [r3, #0]
  404c94:	3101      	adds	r1, #1
  404c96:	6019      	str	r1, [r3, #0]
  404c98:	4816      	ldr	r0, [pc, #88]	; (404cf4 <socket_cb+0x114>)
  404c9a:	4b0b      	ldr	r3, [pc, #44]	; (404cc8 <socket_cb+0xe8>)
  404c9c:	4798      	blx	r3
      memset(pstrRecv->pu8Buffer, 0, pstrRecv->s16BufferSize); 
  404c9e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  404ca2:	2100      	movs	r1, #0
  404ca4:	6820      	ldr	r0, [r4, #0]
  404ca6:	4b02      	ldr	r3, [pc, #8]	; (404cb0 <socket_cb+0xd0>)
  404ca8:	4798      	blx	r3
  404caa:	bd70      	pop	{r4, r5, r6, pc}
  404cac:	20400aec 	.word	0x20400aec
  404cb0:	004051f5 	.word	0x004051f5
  404cb4:	0040c280 	.word	0x0040c280
  404cb8:	0040c29c 	.word	0x0040c29c
  404cbc:	0040c2b0 	.word	0x0040c2b0
  404cc0:	004053ed 	.word	0x004053ed
  404cc4:	0040c2b8 	.word	0x0040c2b8
  404cc8:	004051cd 	.word	0x004051cd
  404ccc:	00405441 	.word	0x00405441
  404cd0:	20400040 	.word	0x20400040
  404cd4:	004039cd 	.word	0x004039cd
  404cd8:	204010a0 	.word	0x204010a0
  404cdc:	00403a69 	.word	0x00403a69
  404ce0:	0040c2d8 	.word	0x0040c2d8
  404ce4:	00403b09 	.word	0x00403b09
  404ce8:	0040c2f4 	.word	0x0040c2f4
  404cec:	0040c338 	.word	0x0040c338
  404cf0:	20400ae8 	.word	0x20400ae8
  404cf4:	0040c310 	.word	0x0040c310

00404cf8 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  404cf8:	b510      	push	{r4, lr}
  404cfa:	b082      	sub	sp, #8
	switch (u8MsgType) {
  404cfc:	282c      	cmp	r0, #44	; 0x2c
  404cfe:	d003      	beq.n	404d08 <wifi_cb+0x10>
  404d00:	2832      	cmp	r0, #50	; 0x32
  404d02:	d01b      	beq.n	404d3c <wifi_cb+0x44>
	break;

	default:
		break;
	}
}
  404d04:	b002      	add	sp, #8
  404d06:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  404d08:	780b      	ldrb	r3, [r1, #0]
  404d0a:	2b01      	cmp	r3, #1
  404d0c:	d010      	beq.n	404d30 <wifi_cb+0x38>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  404d0e:	2b00      	cmp	r3, #0
  404d10:	d1f8      	bne.n	404d04 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
  404d12:	4811      	ldr	r0, [pc, #68]	; (404d58 <wifi_cb+0x60>)
  404d14:	4b11      	ldr	r3, [pc, #68]	; (404d5c <wifi_cb+0x64>)
  404d16:	4798      	blx	r3
			wifi_connected = 0;
  404d18:	2200      	movs	r2, #0
  404d1a:	4b11      	ldr	r3, [pc, #68]	; (404d60 <wifi_cb+0x68>)
  404d1c:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  404d1e:	23ff      	movs	r3, #255	; 0xff
  404d20:	9300      	str	r3, [sp, #0]
  404d22:	4b10      	ldr	r3, [pc, #64]	; (404d64 <wifi_cb+0x6c>)
  404d24:	2202      	movs	r2, #2
  404d26:	210a      	movs	r1, #10
  404d28:	480f      	ldr	r0, [pc, #60]	; (404d68 <wifi_cb+0x70>)
  404d2a:	4c10      	ldr	r4, [pc, #64]	; (404d6c <wifi_cb+0x74>)
  404d2c:	47a0      	blx	r4
  404d2e:	e7e9      	b.n	404d04 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
  404d30:	480f      	ldr	r0, [pc, #60]	; (404d70 <wifi_cb+0x78>)
  404d32:	4b0a      	ldr	r3, [pc, #40]	; (404d5c <wifi_cb+0x64>)
  404d34:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  404d36:	4b0f      	ldr	r3, [pc, #60]	; (404d74 <wifi_cb+0x7c>)
  404d38:	4798      	blx	r3
  404d3a:	e7e3      	b.n	404d04 <wifi_cb+0xc>
		wifi_connected = 1;
  404d3c:	2201      	movs	r2, #1
  404d3e:	4b08      	ldr	r3, [pc, #32]	; (404d60 <wifi_cb+0x68>)
  404d40:	701a      	strb	r2, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  404d42:	788b      	ldrb	r3, [r1, #2]
  404d44:	784a      	ldrb	r2, [r1, #1]
  404d46:	7808      	ldrb	r0, [r1, #0]
  404d48:	78c9      	ldrb	r1, [r1, #3]
  404d4a:	9100      	str	r1, [sp, #0]
  404d4c:	4601      	mov	r1, r0
  404d4e:	480a      	ldr	r0, [pc, #40]	; (404d78 <wifi_cb+0x80>)
  404d50:	4c02      	ldr	r4, [pc, #8]	; (404d5c <wifi_cb+0x64>)
  404d52:	47a0      	blx	r4
}
  404d54:	e7d6      	b.n	404d04 <wifi_cb+0xc>
  404d56:	bf00      	nop
  404d58:	0040c38c 	.word	0x0040c38c
  404d5c:	004051cd 	.word	0x004051cd
  404d60:	20401654 	.word	0x20401654
  404d64:	0040c3c8 	.word	0x0040c3c8
  404d68:	0040c3d4 	.word	0x0040c3d4
  404d6c:	004023ad 	.word	0x004023ad
  404d70:	0040c354 	.word	0x0040c354
  404d74:	004023c9 	.word	0x004023c9
  404d78:	0040c3e0 	.word	0x0040c3e0

00404d7c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  404d7e:	b083      	sub	sp, #12
  404d80:	4605      	mov	r5, r0
  404d82:	460c      	mov	r4, r1
	uint32_t val = 0;
  404d84:	2300      	movs	r3, #0
  404d86:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404d88:	4b2a      	ldr	r3, [pc, #168]	; (404e34 <usart_serial_getchar+0xb8>)
  404d8a:	4298      	cmp	r0, r3
  404d8c:	d013      	beq.n	404db6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404d8e:	4b2a      	ldr	r3, [pc, #168]	; (404e38 <usart_serial_getchar+0xbc>)
  404d90:	4298      	cmp	r0, r3
  404d92:	d018      	beq.n	404dc6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  404d94:	4b29      	ldr	r3, [pc, #164]	; (404e3c <usart_serial_getchar+0xc0>)
  404d96:	4298      	cmp	r0, r3
  404d98:	d01d      	beq.n	404dd6 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  404d9a:	4b29      	ldr	r3, [pc, #164]	; (404e40 <usart_serial_getchar+0xc4>)
  404d9c:	429d      	cmp	r5, r3
  404d9e:	d022      	beq.n	404de6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404da0:	4b28      	ldr	r3, [pc, #160]	; (404e44 <usart_serial_getchar+0xc8>)
  404da2:	429d      	cmp	r5, r3
  404da4:	d027      	beq.n	404df6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  404da6:	4b28      	ldr	r3, [pc, #160]	; (404e48 <usart_serial_getchar+0xcc>)
  404da8:	429d      	cmp	r5, r3
  404daa:	d02e      	beq.n	404e0a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  404dac:	4b27      	ldr	r3, [pc, #156]	; (404e4c <usart_serial_getchar+0xd0>)
  404dae:	429d      	cmp	r5, r3
  404db0:	d035      	beq.n	404e1e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  404db2:	b003      	add	sp, #12
  404db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  404db6:	461f      	mov	r7, r3
  404db8:	4e25      	ldr	r6, [pc, #148]	; (404e50 <usart_serial_getchar+0xd4>)
  404dba:	4621      	mov	r1, r4
  404dbc:	4638      	mov	r0, r7
  404dbe:	47b0      	blx	r6
  404dc0:	2800      	cmp	r0, #0
  404dc2:	d1fa      	bne.n	404dba <usart_serial_getchar+0x3e>
  404dc4:	e7e9      	b.n	404d9a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  404dc6:	461f      	mov	r7, r3
  404dc8:	4e21      	ldr	r6, [pc, #132]	; (404e50 <usart_serial_getchar+0xd4>)
  404dca:	4621      	mov	r1, r4
  404dcc:	4638      	mov	r0, r7
  404dce:	47b0      	blx	r6
  404dd0:	2800      	cmp	r0, #0
  404dd2:	d1fa      	bne.n	404dca <usart_serial_getchar+0x4e>
  404dd4:	e7e4      	b.n	404da0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  404dd6:	461f      	mov	r7, r3
  404dd8:	4e1d      	ldr	r6, [pc, #116]	; (404e50 <usart_serial_getchar+0xd4>)
  404dda:	4621      	mov	r1, r4
  404ddc:	4638      	mov	r0, r7
  404dde:	47b0      	blx	r6
  404de0:	2800      	cmp	r0, #0
  404de2:	d1fa      	bne.n	404dda <usart_serial_getchar+0x5e>
  404de4:	e7df      	b.n	404da6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  404de6:	461f      	mov	r7, r3
  404de8:	4e19      	ldr	r6, [pc, #100]	; (404e50 <usart_serial_getchar+0xd4>)
  404dea:	4621      	mov	r1, r4
  404dec:	4638      	mov	r0, r7
  404dee:	47b0      	blx	r6
  404df0:	2800      	cmp	r0, #0
  404df2:	d1fa      	bne.n	404dea <usart_serial_getchar+0x6e>
  404df4:	e7da      	b.n	404dac <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  404df6:	461e      	mov	r6, r3
  404df8:	4d16      	ldr	r5, [pc, #88]	; (404e54 <usart_serial_getchar+0xd8>)
  404dfa:	a901      	add	r1, sp, #4
  404dfc:	4630      	mov	r0, r6
  404dfe:	47a8      	blx	r5
  404e00:	2800      	cmp	r0, #0
  404e02:	d1fa      	bne.n	404dfa <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  404e04:	9b01      	ldr	r3, [sp, #4]
  404e06:	7023      	strb	r3, [r4, #0]
  404e08:	e7d3      	b.n	404db2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404e0a:	461e      	mov	r6, r3
  404e0c:	4d11      	ldr	r5, [pc, #68]	; (404e54 <usart_serial_getchar+0xd8>)
  404e0e:	a901      	add	r1, sp, #4
  404e10:	4630      	mov	r0, r6
  404e12:	47a8      	blx	r5
  404e14:	2800      	cmp	r0, #0
  404e16:	d1fa      	bne.n	404e0e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  404e18:	9b01      	ldr	r3, [sp, #4]
  404e1a:	7023      	strb	r3, [r4, #0]
  404e1c:	e7c9      	b.n	404db2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  404e1e:	461e      	mov	r6, r3
  404e20:	4d0c      	ldr	r5, [pc, #48]	; (404e54 <usart_serial_getchar+0xd8>)
  404e22:	a901      	add	r1, sp, #4
  404e24:	4630      	mov	r0, r6
  404e26:	47a8      	blx	r5
  404e28:	2800      	cmp	r0, #0
  404e2a:	d1fa      	bne.n	404e22 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  404e2c:	9b01      	ldr	r3, [sp, #4]
  404e2e:	7023      	strb	r3, [r4, #0]
}
  404e30:	e7bf      	b.n	404db2 <usart_serial_getchar+0x36>
  404e32:	bf00      	nop
  404e34:	400e0800 	.word	0x400e0800
  404e38:	400e0a00 	.word	0x400e0a00
  404e3c:	400e1a00 	.word	0x400e1a00
  404e40:	400e1c00 	.word	0x400e1c00
  404e44:	40024000 	.word	0x40024000
  404e48:	40028000 	.word	0x40028000
  404e4c:	4002c000 	.word	0x4002c000
  404e50:	00404821 	.word	0x00404821
  404e54:	0040492f 	.word	0x0040492f

00404e58 <usart_serial_putchar>:
{
  404e58:	b570      	push	{r4, r5, r6, lr}
  404e5a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  404e5c:	4b2a      	ldr	r3, [pc, #168]	; (404f08 <usart_serial_putchar+0xb0>)
  404e5e:	4298      	cmp	r0, r3
  404e60:	d013      	beq.n	404e8a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  404e62:	4b2a      	ldr	r3, [pc, #168]	; (404f0c <usart_serial_putchar+0xb4>)
  404e64:	4298      	cmp	r0, r3
  404e66:	d019      	beq.n	404e9c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  404e68:	4b29      	ldr	r3, [pc, #164]	; (404f10 <usart_serial_putchar+0xb8>)
  404e6a:	4298      	cmp	r0, r3
  404e6c:	d01f      	beq.n	404eae <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  404e6e:	4b29      	ldr	r3, [pc, #164]	; (404f14 <usart_serial_putchar+0xbc>)
  404e70:	4298      	cmp	r0, r3
  404e72:	d025      	beq.n	404ec0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  404e74:	4b28      	ldr	r3, [pc, #160]	; (404f18 <usart_serial_putchar+0xc0>)
  404e76:	4298      	cmp	r0, r3
  404e78:	d02b      	beq.n	404ed2 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  404e7a:	4b28      	ldr	r3, [pc, #160]	; (404f1c <usart_serial_putchar+0xc4>)
  404e7c:	4298      	cmp	r0, r3
  404e7e:	d031      	beq.n	404ee4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  404e80:	4b27      	ldr	r3, [pc, #156]	; (404f20 <usart_serial_putchar+0xc8>)
  404e82:	4298      	cmp	r0, r3
  404e84:	d037      	beq.n	404ef6 <usart_serial_putchar+0x9e>
	return 0;
  404e86:	2000      	movs	r0, #0
}
  404e88:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404e8a:	461e      	mov	r6, r3
  404e8c:	4d25      	ldr	r5, [pc, #148]	; (404f24 <usart_serial_putchar+0xcc>)
  404e8e:	4621      	mov	r1, r4
  404e90:	4630      	mov	r0, r6
  404e92:	47a8      	blx	r5
  404e94:	2800      	cmp	r0, #0
  404e96:	d1fa      	bne.n	404e8e <usart_serial_putchar+0x36>
		return 1;
  404e98:	2001      	movs	r0, #1
  404e9a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404e9c:	461e      	mov	r6, r3
  404e9e:	4d21      	ldr	r5, [pc, #132]	; (404f24 <usart_serial_putchar+0xcc>)
  404ea0:	4621      	mov	r1, r4
  404ea2:	4630      	mov	r0, r6
  404ea4:	47a8      	blx	r5
  404ea6:	2800      	cmp	r0, #0
  404ea8:	d1fa      	bne.n	404ea0 <usart_serial_putchar+0x48>
		return 1;
  404eaa:	2001      	movs	r0, #1
  404eac:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404eae:	461e      	mov	r6, r3
  404eb0:	4d1c      	ldr	r5, [pc, #112]	; (404f24 <usart_serial_putchar+0xcc>)
  404eb2:	4621      	mov	r1, r4
  404eb4:	4630      	mov	r0, r6
  404eb6:	47a8      	blx	r5
  404eb8:	2800      	cmp	r0, #0
  404eba:	d1fa      	bne.n	404eb2 <usart_serial_putchar+0x5a>
		return 1;
  404ebc:	2001      	movs	r0, #1
  404ebe:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  404ec0:	461e      	mov	r6, r3
  404ec2:	4d18      	ldr	r5, [pc, #96]	; (404f24 <usart_serial_putchar+0xcc>)
  404ec4:	4621      	mov	r1, r4
  404ec6:	4630      	mov	r0, r6
  404ec8:	47a8      	blx	r5
  404eca:	2800      	cmp	r0, #0
  404ecc:	d1fa      	bne.n	404ec4 <usart_serial_putchar+0x6c>
		return 1;
  404ece:	2001      	movs	r0, #1
  404ed0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404ed2:	461e      	mov	r6, r3
  404ed4:	4d14      	ldr	r5, [pc, #80]	; (404f28 <usart_serial_putchar+0xd0>)
  404ed6:	4621      	mov	r1, r4
  404ed8:	4630      	mov	r0, r6
  404eda:	47a8      	blx	r5
  404edc:	2800      	cmp	r0, #0
  404ede:	d1fa      	bne.n	404ed6 <usart_serial_putchar+0x7e>
		return 1;
  404ee0:	2001      	movs	r0, #1
  404ee2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404ee4:	461e      	mov	r6, r3
  404ee6:	4d10      	ldr	r5, [pc, #64]	; (404f28 <usart_serial_putchar+0xd0>)
  404ee8:	4621      	mov	r1, r4
  404eea:	4630      	mov	r0, r6
  404eec:	47a8      	blx	r5
  404eee:	2800      	cmp	r0, #0
  404ef0:	d1fa      	bne.n	404ee8 <usart_serial_putchar+0x90>
		return 1;
  404ef2:	2001      	movs	r0, #1
  404ef4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404ef6:	461e      	mov	r6, r3
  404ef8:	4d0b      	ldr	r5, [pc, #44]	; (404f28 <usart_serial_putchar+0xd0>)
  404efa:	4621      	mov	r1, r4
  404efc:	4630      	mov	r0, r6
  404efe:	47a8      	blx	r5
  404f00:	2800      	cmp	r0, #0
  404f02:	d1fa      	bne.n	404efa <usart_serial_putchar+0xa2>
		return 1;
  404f04:	2001      	movs	r0, #1
  404f06:	bd70      	pop	{r4, r5, r6, pc}
  404f08:	400e0800 	.word	0x400e0800
  404f0c:	400e0a00 	.word	0x400e0a00
  404f10:	400e1a00 	.word	0x400e1a00
  404f14:	400e1c00 	.word	0x400e1c00
  404f18:	40024000 	.word	0x40024000
  404f1c:	40028000 	.word	0x40028000
  404f20:	4002c000 	.word	0x4002c000
  404f24:	0040480f 	.word	0x0040480f
  404f28:	00404919 	.word	0x00404919

00404f2c <main>:
 * Initialize system, UART console, network then test function of TCP server.
 *
 * \return program return value.
 */
int main(void)
{
  404f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f30:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
	int8_t ret;
	struct sockaddr_in addr;	
	

	/* Initialize the board. */
	sysclk_init();
  404f34:	4b5f      	ldr	r3, [pc, #380]	; (4050b4 <main+0x188>)
  404f36:	4798      	blx	r3
	board_init();
  404f38:	4b5f      	ldr	r3, [pc, #380]	; (4050b8 <main+0x18c>)
  404f3a:	4798      	blx	r3
  404f3c:	200e      	movs	r0, #14
  404f3e:	4e5f      	ldr	r6, [pc, #380]	; (4050bc <main+0x190>)
  404f40:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404f42:	4d5f      	ldr	r5, [pc, #380]	; (4050c0 <main+0x194>)
  404f44:	4b5f      	ldr	r3, [pc, #380]	; (4050c4 <main+0x198>)
  404f46:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404f48:	4a5f      	ldr	r2, [pc, #380]	; (4050c8 <main+0x19c>)
  404f4a:	4b60      	ldr	r3, [pc, #384]	; (4050cc <main+0x1a0>)
  404f4c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404f4e:	4a60      	ldr	r2, [pc, #384]	; (4050d0 <main+0x1a4>)
  404f50:	4b60      	ldr	r3, [pc, #384]	; (4050d4 <main+0x1a8>)
  404f52:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  404f54:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  404f58:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  404f5a:	23c0      	movs	r3, #192	; 0xc0
  404f5c:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  404f5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404f62:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  404f64:	2400      	movs	r4, #0
  404f66:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404f68:	9406      	str	r4, [sp, #24]
  404f6a:	200e      	movs	r0, #14
  404f6c:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  404f6e:	4a5a      	ldr	r2, [pc, #360]	; (4050d8 <main+0x1ac>)
  404f70:	a902      	add	r1, sp, #8
  404f72:	4628      	mov	r0, r5
  404f74:	4b59      	ldr	r3, [pc, #356]	; (4050dc <main+0x1b0>)
  404f76:	4798      	blx	r3
		usart_enable_tx(p_usart);
  404f78:	4628      	mov	r0, r5
  404f7a:	4b59      	ldr	r3, [pc, #356]	; (4050e0 <main+0x1b4>)
  404f7c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404f7e:	4628      	mov	r0, r5
  404f80:	4b58      	ldr	r3, [pc, #352]	; (4050e4 <main+0x1b8>)
  404f82:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404f84:	4e58      	ldr	r6, [pc, #352]	; (4050e8 <main+0x1bc>)
  404f86:	6833      	ldr	r3, [r6, #0]
  404f88:	4621      	mov	r1, r4
  404f8a:	6898      	ldr	r0, [r3, #8]
  404f8c:	4d57      	ldr	r5, [pc, #348]	; (4050ec <main+0x1c0>)
  404f8e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404f90:	6833      	ldr	r3, [r6, #0]
  404f92:	4621      	mov	r1, r4
  404f94:	6858      	ldr	r0, [r3, #4]
  404f96:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  404f98:	4855      	ldr	r0, [pc, #340]	; (4050f0 <main+0x1c4>)
  404f9a:	4b56      	ldr	r3, [pc, #344]	; (4050f4 <main+0x1c8>)
  404f9c:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  404f9e:	4b56      	ldr	r3, [pc, #344]	; (4050f8 <main+0x1cc>)
  404fa0:	4798      	blx	r3

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  404fa2:	2302      	movs	r3, #2
  404fa4:	f8ad 3250 	strh.w	r3, [sp, #592]	; 0x250
	addr.sin_port = _htons(MAIN_SERVER_PORT);
  404fa8:	f249 131f 	movw	r3, #37151	; 0x911f
  404fac:	f8ad 3252 	strh.w	r3, [sp, #594]	; 0x252
	addr.sin_addr.s_addr = MAIN_SERVER_IP;
  404fb0:	4b52      	ldr	r3, [pc, #328]	; (4050fc <main+0x1d0>)
  404fb2:	9395      	str	r3, [sp, #596]	; 0x254

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  404fb4:	9499      	str	r4, [sp, #612]	; 0x264
  404fb6:	949a      	str	r4, [sp, #616]	; 0x268
  404fb8:	949b      	str	r4, [sp, #620]	; 0x26c
  404fba:	949c      	str	r4, [sp, #624]	; 0x270
  404fbc:	949d      	str	r4, [sp, #628]	; 0x274

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  404fbe:	4b50      	ldr	r3, [pc, #320]	; (405100 <main+0x1d4>)
  404fc0:	9398      	str	r3, [sp, #608]	; 0x260
	ret = m2m_wifi_init(&param);
  404fc2:	a898      	add	r0, sp, #608	; 0x260
  404fc4:	4b4f      	ldr	r3, [pc, #316]	; (405104 <main+0x1d8>)
  404fc6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404fc8:	b120      	cbz	r0, 404fd4 <main+0xa8>
  404fca:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  404fcc:	484e      	ldr	r0, [pc, #312]	; (405108 <main+0x1dc>)
  404fce:	4b49      	ldr	r3, [pc, #292]	; (4050f4 <main+0x1c8>)
  404fd0:	4798      	blx	r3
  404fd2:	e7fe      	b.n	404fd2 <main+0xa6>
		while (1) {
		}
	}

	/* Initialize socket module */
	socketInit();
  404fd4:	4b4d      	ldr	r3, [pc, #308]	; (40510c <main+0x1e0>)
  404fd6:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
  404fd8:	2100      	movs	r1, #0
  404fda:	484d      	ldr	r0, [pc, #308]	; (405110 <main+0x1e4>)
  404fdc:	4b4d      	ldr	r3, [pc, #308]	; (405114 <main+0x1e8>)
  404fde:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  404fe0:	23ff      	movs	r3, #255	; 0xff
  404fe2:	9300      	str	r3, [sp, #0]
  404fe4:	4b4c      	ldr	r3, [pc, #304]	; (405118 <main+0x1ec>)
  404fe6:	2202      	movs	r2, #2
  404fe8:	210a      	movs	r1, #10
  404fea:	484c      	ldr	r0, [pc, #304]	; (40511c <main+0x1f0>)
  404fec:	4c4c      	ldr	r4, [pc, #304]	; (405120 <main+0x1f4>)
  404fee:	47a0      	blx	r4
  
	
	/** SDCARD */
	irq_initialize_vectors();
	cpu_irq_enable();
  404ff0:	2201      	movs	r2, #1
  404ff2:	4b4c      	ldr	r3, [pc, #304]	; (405124 <main+0x1f8>)
  404ff4:	701a      	strb	r2, [r3, #0]
  404ff6:	f3bf 8f5f 	dmb	sy
  404ffa:	b662      	cpsie	i
	FRESULT res;
	FATFS fs;
	FIL file_object;
	
	/* Initialize SD MMC stack */
	sd_mmc_init();
  404ffc:	4b4a      	ldr	r3, [pc, #296]	; (405128 <main+0x1fc>)
  404ffe:	4798      	blx	r3
	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  405000:	484a      	ldr	r0, [pc, #296]	; (40512c <main+0x200>)
  405002:	4c3c      	ldr	r4, [pc, #240]	; (4050f4 <main+0x1c8>)
  405004:	47a0      	blx	r4
	
	printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  405006:	484a      	ldr	r0, [pc, #296]	; (405130 <main+0x204>)
  405008:	47a0      	blx	r4
	/* Wait card present and ready */
	do {
			status = sd_mmc_test_unit_ready(0);
  40500a:	4e4a      	ldr	r6, [pc, #296]	; (405134 <main+0x208>)
			if (CTRL_FAIL == status) {
				printf("Card install FAIL\n\r");
  40500c:	4d4a      	ldr	r5, [pc, #296]	; (405138 <main+0x20c>)
  40500e:	e00a      	b.n	405026 <main+0xfa>
  405010:	4628      	mov	r0, r5
  405012:	47a0      	blx	r4
				printf("Please unplug and re-plug the card.\n\r");
  405014:	4849      	ldr	r0, [pc, #292]	; (40513c <main+0x210>)
  405016:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  405018:	f04f 0800 	mov.w	r8, #0
  40501c:	4f48      	ldr	r7, [pc, #288]	; (405140 <main+0x214>)
  40501e:	4640      	mov	r0, r8
  405020:	47b8      	blx	r7
  405022:	2802      	cmp	r0, #2
  405024:	d1fb      	bne.n	40501e <main+0xf2>
			status = sd_mmc_test_unit_ready(0);
  405026:	2000      	movs	r0, #0
  405028:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
  40502a:	2801      	cmp	r0, #1
  40502c:	d0f0      	beq.n	405010 <main+0xe4>
				}
			}
	} while (CTRL_GOOD != status);	
  40502e:	2800      	cmp	r0, #0
  405030:	d1f9      	bne.n	405026 <main+0xfa>
	
	printf("Mount disk (f_mount)...\r\n");
  405032:	4844      	ldr	r0, [pc, #272]	; (405144 <main+0x218>)
  405034:	4b2f      	ldr	r3, [pc, #188]	; (4050f4 <main+0x1c8>)
  405036:	4798      	blx	r3
	
	memset(&fs, 0, sizeof(FATFS));
  405038:	f44f 720c 	mov.w	r2, #560	; 0x230
  40503c:	2100      	movs	r1, #0
  40503e:	a808      	add	r0, sp, #32
  405040:	4b41      	ldr	r3, [pc, #260]	; (405148 <main+0x21c>)
  405042:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  405044:	a908      	add	r1, sp, #32
  405046:	2000      	movs	r0, #0
  405048:	4b40      	ldr	r3, [pc, #256]	; (40514c <main+0x220>)
  40504a:	4798      	blx	r3
	if (FR_INVALID_DRIVE == res) {
  40504c:	280b      	cmp	r0, #11
  40504e:	d006      	beq.n	40505e <main+0x132>
		printf("[FAIL] res %d\r\n", res);
		//goto main_end_of_test;
	}
	printf("[OK]\r\n");
  405050:	483f      	ldr	r0, [pc, #252]	; (405150 <main+0x224>)
  405052:	4b28      	ldr	r3, [pc, #160]	; (4050f4 <main+0x1c8>)
  405054:	4798      	blx	r3

	
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  405056:	4d3f      	ldr	r5, [pc, #252]	; (405154 <main+0x228>)

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  405058:	4c3f      	ldr	r4, [pc, #252]	; (405158 <main+0x22c>)
				if (tcp_client_socket < 0) {
  40505a:	4e40      	ldr	r6, [pc, #256]	; (40515c <main+0x230>)
  40505c:	e00b      	b.n	405076 <main+0x14a>
		printf("[FAIL] res %d\r\n", res);
  40505e:	210b      	movs	r1, #11
  405060:	483f      	ldr	r0, [pc, #252]	; (405160 <main+0x234>)
  405062:	4b24      	ldr	r3, [pc, #144]	; (4050f4 <main+0x1c8>)
  405064:	4798      	blx	r3
  405066:	e7f3      	b.n	405050 <main+0x124>
  				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    				printf("main: failed to create TCP client socket error!\r\n");
  405068:	483e      	ldr	r0, [pc, #248]	; (405164 <main+0x238>)
  40506a:	4b22      	ldr	r3, [pc, #136]	; (4050f4 <main+0x1c8>)
  40506c:	4798      	blx	r3
    				continue;
  40506e:	e002      	b.n	405076 <main+0x14a>
          if (connect(tcp_client_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR ) {
            printf("main: failed to connect socket error!\r\n");
            close(tcp_client_socket);
            continue;
          }else{
            printf("Conectado ! \n");
  405070:	483d      	ldr	r0, [pc, #244]	; (405168 <main+0x23c>)
  405072:	4b20      	ldr	r3, [pc, #128]	; (4050f4 <main+0x1c8>)
  405074:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
  405076:	2000      	movs	r0, #0
  405078:	47a8      	blx	r5
		if (wifi_connected == M2M_WIFI_CONNECTED) {
  40507a:	7823      	ldrb	r3, [r4, #0]
  40507c:	2b01      	cmp	r3, #1
  40507e:	d1fa      	bne.n	405076 <main+0x14a>
				if (tcp_client_socket < 0) {
  405080:	f996 3000 	ldrsb.w	r3, [r6]
  405084:	2b00      	cmp	r3, #0
  405086:	daf6      	bge.n	405076 <main+0x14a>
  				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  405088:	2200      	movs	r2, #0
  40508a:	2101      	movs	r1, #1
  40508c:	2002      	movs	r0, #2
  40508e:	4b37      	ldr	r3, [pc, #220]	; (40516c <main+0x240>)
  405090:	4798      	blx	r3
  405092:	7030      	strb	r0, [r6, #0]
  405094:	2800      	cmp	r0, #0
  405096:	dbe7      	blt.n	405068 <main+0x13c>
          if (connect(tcp_client_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR ) {
  405098:	2210      	movs	r2, #16
  40509a:	a994      	add	r1, sp, #592	; 0x250
  40509c:	4b34      	ldr	r3, [pc, #208]	; (405170 <main+0x244>)
  40509e:	4798      	blx	r3
  4050a0:	2800      	cmp	r0, #0
  4050a2:	d0e5      	beq.n	405070 <main+0x144>
            printf("main: failed to connect socket error!\r\n");
  4050a4:	4833      	ldr	r0, [pc, #204]	; (405174 <main+0x248>)
  4050a6:	4b13      	ldr	r3, [pc, #76]	; (4050f4 <main+0x1c8>)
  4050a8:	4798      	blx	r3
            close(tcp_client_socket);
  4050aa:	f996 0000 	ldrsb.w	r0, [r6]
  4050ae:	4b32      	ldr	r3, [pc, #200]	; (405178 <main+0x24c>)
  4050b0:	4798      	blx	r3
            continue;
  4050b2:	e7e0      	b.n	405076 <main+0x14a>
  4050b4:	00403c6d 	.word	0x00403c6d
  4050b8:	00403d69 	.word	0x00403d69
  4050bc:	00404669 	.word	0x00404669
  4050c0:	40028000 	.word	0x40028000
  4050c4:	20401754 	.word	0x20401754
  4050c8:	00404e59 	.word	0x00404e59
  4050cc:	20401750 	.word	0x20401750
  4050d0:	00404d7d 	.word	0x00404d7d
  4050d4:	2040174c 	.word	0x2040174c
  4050d8:	08f0d180 	.word	0x08f0d180
  4050dc:	004048b9 	.word	0x004048b9
  4050e0:	0040490d 	.word	0x0040490d
  4050e4:	00404913 	.word	0x00404913
  4050e8:	20400044 	.word	0x20400044
  4050ec:	00405291 	.word	0x00405291
  4050f0:	0040c0bc 	.word	0x0040c0bc
  4050f4:	004051cd 	.word	0x004051cd
  4050f8:	00401215 	.word	0x00401215
  4050fc:	6801a8c0 	.word	0x6801a8c0
  405100:	00404cf9 	.word	0x00404cf9
  405104:	00402055 	.word	0x00402055
  405108:	0040c11c 	.word	0x0040c11c
  40510c:	00403805 	.word	0x00403805
  405110:	00404be1 	.word	0x00404be1
  405114:	00403849 	.word	0x00403849
  405118:	0040c3c8 	.word	0x0040c3c8
  40511c:	0040c3d4 	.word	0x0040c3d4
  405120:	004023ad 	.word	0x004023ad
  405124:	20400038 	.word	0x20400038
  405128:	0040035d 	.word	0x0040035d
  40512c:	0040c144 	.word	0x0040c144
  405130:	0040c174 	.word	0x0040c174
  405134:	00400c31 	.word	0x00400c31
  405138:	0040c1a4 	.word	0x0040c1a4
  40513c:	0040c1b8 	.word	0x0040c1b8
  405140:	00400389 	.word	0x00400389
  405144:	0040c1e0 	.word	0x0040c1e0
  405148:	004051f5 	.word	0x004051f5
  40514c:	00401175 	.word	0x00401175
  405150:	0040c20c 	.word	0x0040c20c
  405154:	00402151 	.word	0x00402151
  405158:	20401654 	.word	0x20401654
  40515c:	20400040 	.word	0x20400040
  405160:	0040c1fc 	.word	0x0040c1fc
  405164:	0040c214 	.word	0x0040c214
  405168:	0040c270 	.word	0x0040c270
  40516c:	0040385d 	.word	0x0040385d
  405170:	0040393d 	.word	0x0040393d
  405174:	0040c248 	.word	0x0040c248
  405178:	00403b09 	.word	0x00403b09

0040517c <__libc_init_array>:
  40517c:	b570      	push	{r4, r5, r6, lr}
  40517e:	4e0f      	ldr	r6, [pc, #60]	; (4051bc <__libc_init_array+0x40>)
  405180:	4d0f      	ldr	r5, [pc, #60]	; (4051c0 <__libc_init_array+0x44>)
  405182:	1b76      	subs	r6, r6, r5
  405184:	10b6      	asrs	r6, r6, #2
  405186:	bf18      	it	ne
  405188:	2400      	movne	r4, #0
  40518a:	d005      	beq.n	405198 <__libc_init_array+0x1c>
  40518c:	3401      	adds	r4, #1
  40518e:	f855 3b04 	ldr.w	r3, [r5], #4
  405192:	4798      	blx	r3
  405194:	42a6      	cmp	r6, r4
  405196:	d1f9      	bne.n	40518c <__libc_init_array+0x10>
  405198:	4e0a      	ldr	r6, [pc, #40]	; (4051c4 <__libc_init_array+0x48>)
  40519a:	4d0b      	ldr	r5, [pc, #44]	; (4051c8 <__libc_init_array+0x4c>)
  40519c:	1b76      	subs	r6, r6, r5
  40519e:	f007 fa8f 	bl	40c6c0 <_init>
  4051a2:	10b6      	asrs	r6, r6, #2
  4051a4:	bf18      	it	ne
  4051a6:	2400      	movne	r4, #0
  4051a8:	d006      	beq.n	4051b8 <__libc_init_array+0x3c>
  4051aa:	3401      	adds	r4, #1
  4051ac:	f855 3b04 	ldr.w	r3, [r5], #4
  4051b0:	4798      	blx	r3
  4051b2:	42a6      	cmp	r6, r4
  4051b4:	d1f9      	bne.n	4051aa <__libc_init_array+0x2e>
  4051b6:	bd70      	pop	{r4, r5, r6, pc}
  4051b8:	bd70      	pop	{r4, r5, r6, pc}
  4051ba:	bf00      	nop
  4051bc:	0040c6cc 	.word	0x0040c6cc
  4051c0:	0040c6cc 	.word	0x0040c6cc
  4051c4:	0040c6d4 	.word	0x0040c6d4
  4051c8:	0040c6cc 	.word	0x0040c6cc

004051cc <iprintf>:
  4051cc:	b40f      	push	{r0, r1, r2, r3}
  4051ce:	b500      	push	{lr}
  4051d0:	4907      	ldr	r1, [pc, #28]	; (4051f0 <iprintf+0x24>)
  4051d2:	b083      	sub	sp, #12
  4051d4:	ab04      	add	r3, sp, #16
  4051d6:	6808      	ldr	r0, [r1, #0]
  4051d8:	f853 2b04 	ldr.w	r2, [r3], #4
  4051dc:	6881      	ldr	r1, [r0, #8]
  4051de:	9301      	str	r3, [sp, #4]
  4051e0:	f001 fc02 	bl	4069e8 <_vfiprintf_r>
  4051e4:	b003      	add	sp, #12
  4051e6:	f85d eb04 	ldr.w	lr, [sp], #4
  4051ea:	b004      	add	sp, #16
  4051ec:	4770      	bx	lr
  4051ee:	bf00      	nop
  4051f0:	20400044 	.word	0x20400044

004051f4 <memset>:
  4051f4:	b470      	push	{r4, r5, r6}
  4051f6:	0786      	lsls	r6, r0, #30
  4051f8:	d046      	beq.n	405288 <memset+0x94>
  4051fa:	1e54      	subs	r4, r2, #1
  4051fc:	2a00      	cmp	r2, #0
  4051fe:	d041      	beq.n	405284 <memset+0x90>
  405200:	b2ca      	uxtb	r2, r1
  405202:	4603      	mov	r3, r0
  405204:	e002      	b.n	40520c <memset+0x18>
  405206:	f114 34ff 	adds.w	r4, r4, #4294967295
  40520a:	d33b      	bcc.n	405284 <memset+0x90>
  40520c:	f803 2b01 	strb.w	r2, [r3], #1
  405210:	079d      	lsls	r5, r3, #30
  405212:	d1f8      	bne.n	405206 <memset+0x12>
  405214:	2c03      	cmp	r4, #3
  405216:	d92e      	bls.n	405276 <memset+0x82>
  405218:	b2cd      	uxtb	r5, r1
  40521a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40521e:	2c0f      	cmp	r4, #15
  405220:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405224:	d919      	bls.n	40525a <memset+0x66>
  405226:	f103 0210 	add.w	r2, r3, #16
  40522a:	4626      	mov	r6, r4
  40522c:	3e10      	subs	r6, #16
  40522e:	2e0f      	cmp	r6, #15
  405230:	f842 5c10 	str.w	r5, [r2, #-16]
  405234:	f842 5c0c 	str.w	r5, [r2, #-12]
  405238:	f842 5c08 	str.w	r5, [r2, #-8]
  40523c:	f842 5c04 	str.w	r5, [r2, #-4]
  405240:	f102 0210 	add.w	r2, r2, #16
  405244:	d8f2      	bhi.n	40522c <memset+0x38>
  405246:	f1a4 0210 	sub.w	r2, r4, #16
  40524a:	f022 020f 	bic.w	r2, r2, #15
  40524e:	f004 040f 	and.w	r4, r4, #15
  405252:	3210      	adds	r2, #16
  405254:	2c03      	cmp	r4, #3
  405256:	4413      	add	r3, r2
  405258:	d90d      	bls.n	405276 <memset+0x82>
  40525a:	461e      	mov	r6, r3
  40525c:	4622      	mov	r2, r4
  40525e:	3a04      	subs	r2, #4
  405260:	2a03      	cmp	r2, #3
  405262:	f846 5b04 	str.w	r5, [r6], #4
  405266:	d8fa      	bhi.n	40525e <memset+0x6a>
  405268:	1f22      	subs	r2, r4, #4
  40526a:	f022 0203 	bic.w	r2, r2, #3
  40526e:	3204      	adds	r2, #4
  405270:	4413      	add	r3, r2
  405272:	f004 0403 	and.w	r4, r4, #3
  405276:	b12c      	cbz	r4, 405284 <memset+0x90>
  405278:	b2c9      	uxtb	r1, r1
  40527a:	441c      	add	r4, r3
  40527c:	f803 1b01 	strb.w	r1, [r3], #1
  405280:	429c      	cmp	r4, r3
  405282:	d1fb      	bne.n	40527c <memset+0x88>
  405284:	bc70      	pop	{r4, r5, r6}
  405286:	4770      	bx	lr
  405288:	4614      	mov	r4, r2
  40528a:	4603      	mov	r3, r0
  40528c:	e7c2      	b.n	405214 <memset+0x20>
  40528e:	bf00      	nop

00405290 <setbuf>:
  405290:	2900      	cmp	r1, #0
  405292:	bf0c      	ite	eq
  405294:	2202      	moveq	r2, #2
  405296:	2200      	movne	r2, #0
  405298:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40529c:	f000 b800 	b.w	4052a0 <setvbuf>

004052a0 <setvbuf>:
  4052a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4052a4:	4c50      	ldr	r4, [pc, #320]	; (4053e8 <setvbuf+0x148>)
  4052a6:	6825      	ldr	r5, [r4, #0]
  4052a8:	b083      	sub	sp, #12
  4052aa:	4604      	mov	r4, r0
  4052ac:	460f      	mov	r7, r1
  4052ae:	4690      	mov	r8, r2
  4052b0:	461e      	mov	r6, r3
  4052b2:	b115      	cbz	r5, 4052ba <setvbuf+0x1a>
  4052b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4052b6:	2b00      	cmp	r3, #0
  4052b8:	d077      	beq.n	4053aa <setvbuf+0x10a>
  4052ba:	f1b8 0f02 	cmp.w	r8, #2
  4052be:	d004      	beq.n	4052ca <setvbuf+0x2a>
  4052c0:	f1b8 0f01 	cmp.w	r8, #1
  4052c4:	d87d      	bhi.n	4053c2 <setvbuf+0x122>
  4052c6:	2e00      	cmp	r6, #0
  4052c8:	db7b      	blt.n	4053c2 <setvbuf+0x122>
  4052ca:	4621      	mov	r1, r4
  4052cc:	4628      	mov	r0, r5
  4052ce:	f003 fa95 	bl	4087fc <_fflush_r>
  4052d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4052d4:	b141      	cbz	r1, 4052e8 <setvbuf+0x48>
  4052d6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4052da:	4299      	cmp	r1, r3
  4052dc:	d002      	beq.n	4052e4 <setvbuf+0x44>
  4052de:	4628      	mov	r0, r5
  4052e0:	f003 fbf6 	bl	408ad0 <_free_r>
  4052e4:	2300      	movs	r3, #0
  4052e6:	6323      	str	r3, [r4, #48]	; 0x30
  4052e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052ec:	2200      	movs	r2, #0
  4052ee:	61a2      	str	r2, [r4, #24]
  4052f0:	6062      	str	r2, [r4, #4]
  4052f2:	061a      	lsls	r2, r3, #24
  4052f4:	d452      	bmi.n	40539c <setvbuf+0xfc>
  4052f6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4052fa:	f023 0303 	bic.w	r3, r3, #3
  4052fe:	f1b8 0f02 	cmp.w	r8, #2
  405302:	81a3      	strh	r3, [r4, #12]
  405304:	d037      	beq.n	405376 <setvbuf+0xd6>
  405306:	ab01      	add	r3, sp, #4
  405308:	466a      	mov	r2, sp
  40530a:	4621      	mov	r1, r4
  40530c:	4628      	mov	r0, r5
  40530e:	f003 fe83 	bl	409018 <__swhatbuf_r>
  405312:	89a3      	ldrh	r3, [r4, #12]
  405314:	4318      	orrs	r0, r3
  405316:	81a0      	strh	r0, [r4, #12]
  405318:	b316      	cbz	r6, 405360 <setvbuf+0xc0>
  40531a:	b317      	cbz	r7, 405362 <setvbuf+0xc2>
  40531c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40531e:	2b00      	cmp	r3, #0
  405320:	d04b      	beq.n	4053ba <setvbuf+0x11a>
  405322:	9b00      	ldr	r3, [sp, #0]
  405324:	6027      	str	r7, [r4, #0]
  405326:	429e      	cmp	r6, r3
  405328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40532c:	6127      	str	r7, [r4, #16]
  40532e:	bf1c      	itt	ne
  405330:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  405334:	81a3      	strhne	r3, [r4, #12]
  405336:	f1b8 0f01 	cmp.w	r8, #1
  40533a:	bf04      	itt	eq
  40533c:	f043 0301 	orreq.w	r3, r3, #1
  405340:	81a3      	strheq	r3, [r4, #12]
  405342:	b29b      	uxth	r3, r3
  405344:	f013 0008 	ands.w	r0, r3, #8
  405348:	6166      	str	r6, [r4, #20]
  40534a:	d023      	beq.n	405394 <setvbuf+0xf4>
  40534c:	f013 0001 	ands.w	r0, r3, #1
  405350:	d02f      	beq.n	4053b2 <setvbuf+0x112>
  405352:	2000      	movs	r0, #0
  405354:	4276      	negs	r6, r6
  405356:	61a6      	str	r6, [r4, #24]
  405358:	60a0      	str	r0, [r4, #8]
  40535a:	b003      	add	sp, #12
  40535c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405360:	9e00      	ldr	r6, [sp, #0]
  405362:	4630      	mov	r0, r6
  405364:	f003 feca 	bl	4090fc <malloc>
  405368:	4607      	mov	r7, r0
  40536a:	b368      	cbz	r0, 4053c8 <setvbuf+0x128>
  40536c:	89a3      	ldrh	r3, [r4, #12]
  40536e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405372:	81a3      	strh	r3, [r4, #12]
  405374:	e7d2      	b.n	40531c <setvbuf+0x7c>
  405376:	2000      	movs	r0, #0
  405378:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40537c:	f043 0302 	orr.w	r3, r3, #2
  405380:	2500      	movs	r5, #0
  405382:	2101      	movs	r1, #1
  405384:	81a3      	strh	r3, [r4, #12]
  405386:	60a5      	str	r5, [r4, #8]
  405388:	6022      	str	r2, [r4, #0]
  40538a:	6122      	str	r2, [r4, #16]
  40538c:	6161      	str	r1, [r4, #20]
  40538e:	b003      	add	sp, #12
  405390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405394:	60a0      	str	r0, [r4, #8]
  405396:	b003      	add	sp, #12
  405398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40539c:	6921      	ldr	r1, [r4, #16]
  40539e:	4628      	mov	r0, r5
  4053a0:	f003 fb96 	bl	408ad0 <_free_r>
  4053a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053a8:	e7a5      	b.n	4052f6 <setvbuf+0x56>
  4053aa:	4628      	mov	r0, r5
  4053ac:	f003 faba 	bl	408924 <__sinit>
  4053b0:	e783      	b.n	4052ba <setvbuf+0x1a>
  4053b2:	60a6      	str	r6, [r4, #8]
  4053b4:	b003      	add	sp, #12
  4053b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4053ba:	4628      	mov	r0, r5
  4053bc:	f003 fab2 	bl	408924 <__sinit>
  4053c0:	e7af      	b.n	405322 <setvbuf+0x82>
  4053c2:	f04f 30ff 	mov.w	r0, #4294967295
  4053c6:	e7e2      	b.n	40538e <setvbuf+0xee>
  4053c8:	f8dd 9000 	ldr.w	r9, [sp]
  4053cc:	45b1      	cmp	r9, r6
  4053ce:	d006      	beq.n	4053de <setvbuf+0x13e>
  4053d0:	4648      	mov	r0, r9
  4053d2:	f003 fe93 	bl	4090fc <malloc>
  4053d6:	4607      	mov	r7, r0
  4053d8:	b108      	cbz	r0, 4053de <setvbuf+0x13e>
  4053da:	464e      	mov	r6, r9
  4053dc:	e7c6      	b.n	40536c <setvbuf+0xcc>
  4053de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053e2:	f04f 30ff 	mov.w	r0, #4294967295
  4053e6:	e7c7      	b.n	405378 <setvbuf+0xd8>
  4053e8:	20400044 	.word	0x20400044

004053ec <sprintf>:
  4053ec:	b40e      	push	{r1, r2, r3}
  4053ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  4053f0:	b09c      	sub	sp, #112	; 0x70
  4053f2:	ab21      	add	r3, sp, #132	; 0x84
  4053f4:	490f      	ldr	r1, [pc, #60]	; (405434 <sprintf+0x48>)
  4053f6:	f853 2b04 	ldr.w	r2, [r3], #4
  4053fa:	9301      	str	r3, [sp, #4]
  4053fc:	4605      	mov	r5, r0
  4053fe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  405402:	6808      	ldr	r0, [r1, #0]
  405404:	9502      	str	r5, [sp, #8]
  405406:	f44f 7702 	mov.w	r7, #520	; 0x208
  40540a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40540e:	a902      	add	r1, sp, #8
  405410:	9506      	str	r5, [sp, #24]
  405412:	f8ad 7014 	strh.w	r7, [sp, #20]
  405416:	9404      	str	r4, [sp, #16]
  405418:	9407      	str	r4, [sp, #28]
  40541a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40541e:	f000 f87d 	bl	40551c <_svfprintf_r>
  405422:	9b02      	ldr	r3, [sp, #8]
  405424:	2200      	movs	r2, #0
  405426:	701a      	strb	r2, [r3, #0]
  405428:	b01c      	add	sp, #112	; 0x70
  40542a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40542e:	b003      	add	sp, #12
  405430:	4770      	bx	lr
  405432:	bf00      	nop
  405434:	20400044 	.word	0x20400044
	...

00405440 <strlen>:
  405440:	f890 f000 	pld	[r0]
  405444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405448:	f020 0107 	bic.w	r1, r0, #7
  40544c:	f06f 0c00 	mvn.w	ip, #0
  405450:	f010 0407 	ands.w	r4, r0, #7
  405454:	f891 f020 	pld	[r1, #32]
  405458:	f040 8049 	bne.w	4054ee <strlen+0xae>
  40545c:	f04f 0400 	mov.w	r4, #0
  405460:	f06f 0007 	mvn.w	r0, #7
  405464:	e9d1 2300 	ldrd	r2, r3, [r1]
  405468:	f891 f040 	pld	[r1, #64]	; 0x40
  40546c:	f100 0008 	add.w	r0, r0, #8
  405470:	fa82 f24c 	uadd8	r2, r2, ip
  405474:	faa4 f28c 	sel	r2, r4, ip
  405478:	fa83 f34c 	uadd8	r3, r3, ip
  40547c:	faa2 f38c 	sel	r3, r2, ip
  405480:	bb4b      	cbnz	r3, 4054d6 <strlen+0x96>
  405482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405486:	fa82 f24c 	uadd8	r2, r2, ip
  40548a:	f100 0008 	add.w	r0, r0, #8
  40548e:	faa4 f28c 	sel	r2, r4, ip
  405492:	fa83 f34c 	uadd8	r3, r3, ip
  405496:	faa2 f38c 	sel	r3, r2, ip
  40549a:	b9e3      	cbnz	r3, 4054d6 <strlen+0x96>
  40549c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4054a0:	fa82 f24c 	uadd8	r2, r2, ip
  4054a4:	f100 0008 	add.w	r0, r0, #8
  4054a8:	faa4 f28c 	sel	r2, r4, ip
  4054ac:	fa83 f34c 	uadd8	r3, r3, ip
  4054b0:	faa2 f38c 	sel	r3, r2, ip
  4054b4:	b97b      	cbnz	r3, 4054d6 <strlen+0x96>
  4054b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4054ba:	f101 0120 	add.w	r1, r1, #32
  4054be:	fa82 f24c 	uadd8	r2, r2, ip
  4054c2:	f100 0008 	add.w	r0, r0, #8
  4054c6:	faa4 f28c 	sel	r2, r4, ip
  4054ca:	fa83 f34c 	uadd8	r3, r3, ip
  4054ce:	faa2 f38c 	sel	r3, r2, ip
  4054d2:	2b00      	cmp	r3, #0
  4054d4:	d0c6      	beq.n	405464 <strlen+0x24>
  4054d6:	2a00      	cmp	r2, #0
  4054d8:	bf04      	itt	eq
  4054da:	3004      	addeq	r0, #4
  4054dc:	461a      	moveq	r2, r3
  4054de:	ba12      	rev	r2, r2
  4054e0:	fab2 f282 	clz	r2, r2
  4054e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4054e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4054ec:	4770      	bx	lr
  4054ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4054f2:	f004 0503 	and.w	r5, r4, #3
  4054f6:	f1c4 0000 	rsb	r0, r4, #0
  4054fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4054fe:	f014 0f04 	tst.w	r4, #4
  405502:	f891 f040 	pld	[r1, #64]	; 0x40
  405506:	fa0c f505 	lsl.w	r5, ip, r5
  40550a:	ea62 0205 	orn	r2, r2, r5
  40550e:	bf1c      	itt	ne
  405510:	ea63 0305 	ornne	r3, r3, r5
  405514:	4662      	movne	r2, ip
  405516:	f04f 0400 	mov.w	r4, #0
  40551a:	e7a9      	b.n	405470 <strlen+0x30>

0040551c <_svfprintf_r>:
  40551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405520:	b0c3      	sub	sp, #268	; 0x10c
  405522:	460c      	mov	r4, r1
  405524:	910b      	str	r1, [sp, #44]	; 0x2c
  405526:	4692      	mov	sl, r2
  405528:	930f      	str	r3, [sp, #60]	; 0x3c
  40552a:	900c      	str	r0, [sp, #48]	; 0x30
  40552c:	f003 fd66 	bl	408ffc <_localeconv_r>
  405530:	6803      	ldr	r3, [r0, #0]
  405532:	931a      	str	r3, [sp, #104]	; 0x68
  405534:	4618      	mov	r0, r3
  405536:	f7ff ff83 	bl	405440 <strlen>
  40553a:	89a3      	ldrh	r3, [r4, #12]
  40553c:	9019      	str	r0, [sp, #100]	; 0x64
  40553e:	0619      	lsls	r1, r3, #24
  405540:	d503      	bpl.n	40554a <_svfprintf_r+0x2e>
  405542:	6923      	ldr	r3, [r4, #16]
  405544:	2b00      	cmp	r3, #0
  405546:	f001 8001 	beq.w	40654c <_svfprintf_r+0x1030>
  40554a:	2300      	movs	r3, #0
  40554c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  405550:	9313      	str	r3, [sp, #76]	; 0x4c
  405552:	9314      	str	r3, [sp, #80]	; 0x50
  405554:	9315      	str	r3, [sp, #84]	; 0x54
  405556:	9327      	str	r3, [sp, #156]	; 0x9c
  405558:	9326      	str	r3, [sp, #152]	; 0x98
  40555a:	9318      	str	r3, [sp, #96]	; 0x60
  40555c:	931b      	str	r3, [sp, #108]	; 0x6c
  40555e:	9309      	str	r3, [sp, #36]	; 0x24
  405560:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  405564:	46c8      	mov	r8, r9
  405566:	9316      	str	r3, [sp, #88]	; 0x58
  405568:	9317      	str	r3, [sp, #92]	; 0x5c
  40556a:	f89a 3000 	ldrb.w	r3, [sl]
  40556e:	4654      	mov	r4, sl
  405570:	b1e3      	cbz	r3, 4055ac <_svfprintf_r+0x90>
  405572:	2b25      	cmp	r3, #37	; 0x25
  405574:	d102      	bne.n	40557c <_svfprintf_r+0x60>
  405576:	e019      	b.n	4055ac <_svfprintf_r+0x90>
  405578:	2b25      	cmp	r3, #37	; 0x25
  40557a:	d003      	beq.n	405584 <_svfprintf_r+0x68>
  40557c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405580:	2b00      	cmp	r3, #0
  405582:	d1f9      	bne.n	405578 <_svfprintf_r+0x5c>
  405584:	eba4 050a 	sub.w	r5, r4, sl
  405588:	b185      	cbz	r5, 4055ac <_svfprintf_r+0x90>
  40558a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40558c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40558e:	f8c8 a000 	str.w	sl, [r8]
  405592:	3301      	adds	r3, #1
  405594:	442a      	add	r2, r5
  405596:	2b07      	cmp	r3, #7
  405598:	f8c8 5004 	str.w	r5, [r8, #4]
  40559c:	9227      	str	r2, [sp, #156]	; 0x9c
  40559e:	9326      	str	r3, [sp, #152]	; 0x98
  4055a0:	dc7f      	bgt.n	4056a2 <_svfprintf_r+0x186>
  4055a2:	f108 0808 	add.w	r8, r8, #8
  4055a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4055a8:	442b      	add	r3, r5
  4055aa:	9309      	str	r3, [sp, #36]	; 0x24
  4055ac:	7823      	ldrb	r3, [r4, #0]
  4055ae:	2b00      	cmp	r3, #0
  4055b0:	d07f      	beq.n	4056b2 <_svfprintf_r+0x196>
  4055b2:	2300      	movs	r3, #0
  4055b4:	461a      	mov	r2, r3
  4055b6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4055ba:	4619      	mov	r1, r3
  4055bc:	930d      	str	r3, [sp, #52]	; 0x34
  4055be:	469b      	mov	fp, r3
  4055c0:	f04f 30ff 	mov.w	r0, #4294967295
  4055c4:	7863      	ldrb	r3, [r4, #1]
  4055c6:	900a      	str	r0, [sp, #40]	; 0x28
  4055c8:	f104 0a01 	add.w	sl, r4, #1
  4055cc:	f10a 0a01 	add.w	sl, sl, #1
  4055d0:	f1a3 0020 	sub.w	r0, r3, #32
  4055d4:	2858      	cmp	r0, #88	; 0x58
  4055d6:	f200 83c0 	bhi.w	405d5a <_svfprintf_r+0x83e>
  4055da:	e8df f010 	tbh	[pc, r0, lsl #1]
  4055de:	0238      	.short	0x0238
  4055e0:	03be03be 	.word	0x03be03be
  4055e4:	03be0240 	.word	0x03be0240
  4055e8:	03be03be 	.word	0x03be03be
  4055ec:	03be03be 	.word	0x03be03be
  4055f0:	024503be 	.word	0x024503be
  4055f4:	03be0203 	.word	0x03be0203
  4055f8:	026b005d 	.word	0x026b005d
  4055fc:	028603be 	.word	0x028603be
  405600:	039c039c 	.word	0x039c039c
  405604:	039c039c 	.word	0x039c039c
  405608:	039c039c 	.word	0x039c039c
  40560c:	039c039c 	.word	0x039c039c
  405610:	03be039c 	.word	0x03be039c
  405614:	03be03be 	.word	0x03be03be
  405618:	03be03be 	.word	0x03be03be
  40561c:	03be03be 	.word	0x03be03be
  405620:	03be03be 	.word	0x03be03be
  405624:	033703be 	.word	0x033703be
  405628:	03be0357 	.word	0x03be0357
  40562c:	03be0357 	.word	0x03be0357
  405630:	03be03be 	.word	0x03be03be
  405634:	039703be 	.word	0x039703be
  405638:	03be03be 	.word	0x03be03be
  40563c:	03be03ac 	.word	0x03be03ac
  405640:	03be03be 	.word	0x03be03be
  405644:	03be03be 	.word	0x03be03be
  405648:	03be0259 	.word	0x03be0259
  40564c:	031e03be 	.word	0x031e03be
  405650:	03be03be 	.word	0x03be03be
  405654:	03be03be 	.word	0x03be03be
  405658:	03be03be 	.word	0x03be03be
  40565c:	03be03be 	.word	0x03be03be
  405660:	03be03be 	.word	0x03be03be
  405664:	02db02c6 	.word	0x02db02c6
  405668:	03570357 	.word	0x03570357
  40566c:	028b0357 	.word	0x028b0357
  405670:	03be02db 	.word	0x03be02db
  405674:	029003be 	.word	0x029003be
  405678:	029d03be 	.word	0x029d03be
  40567c:	02b401cc 	.word	0x02b401cc
  405680:	03be0208 	.word	0x03be0208
  405684:	03be01e1 	.word	0x03be01e1
  405688:	03be007e 	.word	0x03be007e
  40568c:	020d03be 	.word	0x020d03be
  405690:	980d      	ldr	r0, [sp, #52]	; 0x34
  405692:	930f      	str	r3, [sp, #60]	; 0x3c
  405694:	4240      	negs	r0, r0
  405696:	900d      	str	r0, [sp, #52]	; 0x34
  405698:	f04b 0b04 	orr.w	fp, fp, #4
  40569c:	f89a 3000 	ldrb.w	r3, [sl]
  4056a0:	e794      	b.n	4055cc <_svfprintf_r+0xb0>
  4056a2:	aa25      	add	r2, sp, #148	; 0x94
  4056a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056a8:	f004 fe42 	bl	40a330 <__ssprint_r>
  4056ac:	b940      	cbnz	r0, 4056c0 <_svfprintf_r+0x1a4>
  4056ae:	46c8      	mov	r8, r9
  4056b0:	e779      	b.n	4055a6 <_svfprintf_r+0x8a>
  4056b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4056b4:	b123      	cbz	r3, 4056c0 <_svfprintf_r+0x1a4>
  4056b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056ba:	aa25      	add	r2, sp, #148	; 0x94
  4056bc:	f004 fe38 	bl	40a330 <__ssprint_r>
  4056c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4056c2:	899b      	ldrh	r3, [r3, #12]
  4056c4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4056c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4056ca:	bf18      	it	ne
  4056cc:	f04f 33ff 	movne.w	r3, #4294967295
  4056d0:	9309      	str	r3, [sp, #36]	; 0x24
  4056d2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4056d4:	b043      	add	sp, #268	; 0x10c
  4056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4056da:	f01b 0f20 	tst.w	fp, #32
  4056de:	9311      	str	r3, [sp, #68]	; 0x44
  4056e0:	f040 81dd 	bne.w	405a9e <_svfprintf_r+0x582>
  4056e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4056e6:	f01b 0f10 	tst.w	fp, #16
  4056ea:	4613      	mov	r3, r2
  4056ec:	f040 856c 	bne.w	4061c8 <_svfprintf_r+0xcac>
  4056f0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4056f4:	f000 8568 	beq.w	4061c8 <_svfprintf_r+0xcac>
  4056f8:	8814      	ldrh	r4, [r2, #0]
  4056fa:	3204      	adds	r2, #4
  4056fc:	2500      	movs	r5, #0
  4056fe:	2301      	movs	r3, #1
  405700:	920f      	str	r2, [sp, #60]	; 0x3c
  405702:	2700      	movs	r7, #0
  405704:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405708:	990a      	ldr	r1, [sp, #40]	; 0x28
  40570a:	1c4a      	adds	r2, r1, #1
  40570c:	f000 8265 	beq.w	405bda <_svfprintf_r+0x6be>
  405710:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  405714:	9207      	str	r2, [sp, #28]
  405716:	ea54 0205 	orrs.w	r2, r4, r5
  40571a:	f040 8264 	bne.w	405be6 <_svfprintf_r+0x6ca>
  40571e:	2900      	cmp	r1, #0
  405720:	f040 8439 	bne.w	405f96 <_svfprintf_r+0xa7a>
  405724:	2b00      	cmp	r3, #0
  405726:	f040 84d4 	bne.w	4060d2 <_svfprintf_r+0xbb6>
  40572a:	f01b 0301 	ands.w	r3, fp, #1
  40572e:	930e      	str	r3, [sp, #56]	; 0x38
  405730:	f000 8602 	beq.w	406338 <_svfprintf_r+0xe1c>
  405734:	ae42      	add	r6, sp, #264	; 0x108
  405736:	2330      	movs	r3, #48	; 0x30
  405738:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40573c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40573e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405740:	4293      	cmp	r3, r2
  405742:	bfb8      	it	lt
  405744:	4613      	movlt	r3, r2
  405746:	9308      	str	r3, [sp, #32]
  405748:	2300      	movs	r3, #0
  40574a:	9312      	str	r3, [sp, #72]	; 0x48
  40574c:	b117      	cbz	r7, 405754 <_svfprintf_r+0x238>
  40574e:	9b08      	ldr	r3, [sp, #32]
  405750:	3301      	adds	r3, #1
  405752:	9308      	str	r3, [sp, #32]
  405754:	9b07      	ldr	r3, [sp, #28]
  405756:	f013 0302 	ands.w	r3, r3, #2
  40575a:	9310      	str	r3, [sp, #64]	; 0x40
  40575c:	d002      	beq.n	405764 <_svfprintf_r+0x248>
  40575e:	9b08      	ldr	r3, [sp, #32]
  405760:	3302      	adds	r3, #2
  405762:	9308      	str	r3, [sp, #32]
  405764:	9b07      	ldr	r3, [sp, #28]
  405766:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40576a:	f040 830d 	bne.w	405d88 <_svfprintf_r+0x86c>
  40576e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405770:	9a08      	ldr	r2, [sp, #32]
  405772:	eba3 0b02 	sub.w	fp, r3, r2
  405776:	f1bb 0f00 	cmp.w	fp, #0
  40577a:	f340 8305 	ble.w	405d88 <_svfprintf_r+0x86c>
  40577e:	f1bb 0f10 	cmp.w	fp, #16
  405782:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405784:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405786:	dd29      	ble.n	4057dc <_svfprintf_r+0x2c0>
  405788:	4643      	mov	r3, r8
  40578a:	4621      	mov	r1, r4
  40578c:	46a8      	mov	r8, r5
  40578e:	2710      	movs	r7, #16
  405790:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405792:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405794:	e006      	b.n	4057a4 <_svfprintf_r+0x288>
  405796:	f1ab 0b10 	sub.w	fp, fp, #16
  40579a:	f1bb 0f10 	cmp.w	fp, #16
  40579e:	f103 0308 	add.w	r3, r3, #8
  4057a2:	dd18      	ble.n	4057d6 <_svfprintf_r+0x2ba>
  4057a4:	3201      	adds	r2, #1
  4057a6:	48b7      	ldr	r0, [pc, #732]	; (405a84 <_svfprintf_r+0x568>)
  4057a8:	9226      	str	r2, [sp, #152]	; 0x98
  4057aa:	3110      	adds	r1, #16
  4057ac:	2a07      	cmp	r2, #7
  4057ae:	9127      	str	r1, [sp, #156]	; 0x9c
  4057b0:	e883 0081 	stmia.w	r3, {r0, r7}
  4057b4:	ddef      	ble.n	405796 <_svfprintf_r+0x27a>
  4057b6:	aa25      	add	r2, sp, #148	; 0x94
  4057b8:	4629      	mov	r1, r5
  4057ba:	4620      	mov	r0, r4
  4057bc:	f004 fdb8 	bl	40a330 <__ssprint_r>
  4057c0:	2800      	cmp	r0, #0
  4057c2:	f47f af7d 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  4057c6:	f1ab 0b10 	sub.w	fp, fp, #16
  4057ca:	f1bb 0f10 	cmp.w	fp, #16
  4057ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4057d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4057d2:	464b      	mov	r3, r9
  4057d4:	dce6      	bgt.n	4057a4 <_svfprintf_r+0x288>
  4057d6:	4645      	mov	r5, r8
  4057d8:	460c      	mov	r4, r1
  4057da:	4698      	mov	r8, r3
  4057dc:	3201      	adds	r2, #1
  4057de:	4ba9      	ldr	r3, [pc, #676]	; (405a84 <_svfprintf_r+0x568>)
  4057e0:	9226      	str	r2, [sp, #152]	; 0x98
  4057e2:	445c      	add	r4, fp
  4057e4:	2a07      	cmp	r2, #7
  4057e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4057e8:	e888 0808 	stmia.w	r8, {r3, fp}
  4057ec:	f300 8495 	bgt.w	40611a <_svfprintf_r+0xbfe>
  4057f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4057f4:	f108 0808 	add.w	r8, r8, #8
  4057f8:	b177      	cbz	r7, 405818 <_svfprintf_r+0x2fc>
  4057fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057fc:	3301      	adds	r3, #1
  4057fe:	3401      	adds	r4, #1
  405800:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  405804:	2201      	movs	r2, #1
  405806:	2b07      	cmp	r3, #7
  405808:	9427      	str	r4, [sp, #156]	; 0x9c
  40580a:	9326      	str	r3, [sp, #152]	; 0x98
  40580c:	e888 0006 	stmia.w	r8, {r1, r2}
  405810:	f300 83d8 	bgt.w	405fc4 <_svfprintf_r+0xaa8>
  405814:	f108 0808 	add.w	r8, r8, #8
  405818:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40581a:	b16b      	cbz	r3, 405838 <_svfprintf_r+0x31c>
  40581c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40581e:	3301      	adds	r3, #1
  405820:	3402      	adds	r4, #2
  405822:	a91e      	add	r1, sp, #120	; 0x78
  405824:	2202      	movs	r2, #2
  405826:	2b07      	cmp	r3, #7
  405828:	9427      	str	r4, [sp, #156]	; 0x9c
  40582a:	9326      	str	r3, [sp, #152]	; 0x98
  40582c:	e888 0006 	stmia.w	r8, {r1, r2}
  405830:	f300 83d3 	bgt.w	405fda <_svfprintf_r+0xabe>
  405834:	f108 0808 	add.w	r8, r8, #8
  405838:	2d80      	cmp	r5, #128	; 0x80
  40583a:	f000 8313 	beq.w	405e64 <_svfprintf_r+0x948>
  40583e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405842:	1a9f      	subs	r7, r3, r2
  405844:	2f00      	cmp	r7, #0
  405846:	dd36      	ble.n	4058b6 <_svfprintf_r+0x39a>
  405848:	2f10      	cmp	r7, #16
  40584a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40584c:	4d8e      	ldr	r5, [pc, #568]	; (405a88 <_svfprintf_r+0x56c>)
  40584e:	dd27      	ble.n	4058a0 <_svfprintf_r+0x384>
  405850:	4642      	mov	r2, r8
  405852:	4621      	mov	r1, r4
  405854:	46b0      	mov	r8, r6
  405856:	f04f 0b10 	mov.w	fp, #16
  40585a:	462e      	mov	r6, r5
  40585c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40585e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405860:	e004      	b.n	40586c <_svfprintf_r+0x350>
  405862:	3f10      	subs	r7, #16
  405864:	2f10      	cmp	r7, #16
  405866:	f102 0208 	add.w	r2, r2, #8
  40586a:	dd15      	ble.n	405898 <_svfprintf_r+0x37c>
  40586c:	3301      	adds	r3, #1
  40586e:	3110      	adds	r1, #16
  405870:	2b07      	cmp	r3, #7
  405872:	9127      	str	r1, [sp, #156]	; 0x9c
  405874:	9326      	str	r3, [sp, #152]	; 0x98
  405876:	e882 0840 	stmia.w	r2, {r6, fp}
  40587a:	ddf2      	ble.n	405862 <_svfprintf_r+0x346>
  40587c:	aa25      	add	r2, sp, #148	; 0x94
  40587e:	4629      	mov	r1, r5
  405880:	4620      	mov	r0, r4
  405882:	f004 fd55 	bl	40a330 <__ssprint_r>
  405886:	2800      	cmp	r0, #0
  405888:	f47f af1a 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  40588c:	3f10      	subs	r7, #16
  40588e:	2f10      	cmp	r7, #16
  405890:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405892:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405894:	464a      	mov	r2, r9
  405896:	dce9      	bgt.n	40586c <_svfprintf_r+0x350>
  405898:	4635      	mov	r5, r6
  40589a:	460c      	mov	r4, r1
  40589c:	4646      	mov	r6, r8
  40589e:	4690      	mov	r8, r2
  4058a0:	3301      	adds	r3, #1
  4058a2:	443c      	add	r4, r7
  4058a4:	2b07      	cmp	r3, #7
  4058a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4058a8:	9326      	str	r3, [sp, #152]	; 0x98
  4058aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4058ae:	f300 837e 	bgt.w	405fae <_svfprintf_r+0xa92>
  4058b2:	f108 0808 	add.w	r8, r8, #8
  4058b6:	9b07      	ldr	r3, [sp, #28]
  4058b8:	05df      	lsls	r7, r3, #23
  4058ba:	f100 8267 	bmi.w	405d8c <_svfprintf_r+0x870>
  4058be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058c0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4058c2:	f8c8 6000 	str.w	r6, [r8]
  4058c6:	3301      	adds	r3, #1
  4058c8:	440c      	add	r4, r1
  4058ca:	2b07      	cmp	r3, #7
  4058cc:	9427      	str	r4, [sp, #156]	; 0x9c
  4058ce:	f8c8 1004 	str.w	r1, [r8, #4]
  4058d2:	9326      	str	r3, [sp, #152]	; 0x98
  4058d4:	f300 834a 	bgt.w	405f6c <_svfprintf_r+0xa50>
  4058d8:	f108 0808 	add.w	r8, r8, #8
  4058dc:	9b07      	ldr	r3, [sp, #28]
  4058de:	075b      	lsls	r3, r3, #29
  4058e0:	d53a      	bpl.n	405958 <_svfprintf_r+0x43c>
  4058e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4058e4:	9a08      	ldr	r2, [sp, #32]
  4058e6:	1a9d      	subs	r5, r3, r2
  4058e8:	2d00      	cmp	r5, #0
  4058ea:	dd35      	ble.n	405958 <_svfprintf_r+0x43c>
  4058ec:	2d10      	cmp	r5, #16
  4058ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4058f0:	dd20      	ble.n	405934 <_svfprintf_r+0x418>
  4058f2:	2610      	movs	r6, #16
  4058f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4058f6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4058fa:	e004      	b.n	405906 <_svfprintf_r+0x3ea>
  4058fc:	3d10      	subs	r5, #16
  4058fe:	2d10      	cmp	r5, #16
  405900:	f108 0808 	add.w	r8, r8, #8
  405904:	dd16      	ble.n	405934 <_svfprintf_r+0x418>
  405906:	3301      	adds	r3, #1
  405908:	4a5e      	ldr	r2, [pc, #376]	; (405a84 <_svfprintf_r+0x568>)
  40590a:	9326      	str	r3, [sp, #152]	; 0x98
  40590c:	3410      	adds	r4, #16
  40590e:	2b07      	cmp	r3, #7
  405910:	9427      	str	r4, [sp, #156]	; 0x9c
  405912:	e888 0044 	stmia.w	r8, {r2, r6}
  405916:	ddf1      	ble.n	4058fc <_svfprintf_r+0x3e0>
  405918:	aa25      	add	r2, sp, #148	; 0x94
  40591a:	4659      	mov	r1, fp
  40591c:	4638      	mov	r0, r7
  40591e:	f004 fd07 	bl	40a330 <__ssprint_r>
  405922:	2800      	cmp	r0, #0
  405924:	f47f aecc 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  405928:	3d10      	subs	r5, #16
  40592a:	2d10      	cmp	r5, #16
  40592c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40592e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405930:	46c8      	mov	r8, r9
  405932:	dce8      	bgt.n	405906 <_svfprintf_r+0x3ea>
  405934:	3301      	adds	r3, #1
  405936:	4a53      	ldr	r2, [pc, #332]	; (405a84 <_svfprintf_r+0x568>)
  405938:	9326      	str	r3, [sp, #152]	; 0x98
  40593a:	442c      	add	r4, r5
  40593c:	2b07      	cmp	r3, #7
  40593e:	9427      	str	r4, [sp, #156]	; 0x9c
  405940:	e888 0024 	stmia.w	r8, {r2, r5}
  405944:	dd08      	ble.n	405958 <_svfprintf_r+0x43c>
  405946:	aa25      	add	r2, sp, #148	; 0x94
  405948:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40594a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40594c:	f004 fcf0 	bl	40a330 <__ssprint_r>
  405950:	2800      	cmp	r0, #0
  405952:	f47f aeb5 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  405956:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405958:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40595a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40595c:	9908      	ldr	r1, [sp, #32]
  40595e:	428a      	cmp	r2, r1
  405960:	bfac      	ite	ge
  405962:	189b      	addge	r3, r3, r2
  405964:	185b      	addlt	r3, r3, r1
  405966:	9309      	str	r3, [sp, #36]	; 0x24
  405968:	2c00      	cmp	r4, #0
  40596a:	f040 830a 	bne.w	405f82 <_svfprintf_r+0xa66>
  40596e:	2300      	movs	r3, #0
  405970:	9326      	str	r3, [sp, #152]	; 0x98
  405972:	46c8      	mov	r8, r9
  405974:	e5f9      	b.n	40556a <_svfprintf_r+0x4e>
  405976:	9311      	str	r3, [sp, #68]	; 0x44
  405978:	f01b 0320 	ands.w	r3, fp, #32
  40597c:	f040 81e2 	bne.w	405d44 <_svfprintf_r+0x828>
  405980:	f01b 0210 	ands.w	r2, fp, #16
  405984:	f040 842c 	bne.w	4061e0 <_svfprintf_r+0xcc4>
  405988:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40598c:	f000 8428 	beq.w	4061e0 <_svfprintf_r+0xcc4>
  405990:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405992:	4613      	mov	r3, r2
  405994:	460a      	mov	r2, r1
  405996:	3204      	adds	r2, #4
  405998:	880c      	ldrh	r4, [r1, #0]
  40599a:	920f      	str	r2, [sp, #60]	; 0x3c
  40599c:	2500      	movs	r5, #0
  40599e:	e6b0      	b.n	405702 <_svfprintf_r+0x1e6>
  4059a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4059a2:	9311      	str	r3, [sp, #68]	; 0x44
  4059a4:	6816      	ldr	r6, [r2, #0]
  4059a6:	2400      	movs	r4, #0
  4059a8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4059ac:	1d15      	adds	r5, r2, #4
  4059ae:	2e00      	cmp	r6, #0
  4059b0:	f000 86a5 	beq.w	4066fe <_svfprintf_r+0x11e2>
  4059b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4059b6:	1c53      	adds	r3, r2, #1
  4059b8:	f000 8607 	beq.w	4065ca <_svfprintf_r+0x10ae>
  4059bc:	4621      	mov	r1, r4
  4059be:	4630      	mov	r0, r6
  4059c0:	f003 fe6e 	bl	4096a0 <memchr>
  4059c4:	2800      	cmp	r0, #0
  4059c6:	f000 86df 	beq.w	406788 <_svfprintf_r+0x126c>
  4059ca:	1b83      	subs	r3, r0, r6
  4059cc:	930e      	str	r3, [sp, #56]	; 0x38
  4059ce:	940a      	str	r4, [sp, #40]	; 0x28
  4059d0:	950f      	str	r5, [sp, #60]	; 0x3c
  4059d2:	f8cd b01c 	str.w	fp, [sp, #28]
  4059d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4059da:	9308      	str	r3, [sp, #32]
  4059dc:	9412      	str	r4, [sp, #72]	; 0x48
  4059de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4059e2:	e6b3      	b.n	40574c <_svfprintf_r+0x230>
  4059e4:	f89a 3000 	ldrb.w	r3, [sl]
  4059e8:	2201      	movs	r2, #1
  4059ea:	212b      	movs	r1, #43	; 0x2b
  4059ec:	e5ee      	b.n	4055cc <_svfprintf_r+0xb0>
  4059ee:	f04b 0b20 	orr.w	fp, fp, #32
  4059f2:	f89a 3000 	ldrb.w	r3, [sl]
  4059f6:	e5e9      	b.n	4055cc <_svfprintf_r+0xb0>
  4059f8:	9311      	str	r3, [sp, #68]	; 0x44
  4059fa:	2a00      	cmp	r2, #0
  4059fc:	f040 878d 	bne.w	40691a <_svfprintf_r+0x13fe>
  405a00:	4b22      	ldr	r3, [pc, #136]	; (405a8c <_svfprintf_r+0x570>)
  405a02:	9318      	str	r3, [sp, #96]	; 0x60
  405a04:	f01b 0f20 	tst.w	fp, #32
  405a08:	f040 8111 	bne.w	405c2e <_svfprintf_r+0x712>
  405a0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405a0e:	f01b 0f10 	tst.w	fp, #16
  405a12:	4613      	mov	r3, r2
  405a14:	f040 83df 	bne.w	4061d6 <_svfprintf_r+0xcba>
  405a18:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405a1c:	f000 83db 	beq.w	4061d6 <_svfprintf_r+0xcba>
  405a20:	3304      	adds	r3, #4
  405a22:	8814      	ldrh	r4, [r2, #0]
  405a24:	930f      	str	r3, [sp, #60]	; 0x3c
  405a26:	2500      	movs	r5, #0
  405a28:	f01b 0f01 	tst.w	fp, #1
  405a2c:	f000 810c 	beq.w	405c48 <_svfprintf_r+0x72c>
  405a30:	ea54 0305 	orrs.w	r3, r4, r5
  405a34:	f000 8108 	beq.w	405c48 <_svfprintf_r+0x72c>
  405a38:	2330      	movs	r3, #48	; 0x30
  405a3a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  405a3e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  405a42:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  405a46:	f04b 0b02 	orr.w	fp, fp, #2
  405a4a:	2302      	movs	r3, #2
  405a4c:	e659      	b.n	405702 <_svfprintf_r+0x1e6>
  405a4e:	f89a 3000 	ldrb.w	r3, [sl]
  405a52:	2900      	cmp	r1, #0
  405a54:	f47f adba 	bne.w	4055cc <_svfprintf_r+0xb0>
  405a58:	2201      	movs	r2, #1
  405a5a:	2120      	movs	r1, #32
  405a5c:	e5b6      	b.n	4055cc <_svfprintf_r+0xb0>
  405a5e:	f04b 0b01 	orr.w	fp, fp, #1
  405a62:	f89a 3000 	ldrb.w	r3, [sl]
  405a66:	e5b1      	b.n	4055cc <_svfprintf_r+0xb0>
  405a68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  405a6a:	6823      	ldr	r3, [r4, #0]
  405a6c:	930d      	str	r3, [sp, #52]	; 0x34
  405a6e:	4618      	mov	r0, r3
  405a70:	2800      	cmp	r0, #0
  405a72:	4623      	mov	r3, r4
  405a74:	f103 0304 	add.w	r3, r3, #4
  405a78:	f6ff ae0a 	blt.w	405690 <_svfprintf_r+0x174>
  405a7c:	930f      	str	r3, [sp, #60]	; 0x3c
  405a7e:	f89a 3000 	ldrb.w	r3, [sl]
  405a82:	e5a3      	b.n	4055cc <_svfprintf_r+0xb0>
  405a84:	0040c460 	.word	0x0040c460
  405a88:	0040c470 	.word	0x0040c470
  405a8c:	0040c440 	.word	0x0040c440
  405a90:	f04b 0b10 	orr.w	fp, fp, #16
  405a94:	f01b 0f20 	tst.w	fp, #32
  405a98:	9311      	str	r3, [sp, #68]	; 0x44
  405a9a:	f43f ae23 	beq.w	4056e4 <_svfprintf_r+0x1c8>
  405a9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405aa0:	3507      	adds	r5, #7
  405aa2:	f025 0307 	bic.w	r3, r5, #7
  405aa6:	f103 0208 	add.w	r2, r3, #8
  405aaa:	e9d3 4500 	ldrd	r4, r5, [r3]
  405aae:	920f      	str	r2, [sp, #60]	; 0x3c
  405ab0:	2301      	movs	r3, #1
  405ab2:	e626      	b.n	405702 <_svfprintf_r+0x1e6>
  405ab4:	f89a 3000 	ldrb.w	r3, [sl]
  405ab8:	2b2a      	cmp	r3, #42	; 0x2a
  405aba:	f10a 0401 	add.w	r4, sl, #1
  405abe:	f000 871f 	beq.w	406900 <_svfprintf_r+0x13e4>
  405ac2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405ac6:	2809      	cmp	r0, #9
  405ac8:	46a2      	mov	sl, r4
  405aca:	f200 86ab 	bhi.w	406824 <_svfprintf_r+0x1308>
  405ace:	2300      	movs	r3, #0
  405ad0:	461c      	mov	r4, r3
  405ad2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405ad6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405ada:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  405ade:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405ae2:	2809      	cmp	r0, #9
  405ae4:	d9f5      	bls.n	405ad2 <_svfprintf_r+0x5b6>
  405ae6:	940a      	str	r4, [sp, #40]	; 0x28
  405ae8:	e572      	b.n	4055d0 <_svfprintf_r+0xb4>
  405aea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  405aee:	f89a 3000 	ldrb.w	r3, [sl]
  405af2:	e56b      	b.n	4055cc <_svfprintf_r+0xb0>
  405af4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  405af8:	f89a 3000 	ldrb.w	r3, [sl]
  405afc:	e566      	b.n	4055cc <_svfprintf_r+0xb0>
  405afe:	f89a 3000 	ldrb.w	r3, [sl]
  405b02:	2b6c      	cmp	r3, #108	; 0x6c
  405b04:	bf03      	ittte	eq
  405b06:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  405b0a:	f04b 0b20 	orreq.w	fp, fp, #32
  405b0e:	f10a 0a01 	addeq.w	sl, sl, #1
  405b12:	f04b 0b10 	orrne.w	fp, fp, #16
  405b16:	e559      	b.n	4055cc <_svfprintf_r+0xb0>
  405b18:	2a00      	cmp	r2, #0
  405b1a:	f040 8709 	bne.w	406930 <_svfprintf_r+0x1414>
  405b1e:	f01b 0f20 	tst.w	fp, #32
  405b22:	f040 84f7 	bne.w	406514 <_svfprintf_r+0xff8>
  405b26:	f01b 0f10 	tst.w	fp, #16
  405b2a:	f040 84aa 	bne.w	406482 <_svfprintf_r+0xf66>
  405b2e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405b32:	f000 84a6 	beq.w	406482 <_svfprintf_r+0xf66>
  405b36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405b38:	6813      	ldr	r3, [r2, #0]
  405b3a:	3204      	adds	r2, #4
  405b3c:	920f      	str	r2, [sp, #60]	; 0x3c
  405b3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  405b42:	801a      	strh	r2, [r3, #0]
  405b44:	e511      	b.n	40556a <_svfprintf_r+0x4e>
  405b46:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405b48:	4bb2      	ldr	r3, [pc, #712]	; (405e14 <_svfprintf_r+0x8f8>)
  405b4a:	680c      	ldr	r4, [r1, #0]
  405b4c:	9318      	str	r3, [sp, #96]	; 0x60
  405b4e:	2230      	movs	r2, #48	; 0x30
  405b50:	2378      	movs	r3, #120	; 0x78
  405b52:	3104      	adds	r1, #4
  405b54:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  405b58:	9311      	str	r3, [sp, #68]	; 0x44
  405b5a:	f04b 0b02 	orr.w	fp, fp, #2
  405b5e:	910f      	str	r1, [sp, #60]	; 0x3c
  405b60:	2500      	movs	r5, #0
  405b62:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  405b66:	2302      	movs	r3, #2
  405b68:	e5cb      	b.n	405702 <_svfprintf_r+0x1e6>
  405b6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405b6c:	9311      	str	r3, [sp, #68]	; 0x44
  405b6e:	680a      	ldr	r2, [r1, #0]
  405b70:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405b74:	2300      	movs	r3, #0
  405b76:	460a      	mov	r2, r1
  405b78:	461f      	mov	r7, r3
  405b7a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405b7e:	3204      	adds	r2, #4
  405b80:	2301      	movs	r3, #1
  405b82:	9308      	str	r3, [sp, #32]
  405b84:	f8cd b01c 	str.w	fp, [sp, #28]
  405b88:	970a      	str	r7, [sp, #40]	; 0x28
  405b8a:	9712      	str	r7, [sp, #72]	; 0x48
  405b8c:	920f      	str	r2, [sp, #60]	; 0x3c
  405b8e:	930e      	str	r3, [sp, #56]	; 0x38
  405b90:	ae28      	add	r6, sp, #160	; 0xa0
  405b92:	e5df      	b.n	405754 <_svfprintf_r+0x238>
  405b94:	9311      	str	r3, [sp, #68]	; 0x44
  405b96:	2a00      	cmp	r2, #0
  405b98:	f040 86e2 	bne.w	406960 <_svfprintf_r+0x1444>
  405b9c:	f01b 0f20 	tst.w	fp, #32
  405ba0:	d15d      	bne.n	405c5e <_svfprintf_r+0x742>
  405ba2:	f01b 0f10 	tst.w	fp, #16
  405ba6:	f040 8306 	bne.w	4061b6 <_svfprintf_r+0xc9a>
  405baa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405bae:	f000 8302 	beq.w	4061b6 <_svfprintf_r+0xc9a>
  405bb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405bb4:	f9b1 4000 	ldrsh.w	r4, [r1]
  405bb8:	3104      	adds	r1, #4
  405bba:	17e5      	asrs	r5, r4, #31
  405bbc:	4622      	mov	r2, r4
  405bbe:	462b      	mov	r3, r5
  405bc0:	910f      	str	r1, [sp, #60]	; 0x3c
  405bc2:	2a00      	cmp	r2, #0
  405bc4:	f173 0300 	sbcs.w	r3, r3, #0
  405bc8:	db58      	blt.n	405c7c <_svfprintf_r+0x760>
  405bca:	990a      	ldr	r1, [sp, #40]	; 0x28
  405bcc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405bd0:	1c4a      	adds	r2, r1, #1
  405bd2:	f04f 0301 	mov.w	r3, #1
  405bd6:	f47f ad9b 	bne.w	405710 <_svfprintf_r+0x1f4>
  405bda:	ea54 0205 	orrs.w	r2, r4, r5
  405bde:	f000 81dc 	beq.w	405f9a <_svfprintf_r+0xa7e>
  405be2:	f8cd b01c 	str.w	fp, [sp, #28]
  405be6:	2b01      	cmp	r3, #1
  405be8:	f000 8278 	beq.w	4060dc <_svfprintf_r+0xbc0>
  405bec:	2b02      	cmp	r3, #2
  405bee:	f040 8203 	bne.w	405ff8 <_svfprintf_r+0xadc>
  405bf2:	9818      	ldr	r0, [sp, #96]	; 0x60
  405bf4:	464e      	mov	r6, r9
  405bf6:	0923      	lsrs	r3, r4, #4
  405bf8:	f004 010f 	and.w	r1, r4, #15
  405bfc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405c00:	092a      	lsrs	r2, r5, #4
  405c02:	461c      	mov	r4, r3
  405c04:	4615      	mov	r5, r2
  405c06:	5c43      	ldrb	r3, [r0, r1]
  405c08:	f806 3d01 	strb.w	r3, [r6, #-1]!
  405c0c:	ea54 0305 	orrs.w	r3, r4, r5
  405c10:	d1f1      	bne.n	405bf6 <_svfprintf_r+0x6da>
  405c12:	eba9 0306 	sub.w	r3, r9, r6
  405c16:	930e      	str	r3, [sp, #56]	; 0x38
  405c18:	e590      	b.n	40573c <_svfprintf_r+0x220>
  405c1a:	9311      	str	r3, [sp, #68]	; 0x44
  405c1c:	2a00      	cmp	r2, #0
  405c1e:	f040 869b 	bne.w	406958 <_svfprintf_r+0x143c>
  405c22:	4b7d      	ldr	r3, [pc, #500]	; (405e18 <_svfprintf_r+0x8fc>)
  405c24:	9318      	str	r3, [sp, #96]	; 0x60
  405c26:	f01b 0f20 	tst.w	fp, #32
  405c2a:	f43f aeef 	beq.w	405a0c <_svfprintf_r+0x4f0>
  405c2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405c30:	3507      	adds	r5, #7
  405c32:	f025 0307 	bic.w	r3, r5, #7
  405c36:	f103 0208 	add.w	r2, r3, #8
  405c3a:	f01b 0f01 	tst.w	fp, #1
  405c3e:	920f      	str	r2, [sp, #60]	; 0x3c
  405c40:	e9d3 4500 	ldrd	r4, r5, [r3]
  405c44:	f47f aef4 	bne.w	405a30 <_svfprintf_r+0x514>
  405c48:	2302      	movs	r3, #2
  405c4a:	e55a      	b.n	405702 <_svfprintf_r+0x1e6>
  405c4c:	9311      	str	r3, [sp, #68]	; 0x44
  405c4e:	2a00      	cmp	r2, #0
  405c50:	f040 867e 	bne.w	406950 <_svfprintf_r+0x1434>
  405c54:	f04b 0b10 	orr.w	fp, fp, #16
  405c58:	f01b 0f20 	tst.w	fp, #32
  405c5c:	d0a1      	beq.n	405ba2 <_svfprintf_r+0x686>
  405c5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405c60:	3507      	adds	r5, #7
  405c62:	f025 0507 	bic.w	r5, r5, #7
  405c66:	e9d5 2300 	ldrd	r2, r3, [r5]
  405c6a:	2a00      	cmp	r2, #0
  405c6c:	f105 0108 	add.w	r1, r5, #8
  405c70:	461d      	mov	r5, r3
  405c72:	f173 0300 	sbcs.w	r3, r3, #0
  405c76:	910f      	str	r1, [sp, #60]	; 0x3c
  405c78:	4614      	mov	r4, r2
  405c7a:	daa6      	bge.n	405bca <_svfprintf_r+0x6ae>
  405c7c:	272d      	movs	r7, #45	; 0x2d
  405c7e:	4264      	negs	r4, r4
  405c80:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405c84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405c88:	2301      	movs	r3, #1
  405c8a:	e53d      	b.n	405708 <_svfprintf_r+0x1ec>
  405c8c:	9311      	str	r3, [sp, #68]	; 0x44
  405c8e:	2a00      	cmp	r2, #0
  405c90:	f040 865a 	bne.w	406948 <_svfprintf_r+0x142c>
  405c94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405c96:	3507      	adds	r5, #7
  405c98:	f025 0307 	bic.w	r3, r5, #7
  405c9c:	f103 0208 	add.w	r2, r3, #8
  405ca0:	920f      	str	r2, [sp, #60]	; 0x3c
  405ca2:	681a      	ldr	r2, [r3, #0]
  405ca4:	9214      	str	r2, [sp, #80]	; 0x50
  405ca6:	685b      	ldr	r3, [r3, #4]
  405ca8:	9315      	str	r3, [sp, #84]	; 0x54
  405caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405cac:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405cae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405cb2:	4628      	mov	r0, r5
  405cb4:	4621      	mov	r1, r4
  405cb6:	f04f 32ff 	mov.w	r2, #4294967295
  405cba:	4b58      	ldr	r3, [pc, #352]	; (405e1c <_svfprintf_r+0x900>)
  405cbc:	f005 f9d4 	bl	40b068 <__aeabi_dcmpun>
  405cc0:	2800      	cmp	r0, #0
  405cc2:	f040 8348 	bne.w	406356 <_svfprintf_r+0xe3a>
  405cc6:	4628      	mov	r0, r5
  405cc8:	4621      	mov	r1, r4
  405cca:	f04f 32ff 	mov.w	r2, #4294967295
  405cce:	4b53      	ldr	r3, [pc, #332]	; (405e1c <_svfprintf_r+0x900>)
  405cd0:	f005 f9ac 	bl	40b02c <__aeabi_dcmple>
  405cd4:	2800      	cmp	r0, #0
  405cd6:	f040 833e 	bne.w	406356 <_svfprintf_r+0xe3a>
  405cda:	a814      	add	r0, sp, #80	; 0x50
  405cdc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  405cde:	f005 f99b 	bl	40b018 <__aeabi_dcmplt>
  405ce2:	2800      	cmp	r0, #0
  405ce4:	f040 852f 	bne.w	406746 <_svfprintf_r+0x122a>
  405ce8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405cec:	4e4c      	ldr	r6, [pc, #304]	; (405e20 <_svfprintf_r+0x904>)
  405cee:	4b4d      	ldr	r3, [pc, #308]	; (405e24 <_svfprintf_r+0x908>)
  405cf0:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  405cf4:	9007      	str	r0, [sp, #28]
  405cf6:	9811      	ldr	r0, [sp, #68]	; 0x44
  405cf8:	2203      	movs	r2, #3
  405cfa:	2100      	movs	r1, #0
  405cfc:	9208      	str	r2, [sp, #32]
  405cfe:	910a      	str	r1, [sp, #40]	; 0x28
  405d00:	2847      	cmp	r0, #71	; 0x47
  405d02:	bfd8      	it	le
  405d04:	461e      	movle	r6, r3
  405d06:	920e      	str	r2, [sp, #56]	; 0x38
  405d08:	9112      	str	r1, [sp, #72]	; 0x48
  405d0a:	e51f      	b.n	40574c <_svfprintf_r+0x230>
  405d0c:	f04b 0b08 	orr.w	fp, fp, #8
  405d10:	f89a 3000 	ldrb.w	r3, [sl]
  405d14:	e45a      	b.n	4055cc <_svfprintf_r+0xb0>
  405d16:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405d1a:	2300      	movs	r3, #0
  405d1c:	461c      	mov	r4, r3
  405d1e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405d22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405d26:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  405d2a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405d2e:	2809      	cmp	r0, #9
  405d30:	d9f5      	bls.n	405d1e <_svfprintf_r+0x802>
  405d32:	940d      	str	r4, [sp, #52]	; 0x34
  405d34:	e44c      	b.n	4055d0 <_svfprintf_r+0xb4>
  405d36:	f04b 0b10 	orr.w	fp, fp, #16
  405d3a:	9311      	str	r3, [sp, #68]	; 0x44
  405d3c:	f01b 0320 	ands.w	r3, fp, #32
  405d40:	f43f ae1e 	beq.w	405980 <_svfprintf_r+0x464>
  405d44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405d46:	3507      	adds	r5, #7
  405d48:	f025 0307 	bic.w	r3, r5, #7
  405d4c:	f103 0208 	add.w	r2, r3, #8
  405d50:	e9d3 4500 	ldrd	r4, r5, [r3]
  405d54:	920f      	str	r2, [sp, #60]	; 0x3c
  405d56:	2300      	movs	r3, #0
  405d58:	e4d3      	b.n	405702 <_svfprintf_r+0x1e6>
  405d5a:	9311      	str	r3, [sp, #68]	; 0x44
  405d5c:	2a00      	cmp	r2, #0
  405d5e:	f040 85e0 	bne.w	406922 <_svfprintf_r+0x1406>
  405d62:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d64:	2a00      	cmp	r2, #0
  405d66:	f43f aca4 	beq.w	4056b2 <_svfprintf_r+0x196>
  405d6a:	2300      	movs	r3, #0
  405d6c:	2101      	movs	r1, #1
  405d6e:	461f      	mov	r7, r3
  405d70:	9108      	str	r1, [sp, #32]
  405d72:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405d76:	f8cd b01c 	str.w	fp, [sp, #28]
  405d7a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405d7e:	930a      	str	r3, [sp, #40]	; 0x28
  405d80:	9312      	str	r3, [sp, #72]	; 0x48
  405d82:	910e      	str	r1, [sp, #56]	; 0x38
  405d84:	ae28      	add	r6, sp, #160	; 0xa0
  405d86:	e4e5      	b.n	405754 <_svfprintf_r+0x238>
  405d88:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405d8a:	e535      	b.n	4057f8 <_svfprintf_r+0x2dc>
  405d8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d8e:	2b65      	cmp	r3, #101	; 0x65
  405d90:	f340 80a6 	ble.w	405ee0 <_svfprintf_r+0x9c4>
  405d94:	a814      	add	r0, sp, #80	; 0x50
  405d96:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  405d98:	f005 f934 	bl	40b004 <__aeabi_dcmpeq>
  405d9c:	2800      	cmp	r0, #0
  405d9e:	f000 814f 	beq.w	406040 <_svfprintf_r+0xb24>
  405da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405da4:	4a20      	ldr	r2, [pc, #128]	; (405e28 <_svfprintf_r+0x90c>)
  405da6:	f8c8 2000 	str.w	r2, [r8]
  405daa:	3301      	adds	r3, #1
  405dac:	3401      	adds	r4, #1
  405dae:	2201      	movs	r2, #1
  405db0:	2b07      	cmp	r3, #7
  405db2:	9427      	str	r4, [sp, #156]	; 0x9c
  405db4:	9326      	str	r3, [sp, #152]	; 0x98
  405db6:	f8c8 2004 	str.w	r2, [r8, #4]
  405dba:	f300 836a 	bgt.w	406492 <_svfprintf_r+0xf76>
  405dbe:	f108 0808 	add.w	r8, r8, #8
  405dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405dc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405dc6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405dc8:	4293      	cmp	r3, r2
  405dca:	db03      	blt.n	405dd4 <_svfprintf_r+0x8b8>
  405dcc:	9b07      	ldr	r3, [sp, #28]
  405dce:	07dd      	lsls	r5, r3, #31
  405dd0:	f57f ad84 	bpl.w	4058dc <_svfprintf_r+0x3c0>
  405dd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405dd6:	9919      	ldr	r1, [sp, #100]	; 0x64
  405dd8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405dda:	f8c8 2000 	str.w	r2, [r8]
  405dde:	3301      	adds	r3, #1
  405de0:	440c      	add	r4, r1
  405de2:	2b07      	cmp	r3, #7
  405de4:	f8c8 1004 	str.w	r1, [r8, #4]
  405de8:	9427      	str	r4, [sp, #156]	; 0x9c
  405dea:	9326      	str	r3, [sp, #152]	; 0x98
  405dec:	f300 839e 	bgt.w	40652c <_svfprintf_r+0x1010>
  405df0:	f108 0808 	add.w	r8, r8, #8
  405df4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405df6:	1e5e      	subs	r6, r3, #1
  405df8:	2e00      	cmp	r6, #0
  405dfa:	f77f ad6f 	ble.w	4058dc <_svfprintf_r+0x3c0>
  405dfe:	2e10      	cmp	r6, #16
  405e00:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e02:	4d0a      	ldr	r5, [pc, #40]	; (405e2c <_svfprintf_r+0x910>)
  405e04:	f340 81f5 	ble.w	4061f2 <_svfprintf_r+0xcd6>
  405e08:	4622      	mov	r2, r4
  405e0a:	2710      	movs	r7, #16
  405e0c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405e10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405e12:	e013      	b.n	405e3c <_svfprintf_r+0x920>
  405e14:	0040c440 	.word	0x0040c440
  405e18:	0040c42c 	.word	0x0040c42c
  405e1c:	7fefffff 	.word	0x7fefffff
  405e20:	0040c420 	.word	0x0040c420
  405e24:	0040c41c 	.word	0x0040c41c
  405e28:	0040c45c 	.word	0x0040c45c
  405e2c:	0040c470 	.word	0x0040c470
  405e30:	f108 0808 	add.w	r8, r8, #8
  405e34:	3e10      	subs	r6, #16
  405e36:	2e10      	cmp	r6, #16
  405e38:	f340 81da 	ble.w	4061f0 <_svfprintf_r+0xcd4>
  405e3c:	3301      	adds	r3, #1
  405e3e:	3210      	adds	r2, #16
  405e40:	2b07      	cmp	r3, #7
  405e42:	9227      	str	r2, [sp, #156]	; 0x9c
  405e44:	9326      	str	r3, [sp, #152]	; 0x98
  405e46:	e888 00a0 	stmia.w	r8, {r5, r7}
  405e4a:	ddf1      	ble.n	405e30 <_svfprintf_r+0x914>
  405e4c:	aa25      	add	r2, sp, #148	; 0x94
  405e4e:	4621      	mov	r1, r4
  405e50:	4658      	mov	r0, fp
  405e52:	f004 fa6d 	bl	40a330 <__ssprint_r>
  405e56:	2800      	cmp	r0, #0
  405e58:	f47f ac32 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  405e5c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405e5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e60:	46c8      	mov	r8, r9
  405e62:	e7e7      	b.n	405e34 <_svfprintf_r+0x918>
  405e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405e66:	9a08      	ldr	r2, [sp, #32]
  405e68:	1a9f      	subs	r7, r3, r2
  405e6a:	2f00      	cmp	r7, #0
  405e6c:	f77f ace7 	ble.w	40583e <_svfprintf_r+0x322>
  405e70:	2f10      	cmp	r7, #16
  405e72:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e74:	4db6      	ldr	r5, [pc, #728]	; (406150 <_svfprintf_r+0xc34>)
  405e76:	dd27      	ble.n	405ec8 <_svfprintf_r+0x9ac>
  405e78:	4642      	mov	r2, r8
  405e7a:	4621      	mov	r1, r4
  405e7c:	46b0      	mov	r8, r6
  405e7e:	f04f 0b10 	mov.w	fp, #16
  405e82:	462e      	mov	r6, r5
  405e84:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405e86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405e88:	e004      	b.n	405e94 <_svfprintf_r+0x978>
  405e8a:	3f10      	subs	r7, #16
  405e8c:	2f10      	cmp	r7, #16
  405e8e:	f102 0208 	add.w	r2, r2, #8
  405e92:	dd15      	ble.n	405ec0 <_svfprintf_r+0x9a4>
  405e94:	3301      	adds	r3, #1
  405e96:	3110      	adds	r1, #16
  405e98:	2b07      	cmp	r3, #7
  405e9a:	9127      	str	r1, [sp, #156]	; 0x9c
  405e9c:	9326      	str	r3, [sp, #152]	; 0x98
  405e9e:	e882 0840 	stmia.w	r2, {r6, fp}
  405ea2:	ddf2      	ble.n	405e8a <_svfprintf_r+0x96e>
  405ea4:	aa25      	add	r2, sp, #148	; 0x94
  405ea6:	4629      	mov	r1, r5
  405ea8:	4620      	mov	r0, r4
  405eaa:	f004 fa41 	bl	40a330 <__ssprint_r>
  405eae:	2800      	cmp	r0, #0
  405eb0:	f47f ac06 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  405eb4:	3f10      	subs	r7, #16
  405eb6:	2f10      	cmp	r7, #16
  405eb8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405eba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405ebc:	464a      	mov	r2, r9
  405ebe:	dce9      	bgt.n	405e94 <_svfprintf_r+0x978>
  405ec0:	4635      	mov	r5, r6
  405ec2:	460c      	mov	r4, r1
  405ec4:	4646      	mov	r6, r8
  405ec6:	4690      	mov	r8, r2
  405ec8:	3301      	adds	r3, #1
  405eca:	443c      	add	r4, r7
  405ecc:	2b07      	cmp	r3, #7
  405ece:	9427      	str	r4, [sp, #156]	; 0x9c
  405ed0:	9326      	str	r3, [sp, #152]	; 0x98
  405ed2:	e888 00a0 	stmia.w	r8, {r5, r7}
  405ed6:	f300 8232 	bgt.w	40633e <_svfprintf_r+0xe22>
  405eda:	f108 0808 	add.w	r8, r8, #8
  405ede:	e4ae      	b.n	40583e <_svfprintf_r+0x322>
  405ee0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405ee2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405ee4:	2b01      	cmp	r3, #1
  405ee6:	f340 81fe 	ble.w	4062e6 <_svfprintf_r+0xdca>
  405eea:	3701      	adds	r7, #1
  405eec:	3401      	adds	r4, #1
  405eee:	2301      	movs	r3, #1
  405ef0:	2f07      	cmp	r7, #7
  405ef2:	9427      	str	r4, [sp, #156]	; 0x9c
  405ef4:	9726      	str	r7, [sp, #152]	; 0x98
  405ef6:	f8c8 6000 	str.w	r6, [r8]
  405efa:	f8c8 3004 	str.w	r3, [r8, #4]
  405efe:	f300 8203 	bgt.w	406308 <_svfprintf_r+0xdec>
  405f02:	f108 0808 	add.w	r8, r8, #8
  405f06:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405f08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  405f0a:	f8c8 3000 	str.w	r3, [r8]
  405f0e:	3701      	adds	r7, #1
  405f10:	4414      	add	r4, r2
  405f12:	2f07      	cmp	r7, #7
  405f14:	9427      	str	r4, [sp, #156]	; 0x9c
  405f16:	9726      	str	r7, [sp, #152]	; 0x98
  405f18:	f8c8 2004 	str.w	r2, [r8, #4]
  405f1c:	f300 8200 	bgt.w	406320 <_svfprintf_r+0xe04>
  405f20:	f108 0808 	add.w	r8, r8, #8
  405f24:	a814      	add	r0, sp, #80	; 0x50
  405f26:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  405f28:	f005 f86c 	bl	40b004 <__aeabi_dcmpeq>
  405f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405f2e:	2800      	cmp	r0, #0
  405f30:	f040 8101 	bne.w	406136 <_svfprintf_r+0xc1a>
  405f34:	3b01      	subs	r3, #1
  405f36:	3701      	adds	r7, #1
  405f38:	3601      	adds	r6, #1
  405f3a:	441c      	add	r4, r3
  405f3c:	2f07      	cmp	r7, #7
  405f3e:	9726      	str	r7, [sp, #152]	; 0x98
  405f40:	9427      	str	r4, [sp, #156]	; 0x9c
  405f42:	f8c8 6000 	str.w	r6, [r8]
  405f46:	f8c8 3004 	str.w	r3, [r8, #4]
  405f4a:	f300 8128 	bgt.w	40619e <_svfprintf_r+0xc82>
  405f4e:	f108 0808 	add.w	r8, r8, #8
  405f52:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  405f54:	f8c8 2004 	str.w	r2, [r8, #4]
  405f58:	3701      	adds	r7, #1
  405f5a:	4414      	add	r4, r2
  405f5c:	ab21      	add	r3, sp, #132	; 0x84
  405f5e:	2f07      	cmp	r7, #7
  405f60:	9427      	str	r4, [sp, #156]	; 0x9c
  405f62:	9726      	str	r7, [sp, #152]	; 0x98
  405f64:	f8c8 3000 	str.w	r3, [r8]
  405f68:	f77f acb6 	ble.w	4058d8 <_svfprintf_r+0x3bc>
  405f6c:	aa25      	add	r2, sp, #148	; 0x94
  405f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405f70:	980c      	ldr	r0, [sp, #48]	; 0x30
  405f72:	f004 f9dd 	bl	40a330 <__ssprint_r>
  405f76:	2800      	cmp	r0, #0
  405f78:	f47f aba2 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  405f7c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405f7e:	46c8      	mov	r8, r9
  405f80:	e4ac      	b.n	4058dc <_svfprintf_r+0x3c0>
  405f82:	aa25      	add	r2, sp, #148	; 0x94
  405f84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405f86:	980c      	ldr	r0, [sp, #48]	; 0x30
  405f88:	f004 f9d2 	bl	40a330 <__ssprint_r>
  405f8c:	2800      	cmp	r0, #0
  405f8e:	f43f acee 	beq.w	40596e <_svfprintf_r+0x452>
  405f92:	f7ff bb95 	b.w	4056c0 <_svfprintf_r+0x1a4>
  405f96:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405f9a:	2b01      	cmp	r3, #1
  405f9c:	f000 8135 	beq.w	40620a <_svfprintf_r+0xcee>
  405fa0:	2b02      	cmp	r3, #2
  405fa2:	d125      	bne.n	405ff0 <_svfprintf_r+0xad4>
  405fa4:	f8cd b01c 	str.w	fp, [sp, #28]
  405fa8:	2400      	movs	r4, #0
  405faa:	2500      	movs	r5, #0
  405fac:	e621      	b.n	405bf2 <_svfprintf_r+0x6d6>
  405fae:	aa25      	add	r2, sp, #148	; 0x94
  405fb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fb2:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fb4:	f004 f9bc 	bl	40a330 <__ssprint_r>
  405fb8:	2800      	cmp	r0, #0
  405fba:	f47f ab81 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  405fbe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fc0:	46c8      	mov	r8, r9
  405fc2:	e478      	b.n	4058b6 <_svfprintf_r+0x39a>
  405fc4:	aa25      	add	r2, sp, #148	; 0x94
  405fc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fc8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fca:	f004 f9b1 	bl	40a330 <__ssprint_r>
  405fce:	2800      	cmp	r0, #0
  405fd0:	f47f ab76 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  405fd4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fd6:	46c8      	mov	r8, r9
  405fd8:	e41e      	b.n	405818 <_svfprintf_r+0x2fc>
  405fda:	aa25      	add	r2, sp, #148	; 0x94
  405fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405fde:	980c      	ldr	r0, [sp, #48]	; 0x30
  405fe0:	f004 f9a6 	bl	40a330 <__ssprint_r>
  405fe4:	2800      	cmp	r0, #0
  405fe6:	f47f ab6b 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  405fea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405fec:	46c8      	mov	r8, r9
  405fee:	e423      	b.n	405838 <_svfprintf_r+0x31c>
  405ff0:	f8cd b01c 	str.w	fp, [sp, #28]
  405ff4:	2400      	movs	r4, #0
  405ff6:	2500      	movs	r5, #0
  405ff8:	4649      	mov	r1, r9
  405ffa:	e000      	b.n	405ffe <_svfprintf_r+0xae2>
  405ffc:	4631      	mov	r1, r6
  405ffe:	08e2      	lsrs	r2, r4, #3
  406000:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  406004:	08e8      	lsrs	r0, r5, #3
  406006:	f004 0307 	and.w	r3, r4, #7
  40600a:	4605      	mov	r5, r0
  40600c:	4614      	mov	r4, r2
  40600e:	3330      	adds	r3, #48	; 0x30
  406010:	ea54 0205 	orrs.w	r2, r4, r5
  406014:	f801 3c01 	strb.w	r3, [r1, #-1]
  406018:	f101 36ff 	add.w	r6, r1, #4294967295
  40601c:	d1ee      	bne.n	405ffc <_svfprintf_r+0xae0>
  40601e:	9a07      	ldr	r2, [sp, #28]
  406020:	07d2      	lsls	r2, r2, #31
  406022:	f57f adf6 	bpl.w	405c12 <_svfprintf_r+0x6f6>
  406026:	2b30      	cmp	r3, #48	; 0x30
  406028:	f43f adf3 	beq.w	405c12 <_svfprintf_r+0x6f6>
  40602c:	3902      	subs	r1, #2
  40602e:	2330      	movs	r3, #48	; 0x30
  406030:	f806 3c01 	strb.w	r3, [r6, #-1]
  406034:	eba9 0301 	sub.w	r3, r9, r1
  406038:	930e      	str	r3, [sp, #56]	; 0x38
  40603a:	460e      	mov	r6, r1
  40603c:	f7ff bb7e 	b.w	40573c <_svfprintf_r+0x220>
  406040:	991f      	ldr	r1, [sp, #124]	; 0x7c
  406042:	2900      	cmp	r1, #0
  406044:	f340 822f 	ble.w	4064a6 <_svfprintf_r+0xf8a>
  406048:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40604a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40604c:	4293      	cmp	r3, r2
  40604e:	bfa8      	it	ge
  406050:	4613      	movge	r3, r2
  406052:	2b00      	cmp	r3, #0
  406054:	461f      	mov	r7, r3
  406056:	dd0d      	ble.n	406074 <_svfprintf_r+0xb58>
  406058:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40605a:	f8c8 6000 	str.w	r6, [r8]
  40605e:	3301      	adds	r3, #1
  406060:	443c      	add	r4, r7
  406062:	2b07      	cmp	r3, #7
  406064:	9427      	str	r4, [sp, #156]	; 0x9c
  406066:	f8c8 7004 	str.w	r7, [r8, #4]
  40606a:	9326      	str	r3, [sp, #152]	; 0x98
  40606c:	f300 8320 	bgt.w	4066b0 <_svfprintf_r+0x1194>
  406070:	f108 0808 	add.w	r8, r8, #8
  406074:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406076:	2f00      	cmp	r7, #0
  406078:	bfa8      	it	ge
  40607a:	1bdb      	subge	r3, r3, r7
  40607c:	2b00      	cmp	r3, #0
  40607e:	461f      	mov	r7, r3
  406080:	f340 80d7 	ble.w	406232 <_svfprintf_r+0xd16>
  406084:	2f10      	cmp	r7, #16
  406086:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406088:	4d31      	ldr	r5, [pc, #196]	; (406150 <_svfprintf_r+0xc34>)
  40608a:	f340 81ee 	ble.w	40646a <_svfprintf_r+0xf4e>
  40608e:	4642      	mov	r2, r8
  406090:	4621      	mov	r1, r4
  406092:	46b0      	mov	r8, r6
  406094:	f04f 0b10 	mov.w	fp, #16
  406098:	462e      	mov	r6, r5
  40609a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40609c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40609e:	e004      	b.n	4060aa <_svfprintf_r+0xb8e>
  4060a0:	3208      	adds	r2, #8
  4060a2:	3f10      	subs	r7, #16
  4060a4:	2f10      	cmp	r7, #16
  4060a6:	f340 81dc 	ble.w	406462 <_svfprintf_r+0xf46>
  4060aa:	3301      	adds	r3, #1
  4060ac:	3110      	adds	r1, #16
  4060ae:	2b07      	cmp	r3, #7
  4060b0:	9127      	str	r1, [sp, #156]	; 0x9c
  4060b2:	9326      	str	r3, [sp, #152]	; 0x98
  4060b4:	e882 0840 	stmia.w	r2, {r6, fp}
  4060b8:	ddf2      	ble.n	4060a0 <_svfprintf_r+0xb84>
  4060ba:	aa25      	add	r2, sp, #148	; 0x94
  4060bc:	4629      	mov	r1, r5
  4060be:	4620      	mov	r0, r4
  4060c0:	f004 f936 	bl	40a330 <__ssprint_r>
  4060c4:	2800      	cmp	r0, #0
  4060c6:	f47f aafb 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  4060ca:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4060cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4060ce:	464a      	mov	r2, r9
  4060d0:	e7e7      	b.n	4060a2 <_svfprintf_r+0xb86>
  4060d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060d4:	930e      	str	r3, [sp, #56]	; 0x38
  4060d6:	464e      	mov	r6, r9
  4060d8:	f7ff bb30 	b.w	40573c <_svfprintf_r+0x220>
  4060dc:	2d00      	cmp	r5, #0
  4060de:	bf08      	it	eq
  4060e0:	2c0a      	cmpeq	r4, #10
  4060e2:	f0c0 8090 	bcc.w	406206 <_svfprintf_r+0xcea>
  4060e6:	464e      	mov	r6, r9
  4060e8:	4620      	mov	r0, r4
  4060ea:	4629      	mov	r1, r5
  4060ec:	220a      	movs	r2, #10
  4060ee:	2300      	movs	r3, #0
  4060f0:	f004 fff8 	bl	40b0e4 <__aeabi_uldivmod>
  4060f4:	3230      	adds	r2, #48	; 0x30
  4060f6:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4060fa:	4620      	mov	r0, r4
  4060fc:	4629      	mov	r1, r5
  4060fe:	2300      	movs	r3, #0
  406100:	220a      	movs	r2, #10
  406102:	f004 ffef 	bl	40b0e4 <__aeabi_uldivmod>
  406106:	4604      	mov	r4, r0
  406108:	460d      	mov	r5, r1
  40610a:	ea54 0305 	orrs.w	r3, r4, r5
  40610e:	d1eb      	bne.n	4060e8 <_svfprintf_r+0xbcc>
  406110:	eba9 0306 	sub.w	r3, r9, r6
  406114:	930e      	str	r3, [sp, #56]	; 0x38
  406116:	f7ff bb11 	b.w	40573c <_svfprintf_r+0x220>
  40611a:	aa25      	add	r2, sp, #148	; 0x94
  40611c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40611e:	980c      	ldr	r0, [sp, #48]	; 0x30
  406120:	f004 f906 	bl	40a330 <__ssprint_r>
  406124:	2800      	cmp	r0, #0
  406126:	f47f aacb 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  40612a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40612e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406130:	46c8      	mov	r8, r9
  406132:	f7ff bb61 	b.w	4057f8 <_svfprintf_r+0x2dc>
  406136:	1e5e      	subs	r6, r3, #1
  406138:	2e00      	cmp	r6, #0
  40613a:	f77f af0a 	ble.w	405f52 <_svfprintf_r+0xa36>
  40613e:	2e10      	cmp	r6, #16
  406140:	4d03      	ldr	r5, [pc, #12]	; (406150 <_svfprintf_r+0xc34>)
  406142:	dd23      	ble.n	40618c <_svfprintf_r+0xc70>
  406144:	4622      	mov	r2, r4
  406146:	f04f 0b10 	mov.w	fp, #16
  40614a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40614c:	e007      	b.n	40615e <_svfprintf_r+0xc42>
  40614e:	bf00      	nop
  406150:	0040c470 	.word	0x0040c470
  406154:	3e10      	subs	r6, #16
  406156:	2e10      	cmp	r6, #16
  406158:	f108 0808 	add.w	r8, r8, #8
  40615c:	dd15      	ble.n	40618a <_svfprintf_r+0xc6e>
  40615e:	3701      	adds	r7, #1
  406160:	3210      	adds	r2, #16
  406162:	2f07      	cmp	r7, #7
  406164:	9227      	str	r2, [sp, #156]	; 0x9c
  406166:	9726      	str	r7, [sp, #152]	; 0x98
  406168:	e888 0820 	stmia.w	r8, {r5, fp}
  40616c:	ddf2      	ble.n	406154 <_svfprintf_r+0xc38>
  40616e:	aa25      	add	r2, sp, #148	; 0x94
  406170:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406172:	4620      	mov	r0, r4
  406174:	f004 f8dc 	bl	40a330 <__ssprint_r>
  406178:	2800      	cmp	r0, #0
  40617a:	f47f aaa1 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  40617e:	3e10      	subs	r6, #16
  406180:	2e10      	cmp	r6, #16
  406182:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406184:	9f26      	ldr	r7, [sp, #152]	; 0x98
  406186:	46c8      	mov	r8, r9
  406188:	dce9      	bgt.n	40615e <_svfprintf_r+0xc42>
  40618a:	4614      	mov	r4, r2
  40618c:	3701      	adds	r7, #1
  40618e:	4434      	add	r4, r6
  406190:	2f07      	cmp	r7, #7
  406192:	9427      	str	r4, [sp, #156]	; 0x9c
  406194:	9726      	str	r7, [sp, #152]	; 0x98
  406196:	e888 0060 	stmia.w	r8, {r5, r6}
  40619a:	f77f aed8 	ble.w	405f4e <_svfprintf_r+0xa32>
  40619e:	aa25      	add	r2, sp, #148	; 0x94
  4061a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4061a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4061a4:	f004 f8c4 	bl	40a330 <__ssprint_r>
  4061a8:	2800      	cmp	r0, #0
  4061aa:	f47f aa89 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  4061ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4061b0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4061b2:	46c8      	mov	r8, r9
  4061b4:	e6cd      	b.n	405f52 <_svfprintf_r+0xa36>
  4061b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4061b8:	6814      	ldr	r4, [r2, #0]
  4061ba:	4613      	mov	r3, r2
  4061bc:	3304      	adds	r3, #4
  4061be:	17e5      	asrs	r5, r4, #31
  4061c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4061c2:	4622      	mov	r2, r4
  4061c4:	462b      	mov	r3, r5
  4061c6:	e4fc      	b.n	405bc2 <_svfprintf_r+0x6a6>
  4061c8:	3204      	adds	r2, #4
  4061ca:	681c      	ldr	r4, [r3, #0]
  4061cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4061ce:	2301      	movs	r3, #1
  4061d0:	2500      	movs	r5, #0
  4061d2:	f7ff ba96 	b.w	405702 <_svfprintf_r+0x1e6>
  4061d6:	681c      	ldr	r4, [r3, #0]
  4061d8:	3304      	adds	r3, #4
  4061da:	930f      	str	r3, [sp, #60]	; 0x3c
  4061dc:	2500      	movs	r5, #0
  4061de:	e423      	b.n	405a28 <_svfprintf_r+0x50c>
  4061e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4061e2:	460a      	mov	r2, r1
  4061e4:	3204      	adds	r2, #4
  4061e6:	680c      	ldr	r4, [r1, #0]
  4061e8:	920f      	str	r2, [sp, #60]	; 0x3c
  4061ea:	2500      	movs	r5, #0
  4061ec:	f7ff ba89 	b.w	405702 <_svfprintf_r+0x1e6>
  4061f0:	4614      	mov	r4, r2
  4061f2:	3301      	adds	r3, #1
  4061f4:	4434      	add	r4, r6
  4061f6:	2b07      	cmp	r3, #7
  4061f8:	9427      	str	r4, [sp, #156]	; 0x9c
  4061fa:	9326      	str	r3, [sp, #152]	; 0x98
  4061fc:	e888 0060 	stmia.w	r8, {r5, r6}
  406200:	f77f ab6a 	ble.w	4058d8 <_svfprintf_r+0x3bc>
  406204:	e6b2      	b.n	405f6c <_svfprintf_r+0xa50>
  406206:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40620a:	f8cd b01c 	str.w	fp, [sp, #28]
  40620e:	ae42      	add	r6, sp, #264	; 0x108
  406210:	3430      	adds	r4, #48	; 0x30
  406212:	2301      	movs	r3, #1
  406214:	f806 4d41 	strb.w	r4, [r6, #-65]!
  406218:	930e      	str	r3, [sp, #56]	; 0x38
  40621a:	f7ff ba8f 	b.w	40573c <_svfprintf_r+0x220>
  40621e:	aa25      	add	r2, sp, #148	; 0x94
  406220:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406222:	980c      	ldr	r0, [sp, #48]	; 0x30
  406224:	f004 f884 	bl	40a330 <__ssprint_r>
  406228:	2800      	cmp	r0, #0
  40622a:	f47f aa49 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  40622e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406230:	46c8      	mov	r8, r9
  406232:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406236:	429a      	cmp	r2, r3
  406238:	db44      	blt.n	4062c4 <_svfprintf_r+0xda8>
  40623a:	9b07      	ldr	r3, [sp, #28]
  40623c:	07d9      	lsls	r1, r3, #31
  40623e:	d441      	bmi.n	4062c4 <_svfprintf_r+0xda8>
  406240:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406242:	9812      	ldr	r0, [sp, #72]	; 0x48
  406244:	1a9a      	subs	r2, r3, r2
  406246:	1a1d      	subs	r5, r3, r0
  406248:	4295      	cmp	r5, r2
  40624a:	bfa8      	it	ge
  40624c:	4615      	movge	r5, r2
  40624e:	2d00      	cmp	r5, #0
  406250:	dd0e      	ble.n	406270 <_svfprintf_r+0xd54>
  406252:	9926      	ldr	r1, [sp, #152]	; 0x98
  406254:	f8c8 5004 	str.w	r5, [r8, #4]
  406258:	3101      	adds	r1, #1
  40625a:	4406      	add	r6, r0
  40625c:	442c      	add	r4, r5
  40625e:	2907      	cmp	r1, #7
  406260:	f8c8 6000 	str.w	r6, [r8]
  406264:	9427      	str	r4, [sp, #156]	; 0x9c
  406266:	9126      	str	r1, [sp, #152]	; 0x98
  406268:	f300 823b 	bgt.w	4066e2 <_svfprintf_r+0x11c6>
  40626c:	f108 0808 	add.w	r8, r8, #8
  406270:	2d00      	cmp	r5, #0
  406272:	bfac      	ite	ge
  406274:	1b56      	subge	r6, r2, r5
  406276:	4616      	movlt	r6, r2
  406278:	2e00      	cmp	r6, #0
  40627a:	f77f ab2f 	ble.w	4058dc <_svfprintf_r+0x3c0>
  40627e:	2e10      	cmp	r6, #16
  406280:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406282:	4db0      	ldr	r5, [pc, #704]	; (406544 <_svfprintf_r+0x1028>)
  406284:	ddb5      	ble.n	4061f2 <_svfprintf_r+0xcd6>
  406286:	4622      	mov	r2, r4
  406288:	2710      	movs	r7, #16
  40628a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40628e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  406290:	e004      	b.n	40629c <_svfprintf_r+0xd80>
  406292:	f108 0808 	add.w	r8, r8, #8
  406296:	3e10      	subs	r6, #16
  406298:	2e10      	cmp	r6, #16
  40629a:	dda9      	ble.n	4061f0 <_svfprintf_r+0xcd4>
  40629c:	3301      	adds	r3, #1
  40629e:	3210      	adds	r2, #16
  4062a0:	2b07      	cmp	r3, #7
  4062a2:	9227      	str	r2, [sp, #156]	; 0x9c
  4062a4:	9326      	str	r3, [sp, #152]	; 0x98
  4062a6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4062aa:	ddf2      	ble.n	406292 <_svfprintf_r+0xd76>
  4062ac:	aa25      	add	r2, sp, #148	; 0x94
  4062ae:	4621      	mov	r1, r4
  4062b0:	4658      	mov	r0, fp
  4062b2:	f004 f83d 	bl	40a330 <__ssprint_r>
  4062b6:	2800      	cmp	r0, #0
  4062b8:	f47f aa02 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  4062bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4062be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4062c0:	46c8      	mov	r8, r9
  4062c2:	e7e8      	b.n	406296 <_svfprintf_r+0xd7a>
  4062c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4062c6:	9819      	ldr	r0, [sp, #100]	; 0x64
  4062c8:	991a      	ldr	r1, [sp, #104]	; 0x68
  4062ca:	f8c8 1000 	str.w	r1, [r8]
  4062ce:	3301      	adds	r3, #1
  4062d0:	4404      	add	r4, r0
  4062d2:	2b07      	cmp	r3, #7
  4062d4:	9427      	str	r4, [sp, #156]	; 0x9c
  4062d6:	f8c8 0004 	str.w	r0, [r8, #4]
  4062da:	9326      	str	r3, [sp, #152]	; 0x98
  4062dc:	f300 81f5 	bgt.w	4066ca <_svfprintf_r+0x11ae>
  4062e0:	f108 0808 	add.w	r8, r8, #8
  4062e4:	e7ac      	b.n	406240 <_svfprintf_r+0xd24>
  4062e6:	9b07      	ldr	r3, [sp, #28]
  4062e8:	07da      	lsls	r2, r3, #31
  4062ea:	f53f adfe 	bmi.w	405eea <_svfprintf_r+0x9ce>
  4062ee:	3701      	adds	r7, #1
  4062f0:	3401      	adds	r4, #1
  4062f2:	2301      	movs	r3, #1
  4062f4:	2f07      	cmp	r7, #7
  4062f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4062f8:	9726      	str	r7, [sp, #152]	; 0x98
  4062fa:	f8c8 6000 	str.w	r6, [r8]
  4062fe:	f8c8 3004 	str.w	r3, [r8, #4]
  406302:	f77f ae24 	ble.w	405f4e <_svfprintf_r+0xa32>
  406306:	e74a      	b.n	40619e <_svfprintf_r+0xc82>
  406308:	aa25      	add	r2, sp, #148	; 0x94
  40630a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40630c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40630e:	f004 f80f 	bl	40a330 <__ssprint_r>
  406312:	2800      	cmp	r0, #0
  406314:	f47f a9d4 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  406318:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40631a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40631c:	46c8      	mov	r8, r9
  40631e:	e5f2      	b.n	405f06 <_svfprintf_r+0x9ea>
  406320:	aa25      	add	r2, sp, #148	; 0x94
  406322:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406324:	980c      	ldr	r0, [sp, #48]	; 0x30
  406326:	f004 f803 	bl	40a330 <__ssprint_r>
  40632a:	2800      	cmp	r0, #0
  40632c:	f47f a9c8 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  406330:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406332:	9f26      	ldr	r7, [sp, #152]	; 0x98
  406334:	46c8      	mov	r8, r9
  406336:	e5f5      	b.n	405f24 <_svfprintf_r+0xa08>
  406338:	464e      	mov	r6, r9
  40633a:	f7ff b9ff 	b.w	40573c <_svfprintf_r+0x220>
  40633e:	aa25      	add	r2, sp, #148	; 0x94
  406340:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406342:	980c      	ldr	r0, [sp, #48]	; 0x30
  406344:	f003 fff4 	bl	40a330 <__ssprint_r>
  406348:	2800      	cmp	r0, #0
  40634a:	f47f a9b9 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  40634e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406350:	46c8      	mov	r8, r9
  406352:	f7ff ba74 	b.w	40583e <_svfprintf_r+0x322>
  406356:	9c14      	ldr	r4, [sp, #80]	; 0x50
  406358:	4622      	mov	r2, r4
  40635a:	4620      	mov	r0, r4
  40635c:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40635e:	4623      	mov	r3, r4
  406360:	4621      	mov	r1, r4
  406362:	f004 fe81 	bl	40b068 <__aeabi_dcmpun>
  406366:	2800      	cmp	r0, #0
  406368:	f040 8286 	bne.w	406878 <_svfprintf_r+0x135c>
  40636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40636e:	3301      	adds	r3, #1
  406370:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406372:	f023 0320 	bic.w	r3, r3, #32
  406376:	930e      	str	r3, [sp, #56]	; 0x38
  406378:	f000 81e2 	beq.w	406740 <_svfprintf_r+0x1224>
  40637c:	2b47      	cmp	r3, #71	; 0x47
  40637e:	f000 811e 	beq.w	4065be <_svfprintf_r+0x10a2>
  406382:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  406386:	9307      	str	r3, [sp, #28]
  406388:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40638a:	1e1f      	subs	r7, r3, #0
  40638c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40638e:	9308      	str	r3, [sp, #32]
  406390:	bfbb      	ittet	lt
  406392:	463b      	movlt	r3, r7
  406394:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  406398:	2300      	movge	r3, #0
  40639a:	232d      	movlt	r3, #45	; 0x2d
  40639c:	9310      	str	r3, [sp, #64]	; 0x40
  40639e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4063a0:	2b66      	cmp	r3, #102	; 0x66
  4063a2:	f000 81bb 	beq.w	40671c <_svfprintf_r+0x1200>
  4063a6:	2b46      	cmp	r3, #70	; 0x46
  4063a8:	f000 80df 	beq.w	40656a <_svfprintf_r+0x104e>
  4063ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4063ae:	9a08      	ldr	r2, [sp, #32]
  4063b0:	2b45      	cmp	r3, #69	; 0x45
  4063b2:	bf0c      	ite	eq
  4063b4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4063b6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4063b8:	a823      	add	r0, sp, #140	; 0x8c
  4063ba:	a920      	add	r1, sp, #128	; 0x80
  4063bc:	bf08      	it	eq
  4063be:	1c5d      	addeq	r5, r3, #1
  4063c0:	9004      	str	r0, [sp, #16]
  4063c2:	9103      	str	r1, [sp, #12]
  4063c4:	a81f      	add	r0, sp, #124	; 0x7c
  4063c6:	2102      	movs	r1, #2
  4063c8:	463b      	mov	r3, r7
  4063ca:	9002      	str	r0, [sp, #8]
  4063cc:	9501      	str	r5, [sp, #4]
  4063ce:	9100      	str	r1, [sp, #0]
  4063d0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4063d2:	f001 fa49 	bl	407868 <_dtoa_r>
  4063d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4063d8:	2b67      	cmp	r3, #103	; 0x67
  4063da:	4606      	mov	r6, r0
  4063dc:	f040 81e0 	bne.w	4067a0 <_svfprintf_r+0x1284>
  4063e0:	f01b 0f01 	tst.w	fp, #1
  4063e4:	f000 8246 	beq.w	406874 <_svfprintf_r+0x1358>
  4063e8:	1974      	adds	r4, r6, r5
  4063ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4063ec:	9808      	ldr	r0, [sp, #32]
  4063ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4063f0:	4639      	mov	r1, r7
  4063f2:	f004 fe07 	bl	40b004 <__aeabi_dcmpeq>
  4063f6:	2800      	cmp	r0, #0
  4063f8:	f040 8165 	bne.w	4066c6 <_svfprintf_r+0x11aa>
  4063fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4063fe:	42a3      	cmp	r3, r4
  406400:	d206      	bcs.n	406410 <_svfprintf_r+0xef4>
  406402:	2130      	movs	r1, #48	; 0x30
  406404:	1c5a      	adds	r2, r3, #1
  406406:	9223      	str	r2, [sp, #140]	; 0x8c
  406408:	7019      	strb	r1, [r3, #0]
  40640a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40640c:	429c      	cmp	r4, r3
  40640e:	d8f9      	bhi.n	406404 <_svfprintf_r+0xee8>
  406410:	1b9b      	subs	r3, r3, r6
  406412:	9313      	str	r3, [sp, #76]	; 0x4c
  406414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406416:	2b47      	cmp	r3, #71	; 0x47
  406418:	f000 80e9 	beq.w	4065ee <_svfprintf_r+0x10d2>
  40641c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40641e:	2b65      	cmp	r3, #101	; 0x65
  406420:	f340 81cd 	ble.w	4067be <_svfprintf_r+0x12a2>
  406424:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406426:	2b66      	cmp	r3, #102	; 0x66
  406428:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40642a:	9312      	str	r3, [sp, #72]	; 0x48
  40642c:	f000 819e 	beq.w	40676c <_svfprintf_r+0x1250>
  406430:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406432:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406434:	4619      	mov	r1, r3
  406436:	4291      	cmp	r1, r2
  406438:	f300 818a 	bgt.w	406750 <_svfprintf_r+0x1234>
  40643c:	f01b 0f01 	tst.w	fp, #1
  406440:	f040 8213 	bne.w	40686a <_svfprintf_r+0x134e>
  406444:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406448:	9308      	str	r3, [sp, #32]
  40644a:	2367      	movs	r3, #103	; 0x67
  40644c:	920e      	str	r2, [sp, #56]	; 0x38
  40644e:	9311      	str	r3, [sp, #68]	; 0x44
  406450:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406452:	2b00      	cmp	r3, #0
  406454:	f040 80c4 	bne.w	4065e0 <_svfprintf_r+0x10c4>
  406458:	930a      	str	r3, [sp, #40]	; 0x28
  40645a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40645e:	f7ff b975 	b.w	40574c <_svfprintf_r+0x230>
  406462:	4635      	mov	r5, r6
  406464:	460c      	mov	r4, r1
  406466:	4646      	mov	r6, r8
  406468:	4690      	mov	r8, r2
  40646a:	3301      	adds	r3, #1
  40646c:	443c      	add	r4, r7
  40646e:	2b07      	cmp	r3, #7
  406470:	9427      	str	r4, [sp, #156]	; 0x9c
  406472:	9326      	str	r3, [sp, #152]	; 0x98
  406474:	e888 00a0 	stmia.w	r8, {r5, r7}
  406478:	f73f aed1 	bgt.w	40621e <_svfprintf_r+0xd02>
  40647c:	f108 0808 	add.w	r8, r8, #8
  406480:	e6d7      	b.n	406232 <_svfprintf_r+0xd16>
  406482:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406484:	6813      	ldr	r3, [r2, #0]
  406486:	3204      	adds	r2, #4
  406488:	920f      	str	r2, [sp, #60]	; 0x3c
  40648a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40648c:	601a      	str	r2, [r3, #0]
  40648e:	f7ff b86c 	b.w	40556a <_svfprintf_r+0x4e>
  406492:	aa25      	add	r2, sp, #148	; 0x94
  406494:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406496:	980c      	ldr	r0, [sp, #48]	; 0x30
  406498:	f003 ff4a 	bl	40a330 <__ssprint_r>
  40649c:	2800      	cmp	r0, #0
  40649e:	f47f a90f 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  4064a2:	46c8      	mov	r8, r9
  4064a4:	e48d      	b.n	405dc2 <_svfprintf_r+0x8a6>
  4064a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4064a8:	4a27      	ldr	r2, [pc, #156]	; (406548 <_svfprintf_r+0x102c>)
  4064aa:	f8c8 2000 	str.w	r2, [r8]
  4064ae:	3301      	adds	r3, #1
  4064b0:	3401      	adds	r4, #1
  4064b2:	2201      	movs	r2, #1
  4064b4:	2b07      	cmp	r3, #7
  4064b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4064b8:	9326      	str	r3, [sp, #152]	; 0x98
  4064ba:	f8c8 2004 	str.w	r2, [r8, #4]
  4064be:	dc72      	bgt.n	4065a6 <_svfprintf_r+0x108a>
  4064c0:	f108 0808 	add.w	r8, r8, #8
  4064c4:	b929      	cbnz	r1, 4064d2 <_svfprintf_r+0xfb6>
  4064c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4064c8:	b91b      	cbnz	r3, 4064d2 <_svfprintf_r+0xfb6>
  4064ca:	9b07      	ldr	r3, [sp, #28]
  4064cc:	07d8      	lsls	r0, r3, #31
  4064ce:	f57f aa05 	bpl.w	4058dc <_svfprintf_r+0x3c0>
  4064d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4064d4:	9819      	ldr	r0, [sp, #100]	; 0x64
  4064d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4064d8:	f8c8 2000 	str.w	r2, [r8]
  4064dc:	3301      	adds	r3, #1
  4064de:	4602      	mov	r2, r0
  4064e0:	4422      	add	r2, r4
  4064e2:	2b07      	cmp	r3, #7
  4064e4:	9227      	str	r2, [sp, #156]	; 0x9c
  4064e6:	f8c8 0004 	str.w	r0, [r8, #4]
  4064ea:	9326      	str	r3, [sp, #152]	; 0x98
  4064ec:	f300 818d 	bgt.w	40680a <_svfprintf_r+0x12ee>
  4064f0:	f108 0808 	add.w	r8, r8, #8
  4064f4:	2900      	cmp	r1, #0
  4064f6:	f2c0 8165 	blt.w	4067c4 <_svfprintf_r+0x12a8>
  4064fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4064fc:	f8c8 6000 	str.w	r6, [r8]
  406500:	3301      	adds	r3, #1
  406502:	188c      	adds	r4, r1, r2
  406504:	2b07      	cmp	r3, #7
  406506:	9427      	str	r4, [sp, #156]	; 0x9c
  406508:	9326      	str	r3, [sp, #152]	; 0x98
  40650a:	f8c8 1004 	str.w	r1, [r8, #4]
  40650e:	f77f a9e3 	ble.w	4058d8 <_svfprintf_r+0x3bc>
  406512:	e52b      	b.n	405f6c <_svfprintf_r+0xa50>
  406514:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406516:	9909      	ldr	r1, [sp, #36]	; 0x24
  406518:	6813      	ldr	r3, [r2, #0]
  40651a:	17cd      	asrs	r5, r1, #31
  40651c:	4608      	mov	r0, r1
  40651e:	3204      	adds	r2, #4
  406520:	4629      	mov	r1, r5
  406522:	920f      	str	r2, [sp, #60]	; 0x3c
  406524:	e9c3 0100 	strd	r0, r1, [r3]
  406528:	f7ff b81f 	b.w	40556a <_svfprintf_r+0x4e>
  40652c:	aa25      	add	r2, sp, #148	; 0x94
  40652e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406530:	980c      	ldr	r0, [sp, #48]	; 0x30
  406532:	f003 fefd 	bl	40a330 <__ssprint_r>
  406536:	2800      	cmp	r0, #0
  406538:	f47f a8c2 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  40653c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40653e:	46c8      	mov	r8, r9
  406540:	e458      	b.n	405df4 <_svfprintf_r+0x8d8>
  406542:	bf00      	nop
  406544:	0040c470 	.word	0x0040c470
  406548:	0040c45c 	.word	0x0040c45c
  40654c:	2140      	movs	r1, #64	; 0x40
  40654e:	980c      	ldr	r0, [sp, #48]	; 0x30
  406550:	f002 fddc 	bl	40910c <_malloc_r>
  406554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406556:	6010      	str	r0, [r2, #0]
  406558:	6110      	str	r0, [r2, #16]
  40655a:	2800      	cmp	r0, #0
  40655c:	f000 81ec 	beq.w	406938 <_svfprintf_r+0x141c>
  406560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406562:	2340      	movs	r3, #64	; 0x40
  406564:	6153      	str	r3, [r2, #20]
  406566:	f7fe bff0 	b.w	40554a <_svfprintf_r+0x2e>
  40656a:	a823      	add	r0, sp, #140	; 0x8c
  40656c:	a920      	add	r1, sp, #128	; 0x80
  40656e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406570:	9004      	str	r0, [sp, #16]
  406572:	9103      	str	r1, [sp, #12]
  406574:	a81f      	add	r0, sp, #124	; 0x7c
  406576:	2103      	movs	r1, #3
  406578:	9002      	str	r0, [sp, #8]
  40657a:	9a08      	ldr	r2, [sp, #32]
  40657c:	9401      	str	r4, [sp, #4]
  40657e:	463b      	mov	r3, r7
  406580:	9100      	str	r1, [sp, #0]
  406582:	980c      	ldr	r0, [sp, #48]	; 0x30
  406584:	f001 f970 	bl	407868 <_dtoa_r>
  406588:	4625      	mov	r5, r4
  40658a:	4606      	mov	r6, r0
  40658c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40658e:	2b46      	cmp	r3, #70	; 0x46
  406590:	eb06 0405 	add.w	r4, r6, r5
  406594:	f47f af29 	bne.w	4063ea <_svfprintf_r+0xece>
  406598:	7833      	ldrb	r3, [r6, #0]
  40659a:	2b30      	cmp	r3, #48	; 0x30
  40659c:	f000 8172 	beq.w	406884 <_svfprintf_r+0x1368>
  4065a0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4065a2:	442c      	add	r4, r5
  4065a4:	e721      	b.n	4063ea <_svfprintf_r+0xece>
  4065a6:	aa25      	add	r2, sp, #148	; 0x94
  4065a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4065aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4065ac:	f003 fec0 	bl	40a330 <__ssprint_r>
  4065b0:	2800      	cmp	r0, #0
  4065b2:	f47f a885 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  4065b6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4065b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4065ba:	46c8      	mov	r8, r9
  4065bc:	e782      	b.n	4064c4 <_svfprintf_r+0xfa8>
  4065be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4065c0:	2b00      	cmp	r3, #0
  4065c2:	bf08      	it	eq
  4065c4:	2301      	moveq	r3, #1
  4065c6:	930a      	str	r3, [sp, #40]	; 0x28
  4065c8:	e6db      	b.n	406382 <_svfprintf_r+0xe66>
  4065ca:	4630      	mov	r0, r6
  4065cc:	940a      	str	r4, [sp, #40]	; 0x28
  4065ce:	f7fe ff37 	bl	405440 <strlen>
  4065d2:	950f      	str	r5, [sp, #60]	; 0x3c
  4065d4:	900e      	str	r0, [sp, #56]	; 0x38
  4065d6:	f8cd b01c 	str.w	fp, [sp, #28]
  4065da:	4603      	mov	r3, r0
  4065dc:	f7ff b9fb 	b.w	4059d6 <_svfprintf_r+0x4ba>
  4065e0:	272d      	movs	r7, #45	; 0x2d
  4065e2:	2300      	movs	r3, #0
  4065e4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4065e8:	930a      	str	r3, [sp, #40]	; 0x28
  4065ea:	f7ff b8b0 	b.w	40574e <_svfprintf_r+0x232>
  4065ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4065f0:	9312      	str	r3, [sp, #72]	; 0x48
  4065f2:	461a      	mov	r2, r3
  4065f4:	3303      	adds	r3, #3
  4065f6:	db04      	blt.n	406602 <_svfprintf_r+0x10e6>
  4065f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4065fa:	4619      	mov	r1, r3
  4065fc:	4291      	cmp	r1, r2
  4065fe:	f6bf af17 	bge.w	406430 <_svfprintf_r+0xf14>
  406602:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406604:	3b02      	subs	r3, #2
  406606:	9311      	str	r3, [sp, #68]	; 0x44
  406608:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40660c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  406610:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406612:	3b01      	subs	r3, #1
  406614:	2b00      	cmp	r3, #0
  406616:	931f      	str	r3, [sp, #124]	; 0x7c
  406618:	bfbd      	ittte	lt
  40661a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40661c:	f1c3 0301 	rsblt	r3, r3, #1
  406620:	222d      	movlt	r2, #45	; 0x2d
  406622:	222b      	movge	r2, #43	; 0x2b
  406624:	2b09      	cmp	r3, #9
  406626:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40662a:	f340 8116 	ble.w	40685a <_svfprintf_r+0x133e>
  40662e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  406632:	4620      	mov	r0, r4
  406634:	4dad      	ldr	r5, [pc, #692]	; (4068ec <_svfprintf_r+0x13d0>)
  406636:	e000      	b.n	40663a <_svfprintf_r+0x111e>
  406638:	4610      	mov	r0, r2
  40663a:	fb85 1203 	smull	r1, r2, r5, r3
  40663e:	17d9      	asrs	r1, r3, #31
  406640:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  406644:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  406648:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40664c:	3230      	adds	r2, #48	; 0x30
  40664e:	2909      	cmp	r1, #9
  406650:	f800 2c01 	strb.w	r2, [r0, #-1]
  406654:	460b      	mov	r3, r1
  406656:	f100 32ff 	add.w	r2, r0, #4294967295
  40665a:	dced      	bgt.n	406638 <_svfprintf_r+0x111c>
  40665c:	3330      	adds	r3, #48	; 0x30
  40665e:	3802      	subs	r0, #2
  406660:	b2d9      	uxtb	r1, r3
  406662:	4284      	cmp	r4, r0
  406664:	f802 1c01 	strb.w	r1, [r2, #-1]
  406668:	f240 815f 	bls.w	40692a <_svfprintf_r+0x140e>
  40666c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  406670:	4613      	mov	r3, r2
  406672:	e001      	b.n	406678 <_svfprintf_r+0x115c>
  406674:	f813 1b01 	ldrb.w	r1, [r3], #1
  406678:	f800 1b01 	strb.w	r1, [r0], #1
  40667c:	42a3      	cmp	r3, r4
  40667e:	d1f9      	bne.n	406674 <_svfprintf_r+0x1158>
  406680:	3301      	adds	r3, #1
  406682:	1a9b      	subs	r3, r3, r2
  406684:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  406688:	4413      	add	r3, r2
  40668a:	aa21      	add	r2, sp, #132	; 0x84
  40668c:	1a9b      	subs	r3, r3, r2
  40668e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  406690:	931b      	str	r3, [sp, #108]	; 0x6c
  406692:	2a01      	cmp	r2, #1
  406694:	4413      	add	r3, r2
  406696:	930e      	str	r3, [sp, #56]	; 0x38
  406698:	f340 8113 	ble.w	4068c2 <_svfprintf_r+0x13a6>
  40669c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40669e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4066a0:	4413      	add	r3, r2
  4066a2:	930e      	str	r3, [sp, #56]	; 0x38
  4066a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4066a8:	9308      	str	r3, [sp, #32]
  4066aa:	2300      	movs	r3, #0
  4066ac:	9312      	str	r3, [sp, #72]	; 0x48
  4066ae:	e6cf      	b.n	406450 <_svfprintf_r+0xf34>
  4066b0:	aa25      	add	r2, sp, #148	; 0x94
  4066b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4066b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4066b6:	f003 fe3b 	bl	40a330 <__ssprint_r>
  4066ba:	2800      	cmp	r0, #0
  4066bc:	f47f a800 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  4066c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4066c2:	46c8      	mov	r8, r9
  4066c4:	e4d6      	b.n	406074 <_svfprintf_r+0xb58>
  4066c6:	4623      	mov	r3, r4
  4066c8:	e6a2      	b.n	406410 <_svfprintf_r+0xef4>
  4066ca:	aa25      	add	r2, sp, #148	; 0x94
  4066cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4066ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4066d0:	f003 fe2e 	bl	40a330 <__ssprint_r>
  4066d4:	2800      	cmp	r0, #0
  4066d6:	f47e aff3 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  4066da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4066dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4066de:	46c8      	mov	r8, r9
  4066e0:	e5ae      	b.n	406240 <_svfprintf_r+0xd24>
  4066e2:	aa25      	add	r2, sp, #148	; 0x94
  4066e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4066e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4066e8:	f003 fe22 	bl	40a330 <__ssprint_r>
  4066ec:	2800      	cmp	r0, #0
  4066ee:	f47e afe7 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  4066f2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4066f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4066f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4066f8:	1a9a      	subs	r2, r3, r2
  4066fa:	46c8      	mov	r8, r9
  4066fc:	e5b8      	b.n	406270 <_svfprintf_r+0xd54>
  4066fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406700:	9612      	str	r6, [sp, #72]	; 0x48
  406702:	2b06      	cmp	r3, #6
  406704:	bf28      	it	cs
  406706:	2306      	movcs	r3, #6
  406708:	960a      	str	r6, [sp, #40]	; 0x28
  40670a:	4637      	mov	r7, r6
  40670c:	9308      	str	r3, [sp, #32]
  40670e:	950f      	str	r5, [sp, #60]	; 0x3c
  406710:	f8cd b01c 	str.w	fp, [sp, #28]
  406714:	930e      	str	r3, [sp, #56]	; 0x38
  406716:	4e76      	ldr	r6, [pc, #472]	; (4068f0 <_svfprintf_r+0x13d4>)
  406718:	f7ff b818 	b.w	40574c <_svfprintf_r+0x230>
  40671c:	a823      	add	r0, sp, #140	; 0x8c
  40671e:	a920      	add	r1, sp, #128	; 0x80
  406720:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406722:	9004      	str	r0, [sp, #16]
  406724:	9103      	str	r1, [sp, #12]
  406726:	a81f      	add	r0, sp, #124	; 0x7c
  406728:	2103      	movs	r1, #3
  40672a:	9002      	str	r0, [sp, #8]
  40672c:	9a08      	ldr	r2, [sp, #32]
  40672e:	9501      	str	r5, [sp, #4]
  406730:	463b      	mov	r3, r7
  406732:	9100      	str	r1, [sp, #0]
  406734:	980c      	ldr	r0, [sp, #48]	; 0x30
  406736:	f001 f897 	bl	407868 <_dtoa_r>
  40673a:	4606      	mov	r6, r0
  40673c:	1944      	adds	r4, r0, r5
  40673e:	e72b      	b.n	406598 <_svfprintf_r+0x107c>
  406740:	2306      	movs	r3, #6
  406742:	930a      	str	r3, [sp, #40]	; 0x28
  406744:	e61d      	b.n	406382 <_svfprintf_r+0xe66>
  406746:	272d      	movs	r7, #45	; 0x2d
  406748:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40674c:	f7ff bace 	b.w	405cec <_svfprintf_r+0x7d0>
  406750:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406752:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406754:	4413      	add	r3, r2
  406756:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406758:	930e      	str	r3, [sp, #56]	; 0x38
  40675a:	2a00      	cmp	r2, #0
  40675c:	f340 80aa 	ble.w	4068b4 <_svfprintf_r+0x1398>
  406760:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406764:	9308      	str	r3, [sp, #32]
  406766:	2367      	movs	r3, #103	; 0x67
  406768:	9311      	str	r3, [sp, #68]	; 0x44
  40676a:	e671      	b.n	406450 <_svfprintf_r+0xf34>
  40676c:	2b00      	cmp	r3, #0
  40676e:	f340 80b2 	ble.w	4068d6 <_svfprintf_r+0x13ba>
  406772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406774:	2a00      	cmp	r2, #0
  406776:	f040 8093 	bne.w	4068a0 <_svfprintf_r+0x1384>
  40677a:	f01b 0f01 	tst.w	fp, #1
  40677e:	f040 808f 	bne.w	4068a0 <_svfprintf_r+0x1384>
  406782:	9308      	str	r3, [sp, #32]
  406784:	930e      	str	r3, [sp, #56]	; 0x38
  406786:	e663      	b.n	406450 <_svfprintf_r+0xf34>
  406788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40678a:	9308      	str	r3, [sp, #32]
  40678c:	930e      	str	r3, [sp, #56]	; 0x38
  40678e:	900a      	str	r0, [sp, #40]	; 0x28
  406790:	950f      	str	r5, [sp, #60]	; 0x3c
  406792:	f8cd b01c 	str.w	fp, [sp, #28]
  406796:	9012      	str	r0, [sp, #72]	; 0x48
  406798:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40679c:	f7fe bfd6 	b.w	40574c <_svfprintf_r+0x230>
  4067a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4067a2:	2b47      	cmp	r3, #71	; 0x47
  4067a4:	f47f ae20 	bne.w	4063e8 <_svfprintf_r+0xecc>
  4067a8:	f01b 0f01 	tst.w	fp, #1
  4067ac:	f47f aeee 	bne.w	40658c <_svfprintf_r+0x1070>
  4067b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4067b2:	1b9b      	subs	r3, r3, r6
  4067b4:	9313      	str	r3, [sp, #76]	; 0x4c
  4067b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4067b8:	2b47      	cmp	r3, #71	; 0x47
  4067ba:	f43f af18 	beq.w	4065ee <_svfprintf_r+0x10d2>
  4067be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4067c0:	9312      	str	r3, [sp, #72]	; 0x48
  4067c2:	e721      	b.n	406608 <_svfprintf_r+0x10ec>
  4067c4:	424f      	negs	r7, r1
  4067c6:	3110      	adds	r1, #16
  4067c8:	4d4a      	ldr	r5, [pc, #296]	; (4068f4 <_svfprintf_r+0x13d8>)
  4067ca:	da2f      	bge.n	40682c <_svfprintf_r+0x1310>
  4067cc:	2410      	movs	r4, #16
  4067ce:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4067d2:	e004      	b.n	4067de <_svfprintf_r+0x12c2>
  4067d4:	f108 0808 	add.w	r8, r8, #8
  4067d8:	3f10      	subs	r7, #16
  4067da:	2f10      	cmp	r7, #16
  4067dc:	dd26      	ble.n	40682c <_svfprintf_r+0x1310>
  4067de:	3301      	adds	r3, #1
  4067e0:	3210      	adds	r2, #16
  4067e2:	2b07      	cmp	r3, #7
  4067e4:	9227      	str	r2, [sp, #156]	; 0x9c
  4067e6:	9326      	str	r3, [sp, #152]	; 0x98
  4067e8:	f8c8 5000 	str.w	r5, [r8]
  4067ec:	f8c8 4004 	str.w	r4, [r8, #4]
  4067f0:	ddf0      	ble.n	4067d4 <_svfprintf_r+0x12b8>
  4067f2:	aa25      	add	r2, sp, #148	; 0x94
  4067f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4067f6:	4658      	mov	r0, fp
  4067f8:	f003 fd9a 	bl	40a330 <__ssprint_r>
  4067fc:	2800      	cmp	r0, #0
  4067fe:	f47e af5f 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  406802:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406804:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406806:	46c8      	mov	r8, r9
  406808:	e7e6      	b.n	4067d8 <_svfprintf_r+0x12bc>
  40680a:	aa25      	add	r2, sp, #148	; 0x94
  40680c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40680e:	980c      	ldr	r0, [sp, #48]	; 0x30
  406810:	f003 fd8e 	bl	40a330 <__ssprint_r>
  406814:	2800      	cmp	r0, #0
  406816:	f47e af53 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  40681a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40681c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40681e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406820:	46c8      	mov	r8, r9
  406822:	e667      	b.n	4064f4 <_svfprintf_r+0xfd8>
  406824:	2000      	movs	r0, #0
  406826:	900a      	str	r0, [sp, #40]	; 0x28
  406828:	f7fe bed2 	b.w	4055d0 <_svfprintf_r+0xb4>
  40682c:	3301      	adds	r3, #1
  40682e:	443a      	add	r2, r7
  406830:	2b07      	cmp	r3, #7
  406832:	e888 00a0 	stmia.w	r8, {r5, r7}
  406836:	9227      	str	r2, [sp, #156]	; 0x9c
  406838:	9326      	str	r3, [sp, #152]	; 0x98
  40683a:	f108 0808 	add.w	r8, r8, #8
  40683e:	f77f ae5c 	ble.w	4064fa <_svfprintf_r+0xfde>
  406842:	aa25      	add	r2, sp, #148	; 0x94
  406844:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406846:	980c      	ldr	r0, [sp, #48]	; 0x30
  406848:	f003 fd72 	bl	40a330 <__ssprint_r>
  40684c:	2800      	cmp	r0, #0
  40684e:	f47e af37 	bne.w	4056c0 <_svfprintf_r+0x1a4>
  406852:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406854:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406856:	46c8      	mov	r8, r9
  406858:	e64f      	b.n	4064fa <_svfprintf_r+0xfde>
  40685a:	3330      	adds	r3, #48	; 0x30
  40685c:	2230      	movs	r2, #48	; 0x30
  40685e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  406862:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  406866:	ab22      	add	r3, sp, #136	; 0x88
  406868:	e70f      	b.n	40668a <_svfprintf_r+0x116e>
  40686a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40686c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40686e:	4413      	add	r3, r2
  406870:	930e      	str	r3, [sp, #56]	; 0x38
  406872:	e775      	b.n	406760 <_svfprintf_r+0x1244>
  406874:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406876:	e5cb      	b.n	406410 <_svfprintf_r+0xef4>
  406878:	4e1f      	ldr	r6, [pc, #124]	; (4068f8 <_svfprintf_r+0x13dc>)
  40687a:	4b20      	ldr	r3, [pc, #128]	; (4068fc <_svfprintf_r+0x13e0>)
  40687c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406880:	f7ff ba36 	b.w	405cf0 <_svfprintf_r+0x7d4>
  406884:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406886:	9808      	ldr	r0, [sp, #32]
  406888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40688a:	4639      	mov	r1, r7
  40688c:	f004 fbba 	bl	40b004 <__aeabi_dcmpeq>
  406890:	2800      	cmp	r0, #0
  406892:	f47f ae85 	bne.w	4065a0 <_svfprintf_r+0x1084>
  406896:	f1c5 0501 	rsb	r5, r5, #1
  40689a:	951f      	str	r5, [sp, #124]	; 0x7c
  40689c:	442c      	add	r4, r5
  40689e:	e5a4      	b.n	4063ea <_svfprintf_r+0xece>
  4068a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4068a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4068a4:	4413      	add	r3, r2
  4068a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4068a8:	441a      	add	r2, r3
  4068aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4068ae:	920e      	str	r2, [sp, #56]	; 0x38
  4068b0:	9308      	str	r3, [sp, #32]
  4068b2:	e5cd      	b.n	406450 <_svfprintf_r+0xf34>
  4068b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4068b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4068b8:	f1c3 0301 	rsb	r3, r3, #1
  4068bc:	441a      	add	r2, r3
  4068be:	4613      	mov	r3, r2
  4068c0:	e7d6      	b.n	406870 <_svfprintf_r+0x1354>
  4068c2:	f01b 0301 	ands.w	r3, fp, #1
  4068c6:	9312      	str	r3, [sp, #72]	; 0x48
  4068c8:	f47f aee8 	bne.w	40669c <_svfprintf_r+0x1180>
  4068cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4068ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4068d2:	9308      	str	r3, [sp, #32]
  4068d4:	e5bc      	b.n	406450 <_svfprintf_r+0xf34>
  4068d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4068d8:	b913      	cbnz	r3, 4068e0 <_svfprintf_r+0x13c4>
  4068da:	f01b 0f01 	tst.w	fp, #1
  4068de:	d002      	beq.n	4068e6 <_svfprintf_r+0x13ca>
  4068e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4068e2:	3301      	adds	r3, #1
  4068e4:	e7df      	b.n	4068a6 <_svfprintf_r+0x138a>
  4068e6:	2301      	movs	r3, #1
  4068e8:	e74b      	b.n	406782 <_svfprintf_r+0x1266>
  4068ea:	bf00      	nop
  4068ec:	66666667 	.word	0x66666667
  4068f0:	0040c454 	.word	0x0040c454
  4068f4:	0040c470 	.word	0x0040c470
  4068f8:	0040c428 	.word	0x0040c428
  4068fc:	0040c424 	.word	0x0040c424
  406900:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406902:	f89a 3001 	ldrb.w	r3, [sl, #1]
  406906:	6828      	ldr	r0, [r5, #0]
  406908:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40690c:	900a      	str	r0, [sp, #40]	; 0x28
  40690e:	4628      	mov	r0, r5
  406910:	3004      	adds	r0, #4
  406912:	46a2      	mov	sl, r4
  406914:	900f      	str	r0, [sp, #60]	; 0x3c
  406916:	f7fe be59 	b.w	4055cc <_svfprintf_r+0xb0>
  40691a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40691e:	f7ff b86f 	b.w	405a00 <_svfprintf_r+0x4e4>
  406922:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406926:	f7ff ba1c 	b.w	405d62 <_svfprintf_r+0x846>
  40692a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40692e:	e6ac      	b.n	40668a <_svfprintf_r+0x116e>
  406930:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406934:	f7ff b8f3 	b.w	405b1e <_svfprintf_r+0x602>
  406938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40693a:	230c      	movs	r3, #12
  40693c:	6013      	str	r3, [r2, #0]
  40693e:	f04f 33ff 	mov.w	r3, #4294967295
  406942:	9309      	str	r3, [sp, #36]	; 0x24
  406944:	f7fe bec5 	b.w	4056d2 <_svfprintf_r+0x1b6>
  406948:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40694c:	f7ff b9a2 	b.w	405c94 <_svfprintf_r+0x778>
  406950:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406954:	f7ff b97e 	b.w	405c54 <_svfprintf_r+0x738>
  406958:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40695c:	f7ff b961 	b.w	405c22 <_svfprintf_r+0x706>
  406960:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406964:	f7ff b91a 	b.w	405b9c <_svfprintf_r+0x680>

00406968 <__sprint_r.part.0>:
  406968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40696c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40696e:	049c      	lsls	r4, r3, #18
  406970:	4693      	mov	fp, r2
  406972:	d52f      	bpl.n	4069d4 <__sprint_r.part.0+0x6c>
  406974:	6893      	ldr	r3, [r2, #8]
  406976:	6812      	ldr	r2, [r2, #0]
  406978:	b353      	cbz	r3, 4069d0 <__sprint_r.part.0+0x68>
  40697a:	460e      	mov	r6, r1
  40697c:	4607      	mov	r7, r0
  40697e:	f102 0908 	add.w	r9, r2, #8
  406982:	e919 0420 	ldmdb	r9, {r5, sl}
  406986:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40698a:	d017      	beq.n	4069bc <__sprint_r.part.0+0x54>
  40698c:	3d04      	subs	r5, #4
  40698e:	2400      	movs	r4, #0
  406990:	e001      	b.n	406996 <__sprint_r.part.0+0x2e>
  406992:	45a0      	cmp	r8, r4
  406994:	d010      	beq.n	4069b8 <__sprint_r.part.0+0x50>
  406996:	4632      	mov	r2, r6
  406998:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40699c:	4638      	mov	r0, r7
  40699e:	f002 f835 	bl	408a0c <_fputwc_r>
  4069a2:	1c43      	adds	r3, r0, #1
  4069a4:	f104 0401 	add.w	r4, r4, #1
  4069a8:	d1f3      	bne.n	406992 <__sprint_r.part.0+0x2a>
  4069aa:	2300      	movs	r3, #0
  4069ac:	f8cb 3008 	str.w	r3, [fp, #8]
  4069b0:	f8cb 3004 	str.w	r3, [fp, #4]
  4069b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4069b8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4069bc:	f02a 0a03 	bic.w	sl, sl, #3
  4069c0:	eba3 030a 	sub.w	r3, r3, sl
  4069c4:	f8cb 3008 	str.w	r3, [fp, #8]
  4069c8:	f109 0908 	add.w	r9, r9, #8
  4069cc:	2b00      	cmp	r3, #0
  4069ce:	d1d8      	bne.n	406982 <__sprint_r.part.0+0x1a>
  4069d0:	2000      	movs	r0, #0
  4069d2:	e7ea      	b.n	4069aa <__sprint_r.part.0+0x42>
  4069d4:	f002 f962 	bl	408c9c <__sfvwrite_r>
  4069d8:	2300      	movs	r3, #0
  4069da:	f8cb 3008 	str.w	r3, [fp, #8]
  4069de:	f8cb 3004 	str.w	r3, [fp, #4]
  4069e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4069e6:	bf00      	nop

004069e8 <_vfiprintf_r>:
  4069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4069ec:	b0ad      	sub	sp, #180	; 0xb4
  4069ee:	461d      	mov	r5, r3
  4069f0:	9101      	str	r1, [sp, #4]
  4069f2:	4691      	mov	r9, r2
  4069f4:	9308      	str	r3, [sp, #32]
  4069f6:	9006      	str	r0, [sp, #24]
  4069f8:	b118      	cbz	r0, 406a02 <_vfiprintf_r+0x1a>
  4069fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4069fc:	2b00      	cmp	r3, #0
  4069fe:	f000 80e0 	beq.w	406bc2 <_vfiprintf_r+0x1da>
  406a02:	9c01      	ldr	r4, [sp, #4]
  406a04:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  406a08:	b281      	uxth	r1, r0
  406a0a:	048b      	lsls	r3, r1, #18
  406a0c:	d407      	bmi.n	406a1e <_vfiprintf_r+0x36>
  406a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406a10:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406a14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406a18:	81a1      	strh	r1, [r4, #12]
  406a1a:	6663      	str	r3, [r4, #100]	; 0x64
  406a1c:	b289      	uxth	r1, r1
  406a1e:	070f      	lsls	r7, r1, #28
  406a20:	f140 80b1 	bpl.w	406b86 <_vfiprintf_r+0x19e>
  406a24:	9b01      	ldr	r3, [sp, #4]
  406a26:	691b      	ldr	r3, [r3, #16]
  406a28:	2b00      	cmp	r3, #0
  406a2a:	f000 80ac 	beq.w	406b86 <_vfiprintf_r+0x19e>
  406a2e:	f001 011a 	and.w	r1, r1, #26
  406a32:	290a      	cmp	r1, #10
  406a34:	f000 80b5 	beq.w	406ba2 <_vfiprintf_r+0x1ba>
  406a38:	2300      	movs	r3, #0
  406a3a:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  406a3e:	930b      	str	r3, [sp, #44]	; 0x2c
  406a40:	9311      	str	r3, [sp, #68]	; 0x44
  406a42:	9310      	str	r3, [sp, #64]	; 0x40
  406a44:	9304      	str	r3, [sp, #16]
  406a46:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  406a4a:	46da      	mov	sl, fp
  406a4c:	f899 3000 	ldrb.w	r3, [r9]
  406a50:	464c      	mov	r4, r9
  406a52:	b1fb      	cbz	r3, 406a94 <_vfiprintf_r+0xac>
  406a54:	2b25      	cmp	r3, #37	; 0x25
  406a56:	d102      	bne.n	406a5e <_vfiprintf_r+0x76>
  406a58:	e01c      	b.n	406a94 <_vfiprintf_r+0xac>
  406a5a:	2b25      	cmp	r3, #37	; 0x25
  406a5c:	d003      	beq.n	406a66 <_vfiprintf_r+0x7e>
  406a5e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406a62:	2b00      	cmp	r3, #0
  406a64:	d1f9      	bne.n	406a5a <_vfiprintf_r+0x72>
  406a66:	eba4 0509 	sub.w	r5, r4, r9
  406a6a:	b19d      	cbz	r5, 406a94 <_vfiprintf_r+0xac>
  406a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406a6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a70:	f8ca 9000 	str.w	r9, [sl]
  406a74:	3301      	adds	r3, #1
  406a76:	442a      	add	r2, r5
  406a78:	2b07      	cmp	r3, #7
  406a7a:	f8ca 5004 	str.w	r5, [sl, #4]
  406a7e:	9211      	str	r2, [sp, #68]	; 0x44
  406a80:	9310      	str	r3, [sp, #64]	; 0x40
  406a82:	dd7a      	ble.n	406b7a <_vfiprintf_r+0x192>
  406a84:	2a00      	cmp	r2, #0
  406a86:	f040 848f 	bne.w	4073a8 <_vfiprintf_r+0x9c0>
  406a8a:	9b04      	ldr	r3, [sp, #16]
  406a8c:	9210      	str	r2, [sp, #64]	; 0x40
  406a8e:	442b      	add	r3, r5
  406a90:	46da      	mov	sl, fp
  406a92:	9304      	str	r3, [sp, #16]
  406a94:	7823      	ldrb	r3, [r4, #0]
  406a96:	2b00      	cmp	r3, #0
  406a98:	f000 83b1 	beq.w	4071fe <_vfiprintf_r+0x816>
  406a9c:	2000      	movs	r0, #0
  406a9e:	f04f 0300 	mov.w	r3, #0
  406aa2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  406aa6:	f104 0901 	add.w	r9, r4, #1
  406aaa:	7862      	ldrb	r2, [r4, #1]
  406aac:	4605      	mov	r5, r0
  406aae:	4606      	mov	r6, r0
  406ab0:	4603      	mov	r3, r0
  406ab2:	f04f 34ff 	mov.w	r4, #4294967295
  406ab6:	f109 0901 	add.w	r9, r9, #1
  406aba:	f1a2 0120 	sub.w	r1, r2, #32
  406abe:	2958      	cmp	r1, #88	; 0x58
  406ac0:	f200 830e 	bhi.w	4070e0 <_vfiprintf_r+0x6f8>
  406ac4:	e8df f011 	tbh	[pc, r1, lsl #1]
  406ac8:	030c0237 	.word	0x030c0237
  406acc:	02eb030c 	.word	0x02eb030c
  406ad0:	030c030c 	.word	0x030c030c
  406ad4:	030c030c 	.word	0x030c030c
  406ad8:	030c030c 	.word	0x030c030c
  406adc:	02f0029e 	.word	0x02f0029e
  406ae0:	0082030c 	.word	0x0082030c
  406ae4:	030c0277 	.word	0x030c0277
  406ae8:	01d401cf 	.word	0x01d401cf
  406aec:	01d401d4 	.word	0x01d401d4
  406af0:	01d401d4 	.word	0x01d401d4
  406af4:	01d401d4 	.word	0x01d401d4
  406af8:	01d401d4 	.word	0x01d401d4
  406afc:	030c030c 	.word	0x030c030c
  406b00:	030c030c 	.word	0x030c030c
  406b04:	030c030c 	.word	0x030c030c
  406b08:	030c030c 	.word	0x030c030c
  406b0c:	030c030c 	.word	0x030c030c
  406b10:	030c023f 	.word	0x030c023f
  406b14:	030c030c 	.word	0x030c030c
  406b18:	030c030c 	.word	0x030c030c
  406b1c:	030c030c 	.word	0x030c030c
  406b20:	030c030c 	.word	0x030c030c
  406b24:	0246030c 	.word	0x0246030c
  406b28:	030c030c 	.word	0x030c030c
  406b2c:	030c030c 	.word	0x030c030c
  406b30:	024a030c 	.word	0x024a030c
  406b34:	030c030c 	.word	0x030c030c
  406b38:	030c0252 	.word	0x030c0252
  406b3c:	030c030c 	.word	0x030c030c
  406b40:	030c030c 	.word	0x030c030c
  406b44:	030c030c 	.word	0x030c030c
  406b48:	030c030c 	.word	0x030c030c
  406b4c:	01e2030c 	.word	0x01e2030c
  406b50:	030c01f6 	.word	0x030c01f6
  406b54:	030c030c 	.word	0x030c030c
  406b58:	01f60307 	.word	0x01f60307
  406b5c:	030c030c 	.word	0x030c030c
  406b60:	030c0291 	.word	0x030c0291
  406b64:	008702f5 	.word	0x008702f5
  406b68:	02c302b1 	.word	0x02c302b1
  406b6c:	02c8030c 	.word	0x02c8030c
  406b70:	01bd030c 	.word	0x01bd030c
  406b74:	030c030c 	.word	0x030c030c
  406b78:	02aa      	.short	0x02aa
  406b7a:	f10a 0a08 	add.w	sl, sl, #8
  406b7e:	9b04      	ldr	r3, [sp, #16]
  406b80:	442b      	add	r3, r5
  406b82:	9304      	str	r3, [sp, #16]
  406b84:	e786      	b.n	406a94 <_vfiprintf_r+0xac>
  406b86:	9c01      	ldr	r4, [sp, #4]
  406b88:	9806      	ldr	r0, [sp, #24]
  406b8a:	4621      	mov	r1, r4
  406b8c:	f000 fd62 	bl	407654 <__swsetup_r>
  406b90:	2800      	cmp	r0, #0
  406b92:	f040 8340 	bne.w	407216 <_vfiprintf_r+0x82e>
  406b96:	89a1      	ldrh	r1, [r4, #12]
  406b98:	f001 011a 	and.w	r1, r1, #26
  406b9c:	290a      	cmp	r1, #10
  406b9e:	f47f af4b 	bne.w	406a38 <_vfiprintf_r+0x50>
  406ba2:	9901      	ldr	r1, [sp, #4]
  406ba4:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  406ba8:	2b00      	cmp	r3, #0
  406baa:	f6ff af45 	blt.w	406a38 <_vfiprintf_r+0x50>
  406bae:	462b      	mov	r3, r5
  406bb0:	464a      	mov	r2, r9
  406bb2:	9806      	ldr	r0, [sp, #24]
  406bb4:	f000 fd18 	bl	4075e8 <__sbprintf>
  406bb8:	9004      	str	r0, [sp, #16]
  406bba:	9804      	ldr	r0, [sp, #16]
  406bbc:	b02d      	add	sp, #180	; 0xb4
  406bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bc2:	f001 feaf 	bl	408924 <__sinit>
  406bc6:	e71c      	b.n	406a02 <_vfiprintf_r+0x1a>
  406bc8:	4276      	negs	r6, r6
  406bca:	9208      	str	r2, [sp, #32]
  406bcc:	f043 0304 	orr.w	r3, r3, #4
  406bd0:	f899 2000 	ldrb.w	r2, [r9]
  406bd4:	e76f      	b.n	406ab6 <_vfiprintf_r+0xce>
  406bd6:	9607      	str	r6, [sp, #28]
  406bd8:	f013 0220 	ands.w	r2, r3, #32
  406bdc:	f040 845a 	bne.w	407494 <_vfiprintf_r+0xaac>
  406be0:	f013 0110 	ands.w	r1, r3, #16
  406be4:	f040 83f1 	bne.w	4073ca <_vfiprintf_r+0x9e2>
  406be8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406bec:	f000 83ed 	beq.w	4073ca <_vfiprintf_r+0x9e2>
  406bf0:	9808      	ldr	r0, [sp, #32]
  406bf2:	460a      	mov	r2, r1
  406bf4:	4601      	mov	r1, r0
  406bf6:	3104      	adds	r1, #4
  406bf8:	8806      	ldrh	r6, [r0, #0]
  406bfa:	9108      	str	r1, [sp, #32]
  406bfc:	2700      	movs	r7, #0
  406bfe:	f04f 0100 	mov.w	r1, #0
  406c02:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  406c06:	2500      	movs	r5, #0
  406c08:	1c61      	adds	r1, r4, #1
  406c0a:	f000 8175 	beq.w	406ef8 <_vfiprintf_r+0x510>
  406c0e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  406c12:	9103      	str	r1, [sp, #12]
  406c14:	ea56 0107 	orrs.w	r1, r6, r7
  406c18:	f040 8173 	bne.w	406f02 <_vfiprintf_r+0x51a>
  406c1c:	2c00      	cmp	r4, #0
  406c1e:	f040 8356 	bne.w	4072ce <_vfiprintf_r+0x8e6>
  406c22:	2a00      	cmp	r2, #0
  406c24:	f040 83b2 	bne.w	40738c <_vfiprintf_r+0x9a4>
  406c28:	f013 0301 	ands.w	r3, r3, #1
  406c2c:	9305      	str	r3, [sp, #20]
  406c2e:	f000 8447 	beq.w	4074c0 <_vfiprintf_r+0xad8>
  406c32:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  406c36:	2330      	movs	r3, #48	; 0x30
  406c38:	f808 3d41 	strb.w	r3, [r8, #-65]!
  406c3c:	9b05      	ldr	r3, [sp, #20]
  406c3e:	42a3      	cmp	r3, r4
  406c40:	bfb8      	it	lt
  406c42:	4623      	movlt	r3, r4
  406c44:	9302      	str	r3, [sp, #8]
  406c46:	b10d      	cbz	r5, 406c4c <_vfiprintf_r+0x264>
  406c48:	3301      	adds	r3, #1
  406c4a:	9302      	str	r3, [sp, #8]
  406c4c:	9b03      	ldr	r3, [sp, #12]
  406c4e:	f013 0302 	ands.w	r3, r3, #2
  406c52:	9309      	str	r3, [sp, #36]	; 0x24
  406c54:	d002      	beq.n	406c5c <_vfiprintf_r+0x274>
  406c56:	9b02      	ldr	r3, [sp, #8]
  406c58:	3302      	adds	r3, #2
  406c5a:	9302      	str	r3, [sp, #8]
  406c5c:	9b03      	ldr	r3, [sp, #12]
  406c5e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406c62:	930a      	str	r3, [sp, #40]	; 0x28
  406c64:	f040 8263 	bne.w	40712e <_vfiprintf_r+0x746>
  406c68:	9b07      	ldr	r3, [sp, #28]
  406c6a:	9a02      	ldr	r2, [sp, #8]
  406c6c:	1a9d      	subs	r5, r3, r2
  406c6e:	2d00      	cmp	r5, #0
  406c70:	f340 825d 	ble.w	40712e <_vfiprintf_r+0x746>
  406c74:	2d10      	cmp	r5, #16
  406c76:	f340 8477 	ble.w	407568 <_vfiprintf_r+0xb80>
  406c7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c7e:	4eb9      	ldr	r6, [pc, #740]	; (406f64 <_vfiprintf_r+0x57c>)
  406c80:	46d6      	mov	lr, sl
  406c82:	2710      	movs	r7, #16
  406c84:	46a2      	mov	sl, r4
  406c86:	4619      	mov	r1, r3
  406c88:	9c06      	ldr	r4, [sp, #24]
  406c8a:	e007      	b.n	406c9c <_vfiprintf_r+0x2b4>
  406c8c:	f101 0c02 	add.w	ip, r1, #2
  406c90:	f10e 0e08 	add.w	lr, lr, #8
  406c94:	4601      	mov	r1, r0
  406c96:	3d10      	subs	r5, #16
  406c98:	2d10      	cmp	r5, #16
  406c9a:	dd11      	ble.n	406cc0 <_vfiprintf_r+0x2d8>
  406c9c:	1c48      	adds	r0, r1, #1
  406c9e:	3210      	adds	r2, #16
  406ca0:	2807      	cmp	r0, #7
  406ca2:	9211      	str	r2, [sp, #68]	; 0x44
  406ca4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406ca8:	9010      	str	r0, [sp, #64]	; 0x40
  406caa:	ddef      	ble.n	406c8c <_vfiprintf_r+0x2a4>
  406cac:	2a00      	cmp	r2, #0
  406cae:	f040 8231 	bne.w	407114 <_vfiprintf_r+0x72c>
  406cb2:	3d10      	subs	r5, #16
  406cb4:	2d10      	cmp	r5, #16
  406cb6:	4611      	mov	r1, r2
  406cb8:	f04f 0c01 	mov.w	ip, #1
  406cbc:	46de      	mov	lr, fp
  406cbe:	dced      	bgt.n	406c9c <_vfiprintf_r+0x2b4>
  406cc0:	4654      	mov	r4, sl
  406cc2:	4661      	mov	r1, ip
  406cc4:	46f2      	mov	sl, lr
  406cc6:	442a      	add	r2, r5
  406cc8:	2907      	cmp	r1, #7
  406cca:	9211      	str	r2, [sp, #68]	; 0x44
  406ccc:	f8ca 6000 	str.w	r6, [sl]
  406cd0:	f8ca 5004 	str.w	r5, [sl, #4]
  406cd4:	9110      	str	r1, [sp, #64]	; 0x40
  406cd6:	f300 82e6 	bgt.w	4072a6 <_vfiprintf_r+0x8be>
  406cda:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406cde:	f10a 0a08 	add.w	sl, sl, #8
  406ce2:	1c48      	adds	r0, r1, #1
  406ce4:	2d00      	cmp	r5, #0
  406ce6:	f040 822a 	bne.w	40713e <_vfiprintf_r+0x756>
  406cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406cec:	2b00      	cmp	r3, #0
  406cee:	f000 8244 	beq.w	40717a <_vfiprintf_r+0x792>
  406cf2:	3202      	adds	r2, #2
  406cf4:	a90e      	add	r1, sp, #56	; 0x38
  406cf6:	2302      	movs	r3, #2
  406cf8:	2807      	cmp	r0, #7
  406cfa:	9211      	str	r2, [sp, #68]	; 0x44
  406cfc:	9010      	str	r0, [sp, #64]	; 0x40
  406cfe:	e88a 000a 	stmia.w	sl, {r1, r3}
  406d02:	f340 8236 	ble.w	407172 <_vfiprintf_r+0x78a>
  406d06:	2a00      	cmp	r2, #0
  406d08:	f040 838b 	bne.w	407422 <_vfiprintf_r+0xa3a>
  406d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d0e:	2b80      	cmp	r3, #128	; 0x80
  406d10:	f04f 0001 	mov.w	r0, #1
  406d14:	4611      	mov	r1, r2
  406d16:	46da      	mov	sl, fp
  406d18:	f040 8233 	bne.w	407182 <_vfiprintf_r+0x79a>
  406d1c:	9b07      	ldr	r3, [sp, #28]
  406d1e:	9d02      	ldr	r5, [sp, #8]
  406d20:	1b5e      	subs	r6, r3, r5
  406d22:	2e00      	cmp	r6, #0
  406d24:	f340 822d 	ble.w	407182 <_vfiprintf_r+0x79a>
  406d28:	2e10      	cmp	r6, #16
  406d2a:	4d8f      	ldr	r5, [pc, #572]	; (406f68 <_vfiprintf_r+0x580>)
  406d2c:	f340 842f 	ble.w	40758e <_vfiprintf_r+0xba6>
  406d30:	46d4      	mov	ip, sl
  406d32:	2710      	movs	r7, #16
  406d34:	46a2      	mov	sl, r4
  406d36:	9c06      	ldr	r4, [sp, #24]
  406d38:	e007      	b.n	406d4a <_vfiprintf_r+0x362>
  406d3a:	f101 0e02 	add.w	lr, r1, #2
  406d3e:	f10c 0c08 	add.w	ip, ip, #8
  406d42:	4601      	mov	r1, r0
  406d44:	3e10      	subs	r6, #16
  406d46:	2e10      	cmp	r6, #16
  406d48:	dd11      	ble.n	406d6e <_vfiprintf_r+0x386>
  406d4a:	1c48      	adds	r0, r1, #1
  406d4c:	3210      	adds	r2, #16
  406d4e:	2807      	cmp	r0, #7
  406d50:	9211      	str	r2, [sp, #68]	; 0x44
  406d52:	e88c 00a0 	stmia.w	ip, {r5, r7}
  406d56:	9010      	str	r0, [sp, #64]	; 0x40
  406d58:	ddef      	ble.n	406d3a <_vfiprintf_r+0x352>
  406d5a:	2a00      	cmp	r2, #0
  406d5c:	f040 8296 	bne.w	40728c <_vfiprintf_r+0x8a4>
  406d60:	3e10      	subs	r6, #16
  406d62:	2e10      	cmp	r6, #16
  406d64:	f04f 0e01 	mov.w	lr, #1
  406d68:	4611      	mov	r1, r2
  406d6a:	46dc      	mov	ip, fp
  406d6c:	dced      	bgt.n	406d4a <_vfiprintf_r+0x362>
  406d6e:	4654      	mov	r4, sl
  406d70:	46e2      	mov	sl, ip
  406d72:	4432      	add	r2, r6
  406d74:	f1be 0f07 	cmp.w	lr, #7
  406d78:	9211      	str	r2, [sp, #68]	; 0x44
  406d7a:	e88a 0060 	stmia.w	sl, {r5, r6}
  406d7e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406d82:	f300 835b 	bgt.w	40743c <_vfiprintf_r+0xa54>
  406d86:	9b05      	ldr	r3, [sp, #20]
  406d88:	1ae4      	subs	r4, r4, r3
  406d8a:	2c00      	cmp	r4, #0
  406d8c:	f10a 0a08 	add.w	sl, sl, #8
  406d90:	f10e 0001 	add.w	r0, lr, #1
  406d94:	4671      	mov	r1, lr
  406d96:	f300 81f9 	bgt.w	40718c <_vfiprintf_r+0x7a4>
  406d9a:	9905      	ldr	r1, [sp, #20]
  406d9c:	f8ca 8000 	str.w	r8, [sl]
  406da0:	440a      	add	r2, r1
  406da2:	2807      	cmp	r0, #7
  406da4:	9211      	str	r2, [sp, #68]	; 0x44
  406da6:	f8ca 1004 	str.w	r1, [sl, #4]
  406daa:	9010      	str	r0, [sp, #64]	; 0x40
  406dac:	f340 8255 	ble.w	40725a <_vfiprintf_r+0x872>
  406db0:	2a00      	cmp	r2, #0
  406db2:	f040 82ee 	bne.w	407392 <_vfiprintf_r+0x9aa>
  406db6:	9b03      	ldr	r3, [sp, #12]
  406db8:	9210      	str	r2, [sp, #64]	; 0x40
  406dba:	0758      	lsls	r0, r3, #29
  406dbc:	d538      	bpl.n	406e30 <_vfiprintf_r+0x448>
  406dbe:	9b07      	ldr	r3, [sp, #28]
  406dc0:	9902      	ldr	r1, [sp, #8]
  406dc2:	1a5c      	subs	r4, r3, r1
  406dc4:	2c00      	cmp	r4, #0
  406dc6:	f340 82ba 	ble.w	40733e <_vfiprintf_r+0x956>
  406dca:	46da      	mov	sl, fp
  406dcc:	2c10      	cmp	r4, #16
  406dce:	f340 83da 	ble.w	407586 <_vfiprintf_r+0xb9e>
  406dd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  406dd4:	4e63      	ldr	r6, [pc, #396]	; (406f64 <_vfiprintf_r+0x57c>)
  406dd6:	9f06      	ldr	r7, [sp, #24]
  406dd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
  406ddc:	2510      	movs	r5, #16
  406dde:	e006      	b.n	406dee <_vfiprintf_r+0x406>
  406de0:	1c88      	adds	r0, r1, #2
  406de2:	f10a 0a08 	add.w	sl, sl, #8
  406de6:	4619      	mov	r1, r3
  406de8:	3c10      	subs	r4, #16
  406dea:	2c10      	cmp	r4, #16
  406dec:	dd13      	ble.n	406e16 <_vfiprintf_r+0x42e>
  406dee:	1c4b      	adds	r3, r1, #1
  406df0:	3210      	adds	r2, #16
  406df2:	2b07      	cmp	r3, #7
  406df4:	9211      	str	r2, [sp, #68]	; 0x44
  406df6:	f8ca 6000 	str.w	r6, [sl]
  406dfa:	f8ca 5004 	str.w	r5, [sl, #4]
  406dfe:	9310      	str	r3, [sp, #64]	; 0x40
  406e00:	ddee      	ble.n	406de0 <_vfiprintf_r+0x3f8>
  406e02:	2a00      	cmp	r2, #0
  406e04:	f040 820b 	bne.w	40721e <_vfiprintf_r+0x836>
  406e08:	3c10      	subs	r4, #16
  406e0a:	2c10      	cmp	r4, #16
  406e0c:	f04f 0001 	mov.w	r0, #1
  406e10:	4611      	mov	r1, r2
  406e12:	46da      	mov	sl, fp
  406e14:	dceb      	bgt.n	406dee <_vfiprintf_r+0x406>
  406e16:	4422      	add	r2, r4
  406e18:	2807      	cmp	r0, #7
  406e1a:	9211      	str	r2, [sp, #68]	; 0x44
  406e1c:	f8ca 6000 	str.w	r6, [sl]
  406e20:	f8ca 4004 	str.w	r4, [sl, #4]
  406e24:	9010      	str	r0, [sp, #64]	; 0x40
  406e26:	f340 8223 	ble.w	407270 <_vfiprintf_r+0x888>
  406e2a:	2a00      	cmp	r2, #0
  406e2c:	f040 8367 	bne.w	4074fe <_vfiprintf_r+0xb16>
  406e30:	9b04      	ldr	r3, [sp, #16]
  406e32:	9a07      	ldr	r2, [sp, #28]
  406e34:	9902      	ldr	r1, [sp, #8]
  406e36:	428a      	cmp	r2, r1
  406e38:	bfac      	ite	ge
  406e3a:	189b      	addge	r3, r3, r2
  406e3c:	185b      	addlt	r3, r3, r1
  406e3e:	9304      	str	r3, [sp, #16]
  406e40:	e21f      	b.n	407282 <_vfiprintf_r+0x89a>
  406e42:	9607      	str	r6, [sp, #28]
  406e44:	069e      	lsls	r6, r3, #26
  406e46:	f100 8319 	bmi.w	40747c <_vfiprintf_r+0xa94>
  406e4a:	9908      	ldr	r1, [sp, #32]
  406e4c:	06dd      	lsls	r5, r3, #27
  406e4e:	460a      	mov	r2, r1
  406e50:	f100 82b5 	bmi.w	4073be <_vfiprintf_r+0x9d6>
  406e54:	0658      	lsls	r0, r3, #25
  406e56:	f140 82b2 	bpl.w	4073be <_vfiprintf_r+0x9d6>
  406e5a:	880e      	ldrh	r6, [r1, #0]
  406e5c:	3104      	adds	r1, #4
  406e5e:	2700      	movs	r7, #0
  406e60:	2201      	movs	r2, #1
  406e62:	9108      	str	r1, [sp, #32]
  406e64:	e6cb      	b.n	406bfe <_vfiprintf_r+0x216>
  406e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406e6a:	f899 2000 	ldrb.w	r2, [r9]
  406e6e:	e622      	b.n	406ab6 <_vfiprintf_r+0xce>
  406e70:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406e74:	2600      	movs	r6, #0
  406e76:	f819 2b01 	ldrb.w	r2, [r9], #1
  406e7a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406e7e:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406e82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406e86:	2909      	cmp	r1, #9
  406e88:	d9f5      	bls.n	406e76 <_vfiprintf_r+0x48e>
  406e8a:	e616      	b.n	406aba <_vfiprintf_r+0xd2>
  406e8c:	9908      	ldr	r1, [sp, #32]
  406e8e:	9607      	str	r6, [sp, #28]
  406e90:	680a      	ldr	r2, [r1, #0]
  406e92:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406e96:	f04f 0000 	mov.w	r0, #0
  406e9a:	460a      	mov	r2, r1
  406e9c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  406ea0:	3204      	adds	r2, #4
  406ea2:	2001      	movs	r0, #1
  406ea4:	9002      	str	r0, [sp, #8]
  406ea6:	9208      	str	r2, [sp, #32]
  406ea8:	9005      	str	r0, [sp, #20]
  406eaa:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  406eae:	9303      	str	r3, [sp, #12]
  406eb0:	2400      	movs	r4, #0
  406eb2:	e6cb      	b.n	406c4c <_vfiprintf_r+0x264>
  406eb4:	9607      	str	r6, [sp, #28]
  406eb6:	2800      	cmp	r0, #0
  406eb8:	f040 8382 	bne.w	4075c0 <_vfiprintf_r+0xbd8>
  406ebc:	069e      	lsls	r6, r3, #26
  406ebe:	f100 82d1 	bmi.w	407464 <_vfiprintf_r+0xa7c>
  406ec2:	06dd      	lsls	r5, r3, #27
  406ec4:	f100 828d 	bmi.w	4073e2 <_vfiprintf_r+0x9fa>
  406ec8:	0658      	lsls	r0, r3, #25
  406eca:	f140 828a 	bpl.w	4073e2 <_vfiprintf_r+0x9fa>
  406ece:	9d08      	ldr	r5, [sp, #32]
  406ed0:	f9b5 6000 	ldrsh.w	r6, [r5]
  406ed4:	462a      	mov	r2, r5
  406ed6:	17f7      	asrs	r7, r6, #31
  406ed8:	3204      	adds	r2, #4
  406eda:	4630      	mov	r0, r6
  406edc:	4639      	mov	r1, r7
  406ede:	9208      	str	r2, [sp, #32]
  406ee0:	2800      	cmp	r0, #0
  406ee2:	f171 0200 	sbcs.w	r2, r1, #0
  406ee6:	f2c0 82ee 	blt.w	4074c6 <_vfiprintf_r+0xade>
  406eea:	1c61      	adds	r1, r4, #1
  406eec:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406ef0:	f04f 0201 	mov.w	r2, #1
  406ef4:	f47f ae8b 	bne.w	406c0e <_vfiprintf_r+0x226>
  406ef8:	ea56 0107 	orrs.w	r1, r6, r7
  406efc:	f000 81e8 	beq.w	4072d0 <_vfiprintf_r+0x8e8>
  406f00:	9303      	str	r3, [sp, #12]
  406f02:	2a01      	cmp	r2, #1
  406f04:	f000 8225 	beq.w	407352 <_vfiprintf_r+0x96a>
  406f08:	2a02      	cmp	r2, #2
  406f0a:	f040 81f5 	bne.w	4072f8 <_vfiprintf_r+0x910>
  406f0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406f10:	46d8      	mov	r8, fp
  406f12:	0933      	lsrs	r3, r6, #4
  406f14:	f006 010f 	and.w	r1, r6, #15
  406f18:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  406f1c:	093a      	lsrs	r2, r7, #4
  406f1e:	461e      	mov	r6, r3
  406f20:	4617      	mov	r7, r2
  406f22:	5c43      	ldrb	r3, [r0, r1]
  406f24:	f808 3d01 	strb.w	r3, [r8, #-1]!
  406f28:	ea56 0307 	orrs.w	r3, r6, r7
  406f2c:	d1f1      	bne.n	406f12 <_vfiprintf_r+0x52a>
  406f2e:	ebab 0308 	sub.w	r3, fp, r8
  406f32:	9305      	str	r3, [sp, #20]
  406f34:	e682      	b.n	406c3c <_vfiprintf_r+0x254>
  406f36:	f899 2000 	ldrb.w	r2, [r9]
  406f3a:	2d00      	cmp	r5, #0
  406f3c:	f47f adbb 	bne.w	406ab6 <_vfiprintf_r+0xce>
  406f40:	2001      	movs	r0, #1
  406f42:	2520      	movs	r5, #32
  406f44:	e5b7      	b.n	406ab6 <_vfiprintf_r+0xce>
  406f46:	9607      	str	r6, [sp, #28]
  406f48:	2800      	cmp	r0, #0
  406f4a:	f040 8336 	bne.w	4075ba <_vfiprintf_r+0xbd2>
  406f4e:	f043 0310 	orr.w	r3, r3, #16
  406f52:	e7b3      	b.n	406ebc <_vfiprintf_r+0x4d4>
  406f54:	9607      	str	r6, [sp, #28]
  406f56:	f043 0310 	orr.w	r3, r3, #16
  406f5a:	e63d      	b.n	406bd8 <_vfiprintf_r+0x1f0>
  406f5c:	9607      	str	r6, [sp, #28]
  406f5e:	f043 0310 	orr.w	r3, r3, #16
  406f62:	e76f      	b.n	406e44 <_vfiprintf_r+0x45c>
  406f64:	0040c480 	.word	0x0040c480
  406f68:	0040c490 	.word	0x0040c490
  406f6c:	9607      	str	r6, [sp, #28]
  406f6e:	2800      	cmp	r0, #0
  406f70:	f040 832c 	bne.w	4075cc <_vfiprintf_r+0xbe4>
  406f74:	49b0      	ldr	r1, [pc, #704]	; (407238 <_vfiprintf_r+0x850>)
  406f76:	910b      	str	r1, [sp, #44]	; 0x2c
  406f78:	069f      	lsls	r7, r3, #26
  406f7a:	f100 8297 	bmi.w	4074ac <_vfiprintf_r+0xac4>
  406f7e:	9808      	ldr	r0, [sp, #32]
  406f80:	06de      	lsls	r6, r3, #27
  406f82:	4601      	mov	r1, r0
  406f84:	f100 8228 	bmi.w	4073d8 <_vfiprintf_r+0x9f0>
  406f88:	065d      	lsls	r5, r3, #25
  406f8a:	f140 8225 	bpl.w	4073d8 <_vfiprintf_r+0x9f0>
  406f8e:	3104      	adds	r1, #4
  406f90:	8806      	ldrh	r6, [r0, #0]
  406f92:	9108      	str	r1, [sp, #32]
  406f94:	2700      	movs	r7, #0
  406f96:	07d8      	lsls	r0, r3, #31
  406f98:	f140 81d9 	bpl.w	40734e <_vfiprintf_r+0x966>
  406f9c:	ea56 0107 	orrs.w	r1, r6, r7
  406fa0:	f000 81d5 	beq.w	40734e <_vfiprintf_r+0x966>
  406fa4:	2130      	movs	r1, #48	; 0x30
  406fa6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406faa:	f043 0302 	orr.w	r3, r3, #2
  406fae:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406fb2:	2202      	movs	r2, #2
  406fb4:	e623      	b.n	406bfe <_vfiprintf_r+0x216>
  406fb6:	f899 2000 	ldrb.w	r2, [r9]
  406fba:	2a2a      	cmp	r2, #42	; 0x2a
  406fbc:	f109 0701 	add.w	r7, r9, #1
  406fc0:	f000 82f0 	beq.w	4075a4 <_vfiprintf_r+0xbbc>
  406fc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406fc8:	2909      	cmp	r1, #9
  406fca:	46b9      	mov	r9, r7
  406fcc:	f04f 0400 	mov.w	r4, #0
  406fd0:	f63f ad73 	bhi.w	406aba <_vfiprintf_r+0xd2>
  406fd4:	f819 2b01 	ldrb.w	r2, [r9], #1
  406fd8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406fdc:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406fe0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406fe4:	2909      	cmp	r1, #9
  406fe6:	d9f5      	bls.n	406fd4 <_vfiprintf_r+0x5ec>
  406fe8:	e567      	b.n	406aba <_vfiprintf_r+0xd2>
  406fea:	f899 2000 	ldrb.w	r2, [r9]
  406fee:	2a6c      	cmp	r2, #108	; 0x6c
  406ff0:	bf03      	ittte	eq
  406ff2:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  406ff6:	f043 0320 	orreq.w	r3, r3, #32
  406ffa:	f109 0901 	addeq.w	r9, r9, #1
  406ffe:	f043 0310 	orrne.w	r3, r3, #16
  407002:	e558      	b.n	406ab6 <_vfiprintf_r+0xce>
  407004:	9908      	ldr	r1, [sp, #32]
  407006:	680e      	ldr	r6, [r1, #0]
  407008:	460a      	mov	r2, r1
  40700a:	2e00      	cmp	r6, #0
  40700c:	f102 0204 	add.w	r2, r2, #4
  407010:	f6ff adda 	blt.w	406bc8 <_vfiprintf_r+0x1e0>
  407014:	9208      	str	r2, [sp, #32]
  407016:	f899 2000 	ldrb.w	r2, [r9]
  40701a:	e54c      	b.n	406ab6 <_vfiprintf_r+0xce>
  40701c:	9607      	str	r6, [sp, #28]
  40701e:	2800      	cmp	r0, #0
  407020:	f040 82da 	bne.w	4075d8 <_vfiprintf_r+0xbf0>
  407024:	4985      	ldr	r1, [pc, #532]	; (40723c <_vfiprintf_r+0x854>)
  407026:	910b      	str	r1, [sp, #44]	; 0x2c
  407028:	e7a6      	b.n	406f78 <_vfiprintf_r+0x590>
  40702a:	9808      	ldr	r0, [sp, #32]
  40702c:	4a83      	ldr	r2, [pc, #524]	; (40723c <_vfiprintf_r+0x854>)
  40702e:	9607      	str	r6, [sp, #28]
  407030:	920b      	str	r2, [sp, #44]	; 0x2c
  407032:	6806      	ldr	r6, [r0, #0]
  407034:	2278      	movs	r2, #120	; 0x78
  407036:	2130      	movs	r1, #48	; 0x30
  407038:	3004      	adds	r0, #4
  40703a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40703e:	f043 0302 	orr.w	r3, r3, #2
  407042:	9008      	str	r0, [sp, #32]
  407044:	2700      	movs	r7, #0
  407046:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40704a:	2202      	movs	r2, #2
  40704c:	e5d7      	b.n	406bfe <_vfiprintf_r+0x216>
  40704e:	f043 0320 	orr.w	r3, r3, #32
  407052:	f899 2000 	ldrb.w	r2, [r9]
  407056:	e52e      	b.n	406ab6 <_vfiprintf_r+0xce>
  407058:	9908      	ldr	r1, [sp, #32]
  40705a:	9607      	str	r6, [sp, #28]
  40705c:	f8d1 8000 	ldr.w	r8, [r1]
  407060:	f04f 0200 	mov.w	r2, #0
  407064:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  407068:	1d0e      	adds	r6, r1, #4
  40706a:	f1b8 0f00 	cmp.w	r8, #0
  40706e:	f000 8281 	beq.w	407574 <_vfiprintf_r+0xb8c>
  407072:	1c67      	adds	r7, r4, #1
  407074:	f000 8260 	beq.w	407538 <_vfiprintf_r+0xb50>
  407078:	4622      	mov	r2, r4
  40707a:	2100      	movs	r1, #0
  40707c:	4640      	mov	r0, r8
  40707e:	9302      	str	r3, [sp, #8]
  407080:	f002 fb0e 	bl	4096a0 <memchr>
  407084:	9b02      	ldr	r3, [sp, #8]
  407086:	2800      	cmp	r0, #0
  407088:	f000 8284 	beq.w	407594 <_vfiprintf_r+0xbac>
  40708c:	eba0 0208 	sub.w	r2, r0, r8
  407090:	9205      	str	r2, [sp, #20]
  407092:	9608      	str	r6, [sp, #32]
  407094:	9303      	str	r3, [sp, #12]
  407096:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40709a:	2400      	movs	r4, #0
  40709c:	e5ce      	b.n	406c3c <_vfiprintf_r+0x254>
  40709e:	f043 0301 	orr.w	r3, r3, #1
  4070a2:	f899 2000 	ldrb.w	r2, [r9]
  4070a6:	e506      	b.n	406ab6 <_vfiprintf_r+0xce>
  4070a8:	f899 2000 	ldrb.w	r2, [r9]
  4070ac:	2001      	movs	r0, #1
  4070ae:	252b      	movs	r5, #43	; 0x2b
  4070b0:	e501      	b.n	406ab6 <_vfiprintf_r+0xce>
  4070b2:	2800      	cmp	r0, #0
  4070b4:	f040 8287 	bne.w	4075c6 <_vfiprintf_r+0xbde>
  4070b8:	0699      	lsls	r1, r3, #26
  4070ba:	f100 8231 	bmi.w	407520 <_vfiprintf_r+0xb38>
  4070be:	06da      	lsls	r2, r3, #27
  4070c0:	d421      	bmi.n	407106 <_vfiprintf_r+0x71e>
  4070c2:	065b      	lsls	r3, r3, #25
  4070c4:	d51f      	bpl.n	407106 <_vfiprintf_r+0x71e>
  4070c6:	9a08      	ldr	r2, [sp, #32]
  4070c8:	6813      	ldr	r3, [r2, #0]
  4070ca:	3204      	adds	r2, #4
  4070cc:	9208      	str	r2, [sp, #32]
  4070ce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4070d2:	801a      	strh	r2, [r3, #0]
  4070d4:	e4ba      	b.n	406a4c <_vfiprintf_r+0x64>
  4070d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4070da:	f899 2000 	ldrb.w	r2, [r9]
  4070de:	e4ea      	b.n	406ab6 <_vfiprintf_r+0xce>
  4070e0:	9607      	str	r6, [sp, #28]
  4070e2:	2800      	cmp	r0, #0
  4070e4:	f040 8275 	bne.w	4075d2 <_vfiprintf_r+0xbea>
  4070e8:	2a00      	cmp	r2, #0
  4070ea:	f000 8088 	beq.w	4071fe <_vfiprintf_r+0x816>
  4070ee:	2101      	movs	r1, #1
  4070f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4070f4:	f04f 0200 	mov.w	r2, #0
  4070f8:	9102      	str	r1, [sp, #8]
  4070fa:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4070fe:	9105      	str	r1, [sp, #20]
  407100:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  407104:	e6d3      	b.n	406eae <_vfiprintf_r+0x4c6>
  407106:	9a08      	ldr	r2, [sp, #32]
  407108:	6813      	ldr	r3, [r2, #0]
  40710a:	3204      	adds	r2, #4
  40710c:	9208      	str	r2, [sp, #32]
  40710e:	9a04      	ldr	r2, [sp, #16]
  407110:	601a      	str	r2, [r3, #0]
  407112:	e49b      	b.n	406a4c <_vfiprintf_r+0x64>
  407114:	aa0f      	add	r2, sp, #60	; 0x3c
  407116:	9901      	ldr	r1, [sp, #4]
  407118:	4620      	mov	r0, r4
  40711a:	f7ff fc25 	bl	406968 <__sprint_r.part.0>
  40711e:	2800      	cmp	r0, #0
  407120:	d174      	bne.n	40720c <_vfiprintf_r+0x824>
  407122:	9910      	ldr	r1, [sp, #64]	; 0x40
  407124:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407126:	f101 0c01 	add.w	ip, r1, #1
  40712a:	46de      	mov	lr, fp
  40712c:	e5b3      	b.n	406c96 <_vfiprintf_r+0x2ae>
  40712e:	9910      	ldr	r1, [sp, #64]	; 0x40
  407130:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407132:	1c48      	adds	r0, r1, #1
  407134:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407138:	2d00      	cmp	r5, #0
  40713a:	f43f add6 	beq.w	406cea <_vfiprintf_r+0x302>
  40713e:	3201      	adds	r2, #1
  407140:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  407144:	2101      	movs	r1, #1
  407146:	2807      	cmp	r0, #7
  407148:	9211      	str	r2, [sp, #68]	; 0x44
  40714a:	9010      	str	r0, [sp, #64]	; 0x40
  40714c:	f8ca 5000 	str.w	r5, [sl]
  407150:	f8ca 1004 	str.w	r1, [sl, #4]
  407154:	f340 80b6 	ble.w	4072c4 <_vfiprintf_r+0x8dc>
  407158:	2a00      	cmp	r2, #0
  40715a:	f040 8155 	bne.w	407408 <_vfiprintf_r+0xa20>
  40715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407160:	2b00      	cmp	r3, #0
  407162:	f43f add3 	beq.w	406d0c <_vfiprintf_r+0x324>
  407166:	ab0e      	add	r3, sp, #56	; 0x38
  407168:	2202      	movs	r2, #2
  40716a:	4608      	mov	r0, r1
  40716c:	931c      	str	r3, [sp, #112]	; 0x70
  40716e:	921d      	str	r2, [sp, #116]	; 0x74
  407170:	46da      	mov	sl, fp
  407172:	4601      	mov	r1, r0
  407174:	f10a 0a08 	add.w	sl, sl, #8
  407178:	3001      	adds	r0, #1
  40717a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40717c:	2b80      	cmp	r3, #128	; 0x80
  40717e:	f43f adcd 	beq.w	406d1c <_vfiprintf_r+0x334>
  407182:	9b05      	ldr	r3, [sp, #20]
  407184:	1ae4      	subs	r4, r4, r3
  407186:	2c00      	cmp	r4, #0
  407188:	f77f ae07 	ble.w	406d9a <_vfiprintf_r+0x3b2>
  40718c:	2c10      	cmp	r4, #16
  40718e:	4d2c      	ldr	r5, [pc, #176]	; (407240 <_vfiprintf_r+0x858>)
  407190:	dd1d      	ble.n	4071ce <_vfiprintf_r+0x7e6>
  407192:	46d6      	mov	lr, sl
  407194:	2610      	movs	r6, #16
  407196:	9f06      	ldr	r7, [sp, #24]
  407198:	f8dd a004 	ldr.w	sl, [sp, #4]
  40719c:	e006      	b.n	4071ac <_vfiprintf_r+0x7c4>
  40719e:	1c88      	adds	r0, r1, #2
  4071a0:	f10e 0e08 	add.w	lr, lr, #8
  4071a4:	4619      	mov	r1, r3
  4071a6:	3c10      	subs	r4, #16
  4071a8:	2c10      	cmp	r4, #16
  4071aa:	dd0f      	ble.n	4071cc <_vfiprintf_r+0x7e4>
  4071ac:	1c4b      	adds	r3, r1, #1
  4071ae:	3210      	adds	r2, #16
  4071b0:	2b07      	cmp	r3, #7
  4071b2:	9211      	str	r2, [sp, #68]	; 0x44
  4071b4:	e88e 0060 	stmia.w	lr, {r5, r6}
  4071b8:	9310      	str	r3, [sp, #64]	; 0x40
  4071ba:	ddf0      	ble.n	40719e <_vfiprintf_r+0x7b6>
  4071bc:	b9a2      	cbnz	r2, 4071e8 <_vfiprintf_r+0x800>
  4071be:	3c10      	subs	r4, #16
  4071c0:	2c10      	cmp	r4, #16
  4071c2:	f04f 0001 	mov.w	r0, #1
  4071c6:	4611      	mov	r1, r2
  4071c8:	46de      	mov	lr, fp
  4071ca:	dcef      	bgt.n	4071ac <_vfiprintf_r+0x7c4>
  4071cc:	46f2      	mov	sl, lr
  4071ce:	4422      	add	r2, r4
  4071d0:	2807      	cmp	r0, #7
  4071d2:	9211      	str	r2, [sp, #68]	; 0x44
  4071d4:	f8ca 5000 	str.w	r5, [sl]
  4071d8:	f8ca 4004 	str.w	r4, [sl, #4]
  4071dc:	9010      	str	r0, [sp, #64]	; 0x40
  4071de:	dc31      	bgt.n	407244 <_vfiprintf_r+0x85c>
  4071e0:	f10a 0a08 	add.w	sl, sl, #8
  4071e4:	3001      	adds	r0, #1
  4071e6:	e5d8      	b.n	406d9a <_vfiprintf_r+0x3b2>
  4071e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4071ea:	4651      	mov	r1, sl
  4071ec:	4638      	mov	r0, r7
  4071ee:	f7ff fbbb 	bl	406968 <__sprint_r.part.0>
  4071f2:	b958      	cbnz	r0, 40720c <_vfiprintf_r+0x824>
  4071f4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4071f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4071f8:	1c48      	adds	r0, r1, #1
  4071fa:	46de      	mov	lr, fp
  4071fc:	e7d3      	b.n	4071a6 <_vfiprintf_r+0x7be>
  4071fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407200:	b123      	cbz	r3, 40720c <_vfiprintf_r+0x824>
  407202:	9806      	ldr	r0, [sp, #24]
  407204:	9901      	ldr	r1, [sp, #4]
  407206:	aa0f      	add	r2, sp, #60	; 0x3c
  407208:	f7ff fbae 	bl	406968 <__sprint_r.part.0>
  40720c:	9b01      	ldr	r3, [sp, #4]
  40720e:	899b      	ldrh	r3, [r3, #12]
  407210:	065b      	lsls	r3, r3, #25
  407212:	f57f acd2 	bpl.w	406bba <_vfiprintf_r+0x1d2>
  407216:	f04f 33ff 	mov.w	r3, #4294967295
  40721a:	9304      	str	r3, [sp, #16]
  40721c:	e4cd      	b.n	406bba <_vfiprintf_r+0x1d2>
  40721e:	aa0f      	add	r2, sp, #60	; 0x3c
  407220:	4641      	mov	r1, r8
  407222:	4638      	mov	r0, r7
  407224:	f7ff fba0 	bl	406968 <__sprint_r.part.0>
  407228:	2800      	cmp	r0, #0
  40722a:	d1ef      	bne.n	40720c <_vfiprintf_r+0x824>
  40722c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40722e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407230:	1c48      	adds	r0, r1, #1
  407232:	46da      	mov	sl, fp
  407234:	e5d8      	b.n	406de8 <_vfiprintf_r+0x400>
  407236:	bf00      	nop
  407238:	0040c42c 	.word	0x0040c42c
  40723c:	0040c440 	.word	0x0040c440
  407240:	0040c490 	.word	0x0040c490
  407244:	2a00      	cmp	r2, #0
  407246:	f040 8100 	bne.w	40744a <_vfiprintf_r+0xa62>
  40724a:	9a05      	ldr	r2, [sp, #20]
  40724c:	921d      	str	r2, [sp, #116]	; 0x74
  40724e:	2301      	movs	r3, #1
  407250:	9211      	str	r2, [sp, #68]	; 0x44
  407252:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  407256:	9310      	str	r3, [sp, #64]	; 0x40
  407258:	46da      	mov	sl, fp
  40725a:	f10a 0a08 	add.w	sl, sl, #8
  40725e:	9b03      	ldr	r3, [sp, #12]
  407260:	0759      	lsls	r1, r3, #29
  407262:	d505      	bpl.n	407270 <_vfiprintf_r+0x888>
  407264:	9b07      	ldr	r3, [sp, #28]
  407266:	9902      	ldr	r1, [sp, #8]
  407268:	1a5c      	subs	r4, r3, r1
  40726a:	2c00      	cmp	r4, #0
  40726c:	f73f adae 	bgt.w	406dcc <_vfiprintf_r+0x3e4>
  407270:	9b04      	ldr	r3, [sp, #16]
  407272:	9907      	ldr	r1, [sp, #28]
  407274:	9802      	ldr	r0, [sp, #8]
  407276:	4281      	cmp	r1, r0
  407278:	bfac      	ite	ge
  40727a:	185b      	addge	r3, r3, r1
  40727c:	181b      	addlt	r3, r3, r0
  40727e:	9304      	str	r3, [sp, #16]
  407280:	bb7a      	cbnz	r2, 4072e2 <_vfiprintf_r+0x8fa>
  407282:	2300      	movs	r3, #0
  407284:	9310      	str	r3, [sp, #64]	; 0x40
  407286:	46da      	mov	sl, fp
  407288:	f7ff bbe0 	b.w	406a4c <_vfiprintf_r+0x64>
  40728c:	aa0f      	add	r2, sp, #60	; 0x3c
  40728e:	9901      	ldr	r1, [sp, #4]
  407290:	4620      	mov	r0, r4
  407292:	f7ff fb69 	bl	406968 <__sprint_r.part.0>
  407296:	2800      	cmp	r0, #0
  407298:	d1b8      	bne.n	40720c <_vfiprintf_r+0x824>
  40729a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40729c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40729e:	f101 0e01 	add.w	lr, r1, #1
  4072a2:	46dc      	mov	ip, fp
  4072a4:	e54e      	b.n	406d44 <_vfiprintf_r+0x35c>
  4072a6:	2a00      	cmp	r2, #0
  4072a8:	f040 811c 	bne.w	4074e4 <_vfiprintf_r+0xafc>
  4072ac:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4072b0:	2900      	cmp	r1, #0
  4072b2:	f000 8111 	beq.w	4074d8 <_vfiprintf_r+0xaf0>
  4072b6:	2201      	movs	r2, #1
  4072b8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4072bc:	4610      	mov	r0, r2
  4072be:	921d      	str	r2, [sp, #116]	; 0x74
  4072c0:	911c      	str	r1, [sp, #112]	; 0x70
  4072c2:	46da      	mov	sl, fp
  4072c4:	4601      	mov	r1, r0
  4072c6:	f10a 0a08 	add.w	sl, sl, #8
  4072ca:	3001      	adds	r0, #1
  4072cc:	e50d      	b.n	406cea <_vfiprintf_r+0x302>
  4072ce:	9b03      	ldr	r3, [sp, #12]
  4072d0:	2a01      	cmp	r2, #1
  4072d2:	f000 8090 	beq.w	4073f6 <_vfiprintf_r+0xa0e>
  4072d6:	2a02      	cmp	r2, #2
  4072d8:	d10b      	bne.n	4072f2 <_vfiprintf_r+0x90a>
  4072da:	9303      	str	r3, [sp, #12]
  4072dc:	2600      	movs	r6, #0
  4072de:	2700      	movs	r7, #0
  4072e0:	e615      	b.n	406f0e <_vfiprintf_r+0x526>
  4072e2:	aa0f      	add	r2, sp, #60	; 0x3c
  4072e4:	9901      	ldr	r1, [sp, #4]
  4072e6:	9806      	ldr	r0, [sp, #24]
  4072e8:	f7ff fb3e 	bl	406968 <__sprint_r.part.0>
  4072ec:	2800      	cmp	r0, #0
  4072ee:	d0c8      	beq.n	407282 <_vfiprintf_r+0x89a>
  4072f0:	e78c      	b.n	40720c <_vfiprintf_r+0x824>
  4072f2:	9303      	str	r3, [sp, #12]
  4072f4:	2600      	movs	r6, #0
  4072f6:	2700      	movs	r7, #0
  4072f8:	4659      	mov	r1, fp
  4072fa:	e000      	b.n	4072fe <_vfiprintf_r+0x916>
  4072fc:	4641      	mov	r1, r8
  4072fe:	08f2      	lsrs	r2, r6, #3
  407300:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  407304:	08f8      	lsrs	r0, r7, #3
  407306:	f006 0307 	and.w	r3, r6, #7
  40730a:	4607      	mov	r7, r0
  40730c:	4616      	mov	r6, r2
  40730e:	3330      	adds	r3, #48	; 0x30
  407310:	ea56 0207 	orrs.w	r2, r6, r7
  407314:	f801 3c01 	strb.w	r3, [r1, #-1]
  407318:	f101 38ff 	add.w	r8, r1, #4294967295
  40731c:	d1ee      	bne.n	4072fc <_vfiprintf_r+0x914>
  40731e:	9a03      	ldr	r2, [sp, #12]
  407320:	07d6      	lsls	r6, r2, #31
  407322:	f57f ae04 	bpl.w	406f2e <_vfiprintf_r+0x546>
  407326:	2b30      	cmp	r3, #48	; 0x30
  407328:	f43f ae01 	beq.w	406f2e <_vfiprintf_r+0x546>
  40732c:	3902      	subs	r1, #2
  40732e:	2330      	movs	r3, #48	; 0x30
  407330:	f808 3c01 	strb.w	r3, [r8, #-1]
  407334:	ebab 0301 	sub.w	r3, fp, r1
  407338:	9305      	str	r3, [sp, #20]
  40733a:	4688      	mov	r8, r1
  40733c:	e47e      	b.n	406c3c <_vfiprintf_r+0x254>
  40733e:	9b04      	ldr	r3, [sp, #16]
  407340:	9a07      	ldr	r2, [sp, #28]
  407342:	428a      	cmp	r2, r1
  407344:	bfac      	ite	ge
  407346:	189b      	addge	r3, r3, r2
  407348:	185b      	addlt	r3, r3, r1
  40734a:	9304      	str	r3, [sp, #16]
  40734c:	e799      	b.n	407282 <_vfiprintf_r+0x89a>
  40734e:	2202      	movs	r2, #2
  407350:	e455      	b.n	406bfe <_vfiprintf_r+0x216>
  407352:	2f00      	cmp	r7, #0
  407354:	bf08      	it	eq
  407356:	2e0a      	cmpeq	r6, #10
  407358:	d34c      	bcc.n	4073f4 <_vfiprintf_r+0xa0c>
  40735a:	46d8      	mov	r8, fp
  40735c:	4630      	mov	r0, r6
  40735e:	4639      	mov	r1, r7
  407360:	220a      	movs	r2, #10
  407362:	2300      	movs	r3, #0
  407364:	f003 febe 	bl	40b0e4 <__aeabi_uldivmod>
  407368:	3230      	adds	r2, #48	; 0x30
  40736a:	f808 2d01 	strb.w	r2, [r8, #-1]!
  40736e:	4630      	mov	r0, r6
  407370:	4639      	mov	r1, r7
  407372:	2300      	movs	r3, #0
  407374:	220a      	movs	r2, #10
  407376:	f003 feb5 	bl	40b0e4 <__aeabi_uldivmod>
  40737a:	4606      	mov	r6, r0
  40737c:	460f      	mov	r7, r1
  40737e:	ea56 0307 	orrs.w	r3, r6, r7
  407382:	d1eb      	bne.n	40735c <_vfiprintf_r+0x974>
  407384:	ebab 0308 	sub.w	r3, fp, r8
  407388:	9305      	str	r3, [sp, #20]
  40738a:	e457      	b.n	406c3c <_vfiprintf_r+0x254>
  40738c:	9405      	str	r4, [sp, #20]
  40738e:	46d8      	mov	r8, fp
  407390:	e454      	b.n	406c3c <_vfiprintf_r+0x254>
  407392:	aa0f      	add	r2, sp, #60	; 0x3c
  407394:	9901      	ldr	r1, [sp, #4]
  407396:	9806      	ldr	r0, [sp, #24]
  407398:	f7ff fae6 	bl	406968 <__sprint_r.part.0>
  40739c:	2800      	cmp	r0, #0
  40739e:	f47f af35 	bne.w	40720c <_vfiprintf_r+0x824>
  4073a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4073a4:	46da      	mov	sl, fp
  4073a6:	e75a      	b.n	40725e <_vfiprintf_r+0x876>
  4073a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4073aa:	9901      	ldr	r1, [sp, #4]
  4073ac:	9806      	ldr	r0, [sp, #24]
  4073ae:	f7ff fadb 	bl	406968 <__sprint_r.part.0>
  4073b2:	2800      	cmp	r0, #0
  4073b4:	f47f af2a 	bne.w	40720c <_vfiprintf_r+0x824>
  4073b8:	46da      	mov	sl, fp
  4073ba:	f7ff bbe0 	b.w	406b7e <_vfiprintf_r+0x196>
  4073be:	3104      	adds	r1, #4
  4073c0:	6816      	ldr	r6, [r2, #0]
  4073c2:	9108      	str	r1, [sp, #32]
  4073c4:	2201      	movs	r2, #1
  4073c6:	2700      	movs	r7, #0
  4073c8:	e419      	b.n	406bfe <_vfiprintf_r+0x216>
  4073ca:	9808      	ldr	r0, [sp, #32]
  4073cc:	4601      	mov	r1, r0
  4073ce:	3104      	adds	r1, #4
  4073d0:	6806      	ldr	r6, [r0, #0]
  4073d2:	9108      	str	r1, [sp, #32]
  4073d4:	2700      	movs	r7, #0
  4073d6:	e412      	b.n	406bfe <_vfiprintf_r+0x216>
  4073d8:	680e      	ldr	r6, [r1, #0]
  4073da:	3104      	adds	r1, #4
  4073dc:	9108      	str	r1, [sp, #32]
  4073de:	2700      	movs	r7, #0
  4073e0:	e5d9      	b.n	406f96 <_vfiprintf_r+0x5ae>
  4073e2:	9908      	ldr	r1, [sp, #32]
  4073e4:	680e      	ldr	r6, [r1, #0]
  4073e6:	460a      	mov	r2, r1
  4073e8:	17f7      	asrs	r7, r6, #31
  4073ea:	3204      	adds	r2, #4
  4073ec:	9208      	str	r2, [sp, #32]
  4073ee:	4630      	mov	r0, r6
  4073f0:	4639      	mov	r1, r7
  4073f2:	e575      	b.n	406ee0 <_vfiprintf_r+0x4f8>
  4073f4:	9b03      	ldr	r3, [sp, #12]
  4073f6:	9303      	str	r3, [sp, #12]
  4073f8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  4073fc:	3630      	adds	r6, #48	; 0x30
  4073fe:	2301      	movs	r3, #1
  407400:	f808 6d41 	strb.w	r6, [r8, #-65]!
  407404:	9305      	str	r3, [sp, #20]
  407406:	e419      	b.n	406c3c <_vfiprintf_r+0x254>
  407408:	aa0f      	add	r2, sp, #60	; 0x3c
  40740a:	9901      	ldr	r1, [sp, #4]
  40740c:	9806      	ldr	r0, [sp, #24]
  40740e:	f7ff faab 	bl	406968 <__sprint_r.part.0>
  407412:	2800      	cmp	r0, #0
  407414:	f47f aefa 	bne.w	40720c <_vfiprintf_r+0x824>
  407418:	9910      	ldr	r1, [sp, #64]	; 0x40
  40741a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40741c:	1c48      	adds	r0, r1, #1
  40741e:	46da      	mov	sl, fp
  407420:	e463      	b.n	406cea <_vfiprintf_r+0x302>
  407422:	aa0f      	add	r2, sp, #60	; 0x3c
  407424:	9901      	ldr	r1, [sp, #4]
  407426:	9806      	ldr	r0, [sp, #24]
  407428:	f7ff fa9e 	bl	406968 <__sprint_r.part.0>
  40742c:	2800      	cmp	r0, #0
  40742e:	f47f aeed 	bne.w	40720c <_vfiprintf_r+0x824>
  407432:	9910      	ldr	r1, [sp, #64]	; 0x40
  407434:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407436:	1c48      	adds	r0, r1, #1
  407438:	46da      	mov	sl, fp
  40743a:	e69e      	b.n	40717a <_vfiprintf_r+0x792>
  40743c:	2a00      	cmp	r2, #0
  40743e:	f040 8086 	bne.w	40754e <_vfiprintf_r+0xb66>
  407442:	2001      	movs	r0, #1
  407444:	4611      	mov	r1, r2
  407446:	46da      	mov	sl, fp
  407448:	e69b      	b.n	407182 <_vfiprintf_r+0x79a>
  40744a:	aa0f      	add	r2, sp, #60	; 0x3c
  40744c:	9901      	ldr	r1, [sp, #4]
  40744e:	9806      	ldr	r0, [sp, #24]
  407450:	f7ff fa8a 	bl	406968 <__sprint_r.part.0>
  407454:	2800      	cmp	r0, #0
  407456:	f47f aed9 	bne.w	40720c <_vfiprintf_r+0x824>
  40745a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40745c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40745e:	3001      	adds	r0, #1
  407460:	46da      	mov	sl, fp
  407462:	e49a      	b.n	406d9a <_vfiprintf_r+0x3b2>
  407464:	9e08      	ldr	r6, [sp, #32]
  407466:	3607      	adds	r6, #7
  407468:	f026 0607 	bic.w	r6, r6, #7
  40746c:	e9d6 0100 	ldrd	r0, r1, [r6]
  407470:	f106 0208 	add.w	r2, r6, #8
  407474:	9208      	str	r2, [sp, #32]
  407476:	4606      	mov	r6, r0
  407478:	460f      	mov	r7, r1
  40747a:	e531      	b.n	406ee0 <_vfiprintf_r+0x4f8>
  40747c:	9e08      	ldr	r6, [sp, #32]
  40747e:	3607      	adds	r6, #7
  407480:	f026 0207 	bic.w	r2, r6, #7
  407484:	f102 0108 	add.w	r1, r2, #8
  407488:	e9d2 6700 	ldrd	r6, r7, [r2]
  40748c:	9108      	str	r1, [sp, #32]
  40748e:	2201      	movs	r2, #1
  407490:	f7ff bbb5 	b.w	406bfe <_vfiprintf_r+0x216>
  407494:	9e08      	ldr	r6, [sp, #32]
  407496:	3607      	adds	r6, #7
  407498:	f026 0207 	bic.w	r2, r6, #7
  40749c:	f102 0108 	add.w	r1, r2, #8
  4074a0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4074a4:	9108      	str	r1, [sp, #32]
  4074a6:	2200      	movs	r2, #0
  4074a8:	f7ff bba9 	b.w	406bfe <_vfiprintf_r+0x216>
  4074ac:	9e08      	ldr	r6, [sp, #32]
  4074ae:	3607      	adds	r6, #7
  4074b0:	f026 0107 	bic.w	r1, r6, #7
  4074b4:	f101 0008 	add.w	r0, r1, #8
  4074b8:	9008      	str	r0, [sp, #32]
  4074ba:	e9d1 6700 	ldrd	r6, r7, [r1]
  4074be:	e56a      	b.n	406f96 <_vfiprintf_r+0x5ae>
  4074c0:	46d8      	mov	r8, fp
  4074c2:	f7ff bbbb 	b.w	406c3c <_vfiprintf_r+0x254>
  4074c6:	252d      	movs	r5, #45	; 0x2d
  4074c8:	4276      	negs	r6, r6
  4074ca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4074ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4074d2:	2201      	movs	r2, #1
  4074d4:	f7ff bb98 	b.w	406c08 <_vfiprintf_r+0x220>
  4074d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4074da:	b9d3      	cbnz	r3, 407512 <_vfiprintf_r+0xb2a>
  4074dc:	4611      	mov	r1, r2
  4074de:	2001      	movs	r0, #1
  4074e0:	46da      	mov	sl, fp
  4074e2:	e64e      	b.n	407182 <_vfiprintf_r+0x79a>
  4074e4:	aa0f      	add	r2, sp, #60	; 0x3c
  4074e6:	9901      	ldr	r1, [sp, #4]
  4074e8:	9806      	ldr	r0, [sp, #24]
  4074ea:	f7ff fa3d 	bl	406968 <__sprint_r.part.0>
  4074ee:	2800      	cmp	r0, #0
  4074f0:	f47f ae8c 	bne.w	40720c <_vfiprintf_r+0x824>
  4074f4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4074f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4074f8:	1c48      	adds	r0, r1, #1
  4074fa:	46da      	mov	sl, fp
  4074fc:	e61a      	b.n	407134 <_vfiprintf_r+0x74c>
  4074fe:	aa0f      	add	r2, sp, #60	; 0x3c
  407500:	9901      	ldr	r1, [sp, #4]
  407502:	9806      	ldr	r0, [sp, #24]
  407504:	f7ff fa30 	bl	406968 <__sprint_r.part.0>
  407508:	2800      	cmp	r0, #0
  40750a:	f47f ae7f 	bne.w	40720c <_vfiprintf_r+0x824>
  40750e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407510:	e6ae      	b.n	407270 <_vfiprintf_r+0x888>
  407512:	ab0e      	add	r3, sp, #56	; 0x38
  407514:	2202      	movs	r2, #2
  407516:	931c      	str	r3, [sp, #112]	; 0x70
  407518:	921d      	str	r2, [sp, #116]	; 0x74
  40751a:	2001      	movs	r0, #1
  40751c:	46da      	mov	sl, fp
  40751e:	e628      	b.n	407172 <_vfiprintf_r+0x78a>
  407520:	9a08      	ldr	r2, [sp, #32]
  407522:	9904      	ldr	r1, [sp, #16]
  407524:	6813      	ldr	r3, [r2, #0]
  407526:	17cd      	asrs	r5, r1, #31
  407528:	4608      	mov	r0, r1
  40752a:	3204      	adds	r2, #4
  40752c:	4629      	mov	r1, r5
  40752e:	9208      	str	r2, [sp, #32]
  407530:	e9c3 0100 	strd	r0, r1, [r3]
  407534:	f7ff ba8a 	b.w	406a4c <_vfiprintf_r+0x64>
  407538:	4640      	mov	r0, r8
  40753a:	9608      	str	r6, [sp, #32]
  40753c:	9303      	str	r3, [sp, #12]
  40753e:	f7fd ff7f 	bl	405440 <strlen>
  407542:	2400      	movs	r4, #0
  407544:	9005      	str	r0, [sp, #20]
  407546:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40754a:	f7ff bb77 	b.w	406c3c <_vfiprintf_r+0x254>
  40754e:	aa0f      	add	r2, sp, #60	; 0x3c
  407550:	9901      	ldr	r1, [sp, #4]
  407552:	9806      	ldr	r0, [sp, #24]
  407554:	f7ff fa08 	bl	406968 <__sprint_r.part.0>
  407558:	2800      	cmp	r0, #0
  40755a:	f47f ae57 	bne.w	40720c <_vfiprintf_r+0x824>
  40755e:	9910      	ldr	r1, [sp, #64]	; 0x40
  407560:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407562:	1c48      	adds	r0, r1, #1
  407564:	46da      	mov	sl, fp
  407566:	e60c      	b.n	407182 <_vfiprintf_r+0x79a>
  407568:	9910      	ldr	r1, [sp, #64]	; 0x40
  40756a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40756c:	4e1c      	ldr	r6, [pc, #112]	; (4075e0 <_vfiprintf_r+0xbf8>)
  40756e:	3101      	adds	r1, #1
  407570:	f7ff bba9 	b.w	406cc6 <_vfiprintf_r+0x2de>
  407574:	2c06      	cmp	r4, #6
  407576:	bf28      	it	cs
  407578:	2406      	movcs	r4, #6
  40757a:	9405      	str	r4, [sp, #20]
  40757c:	9608      	str	r6, [sp, #32]
  40757e:	9402      	str	r4, [sp, #8]
  407580:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4075e4 <_vfiprintf_r+0xbfc>
  407584:	e493      	b.n	406eae <_vfiprintf_r+0x4c6>
  407586:	9810      	ldr	r0, [sp, #64]	; 0x40
  407588:	4e15      	ldr	r6, [pc, #84]	; (4075e0 <_vfiprintf_r+0xbf8>)
  40758a:	3001      	adds	r0, #1
  40758c:	e443      	b.n	406e16 <_vfiprintf_r+0x42e>
  40758e:	4686      	mov	lr, r0
  407590:	f7ff bbef 	b.w	406d72 <_vfiprintf_r+0x38a>
  407594:	9405      	str	r4, [sp, #20]
  407596:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40759a:	9608      	str	r6, [sp, #32]
  40759c:	9303      	str	r3, [sp, #12]
  40759e:	4604      	mov	r4, r0
  4075a0:	f7ff bb4c 	b.w	406c3c <_vfiprintf_r+0x254>
  4075a4:	9908      	ldr	r1, [sp, #32]
  4075a6:	f899 2001 	ldrb.w	r2, [r9, #1]
  4075aa:	680c      	ldr	r4, [r1, #0]
  4075ac:	3104      	adds	r1, #4
  4075ae:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4075b2:	46b9      	mov	r9, r7
  4075b4:	9108      	str	r1, [sp, #32]
  4075b6:	f7ff ba7e 	b.w	406ab6 <_vfiprintf_r+0xce>
  4075ba:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4075be:	e4c6      	b.n	406f4e <_vfiprintf_r+0x566>
  4075c0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4075c4:	e47a      	b.n	406ebc <_vfiprintf_r+0x4d4>
  4075c6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4075ca:	e575      	b.n	4070b8 <_vfiprintf_r+0x6d0>
  4075cc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4075d0:	e4d0      	b.n	406f74 <_vfiprintf_r+0x58c>
  4075d2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4075d6:	e587      	b.n	4070e8 <_vfiprintf_r+0x700>
  4075d8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4075dc:	e522      	b.n	407024 <_vfiprintf_r+0x63c>
  4075de:	bf00      	nop
  4075e0:	0040c480 	.word	0x0040c480
  4075e4:	0040c454 	.word	0x0040c454

004075e8 <__sbprintf>:
  4075e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4075ea:	460c      	mov	r4, r1
  4075ec:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  4075f0:	8989      	ldrh	r1, [r1, #12]
  4075f2:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4075f4:	89e5      	ldrh	r5, [r4, #14]
  4075f6:	9619      	str	r6, [sp, #100]	; 0x64
  4075f8:	f021 0102 	bic.w	r1, r1, #2
  4075fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4075fe:	f8ad 500e 	strh.w	r5, [sp, #14]
  407602:	2500      	movs	r5, #0
  407604:	69e7      	ldr	r7, [r4, #28]
  407606:	f8ad 100c 	strh.w	r1, [sp, #12]
  40760a:	9609      	str	r6, [sp, #36]	; 0x24
  40760c:	9506      	str	r5, [sp, #24]
  40760e:	ae1a      	add	r6, sp, #104	; 0x68
  407610:	f44f 6580 	mov.w	r5, #1024	; 0x400
  407614:	4669      	mov	r1, sp
  407616:	9600      	str	r6, [sp, #0]
  407618:	9604      	str	r6, [sp, #16]
  40761a:	9502      	str	r5, [sp, #8]
  40761c:	9505      	str	r5, [sp, #20]
  40761e:	9707      	str	r7, [sp, #28]
  407620:	4606      	mov	r6, r0
  407622:	f7ff f9e1 	bl	4069e8 <_vfiprintf_r>
  407626:	1e05      	subs	r5, r0, #0
  407628:	db07      	blt.n	40763a <__sbprintf+0x52>
  40762a:	4630      	mov	r0, r6
  40762c:	4669      	mov	r1, sp
  40762e:	f001 f8e5 	bl	4087fc <_fflush_r>
  407632:	2800      	cmp	r0, #0
  407634:	bf18      	it	ne
  407636:	f04f 35ff 	movne.w	r5, #4294967295
  40763a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40763e:	065b      	lsls	r3, r3, #25
  407640:	d503      	bpl.n	40764a <__sbprintf+0x62>
  407642:	89a3      	ldrh	r3, [r4, #12]
  407644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407648:	81a3      	strh	r3, [r4, #12]
  40764a:	4628      	mov	r0, r5
  40764c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  407650:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407652:	bf00      	nop

00407654 <__swsetup_r>:
  407654:	b538      	push	{r3, r4, r5, lr}
  407656:	4b30      	ldr	r3, [pc, #192]	; (407718 <__swsetup_r+0xc4>)
  407658:	681b      	ldr	r3, [r3, #0]
  40765a:	4605      	mov	r5, r0
  40765c:	460c      	mov	r4, r1
  40765e:	b113      	cbz	r3, 407666 <__swsetup_r+0x12>
  407660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407662:	2a00      	cmp	r2, #0
  407664:	d038      	beq.n	4076d8 <__swsetup_r+0x84>
  407666:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40766a:	b293      	uxth	r3, r2
  40766c:	0718      	lsls	r0, r3, #28
  40766e:	d50c      	bpl.n	40768a <__swsetup_r+0x36>
  407670:	6920      	ldr	r0, [r4, #16]
  407672:	b1a8      	cbz	r0, 4076a0 <__swsetup_r+0x4c>
  407674:	f013 0201 	ands.w	r2, r3, #1
  407678:	d01e      	beq.n	4076b8 <__swsetup_r+0x64>
  40767a:	6963      	ldr	r3, [r4, #20]
  40767c:	2200      	movs	r2, #0
  40767e:	425b      	negs	r3, r3
  407680:	61a3      	str	r3, [r4, #24]
  407682:	60a2      	str	r2, [r4, #8]
  407684:	b1f0      	cbz	r0, 4076c4 <__swsetup_r+0x70>
  407686:	2000      	movs	r0, #0
  407688:	bd38      	pop	{r3, r4, r5, pc}
  40768a:	06d9      	lsls	r1, r3, #27
  40768c:	d53c      	bpl.n	407708 <__swsetup_r+0xb4>
  40768e:	0758      	lsls	r0, r3, #29
  407690:	d426      	bmi.n	4076e0 <__swsetup_r+0x8c>
  407692:	6920      	ldr	r0, [r4, #16]
  407694:	f042 0308 	orr.w	r3, r2, #8
  407698:	81a3      	strh	r3, [r4, #12]
  40769a:	b29b      	uxth	r3, r3
  40769c:	2800      	cmp	r0, #0
  40769e:	d1e9      	bne.n	407674 <__swsetup_r+0x20>
  4076a0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4076a4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4076a8:	d0e4      	beq.n	407674 <__swsetup_r+0x20>
  4076aa:	4628      	mov	r0, r5
  4076ac:	4621      	mov	r1, r4
  4076ae:	f001 fce1 	bl	409074 <__smakebuf_r>
  4076b2:	89a3      	ldrh	r3, [r4, #12]
  4076b4:	6920      	ldr	r0, [r4, #16]
  4076b6:	e7dd      	b.n	407674 <__swsetup_r+0x20>
  4076b8:	0799      	lsls	r1, r3, #30
  4076ba:	bf58      	it	pl
  4076bc:	6962      	ldrpl	r2, [r4, #20]
  4076be:	60a2      	str	r2, [r4, #8]
  4076c0:	2800      	cmp	r0, #0
  4076c2:	d1e0      	bne.n	407686 <__swsetup_r+0x32>
  4076c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4076c8:	061a      	lsls	r2, r3, #24
  4076ca:	d5dd      	bpl.n	407688 <__swsetup_r+0x34>
  4076cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4076d0:	81a3      	strh	r3, [r4, #12]
  4076d2:	f04f 30ff 	mov.w	r0, #4294967295
  4076d6:	bd38      	pop	{r3, r4, r5, pc}
  4076d8:	4618      	mov	r0, r3
  4076da:	f001 f923 	bl	408924 <__sinit>
  4076de:	e7c2      	b.n	407666 <__swsetup_r+0x12>
  4076e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4076e2:	b151      	cbz	r1, 4076fa <__swsetup_r+0xa6>
  4076e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4076e8:	4299      	cmp	r1, r3
  4076ea:	d004      	beq.n	4076f6 <__swsetup_r+0xa2>
  4076ec:	4628      	mov	r0, r5
  4076ee:	f001 f9ef 	bl	408ad0 <_free_r>
  4076f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4076f6:	2300      	movs	r3, #0
  4076f8:	6323      	str	r3, [r4, #48]	; 0x30
  4076fa:	2300      	movs	r3, #0
  4076fc:	6920      	ldr	r0, [r4, #16]
  4076fe:	6063      	str	r3, [r4, #4]
  407700:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407704:	6020      	str	r0, [r4, #0]
  407706:	e7c5      	b.n	407694 <__swsetup_r+0x40>
  407708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40770c:	2309      	movs	r3, #9
  40770e:	602b      	str	r3, [r5, #0]
  407710:	f04f 30ff 	mov.w	r0, #4294967295
  407714:	81a2      	strh	r2, [r4, #12]
  407716:	bd38      	pop	{r3, r4, r5, pc}
  407718:	20400044 	.word	0x20400044

0040771c <register_fini>:
  40771c:	4b02      	ldr	r3, [pc, #8]	; (407728 <register_fini+0xc>)
  40771e:	b113      	cbz	r3, 407726 <register_fini+0xa>
  407720:	4802      	ldr	r0, [pc, #8]	; (40772c <register_fini+0x10>)
  407722:	f000 b805 	b.w	407730 <atexit>
  407726:	4770      	bx	lr
  407728:	00000000 	.word	0x00000000
  40772c:	00408939 	.word	0x00408939

00407730 <atexit>:
  407730:	2300      	movs	r3, #0
  407732:	4601      	mov	r1, r0
  407734:	461a      	mov	r2, r3
  407736:	4618      	mov	r0, r3
  407738:	f002 bf1e 	b.w	40a578 <__register_exitproc>

0040773c <quorem>:
  40773c:	6902      	ldr	r2, [r0, #16]
  40773e:	690b      	ldr	r3, [r1, #16]
  407740:	4293      	cmp	r3, r2
  407742:	f300 808d 	bgt.w	407860 <quorem+0x124>
  407746:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40774a:	f103 38ff 	add.w	r8, r3, #4294967295
  40774e:	f101 0714 	add.w	r7, r1, #20
  407752:	f100 0b14 	add.w	fp, r0, #20
  407756:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40775a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40775e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407762:	b083      	sub	sp, #12
  407764:	3201      	adds	r2, #1
  407766:	fbb3 f9f2 	udiv	r9, r3, r2
  40776a:	eb0b 0304 	add.w	r3, fp, r4
  40776e:	9400      	str	r4, [sp, #0]
  407770:	eb07 0a04 	add.w	sl, r7, r4
  407774:	9301      	str	r3, [sp, #4]
  407776:	f1b9 0f00 	cmp.w	r9, #0
  40777a:	d039      	beq.n	4077f0 <quorem+0xb4>
  40777c:	2500      	movs	r5, #0
  40777e:	462e      	mov	r6, r5
  407780:	46bc      	mov	ip, r7
  407782:	46de      	mov	lr, fp
  407784:	f85c 4b04 	ldr.w	r4, [ip], #4
  407788:	f8de 3000 	ldr.w	r3, [lr]
  40778c:	b2a2      	uxth	r2, r4
  40778e:	fb09 5502 	mla	r5, r9, r2, r5
  407792:	0c22      	lsrs	r2, r4, #16
  407794:	0c2c      	lsrs	r4, r5, #16
  407796:	fb09 4202 	mla	r2, r9, r2, r4
  40779a:	b2ad      	uxth	r5, r5
  40779c:	1b75      	subs	r5, r6, r5
  40779e:	b296      	uxth	r6, r2
  4077a0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4077a4:	fa15 f383 	uxtah	r3, r5, r3
  4077a8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4077ac:	b29b      	uxth	r3, r3
  4077ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4077b2:	45e2      	cmp	sl, ip
  4077b4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4077b8:	f84e 3b04 	str.w	r3, [lr], #4
  4077bc:	ea4f 4626 	mov.w	r6, r6, asr #16
  4077c0:	d2e0      	bcs.n	407784 <quorem+0x48>
  4077c2:	9b00      	ldr	r3, [sp, #0]
  4077c4:	f85b 3003 	ldr.w	r3, [fp, r3]
  4077c8:	b993      	cbnz	r3, 4077f0 <quorem+0xb4>
  4077ca:	9c01      	ldr	r4, [sp, #4]
  4077cc:	1f23      	subs	r3, r4, #4
  4077ce:	459b      	cmp	fp, r3
  4077d0:	d20c      	bcs.n	4077ec <quorem+0xb0>
  4077d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4077d6:	b94b      	cbnz	r3, 4077ec <quorem+0xb0>
  4077d8:	f1a4 0308 	sub.w	r3, r4, #8
  4077dc:	e002      	b.n	4077e4 <quorem+0xa8>
  4077de:	681a      	ldr	r2, [r3, #0]
  4077e0:	3b04      	subs	r3, #4
  4077e2:	b91a      	cbnz	r2, 4077ec <quorem+0xb0>
  4077e4:	459b      	cmp	fp, r3
  4077e6:	f108 38ff 	add.w	r8, r8, #4294967295
  4077ea:	d3f8      	bcc.n	4077de <quorem+0xa2>
  4077ec:	f8c0 8010 	str.w	r8, [r0, #16]
  4077f0:	4604      	mov	r4, r0
  4077f2:	f002 faa5 	bl	409d40 <__mcmp>
  4077f6:	2800      	cmp	r0, #0
  4077f8:	db2e      	blt.n	407858 <quorem+0x11c>
  4077fa:	f109 0901 	add.w	r9, r9, #1
  4077fe:	465d      	mov	r5, fp
  407800:	2300      	movs	r3, #0
  407802:	f857 1b04 	ldr.w	r1, [r7], #4
  407806:	6828      	ldr	r0, [r5, #0]
  407808:	b28a      	uxth	r2, r1
  40780a:	1a9a      	subs	r2, r3, r2
  40780c:	0c0b      	lsrs	r3, r1, #16
  40780e:	fa12 f280 	uxtah	r2, r2, r0
  407812:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407816:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40781a:	b292      	uxth	r2, r2
  40781c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407820:	45ba      	cmp	sl, r7
  407822:	f845 2b04 	str.w	r2, [r5], #4
  407826:	ea4f 4323 	mov.w	r3, r3, asr #16
  40782a:	d2ea      	bcs.n	407802 <quorem+0xc6>
  40782c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407830:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407834:	b982      	cbnz	r2, 407858 <quorem+0x11c>
  407836:	1f1a      	subs	r2, r3, #4
  407838:	4593      	cmp	fp, r2
  40783a:	d20b      	bcs.n	407854 <quorem+0x118>
  40783c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407840:	b942      	cbnz	r2, 407854 <quorem+0x118>
  407842:	3b08      	subs	r3, #8
  407844:	e002      	b.n	40784c <quorem+0x110>
  407846:	681a      	ldr	r2, [r3, #0]
  407848:	3b04      	subs	r3, #4
  40784a:	b91a      	cbnz	r2, 407854 <quorem+0x118>
  40784c:	459b      	cmp	fp, r3
  40784e:	f108 38ff 	add.w	r8, r8, #4294967295
  407852:	d3f8      	bcc.n	407846 <quorem+0x10a>
  407854:	f8c4 8010 	str.w	r8, [r4, #16]
  407858:	4648      	mov	r0, r9
  40785a:	b003      	add	sp, #12
  40785c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407860:	2000      	movs	r0, #0
  407862:	4770      	bx	lr
  407864:	0000      	movs	r0, r0
	...

00407868 <_dtoa_r>:
  407868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40786c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40786e:	b09b      	sub	sp, #108	; 0x6c
  407870:	4604      	mov	r4, r0
  407872:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  407874:	4692      	mov	sl, r2
  407876:	469b      	mov	fp, r3
  407878:	b141      	cbz	r1, 40788c <_dtoa_r+0x24>
  40787a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40787c:	604a      	str	r2, [r1, #4]
  40787e:	2301      	movs	r3, #1
  407880:	4093      	lsls	r3, r2
  407882:	608b      	str	r3, [r1, #8]
  407884:	f002 f884 	bl	409990 <_Bfree>
  407888:	2300      	movs	r3, #0
  40788a:	6423      	str	r3, [r4, #64]	; 0x40
  40788c:	f1bb 0f00 	cmp.w	fp, #0
  407890:	465d      	mov	r5, fp
  407892:	db35      	blt.n	407900 <_dtoa_r+0x98>
  407894:	2300      	movs	r3, #0
  407896:	6033      	str	r3, [r6, #0]
  407898:	4b9d      	ldr	r3, [pc, #628]	; (407b10 <_dtoa_r+0x2a8>)
  40789a:	43ab      	bics	r3, r5
  40789c:	d015      	beq.n	4078ca <_dtoa_r+0x62>
  40789e:	4650      	mov	r0, sl
  4078a0:	4659      	mov	r1, fp
  4078a2:	2200      	movs	r2, #0
  4078a4:	2300      	movs	r3, #0
  4078a6:	f003 fbad 	bl	40b004 <__aeabi_dcmpeq>
  4078aa:	4680      	mov	r8, r0
  4078ac:	2800      	cmp	r0, #0
  4078ae:	d02d      	beq.n	40790c <_dtoa_r+0xa4>
  4078b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4078b2:	2301      	movs	r3, #1
  4078b4:	6013      	str	r3, [r2, #0]
  4078b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4078b8:	2b00      	cmp	r3, #0
  4078ba:	f000 80bd 	beq.w	407a38 <_dtoa_r+0x1d0>
  4078be:	4895      	ldr	r0, [pc, #596]	; (407b14 <_dtoa_r+0x2ac>)
  4078c0:	6018      	str	r0, [r3, #0]
  4078c2:	3801      	subs	r0, #1
  4078c4:	b01b      	add	sp, #108	; 0x6c
  4078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4078ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4078cc:	f242 730f 	movw	r3, #9999	; 0x270f
  4078d0:	6013      	str	r3, [r2, #0]
  4078d2:	f1ba 0f00 	cmp.w	sl, #0
  4078d6:	d10d      	bne.n	4078f4 <_dtoa_r+0x8c>
  4078d8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4078dc:	b955      	cbnz	r5, 4078f4 <_dtoa_r+0x8c>
  4078de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4078e0:	488d      	ldr	r0, [pc, #564]	; (407b18 <_dtoa_r+0x2b0>)
  4078e2:	2b00      	cmp	r3, #0
  4078e4:	d0ee      	beq.n	4078c4 <_dtoa_r+0x5c>
  4078e6:	f100 0308 	add.w	r3, r0, #8
  4078ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4078ec:	6013      	str	r3, [r2, #0]
  4078ee:	b01b      	add	sp, #108	; 0x6c
  4078f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4078f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4078f6:	4889      	ldr	r0, [pc, #548]	; (407b1c <_dtoa_r+0x2b4>)
  4078f8:	2b00      	cmp	r3, #0
  4078fa:	d0e3      	beq.n	4078c4 <_dtoa_r+0x5c>
  4078fc:	1cc3      	adds	r3, r0, #3
  4078fe:	e7f4      	b.n	4078ea <_dtoa_r+0x82>
  407900:	2301      	movs	r3, #1
  407902:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  407906:	6033      	str	r3, [r6, #0]
  407908:	46ab      	mov	fp, r5
  40790a:	e7c5      	b.n	407898 <_dtoa_r+0x30>
  40790c:	aa18      	add	r2, sp, #96	; 0x60
  40790e:	ab19      	add	r3, sp, #100	; 0x64
  407910:	9201      	str	r2, [sp, #4]
  407912:	9300      	str	r3, [sp, #0]
  407914:	4652      	mov	r2, sl
  407916:	465b      	mov	r3, fp
  407918:	4620      	mov	r0, r4
  40791a:	f002 fab1 	bl	409e80 <__d2b>
  40791e:	0d2b      	lsrs	r3, r5, #20
  407920:	4681      	mov	r9, r0
  407922:	d071      	beq.n	407a08 <_dtoa_r+0x1a0>
  407924:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407928:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40792c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40792e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  407932:	4650      	mov	r0, sl
  407934:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407938:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40793c:	2200      	movs	r2, #0
  40793e:	4b78      	ldr	r3, [pc, #480]	; (407b20 <_dtoa_r+0x2b8>)
  407940:	f002 ff44 	bl	40a7cc <__aeabi_dsub>
  407944:	a36c      	add	r3, pc, #432	; (adr r3, 407af8 <_dtoa_r+0x290>)
  407946:	e9d3 2300 	ldrd	r2, r3, [r3]
  40794a:	f003 f8f3 	bl	40ab34 <__aeabi_dmul>
  40794e:	a36c      	add	r3, pc, #432	; (adr r3, 407b00 <_dtoa_r+0x298>)
  407950:	e9d3 2300 	ldrd	r2, r3, [r3]
  407954:	f002 ff3c 	bl	40a7d0 <__adddf3>
  407958:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40795c:	4630      	mov	r0, r6
  40795e:	f003 f883 	bl	40aa68 <__aeabi_i2d>
  407962:	a369      	add	r3, pc, #420	; (adr r3, 407b08 <_dtoa_r+0x2a0>)
  407964:	e9d3 2300 	ldrd	r2, r3, [r3]
  407968:	f003 f8e4 	bl	40ab34 <__aeabi_dmul>
  40796c:	4602      	mov	r2, r0
  40796e:	460b      	mov	r3, r1
  407970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407974:	f002 ff2c 	bl	40a7d0 <__adddf3>
  407978:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40797c:	f003 fb8a 	bl	40b094 <__aeabi_d2iz>
  407980:	2200      	movs	r2, #0
  407982:	9002      	str	r0, [sp, #8]
  407984:	2300      	movs	r3, #0
  407986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40798a:	f003 fb45 	bl	40b018 <__aeabi_dcmplt>
  40798e:	2800      	cmp	r0, #0
  407990:	f040 8173 	bne.w	407c7a <_dtoa_r+0x412>
  407994:	9d02      	ldr	r5, [sp, #8]
  407996:	2d16      	cmp	r5, #22
  407998:	f200 815d 	bhi.w	407c56 <_dtoa_r+0x3ee>
  40799c:	4b61      	ldr	r3, [pc, #388]	; (407b24 <_dtoa_r+0x2bc>)
  40799e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4079a2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4079a6:	4652      	mov	r2, sl
  4079a8:	465b      	mov	r3, fp
  4079aa:	f003 fb53 	bl	40b054 <__aeabi_dcmpgt>
  4079ae:	2800      	cmp	r0, #0
  4079b0:	f000 81c5 	beq.w	407d3e <_dtoa_r+0x4d6>
  4079b4:	1e6b      	subs	r3, r5, #1
  4079b6:	9302      	str	r3, [sp, #8]
  4079b8:	2300      	movs	r3, #0
  4079ba:	930e      	str	r3, [sp, #56]	; 0x38
  4079bc:	1bbf      	subs	r7, r7, r6
  4079be:	1e7b      	subs	r3, r7, #1
  4079c0:	9306      	str	r3, [sp, #24]
  4079c2:	f100 8154 	bmi.w	407c6e <_dtoa_r+0x406>
  4079c6:	2300      	movs	r3, #0
  4079c8:	9308      	str	r3, [sp, #32]
  4079ca:	9b02      	ldr	r3, [sp, #8]
  4079cc:	2b00      	cmp	r3, #0
  4079ce:	f2c0 8145 	blt.w	407c5c <_dtoa_r+0x3f4>
  4079d2:	9a06      	ldr	r2, [sp, #24]
  4079d4:	930d      	str	r3, [sp, #52]	; 0x34
  4079d6:	4611      	mov	r1, r2
  4079d8:	4419      	add	r1, r3
  4079da:	2300      	movs	r3, #0
  4079dc:	9106      	str	r1, [sp, #24]
  4079de:	930c      	str	r3, [sp, #48]	; 0x30
  4079e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4079e2:	2b09      	cmp	r3, #9
  4079e4:	d82a      	bhi.n	407a3c <_dtoa_r+0x1d4>
  4079e6:	2b05      	cmp	r3, #5
  4079e8:	f340 865b 	ble.w	4086a2 <_dtoa_r+0xe3a>
  4079ec:	3b04      	subs	r3, #4
  4079ee:	9324      	str	r3, [sp, #144]	; 0x90
  4079f0:	2500      	movs	r5, #0
  4079f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4079f4:	3b02      	subs	r3, #2
  4079f6:	2b03      	cmp	r3, #3
  4079f8:	f200 8642 	bhi.w	408680 <_dtoa_r+0xe18>
  4079fc:	e8df f013 	tbh	[pc, r3, lsl #1]
  407a00:	02c903d4 	.word	0x02c903d4
  407a04:	046103df 	.word	0x046103df
  407a08:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407a0a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407a0c:	443e      	add	r6, r7
  407a0e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  407a12:	2b20      	cmp	r3, #32
  407a14:	f340 818e 	ble.w	407d34 <_dtoa_r+0x4cc>
  407a18:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407a1c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407a20:	409d      	lsls	r5, r3
  407a22:	fa2a f000 	lsr.w	r0, sl, r0
  407a26:	4328      	orrs	r0, r5
  407a28:	f003 f80e 	bl	40aa48 <__aeabi_ui2d>
  407a2c:	2301      	movs	r3, #1
  407a2e:	3e01      	subs	r6, #1
  407a30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  407a34:	9314      	str	r3, [sp, #80]	; 0x50
  407a36:	e781      	b.n	40793c <_dtoa_r+0xd4>
  407a38:	483b      	ldr	r0, [pc, #236]	; (407b28 <_dtoa_r+0x2c0>)
  407a3a:	e743      	b.n	4078c4 <_dtoa_r+0x5c>
  407a3c:	2100      	movs	r1, #0
  407a3e:	6461      	str	r1, [r4, #68]	; 0x44
  407a40:	4620      	mov	r0, r4
  407a42:	9125      	str	r1, [sp, #148]	; 0x94
  407a44:	f001 ff7e 	bl	409944 <_Balloc>
  407a48:	f04f 33ff 	mov.w	r3, #4294967295
  407a4c:	930a      	str	r3, [sp, #40]	; 0x28
  407a4e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407a50:	930f      	str	r3, [sp, #60]	; 0x3c
  407a52:	2301      	movs	r3, #1
  407a54:	9004      	str	r0, [sp, #16]
  407a56:	6420      	str	r0, [r4, #64]	; 0x40
  407a58:	9224      	str	r2, [sp, #144]	; 0x90
  407a5a:	930b      	str	r3, [sp, #44]	; 0x2c
  407a5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407a5e:	2b00      	cmp	r3, #0
  407a60:	f2c0 80d9 	blt.w	407c16 <_dtoa_r+0x3ae>
  407a64:	9a02      	ldr	r2, [sp, #8]
  407a66:	2a0e      	cmp	r2, #14
  407a68:	f300 80d5 	bgt.w	407c16 <_dtoa_r+0x3ae>
  407a6c:	4b2d      	ldr	r3, [pc, #180]	; (407b24 <_dtoa_r+0x2bc>)
  407a6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407a72:	e9d3 2300 	ldrd	r2, r3, [r3]
  407a76:	e9cd 2308 	strd	r2, r3, [sp, #32]
  407a7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407a7c:	2b00      	cmp	r3, #0
  407a7e:	f2c0 83ba 	blt.w	4081f6 <_dtoa_r+0x98e>
  407a82:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  407a86:	4650      	mov	r0, sl
  407a88:	462a      	mov	r2, r5
  407a8a:	4633      	mov	r3, r6
  407a8c:	4659      	mov	r1, fp
  407a8e:	f003 f97b 	bl	40ad88 <__aeabi_ddiv>
  407a92:	f003 faff 	bl	40b094 <__aeabi_d2iz>
  407a96:	4680      	mov	r8, r0
  407a98:	f002 ffe6 	bl	40aa68 <__aeabi_i2d>
  407a9c:	462a      	mov	r2, r5
  407a9e:	4633      	mov	r3, r6
  407aa0:	f003 f848 	bl	40ab34 <__aeabi_dmul>
  407aa4:	460b      	mov	r3, r1
  407aa6:	4602      	mov	r2, r0
  407aa8:	4659      	mov	r1, fp
  407aaa:	4650      	mov	r0, sl
  407aac:	f002 fe8e 	bl	40a7cc <__aeabi_dsub>
  407ab0:	9d04      	ldr	r5, [sp, #16]
  407ab2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  407ab6:	702b      	strb	r3, [r5, #0]
  407ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407aba:	2b01      	cmp	r3, #1
  407abc:	4606      	mov	r6, r0
  407abe:	460f      	mov	r7, r1
  407ac0:	f105 0501 	add.w	r5, r5, #1
  407ac4:	d068      	beq.n	407b98 <_dtoa_r+0x330>
  407ac6:	2200      	movs	r2, #0
  407ac8:	4b18      	ldr	r3, [pc, #96]	; (407b2c <_dtoa_r+0x2c4>)
  407aca:	f003 f833 	bl	40ab34 <__aeabi_dmul>
  407ace:	2200      	movs	r2, #0
  407ad0:	2300      	movs	r3, #0
  407ad2:	4606      	mov	r6, r0
  407ad4:	460f      	mov	r7, r1
  407ad6:	f003 fa95 	bl	40b004 <__aeabi_dcmpeq>
  407ada:	2800      	cmp	r0, #0
  407adc:	f040 8088 	bne.w	407bf0 <_dtoa_r+0x388>
  407ae0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  407ae4:	f04f 0a00 	mov.w	sl, #0
  407ae8:	f8df b040 	ldr.w	fp, [pc, #64]	; 407b2c <_dtoa_r+0x2c4>
  407aec:	940c      	str	r4, [sp, #48]	; 0x30
  407aee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  407af2:	e028      	b.n	407b46 <_dtoa_r+0x2de>
  407af4:	f3af 8000 	nop.w
  407af8:	636f4361 	.word	0x636f4361
  407afc:	3fd287a7 	.word	0x3fd287a7
  407b00:	8b60c8b3 	.word	0x8b60c8b3
  407b04:	3fc68a28 	.word	0x3fc68a28
  407b08:	509f79fb 	.word	0x509f79fb
  407b0c:	3fd34413 	.word	0x3fd34413
  407b10:	7ff00000 	.word	0x7ff00000
  407b14:	0040c45d 	.word	0x0040c45d
  407b18:	0040c4a0 	.word	0x0040c4a0
  407b1c:	0040c4ac 	.word	0x0040c4ac
  407b20:	3ff80000 	.word	0x3ff80000
  407b24:	0040c4e8 	.word	0x0040c4e8
  407b28:	0040c45c 	.word	0x0040c45c
  407b2c:	40240000 	.word	0x40240000
  407b30:	f003 f800 	bl	40ab34 <__aeabi_dmul>
  407b34:	2200      	movs	r2, #0
  407b36:	2300      	movs	r3, #0
  407b38:	4606      	mov	r6, r0
  407b3a:	460f      	mov	r7, r1
  407b3c:	f003 fa62 	bl	40b004 <__aeabi_dcmpeq>
  407b40:	2800      	cmp	r0, #0
  407b42:	f040 83c1 	bne.w	4082c8 <_dtoa_r+0xa60>
  407b46:	4642      	mov	r2, r8
  407b48:	464b      	mov	r3, r9
  407b4a:	4630      	mov	r0, r6
  407b4c:	4639      	mov	r1, r7
  407b4e:	f003 f91b 	bl	40ad88 <__aeabi_ddiv>
  407b52:	f003 fa9f 	bl	40b094 <__aeabi_d2iz>
  407b56:	4604      	mov	r4, r0
  407b58:	f002 ff86 	bl	40aa68 <__aeabi_i2d>
  407b5c:	4642      	mov	r2, r8
  407b5e:	464b      	mov	r3, r9
  407b60:	f002 ffe8 	bl	40ab34 <__aeabi_dmul>
  407b64:	4602      	mov	r2, r0
  407b66:	460b      	mov	r3, r1
  407b68:	4630      	mov	r0, r6
  407b6a:	4639      	mov	r1, r7
  407b6c:	f002 fe2e 	bl	40a7cc <__aeabi_dsub>
  407b70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  407b74:	9e04      	ldr	r6, [sp, #16]
  407b76:	f805 eb01 	strb.w	lr, [r5], #1
  407b7a:	eba5 0e06 	sub.w	lr, r5, r6
  407b7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407b80:	45b6      	cmp	lr, r6
  407b82:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407b86:	4652      	mov	r2, sl
  407b88:	465b      	mov	r3, fp
  407b8a:	d1d1      	bne.n	407b30 <_dtoa_r+0x2c8>
  407b8c:	46a0      	mov	r8, r4
  407b8e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407b92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407b94:	4606      	mov	r6, r0
  407b96:	460f      	mov	r7, r1
  407b98:	4632      	mov	r2, r6
  407b9a:	463b      	mov	r3, r7
  407b9c:	4630      	mov	r0, r6
  407b9e:	4639      	mov	r1, r7
  407ba0:	f002 fe16 	bl	40a7d0 <__adddf3>
  407ba4:	4606      	mov	r6, r0
  407ba6:	460f      	mov	r7, r1
  407ba8:	4602      	mov	r2, r0
  407baa:	460b      	mov	r3, r1
  407bac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407bb0:	f003 fa32 	bl	40b018 <__aeabi_dcmplt>
  407bb4:	b948      	cbnz	r0, 407bca <_dtoa_r+0x362>
  407bb6:	4632      	mov	r2, r6
  407bb8:	463b      	mov	r3, r7
  407bba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407bbe:	f003 fa21 	bl	40b004 <__aeabi_dcmpeq>
  407bc2:	b1a8      	cbz	r0, 407bf0 <_dtoa_r+0x388>
  407bc4:	f018 0f01 	tst.w	r8, #1
  407bc8:	d012      	beq.n	407bf0 <_dtoa_r+0x388>
  407bca:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407bce:	9a04      	ldr	r2, [sp, #16]
  407bd0:	1e6b      	subs	r3, r5, #1
  407bd2:	e004      	b.n	407bde <_dtoa_r+0x376>
  407bd4:	429a      	cmp	r2, r3
  407bd6:	f000 8401 	beq.w	4083dc <_dtoa_r+0xb74>
  407bda:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407bde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  407be2:	f103 0501 	add.w	r5, r3, #1
  407be6:	d0f5      	beq.n	407bd4 <_dtoa_r+0x36c>
  407be8:	f108 0801 	add.w	r8, r8, #1
  407bec:	f883 8000 	strb.w	r8, [r3]
  407bf0:	4649      	mov	r1, r9
  407bf2:	4620      	mov	r0, r4
  407bf4:	f001 fecc 	bl	409990 <_Bfree>
  407bf8:	2200      	movs	r2, #0
  407bfa:	9b02      	ldr	r3, [sp, #8]
  407bfc:	702a      	strb	r2, [r5, #0]
  407bfe:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407c00:	3301      	adds	r3, #1
  407c02:	6013      	str	r3, [r2, #0]
  407c04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407c06:	2b00      	cmp	r3, #0
  407c08:	f000 839e 	beq.w	408348 <_dtoa_r+0xae0>
  407c0c:	9804      	ldr	r0, [sp, #16]
  407c0e:	601d      	str	r5, [r3, #0]
  407c10:	b01b      	add	sp, #108	; 0x6c
  407c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407c18:	2a00      	cmp	r2, #0
  407c1a:	d03e      	beq.n	407c9a <_dtoa_r+0x432>
  407c1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407c1e:	2a01      	cmp	r2, #1
  407c20:	f340 8311 	ble.w	408246 <_dtoa_r+0x9de>
  407c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407c28:	1e5f      	subs	r7, r3, #1
  407c2a:	42ba      	cmp	r2, r7
  407c2c:	f2c0 838f 	blt.w	40834e <_dtoa_r+0xae6>
  407c30:	1bd7      	subs	r7, r2, r7
  407c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c34:	2b00      	cmp	r3, #0
  407c36:	f2c0 848b 	blt.w	408550 <_dtoa_r+0xce8>
  407c3a:	9d08      	ldr	r5, [sp, #32]
  407c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c3e:	9a08      	ldr	r2, [sp, #32]
  407c40:	441a      	add	r2, r3
  407c42:	9208      	str	r2, [sp, #32]
  407c44:	9a06      	ldr	r2, [sp, #24]
  407c46:	2101      	movs	r1, #1
  407c48:	441a      	add	r2, r3
  407c4a:	4620      	mov	r0, r4
  407c4c:	9206      	str	r2, [sp, #24]
  407c4e:	f001 ff39 	bl	409ac4 <__i2b>
  407c52:	4606      	mov	r6, r0
  407c54:	e024      	b.n	407ca0 <_dtoa_r+0x438>
  407c56:	2301      	movs	r3, #1
  407c58:	930e      	str	r3, [sp, #56]	; 0x38
  407c5a:	e6af      	b.n	4079bc <_dtoa_r+0x154>
  407c5c:	9a08      	ldr	r2, [sp, #32]
  407c5e:	9b02      	ldr	r3, [sp, #8]
  407c60:	1ad2      	subs	r2, r2, r3
  407c62:	425b      	negs	r3, r3
  407c64:	930c      	str	r3, [sp, #48]	; 0x30
  407c66:	2300      	movs	r3, #0
  407c68:	9208      	str	r2, [sp, #32]
  407c6a:	930d      	str	r3, [sp, #52]	; 0x34
  407c6c:	e6b8      	b.n	4079e0 <_dtoa_r+0x178>
  407c6e:	f1c7 0301 	rsb	r3, r7, #1
  407c72:	9308      	str	r3, [sp, #32]
  407c74:	2300      	movs	r3, #0
  407c76:	9306      	str	r3, [sp, #24]
  407c78:	e6a7      	b.n	4079ca <_dtoa_r+0x162>
  407c7a:	9d02      	ldr	r5, [sp, #8]
  407c7c:	4628      	mov	r0, r5
  407c7e:	f002 fef3 	bl	40aa68 <__aeabi_i2d>
  407c82:	4602      	mov	r2, r0
  407c84:	460b      	mov	r3, r1
  407c86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407c8a:	f003 f9bb 	bl	40b004 <__aeabi_dcmpeq>
  407c8e:	2800      	cmp	r0, #0
  407c90:	f47f ae80 	bne.w	407994 <_dtoa_r+0x12c>
  407c94:	1e6b      	subs	r3, r5, #1
  407c96:	9302      	str	r3, [sp, #8]
  407c98:	e67c      	b.n	407994 <_dtoa_r+0x12c>
  407c9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407c9c:	9d08      	ldr	r5, [sp, #32]
  407c9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  407ca0:	2d00      	cmp	r5, #0
  407ca2:	dd0c      	ble.n	407cbe <_dtoa_r+0x456>
  407ca4:	9906      	ldr	r1, [sp, #24]
  407ca6:	2900      	cmp	r1, #0
  407ca8:	460b      	mov	r3, r1
  407caa:	dd08      	ble.n	407cbe <_dtoa_r+0x456>
  407cac:	42a9      	cmp	r1, r5
  407cae:	9a08      	ldr	r2, [sp, #32]
  407cb0:	bfa8      	it	ge
  407cb2:	462b      	movge	r3, r5
  407cb4:	1ad2      	subs	r2, r2, r3
  407cb6:	1aed      	subs	r5, r5, r3
  407cb8:	1acb      	subs	r3, r1, r3
  407cba:	9208      	str	r2, [sp, #32]
  407cbc:	9306      	str	r3, [sp, #24]
  407cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407cc0:	b1d3      	cbz	r3, 407cf8 <_dtoa_r+0x490>
  407cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407cc4:	2b00      	cmp	r3, #0
  407cc6:	f000 82b7 	beq.w	408238 <_dtoa_r+0x9d0>
  407cca:	2f00      	cmp	r7, #0
  407ccc:	dd10      	ble.n	407cf0 <_dtoa_r+0x488>
  407cce:	4631      	mov	r1, r6
  407cd0:	463a      	mov	r2, r7
  407cd2:	4620      	mov	r0, r4
  407cd4:	f001 ff92 	bl	409bfc <__pow5mult>
  407cd8:	464a      	mov	r2, r9
  407cda:	4601      	mov	r1, r0
  407cdc:	4606      	mov	r6, r0
  407cde:	4620      	mov	r0, r4
  407ce0:	f001 fefa 	bl	409ad8 <__multiply>
  407ce4:	4649      	mov	r1, r9
  407ce6:	4680      	mov	r8, r0
  407ce8:	4620      	mov	r0, r4
  407cea:	f001 fe51 	bl	409990 <_Bfree>
  407cee:	46c1      	mov	r9, r8
  407cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407cf2:	1bda      	subs	r2, r3, r7
  407cf4:	f040 82a1 	bne.w	40823a <_dtoa_r+0x9d2>
  407cf8:	2101      	movs	r1, #1
  407cfa:	4620      	mov	r0, r4
  407cfc:	f001 fee2 	bl	409ac4 <__i2b>
  407d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407d02:	2b00      	cmp	r3, #0
  407d04:	4680      	mov	r8, r0
  407d06:	dd1c      	ble.n	407d42 <_dtoa_r+0x4da>
  407d08:	4601      	mov	r1, r0
  407d0a:	461a      	mov	r2, r3
  407d0c:	4620      	mov	r0, r4
  407d0e:	f001 ff75 	bl	409bfc <__pow5mult>
  407d12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407d14:	2b01      	cmp	r3, #1
  407d16:	4680      	mov	r8, r0
  407d18:	f340 8254 	ble.w	4081c4 <_dtoa_r+0x95c>
  407d1c:	2300      	movs	r3, #0
  407d1e:	930c      	str	r3, [sp, #48]	; 0x30
  407d20:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407d24:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  407d28:	6918      	ldr	r0, [r3, #16]
  407d2a:	f001 fe7b 	bl	409a24 <__hi0bits>
  407d2e:	f1c0 0020 	rsb	r0, r0, #32
  407d32:	e010      	b.n	407d56 <_dtoa_r+0x4ee>
  407d34:	f1c3 0520 	rsb	r5, r3, #32
  407d38:	fa0a f005 	lsl.w	r0, sl, r5
  407d3c:	e674      	b.n	407a28 <_dtoa_r+0x1c0>
  407d3e:	900e      	str	r0, [sp, #56]	; 0x38
  407d40:	e63c      	b.n	4079bc <_dtoa_r+0x154>
  407d42:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407d44:	2b01      	cmp	r3, #1
  407d46:	f340 8287 	ble.w	408258 <_dtoa_r+0x9f0>
  407d4a:	2300      	movs	r3, #0
  407d4c:	930c      	str	r3, [sp, #48]	; 0x30
  407d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407d50:	2001      	movs	r0, #1
  407d52:	2b00      	cmp	r3, #0
  407d54:	d1e4      	bne.n	407d20 <_dtoa_r+0x4b8>
  407d56:	9a06      	ldr	r2, [sp, #24]
  407d58:	4410      	add	r0, r2
  407d5a:	f010 001f 	ands.w	r0, r0, #31
  407d5e:	f000 80a1 	beq.w	407ea4 <_dtoa_r+0x63c>
  407d62:	f1c0 0320 	rsb	r3, r0, #32
  407d66:	2b04      	cmp	r3, #4
  407d68:	f340 849e 	ble.w	4086a8 <_dtoa_r+0xe40>
  407d6c:	9b08      	ldr	r3, [sp, #32]
  407d6e:	f1c0 001c 	rsb	r0, r0, #28
  407d72:	4403      	add	r3, r0
  407d74:	9308      	str	r3, [sp, #32]
  407d76:	4613      	mov	r3, r2
  407d78:	4403      	add	r3, r0
  407d7a:	4405      	add	r5, r0
  407d7c:	9306      	str	r3, [sp, #24]
  407d7e:	9b08      	ldr	r3, [sp, #32]
  407d80:	2b00      	cmp	r3, #0
  407d82:	dd05      	ble.n	407d90 <_dtoa_r+0x528>
  407d84:	4649      	mov	r1, r9
  407d86:	461a      	mov	r2, r3
  407d88:	4620      	mov	r0, r4
  407d8a:	f001 ff87 	bl	409c9c <__lshift>
  407d8e:	4681      	mov	r9, r0
  407d90:	9b06      	ldr	r3, [sp, #24]
  407d92:	2b00      	cmp	r3, #0
  407d94:	dd05      	ble.n	407da2 <_dtoa_r+0x53a>
  407d96:	4641      	mov	r1, r8
  407d98:	461a      	mov	r2, r3
  407d9a:	4620      	mov	r0, r4
  407d9c:	f001 ff7e 	bl	409c9c <__lshift>
  407da0:	4680      	mov	r8, r0
  407da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407da4:	2b00      	cmp	r3, #0
  407da6:	f040 8086 	bne.w	407eb6 <_dtoa_r+0x64e>
  407daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407dac:	2b00      	cmp	r3, #0
  407dae:	f340 8266 	ble.w	40827e <_dtoa_r+0xa16>
  407db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407db4:	2b00      	cmp	r3, #0
  407db6:	f000 8098 	beq.w	407eea <_dtoa_r+0x682>
  407dba:	2d00      	cmp	r5, #0
  407dbc:	dd05      	ble.n	407dca <_dtoa_r+0x562>
  407dbe:	4631      	mov	r1, r6
  407dc0:	462a      	mov	r2, r5
  407dc2:	4620      	mov	r0, r4
  407dc4:	f001 ff6a 	bl	409c9c <__lshift>
  407dc8:	4606      	mov	r6, r0
  407dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407dcc:	2b00      	cmp	r3, #0
  407dce:	f040 8337 	bne.w	408440 <_dtoa_r+0xbd8>
  407dd2:	9606      	str	r6, [sp, #24]
  407dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407dd6:	9a04      	ldr	r2, [sp, #16]
  407dd8:	f8dd b018 	ldr.w	fp, [sp, #24]
  407ddc:	3b01      	subs	r3, #1
  407dde:	18d3      	adds	r3, r2, r3
  407de0:	930b      	str	r3, [sp, #44]	; 0x2c
  407de2:	f00a 0301 	and.w	r3, sl, #1
  407de6:	930c      	str	r3, [sp, #48]	; 0x30
  407de8:	4617      	mov	r7, r2
  407dea:	46c2      	mov	sl, r8
  407dec:	4651      	mov	r1, sl
  407dee:	4648      	mov	r0, r9
  407df0:	f7ff fca4 	bl	40773c <quorem>
  407df4:	4631      	mov	r1, r6
  407df6:	4605      	mov	r5, r0
  407df8:	4648      	mov	r0, r9
  407dfa:	f001 ffa1 	bl	409d40 <__mcmp>
  407dfe:	465a      	mov	r2, fp
  407e00:	900a      	str	r0, [sp, #40]	; 0x28
  407e02:	4651      	mov	r1, sl
  407e04:	4620      	mov	r0, r4
  407e06:	f001 ffb7 	bl	409d78 <__mdiff>
  407e0a:	68c2      	ldr	r2, [r0, #12]
  407e0c:	4680      	mov	r8, r0
  407e0e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  407e12:	2a00      	cmp	r2, #0
  407e14:	f040 822b 	bne.w	40826e <_dtoa_r+0xa06>
  407e18:	4601      	mov	r1, r0
  407e1a:	4648      	mov	r0, r9
  407e1c:	9308      	str	r3, [sp, #32]
  407e1e:	f001 ff8f 	bl	409d40 <__mcmp>
  407e22:	4641      	mov	r1, r8
  407e24:	9006      	str	r0, [sp, #24]
  407e26:	4620      	mov	r0, r4
  407e28:	f001 fdb2 	bl	409990 <_Bfree>
  407e2c:	9a06      	ldr	r2, [sp, #24]
  407e2e:	9b08      	ldr	r3, [sp, #32]
  407e30:	b932      	cbnz	r2, 407e40 <_dtoa_r+0x5d8>
  407e32:	9924      	ldr	r1, [sp, #144]	; 0x90
  407e34:	b921      	cbnz	r1, 407e40 <_dtoa_r+0x5d8>
  407e36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407e38:	2a00      	cmp	r2, #0
  407e3a:	f000 83ef 	beq.w	40861c <_dtoa_r+0xdb4>
  407e3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407e40:	990a      	ldr	r1, [sp, #40]	; 0x28
  407e42:	2900      	cmp	r1, #0
  407e44:	f2c0 829f 	blt.w	408386 <_dtoa_r+0xb1e>
  407e48:	d105      	bne.n	407e56 <_dtoa_r+0x5ee>
  407e4a:	9924      	ldr	r1, [sp, #144]	; 0x90
  407e4c:	b919      	cbnz	r1, 407e56 <_dtoa_r+0x5ee>
  407e4e:	990c      	ldr	r1, [sp, #48]	; 0x30
  407e50:	2900      	cmp	r1, #0
  407e52:	f000 8298 	beq.w	408386 <_dtoa_r+0xb1e>
  407e56:	2a00      	cmp	r2, #0
  407e58:	f300 8306 	bgt.w	408468 <_dtoa_r+0xc00>
  407e5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407e5e:	703b      	strb	r3, [r7, #0]
  407e60:	f107 0801 	add.w	r8, r7, #1
  407e64:	4297      	cmp	r7, r2
  407e66:	4645      	mov	r5, r8
  407e68:	f000 830c 	beq.w	408484 <_dtoa_r+0xc1c>
  407e6c:	4649      	mov	r1, r9
  407e6e:	2300      	movs	r3, #0
  407e70:	220a      	movs	r2, #10
  407e72:	4620      	mov	r0, r4
  407e74:	f001 fd96 	bl	4099a4 <__multadd>
  407e78:	455e      	cmp	r6, fp
  407e7a:	4681      	mov	r9, r0
  407e7c:	4631      	mov	r1, r6
  407e7e:	f04f 0300 	mov.w	r3, #0
  407e82:	f04f 020a 	mov.w	r2, #10
  407e86:	4620      	mov	r0, r4
  407e88:	f000 81eb 	beq.w	408262 <_dtoa_r+0x9fa>
  407e8c:	f001 fd8a 	bl	4099a4 <__multadd>
  407e90:	4659      	mov	r1, fp
  407e92:	4606      	mov	r6, r0
  407e94:	2300      	movs	r3, #0
  407e96:	220a      	movs	r2, #10
  407e98:	4620      	mov	r0, r4
  407e9a:	f001 fd83 	bl	4099a4 <__multadd>
  407e9e:	4647      	mov	r7, r8
  407ea0:	4683      	mov	fp, r0
  407ea2:	e7a3      	b.n	407dec <_dtoa_r+0x584>
  407ea4:	201c      	movs	r0, #28
  407ea6:	9b08      	ldr	r3, [sp, #32]
  407ea8:	4403      	add	r3, r0
  407eaa:	9308      	str	r3, [sp, #32]
  407eac:	9b06      	ldr	r3, [sp, #24]
  407eae:	4403      	add	r3, r0
  407eb0:	4405      	add	r5, r0
  407eb2:	9306      	str	r3, [sp, #24]
  407eb4:	e763      	b.n	407d7e <_dtoa_r+0x516>
  407eb6:	4641      	mov	r1, r8
  407eb8:	4648      	mov	r0, r9
  407eba:	f001 ff41 	bl	409d40 <__mcmp>
  407ebe:	2800      	cmp	r0, #0
  407ec0:	f6bf af73 	bge.w	407daa <_dtoa_r+0x542>
  407ec4:	9f02      	ldr	r7, [sp, #8]
  407ec6:	4649      	mov	r1, r9
  407ec8:	2300      	movs	r3, #0
  407eca:	220a      	movs	r2, #10
  407ecc:	4620      	mov	r0, r4
  407ece:	3f01      	subs	r7, #1
  407ed0:	9702      	str	r7, [sp, #8]
  407ed2:	f001 fd67 	bl	4099a4 <__multadd>
  407ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407ed8:	4681      	mov	r9, r0
  407eda:	2b00      	cmp	r3, #0
  407edc:	f040 83b6 	bne.w	40864c <_dtoa_r+0xde4>
  407ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407ee2:	2b00      	cmp	r3, #0
  407ee4:	f340 83bf 	ble.w	408666 <_dtoa_r+0xdfe>
  407ee8:	930a      	str	r3, [sp, #40]	; 0x28
  407eea:	f8dd b010 	ldr.w	fp, [sp, #16]
  407eee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407ef0:	465d      	mov	r5, fp
  407ef2:	e002      	b.n	407efa <_dtoa_r+0x692>
  407ef4:	f001 fd56 	bl	4099a4 <__multadd>
  407ef8:	4681      	mov	r9, r0
  407efa:	4641      	mov	r1, r8
  407efc:	4648      	mov	r0, r9
  407efe:	f7ff fc1d 	bl	40773c <quorem>
  407f02:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  407f06:	f805 ab01 	strb.w	sl, [r5], #1
  407f0a:	eba5 030b 	sub.w	r3, r5, fp
  407f0e:	42bb      	cmp	r3, r7
  407f10:	f04f 020a 	mov.w	r2, #10
  407f14:	f04f 0300 	mov.w	r3, #0
  407f18:	4649      	mov	r1, r9
  407f1a:	4620      	mov	r0, r4
  407f1c:	dbea      	blt.n	407ef4 <_dtoa_r+0x68c>
  407f1e:	9b04      	ldr	r3, [sp, #16]
  407f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407f22:	2a01      	cmp	r2, #1
  407f24:	bfac      	ite	ge
  407f26:	189b      	addge	r3, r3, r2
  407f28:	3301      	addlt	r3, #1
  407f2a:	461d      	mov	r5, r3
  407f2c:	f04f 0b00 	mov.w	fp, #0
  407f30:	4649      	mov	r1, r9
  407f32:	2201      	movs	r2, #1
  407f34:	4620      	mov	r0, r4
  407f36:	f001 feb1 	bl	409c9c <__lshift>
  407f3a:	4641      	mov	r1, r8
  407f3c:	4681      	mov	r9, r0
  407f3e:	f001 feff 	bl	409d40 <__mcmp>
  407f42:	2800      	cmp	r0, #0
  407f44:	f340 823d 	ble.w	4083c2 <_dtoa_r+0xb5a>
  407f48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407f4c:	9904      	ldr	r1, [sp, #16]
  407f4e:	1e6b      	subs	r3, r5, #1
  407f50:	e004      	b.n	407f5c <_dtoa_r+0x6f4>
  407f52:	428b      	cmp	r3, r1
  407f54:	f000 81ae 	beq.w	4082b4 <_dtoa_r+0xa4c>
  407f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407f5c:	2a39      	cmp	r2, #57	; 0x39
  407f5e:	f103 0501 	add.w	r5, r3, #1
  407f62:	d0f6      	beq.n	407f52 <_dtoa_r+0x6ea>
  407f64:	3201      	adds	r2, #1
  407f66:	701a      	strb	r2, [r3, #0]
  407f68:	4641      	mov	r1, r8
  407f6a:	4620      	mov	r0, r4
  407f6c:	f001 fd10 	bl	409990 <_Bfree>
  407f70:	2e00      	cmp	r6, #0
  407f72:	f43f ae3d 	beq.w	407bf0 <_dtoa_r+0x388>
  407f76:	f1bb 0f00 	cmp.w	fp, #0
  407f7a:	d005      	beq.n	407f88 <_dtoa_r+0x720>
  407f7c:	45b3      	cmp	fp, r6
  407f7e:	d003      	beq.n	407f88 <_dtoa_r+0x720>
  407f80:	4659      	mov	r1, fp
  407f82:	4620      	mov	r0, r4
  407f84:	f001 fd04 	bl	409990 <_Bfree>
  407f88:	4631      	mov	r1, r6
  407f8a:	4620      	mov	r0, r4
  407f8c:	f001 fd00 	bl	409990 <_Bfree>
  407f90:	e62e      	b.n	407bf0 <_dtoa_r+0x388>
  407f92:	2300      	movs	r3, #0
  407f94:	930b      	str	r3, [sp, #44]	; 0x2c
  407f96:	9b02      	ldr	r3, [sp, #8]
  407f98:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407f9a:	4413      	add	r3, r2
  407f9c:	930f      	str	r3, [sp, #60]	; 0x3c
  407f9e:	3301      	adds	r3, #1
  407fa0:	2b01      	cmp	r3, #1
  407fa2:	461f      	mov	r7, r3
  407fa4:	461e      	mov	r6, r3
  407fa6:	930a      	str	r3, [sp, #40]	; 0x28
  407fa8:	bfb8      	it	lt
  407faa:	2701      	movlt	r7, #1
  407fac:	2100      	movs	r1, #0
  407fae:	2f17      	cmp	r7, #23
  407fb0:	6461      	str	r1, [r4, #68]	; 0x44
  407fb2:	d90a      	bls.n	407fca <_dtoa_r+0x762>
  407fb4:	2201      	movs	r2, #1
  407fb6:	2304      	movs	r3, #4
  407fb8:	005b      	lsls	r3, r3, #1
  407fba:	f103 0014 	add.w	r0, r3, #20
  407fbe:	4287      	cmp	r7, r0
  407fc0:	4611      	mov	r1, r2
  407fc2:	f102 0201 	add.w	r2, r2, #1
  407fc6:	d2f7      	bcs.n	407fb8 <_dtoa_r+0x750>
  407fc8:	6461      	str	r1, [r4, #68]	; 0x44
  407fca:	4620      	mov	r0, r4
  407fcc:	f001 fcba 	bl	409944 <_Balloc>
  407fd0:	2e0e      	cmp	r6, #14
  407fd2:	9004      	str	r0, [sp, #16]
  407fd4:	6420      	str	r0, [r4, #64]	; 0x40
  407fd6:	f63f ad41 	bhi.w	407a5c <_dtoa_r+0x1f4>
  407fda:	2d00      	cmp	r5, #0
  407fdc:	f43f ad3e 	beq.w	407a5c <_dtoa_r+0x1f4>
  407fe0:	9902      	ldr	r1, [sp, #8]
  407fe2:	2900      	cmp	r1, #0
  407fe4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407fe8:	f340 8202 	ble.w	4083f0 <_dtoa_r+0xb88>
  407fec:	4bb8      	ldr	r3, [pc, #736]	; (4082d0 <_dtoa_r+0xa68>)
  407fee:	f001 020f 	and.w	r2, r1, #15
  407ff2:	110d      	asrs	r5, r1, #4
  407ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407ff8:	06e9      	lsls	r1, r5, #27
  407ffa:	e9d3 6700 	ldrd	r6, r7, [r3]
  407ffe:	f140 81ae 	bpl.w	40835e <_dtoa_r+0xaf6>
  408002:	4bb4      	ldr	r3, [pc, #720]	; (4082d4 <_dtoa_r+0xa6c>)
  408004:	4650      	mov	r0, sl
  408006:	4659      	mov	r1, fp
  408008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40800c:	f002 febc 	bl	40ad88 <__aeabi_ddiv>
  408010:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  408014:	f005 050f 	and.w	r5, r5, #15
  408018:	f04f 0a03 	mov.w	sl, #3
  40801c:	b18d      	cbz	r5, 408042 <_dtoa_r+0x7da>
  40801e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4082d4 <_dtoa_r+0xa6c>
  408022:	07ea      	lsls	r2, r5, #31
  408024:	d509      	bpl.n	40803a <_dtoa_r+0x7d2>
  408026:	4630      	mov	r0, r6
  408028:	4639      	mov	r1, r7
  40802a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40802e:	f002 fd81 	bl	40ab34 <__aeabi_dmul>
  408032:	f10a 0a01 	add.w	sl, sl, #1
  408036:	4606      	mov	r6, r0
  408038:	460f      	mov	r7, r1
  40803a:	106d      	asrs	r5, r5, #1
  40803c:	f108 0808 	add.w	r8, r8, #8
  408040:	d1ef      	bne.n	408022 <_dtoa_r+0x7ba>
  408042:	463b      	mov	r3, r7
  408044:	4632      	mov	r2, r6
  408046:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40804a:	f002 fe9d 	bl	40ad88 <__aeabi_ddiv>
  40804e:	4607      	mov	r7, r0
  408050:	4688      	mov	r8, r1
  408052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408054:	b143      	cbz	r3, 408068 <_dtoa_r+0x800>
  408056:	2200      	movs	r2, #0
  408058:	4b9f      	ldr	r3, [pc, #636]	; (4082d8 <_dtoa_r+0xa70>)
  40805a:	4638      	mov	r0, r7
  40805c:	4641      	mov	r1, r8
  40805e:	f002 ffdb 	bl	40b018 <__aeabi_dcmplt>
  408062:	2800      	cmp	r0, #0
  408064:	f040 8286 	bne.w	408574 <_dtoa_r+0xd0c>
  408068:	4650      	mov	r0, sl
  40806a:	f002 fcfd 	bl	40aa68 <__aeabi_i2d>
  40806e:	463a      	mov	r2, r7
  408070:	4643      	mov	r3, r8
  408072:	f002 fd5f 	bl	40ab34 <__aeabi_dmul>
  408076:	4b99      	ldr	r3, [pc, #612]	; (4082dc <_dtoa_r+0xa74>)
  408078:	2200      	movs	r2, #0
  40807a:	f002 fba9 	bl	40a7d0 <__adddf3>
  40807e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408080:	4605      	mov	r5, r0
  408082:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408086:	2b00      	cmp	r3, #0
  408088:	f000 813e 	beq.w	408308 <_dtoa_r+0xaa0>
  40808c:	9b02      	ldr	r3, [sp, #8]
  40808e:	9315      	str	r3, [sp, #84]	; 0x54
  408090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408092:	9312      	str	r3, [sp, #72]	; 0x48
  408094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408096:	2b00      	cmp	r3, #0
  408098:	f000 81fa 	beq.w	408490 <_dtoa_r+0xc28>
  40809c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40809e:	4b8c      	ldr	r3, [pc, #560]	; (4082d0 <_dtoa_r+0xa68>)
  4080a0:	498f      	ldr	r1, [pc, #572]	; (4082e0 <_dtoa_r+0xa78>)
  4080a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4080a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4080aa:	2000      	movs	r0, #0
  4080ac:	f002 fe6c 	bl	40ad88 <__aeabi_ddiv>
  4080b0:	462a      	mov	r2, r5
  4080b2:	4633      	mov	r3, r6
  4080b4:	f002 fb8a 	bl	40a7cc <__aeabi_dsub>
  4080b8:	4682      	mov	sl, r0
  4080ba:	468b      	mov	fp, r1
  4080bc:	4638      	mov	r0, r7
  4080be:	4641      	mov	r1, r8
  4080c0:	f002 ffe8 	bl	40b094 <__aeabi_d2iz>
  4080c4:	4605      	mov	r5, r0
  4080c6:	f002 fccf 	bl	40aa68 <__aeabi_i2d>
  4080ca:	4602      	mov	r2, r0
  4080cc:	460b      	mov	r3, r1
  4080ce:	4638      	mov	r0, r7
  4080d0:	4641      	mov	r1, r8
  4080d2:	f002 fb7b 	bl	40a7cc <__aeabi_dsub>
  4080d6:	3530      	adds	r5, #48	; 0x30
  4080d8:	fa5f f885 	uxtb.w	r8, r5
  4080dc:	9d04      	ldr	r5, [sp, #16]
  4080de:	4606      	mov	r6, r0
  4080e0:	460f      	mov	r7, r1
  4080e2:	f885 8000 	strb.w	r8, [r5]
  4080e6:	4602      	mov	r2, r0
  4080e8:	460b      	mov	r3, r1
  4080ea:	4650      	mov	r0, sl
  4080ec:	4659      	mov	r1, fp
  4080ee:	3501      	adds	r5, #1
  4080f0:	f002 ffb0 	bl	40b054 <__aeabi_dcmpgt>
  4080f4:	2800      	cmp	r0, #0
  4080f6:	d154      	bne.n	4081a2 <_dtoa_r+0x93a>
  4080f8:	4632      	mov	r2, r6
  4080fa:	463b      	mov	r3, r7
  4080fc:	2000      	movs	r0, #0
  4080fe:	4976      	ldr	r1, [pc, #472]	; (4082d8 <_dtoa_r+0xa70>)
  408100:	f002 fb64 	bl	40a7cc <__aeabi_dsub>
  408104:	4602      	mov	r2, r0
  408106:	460b      	mov	r3, r1
  408108:	4650      	mov	r0, sl
  40810a:	4659      	mov	r1, fp
  40810c:	f002 ffa2 	bl	40b054 <__aeabi_dcmpgt>
  408110:	2800      	cmp	r0, #0
  408112:	f040 8270 	bne.w	4085f6 <_dtoa_r+0xd8e>
  408116:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408118:	2a01      	cmp	r2, #1
  40811a:	f000 8111 	beq.w	408340 <_dtoa_r+0xad8>
  40811e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408120:	9a04      	ldr	r2, [sp, #16]
  408122:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408126:	4413      	add	r3, r2
  408128:	4699      	mov	r9, r3
  40812a:	e00d      	b.n	408148 <_dtoa_r+0x8e0>
  40812c:	2000      	movs	r0, #0
  40812e:	496a      	ldr	r1, [pc, #424]	; (4082d8 <_dtoa_r+0xa70>)
  408130:	f002 fb4c 	bl	40a7cc <__aeabi_dsub>
  408134:	4652      	mov	r2, sl
  408136:	465b      	mov	r3, fp
  408138:	f002 ff6e 	bl	40b018 <__aeabi_dcmplt>
  40813c:	2800      	cmp	r0, #0
  40813e:	f040 8258 	bne.w	4085f2 <_dtoa_r+0xd8a>
  408142:	454d      	cmp	r5, r9
  408144:	f000 80fa 	beq.w	40833c <_dtoa_r+0xad4>
  408148:	4650      	mov	r0, sl
  40814a:	4659      	mov	r1, fp
  40814c:	2200      	movs	r2, #0
  40814e:	4b65      	ldr	r3, [pc, #404]	; (4082e4 <_dtoa_r+0xa7c>)
  408150:	f002 fcf0 	bl	40ab34 <__aeabi_dmul>
  408154:	2200      	movs	r2, #0
  408156:	4b63      	ldr	r3, [pc, #396]	; (4082e4 <_dtoa_r+0xa7c>)
  408158:	4682      	mov	sl, r0
  40815a:	468b      	mov	fp, r1
  40815c:	4630      	mov	r0, r6
  40815e:	4639      	mov	r1, r7
  408160:	f002 fce8 	bl	40ab34 <__aeabi_dmul>
  408164:	460f      	mov	r7, r1
  408166:	4606      	mov	r6, r0
  408168:	f002 ff94 	bl	40b094 <__aeabi_d2iz>
  40816c:	4680      	mov	r8, r0
  40816e:	f002 fc7b 	bl	40aa68 <__aeabi_i2d>
  408172:	4602      	mov	r2, r0
  408174:	460b      	mov	r3, r1
  408176:	4630      	mov	r0, r6
  408178:	4639      	mov	r1, r7
  40817a:	f002 fb27 	bl	40a7cc <__aeabi_dsub>
  40817e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408182:	fa5f f888 	uxtb.w	r8, r8
  408186:	4652      	mov	r2, sl
  408188:	465b      	mov	r3, fp
  40818a:	f805 8b01 	strb.w	r8, [r5], #1
  40818e:	4606      	mov	r6, r0
  408190:	460f      	mov	r7, r1
  408192:	f002 ff41 	bl	40b018 <__aeabi_dcmplt>
  408196:	4632      	mov	r2, r6
  408198:	463b      	mov	r3, r7
  40819a:	2800      	cmp	r0, #0
  40819c:	d0c6      	beq.n	40812c <_dtoa_r+0x8c4>
  40819e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4081a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4081a4:	9302      	str	r3, [sp, #8]
  4081a6:	e523      	b.n	407bf0 <_dtoa_r+0x388>
  4081a8:	2300      	movs	r3, #0
  4081aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4081ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4081ae:	2b00      	cmp	r3, #0
  4081b0:	f340 80dc 	ble.w	40836c <_dtoa_r+0xb04>
  4081b4:	461f      	mov	r7, r3
  4081b6:	461e      	mov	r6, r3
  4081b8:	930f      	str	r3, [sp, #60]	; 0x3c
  4081ba:	930a      	str	r3, [sp, #40]	; 0x28
  4081bc:	e6f6      	b.n	407fac <_dtoa_r+0x744>
  4081be:	2301      	movs	r3, #1
  4081c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4081c2:	e7f3      	b.n	4081ac <_dtoa_r+0x944>
  4081c4:	f1ba 0f00 	cmp.w	sl, #0
  4081c8:	f47f ada8 	bne.w	407d1c <_dtoa_r+0x4b4>
  4081cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4081d0:	2b00      	cmp	r3, #0
  4081d2:	f47f adba 	bne.w	407d4a <_dtoa_r+0x4e2>
  4081d6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4081da:	0d3f      	lsrs	r7, r7, #20
  4081dc:	053f      	lsls	r7, r7, #20
  4081de:	2f00      	cmp	r7, #0
  4081e0:	f000 820d 	beq.w	4085fe <_dtoa_r+0xd96>
  4081e4:	9b08      	ldr	r3, [sp, #32]
  4081e6:	3301      	adds	r3, #1
  4081e8:	9308      	str	r3, [sp, #32]
  4081ea:	9b06      	ldr	r3, [sp, #24]
  4081ec:	3301      	adds	r3, #1
  4081ee:	9306      	str	r3, [sp, #24]
  4081f0:	2301      	movs	r3, #1
  4081f2:	930c      	str	r3, [sp, #48]	; 0x30
  4081f4:	e5ab      	b.n	407d4e <_dtoa_r+0x4e6>
  4081f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4081f8:	2b00      	cmp	r3, #0
  4081fa:	f73f ac42 	bgt.w	407a82 <_dtoa_r+0x21a>
  4081fe:	f040 8221 	bne.w	408644 <_dtoa_r+0xddc>
  408202:	2200      	movs	r2, #0
  408204:	4b38      	ldr	r3, [pc, #224]	; (4082e8 <_dtoa_r+0xa80>)
  408206:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40820a:	f002 fc93 	bl	40ab34 <__aeabi_dmul>
  40820e:	4652      	mov	r2, sl
  408210:	465b      	mov	r3, fp
  408212:	f002 ff15 	bl	40b040 <__aeabi_dcmpge>
  408216:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40821a:	4646      	mov	r6, r8
  40821c:	2800      	cmp	r0, #0
  40821e:	d041      	beq.n	4082a4 <_dtoa_r+0xa3c>
  408220:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408222:	9d04      	ldr	r5, [sp, #16]
  408224:	43db      	mvns	r3, r3
  408226:	9302      	str	r3, [sp, #8]
  408228:	4641      	mov	r1, r8
  40822a:	4620      	mov	r0, r4
  40822c:	f001 fbb0 	bl	409990 <_Bfree>
  408230:	2e00      	cmp	r6, #0
  408232:	f43f acdd 	beq.w	407bf0 <_dtoa_r+0x388>
  408236:	e6a7      	b.n	407f88 <_dtoa_r+0x720>
  408238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40823a:	4649      	mov	r1, r9
  40823c:	4620      	mov	r0, r4
  40823e:	f001 fcdd 	bl	409bfc <__pow5mult>
  408242:	4681      	mov	r9, r0
  408244:	e558      	b.n	407cf8 <_dtoa_r+0x490>
  408246:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408248:	2a00      	cmp	r2, #0
  40824a:	f000 8187 	beq.w	40855c <_dtoa_r+0xcf4>
  40824e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408252:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408254:	9d08      	ldr	r5, [sp, #32]
  408256:	e4f2      	b.n	407c3e <_dtoa_r+0x3d6>
  408258:	f1ba 0f00 	cmp.w	sl, #0
  40825c:	f47f ad75 	bne.w	407d4a <_dtoa_r+0x4e2>
  408260:	e7b4      	b.n	4081cc <_dtoa_r+0x964>
  408262:	f001 fb9f 	bl	4099a4 <__multadd>
  408266:	4647      	mov	r7, r8
  408268:	4606      	mov	r6, r0
  40826a:	4683      	mov	fp, r0
  40826c:	e5be      	b.n	407dec <_dtoa_r+0x584>
  40826e:	4601      	mov	r1, r0
  408270:	4620      	mov	r0, r4
  408272:	9306      	str	r3, [sp, #24]
  408274:	f001 fb8c 	bl	409990 <_Bfree>
  408278:	2201      	movs	r2, #1
  40827a:	9b06      	ldr	r3, [sp, #24]
  40827c:	e5e0      	b.n	407e40 <_dtoa_r+0x5d8>
  40827e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408280:	2b02      	cmp	r3, #2
  408282:	f77f ad96 	ble.w	407db2 <_dtoa_r+0x54a>
  408286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408288:	2b00      	cmp	r3, #0
  40828a:	d1c9      	bne.n	408220 <_dtoa_r+0x9b8>
  40828c:	4641      	mov	r1, r8
  40828e:	2205      	movs	r2, #5
  408290:	4620      	mov	r0, r4
  408292:	f001 fb87 	bl	4099a4 <__multadd>
  408296:	4601      	mov	r1, r0
  408298:	4680      	mov	r8, r0
  40829a:	4648      	mov	r0, r9
  40829c:	f001 fd50 	bl	409d40 <__mcmp>
  4082a0:	2800      	cmp	r0, #0
  4082a2:	ddbd      	ble.n	408220 <_dtoa_r+0x9b8>
  4082a4:	9a02      	ldr	r2, [sp, #8]
  4082a6:	9904      	ldr	r1, [sp, #16]
  4082a8:	2331      	movs	r3, #49	; 0x31
  4082aa:	3201      	adds	r2, #1
  4082ac:	9202      	str	r2, [sp, #8]
  4082ae:	700b      	strb	r3, [r1, #0]
  4082b0:	1c4d      	adds	r5, r1, #1
  4082b2:	e7b9      	b.n	408228 <_dtoa_r+0x9c0>
  4082b4:	9a02      	ldr	r2, [sp, #8]
  4082b6:	3201      	adds	r2, #1
  4082b8:	9202      	str	r2, [sp, #8]
  4082ba:	9a04      	ldr	r2, [sp, #16]
  4082bc:	2331      	movs	r3, #49	; 0x31
  4082be:	7013      	strb	r3, [r2, #0]
  4082c0:	e652      	b.n	407f68 <_dtoa_r+0x700>
  4082c2:	2301      	movs	r3, #1
  4082c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4082c6:	e666      	b.n	407f96 <_dtoa_r+0x72e>
  4082c8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4082cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4082ce:	e48f      	b.n	407bf0 <_dtoa_r+0x388>
  4082d0:	0040c4e8 	.word	0x0040c4e8
  4082d4:	0040c4c0 	.word	0x0040c4c0
  4082d8:	3ff00000 	.word	0x3ff00000
  4082dc:	401c0000 	.word	0x401c0000
  4082e0:	3fe00000 	.word	0x3fe00000
  4082e4:	40240000 	.word	0x40240000
  4082e8:	40140000 	.word	0x40140000
  4082ec:	4650      	mov	r0, sl
  4082ee:	f002 fbbb 	bl	40aa68 <__aeabi_i2d>
  4082f2:	463a      	mov	r2, r7
  4082f4:	4643      	mov	r3, r8
  4082f6:	f002 fc1d 	bl	40ab34 <__aeabi_dmul>
  4082fa:	2200      	movs	r2, #0
  4082fc:	4bc1      	ldr	r3, [pc, #772]	; (408604 <_dtoa_r+0xd9c>)
  4082fe:	f002 fa67 	bl	40a7d0 <__adddf3>
  408302:	4605      	mov	r5, r0
  408304:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408308:	4641      	mov	r1, r8
  40830a:	2200      	movs	r2, #0
  40830c:	4bbe      	ldr	r3, [pc, #760]	; (408608 <_dtoa_r+0xda0>)
  40830e:	4638      	mov	r0, r7
  408310:	f002 fa5c 	bl	40a7cc <__aeabi_dsub>
  408314:	462a      	mov	r2, r5
  408316:	4633      	mov	r3, r6
  408318:	4682      	mov	sl, r0
  40831a:	468b      	mov	fp, r1
  40831c:	f002 fe9a 	bl	40b054 <__aeabi_dcmpgt>
  408320:	4680      	mov	r8, r0
  408322:	2800      	cmp	r0, #0
  408324:	f040 8110 	bne.w	408548 <_dtoa_r+0xce0>
  408328:	462a      	mov	r2, r5
  40832a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40832e:	4650      	mov	r0, sl
  408330:	4659      	mov	r1, fp
  408332:	f002 fe71 	bl	40b018 <__aeabi_dcmplt>
  408336:	b118      	cbz	r0, 408340 <_dtoa_r+0xad8>
  408338:	4646      	mov	r6, r8
  40833a:	e771      	b.n	408220 <_dtoa_r+0x9b8>
  40833c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408340:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408344:	f7ff bb8a 	b.w	407a5c <_dtoa_r+0x1f4>
  408348:	9804      	ldr	r0, [sp, #16]
  40834a:	f7ff babb 	b.w	4078c4 <_dtoa_r+0x5c>
  40834e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408350:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408352:	970c      	str	r7, [sp, #48]	; 0x30
  408354:	1afb      	subs	r3, r7, r3
  408356:	441a      	add	r2, r3
  408358:	920d      	str	r2, [sp, #52]	; 0x34
  40835a:	2700      	movs	r7, #0
  40835c:	e469      	b.n	407c32 <_dtoa_r+0x3ca>
  40835e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408362:	f04f 0a02 	mov.w	sl, #2
  408366:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40836a:	e657      	b.n	40801c <_dtoa_r+0x7b4>
  40836c:	2100      	movs	r1, #0
  40836e:	2301      	movs	r3, #1
  408370:	6461      	str	r1, [r4, #68]	; 0x44
  408372:	4620      	mov	r0, r4
  408374:	9325      	str	r3, [sp, #148]	; 0x94
  408376:	f001 fae5 	bl	409944 <_Balloc>
  40837a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40837c:	9004      	str	r0, [sp, #16]
  40837e:	6420      	str	r0, [r4, #64]	; 0x40
  408380:	930a      	str	r3, [sp, #40]	; 0x28
  408382:	930f      	str	r3, [sp, #60]	; 0x3c
  408384:	e629      	b.n	407fda <_dtoa_r+0x772>
  408386:	2a00      	cmp	r2, #0
  408388:	46d0      	mov	r8, sl
  40838a:	f8cd b018 	str.w	fp, [sp, #24]
  40838e:	469a      	mov	sl, r3
  408390:	dd11      	ble.n	4083b6 <_dtoa_r+0xb4e>
  408392:	4649      	mov	r1, r9
  408394:	2201      	movs	r2, #1
  408396:	4620      	mov	r0, r4
  408398:	f001 fc80 	bl	409c9c <__lshift>
  40839c:	4641      	mov	r1, r8
  40839e:	4681      	mov	r9, r0
  4083a0:	f001 fcce 	bl	409d40 <__mcmp>
  4083a4:	2800      	cmp	r0, #0
  4083a6:	f340 8146 	ble.w	408636 <_dtoa_r+0xdce>
  4083aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4083ae:	f000 8106 	beq.w	4085be <_dtoa_r+0xd56>
  4083b2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4083b6:	46b3      	mov	fp, r6
  4083b8:	f887 a000 	strb.w	sl, [r7]
  4083bc:	1c7d      	adds	r5, r7, #1
  4083be:	9e06      	ldr	r6, [sp, #24]
  4083c0:	e5d2      	b.n	407f68 <_dtoa_r+0x700>
  4083c2:	d104      	bne.n	4083ce <_dtoa_r+0xb66>
  4083c4:	f01a 0f01 	tst.w	sl, #1
  4083c8:	d001      	beq.n	4083ce <_dtoa_r+0xb66>
  4083ca:	e5bd      	b.n	407f48 <_dtoa_r+0x6e0>
  4083cc:	4615      	mov	r5, r2
  4083ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4083d2:	2b30      	cmp	r3, #48	; 0x30
  4083d4:	f105 32ff 	add.w	r2, r5, #4294967295
  4083d8:	d0f8      	beq.n	4083cc <_dtoa_r+0xb64>
  4083da:	e5c5      	b.n	407f68 <_dtoa_r+0x700>
  4083dc:	9904      	ldr	r1, [sp, #16]
  4083de:	2230      	movs	r2, #48	; 0x30
  4083e0:	700a      	strb	r2, [r1, #0]
  4083e2:	9a02      	ldr	r2, [sp, #8]
  4083e4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4083e8:	3201      	adds	r2, #1
  4083ea:	9202      	str	r2, [sp, #8]
  4083ec:	f7ff bbfc 	b.w	407be8 <_dtoa_r+0x380>
  4083f0:	f000 80bb 	beq.w	40856a <_dtoa_r+0xd02>
  4083f4:	9b02      	ldr	r3, [sp, #8]
  4083f6:	425d      	negs	r5, r3
  4083f8:	4b84      	ldr	r3, [pc, #528]	; (40860c <_dtoa_r+0xda4>)
  4083fa:	f005 020f 	and.w	r2, r5, #15
  4083fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408402:	e9d3 2300 	ldrd	r2, r3, [r3]
  408406:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40840a:	f002 fb93 	bl	40ab34 <__aeabi_dmul>
  40840e:	112d      	asrs	r5, r5, #4
  408410:	4607      	mov	r7, r0
  408412:	4688      	mov	r8, r1
  408414:	f000 812c 	beq.w	408670 <_dtoa_r+0xe08>
  408418:	4e7d      	ldr	r6, [pc, #500]	; (408610 <_dtoa_r+0xda8>)
  40841a:	f04f 0a02 	mov.w	sl, #2
  40841e:	07eb      	lsls	r3, r5, #31
  408420:	d509      	bpl.n	408436 <_dtoa_r+0xbce>
  408422:	4638      	mov	r0, r7
  408424:	4641      	mov	r1, r8
  408426:	e9d6 2300 	ldrd	r2, r3, [r6]
  40842a:	f002 fb83 	bl	40ab34 <__aeabi_dmul>
  40842e:	f10a 0a01 	add.w	sl, sl, #1
  408432:	4607      	mov	r7, r0
  408434:	4688      	mov	r8, r1
  408436:	106d      	asrs	r5, r5, #1
  408438:	f106 0608 	add.w	r6, r6, #8
  40843c:	d1ef      	bne.n	40841e <_dtoa_r+0xbb6>
  40843e:	e608      	b.n	408052 <_dtoa_r+0x7ea>
  408440:	6871      	ldr	r1, [r6, #4]
  408442:	4620      	mov	r0, r4
  408444:	f001 fa7e 	bl	409944 <_Balloc>
  408448:	6933      	ldr	r3, [r6, #16]
  40844a:	3302      	adds	r3, #2
  40844c:	009a      	lsls	r2, r3, #2
  40844e:	4605      	mov	r5, r0
  408450:	f106 010c 	add.w	r1, r6, #12
  408454:	300c      	adds	r0, #12
  408456:	f001 f973 	bl	409740 <memcpy>
  40845a:	4629      	mov	r1, r5
  40845c:	2201      	movs	r2, #1
  40845e:	4620      	mov	r0, r4
  408460:	f001 fc1c 	bl	409c9c <__lshift>
  408464:	9006      	str	r0, [sp, #24]
  408466:	e4b5      	b.n	407dd4 <_dtoa_r+0x56c>
  408468:	2b39      	cmp	r3, #57	; 0x39
  40846a:	f8cd b018 	str.w	fp, [sp, #24]
  40846e:	46d0      	mov	r8, sl
  408470:	f000 80a5 	beq.w	4085be <_dtoa_r+0xd56>
  408474:	f103 0a01 	add.w	sl, r3, #1
  408478:	46b3      	mov	fp, r6
  40847a:	f887 a000 	strb.w	sl, [r7]
  40847e:	1c7d      	adds	r5, r7, #1
  408480:	9e06      	ldr	r6, [sp, #24]
  408482:	e571      	b.n	407f68 <_dtoa_r+0x700>
  408484:	465a      	mov	r2, fp
  408486:	46d0      	mov	r8, sl
  408488:	46b3      	mov	fp, r6
  40848a:	469a      	mov	sl, r3
  40848c:	4616      	mov	r6, r2
  40848e:	e54f      	b.n	407f30 <_dtoa_r+0x6c8>
  408490:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408492:	495e      	ldr	r1, [pc, #376]	; (40860c <_dtoa_r+0xda4>)
  408494:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408498:	462a      	mov	r2, r5
  40849a:	4633      	mov	r3, r6
  40849c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4084a0:	f002 fb48 	bl	40ab34 <__aeabi_dmul>
  4084a4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4084a8:	4638      	mov	r0, r7
  4084aa:	4641      	mov	r1, r8
  4084ac:	f002 fdf2 	bl	40b094 <__aeabi_d2iz>
  4084b0:	4605      	mov	r5, r0
  4084b2:	f002 fad9 	bl	40aa68 <__aeabi_i2d>
  4084b6:	460b      	mov	r3, r1
  4084b8:	4602      	mov	r2, r0
  4084ba:	4641      	mov	r1, r8
  4084bc:	4638      	mov	r0, r7
  4084be:	f002 f985 	bl	40a7cc <__aeabi_dsub>
  4084c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4084c4:	460f      	mov	r7, r1
  4084c6:	9904      	ldr	r1, [sp, #16]
  4084c8:	3530      	adds	r5, #48	; 0x30
  4084ca:	2b01      	cmp	r3, #1
  4084cc:	700d      	strb	r5, [r1, #0]
  4084ce:	4606      	mov	r6, r0
  4084d0:	f101 0501 	add.w	r5, r1, #1
  4084d4:	d026      	beq.n	408524 <_dtoa_r+0xcbc>
  4084d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4084d8:	9a04      	ldr	r2, [sp, #16]
  4084da:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408618 <_dtoa_r+0xdb0>
  4084de:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4084e2:	4413      	add	r3, r2
  4084e4:	f04f 0a00 	mov.w	sl, #0
  4084e8:	4699      	mov	r9, r3
  4084ea:	4652      	mov	r2, sl
  4084ec:	465b      	mov	r3, fp
  4084ee:	4630      	mov	r0, r6
  4084f0:	4639      	mov	r1, r7
  4084f2:	f002 fb1f 	bl	40ab34 <__aeabi_dmul>
  4084f6:	460f      	mov	r7, r1
  4084f8:	4606      	mov	r6, r0
  4084fa:	f002 fdcb 	bl	40b094 <__aeabi_d2iz>
  4084fe:	4680      	mov	r8, r0
  408500:	f002 fab2 	bl	40aa68 <__aeabi_i2d>
  408504:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408508:	4602      	mov	r2, r0
  40850a:	460b      	mov	r3, r1
  40850c:	4630      	mov	r0, r6
  40850e:	4639      	mov	r1, r7
  408510:	f002 f95c 	bl	40a7cc <__aeabi_dsub>
  408514:	f805 8b01 	strb.w	r8, [r5], #1
  408518:	454d      	cmp	r5, r9
  40851a:	4606      	mov	r6, r0
  40851c:	460f      	mov	r7, r1
  40851e:	d1e4      	bne.n	4084ea <_dtoa_r+0xc82>
  408520:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408524:	4b3b      	ldr	r3, [pc, #236]	; (408614 <_dtoa_r+0xdac>)
  408526:	2200      	movs	r2, #0
  408528:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40852c:	f002 f950 	bl	40a7d0 <__adddf3>
  408530:	4632      	mov	r2, r6
  408532:	463b      	mov	r3, r7
  408534:	f002 fd70 	bl	40b018 <__aeabi_dcmplt>
  408538:	2800      	cmp	r0, #0
  40853a:	d046      	beq.n	4085ca <_dtoa_r+0xd62>
  40853c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40853e:	9302      	str	r3, [sp, #8]
  408540:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408544:	f7ff bb43 	b.w	407bce <_dtoa_r+0x366>
  408548:	f04f 0800 	mov.w	r8, #0
  40854c:	4646      	mov	r6, r8
  40854e:	e6a9      	b.n	4082a4 <_dtoa_r+0xa3c>
  408550:	9b08      	ldr	r3, [sp, #32]
  408552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408554:	1a9d      	subs	r5, r3, r2
  408556:	2300      	movs	r3, #0
  408558:	f7ff bb71 	b.w	407c3e <_dtoa_r+0x3d6>
  40855c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40855e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408560:	9d08      	ldr	r5, [sp, #32]
  408562:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408566:	f7ff bb6a 	b.w	407c3e <_dtoa_r+0x3d6>
  40856a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40856e:	f04f 0a02 	mov.w	sl, #2
  408572:	e56e      	b.n	408052 <_dtoa_r+0x7ea>
  408574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408576:	2b00      	cmp	r3, #0
  408578:	f43f aeb8 	beq.w	4082ec <_dtoa_r+0xa84>
  40857c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40857e:	2b00      	cmp	r3, #0
  408580:	f77f aede 	ble.w	408340 <_dtoa_r+0xad8>
  408584:	2200      	movs	r2, #0
  408586:	4b24      	ldr	r3, [pc, #144]	; (408618 <_dtoa_r+0xdb0>)
  408588:	4638      	mov	r0, r7
  40858a:	4641      	mov	r1, r8
  40858c:	f002 fad2 	bl	40ab34 <__aeabi_dmul>
  408590:	4607      	mov	r7, r0
  408592:	4688      	mov	r8, r1
  408594:	f10a 0001 	add.w	r0, sl, #1
  408598:	f002 fa66 	bl	40aa68 <__aeabi_i2d>
  40859c:	463a      	mov	r2, r7
  40859e:	4643      	mov	r3, r8
  4085a0:	f002 fac8 	bl	40ab34 <__aeabi_dmul>
  4085a4:	2200      	movs	r2, #0
  4085a6:	4b17      	ldr	r3, [pc, #92]	; (408604 <_dtoa_r+0xd9c>)
  4085a8:	f002 f912 	bl	40a7d0 <__adddf3>
  4085ac:	9a02      	ldr	r2, [sp, #8]
  4085ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4085b0:	9312      	str	r3, [sp, #72]	; 0x48
  4085b2:	3a01      	subs	r2, #1
  4085b4:	4605      	mov	r5, r0
  4085b6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4085ba:	9215      	str	r2, [sp, #84]	; 0x54
  4085bc:	e56a      	b.n	408094 <_dtoa_r+0x82c>
  4085be:	2239      	movs	r2, #57	; 0x39
  4085c0:	46b3      	mov	fp, r6
  4085c2:	703a      	strb	r2, [r7, #0]
  4085c4:	9e06      	ldr	r6, [sp, #24]
  4085c6:	1c7d      	adds	r5, r7, #1
  4085c8:	e4c0      	b.n	407f4c <_dtoa_r+0x6e4>
  4085ca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4085ce:	2000      	movs	r0, #0
  4085d0:	4910      	ldr	r1, [pc, #64]	; (408614 <_dtoa_r+0xdac>)
  4085d2:	f002 f8fb 	bl	40a7cc <__aeabi_dsub>
  4085d6:	4632      	mov	r2, r6
  4085d8:	463b      	mov	r3, r7
  4085da:	f002 fd3b 	bl	40b054 <__aeabi_dcmpgt>
  4085de:	b908      	cbnz	r0, 4085e4 <_dtoa_r+0xd7c>
  4085e0:	e6ae      	b.n	408340 <_dtoa_r+0xad8>
  4085e2:	4615      	mov	r5, r2
  4085e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4085e8:	2b30      	cmp	r3, #48	; 0x30
  4085ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4085ee:	d0f8      	beq.n	4085e2 <_dtoa_r+0xd7a>
  4085f0:	e5d7      	b.n	4081a2 <_dtoa_r+0x93a>
  4085f2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4085f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4085f8:	9302      	str	r3, [sp, #8]
  4085fa:	f7ff bae8 	b.w	407bce <_dtoa_r+0x366>
  4085fe:	970c      	str	r7, [sp, #48]	; 0x30
  408600:	f7ff bba5 	b.w	407d4e <_dtoa_r+0x4e6>
  408604:	401c0000 	.word	0x401c0000
  408608:	40140000 	.word	0x40140000
  40860c:	0040c4e8 	.word	0x0040c4e8
  408610:	0040c4c0 	.word	0x0040c4c0
  408614:	3fe00000 	.word	0x3fe00000
  408618:	40240000 	.word	0x40240000
  40861c:	2b39      	cmp	r3, #57	; 0x39
  40861e:	f8cd b018 	str.w	fp, [sp, #24]
  408622:	46d0      	mov	r8, sl
  408624:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408628:	469a      	mov	sl, r3
  40862a:	d0c8      	beq.n	4085be <_dtoa_r+0xd56>
  40862c:	f1bb 0f00 	cmp.w	fp, #0
  408630:	f73f aebf 	bgt.w	4083b2 <_dtoa_r+0xb4a>
  408634:	e6bf      	b.n	4083b6 <_dtoa_r+0xb4e>
  408636:	f47f aebe 	bne.w	4083b6 <_dtoa_r+0xb4e>
  40863a:	f01a 0f01 	tst.w	sl, #1
  40863e:	f43f aeba 	beq.w	4083b6 <_dtoa_r+0xb4e>
  408642:	e6b2      	b.n	4083aa <_dtoa_r+0xb42>
  408644:	f04f 0800 	mov.w	r8, #0
  408648:	4646      	mov	r6, r8
  40864a:	e5e9      	b.n	408220 <_dtoa_r+0x9b8>
  40864c:	4631      	mov	r1, r6
  40864e:	2300      	movs	r3, #0
  408650:	220a      	movs	r2, #10
  408652:	4620      	mov	r0, r4
  408654:	f001 f9a6 	bl	4099a4 <__multadd>
  408658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40865a:	2b00      	cmp	r3, #0
  40865c:	4606      	mov	r6, r0
  40865e:	dd0a      	ble.n	408676 <_dtoa_r+0xe0e>
  408660:	930a      	str	r3, [sp, #40]	; 0x28
  408662:	f7ff bbaa 	b.w	407dba <_dtoa_r+0x552>
  408666:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408668:	2b02      	cmp	r3, #2
  40866a:	dc23      	bgt.n	4086b4 <_dtoa_r+0xe4c>
  40866c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40866e:	e43b      	b.n	407ee8 <_dtoa_r+0x680>
  408670:	f04f 0a02 	mov.w	sl, #2
  408674:	e4ed      	b.n	408052 <_dtoa_r+0x7ea>
  408676:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408678:	2b02      	cmp	r3, #2
  40867a:	dc1b      	bgt.n	4086b4 <_dtoa_r+0xe4c>
  40867c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40867e:	e7ef      	b.n	408660 <_dtoa_r+0xdf8>
  408680:	2500      	movs	r5, #0
  408682:	6465      	str	r5, [r4, #68]	; 0x44
  408684:	4629      	mov	r1, r5
  408686:	4620      	mov	r0, r4
  408688:	f001 f95c 	bl	409944 <_Balloc>
  40868c:	f04f 33ff 	mov.w	r3, #4294967295
  408690:	930a      	str	r3, [sp, #40]	; 0x28
  408692:	930f      	str	r3, [sp, #60]	; 0x3c
  408694:	2301      	movs	r3, #1
  408696:	9004      	str	r0, [sp, #16]
  408698:	9525      	str	r5, [sp, #148]	; 0x94
  40869a:	6420      	str	r0, [r4, #64]	; 0x40
  40869c:	930b      	str	r3, [sp, #44]	; 0x2c
  40869e:	f7ff b9dd 	b.w	407a5c <_dtoa_r+0x1f4>
  4086a2:	2501      	movs	r5, #1
  4086a4:	f7ff b9a5 	b.w	4079f2 <_dtoa_r+0x18a>
  4086a8:	f43f ab69 	beq.w	407d7e <_dtoa_r+0x516>
  4086ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4086b0:	f7ff bbf9 	b.w	407ea6 <_dtoa_r+0x63e>
  4086b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4086b6:	930a      	str	r3, [sp, #40]	; 0x28
  4086b8:	e5e5      	b.n	408286 <_dtoa_r+0xa1e>
  4086ba:	bf00      	nop

004086bc <__sflush_r>:
  4086bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4086c0:	b29a      	uxth	r2, r3
  4086c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4086c6:	460d      	mov	r5, r1
  4086c8:	0711      	lsls	r1, r2, #28
  4086ca:	4680      	mov	r8, r0
  4086cc:	d43a      	bmi.n	408744 <__sflush_r+0x88>
  4086ce:	686a      	ldr	r2, [r5, #4]
  4086d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4086d4:	2a00      	cmp	r2, #0
  4086d6:	81ab      	strh	r3, [r5, #12]
  4086d8:	dd6f      	ble.n	4087ba <__sflush_r+0xfe>
  4086da:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4086dc:	2c00      	cmp	r4, #0
  4086de:	d049      	beq.n	408774 <__sflush_r+0xb8>
  4086e0:	2200      	movs	r2, #0
  4086e2:	b29b      	uxth	r3, r3
  4086e4:	f8d8 6000 	ldr.w	r6, [r8]
  4086e8:	f8c8 2000 	str.w	r2, [r8]
  4086ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4086f0:	d067      	beq.n	4087c2 <__sflush_r+0x106>
  4086f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4086f4:	075f      	lsls	r7, r3, #29
  4086f6:	d505      	bpl.n	408704 <__sflush_r+0x48>
  4086f8:	6869      	ldr	r1, [r5, #4]
  4086fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4086fc:	1a52      	subs	r2, r2, r1
  4086fe:	b10b      	cbz	r3, 408704 <__sflush_r+0x48>
  408700:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408702:	1ad2      	subs	r2, r2, r3
  408704:	2300      	movs	r3, #0
  408706:	69e9      	ldr	r1, [r5, #28]
  408708:	4640      	mov	r0, r8
  40870a:	47a0      	blx	r4
  40870c:	1c44      	adds	r4, r0, #1
  40870e:	d03c      	beq.n	40878a <__sflush_r+0xce>
  408710:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408714:	692a      	ldr	r2, [r5, #16]
  408716:	602a      	str	r2, [r5, #0]
  408718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40871c:	2200      	movs	r2, #0
  40871e:	81ab      	strh	r3, [r5, #12]
  408720:	04db      	lsls	r3, r3, #19
  408722:	606a      	str	r2, [r5, #4]
  408724:	d447      	bmi.n	4087b6 <__sflush_r+0xfa>
  408726:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408728:	f8c8 6000 	str.w	r6, [r8]
  40872c:	b311      	cbz	r1, 408774 <__sflush_r+0xb8>
  40872e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408732:	4299      	cmp	r1, r3
  408734:	d002      	beq.n	40873c <__sflush_r+0x80>
  408736:	4640      	mov	r0, r8
  408738:	f000 f9ca 	bl	408ad0 <_free_r>
  40873c:	2000      	movs	r0, #0
  40873e:	6328      	str	r0, [r5, #48]	; 0x30
  408740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408744:	692e      	ldr	r6, [r5, #16]
  408746:	b1ae      	cbz	r6, 408774 <__sflush_r+0xb8>
  408748:	682c      	ldr	r4, [r5, #0]
  40874a:	602e      	str	r6, [r5, #0]
  40874c:	0791      	lsls	r1, r2, #30
  40874e:	bf0c      	ite	eq
  408750:	696b      	ldreq	r3, [r5, #20]
  408752:	2300      	movne	r3, #0
  408754:	1ba4      	subs	r4, r4, r6
  408756:	60ab      	str	r3, [r5, #8]
  408758:	e00a      	b.n	408770 <__sflush_r+0xb4>
  40875a:	4623      	mov	r3, r4
  40875c:	4632      	mov	r2, r6
  40875e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408760:	69e9      	ldr	r1, [r5, #28]
  408762:	4640      	mov	r0, r8
  408764:	47b8      	blx	r7
  408766:	2800      	cmp	r0, #0
  408768:	eba4 0400 	sub.w	r4, r4, r0
  40876c:	4406      	add	r6, r0
  40876e:	dd04      	ble.n	40877a <__sflush_r+0xbe>
  408770:	2c00      	cmp	r4, #0
  408772:	dcf2      	bgt.n	40875a <__sflush_r+0x9e>
  408774:	2000      	movs	r0, #0
  408776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40877a:	89ab      	ldrh	r3, [r5, #12]
  40877c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408780:	81ab      	strh	r3, [r5, #12]
  408782:	f04f 30ff 	mov.w	r0, #4294967295
  408786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40878a:	f8d8 4000 	ldr.w	r4, [r8]
  40878e:	2c1d      	cmp	r4, #29
  408790:	d8f3      	bhi.n	40877a <__sflush_r+0xbe>
  408792:	4b19      	ldr	r3, [pc, #100]	; (4087f8 <__sflush_r+0x13c>)
  408794:	40e3      	lsrs	r3, r4
  408796:	43db      	mvns	r3, r3
  408798:	f013 0301 	ands.w	r3, r3, #1
  40879c:	d1ed      	bne.n	40877a <__sflush_r+0xbe>
  40879e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4087a2:	606b      	str	r3, [r5, #4]
  4087a4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4087a8:	6929      	ldr	r1, [r5, #16]
  4087aa:	81ab      	strh	r3, [r5, #12]
  4087ac:	04da      	lsls	r2, r3, #19
  4087ae:	6029      	str	r1, [r5, #0]
  4087b0:	d5b9      	bpl.n	408726 <__sflush_r+0x6a>
  4087b2:	2c00      	cmp	r4, #0
  4087b4:	d1b7      	bne.n	408726 <__sflush_r+0x6a>
  4087b6:	6528      	str	r0, [r5, #80]	; 0x50
  4087b8:	e7b5      	b.n	408726 <__sflush_r+0x6a>
  4087ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4087bc:	2a00      	cmp	r2, #0
  4087be:	dc8c      	bgt.n	4086da <__sflush_r+0x1e>
  4087c0:	e7d8      	b.n	408774 <__sflush_r+0xb8>
  4087c2:	2301      	movs	r3, #1
  4087c4:	69e9      	ldr	r1, [r5, #28]
  4087c6:	4640      	mov	r0, r8
  4087c8:	47a0      	blx	r4
  4087ca:	1c43      	adds	r3, r0, #1
  4087cc:	4602      	mov	r2, r0
  4087ce:	d002      	beq.n	4087d6 <__sflush_r+0x11a>
  4087d0:	89ab      	ldrh	r3, [r5, #12]
  4087d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4087d4:	e78e      	b.n	4086f4 <__sflush_r+0x38>
  4087d6:	f8d8 3000 	ldr.w	r3, [r8]
  4087da:	2b00      	cmp	r3, #0
  4087dc:	d0f8      	beq.n	4087d0 <__sflush_r+0x114>
  4087de:	2b1d      	cmp	r3, #29
  4087e0:	d001      	beq.n	4087e6 <__sflush_r+0x12a>
  4087e2:	2b16      	cmp	r3, #22
  4087e4:	d102      	bne.n	4087ec <__sflush_r+0x130>
  4087e6:	f8c8 6000 	str.w	r6, [r8]
  4087ea:	e7c3      	b.n	408774 <__sflush_r+0xb8>
  4087ec:	89ab      	ldrh	r3, [r5, #12]
  4087ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4087f2:	81ab      	strh	r3, [r5, #12]
  4087f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4087f8:	20400001 	.word	0x20400001

004087fc <_fflush_r>:
  4087fc:	b510      	push	{r4, lr}
  4087fe:	4604      	mov	r4, r0
  408800:	b082      	sub	sp, #8
  408802:	b108      	cbz	r0, 408808 <_fflush_r+0xc>
  408804:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408806:	b153      	cbz	r3, 40881e <_fflush_r+0x22>
  408808:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40880c:	b908      	cbnz	r0, 408812 <_fflush_r+0x16>
  40880e:	b002      	add	sp, #8
  408810:	bd10      	pop	{r4, pc}
  408812:	4620      	mov	r0, r4
  408814:	b002      	add	sp, #8
  408816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40881a:	f7ff bf4f 	b.w	4086bc <__sflush_r>
  40881e:	9101      	str	r1, [sp, #4]
  408820:	f000 f880 	bl	408924 <__sinit>
  408824:	9901      	ldr	r1, [sp, #4]
  408826:	e7ef      	b.n	408808 <_fflush_r+0xc>

00408828 <_cleanup_r>:
  408828:	4901      	ldr	r1, [pc, #4]	; (408830 <_cleanup_r+0x8>)
  40882a:	f000 bbaf 	b.w	408f8c <_fwalk_reent>
  40882e:	bf00      	nop
  408830:	0040a6a1 	.word	0x0040a6a1

00408834 <__sinit.part.1>:
  408834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408838:	4b35      	ldr	r3, [pc, #212]	; (408910 <__sinit.part.1+0xdc>)
  40883a:	6845      	ldr	r5, [r0, #4]
  40883c:	63c3      	str	r3, [r0, #60]	; 0x3c
  40883e:	2400      	movs	r4, #0
  408840:	4607      	mov	r7, r0
  408842:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  408846:	2304      	movs	r3, #4
  408848:	2103      	movs	r1, #3
  40884a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40884e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  408852:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  408856:	b083      	sub	sp, #12
  408858:	602c      	str	r4, [r5, #0]
  40885a:	606c      	str	r4, [r5, #4]
  40885c:	60ac      	str	r4, [r5, #8]
  40885e:	666c      	str	r4, [r5, #100]	; 0x64
  408860:	81ec      	strh	r4, [r5, #14]
  408862:	612c      	str	r4, [r5, #16]
  408864:	616c      	str	r4, [r5, #20]
  408866:	61ac      	str	r4, [r5, #24]
  408868:	81ab      	strh	r3, [r5, #12]
  40886a:	4621      	mov	r1, r4
  40886c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  408870:	2208      	movs	r2, #8
  408872:	f7fc fcbf 	bl	4051f4 <memset>
  408876:	68be      	ldr	r6, [r7, #8]
  408878:	f8df b098 	ldr.w	fp, [pc, #152]	; 408914 <__sinit.part.1+0xe0>
  40887c:	f8df a098 	ldr.w	sl, [pc, #152]	; 408918 <__sinit.part.1+0xe4>
  408880:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40891c <__sinit.part.1+0xe8>
  408884:	f8df 8098 	ldr.w	r8, [pc, #152]	; 408920 <__sinit.part.1+0xec>
  408888:	f8c5 b020 	str.w	fp, [r5, #32]
  40888c:	2301      	movs	r3, #1
  40888e:	2209      	movs	r2, #9
  408890:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  408894:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  408898:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40889c:	61ed      	str	r5, [r5, #28]
  40889e:	4621      	mov	r1, r4
  4088a0:	81f3      	strh	r3, [r6, #14]
  4088a2:	81b2      	strh	r2, [r6, #12]
  4088a4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4088a8:	6034      	str	r4, [r6, #0]
  4088aa:	6074      	str	r4, [r6, #4]
  4088ac:	60b4      	str	r4, [r6, #8]
  4088ae:	6674      	str	r4, [r6, #100]	; 0x64
  4088b0:	6134      	str	r4, [r6, #16]
  4088b2:	6174      	str	r4, [r6, #20]
  4088b4:	61b4      	str	r4, [r6, #24]
  4088b6:	2208      	movs	r2, #8
  4088b8:	9301      	str	r3, [sp, #4]
  4088ba:	f7fc fc9b 	bl	4051f4 <memset>
  4088be:	68fd      	ldr	r5, [r7, #12]
  4088c0:	61f6      	str	r6, [r6, #28]
  4088c2:	2012      	movs	r0, #18
  4088c4:	2202      	movs	r2, #2
  4088c6:	f8c6 b020 	str.w	fp, [r6, #32]
  4088ca:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4088ce:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4088d2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4088d6:	4621      	mov	r1, r4
  4088d8:	81a8      	strh	r0, [r5, #12]
  4088da:	81ea      	strh	r2, [r5, #14]
  4088dc:	602c      	str	r4, [r5, #0]
  4088de:	606c      	str	r4, [r5, #4]
  4088e0:	60ac      	str	r4, [r5, #8]
  4088e2:	666c      	str	r4, [r5, #100]	; 0x64
  4088e4:	612c      	str	r4, [r5, #16]
  4088e6:	616c      	str	r4, [r5, #20]
  4088e8:	61ac      	str	r4, [r5, #24]
  4088ea:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4088ee:	2208      	movs	r2, #8
  4088f0:	f7fc fc80 	bl	4051f4 <memset>
  4088f4:	9b01      	ldr	r3, [sp, #4]
  4088f6:	61ed      	str	r5, [r5, #28]
  4088f8:	f8c5 b020 	str.w	fp, [r5, #32]
  4088fc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  408900:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  408904:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  408908:	63bb      	str	r3, [r7, #56]	; 0x38
  40890a:	b003      	add	sp, #12
  40890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408910:	00408829 	.word	0x00408829
  408914:	0040a2a9 	.word	0x0040a2a9
  408918:	0040a2cd 	.word	0x0040a2cd
  40891c:	0040a309 	.word	0x0040a309
  408920:	0040a329 	.word	0x0040a329

00408924 <__sinit>:
  408924:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408926:	b103      	cbz	r3, 40892a <__sinit+0x6>
  408928:	4770      	bx	lr
  40892a:	f7ff bf83 	b.w	408834 <__sinit.part.1>
  40892e:	bf00      	nop

00408930 <__sfp_lock_acquire>:
  408930:	4770      	bx	lr
  408932:	bf00      	nop

00408934 <__sfp_lock_release>:
  408934:	4770      	bx	lr
  408936:	bf00      	nop

00408938 <__libc_fini_array>:
  408938:	b538      	push	{r3, r4, r5, lr}
  40893a:	4c0a      	ldr	r4, [pc, #40]	; (408964 <__libc_fini_array+0x2c>)
  40893c:	4d0a      	ldr	r5, [pc, #40]	; (408968 <__libc_fini_array+0x30>)
  40893e:	1b64      	subs	r4, r4, r5
  408940:	10a4      	asrs	r4, r4, #2
  408942:	d00a      	beq.n	40895a <__libc_fini_array+0x22>
  408944:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408948:	3b01      	subs	r3, #1
  40894a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40894e:	3c01      	subs	r4, #1
  408950:	f855 3904 	ldr.w	r3, [r5], #-4
  408954:	4798      	blx	r3
  408956:	2c00      	cmp	r4, #0
  408958:	d1f9      	bne.n	40894e <__libc_fini_array+0x16>
  40895a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40895e:	f003 beb9 	b.w	40c6d4 <_fini>
  408962:	bf00      	nop
  408964:	0040c6e4 	.word	0x0040c6e4
  408968:	0040c6e0 	.word	0x0040c6e0

0040896c <__fputwc>:
  40896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408970:	b082      	sub	sp, #8
  408972:	4680      	mov	r8, r0
  408974:	4689      	mov	r9, r1
  408976:	4614      	mov	r4, r2
  408978:	f000 fb32 	bl	408fe0 <__locale_mb_cur_max>
  40897c:	2801      	cmp	r0, #1
  40897e:	d036      	beq.n	4089ee <__fputwc+0x82>
  408980:	464a      	mov	r2, r9
  408982:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408986:	a901      	add	r1, sp, #4
  408988:	4640      	mov	r0, r8
  40898a:	f001 fda7 	bl	40a4dc <_wcrtomb_r>
  40898e:	1c42      	adds	r2, r0, #1
  408990:	4606      	mov	r6, r0
  408992:	d025      	beq.n	4089e0 <__fputwc+0x74>
  408994:	b3a8      	cbz	r0, 408a02 <__fputwc+0x96>
  408996:	f89d e004 	ldrb.w	lr, [sp, #4]
  40899a:	2500      	movs	r5, #0
  40899c:	f10d 0a04 	add.w	sl, sp, #4
  4089a0:	e009      	b.n	4089b6 <__fputwc+0x4a>
  4089a2:	6823      	ldr	r3, [r4, #0]
  4089a4:	1c5a      	adds	r2, r3, #1
  4089a6:	6022      	str	r2, [r4, #0]
  4089a8:	f883 e000 	strb.w	lr, [r3]
  4089ac:	3501      	adds	r5, #1
  4089ae:	42b5      	cmp	r5, r6
  4089b0:	d227      	bcs.n	408a02 <__fputwc+0x96>
  4089b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4089b6:	68a3      	ldr	r3, [r4, #8]
  4089b8:	3b01      	subs	r3, #1
  4089ba:	2b00      	cmp	r3, #0
  4089bc:	60a3      	str	r3, [r4, #8]
  4089be:	daf0      	bge.n	4089a2 <__fputwc+0x36>
  4089c0:	69a7      	ldr	r7, [r4, #24]
  4089c2:	42bb      	cmp	r3, r7
  4089c4:	4671      	mov	r1, lr
  4089c6:	4622      	mov	r2, r4
  4089c8:	4640      	mov	r0, r8
  4089ca:	db02      	blt.n	4089d2 <__fputwc+0x66>
  4089cc:	f1be 0f0a 	cmp.w	lr, #10
  4089d0:	d1e7      	bne.n	4089a2 <__fputwc+0x36>
  4089d2:	f001 fd2b 	bl	40a42c <__swbuf_r>
  4089d6:	1c43      	adds	r3, r0, #1
  4089d8:	d1e8      	bne.n	4089ac <__fputwc+0x40>
  4089da:	b002      	add	sp, #8
  4089dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4089e0:	89a3      	ldrh	r3, [r4, #12]
  4089e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4089e6:	81a3      	strh	r3, [r4, #12]
  4089e8:	b002      	add	sp, #8
  4089ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4089ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4089f2:	2bfe      	cmp	r3, #254	; 0xfe
  4089f4:	d8c4      	bhi.n	408980 <__fputwc+0x14>
  4089f6:	fa5f fe89 	uxtb.w	lr, r9
  4089fa:	4606      	mov	r6, r0
  4089fc:	f88d e004 	strb.w	lr, [sp, #4]
  408a00:	e7cb      	b.n	40899a <__fputwc+0x2e>
  408a02:	4648      	mov	r0, r9
  408a04:	b002      	add	sp, #8
  408a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408a0a:	bf00      	nop

00408a0c <_fputwc_r>:
  408a0c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408a10:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  408a14:	d10a      	bne.n	408a2c <_fputwc_r+0x20>
  408a16:	b410      	push	{r4}
  408a18:	6e54      	ldr	r4, [r2, #100]	; 0x64
  408a1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408a1e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  408a22:	6654      	str	r4, [r2, #100]	; 0x64
  408a24:	8193      	strh	r3, [r2, #12]
  408a26:	bc10      	pop	{r4}
  408a28:	f7ff bfa0 	b.w	40896c <__fputwc>
  408a2c:	f7ff bf9e 	b.w	40896c <__fputwc>

00408a30 <_malloc_trim_r>:
  408a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408a32:	4f24      	ldr	r7, [pc, #144]	; (408ac4 <_malloc_trim_r+0x94>)
  408a34:	460c      	mov	r4, r1
  408a36:	4606      	mov	r6, r0
  408a38:	f000 ff80 	bl	40993c <__malloc_lock>
  408a3c:	68bb      	ldr	r3, [r7, #8]
  408a3e:	685d      	ldr	r5, [r3, #4]
  408a40:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408a44:	310f      	adds	r1, #15
  408a46:	f025 0503 	bic.w	r5, r5, #3
  408a4a:	4429      	add	r1, r5
  408a4c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408a50:	f021 010f 	bic.w	r1, r1, #15
  408a54:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408a58:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408a5c:	db07      	blt.n	408a6e <_malloc_trim_r+0x3e>
  408a5e:	2100      	movs	r1, #0
  408a60:	4630      	mov	r0, r6
  408a62:	f001 fc0f 	bl	40a284 <_sbrk_r>
  408a66:	68bb      	ldr	r3, [r7, #8]
  408a68:	442b      	add	r3, r5
  408a6a:	4298      	cmp	r0, r3
  408a6c:	d004      	beq.n	408a78 <_malloc_trim_r+0x48>
  408a6e:	4630      	mov	r0, r6
  408a70:	f000 ff66 	bl	409940 <__malloc_unlock>
  408a74:	2000      	movs	r0, #0
  408a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408a78:	4261      	negs	r1, r4
  408a7a:	4630      	mov	r0, r6
  408a7c:	f001 fc02 	bl	40a284 <_sbrk_r>
  408a80:	3001      	adds	r0, #1
  408a82:	d00d      	beq.n	408aa0 <_malloc_trim_r+0x70>
  408a84:	4b10      	ldr	r3, [pc, #64]	; (408ac8 <_malloc_trim_r+0x98>)
  408a86:	68ba      	ldr	r2, [r7, #8]
  408a88:	6819      	ldr	r1, [r3, #0]
  408a8a:	1b2d      	subs	r5, r5, r4
  408a8c:	f045 0501 	orr.w	r5, r5, #1
  408a90:	4630      	mov	r0, r6
  408a92:	1b09      	subs	r1, r1, r4
  408a94:	6055      	str	r5, [r2, #4]
  408a96:	6019      	str	r1, [r3, #0]
  408a98:	f000 ff52 	bl	409940 <__malloc_unlock>
  408a9c:	2001      	movs	r0, #1
  408a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408aa0:	2100      	movs	r1, #0
  408aa2:	4630      	mov	r0, r6
  408aa4:	f001 fbee 	bl	40a284 <_sbrk_r>
  408aa8:	68ba      	ldr	r2, [r7, #8]
  408aaa:	1a83      	subs	r3, r0, r2
  408aac:	2b0f      	cmp	r3, #15
  408aae:	ddde      	ble.n	408a6e <_malloc_trim_r+0x3e>
  408ab0:	4c06      	ldr	r4, [pc, #24]	; (408acc <_malloc_trim_r+0x9c>)
  408ab2:	4905      	ldr	r1, [pc, #20]	; (408ac8 <_malloc_trim_r+0x98>)
  408ab4:	6824      	ldr	r4, [r4, #0]
  408ab6:	f043 0301 	orr.w	r3, r3, #1
  408aba:	1b00      	subs	r0, r0, r4
  408abc:	6053      	str	r3, [r2, #4]
  408abe:	6008      	str	r0, [r1, #0]
  408ac0:	e7d5      	b.n	408a6e <_malloc_trim_r+0x3e>
  408ac2:	bf00      	nop
  408ac4:	204005dc 	.word	0x204005dc
  408ac8:	20401658 	.word	0x20401658
  408acc:	204009e4 	.word	0x204009e4

00408ad0 <_free_r>:
  408ad0:	2900      	cmp	r1, #0
  408ad2:	d044      	beq.n	408b5e <_free_r+0x8e>
  408ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408ad8:	460d      	mov	r5, r1
  408ada:	4680      	mov	r8, r0
  408adc:	f000 ff2e 	bl	40993c <__malloc_lock>
  408ae0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408ae4:	4969      	ldr	r1, [pc, #420]	; (408c8c <_free_r+0x1bc>)
  408ae6:	f027 0301 	bic.w	r3, r7, #1
  408aea:	f1a5 0408 	sub.w	r4, r5, #8
  408aee:	18e2      	adds	r2, r4, r3
  408af0:	688e      	ldr	r6, [r1, #8]
  408af2:	6850      	ldr	r0, [r2, #4]
  408af4:	42b2      	cmp	r2, r6
  408af6:	f020 0003 	bic.w	r0, r0, #3
  408afa:	d05e      	beq.n	408bba <_free_r+0xea>
  408afc:	07fe      	lsls	r6, r7, #31
  408afe:	6050      	str	r0, [r2, #4]
  408b00:	d40b      	bmi.n	408b1a <_free_r+0x4a>
  408b02:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408b06:	1be4      	subs	r4, r4, r7
  408b08:	f101 0e08 	add.w	lr, r1, #8
  408b0c:	68a5      	ldr	r5, [r4, #8]
  408b0e:	4575      	cmp	r5, lr
  408b10:	443b      	add	r3, r7
  408b12:	d06d      	beq.n	408bf0 <_free_r+0x120>
  408b14:	68e7      	ldr	r7, [r4, #12]
  408b16:	60ef      	str	r7, [r5, #12]
  408b18:	60bd      	str	r5, [r7, #8]
  408b1a:	1815      	adds	r5, r2, r0
  408b1c:	686d      	ldr	r5, [r5, #4]
  408b1e:	07ed      	lsls	r5, r5, #31
  408b20:	d53e      	bpl.n	408ba0 <_free_r+0xd0>
  408b22:	f043 0201 	orr.w	r2, r3, #1
  408b26:	6062      	str	r2, [r4, #4]
  408b28:	50e3      	str	r3, [r4, r3]
  408b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408b2e:	d217      	bcs.n	408b60 <_free_r+0x90>
  408b30:	08db      	lsrs	r3, r3, #3
  408b32:	1c58      	adds	r0, r3, #1
  408b34:	109a      	asrs	r2, r3, #2
  408b36:	684d      	ldr	r5, [r1, #4]
  408b38:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408b3c:	60a7      	str	r7, [r4, #8]
  408b3e:	2301      	movs	r3, #1
  408b40:	4093      	lsls	r3, r2
  408b42:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408b46:	432b      	orrs	r3, r5
  408b48:	3a08      	subs	r2, #8
  408b4a:	60e2      	str	r2, [r4, #12]
  408b4c:	604b      	str	r3, [r1, #4]
  408b4e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408b52:	60fc      	str	r4, [r7, #12]
  408b54:	4640      	mov	r0, r8
  408b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408b5a:	f000 bef1 	b.w	409940 <__malloc_unlock>
  408b5e:	4770      	bx	lr
  408b60:	0a5a      	lsrs	r2, r3, #9
  408b62:	2a04      	cmp	r2, #4
  408b64:	d852      	bhi.n	408c0c <_free_r+0x13c>
  408b66:	099a      	lsrs	r2, r3, #6
  408b68:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408b6c:	00ff      	lsls	r7, r7, #3
  408b6e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408b72:	19c8      	adds	r0, r1, r7
  408b74:	59ca      	ldr	r2, [r1, r7]
  408b76:	3808      	subs	r0, #8
  408b78:	4290      	cmp	r0, r2
  408b7a:	d04f      	beq.n	408c1c <_free_r+0x14c>
  408b7c:	6851      	ldr	r1, [r2, #4]
  408b7e:	f021 0103 	bic.w	r1, r1, #3
  408b82:	428b      	cmp	r3, r1
  408b84:	d232      	bcs.n	408bec <_free_r+0x11c>
  408b86:	6892      	ldr	r2, [r2, #8]
  408b88:	4290      	cmp	r0, r2
  408b8a:	d1f7      	bne.n	408b7c <_free_r+0xac>
  408b8c:	68c3      	ldr	r3, [r0, #12]
  408b8e:	60a0      	str	r0, [r4, #8]
  408b90:	60e3      	str	r3, [r4, #12]
  408b92:	609c      	str	r4, [r3, #8]
  408b94:	60c4      	str	r4, [r0, #12]
  408b96:	4640      	mov	r0, r8
  408b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408b9c:	f000 bed0 	b.w	409940 <__malloc_unlock>
  408ba0:	6895      	ldr	r5, [r2, #8]
  408ba2:	4f3b      	ldr	r7, [pc, #236]	; (408c90 <_free_r+0x1c0>)
  408ba4:	42bd      	cmp	r5, r7
  408ba6:	4403      	add	r3, r0
  408ba8:	d040      	beq.n	408c2c <_free_r+0x15c>
  408baa:	68d0      	ldr	r0, [r2, #12]
  408bac:	60e8      	str	r0, [r5, #12]
  408bae:	f043 0201 	orr.w	r2, r3, #1
  408bb2:	6085      	str	r5, [r0, #8]
  408bb4:	6062      	str	r2, [r4, #4]
  408bb6:	50e3      	str	r3, [r4, r3]
  408bb8:	e7b7      	b.n	408b2a <_free_r+0x5a>
  408bba:	07ff      	lsls	r7, r7, #31
  408bbc:	4403      	add	r3, r0
  408bbe:	d407      	bmi.n	408bd0 <_free_r+0x100>
  408bc0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408bc4:	1aa4      	subs	r4, r4, r2
  408bc6:	4413      	add	r3, r2
  408bc8:	68a0      	ldr	r0, [r4, #8]
  408bca:	68e2      	ldr	r2, [r4, #12]
  408bcc:	60c2      	str	r2, [r0, #12]
  408bce:	6090      	str	r0, [r2, #8]
  408bd0:	4a30      	ldr	r2, [pc, #192]	; (408c94 <_free_r+0x1c4>)
  408bd2:	6812      	ldr	r2, [r2, #0]
  408bd4:	f043 0001 	orr.w	r0, r3, #1
  408bd8:	4293      	cmp	r3, r2
  408bda:	6060      	str	r0, [r4, #4]
  408bdc:	608c      	str	r4, [r1, #8]
  408bde:	d3b9      	bcc.n	408b54 <_free_r+0x84>
  408be0:	4b2d      	ldr	r3, [pc, #180]	; (408c98 <_free_r+0x1c8>)
  408be2:	4640      	mov	r0, r8
  408be4:	6819      	ldr	r1, [r3, #0]
  408be6:	f7ff ff23 	bl	408a30 <_malloc_trim_r>
  408bea:	e7b3      	b.n	408b54 <_free_r+0x84>
  408bec:	4610      	mov	r0, r2
  408bee:	e7cd      	b.n	408b8c <_free_r+0xbc>
  408bf0:	1811      	adds	r1, r2, r0
  408bf2:	6849      	ldr	r1, [r1, #4]
  408bf4:	07c9      	lsls	r1, r1, #31
  408bf6:	d444      	bmi.n	408c82 <_free_r+0x1b2>
  408bf8:	6891      	ldr	r1, [r2, #8]
  408bfa:	68d2      	ldr	r2, [r2, #12]
  408bfc:	60ca      	str	r2, [r1, #12]
  408bfe:	4403      	add	r3, r0
  408c00:	f043 0001 	orr.w	r0, r3, #1
  408c04:	6091      	str	r1, [r2, #8]
  408c06:	6060      	str	r0, [r4, #4]
  408c08:	50e3      	str	r3, [r4, r3]
  408c0a:	e7a3      	b.n	408b54 <_free_r+0x84>
  408c0c:	2a14      	cmp	r2, #20
  408c0e:	d816      	bhi.n	408c3e <_free_r+0x16e>
  408c10:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408c14:	00ff      	lsls	r7, r7, #3
  408c16:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408c1a:	e7aa      	b.n	408b72 <_free_r+0xa2>
  408c1c:	10aa      	asrs	r2, r5, #2
  408c1e:	2301      	movs	r3, #1
  408c20:	684d      	ldr	r5, [r1, #4]
  408c22:	4093      	lsls	r3, r2
  408c24:	432b      	orrs	r3, r5
  408c26:	604b      	str	r3, [r1, #4]
  408c28:	4603      	mov	r3, r0
  408c2a:	e7b0      	b.n	408b8e <_free_r+0xbe>
  408c2c:	f043 0201 	orr.w	r2, r3, #1
  408c30:	614c      	str	r4, [r1, #20]
  408c32:	610c      	str	r4, [r1, #16]
  408c34:	60e5      	str	r5, [r4, #12]
  408c36:	60a5      	str	r5, [r4, #8]
  408c38:	6062      	str	r2, [r4, #4]
  408c3a:	50e3      	str	r3, [r4, r3]
  408c3c:	e78a      	b.n	408b54 <_free_r+0x84>
  408c3e:	2a54      	cmp	r2, #84	; 0x54
  408c40:	d806      	bhi.n	408c50 <_free_r+0x180>
  408c42:	0b1a      	lsrs	r2, r3, #12
  408c44:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408c48:	00ff      	lsls	r7, r7, #3
  408c4a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408c4e:	e790      	b.n	408b72 <_free_r+0xa2>
  408c50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408c54:	d806      	bhi.n	408c64 <_free_r+0x194>
  408c56:	0bda      	lsrs	r2, r3, #15
  408c58:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408c5c:	00ff      	lsls	r7, r7, #3
  408c5e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408c62:	e786      	b.n	408b72 <_free_r+0xa2>
  408c64:	f240 5054 	movw	r0, #1364	; 0x554
  408c68:	4282      	cmp	r2, r0
  408c6a:	d806      	bhi.n	408c7a <_free_r+0x1aa>
  408c6c:	0c9a      	lsrs	r2, r3, #18
  408c6e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408c72:	00ff      	lsls	r7, r7, #3
  408c74:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408c78:	e77b      	b.n	408b72 <_free_r+0xa2>
  408c7a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408c7e:	257e      	movs	r5, #126	; 0x7e
  408c80:	e777      	b.n	408b72 <_free_r+0xa2>
  408c82:	f043 0101 	orr.w	r1, r3, #1
  408c86:	6061      	str	r1, [r4, #4]
  408c88:	6013      	str	r3, [r2, #0]
  408c8a:	e763      	b.n	408b54 <_free_r+0x84>
  408c8c:	204005dc 	.word	0x204005dc
  408c90:	204005e4 	.word	0x204005e4
  408c94:	204009e8 	.word	0x204009e8
  408c98:	20401688 	.word	0x20401688

00408c9c <__sfvwrite_r>:
  408c9c:	6893      	ldr	r3, [r2, #8]
  408c9e:	2b00      	cmp	r3, #0
  408ca0:	d073      	beq.n	408d8a <__sfvwrite_r+0xee>
  408ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408ca6:	898b      	ldrh	r3, [r1, #12]
  408ca8:	b083      	sub	sp, #12
  408caa:	460c      	mov	r4, r1
  408cac:	0719      	lsls	r1, r3, #28
  408cae:	9000      	str	r0, [sp, #0]
  408cb0:	4616      	mov	r6, r2
  408cb2:	d526      	bpl.n	408d02 <__sfvwrite_r+0x66>
  408cb4:	6922      	ldr	r2, [r4, #16]
  408cb6:	b322      	cbz	r2, 408d02 <__sfvwrite_r+0x66>
  408cb8:	f013 0002 	ands.w	r0, r3, #2
  408cbc:	6835      	ldr	r5, [r6, #0]
  408cbe:	d02c      	beq.n	408d1a <__sfvwrite_r+0x7e>
  408cc0:	f04f 0900 	mov.w	r9, #0
  408cc4:	4fb0      	ldr	r7, [pc, #704]	; (408f88 <__sfvwrite_r+0x2ec>)
  408cc6:	46c8      	mov	r8, r9
  408cc8:	46b2      	mov	sl, r6
  408cca:	45b8      	cmp	r8, r7
  408ccc:	4643      	mov	r3, r8
  408cce:	464a      	mov	r2, r9
  408cd0:	bf28      	it	cs
  408cd2:	463b      	movcs	r3, r7
  408cd4:	9800      	ldr	r0, [sp, #0]
  408cd6:	f1b8 0f00 	cmp.w	r8, #0
  408cda:	d050      	beq.n	408d7e <__sfvwrite_r+0xe2>
  408cdc:	69e1      	ldr	r1, [r4, #28]
  408cde:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408ce0:	47b0      	blx	r6
  408ce2:	2800      	cmp	r0, #0
  408ce4:	dd58      	ble.n	408d98 <__sfvwrite_r+0xfc>
  408ce6:	f8da 3008 	ldr.w	r3, [sl, #8]
  408cea:	1a1b      	subs	r3, r3, r0
  408cec:	4481      	add	r9, r0
  408cee:	eba8 0800 	sub.w	r8, r8, r0
  408cf2:	f8ca 3008 	str.w	r3, [sl, #8]
  408cf6:	2b00      	cmp	r3, #0
  408cf8:	d1e7      	bne.n	408cca <__sfvwrite_r+0x2e>
  408cfa:	2000      	movs	r0, #0
  408cfc:	b003      	add	sp, #12
  408cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d02:	4621      	mov	r1, r4
  408d04:	9800      	ldr	r0, [sp, #0]
  408d06:	f7fe fca5 	bl	407654 <__swsetup_r>
  408d0a:	2800      	cmp	r0, #0
  408d0c:	f040 8133 	bne.w	408f76 <__sfvwrite_r+0x2da>
  408d10:	89a3      	ldrh	r3, [r4, #12]
  408d12:	6835      	ldr	r5, [r6, #0]
  408d14:	f013 0002 	ands.w	r0, r3, #2
  408d18:	d1d2      	bne.n	408cc0 <__sfvwrite_r+0x24>
  408d1a:	f013 0901 	ands.w	r9, r3, #1
  408d1e:	d145      	bne.n	408dac <__sfvwrite_r+0x110>
  408d20:	464f      	mov	r7, r9
  408d22:	9601      	str	r6, [sp, #4]
  408d24:	b337      	cbz	r7, 408d74 <__sfvwrite_r+0xd8>
  408d26:	059a      	lsls	r2, r3, #22
  408d28:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408d2c:	f140 8083 	bpl.w	408e36 <__sfvwrite_r+0x19a>
  408d30:	4547      	cmp	r7, r8
  408d32:	46c3      	mov	fp, r8
  408d34:	f0c0 80ab 	bcc.w	408e8e <__sfvwrite_r+0x1f2>
  408d38:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408d3c:	f040 80ac 	bne.w	408e98 <__sfvwrite_r+0x1fc>
  408d40:	6820      	ldr	r0, [r4, #0]
  408d42:	46ba      	mov	sl, r7
  408d44:	465a      	mov	r2, fp
  408d46:	4649      	mov	r1, r9
  408d48:	f000 fd94 	bl	409874 <memmove>
  408d4c:	68a2      	ldr	r2, [r4, #8]
  408d4e:	6823      	ldr	r3, [r4, #0]
  408d50:	eba2 0208 	sub.w	r2, r2, r8
  408d54:	445b      	add	r3, fp
  408d56:	60a2      	str	r2, [r4, #8]
  408d58:	6023      	str	r3, [r4, #0]
  408d5a:	9a01      	ldr	r2, [sp, #4]
  408d5c:	6893      	ldr	r3, [r2, #8]
  408d5e:	eba3 030a 	sub.w	r3, r3, sl
  408d62:	44d1      	add	r9, sl
  408d64:	eba7 070a 	sub.w	r7, r7, sl
  408d68:	6093      	str	r3, [r2, #8]
  408d6a:	2b00      	cmp	r3, #0
  408d6c:	d0c5      	beq.n	408cfa <__sfvwrite_r+0x5e>
  408d6e:	89a3      	ldrh	r3, [r4, #12]
  408d70:	2f00      	cmp	r7, #0
  408d72:	d1d8      	bne.n	408d26 <__sfvwrite_r+0x8a>
  408d74:	f8d5 9000 	ldr.w	r9, [r5]
  408d78:	686f      	ldr	r7, [r5, #4]
  408d7a:	3508      	adds	r5, #8
  408d7c:	e7d2      	b.n	408d24 <__sfvwrite_r+0x88>
  408d7e:	f8d5 9000 	ldr.w	r9, [r5]
  408d82:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408d86:	3508      	adds	r5, #8
  408d88:	e79f      	b.n	408cca <__sfvwrite_r+0x2e>
  408d8a:	2000      	movs	r0, #0
  408d8c:	4770      	bx	lr
  408d8e:	4621      	mov	r1, r4
  408d90:	9800      	ldr	r0, [sp, #0]
  408d92:	f7ff fd33 	bl	4087fc <_fflush_r>
  408d96:	b370      	cbz	r0, 408df6 <__sfvwrite_r+0x15a>
  408d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408da0:	f04f 30ff 	mov.w	r0, #4294967295
  408da4:	81a3      	strh	r3, [r4, #12]
  408da6:	b003      	add	sp, #12
  408da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408dac:	4681      	mov	r9, r0
  408dae:	4633      	mov	r3, r6
  408db0:	464e      	mov	r6, r9
  408db2:	46a8      	mov	r8, r5
  408db4:	469a      	mov	sl, r3
  408db6:	464d      	mov	r5, r9
  408db8:	b34e      	cbz	r6, 408e0e <__sfvwrite_r+0x172>
  408dba:	b380      	cbz	r0, 408e1e <__sfvwrite_r+0x182>
  408dbc:	6820      	ldr	r0, [r4, #0]
  408dbe:	6923      	ldr	r3, [r4, #16]
  408dc0:	6962      	ldr	r2, [r4, #20]
  408dc2:	45b1      	cmp	r9, r6
  408dc4:	46cb      	mov	fp, r9
  408dc6:	bf28      	it	cs
  408dc8:	46b3      	movcs	fp, r6
  408dca:	4298      	cmp	r0, r3
  408dcc:	465f      	mov	r7, fp
  408dce:	d904      	bls.n	408dda <__sfvwrite_r+0x13e>
  408dd0:	68a3      	ldr	r3, [r4, #8]
  408dd2:	4413      	add	r3, r2
  408dd4:	459b      	cmp	fp, r3
  408dd6:	f300 80a6 	bgt.w	408f26 <__sfvwrite_r+0x28a>
  408dda:	4593      	cmp	fp, r2
  408ddc:	db4b      	blt.n	408e76 <__sfvwrite_r+0x1da>
  408dde:	4613      	mov	r3, r2
  408de0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408de2:	69e1      	ldr	r1, [r4, #28]
  408de4:	9800      	ldr	r0, [sp, #0]
  408de6:	462a      	mov	r2, r5
  408de8:	47b8      	blx	r7
  408dea:	1e07      	subs	r7, r0, #0
  408dec:	ddd4      	ble.n	408d98 <__sfvwrite_r+0xfc>
  408dee:	ebb9 0907 	subs.w	r9, r9, r7
  408df2:	d0cc      	beq.n	408d8e <__sfvwrite_r+0xf2>
  408df4:	2001      	movs	r0, #1
  408df6:	f8da 3008 	ldr.w	r3, [sl, #8]
  408dfa:	1bdb      	subs	r3, r3, r7
  408dfc:	443d      	add	r5, r7
  408dfe:	1bf6      	subs	r6, r6, r7
  408e00:	f8ca 3008 	str.w	r3, [sl, #8]
  408e04:	2b00      	cmp	r3, #0
  408e06:	f43f af78 	beq.w	408cfa <__sfvwrite_r+0x5e>
  408e0a:	2e00      	cmp	r6, #0
  408e0c:	d1d5      	bne.n	408dba <__sfvwrite_r+0x11e>
  408e0e:	f108 0308 	add.w	r3, r8, #8
  408e12:	e913 0060 	ldmdb	r3, {r5, r6}
  408e16:	4698      	mov	r8, r3
  408e18:	3308      	adds	r3, #8
  408e1a:	2e00      	cmp	r6, #0
  408e1c:	d0f9      	beq.n	408e12 <__sfvwrite_r+0x176>
  408e1e:	4632      	mov	r2, r6
  408e20:	210a      	movs	r1, #10
  408e22:	4628      	mov	r0, r5
  408e24:	f000 fc3c 	bl	4096a0 <memchr>
  408e28:	2800      	cmp	r0, #0
  408e2a:	f000 80a1 	beq.w	408f70 <__sfvwrite_r+0x2d4>
  408e2e:	3001      	adds	r0, #1
  408e30:	eba0 0905 	sub.w	r9, r0, r5
  408e34:	e7c2      	b.n	408dbc <__sfvwrite_r+0x120>
  408e36:	6820      	ldr	r0, [r4, #0]
  408e38:	6923      	ldr	r3, [r4, #16]
  408e3a:	4298      	cmp	r0, r3
  408e3c:	d802      	bhi.n	408e44 <__sfvwrite_r+0x1a8>
  408e3e:	6963      	ldr	r3, [r4, #20]
  408e40:	429f      	cmp	r7, r3
  408e42:	d25d      	bcs.n	408f00 <__sfvwrite_r+0x264>
  408e44:	45b8      	cmp	r8, r7
  408e46:	bf28      	it	cs
  408e48:	46b8      	movcs	r8, r7
  408e4a:	4642      	mov	r2, r8
  408e4c:	4649      	mov	r1, r9
  408e4e:	f000 fd11 	bl	409874 <memmove>
  408e52:	68a3      	ldr	r3, [r4, #8]
  408e54:	6822      	ldr	r2, [r4, #0]
  408e56:	eba3 0308 	sub.w	r3, r3, r8
  408e5a:	4442      	add	r2, r8
  408e5c:	60a3      	str	r3, [r4, #8]
  408e5e:	6022      	str	r2, [r4, #0]
  408e60:	b10b      	cbz	r3, 408e66 <__sfvwrite_r+0x1ca>
  408e62:	46c2      	mov	sl, r8
  408e64:	e779      	b.n	408d5a <__sfvwrite_r+0xbe>
  408e66:	4621      	mov	r1, r4
  408e68:	9800      	ldr	r0, [sp, #0]
  408e6a:	f7ff fcc7 	bl	4087fc <_fflush_r>
  408e6e:	2800      	cmp	r0, #0
  408e70:	d192      	bne.n	408d98 <__sfvwrite_r+0xfc>
  408e72:	46c2      	mov	sl, r8
  408e74:	e771      	b.n	408d5a <__sfvwrite_r+0xbe>
  408e76:	465a      	mov	r2, fp
  408e78:	4629      	mov	r1, r5
  408e7a:	f000 fcfb 	bl	409874 <memmove>
  408e7e:	68a2      	ldr	r2, [r4, #8]
  408e80:	6823      	ldr	r3, [r4, #0]
  408e82:	eba2 020b 	sub.w	r2, r2, fp
  408e86:	445b      	add	r3, fp
  408e88:	60a2      	str	r2, [r4, #8]
  408e8a:	6023      	str	r3, [r4, #0]
  408e8c:	e7af      	b.n	408dee <__sfvwrite_r+0x152>
  408e8e:	6820      	ldr	r0, [r4, #0]
  408e90:	46b8      	mov	r8, r7
  408e92:	46ba      	mov	sl, r7
  408e94:	46bb      	mov	fp, r7
  408e96:	e755      	b.n	408d44 <__sfvwrite_r+0xa8>
  408e98:	6962      	ldr	r2, [r4, #20]
  408e9a:	6820      	ldr	r0, [r4, #0]
  408e9c:	6921      	ldr	r1, [r4, #16]
  408e9e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408ea2:	eba0 0a01 	sub.w	sl, r0, r1
  408ea6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408eaa:	f10a 0001 	add.w	r0, sl, #1
  408eae:	ea4f 0868 	mov.w	r8, r8, asr #1
  408eb2:	4438      	add	r0, r7
  408eb4:	4540      	cmp	r0, r8
  408eb6:	4642      	mov	r2, r8
  408eb8:	bf84      	itt	hi
  408eba:	4680      	movhi	r8, r0
  408ebc:	4642      	movhi	r2, r8
  408ebe:	055b      	lsls	r3, r3, #21
  408ec0:	d544      	bpl.n	408f4c <__sfvwrite_r+0x2b0>
  408ec2:	4611      	mov	r1, r2
  408ec4:	9800      	ldr	r0, [sp, #0]
  408ec6:	f000 f921 	bl	40910c <_malloc_r>
  408eca:	4683      	mov	fp, r0
  408ecc:	2800      	cmp	r0, #0
  408ece:	d055      	beq.n	408f7c <__sfvwrite_r+0x2e0>
  408ed0:	4652      	mov	r2, sl
  408ed2:	6921      	ldr	r1, [r4, #16]
  408ed4:	f000 fc34 	bl	409740 <memcpy>
  408ed8:	89a3      	ldrh	r3, [r4, #12]
  408eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408ee2:	81a3      	strh	r3, [r4, #12]
  408ee4:	eb0b 000a 	add.w	r0, fp, sl
  408ee8:	eba8 030a 	sub.w	r3, r8, sl
  408eec:	f8c4 b010 	str.w	fp, [r4, #16]
  408ef0:	f8c4 8014 	str.w	r8, [r4, #20]
  408ef4:	6020      	str	r0, [r4, #0]
  408ef6:	60a3      	str	r3, [r4, #8]
  408ef8:	46b8      	mov	r8, r7
  408efa:	46ba      	mov	sl, r7
  408efc:	46bb      	mov	fp, r7
  408efe:	e721      	b.n	408d44 <__sfvwrite_r+0xa8>
  408f00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408f04:	42b9      	cmp	r1, r7
  408f06:	bf28      	it	cs
  408f08:	4639      	movcs	r1, r7
  408f0a:	464a      	mov	r2, r9
  408f0c:	fb91 f1f3 	sdiv	r1, r1, r3
  408f10:	9800      	ldr	r0, [sp, #0]
  408f12:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408f14:	fb03 f301 	mul.w	r3, r3, r1
  408f18:	69e1      	ldr	r1, [r4, #28]
  408f1a:	47b0      	blx	r6
  408f1c:	f1b0 0a00 	subs.w	sl, r0, #0
  408f20:	f73f af1b 	bgt.w	408d5a <__sfvwrite_r+0xbe>
  408f24:	e738      	b.n	408d98 <__sfvwrite_r+0xfc>
  408f26:	461a      	mov	r2, r3
  408f28:	4629      	mov	r1, r5
  408f2a:	9301      	str	r3, [sp, #4]
  408f2c:	f000 fca2 	bl	409874 <memmove>
  408f30:	6822      	ldr	r2, [r4, #0]
  408f32:	9b01      	ldr	r3, [sp, #4]
  408f34:	9800      	ldr	r0, [sp, #0]
  408f36:	441a      	add	r2, r3
  408f38:	6022      	str	r2, [r4, #0]
  408f3a:	4621      	mov	r1, r4
  408f3c:	f7ff fc5e 	bl	4087fc <_fflush_r>
  408f40:	9b01      	ldr	r3, [sp, #4]
  408f42:	2800      	cmp	r0, #0
  408f44:	f47f af28 	bne.w	408d98 <__sfvwrite_r+0xfc>
  408f48:	461f      	mov	r7, r3
  408f4a:	e750      	b.n	408dee <__sfvwrite_r+0x152>
  408f4c:	9800      	ldr	r0, [sp, #0]
  408f4e:	f000 fff3 	bl	409f38 <_realloc_r>
  408f52:	4683      	mov	fp, r0
  408f54:	2800      	cmp	r0, #0
  408f56:	d1c5      	bne.n	408ee4 <__sfvwrite_r+0x248>
  408f58:	9d00      	ldr	r5, [sp, #0]
  408f5a:	6921      	ldr	r1, [r4, #16]
  408f5c:	4628      	mov	r0, r5
  408f5e:	f7ff fdb7 	bl	408ad0 <_free_r>
  408f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408f66:	220c      	movs	r2, #12
  408f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408f6c:	602a      	str	r2, [r5, #0]
  408f6e:	e715      	b.n	408d9c <__sfvwrite_r+0x100>
  408f70:	f106 0901 	add.w	r9, r6, #1
  408f74:	e722      	b.n	408dbc <__sfvwrite_r+0x120>
  408f76:	f04f 30ff 	mov.w	r0, #4294967295
  408f7a:	e6bf      	b.n	408cfc <__sfvwrite_r+0x60>
  408f7c:	9a00      	ldr	r2, [sp, #0]
  408f7e:	230c      	movs	r3, #12
  408f80:	6013      	str	r3, [r2, #0]
  408f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408f86:	e709      	b.n	408d9c <__sfvwrite_r+0x100>
  408f88:	7ffffc00 	.word	0x7ffffc00

00408f8c <_fwalk_reent>:
  408f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408f90:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408f94:	d01f      	beq.n	408fd6 <_fwalk_reent+0x4a>
  408f96:	4688      	mov	r8, r1
  408f98:	4606      	mov	r6, r0
  408f9a:	f04f 0900 	mov.w	r9, #0
  408f9e:	687d      	ldr	r5, [r7, #4]
  408fa0:	68bc      	ldr	r4, [r7, #8]
  408fa2:	3d01      	subs	r5, #1
  408fa4:	d411      	bmi.n	408fca <_fwalk_reent+0x3e>
  408fa6:	89a3      	ldrh	r3, [r4, #12]
  408fa8:	2b01      	cmp	r3, #1
  408faa:	f105 35ff 	add.w	r5, r5, #4294967295
  408fae:	d908      	bls.n	408fc2 <_fwalk_reent+0x36>
  408fb0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408fb4:	3301      	adds	r3, #1
  408fb6:	4621      	mov	r1, r4
  408fb8:	4630      	mov	r0, r6
  408fba:	d002      	beq.n	408fc2 <_fwalk_reent+0x36>
  408fbc:	47c0      	blx	r8
  408fbe:	ea49 0900 	orr.w	r9, r9, r0
  408fc2:	1c6b      	adds	r3, r5, #1
  408fc4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408fc8:	d1ed      	bne.n	408fa6 <_fwalk_reent+0x1a>
  408fca:	683f      	ldr	r7, [r7, #0]
  408fcc:	2f00      	cmp	r7, #0
  408fce:	d1e6      	bne.n	408f9e <_fwalk_reent+0x12>
  408fd0:	4648      	mov	r0, r9
  408fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408fd6:	46b9      	mov	r9, r7
  408fd8:	4648      	mov	r0, r9
  408fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408fde:	bf00      	nop

00408fe0 <__locale_mb_cur_max>:
  408fe0:	4b04      	ldr	r3, [pc, #16]	; (408ff4 <__locale_mb_cur_max+0x14>)
  408fe2:	4a05      	ldr	r2, [pc, #20]	; (408ff8 <__locale_mb_cur_max+0x18>)
  408fe4:	681b      	ldr	r3, [r3, #0]
  408fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408fe8:	2b00      	cmp	r3, #0
  408fea:	bf08      	it	eq
  408fec:	4613      	moveq	r3, r2
  408fee:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408ff2:	4770      	bx	lr
  408ff4:	20400044 	.word	0x20400044
  408ff8:	20400470 	.word	0x20400470

00408ffc <_localeconv_r>:
  408ffc:	4a04      	ldr	r2, [pc, #16]	; (409010 <_localeconv_r+0x14>)
  408ffe:	4b05      	ldr	r3, [pc, #20]	; (409014 <_localeconv_r+0x18>)
  409000:	6812      	ldr	r2, [r2, #0]
  409002:	6b50      	ldr	r0, [r2, #52]	; 0x34
  409004:	2800      	cmp	r0, #0
  409006:	bf08      	it	eq
  409008:	4618      	moveq	r0, r3
  40900a:	30f0      	adds	r0, #240	; 0xf0
  40900c:	4770      	bx	lr
  40900e:	bf00      	nop
  409010:	20400044 	.word	0x20400044
  409014:	20400470 	.word	0x20400470

00409018 <__swhatbuf_r>:
  409018:	b570      	push	{r4, r5, r6, lr}
  40901a:	460c      	mov	r4, r1
  40901c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409020:	2900      	cmp	r1, #0
  409022:	b090      	sub	sp, #64	; 0x40
  409024:	4615      	mov	r5, r2
  409026:	461e      	mov	r6, r3
  409028:	db14      	blt.n	409054 <__swhatbuf_r+0x3c>
  40902a:	aa01      	add	r2, sp, #4
  40902c:	f001 fb78 	bl	40a720 <_fstat_r>
  409030:	2800      	cmp	r0, #0
  409032:	db0f      	blt.n	409054 <__swhatbuf_r+0x3c>
  409034:	9a02      	ldr	r2, [sp, #8]
  409036:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40903a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40903e:	fab2 f282 	clz	r2, r2
  409042:	0952      	lsrs	r2, r2, #5
  409044:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409048:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40904c:	6032      	str	r2, [r6, #0]
  40904e:	602b      	str	r3, [r5, #0]
  409050:	b010      	add	sp, #64	; 0x40
  409052:	bd70      	pop	{r4, r5, r6, pc}
  409054:	89a2      	ldrh	r2, [r4, #12]
  409056:	2300      	movs	r3, #0
  409058:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40905c:	6033      	str	r3, [r6, #0]
  40905e:	d004      	beq.n	40906a <__swhatbuf_r+0x52>
  409060:	2240      	movs	r2, #64	; 0x40
  409062:	4618      	mov	r0, r3
  409064:	602a      	str	r2, [r5, #0]
  409066:	b010      	add	sp, #64	; 0x40
  409068:	bd70      	pop	{r4, r5, r6, pc}
  40906a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40906e:	602b      	str	r3, [r5, #0]
  409070:	b010      	add	sp, #64	; 0x40
  409072:	bd70      	pop	{r4, r5, r6, pc}

00409074 <__smakebuf_r>:
  409074:	898a      	ldrh	r2, [r1, #12]
  409076:	0792      	lsls	r2, r2, #30
  409078:	460b      	mov	r3, r1
  40907a:	d506      	bpl.n	40908a <__smakebuf_r+0x16>
  40907c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  409080:	2101      	movs	r1, #1
  409082:	601a      	str	r2, [r3, #0]
  409084:	611a      	str	r2, [r3, #16]
  409086:	6159      	str	r1, [r3, #20]
  409088:	4770      	bx	lr
  40908a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40908c:	b083      	sub	sp, #12
  40908e:	ab01      	add	r3, sp, #4
  409090:	466a      	mov	r2, sp
  409092:	460c      	mov	r4, r1
  409094:	4605      	mov	r5, r0
  409096:	f7ff ffbf 	bl	409018 <__swhatbuf_r>
  40909a:	9900      	ldr	r1, [sp, #0]
  40909c:	4606      	mov	r6, r0
  40909e:	4628      	mov	r0, r5
  4090a0:	f000 f834 	bl	40910c <_malloc_r>
  4090a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4090a8:	b1d0      	cbz	r0, 4090e0 <__smakebuf_r+0x6c>
  4090aa:	9a01      	ldr	r2, [sp, #4]
  4090ac:	4f12      	ldr	r7, [pc, #72]	; (4090f8 <__smakebuf_r+0x84>)
  4090ae:	9900      	ldr	r1, [sp, #0]
  4090b0:	63ef      	str	r7, [r5, #60]	; 0x3c
  4090b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4090b6:	81a3      	strh	r3, [r4, #12]
  4090b8:	6020      	str	r0, [r4, #0]
  4090ba:	6120      	str	r0, [r4, #16]
  4090bc:	6161      	str	r1, [r4, #20]
  4090be:	b91a      	cbnz	r2, 4090c8 <__smakebuf_r+0x54>
  4090c0:	4333      	orrs	r3, r6
  4090c2:	81a3      	strh	r3, [r4, #12]
  4090c4:	b003      	add	sp, #12
  4090c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4090c8:	4628      	mov	r0, r5
  4090ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4090ce:	f001 fb3b 	bl	40a748 <_isatty_r>
  4090d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4090d6:	2800      	cmp	r0, #0
  4090d8:	d0f2      	beq.n	4090c0 <__smakebuf_r+0x4c>
  4090da:	f043 0301 	orr.w	r3, r3, #1
  4090de:	e7ef      	b.n	4090c0 <__smakebuf_r+0x4c>
  4090e0:	059a      	lsls	r2, r3, #22
  4090e2:	d4ef      	bmi.n	4090c4 <__smakebuf_r+0x50>
  4090e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4090e8:	f043 0302 	orr.w	r3, r3, #2
  4090ec:	2101      	movs	r1, #1
  4090ee:	81a3      	strh	r3, [r4, #12]
  4090f0:	6022      	str	r2, [r4, #0]
  4090f2:	6122      	str	r2, [r4, #16]
  4090f4:	6161      	str	r1, [r4, #20]
  4090f6:	e7e5      	b.n	4090c4 <__smakebuf_r+0x50>
  4090f8:	00408829 	.word	0x00408829

004090fc <malloc>:
  4090fc:	4b02      	ldr	r3, [pc, #8]	; (409108 <malloc+0xc>)
  4090fe:	4601      	mov	r1, r0
  409100:	6818      	ldr	r0, [r3, #0]
  409102:	f000 b803 	b.w	40910c <_malloc_r>
  409106:	bf00      	nop
  409108:	20400044 	.word	0x20400044

0040910c <_malloc_r>:
  40910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409110:	f101 060b 	add.w	r6, r1, #11
  409114:	2e16      	cmp	r6, #22
  409116:	b083      	sub	sp, #12
  409118:	4605      	mov	r5, r0
  40911a:	f240 809e 	bls.w	40925a <_malloc_r+0x14e>
  40911e:	f036 0607 	bics.w	r6, r6, #7
  409122:	f100 80bd 	bmi.w	4092a0 <_malloc_r+0x194>
  409126:	42b1      	cmp	r1, r6
  409128:	f200 80ba 	bhi.w	4092a0 <_malloc_r+0x194>
  40912c:	f000 fc06 	bl	40993c <__malloc_lock>
  409130:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  409134:	f0c0 8293 	bcc.w	40965e <_malloc_r+0x552>
  409138:	0a73      	lsrs	r3, r6, #9
  40913a:	f000 80b8 	beq.w	4092ae <_malloc_r+0x1a2>
  40913e:	2b04      	cmp	r3, #4
  409140:	f200 8179 	bhi.w	409436 <_malloc_r+0x32a>
  409144:	09b3      	lsrs	r3, r6, #6
  409146:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40914a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40914e:	00c3      	lsls	r3, r0, #3
  409150:	4fbf      	ldr	r7, [pc, #764]	; (409450 <_malloc_r+0x344>)
  409152:	443b      	add	r3, r7
  409154:	f1a3 0108 	sub.w	r1, r3, #8
  409158:	685c      	ldr	r4, [r3, #4]
  40915a:	42a1      	cmp	r1, r4
  40915c:	d106      	bne.n	40916c <_malloc_r+0x60>
  40915e:	e00c      	b.n	40917a <_malloc_r+0x6e>
  409160:	2a00      	cmp	r2, #0
  409162:	f280 80aa 	bge.w	4092ba <_malloc_r+0x1ae>
  409166:	68e4      	ldr	r4, [r4, #12]
  409168:	42a1      	cmp	r1, r4
  40916a:	d006      	beq.n	40917a <_malloc_r+0x6e>
  40916c:	6863      	ldr	r3, [r4, #4]
  40916e:	f023 0303 	bic.w	r3, r3, #3
  409172:	1b9a      	subs	r2, r3, r6
  409174:	2a0f      	cmp	r2, #15
  409176:	ddf3      	ble.n	409160 <_malloc_r+0x54>
  409178:	4670      	mov	r0, lr
  40917a:	693c      	ldr	r4, [r7, #16]
  40917c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 409464 <_malloc_r+0x358>
  409180:	4574      	cmp	r4, lr
  409182:	f000 81ab 	beq.w	4094dc <_malloc_r+0x3d0>
  409186:	6863      	ldr	r3, [r4, #4]
  409188:	f023 0303 	bic.w	r3, r3, #3
  40918c:	1b9a      	subs	r2, r3, r6
  40918e:	2a0f      	cmp	r2, #15
  409190:	f300 8190 	bgt.w	4094b4 <_malloc_r+0x3a8>
  409194:	2a00      	cmp	r2, #0
  409196:	f8c7 e014 	str.w	lr, [r7, #20]
  40919a:	f8c7 e010 	str.w	lr, [r7, #16]
  40919e:	f280 809d 	bge.w	4092dc <_malloc_r+0x1d0>
  4091a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4091a6:	f080 8161 	bcs.w	40946c <_malloc_r+0x360>
  4091aa:	08db      	lsrs	r3, r3, #3
  4091ac:	f103 0c01 	add.w	ip, r3, #1
  4091b0:	1099      	asrs	r1, r3, #2
  4091b2:	687a      	ldr	r2, [r7, #4]
  4091b4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4091b8:	f8c4 8008 	str.w	r8, [r4, #8]
  4091bc:	2301      	movs	r3, #1
  4091be:	408b      	lsls	r3, r1
  4091c0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4091c4:	4313      	orrs	r3, r2
  4091c6:	3908      	subs	r1, #8
  4091c8:	60e1      	str	r1, [r4, #12]
  4091ca:	607b      	str	r3, [r7, #4]
  4091cc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4091d0:	f8c8 400c 	str.w	r4, [r8, #12]
  4091d4:	1082      	asrs	r2, r0, #2
  4091d6:	2401      	movs	r4, #1
  4091d8:	4094      	lsls	r4, r2
  4091da:	429c      	cmp	r4, r3
  4091dc:	f200 808b 	bhi.w	4092f6 <_malloc_r+0x1ea>
  4091e0:	421c      	tst	r4, r3
  4091e2:	d106      	bne.n	4091f2 <_malloc_r+0xe6>
  4091e4:	f020 0003 	bic.w	r0, r0, #3
  4091e8:	0064      	lsls	r4, r4, #1
  4091ea:	421c      	tst	r4, r3
  4091ec:	f100 0004 	add.w	r0, r0, #4
  4091f0:	d0fa      	beq.n	4091e8 <_malloc_r+0xdc>
  4091f2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4091f6:	46cc      	mov	ip, r9
  4091f8:	4680      	mov	r8, r0
  4091fa:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4091fe:	459c      	cmp	ip, r3
  409200:	d107      	bne.n	409212 <_malloc_r+0x106>
  409202:	e16d      	b.n	4094e0 <_malloc_r+0x3d4>
  409204:	2a00      	cmp	r2, #0
  409206:	f280 817b 	bge.w	409500 <_malloc_r+0x3f4>
  40920a:	68db      	ldr	r3, [r3, #12]
  40920c:	459c      	cmp	ip, r3
  40920e:	f000 8167 	beq.w	4094e0 <_malloc_r+0x3d4>
  409212:	6859      	ldr	r1, [r3, #4]
  409214:	f021 0103 	bic.w	r1, r1, #3
  409218:	1b8a      	subs	r2, r1, r6
  40921a:	2a0f      	cmp	r2, #15
  40921c:	ddf2      	ble.n	409204 <_malloc_r+0xf8>
  40921e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  409222:	f8d3 8008 	ldr.w	r8, [r3, #8]
  409226:	9300      	str	r3, [sp, #0]
  409228:	199c      	adds	r4, r3, r6
  40922a:	4628      	mov	r0, r5
  40922c:	f046 0601 	orr.w	r6, r6, #1
  409230:	f042 0501 	orr.w	r5, r2, #1
  409234:	605e      	str	r6, [r3, #4]
  409236:	f8c8 c00c 	str.w	ip, [r8, #12]
  40923a:	f8cc 8008 	str.w	r8, [ip, #8]
  40923e:	617c      	str	r4, [r7, #20]
  409240:	613c      	str	r4, [r7, #16]
  409242:	f8c4 e00c 	str.w	lr, [r4, #12]
  409246:	f8c4 e008 	str.w	lr, [r4, #8]
  40924a:	6065      	str	r5, [r4, #4]
  40924c:	505a      	str	r2, [r3, r1]
  40924e:	f000 fb77 	bl	409940 <__malloc_unlock>
  409252:	9b00      	ldr	r3, [sp, #0]
  409254:	f103 0408 	add.w	r4, r3, #8
  409258:	e01e      	b.n	409298 <_malloc_r+0x18c>
  40925a:	2910      	cmp	r1, #16
  40925c:	d820      	bhi.n	4092a0 <_malloc_r+0x194>
  40925e:	f000 fb6d 	bl	40993c <__malloc_lock>
  409262:	2610      	movs	r6, #16
  409264:	2318      	movs	r3, #24
  409266:	2002      	movs	r0, #2
  409268:	4f79      	ldr	r7, [pc, #484]	; (409450 <_malloc_r+0x344>)
  40926a:	443b      	add	r3, r7
  40926c:	f1a3 0208 	sub.w	r2, r3, #8
  409270:	685c      	ldr	r4, [r3, #4]
  409272:	4294      	cmp	r4, r2
  409274:	f000 813d 	beq.w	4094f2 <_malloc_r+0x3e6>
  409278:	6863      	ldr	r3, [r4, #4]
  40927a:	68e1      	ldr	r1, [r4, #12]
  40927c:	68a6      	ldr	r6, [r4, #8]
  40927e:	f023 0303 	bic.w	r3, r3, #3
  409282:	4423      	add	r3, r4
  409284:	4628      	mov	r0, r5
  409286:	685a      	ldr	r2, [r3, #4]
  409288:	60f1      	str	r1, [r6, #12]
  40928a:	f042 0201 	orr.w	r2, r2, #1
  40928e:	608e      	str	r6, [r1, #8]
  409290:	605a      	str	r2, [r3, #4]
  409292:	f000 fb55 	bl	409940 <__malloc_unlock>
  409296:	3408      	adds	r4, #8
  409298:	4620      	mov	r0, r4
  40929a:	b003      	add	sp, #12
  40929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092a0:	2400      	movs	r4, #0
  4092a2:	230c      	movs	r3, #12
  4092a4:	4620      	mov	r0, r4
  4092a6:	602b      	str	r3, [r5, #0]
  4092a8:	b003      	add	sp, #12
  4092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092ae:	2040      	movs	r0, #64	; 0x40
  4092b0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4092b4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4092b8:	e74a      	b.n	409150 <_malloc_r+0x44>
  4092ba:	4423      	add	r3, r4
  4092bc:	68e1      	ldr	r1, [r4, #12]
  4092be:	685a      	ldr	r2, [r3, #4]
  4092c0:	68a6      	ldr	r6, [r4, #8]
  4092c2:	f042 0201 	orr.w	r2, r2, #1
  4092c6:	60f1      	str	r1, [r6, #12]
  4092c8:	4628      	mov	r0, r5
  4092ca:	608e      	str	r6, [r1, #8]
  4092cc:	605a      	str	r2, [r3, #4]
  4092ce:	f000 fb37 	bl	409940 <__malloc_unlock>
  4092d2:	3408      	adds	r4, #8
  4092d4:	4620      	mov	r0, r4
  4092d6:	b003      	add	sp, #12
  4092d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092dc:	4423      	add	r3, r4
  4092de:	4628      	mov	r0, r5
  4092e0:	685a      	ldr	r2, [r3, #4]
  4092e2:	f042 0201 	orr.w	r2, r2, #1
  4092e6:	605a      	str	r2, [r3, #4]
  4092e8:	f000 fb2a 	bl	409940 <__malloc_unlock>
  4092ec:	3408      	adds	r4, #8
  4092ee:	4620      	mov	r0, r4
  4092f0:	b003      	add	sp, #12
  4092f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092f6:	68bc      	ldr	r4, [r7, #8]
  4092f8:	6863      	ldr	r3, [r4, #4]
  4092fa:	f023 0803 	bic.w	r8, r3, #3
  4092fe:	45b0      	cmp	r8, r6
  409300:	d304      	bcc.n	40930c <_malloc_r+0x200>
  409302:	eba8 0306 	sub.w	r3, r8, r6
  409306:	2b0f      	cmp	r3, #15
  409308:	f300 8085 	bgt.w	409416 <_malloc_r+0x30a>
  40930c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 409468 <_malloc_r+0x35c>
  409310:	4b50      	ldr	r3, [pc, #320]	; (409454 <_malloc_r+0x348>)
  409312:	f8d9 2000 	ldr.w	r2, [r9]
  409316:	681b      	ldr	r3, [r3, #0]
  409318:	3201      	adds	r2, #1
  40931a:	4433      	add	r3, r6
  40931c:	eb04 0a08 	add.w	sl, r4, r8
  409320:	f000 8155 	beq.w	4095ce <_malloc_r+0x4c2>
  409324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  409328:	330f      	adds	r3, #15
  40932a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40932e:	f02b 0b0f 	bic.w	fp, fp, #15
  409332:	4659      	mov	r1, fp
  409334:	4628      	mov	r0, r5
  409336:	f000 ffa5 	bl	40a284 <_sbrk_r>
  40933a:	1c41      	adds	r1, r0, #1
  40933c:	4602      	mov	r2, r0
  40933e:	f000 80fc 	beq.w	40953a <_malloc_r+0x42e>
  409342:	4582      	cmp	sl, r0
  409344:	f200 80f7 	bhi.w	409536 <_malloc_r+0x42a>
  409348:	4b43      	ldr	r3, [pc, #268]	; (409458 <_malloc_r+0x34c>)
  40934a:	6819      	ldr	r1, [r3, #0]
  40934c:	4459      	add	r1, fp
  40934e:	6019      	str	r1, [r3, #0]
  409350:	f000 814d 	beq.w	4095ee <_malloc_r+0x4e2>
  409354:	f8d9 0000 	ldr.w	r0, [r9]
  409358:	3001      	adds	r0, #1
  40935a:	bf1b      	ittet	ne
  40935c:	eba2 0a0a 	subne.w	sl, r2, sl
  409360:	4451      	addne	r1, sl
  409362:	f8c9 2000 	streq.w	r2, [r9]
  409366:	6019      	strne	r1, [r3, #0]
  409368:	f012 0107 	ands.w	r1, r2, #7
  40936c:	f000 8115 	beq.w	40959a <_malloc_r+0x48e>
  409370:	f1c1 0008 	rsb	r0, r1, #8
  409374:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  409378:	4402      	add	r2, r0
  40937a:	3108      	adds	r1, #8
  40937c:	eb02 090b 	add.w	r9, r2, fp
  409380:	f3c9 090b 	ubfx	r9, r9, #0, #12
  409384:	eba1 0909 	sub.w	r9, r1, r9
  409388:	4649      	mov	r1, r9
  40938a:	4628      	mov	r0, r5
  40938c:	9301      	str	r3, [sp, #4]
  40938e:	9200      	str	r2, [sp, #0]
  409390:	f000 ff78 	bl	40a284 <_sbrk_r>
  409394:	1c43      	adds	r3, r0, #1
  409396:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40939a:	f000 8143 	beq.w	409624 <_malloc_r+0x518>
  40939e:	1a80      	subs	r0, r0, r2
  4093a0:	4448      	add	r0, r9
  4093a2:	f040 0001 	orr.w	r0, r0, #1
  4093a6:	6819      	ldr	r1, [r3, #0]
  4093a8:	60ba      	str	r2, [r7, #8]
  4093aa:	4449      	add	r1, r9
  4093ac:	42bc      	cmp	r4, r7
  4093ae:	6050      	str	r0, [r2, #4]
  4093b0:	6019      	str	r1, [r3, #0]
  4093b2:	d017      	beq.n	4093e4 <_malloc_r+0x2d8>
  4093b4:	f1b8 0f0f 	cmp.w	r8, #15
  4093b8:	f240 80fb 	bls.w	4095b2 <_malloc_r+0x4a6>
  4093bc:	6860      	ldr	r0, [r4, #4]
  4093be:	f1a8 020c 	sub.w	r2, r8, #12
  4093c2:	f022 0207 	bic.w	r2, r2, #7
  4093c6:	eb04 0e02 	add.w	lr, r4, r2
  4093ca:	f000 0001 	and.w	r0, r0, #1
  4093ce:	f04f 0c05 	mov.w	ip, #5
  4093d2:	4310      	orrs	r0, r2
  4093d4:	2a0f      	cmp	r2, #15
  4093d6:	6060      	str	r0, [r4, #4]
  4093d8:	f8ce c004 	str.w	ip, [lr, #4]
  4093dc:	f8ce c008 	str.w	ip, [lr, #8]
  4093e0:	f200 8117 	bhi.w	409612 <_malloc_r+0x506>
  4093e4:	4b1d      	ldr	r3, [pc, #116]	; (40945c <_malloc_r+0x350>)
  4093e6:	68bc      	ldr	r4, [r7, #8]
  4093e8:	681a      	ldr	r2, [r3, #0]
  4093ea:	4291      	cmp	r1, r2
  4093ec:	bf88      	it	hi
  4093ee:	6019      	strhi	r1, [r3, #0]
  4093f0:	4b1b      	ldr	r3, [pc, #108]	; (409460 <_malloc_r+0x354>)
  4093f2:	681a      	ldr	r2, [r3, #0]
  4093f4:	4291      	cmp	r1, r2
  4093f6:	6862      	ldr	r2, [r4, #4]
  4093f8:	bf88      	it	hi
  4093fa:	6019      	strhi	r1, [r3, #0]
  4093fc:	f022 0203 	bic.w	r2, r2, #3
  409400:	4296      	cmp	r6, r2
  409402:	eba2 0306 	sub.w	r3, r2, r6
  409406:	d801      	bhi.n	40940c <_malloc_r+0x300>
  409408:	2b0f      	cmp	r3, #15
  40940a:	dc04      	bgt.n	409416 <_malloc_r+0x30a>
  40940c:	4628      	mov	r0, r5
  40940e:	f000 fa97 	bl	409940 <__malloc_unlock>
  409412:	2400      	movs	r4, #0
  409414:	e740      	b.n	409298 <_malloc_r+0x18c>
  409416:	19a2      	adds	r2, r4, r6
  409418:	f043 0301 	orr.w	r3, r3, #1
  40941c:	f046 0601 	orr.w	r6, r6, #1
  409420:	6066      	str	r6, [r4, #4]
  409422:	4628      	mov	r0, r5
  409424:	60ba      	str	r2, [r7, #8]
  409426:	6053      	str	r3, [r2, #4]
  409428:	f000 fa8a 	bl	409940 <__malloc_unlock>
  40942c:	3408      	adds	r4, #8
  40942e:	4620      	mov	r0, r4
  409430:	b003      	add	sp, #12
  409432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409436:	2b14      	cmp	r3, #20
  409438:	d971      	bls.n	40951e <_malloc_r+0x412>
  40943a:	2b54      	cmp	r3, #84	; 0x54
  40943c:	f200 80a3 	bhi.w	409586 <_malloc_r+0x47a>
  409440:	0b33      	lsrs	r3, r6, #12
  409442:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  409446:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40944a:	00c3      	lsls	r3, r0, #3
  40944c:	e680      	b.n	409150 <_malloc_r+0x44>
  40944e:	bf00      	nop
  409450:	204005dc 	.word	0x204005dc
  409454:	20401688 	.word	0x20401688
  409458:	20401658 	.word	0x20401658
  40945c:	20401680 	.word	0x20401680
  409460:	20401684 	.word	0x20401684
  409464:	204005e4 	.word	0x204005e4
  409468:	204009e4 	.word	0x204009e4
  40946c:	0a5a      	lsrs	r2, r3, #9
  40946e:	2a04      	cmp	r2, #4
  409470:	d95b      	bls.n	40952a <_malloc_r+0x41e>
  409472:	2a14      	cmp	r2, #20
  409474:	f200 80ae 	bhi.w	4095d4 <_malloc_r+0x4c8>
  409478:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40947c:	00c9      	lsls	r1, r1, #3
  40947e:	325b      	adds	r2, #91	; 0x5b
  409480:	eb07 0c01 	add.w	ip, r7, r1
  409484:	5879      	ldr	r1, [r7, r1]
  409486:	f1ac 0c08 	sub.w	ip, ip, #8
  40948a:	458c      	cmp	ip, r1
  40948c:	f000 8088 	beq.w	4095a0 <_malloc_r+0x494>
  409490:	684a      	ldr	r2, [r1, #4]
  409492:	f022 0203 	bic.w	r2, r2, #3
  409496:	4293      	cmp	r3, r2
  409498:	d273      	bcs.n	409582 <_malloc_r+0x476>
  40949a:	6889      	ldr	r1, [r1, #8]
  40949c:	458c      	cmp	ip, r1
  40949e:	d1f7      	bne.n	409490 <_malloc_r+0x384>
  4094a0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4094a4:	687b      	ldr	r3, [r7, #4]
  4094a6:	60e2      	str	r2, [r4, #12]
  4094a8:	f8c4 c008 	str.w	ip, [r4, #8]
  4094ac:	6094      	str	r4, [r2, #8]
  4094ae:	f8cc 400c 	str.w	r4, [ip, #12]
  4094b2:	e68f      	b.n	4091d4 <_malloc_r+0xc8>
  4094b4:	19a1      	adds	r1, r4, r6
  4094b6:	f046 0c01 	orr.w	ip, r6, #1
  4094ba:	f042 0601 	orr.w	r6, r2, #1
  4094be:	f8c4 c004 	str.w	ip, [r4, #4]
  4094c2:	4628      	mov	r0, r5
  4094c4:	6179      	str	r1, [r7, #20]
  4094c6:	6139      	str	r1, [r7, #16]
  4094c8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4094cc:	f8c1 e008 	str.w	lr, [r1, #8]
  4094d0:	604e      	str	r6, [r1, #4]
  4094d2:	50e2      	str	r2, [r4, r3]
  4094d4:	f000 fa34 	bl	409940 <__malloc_unlock>
  4094d8:	3408      	adds	r4, #8
  4094da:	e6dd      	b.n	409298 <_malloc_r+0x18c>
  4094dc:	687b      	ldr	r3, [r7, #4]
  4094de:	e679      	b.n	4091d4 <_malloc_r+0xc8>
  4094e0:	f108 0801 	add.w	r8, r8, #1
  4094e4:	f018 0f03 	tst.w	r8, #3
  4094e8:	f10c 0c08 	add.w	ip, ip, #8
  4094ec:	f47f ae85 	bne.w	4091fa <_malloc_r+0xee>
  4094f0:	e02d      	b.n	40954e <_malloc_r+0x442>
  4094f2:	68dc      	ldr	r4, [r3, #12]
  4094f4:	42a3      	cmp	r3, r4
  4094f6:	bf08      	it	eq
  4094f8:	3002      	addeq	r0, #2
  4094fa:	f43f ae3e 	beq.w	40917a <_malloc_r+0x6e>
  4094fe:	e6bb      	b.n	409278 <_malloc_r+0x16c>
  409500:	4419      	add	r1, r3
  409502:	461c      	mov	r4, r3
  409504:	684a      	ldr	r2, [r1, #4]
  409506:	68db      	ldr	r3, [r3, #12]
  409508:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40950c:	f042 0201 	orr.w	r2, r2, #1
  409510:	604a      	str	r2, [r1, #4]
  409512:	4628      	mov	r0, r5
  409514:	60f3      	str	r3, [r6, #12]
  409516:	609e      	str	r6, [r3, #8]
  409518:	f000 fa12 	bl	409940 <__malloc_unlock>
  40951c:	e6bc      	b.n	409298 <_malloc_r+0x18c>
  40951e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  409522:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  409526:	00c3      	lsls	r3, r0, #3
  409528:	e612      	b.n	409150 <_malloc_r+0x44>
  40952a:	099a      	lsrs	r2, r3, #6
  40952c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  409530:	00c9      	lsls	r1, r1, #3
  409532:	3238      	adds	r2, #56	; 0x38
  409534:	e7a4      	b.n	409480 <_malloc_r+0x374>
  409536:	42bc      	cmp	r4, r7
  409538:	d054      	beq.n	4095e4 <_malloc_r+0x4d8>
  40953a:	68bc      	ldr	r4, [r7, #8]
  40953c:	6862      	ldr	r2, [r4, #4]
  40953e:	f022 0203 	bic.w	r2, r2, #3
  409542:	e75d      	b.n	409400 <_malloc_r+0x2f4>
  409544:	f859 3908 	ldr.w	r3, [r9], #-8
  409548:	4599      	cmp	r9, r3
  40954a:	f040 8086 	bne.w	40965a <_malloc_r+0x54e>
  40954e:	f010 0f03 	tst.w	r0, #3
  409552:	f100 30ff 	add.w	r0, r0, #4294967295
  409556:	d1f5      	bne.n	409544 <_malloc_r+0x438>
  409558:	687b      	ldr	r3, [r7, #4]
  40955a:	ea23 0304 	bic.w	r3, r3, r4
  40955e:	607b      	str	r3, [r7, #4]
  409560:	0064      	lsls	r4, r4, #1
  409562:	429c      	cmp	r4, r3
  409564:	f63f aec7 	bhi.w	4092f6 <_malloc_r+0x1ea>
  409568:	2c00      	cmp	r4, #0
  40956a:	f43f aec4 	beq.w	4092f6 <_malloc_r+0x1ea>
  40956e:	421c      	tst	r4, r3
  409570:	4640      	mov	r0, r8
  409572:	f47f ae3e 	bne.w	4091f2 <_malloc_r+0xe6>
  409576:	0064      	lsls	r4, r4, #1
  409578:	421c      	tst	r4, r3
  40957a:	f100 0004 	add.w	r0, r0, #4
  40957e:	d0fa      	beq.n	409576 <_malloc_r+0x46a>
  409580:	e637      	b.n	4091f2 <_malloc_r+0xe6>
  409582:	468c      	mov	ip, r1
  409584:	e78c      	b.n	4094a0 <_malloc_r+0x394>
  409586:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40958a:	d815      	bhi.n	4095b8 <_malloc_r+0x4ac>
  40958c:	0bf3      	lsrs	r3, r6, #15
  40958e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  409592:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  409596:	00c3      	lsls	r3, r0, #3
  409598:	e5da      	b.n	409150 <_malloc_r+0x44>
  40959a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40959e:	e6ed      	b.n	40937c <_malloc_r+0x270>
  4095a0:	687b      	ldr	r3, [r7, #4]
  4095a2:	1092      	asrs	r2, r2, #2
  4095a4:	2101      	movs	r1, #1
  4095a6:	fa01 f202 	lsl.w	r2, r1, r2
  4095aa:	4313      	orrs	r3, r2
  4095ac:	607b      	str	r3, [r7, #4]
  4095ae:	4662      	mov	r2, ip
  4095b0:	e779      	b.n	4094a6 <_malloc_r+0x39a>
  4095b2:	2301      	movs	r3, #1
  4095b4:	6053      	str	r3, [r2, #4]
  4095b6:	e729      	b.n	40940c <_malloc_r+0x300>
  4095b8:	f240 5254 	movw	r2, #1364	; 0x554
  4095bc:	4293      	cmp	r3, r2
  4095be:	d822      	bhi.n	409606 <_malloc_r+0x4fa>
  4095c0:	0cb3      	lsrs	r3, r6, #18
  4095c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4095c6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4095ca:	00c3      	lsls	r3, r0, #3
  4095cc:	e5c0      	b.n	409150 <_malloc_r+0x44>
  4095ce:	f103 0b10 	add.w	fp, r3, #16
  4095d2:	e6ae      	b.n	409332 <_malloc_r+0x226>
  4095d4:	2a54      	cmp	r2, #84	; 0x54
  4095d6:	d829      	bhi.n	40962c <_malloc_r+0x520>
  4095d8:	0b1a      	lsrs	r2, r3, #12
  4095da:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4095de:	00c9      	lsls	r1, r1, #3
  4095e0:	326e      	adds	r2, #110	; 0x6e
  4095e2:	e74d      	b.n	409480 <_malloc_r+0x374>
  4095e4:	4b20      	ldr	r3, [pc, #128]	; (409668 <_malloc_r+0x55c>)
  4095e6:	6819      	ldr	r1, [r3, #0]
  4095e8:	4459      	add	r1, fp
  4095ea:	6019      	str	r1, [r3, #0]
  4095ec:	e6b2      	b.n	409354 <_malloc_r+0x248>
  4095ee:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4095f2:	2800      	cmp	r0, #0
  4095f4:	f47f aeae 	bne.w	409354 <_malloc_r+0x248>
  4095f8:	eb08 030b 	add.w	r3, r8, fp
  4095fc:	68ba      	ldr	r2, [r7, #8]
  4095fe:	f043 0301 	orr.w	r3, r3, #1
  409602:	6053      	str	r3, [r2, #4]
  409604:	e6ee      	b.n	4093e4 <_malloc_r+0x2d8>
  409606:	207f      	movs	r0, #127	; 0x7f
  409608:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40960c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  409610:	e59e      	b.n	409150 <_malloc_r+0x44>
  409612:	f104 0108 	add.w	r1, r4, #8
  409616:	4628      	mov	r0, r5
  409618:	9300      	str	r3, [sp, #0]
  40961a:	f7ff fa59 	bl	408ad0 <_free_r>
  40961e:	9b00      	ldr	r3, [sp, #0]
  409620:	6819      	ldr	r1, [r3, #0]
  409622:	e6df      	b.n	4093e4 <_malloc_r+0x2d8>
  409624:	2001      	movs	r0, #1
  409626:	f04f 0900 	mov.w	r9, #0
  40962a:	e6bc      	b.n	4093a6 <_malloc_r+0x29a>
  40962c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409630:	d805      	bhi.n	40963e <_malloc_r+0x532>
  409632:	0bda      	lsrs	r2, r3, #15
  409634:	f102 0178 	add.w	r1, r2, #120	; 0x78
  409638:	00c9      	lsls	r1, r1, #3
  40963a:	3277      	adds	r2, #119	; 0x77
  40963c:	e720      	b.n	409480 <_malloc_r+0x374>
  40963e:	f240 5154 	movw	r1, #1364	; 0x554
  409642:	428a      	cmp	r2, r1
  409644:	d805      	bhi.n	409652 <_malloc_r+0x546>
  409646:	0c9a      	lsrs	r2, r3, #18
  409648:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40964c:	00c9      	lsls	r1, r1, #3
  40964e:	327c      	adds	r2, #124	; 0x7c
  409650:	e716      	b.n	409480 <_malloc_r+0x374>
  409652:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  409656:	227e      	movs	r2, #126	; 0x7e
  409658:	e712      	b.n	409480 <_malloc_r+0x374>
  40965a:	687b      	ldr	r3, [r7, #4]
  40965c:	e780      	b.n	409560 <_malloc_r+0x454>
  40965e:	08f0      	lsrs	r0, r6, #3
  409660:	f106 0308 	add.w	r3, r6, #8
  409664:	e600      	b.n	409268 <_malloc_r+0x15c>
  409666:	bf00      	nop
  409668:	20401658 	.word	0x20401658

0040966c <__ascii_mbtowc>:
  40966c:	b082      	sub	sp, #8
  40966e:	b149      	cbz	r1, 409684 <__ascii_mbtowc+0x18>
  409670:	b15a      	cbz	r2, 40968a <__ascii_mbtowc+0x1e>
  409672:	b16b      	cbz	r3, 409690 <__ascii_mbtowc+0x24>
  409674:	7813      	ldrb	r3, [r2, #0]
  409676:	600b      	str	r3, [r1, #0]
  409678:	7812      	ldrb	r2, [r2, #0]
  40967a:	1c10      	adds	r0, r2, #0
  40967c:	bf18      	it	ne
  40967e:	2001      	movne	r0, #1
  409680:	b002      	add	sp, #8
  409682:	4770      	bx	lr
  409684:	a901      	add	r1, sp, #4
  409686:	2a00      	cmp	r2, #0
  409688:	d1f3      	bne.n	409672 <__ascii_mbtowc+0x6>
  40968a:	4610      	mov	r0, r2
  40968c:	b002      	add	sp, #8
  40968e:	4770      	bx	lr
  409690:	f06f 0001 	mvn.w	r0, #1
  409694:	e7f4      	b.n	409680 <__ascii_mbtowc+0x14>
  409696:	bf00      	nop
	...

004096a0 <memchr>:
  4096a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4096a4:	2a10      	cmp	r2, #16
  4096a6:	db2b      	blt.n	409700 <memchr+0x60>
  4096a8:	f010 0f07 	tst.w	r0, #7
  4096ac:	d008      	beq.n	4096c0 <memchr+0x20>
  4096ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4096b2:	3a01      	subs	r2, #1
  4096b4:	428b      	cmp	r3, r1
  4096b6:	d02d      	beq.n	409714 <memchr+0x74>
  4096b8:	f010 0f07 	tst.w	r0, #7
  4096bc:	b342      	cbz	r2, 409710 <memchr+0x70>
  4096be:	d1f6      	bne.n	4096ae <memchr+0xe>
  4096c0:	b4f0      	push	{r4, r5, r6, r7}
  4096c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4096c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4096ca:	f022 0407 	bic.w	r4, r2, #7
  4096ce:	f07f 0700 	mvns.w	r7, #0
  4096d2:	2300      	movs	r3, #0
  4096d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4096d8:	3c08      	subs	r4, #8
  4096da:	ea85 0501 	eor.w	r5, r5, r1
  4096de:	ea86 0601 	eor.w	r6, r6, r1
  4096e2:	fa85 f547 	uadd8	r5, r5, r7
  4096e6:	faa3 f587 	sel	r5, r3, r7
  4096ea:	fa86 f647 	uadd8	r6, r6, r7
  4096ee:	faa5 f687 	sel	r6, r5, r7
  4096f2:	b98e      	cbnz	r6, 409718 <memchr+0x78>
  4096f4:	d1ee      	bne.n	4096d4 <memchr+0x34>
  4096f6:	bcf0      	pop	{r4, r5, r6, r7}
  4096f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4096fc:	f002 0207 	and.w	r2, r2, #7
  409700:	b132      	cbz	r2, 409710 <memchr+0x70>
  409702:	f810 3b01 	ldrb.w	r3, [r0], #1
  409706:	3a01      	subs	r2, #1
  409708:	ea83 0301 	eor.w	r3, r3, r1
  40970c:	b113      	cbz	r3, 409714 <memchr+0x74>
  40970e:	d1f8      	bne.n	409702 <memchr+0x62>
  409710:	2000      	movs	r0, #0
  409712:	4770      	bx	lr
  409714:	3801      	subs	r0, #1
  409716:	4770      	bx	lr
  409718:	2d00      	cmp	r5, #0
  40971a:	bf06      	itte	eq
  40971c:	4635      	moveq	r5, r6
  40971e:	3803      	subeq	r0, #3
  409720:	3807      	subne	r0, #7
  409722:	f015 0f01 	tst.w	r5, #1
  409726:	d107      	bne.n	409738 <memchr+0x98>
  409728:	3001      	adds	r0, #1
  40972a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40972e:	bf02      	ittt	eq
  409730:	3001      	addeq	r0, #1
  409732:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409736:	3001      	addeq	r0, #1
  409738:	bcf0      	pop	{r4, r5, r6, r7}
  40973a:	3801      	subs	r0, #1
  40973c:	4770      	bx	lr
  40973e:	bf00      	nop

00409740 <memcpy>:
  409740:	4684      	mov	ip, r0
  409742:	ea41 0300 	orr.w	r3, r1, r0
  409746:	f013 0303 	ands.w	r3, r3, #3
  40974a:	d16d      	bne.n	409828 <memcpy+0xe8>
  40974c:	3a40      	subs	r2, #64	; 0x40
  40974e:	d341      	bcc.n	4097d4 <memcpy+0x94>
  409750:	f851 3b04 	ldr.w	r3, [r1], #4
  409754:	f840 3b04 	str.w	r3, [r0], #4
  409758:	f851 3b04 	ldr.w	r3, [r1], #4
  40975c:	f840 3b04 	str.w	r3, [r0], #4
  409760:	f851 3b04 	ldr.w	r3, [r1], #4
  409764:	f840 3b04 	str.w	r3, [r0], #4
  409768:	f851 3b04 	ldr.w	r3, [r1], #4
  40976c:	f840 3b04 	str.w	r3, [r0], #4
  409770:	f851 3b04 	ldr.w	r3, [r1], #4
  409774:	f840 3b04 	str.w	r3, [r0], #4
  409778:	f851 3b04 	ldr.w	r3, [r1], #4
  40977c:	f840 3b04 	str.w	r3, [r0], #4
  409780:	f851 3b04 	ldr.w	r3, [r1], #4
  409784:	f840 3b04 	str.w	r3, [r0], #4
  409788:	f851 3b04 	ldr.w	r3, [r1], #4
  40978c:	f840 3b04 	str.w	r3, [r0], #4
  409790:	f851 3b04 	ldr.w	r3, [r1], #4
  409794:	f840 3b04 	str.w	r3, [r0], #4
  409798:	f851 3b04 	ldr.w	r3, [r1], #4
  40979c:	f840 3b04 	str.w	r3, [r0], #4
  4097a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4097a4:	f840 3b04 	str.w	r3, [r0], #4
  4097a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4097ac:	f840 3b04 	str.w	r3, [r0], #4
  4097b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4097b4:	f840 3b04 	str.w	r3, [r0], #4
  4097b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4097bc:	f840 3b04 	str.w	r3, [r0], #4
  4097c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4097c4:	f840 3b04 	str.w	r3, [r0], #4
  4097c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4097cc:	f840 3b04 	str.w	r3, [r0], #4
  4097d0:	3a40      	subs	r2, #64	; 0x40
  4097d2:	d2bd      	bcs.n	409750 <memcpy+0x10>
  4097d4:	3230      	adds	r2, #48	; 0x30
  4097d6:	d311      	bcc.n	4097fc <memcpy+0xbc>
  4097d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4097dc:	f840 3b04 	str.w	r3, [r0], #4
  4097e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4097e4:	f840 3b04 	str.w	r3, [r0], #4
  4097e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4097ec:	f840 3b04 	str.w	r3, [r0], #4
  4097f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4097f4:	f840 3b04 	str.w	r3, [r0], #4
  4097f8:	3a10      	subs	r2, #16
  4097fa:	d2ed      	bcs.n	4097d8 <memcpy+0x98>
  4097fc:	320c      	adds	r2, #12
  4097fe:	d305      	bcc.n	40980c <memcpy+0xcc>
  409800:	f851 3b04 	ldr.w	r3, [r1], #4
  409804:	f840 3b04 	str.w	r3, [r0], #4
  409808:	3a04      	subs	r2, #4
  40980a:	d2f9      	bcs.n	409800 <memcpy+0xc0>
  40980c:	3204      	adds	r2, #4
  40980e:	d008      	beq.n	409822 <memcpy+0xe2>
  409810:	07d2      	lsls	r2, r2, #31
  409812:	bf1c      	itt	ne
  409814:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409818:	f800 3b01 	strbne.w	r3, [r0], #1
  40981c:	d301      	bcc.n	409822 <memcpy+0xe2>
  40981e:	880b      	ldrh	r3, [r1, #0]
  409820:	8003      	strh	r3, [r0, #0]
  409822:	4660      	mov	r0, ip
  409824:	4770      	bx	lr
  409826:	bf00      	nop
  409828:	2a08      	cmp	r2, #8
  40982a:	d313      	bcc.n	409854 <memcpy+0x114>
  40982c:	078b      	lsls	r3, r1, #30
  40982e:	d08d      	beq.n	40974c <memcpy+0xc>
  409830:	f010 0303 	ands.w	r3, r0, #3
  409834:	d08a      	beq.n	40974c <memcpy+0xc>
  409836:	f1c3 0304 	rsb	r3, r3, #4
  40983a:	1ad2      	subs	r2, r2, r3
  40983c:	07db      	lsls	r3, r3, #31
  40983e:	bf1c      	itt	ne
  409840:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409844:	f800 3b01 	strbne.w	r3, [r0], #1
  409848:	d380      	bcc.n	40974c <memcpy+0xc>
  40984a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40984e:	f820 3b02 	strh.w	r3, [r0], #2
  409852:	e77b      	b.n	40974c <memcpy+0xc>
  409854:	3a04      	subs	r2, #4
  409856:	d3d9      	bcc.n	40980c <memcpy+0xcc>
  409858:	3a01      	subs	r2, #1
  40985a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40985e:	f800 3b01 	strb.w	r3, [r0], #1
  409862:	d2f9      	bcs.n	409858 <memcpy+0x118>
  409864:	780b      	ldrb	r3, [r1, #0]
  409866:	7003      	strb	r3, [r0, #0]
  409868:	784b      	ldrb	r3, [r1, #1]
  40986a:	7043      	strb	r3, [r0, #1]
  40986c:	788b      	ldrb	r3, [r1, #2]
  40986e:	7083      	strb	r3, [r0, #2]
  409870:	4660      	mov	r0, ip
  409872:	4770      	bx	lr

00409874 <memmove>:
  409874:	4288      	cmp	r0, r1
  409876:	b5f0      	push	{r4, r5, r6, r7, lr}
  409878:	d90d      	bls.n	409896 <memmove+0x22>
  40987a:	188b      	adds	r3, r1, r2
  40987c:	4298      	cmp	r0, r3
  40987e:	d20a      	bcs.n	409896 <memmove+0x22>
  409880:	1884      	adds	r4, r0, r2
  409882:	2a00      	cmp	r2, #0
  409884:	d051      	beq.n	40992a <memmove+0xb6>
  409886:	4622      	mov	r2, r4
  409888:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40988c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  409890:	4299      	cmp	r1, r3
  409892:	d1f9      	bne.n	409888 <memmove+0x14>
  409894:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409896:	2a0f      	cmp	r2, #15
  409898:	d948      	bls.n	40992c <memmove+0xb8>
  40989a:	ea41 0300 	orr.w	r3, r1, r0
  40989e:	079b      	lsls	r3, r3, #30
  4098a0:	d146      	bne.n	409930 <memmove+0xbc>
  4098a2:	f100 0410 	add.w	r4, r0, #16
  4098a6:	f101 0310 	add.w	r3, r1, #16
  4098aa:	4615      	mov	r5, r2
  4098ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4098b0:	f844 6c10 	str.w	r6, [r4, #-16]
  4098b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4098b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4098bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4098c0:	f844 6c08 	str.w	r6, [r4, #-8]
  4098c4:	3d10      	subs	r5, #16
  4098c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4098ca:	f844 6c04 	str.w	r6, [r4, #-4]
  4098ce:	2d0f      	cmp	r5, #15
  4098d0:	f103 0310 	add.w	r3, r3, #16
  4098d4:	f104 0410 	add.w	r4, r4, #16
  4098d8:	d8e8      	bhi.n	4098ac <memmove+0x38>
  4098da:	f1a2 0310 	sub.w	r3, r2, #16
  4098de:	f023 030f 	bic.w	r3, r3, #15
  4098e2:	f002 0e0f 	and.w	lr, r2, #15
  4098e6:	3310      	adds	r3, #16
  4098e8:	f1be 0f03 	cmp.w	lr, #3
  4098ec:	4419      	add	r1, r3
  4098ee:	4403      	add	r3, r0
  4098f0:	d921      	bls.n	409936 <memmove+0xc2>
  4098f2:	1f1e      	subs	r6, r3, #4
  4098f4:	460d      	mov	r5, r1
  4098f6:	4674      	mov	r4, lr
  4098f8:	3c04      	subs	r4, #4
  4098fa:	f855 7b04 	ldr.w	r7, [r5], #4
  4098fe:	f846 7f04 	str.w	r7, [r6, #4]!
  409902:	2c03      	cmp	r4, #3
  409904:	d8f8      	bhi.n	4098f8 <memmove+0x84>
  409906:	f1ae 0404 	sub.w	r4, lr, #4
  40990a:	f024 0403 	bic.w	r4, r4, #3
  40990e:	3404      	adds	r4, #4
  409910:	4421      	add	r1, r4
  409912:	4423      	add	r3, r4
  409914:	f002 0203 	and.w	r2, r2, #3
  409918:	b162      	cbz	r2, 409934 <memmove+0xc0>
  40991a:	3b01      	subs	r3, #1
  40991c:	440a      	add	r2, r1
  40991e:	f811 4b01 	ldrb.w	r4, [r1], #1
  409922:	f803 4f01 	strb.w	r4, [r3, #1]!
  409926:	428a      	cmp	r2, r1
  409928:	d1f9      	bne.n	40991e <memmove+0xaa>
  40992a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40992c:	4603      	mov	r3, r0
  40992e:	e7f3      	b.n	409918 <memmove+0xa4>
  409930:	4603      	mov	r3, r0
  409932:	e7f2      	b.n	40991a <memmove+0xa6>
  409934:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409936:	4672      	mov	r2, lr
  409938:	e7ee      	b.n	409918 <memmove+0xa4>
  40993a:	bf00      	nop

0040993c <__malloc_lock>:
  40993c:	4770      	bx	lr
  40993e:	bf00      	nop

00409940 <__malloc_unlock>:
  409940:	4770      	bx	lr
  409942:	bf00      	nop

00409944 <_Balloc>:
  409944:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409946:	b570      	push	{r4, r5, r6, lr}
  409948:	4605      	mov	r5, r0
  40994a:	460c      	mov	r4, r1
  40994c:	b14b      	cbz	r3, 409962 <_Balloc+0x1e>
  40994e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409952:	b180      	cbz	r0, 409976 <_Balloc+0x32>
  409954:	6802      	ldr	r2, [r0, #0]
  409956:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40995a:	2300      	movs	r3, #0
  40995c:	6103      	str	r3, [r0, #16]
  40995e:	60c3      	str	r3, [r0, #12]
  409960:	bd70      	pop	{r4, r5, r6, pc}
  409962:	2221      	movs	r2, #33	; 0x21
  409964:	2104      	movs	r1, #4
  409966:	f000 fe59 	bl	40a61c <_calloc_r>
  40996a:	64e8      	str	r0, [r5, #76]	; 0x4c
  40996c:	4603      	mov	r3, r0
  40996e:	2800      	cmp	r0, #0
  409970:	d1ed      	bne.n	40994e <_Balloc+0xa>
  409972:	2000      	movs	r0, #0
  409974:	bd70      	pop	{r4, r5, r6, pc}
  409976:	2101      	movs	r1, #1
  409978:	fa01 f604 	lsl.w	r6, r1, r4
  40997c:	1d72      	adds	r2, r6, #5
  40997e:	4628      	mov	r0, r5
  409980:	0092      	lsls	r2, r2, #2
  409982:	f000 fe4b 	bl	40a61c <_calloc_r>
  409986:	2800      	cmp	r0, #0
  409988:	d0f3      	beq.n	409972 <_Balloc+0x2e>
  40998a:	6044      	str	r4, [r0, #4]
  40998c:	6086      	str	r6, [r0, #8]
  40998e:	e7e4      	b.n	40995a <_Balloc+0x16>

00409990 <_Bfree>:
  409990:	b131      	cbz	r1, 4099a0 <_Bfree+0x10>
  409992:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409994:	684a      	ldr	r2, [r1, #4]
  409996:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40999a:	6008      	str	r0, [r1, #0]
  40999c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4099a0:	4770      	bx	lr
  4099a2:	bf00      	nop

004099a4 <__multadd>:
  4099a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4099a6:	690c      	ldr	r4, [r1, #16]
  4099a8:	b083      	sub	sp, #12
  4099aa:	460d      	mov	r5, r1
  4099ac:	4606      	mov	r6, r0
  4099ae:	f101 0e14 	add.w	lr, r1, #20
  4099b2:	2700      	movs	r7, #0
  4099b4:	f8de 0000 	ldr.w	r0, [lr]
  4099b8:	b281      	uxth	r1, r0
  4099ba:	fb02 3301 	mla	r3, r2, r1, r3
  4099be:	0c01      	lsrs	r1, r0, #16
  4099c0:	0c18      	lsrs	r0, r3, #16
  4099c2:	fb02 0101 	mla	r1, r2, r1, r0
  4099c6:	b29b      	uxth	r3, r3
  4099c8:	3701      	adds	r7, #1
  4099ca:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4099ce:	42bc      	cmp	r4, r7
  4099d0:	f84e 3b04 	str.w	r3, [lr], #4
  4099d4:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4099d8:	dcec      	bgt.n	4099b4 <__multadd+0x10>
  4099da:	b13b      	cbz	r3, 4099ec <__multadd+0x48>
  4099dc:	68aa      	ldr	r2, [r5, #8]
  4099de:	4294      	cmp	r4, r2
  4099e0:	da07      	bge.n	4099f2 <__multadd+0x4e>
  4099e2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4099e6:	3401      	adds	r4, #1
  4099e8:	6153      	str	r3, [r2, #20]
  4099ea:	612c      	str	r4, [r5, #16]
  4099ec:	4628      	mov	r0, r5
  4099ee:	b003      	add	sp, #12
  4099f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4099f2:	6869      	ldr	r1, [r5, #4]
  4099f4:	9301      	str	r3, [sp, #4]
  4099f6:	3101      	adds	r1, #1
  4099f8:	4630      	mov	r0, r6
  4099fa:	f7ff ffa3 	bl	409944 <_Balloc>
  4099fe:	692a      	ldr	r2, [r5, #16]
  409a00:	3202      	adds	r2, #2
  409a02:	f105 010c 	add.w	r1, r5, #12
  409a06:	4607      	mov	r7, r0
  409a08:	0092      	lsls	r2, r2, #2
  409a0a:	300c      	adds	r0, #12
  409a0c:	f7ff fe98 	bl	409740 <memcpy>
  409a10:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409a12:	6869      	ldr	r1, [r5, #4]
  409a14:	9b01      	ldr	r3, [sp, #4]
  409a16:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  409a1a:	6028      	str	r0, [r5, #0]
  409a1c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409a20:	463d      	mov	r5, r7
  409a22:	e7de      	b.n	4099e2 <__multadd+0x3e>

00409a24 <__hi0bits>:
  409a24:	0c02      	lsrs	r2, r0, #16
  409a26:	0412      	lsls	r2, r2, #16
  409a28:	4603      	mov	r3, r0
  409a2a:	b9b2      	cbnz	r2, 409a5a <__hi0bits+0x36>
  409a2c:	0403      	lsls	r3, r0, #16
  409a2e:	2010      	movs	r0, #16
  409a30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409a34:	bf04      	itt	eq
  409a36:	021b      	lsleq	r3, r3, #8
  409a38:	3008      	addeq	r0, #8
  409a3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409a3e:	bf04      	itt	eq
  409a40:	011b      	lsleq	r3, r3, #4
  409a42:	3004      	addeq	r0, #4
  409a44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  409a48:	bf04      	itt	eq
  409a4a:	009b      	lsleq	r3, r3, #2
  409a4c:	3002      	addeq	r0, #2
  409a4e:	2b00      	cmp	r3, #0
  409a50:	db02      	blt.n	409a58 <__hi0bits+0x34>
  409a52:	005b      	lsls	r3, r3, #1
  409a54:	d403      	bmi.n	409a5e <__hi0bits+0x3a>
  409a56:	2020      	movs	r0, #32
  409a58:	4770      	bx	lr
  409a5a:	2000      	movs	r0, #0
  409a5c:	e7e8      	b.n	409a30 <__hi0bits+0xc>
  409a5e:	3001      	adds	r0, #1
  409a60:	4770      	bx	lr
  409a62:	bf00      	nop

00409a64 <__lo0bits>:
  409a64:	6803      	ldr	r3, [r0, #0]
  409a66:	f013 0207 	ands.w	r2, r3, #7
  409a6a:	4601      	mov	r1, r0
  409a6c:	d007      	beq.n	409a7e <__lo0bits+0x1a>
  409a6e:	07da      	lsls	r2, r3, #31
  409a70:	d421      	bmi.n	409ab6 <__lo0bits+0x52>
  409a72:	0798      	lsls	r0, r3, #30
  409a74:	d421      	bmi.n	409aba <__lo0bits+0x56>
  409a76:	089b      	lsrs	r3, r3, #2
  409a78:	600b      	str	r3, [r1, #0]
  409a7a:	2002      	movs	r0, #2
  409a7c:	4770      	bx	lr
  409a7e:	b298      	uxth	r0, r3
  409a80:	b198      	cbz	r0, 409aaa <__lo0bits+0x46>
  409a82:	4610      	mov	r0, r2
  409a84:	f013 0fff 	tst.w	r3, #255	; 0xff
  409a88:	bf04      	itt	eq
  409a8a:	0a1b      	lsreq	r3, r3, #8
  409a8c:	3008      	addeq	r0, #8
  409a8e:	071a      	lsls	r2, r3, #28
  409a90:	bf04      	itt	eq
  409a92:	091b      	lsreq	r3, r3, #4
  409a94:	3004      	addeq	r0, #4
  409a96:	079a      	lsls	r2, r3, #30
  409a98:	bf04      	itt	eq
  409a9a:	089b      	lsreq	r3, r3, #2
  409a9c:	3002      	addeq	r0, #2
  409a9e:	07da      	lsls	r2, r3, #31
  409aa0:	d407      	bmi.n	409ab2 <__lo0bits+0x4e>
  409aa2:	085b      	lsrs	r3, r3, #1
  409aa4:	d104      	bne.n	409ab0 <__lo0bits+0x4c>
  409aa6:	2020      	movs	r0, #32
  409aa8:	4770      	bx	lr
  409aaa:	0c1b      	lsrs	r3, r3, #16
  409aac:	2010      	movs	r0, #16
  409aae:	e7e9      	b.n	409a84 <__lo0bits+0x20>
  409ab0:	3001      	adds	r0, #1
  409ab2:	600b      	str	r3, [r1, #0]
  409ab4:	4770      	bx	lr
  409ab6:	2000      	movs	r0, #0
  409ab8:	4770      	bx	lr
  409aba:	085b      	lsrs	r3, r3, #1
  409abc:	600b      	str	r3, [r1, #0]
  409abe:	2001      	movs	r0, #1
  409ac0:	4770      	bx	lr
  409ac2:	bf00      	nop

00409ac4 <__i2b>:
  409ac4:	b510      	push	{r4, lr}
  409ac6:	460c      	mov	r4, r1
  409ac8:	2101      	movs	r1, #1
  409aca:	f7ff ff3b 	bl	409944 <_Balloc>
  409ace:	2201      	movs	r2, #1
  409ad0:	6144      	str	r4, [r0, #20]
  409ad2:	6102      	str	r2, [r0, #16]
  409ad4:	bd10      	pop	{r4, pc}
  409ad6:	bf00      	nop

00409ad8 <__multiply>:
  409ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409adc:	690c      	ldr	r4, [r1, #16]
  409ade:	6915      	ldr	r5, [r2, #16]
  409ae0:	42ac      	cmp	r4, r5
  409ae2:	b083      	sub	sp, #12
  409ae4:	468b      	mov	fp, r1
  409ae6:	4616      	mov	r6, r2
  409ae8:	da04      	bge.n	409af4 <__multiply+0x1c>
  409aea:	4622      	mov	r2, r4
  409aec:	46b3      	mov	fp, r6
  409aee:	462c      	mov	r4, r5
  409af0:	460e      	mov	r6, r1
  409af2:	4615      	mov	r5, r2
  409af4:	f8db 3008 	ldr.w	r3, [fp, #8]
  409af8:	f8db 1004 	ldr.w	r1, [fp, #4]
  409afc:	eb04 0805 	add.w	r8, r4, r5
  409b00:	4598      	cmp	r8, r3
  409b02:	bfc8      	it	gt
  409b04:	3101      	addgt	r1, #1
  409b06:	f7ff ff1d 	bl	409944 <_Balloc>
  409b0a:	f100 0914 	add.w	r9, r0, #20
  409b0e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409b12:	45d1      	cmp	r9, sl
  409b14:	9000      	str	r0, [sp, #0]
  409b16:	d205      	bcs.n	409b24 <__multiply+0x4c>
  409b18:	464b      	mov	r3, r9
  409b1a:	2100      	movs	r1, #0
  409b1c:	f843 1b04 	str.w	r1, [r3], #4
  409b20:	459a      	cmp	sl, r3
  409b22:	d8fb      	bhi.n	409b1c <__multiply+0x44>
  409b24:	f106 0c14 	add.w	ip, r6, #20
  409b28:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409b2c:	f10b 0b14 	add.w	fp, fp, #20
  409b30:	459c      	cmp	ip, r3
  409b32:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  409b36:	d24c      	bcs.n	409bd2 <__multiply+0xfa>
  409b38:	f8cd a004 	str.w	sl, [sp, #4]
  409b3c:	469a      	mov	sl, r3
  409b3e:	f8dc 5000 	ldr.w	r5, [ip]
  409b42:	b2af      	uxth	r7, r5
  409b44:	b1ef      	cbz	r7, 409b82 <__multiply+0xaa>
  409b46:	2100      	movs	r1, #0
  409b48:	464d      	mov	r5, r9
  409b4a:	465e      	mov	r6, fp
  409b4c:	460c      	mov	r4, r1
  409b4e:	f856 2b04 	ldr.w	r2, [r6], #4
  409b52:	6828      	ldr	r0, [r5, #0]
  409b54:	b293      	uxth	r3, r2
  409b56:	b281      	uxth	r1, r0
  409b58:	fb07 1303 	mla	r3, r7, r3, r1
  409b5c:	0c12      	lsrs	r2, r2, #16
  409b5e:	0c01      	lsrs	r1, r0, #16
  409b60:	4423      	add	r3, r4
  409b62:	fb07 1102 	mla	r1, r7, r2, r1
  409b66:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  409b6a:	b29b      	uxth	r3, r3
  409b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  409b70:	45b6      	cmp	lr, r6
  409b72:	f845 3b04 	str.w	r3, [r5], #4
  409b76:	ea4f 4411 	mov.w	r4, r1, lsr #16
  409b7a:	d8e8      	bhi.n	409b4e <__multiply+0x76>
  409b7c:	602c      	str	r4, [r5, #0]
  409b7e:	f8dc 5000 	ldr.w	r5, [ip]
  409b82:	0c2d      	lsrs	r5, r5, #16
  409b84:	d01d      	beq.n	409bc2 <__multiply+0xea>
  409b86:	f8d9 3000 	ldr.w	r3, [r9]
  409b8a:	4648      	mov	r0, r9
  409b8c:	461c      	mov	r4, r3
  409b8e:	4659      	mov	r1, fp
  409b90:	2200      	movs	r2, #0
  409b92:	880e      	ldrh	r6, [r1, #0]
  409b94:	0c24      	lsrs	r4, r4, #16
  409b96:	fb05 4406 	mla	r4, r5, r6, r4
  409b9a:	4422      	add	r2, r4
  409b9c:	b29b      	uxth	r3, r3
  409b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  409ba2:	f840 3b04 	str.w	r3, [r0], #4
  409ba6:	f851 3b04 	ldr.w	r3, [r1], #4
  409baa:	6804      	ldr	r4, [r0, #0]
  409bac:	0c1b      	lsrs	r3, r3, #16
  409bae:	b2a6      	uxth	r6, r4
  409bb0:	fb05 6303 	mla	r3, r5, r3, r6
  409bb4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  409bb8:	458e      	cmp	lr, r1
  409bba:	ea4f 4213 	mov.w	r2, r3, lsr #16
  409bbe:	d8e8      	bhi.n	409b92 <__multiply+0xba>
  409bc0:	6003      	str	r3, [r0, #0]
  409bc2:	f10c 0c04 	add.w	ip, ip, #4
  409bc6:	45e2      	cmp	sl, ip
  409bc8:	f109 0904 	add.w	r9, r9, #4
  409bcc:	d8b7      	bhi.n	409b3e <__multiply+0x66>
  409bce:	f8dd a004 	ldr.w	sl, [sp, #4]
  409bd2:	f1b8 0f00 	cmp.w	r8, #0
  409bd6:	dd0b      	ble.n	409bf0 <__multiply+0x118>
  409bd8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409bdc:	f1aa 0a04 	sub.w	sl, sl, #4
  409be0:	b11b      	cbz	r3, 409bea <__multiply+0x112>
  409be2:	e005      	b.n	409bf0 <__multiply+0x118>
  409be4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  409be8:	b913      	cbnz	r3, 409bf0 <__multiply+0x118>
  409bea:	f1b8 0801 	subs.w	r8, r8, #1
  409bee:	d1f9      	bne.n	409be4 <__multiply+0x10c>
  409bf0:	9800      	ldr	r0, [sp, #0]
  409bf2:	f8c0 8010 	str.w	r8, [r0, #16]
  409bf6:	b003      	add	sp, #12
  409bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409bfc <__pow5mult>:
  409bfc:	f012 0303 	ands.w	r3, r2, #3
  409c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409c04:	4614      	mov	r4, r2
  409c06:	4607      	mov	r7, r0
  409c08:	d12e      	bne.n	409c68 <__pow5mult+0x6c>
  409c0a:	460d      	mov	r5, r1
  409c0c:	10a4      	asrs	r4, r4, #2
  409c0e:	d01c      	beq.n	409c4a <__pow5mult+0x4e>
  409c10:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409c12:	b396      	cbz	r6, 409c7a <__pow5mult+0x7e>
  409c14:	07e3      	lsls	r3, r4, #31
  409c16:	f04f 0800 	mov.w	r8, #0
  409c1a:	d406      	bmi.n	409c2a <__pow5mult+0x2e>
  409c1c:	1064      	asrs	r4, r4, #1
  409c1e:	d014      	beq.n	409c4a <__pow5mult+0x4e>
  409c20:	6830      	ldr	r0, [r6, #0]
  409c22:	b1a8      	cbz	r0, 409c50 <__pow5mult+0x54>
  409c24:	4606      	mov	r6, r0
  409c26:	07e3      	lsls	r3, r4, #31
  409c28:	d5f8      	bpl.n	409c1c <__pow5mult+0x20>
  409c2a:	4632      	mov	r2, r6
  409c2c:	4629      	mov	r1, r5
  409c2e:	4638      	mov	r0, r7
  409c30:	f7ff ff52 	bl	409ad8 <__multiply>
  409c34:	b1b5      	cbz	r5, 409c64 <__pow5mult+0x68>
  409c36:	686a      	ldr	r2, [r5, #4]
  409c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409c3a:	1064      	asrs	r4, r4, #1
  409c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409c40:	6029      	str	r1, [r5, #0]
  409c42:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  409c46:	4605      	mov	r5, r0
  409c48:	d1ea      	bne.n	409c20 <__pow5mult+0x24>
  409c4a:	4628      	mov	r0, r5
  409c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409c50:	4632      	mov	r2, r6
  409c52:	4631      	mov	r1, r6
  409c54:	4638      	mov	r0, r7
  409c56:	f7ff ff3f 	bl	409ad8 <__multiply>
  409c5a:	6030      	str	r0, [r6, #0]
  409c5c:	f8c0 8000 	str.w	r8, [r0]
  409c60:	4606      	mov	r6, r0
  409c62:	e7e0      	b.n	409c26 <__pow5mult+0x2a>
  409c64:	4605      	mov	r5, r0
  409c66:	e7d9      	b.n	409c1c <__pow5mult+0x20>
  409c68:	1e5a      	subs	r2, r3, #1
  409c6a:	4d0b      	ldr	r5, [pc, #44]	; (409c98 <__pow5mult+0x9c>)
  409c6c:	2300      	movs	r3, #0
  409c6e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409c72:	f7ff fe97 	bl	4099a4 <__multadd>
  409c76:	4605      	mov	r5, r0
  409c78:	e7c8      	b.n	409c0c <__pow5mult+0x10>
  409c7a:	2101      	movs	r1, #1
  409c7c:	4638      	mov	r0, r7
  409c7e:	f7ff fe61 	bl	409944 <_Balloc>
  409c82:	f240 2171 	movw	r1, #625	; 0x271
  409c86:	2201      	movs	r2, #1
  409c88:	2300      	movs	r3, #0
  409c8a:	6141      	str	r1, [r0, #20]
  409c8c:	6102      	str	r2, [r0, #16]
  409c8e:	4606      	mov	r6, r0
  409c90:	64b8      	str	r0, [r7, #72]	; 0x48
  409c92:	6003      	str	r3, [r0, #0]
  409c94:	e7be      	b.n	409c14 <__pow5mult+0x18>
  409c96:	bf00      	nop
  409c98:	0040c5b0 	.word	0x0040c5b0

00409c9c <__lshift>:
  409c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409ca0:	4691      	mov	r9, r2
  409ca2:	690a      	ldr	r2, [r1, #16]
  409ca4:	688b      	ldr	r3, [r1, #8]
  409ca6:	ea4f 1469 	mov.w	r4, r9, asr #5
  409caa:	eb04 0802 	add.w	r8, r4, r2
  409cae:	f108 0501 	add.w	r5, r8, #1
  409cb2:	429d      	cmp	r5, r3
  409cb4:	460e      	mov	r6, r1
  409cb6:	4607      	mov	r7, r0
  409cb8:	6849      	ldr	r1, [r1, #4]
  409cba:	dd04      	ble.n	409cc6 <__lshift+0x2a>
  409cbc:	005b      	lsls	r3, r3, #1
  409cbe:	429d      	cmp	r5, r3
  409cc0:	f101 0101 	add.w	r1, r1, #1
  409cc4:	dcfa      	bgt.n	409cbc <__lshift+0x20>
  409cc6:	4638      	mov	r0, r7
  409cc8:	f7ff fe3c 	bl	409944 <_Balloc>
  409ccc:	2c00      	cmp	r4, #0
  409cce:	f100 0314 	add.w	r3, r0, #20
  409cd2:	dd06      	ble.n	409ce2 <__lshift+0x46>
  409cd4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  409cd8:	2100      	movs	r1, #0
  409cda:	f843 1b04 	str.w	r1, [r3], #4
  409cde:	429a      	cmp	r2, r3
  409ce0:	d1fb      	bne.n	409cda <__lshift+0x3e>
  409ce2:	6934      	ldr	r4, [r6, #16]
  409ce4:	f106 0114 	add.w	r1, r6, #20
  409ce8:	f019 091f 	ands.w	r9, r9, #31
  409cec:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  409cf0:	d01d      	beq.n	409d2e <__lshift+0x92>
  409cf2:	f1c9 0c20 	rsb	ip, r9, #32
  409cf6:	2200      	movs	r2, #0
  409cf8:	680c      	ldr	r4, [r1, #0]
  409cfa:	fa04 f409 	lsl.w	r4, r4, r9
  409cfe:	4314      	orrs	r4, r2
  409d00:	f843 4b04 	str.w	r4, [r3], #4
  409d04:	f851 2b04 	ldr.w	r2, [r1], #4
  409d08:	458e      	cmp	lr, r1
  409d0a:	fa22 f20c 	lsr.w	r2, r2, ip
  409d0e:	d8f3      	bhi.n	409cf8 <__lshift+0x5c>
  409d10:	601a      	str	r2, [r3, #0]
  409d12:	b10a      	cbz	r2, 409d18 <__lshift+0x7c>
  409d14:	f108 0502 	add.w	r5, r8, #2
  409d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409d1a:	6872      	ldr	r2, [r6, #4]
  409d1c:	3d01      	subs	r5, #1
  409d1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409d22:	6105      	str	r5, [r0, #16]
  409d24:	6031      	str	r1, [r6, #0]
  409d26:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  409d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409d2e:	3b04      	subs	r3, #4
  409d30:	f851 2b04 	ldr.w	r2, [r1], #4
  409d34:	f843 2f04 	str.w	r2, [r3, #4]!
  409d38:	458e      	cmp	lr, r1
  409d3a:	d8f9      	bhi.n	409d30 <__lshift+0x94>
  409d3c:	e7ec      	b.n	409d18 <__lshift+0x7c>
  409d3e:	bf00      	nop

00409d40 <__mcmp>:
  409d40:	b430      	push	{r4, r5}
  409d42:	690b      	ldr	r3, [r1, #16]
  409d44:	4605      	mov	r5, r0
  409d46:	6900      	ldr	r0, [r0, #16]
  409d48:	1ac0      	subs	r0, r0, r3
  409d4a:	d10f      	bne.n	409d6c <__mcmp+0x2c>
  409d4c:	009b      	lsls	r3, r3, #2
  409d4e:	3514      	adds	r5, #20
  409d50:	3114      	adds	r1, #20
  409d52:	4419      	add	r1, r3
  409d54:	442b      	add	r3, r5
  409d56:	e001      	b.n	409d5c <__mcmp+0x1c>
  409d58:	429d      	cmp	r5, r3
  409d5a:	d207      	bcs.n	409d6c <__mcmp+0x2c>
  409d5c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409d60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409d64:	4294      	cmp	r4, r2
  409d66:	d0f7      	beq.n	409d58 <__mcmp+0x18>
  409d68:	d302      	bcc.n	409d70 <__mcmp+0x30>
  409d6a:	2001      	movs	r0, #1
  409d6c:	bc30      	pop	{r4, r5}
  409d6e:	4770      	bx	lr
  409d70:	f04f 30ff 	mov.w	r0, #4294967295
  409d74:	e7fa      	b.n	409d6c <__mcmp+0x2c>
  409d76:	bf00      	nop

00409d78 <__mdiff>:
  409d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409d7c:	690f      	ldr	r7, [r1, #16]
  409d7e:	460e      	mov	r6, r1
  409d80:	6911      	ldr	r1, [r2, #16]
  409d82:	1a7f      	subs	r7, r7, r1
  409d84:	2f00      	cmp	r7, #0
  409d86:	4690      	mov	r8, r2
  409d88:	d117      	bne.n	409dba <__mdiff+0x42>
  409d8a:	0089      	lsls	r1, r1, #2
  409d8c:	f106 0514 	add.w	r5, r6, #20
  409d90:	f102 0e14 	add.w	lr, r2, #20
  409d94:	186b      	adds	r3, r5, r1
  409d96:	4471      	add	r1, lr
  409d98:	e001      	b.n	409d9e <__mdiff+0x26>
  409d9a:	429d      	cmp	r5, r3
  409d9c:	d25c      	bcs.n	409e58 <__mdiff+0xe0>
  409d9e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409da2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409da6:	42a2      	cmp	r2, r4
  409da8:	d0f7      	beq.n	409d9a <__mdiff+0x22>
  409daa:	d25e      	bcs.n	409e6a <__mdiff+0xf2>
  409dac:	4633      	mov	r3, r6
  409dae:	462c      	mov	r4, r5
  409db0:	4646      	mov	r6, r8
  409db2:	4675      	mov	r5, lr
  409db4:	4698      	mov	r8, r3
  409db6:	2701      	movs	r7, #1
  409db8:	e005      	b.n	409dc6 <__mdiff+0x4e>
  409dba:	db58      	blt.n	409e6e <__mdiff+0xf6>
  409dbc:	f106 0514 	add.w	r5, r6, #20
  409dc0:	f108 0414 	add.w	r4, r8, #20
  409dc4:	2700      	movs	r7, #0
  409dc6:	6871      	ldr	r1, [r6, #4]
  409dc8:	f7ff fdbc 	bl	409944 <_Balloc>
  409dcc:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409dd0:	6936      	ldr	r6, [r6, #16]
  409dd2:	60c7      	str	r7, [r0, #12]
  409dd4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  409dd8:	46a6      	mov	lr, r4
  409dda:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409dde:	f100 0414 	add.w	r4, r0, #20
  409de2:	2300      	movs	r3, #0
  409de4:	f85e 1b04 	ldr.w	r1, [lr], #4
  409de8:	f855 8b04 	ldr.w	r8, [r5], #4
  409dec:	b28a      	uxth	r2, r1
  409dee:	fa13 f388 	uxtah	r3, r3, r8
  409df2:	0c09      	lsrs	r1, r1, #16
  409df4:	1a9a      	subs	r2, r3, r2
  409df6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  409dfa:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409dfe:	b292      	uxth	r2, r2
  409e00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409e04:	45f4      	cmp	ip, lr
  409e06:	f844 2b04 	str.w	r2, [r4], #4
  409e0a:	ea4f 4323 	mov.w	r3, r3, asr #16
  409e0e:	d8e9      	bhi.n	409de4 <__mdiff+0x6c>
  409e10:	42af      	cmp	r7, r5
  409e12:	d917      	bls.n	409e44 <__mdiff+0xcc>
  409e14:	46a4      	mov	ip, r4
  409e16:	46ae      	mov	lr, r5
  409e18:	f85e 2b04 	ldr.w	r2, [lr], #4
  409e1c:	fa13 f382 	uxtah	r3, r3, r2
  409e20:	1419      	asrs	r1, r3, #16
  409e22:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409e26:	b29b      	uxth	r3, r3
  409e28:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409e2c:	4577      	cmp	r7, lr
  409e2e:	f84c 2b04 	str.w	r2, [ip], #4
  409e32:	ea4f 4321 	mov.w	r3, r1, asr #16
  409e36:	d8ef      	bhi.n	409e18 <__mdiff+0xa0>
  409e38:	43ed      	mvns	r5, r5
  409e3a:	442f      	add	r7, r5
  409e3c:	f027 0703 	bic.w	r7, r7, #3
  409e40:	3704      	adds	r7, #4
  409e42:	443c      	add	r4, r7
  409e44:	3c04      	subs	r4, #4
  409e46:	b922      	cbnz	r2, 409e52 <__mdiff+0xda>
  409e48:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409e4c:	3e01      	subs	r6, #1
  409e4e:	2b00      	cmp	r3, #0
  409e50:	d0fa      	beq.n	409e48 <__mdiff+0xd0>
  409e52:	6106      	str	r6, [r0, #16]
  409e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e58:	2100      	movs	r1, #0
  409e5a:	f7ff fd73 	bl	409944 <_Balloc>
  409e5e:	2201      	movs	r2, #1
  409e60:	2300      	movs	r3, #0
  409e62:	6102      	str	r2, [r0, #16]
  409e64:	6143      	str	r3, [r0, #20]
  409e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e6a:	4674      	mov	r4, lr
  409e6c:	e7ab      	b.n	409dc6 <__mdiff+0x4e>
  409e6e:	4633      	mov	r3, r6
  409e70:	f106 0414 	add.w	r4, r6, #20
  409e74:	f102 0514 	add.w	r5, r2, #20
  409e78:	4616      	mov	r6, r2
  409e7a:	2701      	movs	r7, #1
  409e7c:	4698      	mov	r8, r3
  409e7e:	e7a2      	b.n	409dc6 <__mdiff+0x4e>

00409e80 <__d2b>:
  409e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409e84:	b082      	sub	sp, #8
  409e86:	2101      	movs	r1, #1
  409e88:	461c      	mov	r4, r3
  409e8a:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409e8e:	4615      	mov	r5, r2
  409e90:	9e08      	ldr	r6, [sp, #32]
  409e92:	f7ff fd57 	bl	409944 <_Balloc>
  409e96:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409e9a:	4680      	mov	r8, r0
  409e9c:	b10f      	cbz	r7, 409ea2 <__d2b+0x22>
  409e9e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409ea2:	9401      	str	r4, [sp, #4]
  409ea4:	b31d      	cbz	r5, 409eee <__d2b+0x6e>
  409ea6:	a802      	add	r0, sp, #8
  409ea8:	f840 5d08 	str.w	r5, [r0, #-8]!
  409eac:	f7ff fdda 	bl	409a64 <__lo0bits>
  409eb0:	2800      	cmp	r0, #0
  409eb2:	d134      	bne.n	409f1e <__d2b+0x9e>
  409eb4:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409eb8:	f8c8 2014 	str.w	r2, [r8, #20]
  409ebc:	2b00      	cmp	r3, #0
  409ebe:	bf0c      	ite	eq
  409ec0:	2101      	moveq	r1, #1
  409ec2:	2102      	movne	r1, #2
  409ec4:	f8c8 3018 	str.w	r3, [r8, #24]
  409ec8:	f8c8 1010 	str.w	r1, [r8, #16]
  409ecc:	b9df      	cbnz	r7, 409f06 <__d2b+0x86>
  409ece:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409ed2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409ed6:	6030      	str	r0, [r6, #0]
  409ed8:	6918      	ldr	r0, [r3, #16]
  409eda:	f7ff fda3 	bl	409a24 <__hi0bits>
  409ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409ee0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409ee4:	6018      	str	r0, [r3, #0]
  409ee6:	4640      	mov	r0, r8
  409ee8:	b002      	add	sp, #8
  409eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409eee:	a801      	add	r0, sp, #4
  409ef0:	f7ff fdb8 	bl	409a64 <__lo0bits>
  409ef4:	9b01      	ldr	r3, [sp, #4]
  409ef6:	f8c8 3014 	str.w	r3, [r8, #20]
  409efa:	2101      	movs	r1, #1
  409efc:	3020      	adds	r0, #32
  409efe:	f8c8 1010 	str.w	r1, [r8, #16]
  409f02:	2f00      	cmp	r7, #0
  409f04:	d0e3      	beq.n	409ece <__d2b+0x4e>
  409f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409f08:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409f0c:	4407      	add	r7, r0
  409f0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409f12:	6037      	str	r7, [r6, #0]
  409f14:	6018      	str	r0, [r3, #0]
  409f16:	4640      	mov	r0, r8
  409f18:	b002      	add	sp, #8
  409f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f1e:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409f22:	f1c0 0220 	rsb	r2, r0, #32
  409f26:	fa03 f202 	lsl.w	r2, r3, r2
  409f2a:	430a      	orrs	r2, r1
  409f2c:	40c3      	lsrs	r3, r0
  409f2e:	9301      	str	r3, [sp, #4]
  409f30:	f8c8 2014 	str.w	r2, [r8, #20]
  409f34:	e7c2      	b.n	409ebc <__d2b+0x3c>
  409f36:	bf00      	nop

00409f38 <_realloc_r>:
  409f38:	2900      	cmp	r1, #0
  409f3a:	f000 8095 	beq.w	40a068 <_realloc_r+0x130>
  409f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f42:	460d      	mov	r5, r1
  409f44:	4616      	mov	r6, r2
  409f46:	b083      	sub	sp, #12
  409f48:	4680      	mov	r8, r0
  409f4a:	f106 070b 	add.w	r7, r6, #11
  409f4e:	f7ff fcf5 	bl	40993c <__malloc_lock>
  409f52:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409f56:	2f16      	cmp	r7, #22
  409f58:	f02e 0403 	bic.w	r4, lr, #3
  409f5c:	f1a5 0908 	sub.w	r9, r5, #8
  409f60:	d83c      	bhi.n	409fdc <_realloc_r+0xa4>
  409f62:	2210      	movs	r2, #16
  409f64:	4617      	mov	r7, r2
  409f66:	42be      	cmp	r6, r7
  409f68:	d83d      	bhi.n	409fe6 <_realloc_r+0xae>
  409f6a:	4294      	cmp	r4, r2
  409f6c:	da43      	bge.n	409ff6 <_realloc_r+0xbe>
  409f6e:	4bc4      	ldr	r3, [pc, #784]	; (40a280 <_realloc_r+0x348>)
  409f70:	6899      	ldr	r1, [r3, #8]
  409f72:	eb09 0004 	add.w	r0, r9, r4
  409f76:	4288      	cmp	r0, r1
  409f78:	f000 80b4 	beq.w	40a0e4 <_realloc_r+0x1ac>
  409f7c:	6843      	ldr	r3, [r0, #4]
  409f7e:	f023 0101 	bic.w	r1, r3, #1
  409f82:	4401      	add	r1, r0
  409f84:	6849      	ldr	r1, [r1, #4]
  409f86:	07c9      	lsls	r1, r1, #31
  409f88:	d54c      	bpl.n	40a024 <_realloc_r+0xec>
  409f8a:	f01e 0f01 	tst.w	lr, #1
  409f8e:	f000 809b 	beq.w	40a0c8 <_realloc_r+0x190>
  409f92:	4631      	mov	r1, r6
  409f94:	4640      	mov	r0, r8
  409f96:	f7ff f8b9 	bl	40910c <_malloc_r>
  409f9a:	4606      	mov	r6, r0
  409f9c:	2800      	cmp	r0, #0
  409f9e:	d03a      	beq.n	40a016 <_realloc_r+0xde>
  409fa0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409fa4:	f023 0301 	bic.w	r3, r3, #1
  409fa8:	444b      	add	r3, r9
  409faa:	f1a0 0208 	sub.w	r2, r0, #8
  409fae:	429a      	cmp	r2, r3
  409fb0:	f000 8121 	beq.w	40a1f6 <_realloc_r+0x2be>
  409fb4:	1f22      	subs	r2, r4, #4
  409fb6:	2a24      	cmp	r2, #36	; 0x24
  409fb8:	f200 8107 	bhi.w	40a1ca <_realloc_r+0x292>
  409fbc:	2a13      	cmp	r2, #19
  409fbe:	f200 80db 	bhi.w	40a178 <_realloc_r+0x240>
  409fc2:	4603      	mov	r3, r0
  409fc4:	462a      	mov	r2, r5
  409fc6:	6811      	ldr	r1, [r2, #0]
  409fc8:	6019      	str	r1, [r3, #0]
  409fca:	6851      	ldr	r1, [r2, #4]
  409fcc:	6059      	str	r1, [r3, #4]
  409fce:	6892      	ldr	r2, [r2, #8]
  409fd0:	609a      	str	r2, [r3, #8]
  409fd2:	4629      	mov	r1, r5
  409fd4:	4640      	mov	r0, r8
  409fd6:	f7fe fd7b 	bl	408ad0 <_free_r>
  409fda:	e01c      	b.n	40a016 <_realloc_r+0xde>
  409fdc:	f027 0707 	bic.w	r7, r7, #7
  409fe0:	2f00      	cmp	r7, #0
  409fe2:	463a      	mov	r2, r7
  409fe4:	dabf      	bge.n	409f66 <_realloc_r+0x2e>
  409fe6:	2600      	movs	r6, #0
  409fe8:	230c      	movs	r3, #12
  409fea:	4630      	mov	r0, r6
  409fec:	f8c8 3000 	str.w	r3, [r8]
  409ff0:	b003      	add	sp, #12
  409ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ff6:	462e      	mov	r6, r5
  409ff8:	1be3      	subs	r3, r4, r7
  409ffa:	2b0f      	cmp	r3, #15
  409ffc:	d81e      	bhi.n	40a03c <_realloc_r+0x104>
  409ffe:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40a002:	f003 0301 	and.w	r3, r3, #1
  40a006:	4323      	orrs	r3, r4
  40a008:	444c      	add	r4, r9
  40a00a:	f8c9 3004 	str.w	r3, [r9, #4]
  40a00e:	6863      	ldr	r3, [r4, #4]
  40a010:	f043 0301 	orr.w	r3, r3, #1
  40a014:	6063      	str	r3, [r4, #4]
  40a016:	4640      	mov	r0, r8
  40a018:	f7ff fc92 	bl	409940 <__malloc_unlock>
  40a01c:	4630      	mov	r0, r6
  40a01e:	b003      	add	sp, #12
  40a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a024:	f023 0303 	bic.w	r3, r3, #3
  40a028:	18e1      	adds	r1, r4, r3
  40a02a:	4291      	cmp	r1, r2
  40a02c:	db1f      	blt.n	40a06e <_realloc_r+0x136>
  40a02e:	68c3      	ldr	r3, [r0, #12]
  40a030:	6882      	ldr	r2, [r0, #8]
  40a032:	462e      	mov	r6, r5
  40a034:	60d3      	str	r3, [r2, #12]
  40a036:	460c      	mov	r4, r1
  40a038:	609a      	str	r2, [r3, #8]
  40a03a:	e7dd      	b.n	409ff8 <_realloc_r+0xc0>
  40a03c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40a040:	eb09 0107 	add.w	r1, r9, r7
  40a044:	f002 0201 	and.w	r2, r2, #1
  40a048:	444c      	add	r4, r9
  40a04a:	f043 0301 	orr.w	r3, r3, #1
  40a04e:	4317      	orrs	r7, r2
  40a050:	f8c9 7004 	str.w	r7, [r9, #4]
  40a054:	604b      	str	r3, [r1, #4]
  40a056:	6863      	ldr	r3, [r4, #4]
  40a058:	f043 0301 	orr.w	r3, r3, #1
  40a05c:	3108      	adds	r1, #8
  40a05e:	6063      	str	r3, [r4, #4]
  40a060:	4640      	mov	r0, r8
  40a062:	f7fe fd35 	bl	408ad0 <_free_r>
  40a066:	e7d6      	b.n	40a016 <_realloc_r+0xde>
  40a068:	4611      	mov	r1, r2
  40a06a:	f7ff b84f 	b.w	40910c <_malloc_r>
  40a06e:	f01e 0f01 	tst.w	lr, #1
  40a072:	d18e      	bne.n	409f92 <_realloc_r+0x5a>
  40a074:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a078:	eba9 0a01 	sub.w	sl, r9, r1
  40a07c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a080:	f021 0103 	bic.w	r1, r1, #3
  40a084:	440b      	add	r3, r1
  40a086:	4423      	add	r3, r4
  40a088:	4293      	cmp	r3, r2
  40a08a:	db25      	blt.n	40a0d8 <_realloc_r+0x1a0>
  40a08c:	68c2      	ldr	r2, [r0, #12]
  40a08e:	6881      	ldr	r1, [r0, #8]
  40a090:	4656      	mov	r6, sl
  40a092:	60ca      	str	r2, [r1, #12]
  40a094:	6091      	str	r1, [r2, #8]
  40a096:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a09a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a09e:	1f22      	subs	r2, r4, #4
  40a0a0:	2a24      	cmp	r2, #36	; 0x24
  40a0a2:	60c1      	str	r1, [r0, #12]
  40a0a4:	6088      	str	r0, [r1, #8]
  40a0a6:	f200 8094 	bhi.w	40a1d2 <_realloc_r+0x29a>
  40a0aa:	2a13      	cmp	r2, #19
  40a0ac:	d96f      	bls.n	40a18e <_realloc_r+0x256>
  40a0ae:	6829      	ldr	r1, [r5, #0]
  40a0b0:	f8ca 1008 	str.w	r1, [sl, #8]
  40a0b4:	6869      	ldr	r1, [r5, #4]
  40a0b6:	f8ca 100c 	str.w	r1, [sl, #12]
  40a0ba:	2a1b      	cmp	r2, #27
  40a0bc:	f200 80a2 	bhi.w	40a204 <_realloc_r+0x2cc>
  40a0c0:	3508      	adds	r5, #8
  40a0c2:	f10a 0210 	add.w	r2, sl, #16
  40a0c6:	e063      	b.n	40a190 <_realloc_r+0x258>
  40a0c8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40a0cc:	eba9 0a03 	sub.w	sl, r9, r3
  40a0d0:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a0d4:	f021 0103 	bic.w	r1, r1, #3
  40a0d8:	1863      	adds	r3, r4, r1
  40a0da:	4293      	cmp	r3, r2
  40a0dc:	f6ff af59 	blt.w	409f92 <_realloc_r+0x5a>
  40a0e0:	4656      	mov	r6, sl
  40a0e2:	e7d8      	b.n	40a096 <_realloc_r+0x15e>
  40a0e4:	6841      	ldr	r1, [r0, #4]
  40a0e6:	f021 0b03 	bic.w	fp, r1, #3
  40a0ea:	44a3      	add	fp, r4
  40a0ec:	f107 0010 	add.w	r0, r7, #16
  40a0f0:	4583      	cmp	fp, r0
  40a0f2:	da56      	bge.n	40a1a2 <_realloc_r+0x26a>
  40a0f4:	f01e 0f01 	tst.w	lr, #1
  40a0f8:	f47f af4b 	bne.w	409f92 <_realloc_r+0x5a>
  40a0fc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a100:	eba9 0a01 	sub.w	sl, r9, r1
  40a104:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a108:	f021 0103 	bic.w	r1, r1, #3
  40a10c:	448b      	add	fp, r1
  40a10e:	4558      	cmp	r0, fp
  40a110:	dce2      	bgt.n	40a0d8 <_realloc_r+0x1a0>
  40a112:	4656      	mov	r6, sl
  40a114:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a118:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a11c:	1f22      	subs	r2, r4, #4
  40a11e:	2a24      	cmp	r2, #36	; 0x24
  40a120:	60c1      	str	r1, [r0, #12]
  40a122:	6088      	str	r0, [r1, #8]
  40a124:	f200 808f 	bhi.w	40a246 <_realloc_r+0x30e>
  40a128:	2a13      	cmp	r2, #19
  40a12a:	f240 808a 	bls.w	40a242 <_realloc_r+0x30a>
  40a12e:	6829      	ldr	r1, [r5, #0]
  40a130:	f8ca 1008 	str.w	r1, [sl, #8]
  40a134:	6869      	ldr	r1, [r5, #4]
  40a136:	f8ca 100c 	str.w	r1, [sl, #12]
  40a13a:	2a1b      	cmp	r2, #27
  40a13c:	f200 808a 	bhi.w	40a254 <_realloc_r+0x31c>
  40a140:	3508      	adds	r5, #8
  40a142:	f10a 0210 	add.w	r2, sl, #16
  40a146:	6829      	ldr	r1, [r5, #0]
  40a148:	6011      	str	r1, [r2, #0]
  40a14a:	6869      	ldr	r1, [r5, #4]
  40a14c:	6051      	str	r1, [r2, #4]
  40a14e:	68a9      	ldr	r1, [r5, #8]
  40a150:	6091      	str	r1, [r2, #8]
  40a152:	eb0a 0107 	add.w	r1, sl, r7
  40a156:	ebab 0207 	sub.w	r2, fp, r7
  40a15a:	f042 0201 	orr.w	r2, r2, #1
  40a15e:	6099      	str	r1, [r3, #8]
  40a160:	604a      	str	r2, [r1, #4]
  40a162:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a166:	f003 0301 	and.w	r3, r3, #1
  40a16a:	431f      	orrs	r7, r3
  40a16c:	4640      	mov	r0, r8
  40a16e:	f8ca 7004 	str.w	r7, [sl, #4]
  40a172:	f7ff fbe5 	bl	409940 <__malloc_unlock>
  40a176:	e751      	b.n	40a01c <_realloc_r+0xe4>
  40a178:	682b      	ldr	r3, [r5, #0]
  40a17a:	6003      	str	r3, [r0, #0]
  40a17c:	686b      	ldr	r3, [r5, #4]
  40a17e:	6043      	str	r3, [r0, #4]
  40a180:	2a1b      	cmp	r2, #27
  40a182:	d82d      	bhi.n	40a1e0 <_realloc_r+0x2a8>
  40a184:	f100 0308 	add.w	r3, r0, #8
  40a188:	f105 0208 	add.w	r2, r5, #8
  40a18c:	e71b      	b.n	409fc6 <_realloc_r+0x8e>
  40a18e:	4632      	mov	r2, r6
  40a190:	6829      	ldr	r1, [r5, #0]
  40a192:	6011      	str	r1, [r2, #0]
  40a194:	6869      	ldr	r1, [r5, #4]
  40a196:	6051      	str	r1, [r2, #4]
  40a198:	68a9      	ldr	r1, [r5, #8]
  40a19a:	6091      	str	r1, [r2, #8]
  40a19c:	461c      	mov	r4, r3
  40a19e:	46d1      	mov	r9, sl
  40a1a0:	e72a      	b.n	409ff8 <_realloc_r+0xc0>
  40a1a2:	eb09 0107 	add.w	r1, r9, r7
  40a1a6:	ebab 0b07 	sub.w	fp, fp, r7
  40a1aa:	f04b 0201 	orr.w	r2, fp, #1
  40a1ae:	6099      	str	r1, [r3, #8]
  40a1b0:	604a      	str	r2, [r1, #4]
  40a1b2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a1b6:	f003 0301 	and.w	r3, r3, #1
  40a1ba:	431f      	orrs	r7, r3
  40a1bc:	4640      	mov	r0, r8
  40a1be:	f845 7c04 	str.w	r7, [r5, #-4]
  40a1c2:	f7ff fbbd 	bl	409940 <__malloc_unlock>
  40a1c6:	462e      	mov	r6, r5
  40a1c8:	e728      	b.n	40a01c <_realloc_r+0xe4>
  40a1ca:	4629      	mov	r1, r5
  40a1cc:	f7ff fb52 	bl	409874 <memmove>
  40a1d0:	e6ff      	b.n	409fd2 <_realloc_r+0x9a>
  40a1d2:	4629      	mov	r1, r5
  40a1d4:	4630      	mov	r0, r6
  40a1d6:	461c      	mov	r4, r3
  40a1d8:	46d1      	mov	r9, sl
  40a1da:	f7ff fb4b 	bl	409874 <memmove>
  40a1de:	e70b      	b.n	409ff8 <_realloc_r+0xc0>
  40a1e0:	68ab      	ldr	r3, [r5, #8]
  40a1e2:	6083      	str	r3, [r0, #8]
  40a1e4:	68eb      	ldr	r3, [r5, #12]
  40a1e6:	60c3      	str	r3, [r0, #12]
  40a1e8:	2a24      	cmp	r2, #36	; 0x24
  40a1ea:	d017      	beq.n	40a21c <_realloc_r+0x2e4>
  40a1ec:	f100 0310 	add.w	r3, r0, #16
  40a1f0:	f105 0210 	add.w	r2, r5, #16
  40a1f4:	e6e7      	b.n	409fc6 <_realloc_r+0x8e>
  40a1f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40a1fa:	f023 0303 	bic.w	r3, r3, #3
  40a1fe:	441c      	add	r4, r3
  40a200:	462e      	mov	r6, r5
  40a202:	e6f9      	b.n	409ff8 <_realloc_r+0xc0>
  40a204:	68a9      	ldr	r1, [r5, #8]
  40a206:	f8ca 1010 	str.w	r1, [sl, #16]
  40a20a:	68e9      	ldr	r1, [r5, #12]
  40a20c:	f8ca 1014 	str.w	r1, [sl, #20]
  40a210:	2a24      	cmp	r2, #36	; 0x24
  40a212:	d00c      	beq.n	40a22e <_realloc_r+0x2f6>
  40a214:	3510      	adds	r5, #16
  40a216:	f10a 0218 	add.w	r2, sl, #24
  40a21a:	e7b9      	b.n	40a190 <_realloc_r+0x258>
  40a21c:	692b      	ldr	r3, [r5, #16]
  40a21e:	6103      	str	r3, [r0, #16]
  40a220:	696b      	ldr	r3, [r5, #20]
  40a222:	6143      	str	r3, [r0, #20]
  40a224:	f105 0218 	add.w	r2, r5, #24
  40a228:	f100 0318 	add.w	r3, r0, #24
  40a22c:	e6cb      	b.n	409fc6 <_realloc_r+0x8e>
  40a22e:	692a      	ldr	r2, [r5, #16]
  40a230:	f8ca 2018 	str.w	r2, [sl, #24]
  40a234:	696a      	ldr	r2, [r5, #20]
  40a236:	f8ca 201c 	str.w	r2, [sl, #28]
  40a23a:	3518      	adds	r5, #24
  40a23c:	f10a 0220 	add.w	r2, sl, #32
  40a240:	e7a6      	b.n	40a190 <_realloc_r+0x258>
  40a242:	4632      	mov	r2, r6
  40a244:	e77f      	b.n	40a146 <_realloc_r+0x20e>
  40a246:	4629      	mov	r1, r5
  40a248:	4630      	mov	r0, r6
  40a24a:	9301      	str	r3, [sp, #4]
  40a24c:	f7ff fb12 	bl	409874 <memmove>
  40a250:	9b01      	ldr	r3, [sp, #4]
  40a252:	e77e      	b.n	40a152 <_realloc_r+0x21a>
  40a254:	68a9      	ldr	r1, [r5, #8]
  40a256:	f8ca 1010 	str.w	r1, [sl, #16]
  40a25a:	68e9      	ldr	r1, [r5, #12]
  40a25c:	f8ca 1014 	str.w	r1, [sl, #20]
  40a260:	2a24      	cmp	r2, #36	; 0x24
  40a262:	d003      	beq.n	40a26c <_realloc_r+0x334>
  40a264:	3510      	adds	r5, #16
  40a266:	f10a 0218 	add.w	r2, sl, #24
  40a26a:	e76c      	b.n	40a146 <_realloc_r+0x20e>
  40a26c:	692a      	ldr	r2, [r5, #16]
  40a26e:	f8ca 2018 	str.w	r2, [sl, #24]
  40a272:	696a      	ldr	r2, [r5, #20]
  40a274:	f8ca 201c 	str.w	r2, [sl, #28]
  40a278:	3518      	adds	r5, #24
  40a27a:	f10a 0220 	add.w	r2, sl, #32
  40a27e:	e762      	b.n	40a146 <_realloc_r+0x20e>
  40a280:	204005dc 	.word	0x204005dc

0040a284 <_sbrk_r>:
  40a284:	b538      	push	{r3, r4, r5, lr}
  40a286:	4c07      	ldr	r4, [pc, #28]	; (40a2a4 <_sbrk_r+0x20>)
  40a288:	2300      	movs	r3, #0
  40a28a:	4605      	mov	r5, r0
  40a28c:	4608      	mov	r0, r1
  40a28e:	6023      	str	r3, [r4, #0]
  40a290:	f7fa fc7e 	bl	404b90 <_sbrk>
  40a294:	1c43      	adds	r3, r0, #1
  40a296:	d000      	beq.n	40a29a <_sbrk_r+0x16>
  40a298:	bd38      	pop	{r3, r4, r5, pc}
  40a29a:	6823      	ldr	r3, [r4, #0]
  40a29c:	2b00      	cmp	r3, #0
  40a29e:	d0fb      	beq.n	40a298 <_sbrk_r+0x14>
  40a2a0:	602b      	str	r3, [r5, #0]
  40a2a2:	bd38      	pop	{r3, r4, r5, pc}
  40a2a4:	20401758 	.word	0x20401758

0040a2a8 <__sread>:
  40a2a8:	b510      	push	{r4, lr}
  40a2aa:	460c      	mov	r4, r1
  40a2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a2b0:	f000 fa72 	bl	40a798 <_read_r>
  40a2b4:	2800      	cmp	r0, #0
  40a2b6:	db03      	blt.n	40a2c0 <__sread+0x18>
  40a2b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40a2ba:	4403      	add	r3, r0
  40a2bc:	6523      	str	r3, [r4, #80]	; 0x50
  40a2be:	bd10      	pop	{r4, pc}
  40a2c0:	89a3      	ldrh	r3, [r4, #12]
  40a2c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40a2c6:	81a3      	strh	r3, [r4, #12]
  40a2c8:	bd10      	pop	{r4, pc}
  40a2ca:	bf00      	nop

0040a2cc <__swrite>:
  40a2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a2d0:	4616      	mov	r6, r2
  40a2d2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40a2d6:	461f      	mov	r7, r3
  40a2d8:	05d3      	lsls	r3, r2, #23
  40a2da:	460c      	mov	r4, r1
  40a2dc:	4605      	mov	r5, r0
  40a2de:	d507      	bpl.n	40a2f0 <__swrite+0x24>
  40a2e0:	2200      	movs	r2, #0
  40a2e2:	2302      	movs	r3, #2
  40a2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a2e8:	f000 fa40 	bl	40a76c <_lseek_r>
  40a2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a2f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a2f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40a2f8:	81a2      	strh	r2, [r4, #12]
  40a2fa:	463b      	mov	r3, r7
  40a2fc:	4632      	mov	r2, r6
  40a2fe:	4628      	mov	r0, r5
  40a300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a304:	f000 b922 	b.w	40a54c <_write_r>

0040a308 <__sseek>:
  40a308:	b510      	push	{r4, lr}
  40a30a:	460c      	mov	r4, r1
  40a30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a310:	f000 fa2c 	bl	40a76c <_lseek_r>
  40a314:	89a3      	ldrh	r3, [r4, #12]
  40a316:	1c42      	adds	r2, r0, #1
  40a318:	bf0e      	itee	eq
  40a31a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40a31e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40a322:	6520      	strne	r0, [r4, #80]	; 0x50
  40a324:	81a3      	strh	r3, [r4, #12]
  40a326:	bd10      	pop	{r4, pc}

0040a328 <__sclose>:
  40a328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a32c:	f000 b9a6 	b.w	40a67c <_close_r>

0040a330 <__ssprint_r>:
  40a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a334:	6893      	ldr	r3, [r2, #8]
  40a336:	b083      	sub	sp, #12
  40a338:	4690      	mov	r8, r2
  40a33a:	2b00      	cmp	r3, #0
  40a33c:	d070      	beq.n	40a420 <__ssprint_r+0xf0>
  40a33e:	4682      	mov	sl, r0
  40a340:	460c      	mov	r4, r1
  40a342:	6817      	ldr	r7, [r2, #0]
  40a344:	688d      	ldr	r5, [r1, #8]
  40a346:	6808      	ldr	r0, [r1, #0]
  40a348:	e042      	b.n	40a3d0 <__ssprint_r+0xa0>
  40a34a:	89a3      	ldrh	r3, [r4, #12]
  40a34c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a350:	d02e      	beq.n	40a3b0 <__ssprint_r+0x80>
  40a352:	6965      	ldr	r5, [r4, #20]
  40a354:	6921      	ldr	r1, [r4, #16]
  40a356:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40a35a:	eba0 0b01 	sub.w	fp, r0, r1
  40a35e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40a362:	f10b 0001 	add.w	r0, fp, #1
  40a366:	106d      	asrs	r5, r5, #1
  40a368:	4430      	add	r0, r6
  40a36a:	42a8      	cmp	r0, r5
  40a36c:	462a      	mov	r2, r5
  40a36e:	bf84      	itt	hi
  40a370:	4605      	movhi	r5, r0
  40a372:	462a      	movhi	r2, r5
  40a374:	055b      	lsls	r3, r3, #21
  40a376:	d538      	bpl.n	40a3ea <__ssprint_r+0xba>
  40a378:	4611      	mov	r1, r2
  40a37a:	4650      	mov	r0, sl
  40a37c:	f7fe fec6 	bl	40910c <_malloc_r>
  40a380:	2800      	cmp	r0, #0
  40a382:	d03c      	beq.n	40a3fe <__ssprint_r+0xce>
  40a384:	465a      	mov	r2, fp
  40a386:	6921      	ldr	r1, [r4, #16]
  40a388:	9001      	str	r0, [sp, #4]
  40a38a:	f7ff f9d9 	bl	409740 <memcpy>
  40a38e:	89a2      	ldrh	r2, [r4, #12]
  40a390:	9b01      	ldr	r3, [sp, #4]
  40a392:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40a396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40a39a:	81a2      	strh	r2, [r4, #12]
  40a39c:	eba5 020b 	sub.w	r2, r5, fp
  40a3a0:	eb03 000b 	add.w	r0, r3, fp
  40a3a4:	6165      	str	r5, [r4, #20]
  40a3a6:	6123      	str	r3, [r4, #16]
  40a3a8:	6020      	str	r0, [r4, #0]
  40a3aa:	60a2      	str	r2, [r4, #8]
  40a3ac:	4635      	mov	r5, r6
  40a3ae:	46b3      	mov	fp, r6
  40a3b0:	465a      	mov	r2, fp
  40a3b2:	4649      	mov	r1, r9
  40a3b4:	f7ff fa5e 	bl	409874 <memmove>
  40a3b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a3bc:	68a2      	ldr	r2, [r4, #8]
  40a3be:	6820      	ldr	r0, [r4, #0]
  40a3c0:	1b55      	subs	r5, r2, r5
  40a3c2:	4458      	add	r0, fp
  40a3c4:	1b9e      	subs	r6, r3, r6
  40a3c6:	60a5      	str	r5, [r4, #8]
  40a3c8:	6020      	str	r0, [r4, #0]
  40a3ca:	f8c8 6008 	str.w	r6, [r8, #8]
  40a3ce:	b33e      	cbz	r6, 40a420 <__ssprint_r+0xf0>
  40a3d0:	687e      	ldr	r6, [r7, #4]
  40a3d2:	463b      	mov	r3, r7
  40a3d4:	3708      	adds	r7, #8
  40a3d6:	2e00      	cmp	r6, #0
  40a3d8:	d0fa      	beq.n	40a3d0 <__ssprint_r+0xa0>
  40a3da:	42ae      	cmp	r6, r5
  40a3dc:	f8d3 9000 	ldr.w	r9, [r3]
  40a3e0:	46ab      	mov	fp, r5
  40a3e2:	d2b2      	bcs.n	40a34a <__ssprint_r+0x1a>
  40a3e4:	4635      	mov	r5, r6
  40a3e6:	46b3      	mov	fp, r6
  40a3e8:	e7e2      	b.n	40a3b0 <__ssprint_r+0x80>
  40a3ea:	4650      	mov	r0, sl
  40a3ec:	f7ff fda4 	bl	409f38 <_realloc_r>
  40a3f0:	4603      	mov	r3, r0
  40a3f2:	2800      	cmp	r0, #0
  40a3f4:	d1d2      	bne.n	40a39c <__ssprint_r+0x6c>
  40a3f6:	6921      	ldr	r1, [r4, #16]
  40a3f8:	4650      	mov	r0, sl
  40a3fa:	f7fe fb69 	bl	408ad0 <_free_r>
  40a3fe:	230c      	movs	r3, #12
  40a400:	f8ca 3000 	str.w	r3, [sl]
  40a404:	89a3      	ldrh	r3, [r4, #12]
  40a406:	2200      	movs	r2, #0
  40a408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a40c:	f04f 30ff 	mov.w	r0, #4294967295
  40a410:	81a3      	strh	r3, [r4, #12]
  40a412:	f8c8 2008 	str.w	r2, [r8, #8]
  40a416:	f8c8 2004 	str.w	r2, [r8, #4]
  40a41a:	b003      	add	sp, #12
  40a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a420:	2000      	movs	r0, #0
  40a422:	f8c8 0004 	str.w	r0, [r8, #4]
  40a426:	b003      	add	sp, #12
  40a428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a42c <__swbuf_r>:
  40a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a42e:	460d      	mov	r5, r1
  40a430:	4614      	mov	r4, r2
  40a432:	4606      	mov	r6, r0
  40a434:	b110      	cbz	r0, 40a43c <__swbuf_r+0x10>
  40a436:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a438:	2b00      	cmp	r3, #0
  40a43a:	d04b      	beq.n	40a4d4 <__swbuf_r+0xa8>
  40a43c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a440:	69a3      	ldr	r3, [r4, #24]
  40a442:	60a3      	str	r3, [r4, #8]
  40a444:	b291      	uxth	r1, r2
  40a446:	0708      	lsls	r0, r1, #28
  40a448:	d539      	bpl.n	40a4be <__swbuf_r+0x92>
  40a44a:	6923      	ldr	r3, [r4, #16]
  40a44c:	2b00      	cmp	r3, #0
  40a44e:	d036      	beq.n	40a4be <__swbuf_r+0x92>
  40a450:	b2ed      	uxtb	r5, r5
  40a452:	0489      	lsls	r1, r1, #18
  40a454:	462f      	mov	r7, r5
  40a456:	d515      	bpl.n	40a484 <__swbuf_r+0x58>
  40a458:	6822      	ldr	r2, [r4, #0]
  40a45a:	6961      	ldr	r1, [r4, #20]
  40a45c:	1ad3      	subs	r3, r2, r3
  40a45e:	428b      	cmp	r3, r1
  40a460:	da1c      	bge.n	40a49c <__swbuf_r+0x70>
  40a462:	3301      	adds	r3, #1
  40a464:	68a1      	ldr	r1, [r4, #8]
  40a466:	1c50      	adds	r0, r2, #1
  40a468:	3901      	subs	r1, #1
  40a46a:	60a1      	str	r1, [r4, #8]
  40a46c:	6020      	str	r0, [r4, #0]
  40a46e:	7015      	strb	r5, [r2, #0]
  40a470:	6962      	ldr	r2, [r4, #20]
  40a472:	429a      	cmp	r2, r3
  40a474:	d01a      	beq.n	40a4ac <__swbuf_r+0x80>
  40a476:	89a3      	ldrh	r3, [r4, #12]
  40a478:	07db      	lsls	r3, r3, #31
  40a47a:	d501      	bpl.n	40a480 <__swbuf_r+0x54>
  40a47c:	2d0a      	cmp	r5, #10
  40a47e:	d015      	beq.n	40a4ac <__swbuf_r+0x80>
  40a480:	4638      	mov	r0, r7
  40a482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a484:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a486:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a48a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a48e:	81a2      	strh	r2, [r4, #12]
  40a490:	6822      	ldr	r2, [r4, #0]
  40a492:	6661      	str	r1, [r4, #100]	; 0x64
  40a494:	6961      	ldr	r1, [r4, #20]
  40a496:	1ad3      	subs	r3, r2, r3
  40a498:	428b      	cmp	r3, r1
  40a49a:	dbe2      	blt.n	40a462 <__swbuf_r+0x36>
  40a49c:	4621      	mov	r1, r4
  40a49e:	4630      	mov	r0, r6
  40a4a0:	f7fe f9ac 	bl	4087fc <_fflush_r>
  40a4a4:	b940      	cbnz	r0, 40a4b8 <__swbuf_r+0x8c>
  40a4a6:	6822      	ldr	r2, [r4, #0]
  40a4a8:	2301      	movs	r3, #1
  40a4aa:	e7db      	b.n	40a464 <__swbuf_r+0x38>
  40a4ac:	4621      	mov	r1, r4
  40a4ae:	4630      	mov	r0, r6
  40a4b0:	f7fe f9a4 	bl	4087fc <_fflush_r>
  40a4b4:	2800      	cmp	r0, #0
  40a4b6:	d0e3      	beq.n	40a480 <__swbuf_r+0x54>
  40a4b8:	f04f 37ff 	mov.w	r7, #4294967295
  40a4bc:	e7e0      	b.n	40a480 <__swbuf_r+0x54>
  40a4be:	4621      	mov	r1, r4
  40a4c0:	4630      	mov	r0, r6
  40a4c2:	f7fd f8c7 	bl	407654 <__swsetup_r>
  40a4c6:	2800      	cmp	r0, #0
  40a4c8:	d1f6      	bne.n	40a4b8 <__swbuf_r+0x8c>
  40a4ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a4ce:	6923      	ldr	r3, [r4, #16]
  40a4d0:	b291      	uxth	r1, r2
  40a4d2:	e7bd      	b.n	40a450 <__swbuf_r+0x24>
  40a4d4:	f7fe fa26 	bl	408924 <__sinit>
  40a4d8:	e7b0      	b.n	40a43c <__swbuf_r+0x10>
  40a4da:	bf00      	nop

0040a4dc <_wcrtomb_r>:
  40a4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a4de:	4606      	mov	r6, r0
  40a4e0:	b085      	sub	sp, #20
  40a4e2:	461f      	mov	r7, r3
  40a4e4:	b189      	cbz	r1, 40a50a <_wcrtomb_r+0x2e>
  40a4e6:	4c10      	ldr	r4, [pc, #64]	; (40a528 <_wcrtomb_r+0x4c>)
  40a4e8:	4d10      	ldr	r5, [pc, #64]	; (40a52c <_wcrtomb_r+0x50>)
  40a4ea:	6824      	ldr	r4, [r4, #0]
  40a4ec:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a4ee:	2c00      	cmp	r4, #0
  40a4f0:	bf08      	it	eq
  40a4f2:	462c      	moveq	r4, r5
  40a4f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a4f8:	47a0      	blx	r4
  40a4fa:	1c43      	adds	r3, r0, #1
  40a4fc:	d103      	bne.n	40a506 <_wcrtomb_r+0x2a>
  40a4fe:	2200      	movs	r2, #0
  40a500:	238a      	movs	r3, #138	; 0x8a
  40a502:	603a      	str	r2, [r7, #0]
  40a504:	6033      	str	r3, [r6, #0]
  40a506:	b005      	add	sp, #20
  40a508:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a50a:	460c      	mov	r4, r1
  40a50c:	4906      	ldr	r1, [pc, #24]	; (40a528 <_wcrtomb_r+0x4c>)
  40a50e:	4a07      	ldr	r2, [pc, #28]	; (40a52c <_wcrtomb_r+0x50>)
  40a510:	6809      	ldr	r1, [r1, #0]
  40a512:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a514:	2900      	cmp	r1, #0
  40a516:	bf08      	it	eq
  40a518:	4611      	moveq	r1, r2
  40a51a:	4622      	mov	r2, r4
  40a51c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a520:	a901      	add	r1, sp, #4
  40a522:	47a0      	blx	r4
  40a524:	e7e9      	b.n	40a4fa <_wcrtomb_r+0x1e>
  40a526:	bf00      	nop
  40a528:	20400044 	.word	0x20400044
  40a52c:	20400470 	.word	0x20400470

0040a530 <__ascii_wctomb>:
  40a530:	b121      	cbz	r1, 40a53c <__ascii_wctomb+0xc>
  40a532:	2aff      	cmp	r2, #255	; 0xff
  40a534:	d804      	bhi.n	40a540 <__ascii_wctomb+0x10>
  40a536:	700a      	strb	r2, [r1, #0]
  40a538:	2001      	movs	r0, #1
  40a53a:	4770      	bx	lr
  40a53c:	4608      	mov	r0, r1
  40a53e:	4770      	bx	lr
  40a540:	238a      	movs	r3, #138	; 0x8a
  40a542:	6003      	str	r3, [r0, #0]
  40a544:	f04f 30ff 	mov.w	r0, #4294967295
  40a548:	4770      	bx	lr
  40a54a:	bf00      	nop

0040a54c <_write_r>:
  40a54c:	b570      	push	{r4, r5, r6, lr}
  40a54e:	460d      	mov	r5, r1
  40a550:	4c08      	ldr	r4, [pc, #32]	; (40a574 <_write_r+0x28>)
  40a552:	4611      	mov	r1, r2
  40a554:	4606      	mov	r6, r0
  40a556:	461a      	mov	r2, r3
  40a558:	4628      	mov	r0, r5
  40a55a:	2300      	movs	r3, #0
  40a55c:	6023      	str	r3, [r4, #0]
  40a55e:	f7f9 fbdb 	bl	403d18 <_write>
  40a562:	1c43      	adds	r3, r0, #1
  40a564:	d000      	beq.n	40a568 <_write_r+0x1c>
  40a566:	bd70      	pop	{r4, r5, r6, pc}
  40a568:	6823      	ldr	r3, [r4, #0]
  40a56a:	2b00      	cmp	r3, #0
  40a56c:	d0fb      	beq.n	40a566 <_write_r+0x1a>
  40a56e:	6033      	str	r3, [r6, #0]
  40a570:	bd70      	pop	{r4, r5, r6, pc}
  40a572:	bf00      	nop
  40a574:	20401758 	.word	0x20401758

0040a578 <__register_exitproc>:
  40a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a57c:	4c25      	ldr	r4, [pc, #148]	; (40a614 <__register_exitproc+0x9c>)
  40a57e:	6825      	ldr	r5, [r4, #0]
  40a580:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40a584:	4606      	mov	r6, r0
  40a586:	4688      	mov	r8, r1
  40a588:	4692      	mov	sl, r2
  40a58a:	4699      	mov	r9, r3
  40a58c:	b3c4      	cbz	r4, 40a600 <__register_exitproc+0x88>
  40a58e:	6860      	ldr	r0, [r4, #4]
  40a590:	281f      	cmp	r0, #31
  40a592:	dc17      	bgt.n	40a5c4 <__register_exitproc+0x4c>
  40a594:	1c43      	adds	r3, r0, #1
  40a596:	b176      	cbz	r6, 40a5b6 <__register_exitproc+0x3e>
  40a598:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40a59c:	2201      	movs	r2, #1
  40a59e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40a5a2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40a5a6:	4082      	lsls	r2, r0
  40a5a8:	4311      	orrs	r1, r2
  40a5aa:	2e02      	cmp	r6, #2
  40a5ac:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40a5b0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40a5b4:	d01e      	beq.n	40a5f4 <__register_exitproc+0x7c>
  40a5b6:	3002      	adds	r0, #2
  40a5b8:	6063      	str	r3, [r4, #4]
  40a5ba:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40a5be:	2000      	movs	r0, #0
  40a5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a5c4:	4b14      	ldr	r3, [pc, #80]	; (40a618 <__register_exitproc+0xa0>)
  40a5c6:	b303      	cbz	r3, 40a60a <__register_exitproc+0x92>
  40a5c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a5cc:	f7fe fd96 	bl	4090fc <malloc>
  40a5d0:	4604      	mov	r4, r0
  40a5d2:	b1d0      	cbz	r0, 40a60a <__register_exitproc+0x92>
  40a5d4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40a5d8:	2700      	movs	r7, #0
  40a5da:	e880 0088 	stmia.w	r0, {r3, r7}
  40a5de:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40a5e2:	4638      	mov	r0, r7
  40a5e4:	2301      	movs	r3, #1
  40a5e6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40a5ea:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40a5ee:	2e00      	cmp	r6, #0
  40a5f0:	d0e1      	beq.n	40a5b6 <__register_exitproc+0x3e>
  40a5f2:	e7d1      	b.n	40a598 <__register_exitproc+0x20>
  40a5f4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40a5f8:	430a      	orrs	r2, r1
  40a5fa:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40a5fe:	e7da      	b.n	40a5b6 <__register_exitproc+0x3e>
  40a600:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40a604:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40a608:	e7c1      	b.n	40a58e <__register_exitproc+0x16>
  40a60a:	f04f 30ff 	mov.w	r0, #4294967295
  40a60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a612:	bf00      	nop
  40a614:	0040c418 	.word	0x0040c418
  40a618:	004090fd 	.word	0x004090fd

0040a61c <_calloc_r>:
  40a61c:	b510      	push	{r4, lr}
  40a61e:	fb02 f101 	mul.w	r1, r2, r1
  40a622:	f7fe fd73 	bl	40910c <_malloc_r>
  40a626:	4604      	mov	r4, r0
  40a628:	b1d8      	cbz	r0, 40a662 <_calloc_r+0x46>
  40a62a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a62e:	f022 0203 	bic.w	r2, r2, #3
  40a632:	3a04      	subs	r2, #4
  40a634:	2a24      	cmp	r2, #36	; 0x24
  40a636:	d818      	bhi.n	40a66a <_calloc_r+0x4e>
  40a638:	2a13      	cmp	r2, #19
  40a63a:	d914      	bls.n	40a666 <_calloc_r+0x4a>
  40a63c:	2300      	movs	r3, #0
  40a63e:	2a1b      	cmp	r2, #27
  40a640:	6003      	str	r3, [r0, #0]
  40a642:	6043      	str	r3, [r0, #4]
  40a644:	d916      	bls.n	40a674 <_calloc_r+0x58>
  40a646:	2a24      	cmp	r2, #36	; 0x24
  40a648:	6083      	str	r3, [r0, #8]
  40a64a:	60c3      	str	r3, [r0, #12]
  40a64c:	bf11      	iteee	ne
  40a64e:	f100 0210 	addne.w	r2, r0, #16
  40a652:	6103      	streq	r3, [r0, #16]
  40a654:	6143      	streq	r3, [r0, #20]
  40a656:	f100 0218 	addeq.w	r2, r0, #24
  40a65a:	2300      	movs	r3, #0
  40a65c:	6013      	str	r3, [r2, #0]
  40a65e:	6053      	str	r3, [r2, #4]
  40a660:	6093      	str	r3, [r2, #8]
  40a662:	4620      	mov	r0, r4
  40a664:	bd10      	pop	{r4, pc}
  40a666:	4602      	mov	r2, r0
  40a668:	e7f7      	b.n	40a65a <_calloc_r+0x3e>
  40a66a:	2100      	movs	r1, #0
  40a66c:	f7fa fdc2 	bl	4051f4 <memset>
  40a670:	4620      	mov	r0, r4
  40a672:	bd10      	pop	{r4, pc}
  40a674:	f100 0208 	add.w	r2, r0, #8
  40a678:	e7ef      	b.n	40a65a <_calloc_r+0x3e>
  40a67a:	bf00      	nop

0040a67c <_close_r>:
  40a67c:	b538      	push	{r3, r4, r5, lr}
  40a67e:	4c07      	ldr	r4, [pc, #28]	; (40a69c <_close_r+0x20>)
  40a680:	2300      	movs	r3, #0
  40a682:	4605      	mov	r5, r0
  40a684:	4608      	mov	r0, r1
  40a686:	6023      	str	r3, [r4, #0]
  40a688:	f7fa fa9e 	bl	404bc8 <_close>
  40a68c:	1c43      	adds	r3, r0, #1
  40a68e:	d000      	beq.n	40a692 <_close_r+0x16>
  40a690:	bd38      	pop	{r3, r4, r5, pc}
  40a692:	6823      	ldr	r3, [r4, #0]
  40a694:	2b00      	cmp	r3, #0
  40a696:	d0fb      	beq.n	40a690 <_close_r+0x14>
  40a698:	602b      	str	r3, [r5, #0]
  40a69a:	bd38      	pop	{r3, r4, r5, pc}
  40a69c:	20401758 	.word	0x20401758

0040a6a0 <_fclose_r>:
  40a6a0:	b570      	push	{r4, r5, r6, lr}
  40a6a2:	b139      	cbz	r1, 40a6b4 <_fclose_r+0x14>
  40a6a4:	4605      	mov	r5, r0
  40a6a6:	460c      	mov	r4, r1
  40a6a8:	b108      	cbz	r0, 40a6ae <_fclose_r+0xe>
  40a6aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a6ac:	b383      	cbz	r3, 40a710 <_fclose_r+0x70>
  40a6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a6b2:	b913      	cbnz	r3, 40a6ba <_fclose_r+0x1a>
  40a6b4:	2600      	movs	r6, #0
  40a6b6:	4630      	mov	r0, r6
  40a6b8:	bd70      	pop	{r4, r5, r6, pc}
  40a6ba:	4621      	mov	r1, r4
  40a6bc:	4628      	mov	r0, r5
  40a6be:	f7fd fffd 	bl	4086bc <__sflush_r>
  40a6c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a6c4:	4606      	mov	r6, r0
  40a6c6:	b133      	cbz	r3, 40a6d6 <_fclose_r+0x36>
  40a6c8:	69e1      	ldr	r1, [r4, #28]
  40a6ca:	4628      	mov	r0, r5
  40a6cc:	4798      	blx	r3
  40a6ce:	2800      	cmp	r0, #0
  40a6d0:	bfb8      	it	lt
  40a6d2:	f04f 36ff 	movlt.w	r6, #4294967295
  40a6d6:	89a3      	ldrh	r3, [r4, #12]
  40a6d8:	061b      	lsls	r3, r3, #24
  40a6da:	d41c      	bmi.n	40a716 <_fclose_r+0x76>
  40a6dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a6de:	b141      	cbz	r1, 40a6f2 <_fclose_r+0x52>
  40a6e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a6e4:	4299      	cmp	r1, r3
  40a6e6:	d002      	beq.n	40a6ee <_fclose_r+0x4e>
  40a6e8:	4628      	mov	r0, r5
  40a6ea:	f7fe f9f1 	bl	408ad0 <_free_r>
  40a6ee:	2300      	movs	r3, #0
  40a6f0:	6323      	str	r3, [r4, #48]	; 0x30
  40a6f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a6f4:	b121      	cbz	r1, 40a700 <_fclose_r+0x60>
  40a6f6:	4628      	mov	r0, r5
  40a6f8:	f7fe f9ea 	bl	408ad0 <_free_r>
  40a6fc:	2300      	movs	r3, #0
  40a6fe:	6463      	str	r3, [r4, #68]	; 0x44
  40a700:	f7fe f916 	bl	408930 <__sfp_lock_acquire>
  40a704:	2300      	movs	r3, #0
  40a706:	81a3      	strh	r3, [r4, #12]
  40a708:	f7fe f914 	bl	408934 <__sfp_lock_release>
  40a70c:	4630      	mov	r0, r6
  40a70e:	bd70      	pop	{r4, r5, r6, pc}
  40a710:	f7fe f908 	bl	408924 <__sinit>
  40a714:	e7cb      	b.n	40a6ae <_fclose_r+0xe>
  40a716:	6921      	ldr	r1, [r4, #16]
  40a718:	4628      	mov	r0, r5
  40a71a:	f7fe f9d9 	bl	408ad0 <_free_r>
  40a71e:	e7dd      	b.n	40a6dc <_fclose_r+0x3c>

0040a720 <_fstat_r>:
  40a720:	b538      	push	{r3, r4, r5, lr}
  40a722:	460b      	mov	r3, r1
  40a724:	4c07      	ldr	r4, [pc, #28]	; (40a744 <_fstat_r+0x24>)
  40a726:	4605      	mov	r5, r0
  40a728:	4611      	mov	r1, r2
  40a72a:	4618      	mov	r0, r3
  40a72c:	2300      	movs	r3, #0
  40a72e:	6023      	str	r3, [r4, #0]
  40a730:	f7fa fa4d 	bl	404bce <_fstat>
  40a734:	1c43      	adds	r3, r0, #1
  40a736:	d000      	beq.n	40a73a <_fstat_r+0x1a>
  40a738:	bd38      	pop	{r3, r4, r5, pc}
  40a73a:	6823      	ldr	r3, [r4, #0]
  40a73c:	2b00      	cmp	r3, #0
  40a73e:	d0fb      	beq.n	40a738 <_fstat_r+0x18>
  40a740:	602b      	str	r3, [r5, #0]
  40a742:	bd38      	pop	{r3, r4, r5, pc}
  40a744:	20401758 	.word	0x20401758

0040a748 <_isatty_r>:
  40a748:	b538      	push	{r3, r4, r5, lr}
  40a74a:	4c07      	ldr	r4, [pc, #28]	; (40a768 <_isatty_r+0x20>)
  40a74c:	2300      	movs	r3, #0
  40a74e:	4605      	mov	r5, r0
  40a750:	4608      	mov	r0, r1
  40a752:	6023      	str	r3, [r4, #0]
  40a754:	f7fa fa40 	bl	404bd8 <_isatty>
  40a758:	1c43      	adds	r3, r0, #1
  40a75a:	d000      	beq.n	40a75e <_isatty_r+0x16>
  40a75c:	bd38      	pop	{r3, r4, r5, pc}
  40a75e:	6823      	ldr	r3, [r4, #0]
  40a760:	2b00      	cmp	r3, #0
  40a762:	d0fb      	beq.n	40a75c <_isatty_r+0x14>
  40a764:	602b      	str	r3, [r5, #0]
  40a766:	bd38      	pop	{r3, r4, r5, pc}
  40a768:	20401758 	.word	0x20401758

0040a76c <_lseek_r>:
  40a76c:	b570      	push	{r4, r5, r6, lr}
  40a76e:	460d      	mov	r5, r1
  40a770:	4c08      	ldr	r4, [pc, #32]	; (40a794 <_lseek_r+0x28>)
  40a772:	4611      	mov	r1, r2
  40a774:	4606      	mov	r6, r0
  40a776:	461a      	mov	r2, r3
  40a778:	4628      	mov	r0, r5
  40a77a:	2300      	movs	r3, #0
  40a77c:	6023      	str	r3, [r4, #0]
  40a77e:	f7fa fa2d 	bl	404bdc <_lseek>
  40a782:	1c43      	adds	r3, r0, #1
  40a784:	d000      	beq.n	40a788 <_lseek_r+0x1c>
  40a786:	bd70      	pop	{r4, r5, r6, pc}
  40a788:	6823      	ldr	r3, [r4, #0]
  40a78a:	2b00      	cmp	r3, #0
  40a78c:	d0fb      	beq.n	40a786 <_lseek_r+0x1a>
  40a78e:	6033      	str	r3, [r6, #0]
  40a790:	bd70      	pop	{r4, r5, r6, pc}
  40a792:	bf00      	nop
  40a794:	20401758 	.word	0x20401758

0040a798 <_read_r>:
  40a798:	b570      	push	{r4, r5, r6, lr}
  40a79a:	460d      	mov	r5, r1
  40a79c:	4c08      	ldr	r4, [pc, #32]	; (40a7c0 <_read_r+0x28>)
  40a79e:	4611      	mov	r1, r2
  40a7a0:	4606      	mov	r6, r0
  40a7a2:	461a      	mov	r2, r3
  40a7a4:	4628      	mov	r0, r5
  40a7a6:	2300      	movs	r3, #0
  40a7a8:	6023      	str	r3, [r4, #0]
  40a7aa:	f7f9 fa97 	bl	403cdc <_read>
  40a7ae:	1c43      	adds	r3, r0, #1
  40a7b0:	d000      	beq.n	40a7b4 <_read_r+0x1c>
  40a7b2:	bd70      	pop	{r4, r5, r6, pc}
  40a7b4:	6823      	ldr	r3, [r4, #0]
  40a7b6:	2b00      	cmp	r3, #0
  40a7b8:	d0fb      	beq.n	40a7b2 <_read_r+0x1a>
  40a7ba:	6033      	str	r3, [r6, #0]
  40a7bc:	bd70      	pop	{r4, r5, r6, pc}
  40a7be:	bf00      	nop
  40a7c0:	20401758 	.word	0x20401758

0040a7c4 <__aeabi_drsub>:
  40a7c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a7c8:	e002      	b.n	40a7d0 <__adddf3>
  40a7ca:	bf00      	nop

0040a7cc <__aeabi_dsub>:
  40a7cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a7d0 <__adddf3>:
  40a7d0:	b530      	push	{r4, r5, lr}
  40a7d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a7d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a7da:	ea94 0f05 	teq	r4, r5
  40a7de:	bf08      	it	eq
  40a7e0:	ea90 0f02 	teqeq	r0, r2
  40a7e4:	bf1f      	itttt	ne
  40a7e6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a7ea:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a7ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a7f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a7f6:	f000 80e2 	beq.w	40a9be <__adddf3+0x1ee>
  40a7fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a7fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a802:	bfb8      	it	lt
  40a804:	426d      	neglt	r5, r5
  40a806:	dd0c      	ble.n	40a822 <__adddf3+0x52>
  40a808:	442c      	add	r4, r5
  40a80a:	ea80 0202 	eor.w	r2, r0, r2
  40a80e:	ea81 0303 	eor.w	r3, r1, r3
  40a812:	ea82 0000 	eor.w	r0, r2, r0
  40a816:	ea83 0101 	eor.w	r1, r3, r1
  40a81a:	ea80 0202 	eor.w	r2, r0, r2
  40a81e:	ea81 0303 	eor.w	r3, r1, r3
  40a822:	2d36      	cmp	r5, #54	; 0x36
  40a824:	bf88      	it	hi
  40a826:	bd30      	pophi	{r4, r5, pc}
  40a828:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a82c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a830:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a834:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a838:	d002      	beq.n	40a840 <__adddf3+0x70>
  40a83a:	4240      	negs	r0, r0
  40a83c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a840:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a844:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a848:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a84c:	d002      	beq.n	40a854 <__adddf3+0x84>
  40a84e:	4252      	negs	r2, r2
  40a850:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a854:	ea94 0f05 	teq	r4, r5
  40a858:	f000 80a7 	beq.w	40a9aa <__adddf3+0x1da>
  40a85c:	f1a4 0401 	sub.w	r4, r4, #1
  40a860:	f1d5 0e20 	rsbs	lr, r5, #32
  40a864:	db0d      	blt.n	40a882 <__adddf3+0xb2>
  40a866:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a86a:	fa22 f205 	lsr.w	r2, r2, r5
  40a86e:	1880      	adds	r0, r0, r2
  40a870:	f141 0100 	adc.w	r1, r1, #0
  40a874:	fa03 f20e 	lsl.w	r2, r3, lr
  40a878:	1880      	adds	r0, r0, r2
  40a87a:	fa43 f305 	asr.w	r3, r3, r5
  40a87e:	4159      	adcs	r1, r3
  40a880:	e00e      	b.n	40a8a0 <__adddf3+0xd0>
  40a882:	f1a5 0520 	sub.w	r5, r5, #32
  40a886:	f10e 0e20 	add.w	lr, lr, #32
  40a88a:	2a01      	cmp	r2, #1
  40a88c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a890:	bf28      	it	cs
  40a892:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a896:	fa43 f305 	asr.w	r3, r3, r5
  40a89a:	18c0      	adds	r0, r0, r3
  40a89c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a8a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a8a4:	d507      	bpl.n	40a8b6 <__adddf3+0xe6>
  40a8a6:	f04f 0e00 	mov.w	lr, #0
  40a8aa:	f1dc 0c00 	rsbs	ip, ip, #0
  40a8ae:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a8b2:	eb6e 0101 	sbc.w	r1, lr, r1
  40a8b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a8ba:	d31b      	bcc.n	40a8f4 <__adddf3+0x124>
  40a8bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a8c0:	d30c      	bcc.n	40a8dc <__adddf3+0x10c>
  40a8c2:	0849      	lsrs	r1, r1, #1
  40a8c4:	ea5f 0030 	movs.w	r0, r0, rrx
  40a8c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a8cc:	f104 0401 	add.w	r4, r4, #1
  40a8d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a8d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a8d8:	f080 809a 	bcs.w	40aa10 <__adddf3+0x240>
  40a8dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a8e0:	bf08      	it	eq
  40a8e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a8e6:	f150 0000 	adcs.w	r0, r0, #0
  40a8ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a8ee:	ea41 0105 	orr.w	r1, r1, r5
  40a8f2:	bd30      	pop	{r4, r5, pc}
  40a8f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a8f8:	4140      	adcs	r0, r0
  40a8fa:	eb41 0101 	adc.w	r1, r1, r1
  40a8fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a902:	f1a4 0401 	sub.w	r4, r4, #1
  40a906:	d1e9      	bne.n	40a8dc <__adddf3+0x10c>
  40a908:	f091 0f00 	teq	r1, #0
  40a90c:	bf04      	itt	eq
  40a90e:	4601      	moveq	r1, r0
  40a910:	2000      	moveq	r0, #0
  40a912:	fab1 f381 	clz	r3, r1
  40a916:	bf08      	it	eq
  40a918:	3320      	addeq	r3, #32
  40a91a:	f1a3 030b 	sub.w	r3, r3, #11
  40a91e:	f1b3 0220 	subs.w	r2, r3, #32
  40a922:	da0c      	bge.n	40a93e <__adddf3+0x16e>
  40a924:	320c      	adds	r2, #12
  40a926:	dd08      	ble.n	40a93a <__adddf3+0x16a>
  40a928:	f102 0c14 	add.w	ip, r2, #20
  40a92c:	f1c2 020c 	rsb	r2, r2, #12
  40a930:	fa01 f00c 	lsl.w	r0, r1, ip
  40a934:	fa21 f102 	lsr.w	r1, r1, r2
  40a938:	e00c      	b.n	40a954 <__adddf3+0x184>
  40a93a:	f102 0214 	add.w	r2, r2, #20
  40a93e:	bfd8      	it	le
  40a940:	f1c2 0c20 	rsble	ip, r2, #32
  40a944:	fa01 f102 	lsl.w	r1, r1, r2
  40a948:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a94c:	bfdc      	itt	le
  40a94e:	ea41 010c 	orrle.w	r1, r1, ip
  40a952:	4090      	lslle	r0, r2
  40a954:	1ae4      	subs	r4, r4, r3
  40a956:	bfa2      	ittt	ge
  40a958:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a95c:	4329      	orrge	r1, r5
  40a95e:	bd30      	popge	{r4, r5, pc}
  40a960:	ea6f 0404 	mvn.w	r4, r4
  40a964:	3c1f      	subs	r4, #31
  40a966:	da1c      	bge.n	40a9a2 <__adddf3+0x1d2>
  40a968:	340c      	adds	r4, #12
  40a96a:	dc0e      	bgt.n	40a98a <__adddf3+0x1ba>
  40a96c:	f104 0414 	add.w	r4, r4, #20
  40a970:	f1c4 0220 	rsb	r2, r4, #32
  40a974:	fa20 f004 	lsr.w	r0, r0, r4
  40a978:	fa01 f302 	lsl.w	r3, r1, r2
  40a97c:	ea40 0003 	orr.w	r0, r0, r3
  40a980:	fa21 f304 	lsr.w	r3, r1, r4
  40a984:	ea45 0103 	orr.w	r1, r5, r3
  40a988:	bd30      	pop	{r4, r5, pc}
  40a98a:	f1c4 040c 	rsb	r4, r4, #12
  40a98e:	f1c4 0220 	rsb	r2, r4, #32
  40a992:	fa20 f002 	lsr.w	r0, r0, r2
  40a996:	fa01 f304 	lsl.w	r3, r1, r4
  40a99a:	ea40 0003 	orr.w	r0, r0, r3
  40a99e:	4629      	mov	r1, r5
  40a9a0:	bd30      	pop	{r4, r5, pc}
  40a9a2:	fa21 f004 	lsr.w	r0, r1, r4
  40a9a6:	4629      	mov	r1, r5
  40a9a8:	bd30      	pop	{r4, r5, pc}
  40a9aa:	f094 0f00 	teq	r4, #0
  40a9ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a9b2:	bf06      	itte	eq
  40a9b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a9b8:	3401      	addeq	r4, #1
  40a9ba:	3d01      	subne	r5, #1
  40a9bc:	e74e      	b.n	40a85c <__adddf3+0x8c>
  40a9be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a9c2:	bf18      	it	ne
  40a9c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a9c8:	d029      	beq.n	40aa1e <__adddf3+0x24e>
  40a9ca:	ea94 0f05 	teq	r4, r5
  40a9ce:	bf08      	it	eq
  40a9d0:	ea90 0f02 	teqeq	r0, r2
  40a9d4:	d005      	beq.n	40a9e2 <__adddf3+0x212>
  40a9d6:	ea54 0c00 	orrs.w	ip, r4, r0
  40a9da:	bf04      	itt	eq
  40a9dc:	4619      	moveq	r1, r3
  40a9de:	4610      	moveq	r0, r2
  40a9e0:	bd30      	pop	{r4, r5, pc}
  40a9e2:	ea91 0f03 	teq	r1, r3
  40a9e6:	bf1e      	ittt	ne
  40a9e8:	2100      	movne	r1, #0
  40a9ea:	2000      	movne	r0, #0
  40a9ec:	bd30      	popne	{r4, r5, pc}
  40a9ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a9f2:	d105      	bne.n	40aa00 <__adddf3+0x230>
  40a9f4:	0040      	lsls	r0, r0, #1
  40a9f6:	4149      	adcs	r1, r1
  40a9f8:	bf28      	it	cs
  40a9fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a9fe:	bd30      	pop	{r4, r5, pc}
  40aa00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40aa04:	bf3c      	itt	cc
  40aa06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40aa0a:	bd30      	popcc	{r4, r5, pc}
  40aa0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40aa10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40aa14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40aa18:	f04f 0000 	mov.w	r0, #0
  40aa1c:	bd30      	pop	{r4, r5, pc}
  40aa1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40aa22:	bf1a      	itte	ne
  40aa24:	4619      	movne	r1, r3
  40aa26:	4610      	movne	r0, r2
  40aa28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40aa2c:	bf1c      	itt	ne
  40aa2e:	460b      	movne	r3, r1
  40aa30:	4602      	movne	r2, r0
  40aa32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40aa36:	bf06      	itte	eq
  40aa38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40aa3c:	ea91 0f03 	teqeq	r1, r3
  40aa40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40aa44:	bd30      	pop	{r4, r5, pc}
  40aa46:	bf00      	nop

0040aa48 <__aeabi_ui2d>:
  40aa48:	f090 0f00 	teq	r0, #0
  40aa4c:	bf04      	itt	eq
  40aa4e:	2100      	moveq	r1, #0
  40aa50:	4770      	bxeq	lr
  40aa52:	b530      	push	{r4, r5, lr}
  40aa54:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40aa58:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40aa5c:	f04f 0500 	mov.w	r5, #0
  40aa60:	f04f 0100 	mov.w	r1, #0
  40aa64:	e750      	b.n	40a908 <__adddf3+0x138>
  40aa66:	bf00      	nop

0040aa68 <__aeabi_i2d>:
  40aa68:	f090 0f00 	teq	r0, #0
  40aa6c:	bf04      	itt	eq
  40aa6e:	2100      	moveq	r1, #0
  40aa70:	4770      	bxeq	lr
  40aa72:	b530      	push	{r4, r5, lr}
  40aa74:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40aa78:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40aa7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40aa80:	bf48      	it	mi
  40aa82:	4240      	negmi	r0, r0
  40aa84:	f04f 0100 	mov.w	r1, #0
  40aa88:	e73e      	b.n	40a908 <__adddf3+0x138>
  40aa8a:	bf00      	nop

0040aa8c <__aeabi_f2d>:
  40aa8c:	0042      	lsls	r2, r0, #1
  40aa8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40aa92:	ea4f 0131 	mov.w	r1, r1, rrx
  40aa96:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40aa9a:	bf1f      	itttt	ne
  40aa9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40aaa0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40aaa4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40aaa8:	4770      	bxne	lr
  40aaaa:	f092 0f00 	teq	r2, #0
  40aaae:	bf14      	ite	ne
  40aab0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40aab4:	4770      	bxeq	lr
  40aab6:	b530      	push	{r4, r5, lr}
  40aab8:	f44f 7460 	mov.w	r4, #896	; 0x380
  40aabc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40aac0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40aac4:	e720      	b.n	40a908 <__adddf3+0x138>
  40aac6:	bf00      	nop

0040aac8 <__aeabi_ul2d>:
  40aac8:	ea50 0201 	orrs.w	r2, r0, r1
  40aacc:	bf08      	it	eq
  40aace:	4770      	bxeq	lr
  40aad0:	b530      	push	{r4, r5, lr}
  40aad2:	f04f 0500 	mov.w	r5, #0
  40aad6:	e00a      	b.n	40aaee <__aeabi_l2d+0x16>

0040aad8 <__aeabi_l2d>:
  40aad8:	ea50 0201 	orrs.w	r2, r0, r1
  40aadc:	bf08      	it	eq
  40aade:	4770      	bxeq	lr
  40aae0:	b530      	push	{r4, r5, lr}
  40aae2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40aae6:	d502      	bpl.n	40aaee <__aeabi_l2d+0x16>
  40aae8:	4240      	negs	r0, r0
  40aaea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40aaee:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40aaf2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40aaf6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40aafa:	f43f aedc 	beq.w	40a8b6 <__adddf3+0xe6>
  40aafe:	f04f 0203 	mov.w	r2, #3
  40ab02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ab06:	bf18      	it	ne
  40ab08:	3203      	addne	r2, #3
  40ab0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ab0e:	bf18      	it	ne
  40ab10:	3203      	addne	r2, #3
  40ab12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40ab16:	f1c2 0320 	rsb	r3, r2, #32
  40ab1a:	fa00 fc03 	lsl.w	ip, r0, r3
  40ab1e:	fa20 f002 	lsr.w	r0, r0, r2
  40ab22:	fa01 fe03 	lsl.w	lr, r1, r3
  40ab26:	ea40 000e 	orr.w	r0, r0, lr
  40ab2a:	fa21 f102 	lsr.w	r1, r1, r2
  40ab2e:	4414      	add	r4, r2
  40ab30:	e6c1      	b.n	40a8b6 <__adddf3+0xe6>
  40ab32:	bf00      	nop

0040ab34 <__aeabi_dmul>:
  40ab34:	b570      	push	{r4, r5, r6, lr}
  40ab36:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ab3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ab3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ab42:	bf1d      	ittte	ne
  40ab44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ab48:	ea94 0f0c 	teqne	r4, ip
  40ab4c:	ea95 0f0c 	teqne	r5, ip
  40ab50:	f000 f8de 	bleq	40ad10 <__aeabi_dmul+0x1dc>
  40ab54:	442c      	add	r4, r5
  40ab56:	ea81 0603 	eor.w	r6, r1, r3
  40ab5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40ab5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40ab62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40ab66:	bf18      	it	ne
  40ab68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40ab6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ab70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40ab74:	d038      	beq.n	40abe8 <__aeabi_dmul+0xb4>
  40ab76:	fba0 ce02 	umull	ip, lr, r0, r2
  40ab7a:	f04f 0500 	mov.w	r5, #0
  40ab7e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40ab82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40ab86:	fbe0 e503 	umlal	lr, r5, r0, r3
  40ab8a:	f04f 0600 	mov.w	r6, #0
  40ab8e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40ab92:	f09c 0f00 	teq	ip, #0
  40ab96:	bf18      	it	ne
  40ab98:	f04e 0e01 	orrne.w	lr, lr, #1
  40ab9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40aba0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40aba4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40aba8:	d204      	bcs.n	40abb4 <__aeabi_dmul+0x80>
  40abaa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40abae:	416d      	adcs	r5, r5
  40abb0:	eb46 0606 	adc.w	r6, r6, r6
  40abb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40abb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40abbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40abc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40abc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40abc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40abcc:	bf88      	it	hi
  40abce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40abd2:	d81e      	bhi.n	40ac12 <__aeabi_dmul+0xde>
  40abd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40abd8:	bf08      	it	eq
  40abda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40abde:	f150 0000 	adcs.w	r0, r0, #0
  40abe2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40abe6:	bd70      	pop	{r4, r5, r6, pc}
  40abe8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40abec:	ea46 0101 	orr.w	r1, r6, r1
  40abf0:	ea40 0002 	orr.w	r0, r0, r2
  40abf4:	ea81 0103 	eor.w	r1, r1, r3
  40abf8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40abfc:	bfc2      	ittt	gt
  40abfe:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ac02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ac06:	bd70      	popgt	{r4, r5, r6, pc}
  40ac08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ac0c:	f04f 0e00 	mov.w	lr, #0
  40ac10:	3c01      	subs	r4, #1
  40ac12:	f300 80ab 	bgt.w	40ad6c <__aeabi_dmul+0x238>
  40ac16:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40ac1a:	bfde      	ittt	le
  40ac1c:	2000      	movle	r0, #0
  40ac1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40ac22:	bd70      	pople	{r4, r5, r6, pc}
  40ac24:	f1c4 0400 	rsb	r4, r4, #0
  40ac28:	3c20      	subs	r4, #32
  40ac2a:	da35      	bge.n	40ac98 <__aeabi_dmul+0x164>
  40ac2c:	340c      	adds	r4, #12
  40ac2e:	dc1b      	bgt.n	40ac68 <__aeabi_dmul+0x134>
  40ac30:	f104 0414 	add.w	r4, r4, #20
  40ac34:	f1c4 0520 	rsb	r5, r4, #32
  40ac38:	fa00 f305 	lsl.w	r3, r0, r5
  40ac3c:	fa20 f004 	lsr.w	r0, r0, r4
  40ac40:	fa01 f205 	lsl.w	r2, r1, r5
  40ac44:	ea40 0002 	orr.w	r0, r0, r2
  40ac48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40ac4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40ac50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40ac54:	fa21 f604 	lsr.w	r6, r1, r4
  40ac58:	eb42 0106 	adc.w	r1, r2, r6
  40ac5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ac60:	bf08      	it	eq
  40ac62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ac66:	bd70      	pop	{r4, r5, r6, pc}
  40ac68:	f1c4 040c 	rsb	r4, r4, #12
  40ac6c:	f1c4 0520 	rsb	r5, r4, #32
  40ac70:	fa00 f304 	lsl.w	r3, r0, r4
  40ac74:	fa20 f005 	lsr.w	r0, r0, r5
  40ac78:	fa01 f204 	lsl.w	r2, r1, r4
  40ac7c:	ea40 0002 	orr.w	r0, r0, r2
  40ac80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ac84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40ac88:	f141 0100 	adc.w	r1, r1, #0
  40ac8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ac90:	bf08      	it	eq
  40ac92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ac96:	bd70      	pop	{r4, r5, r6, pc}
  40ac98:	f1c4 0520 	rsb	r5, r4, #32
  40ac9c:	fa00 f205 	lsl.w	r2, r0, r5
  40aca0:	ea4e 0e02 	orr.w	lr, lr, r2
  40aca4:	fa20 f304 	lsr.w	r3, r0, r4
  40aca8:	fa01 f205 	lsl.w	r2, r1, r5
  40acac:	ea43 0302 	orr.w	r3, r3, r2
  40acb0:	fa21 f004 	lsr.w	r0, r1, r4
  40acb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40acb8:	fa21 f204 	lsr.w	r2, r1, r4
  40acbc:	ea20 0002 	bic.w	r0, r0, r2
  40acc0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40acc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40acc8:	bf08      	it	eq
  40acca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40acce:	bd70      	pop	{r4, r5, r6, pc}
  40acd0:	f094 0f00 	teq	r4, #0
  40acd4:	d10f      	bne.n	40acf6 <__aeabi_dmul+0x1c2>
  40acd6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40acda:	0040      	lsls	r0, r0, #1
  40acdc:	eb41 0101 	adc.w	r1, r1, r1
  40ace0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ace4:	bf08      	it	eq
  40ace6:	3c01      	subeq	r4, #1
  40ace8:	d0f7      	beq.n	40acda <__aeabi_dmul+0x1a6>
  40acea:	ea41 0106 	orr.w	r1, r1, r6
  40acee:	f095 0f00 	teq	r5, #0
  40acf2:	bf18      	it	ne
  40acf4:	4770      	bxne	lr
  40acf6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40acfa:	0052      	lsls	r2, r2, #1
  40acfc:	eb43 0303 	adc.w	r3, r3, r3
  40ad00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40ad04:	bf08      	it	eq
  40ad06:	3d01      	subeq	r5, #1
  40ad08:	d0f7      	beq.n	40acfa <__aeabi_dmul+0x1c6>
  40ad0a:	ea43 0306 	orr.w	r3, r3, r6
  40ad0e:	4770      	bx	lr
  40ad10:	ea94 0f0c 	teq	r4, ip
  40ad14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ad18:	bf18      	it	ne
  40ad1a:	ea95 0f0c 	teqne	r5, ip
  40ad1e:	d00c      	beq.n	40ad3a <__aeabi_dmul+0x206>
  40ad20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ad24:	bf18      	it	ne
  40ad26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ad2a:	d1d1      	bne.n	40acd0 <__aeabi_dmul+0x19c>
  40ad2c:	ea81 0103 	eor.w	r1, r1, r3
  40ad30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ad34:	f04f 0000 	mov.w	r0, #0
  40ad38:	bd70      	pop	{r4, r5, r6, pc}
  40ad3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ad3e:	bf06      	itte	eq
  40ad40:	4610      	moveq	r0, r2
  40ad42:	4619      	moveq	r1, r3
  40ad44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ad48:	d019      	beq.n	40ad7e <__aeabi_dmul+0x24a>
  40ad4a:	ea94 0f0c 	teq	r4, ip
  40ad4e:	d102      	bne.n	40ad56 <__aeabi_dmul+0x222>
  40ad50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40ad54:	d113      	bne.n	40ad7e <__aeabi_dmul+0x24a>
  40ad56:	ea95 0f0c 	teq	r5, ip
  40ad5a:	d105      	bne.n	40ad68 <__aeabi_dmul+0x234>
  40ad5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40ad60:	bf1c      	itt	ne
  40ad62:	4610      	movne	r0, r2
  40ad64:	4619      	movne	r1, r3
  40ad66:	d10a      	bne.n	40ad7e <__aeabi_dmul+0x24a>
  40ad68:	ea81 0103 	eor.w	r1, r1, r3
  40ad6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ad70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ad74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ad78:	f04f 0000 	mov.w	r0, #0
  40ad7c:	bd70      	pop	{r4, r5, r6, pc}
  40ad7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ad82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40ad86:	bd70      	pop	{r4, r5, r6, pc}

0040ad88 <__aeabi_ddiv>:
  40ad88:	b570      	push	{r4, r5, r6, lr}
  40ad8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ad8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ad92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ad96:	bf1d      	ittte	ne
  40ad98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ad9c:	ea94 0f0c 	teqne	r4, ip
  40ada0:	ea95 0f0c 	teqne	r5, ip
  40ada4:	f000 f8a7 	bleq	40aef6 <__aeabi_ddiv+0x16e>
  40ada8:	eba4 0405 	sub.w	r4, r4, r5
  40adac:	ea81 0e03 	eor.w	lr, r1, r3
  40adb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40adb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40adb8:	f000 8088 	beq.w	40aecc <__aeabi_ddiv+0x144>
  40adbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40adc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40adc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40adc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40adcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40add0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40add4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40add8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40addc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ade0:	429d      	cmp	r5, r3
  40ade2:	bf08      	it	eq
  40ade4:	4296      	cmpeq	r6, r2
  40ade6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40adea:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40adee:	d202      	bcs.n	40adf6 <__aeabi_ddiv+0x6e>
  40adf0:	085b      	lsrs	r3, r3, #1
  40adf2:	ea4f 0232 	mov.w	r2, r2, rrx
  40adf6:	1ab6      	subs	r6, r6, r2
  40adf8:	eb65 0503 	sbc.w	r5, r5, r3
  40adfc:	085b      	lsrs	r3, r3, #1
  40adfe:	ea4f 0232 	mov.w	r2, r2, rrx
  40ae02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40ae06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40ae0a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ae0e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ae12:	bf22      	ittt	cs
  40ae14:	1ab6      	subcs	r6, r6, r2
  40ae16:	4675      	movcs	r5, lr
  40ae18:	ea40 000c 	orrcs.w	r0, r0, ip
  40ae1c:	085b      	lsrs	r3, r3, #1
  40ae1e:	ea4f 0232 	mov.w	r2, r2, rrx
  40ae22:	ebb6 0e02 	subs.w	lr, r6, r2
  40ae26:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ae2a:	bf22      	ittt	cs
  40ae2c:	1ab6      	subcs	r6, r6, r2
  40ae2e:	4675      	movcs	r5, lr
  40ae30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40ae34:	085b      	lsrs	r3, r3, #1
  40ae36:	ea4f 0232 	mov.w	r2, r2, rrx
  40ae3a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ae3e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ae42:	bf22      	ittt	cs
  40ae44:	1ab6      	subcs	r6, r6, r2
  40ae46:	4675      	movcs	r5, lr
  40ae48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40ae4c:	085b      	lsrs	r3, r3, #1
  40ae4e:	ea4f 0232 	mov.w	r2, r2, rrx
  40ae52:	ebb6 0e02 	subs.w	lr, r6, r2
  40ae56:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ae5a:	bf22      	ittt	cs
  40ae5c:	1ab6      	subcs	r6, r6, r2
  40ae5e:	4675      	movcs	r5, lr
  40ae60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40ae64:	ea55 0e06 	orrs.w	lr, r5, r6
  40ae68:	d018      	beq.n	40ae9c <__aeabi_ddiv+0x114>
  40ae6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40ae6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40ae72:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40ae76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40ae7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40ae7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40ae82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40ae86:	d1c0      	bne.n	40ae0a <__aeabi_ddiv+0x82>
  40ae88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ae8c:	d10b      	bne.n	40aea6 <__aeabi_ddiv+0x11e>
  40ae8e:	ea41 0100 	orr.w	r1, r1, r0
  40ae92:	f04f 0000 	mov.w	r0, #0
  40ae96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40ae9a:	e7b6      	b.n	40ae0a <__aeabi_ddiv+0x82>
  40ae9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aea0:	bf04      	itt	eq
  40aea2:	4301      	orreq	r1, r0
  40aea4:	2000      	moveq	r0, #0
  40aea6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40aeaa:	bf88      	it	hi
  40aeac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40aeb0:	f63f aeaf 	bhi.w	40ac12 <__aeabi_dmul+0xde>
  40aeb4:	ebb5 0c03 	subs.w	ip, r5, r3
  40aeb8:	bf04      	itt	eq
  40aeba:	ebb6 0c02 	subseq.w	ip, r6, r2
  40aebe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40aec2:	f150 0000 	adcs.w	r0, r0, #0
  40aec6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40aeca:	bd70      	pop	{r4, r5, r6, pc}
  40aecc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40aed0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40aed4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40aed8:	bfc2      	ittt	gt
  40aeda:	ebd4 050c 	rsbsgt	r5, r4, ip
  40aede:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40aee2:	bd70      	popgt	{r4, r5, r6, pc}
  40aee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40aee8:	f04f 0e00 	mov.w	lr, #0
  40aeec:	3c01      	subs	r4, #1
  40aeee:	e690      	b.n	40ac12 <__aeabi_dmul+0xde>
  40aef0:	ea45 0e06 	orr.w	lr, r5, r6
  40aef4:	e68d      	b.n	40ac12 <__aeabi_dmul+0xde>
  40aef6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40aefa:	ea94 0f0c 	teq	r4, ip
  40aefe:	bf08      	it	eq
  40af00:	ea95 0f0c 	teqeq	r5, ip
  40af04:	f43f af3b 	beq.w	40ad7e <__aeabi_dmul+0x24a>
  40af08:	ea94 0f0c 	teq	r4, ip
  40af0c:	d10a      	bne.n	40af24 <__aeabi_ddiv+0x19c>
  40af0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40af12:	f47f af34 	bne.w	40ad7e <__aeabi_dmul+0x24a>
  40af16:	ea95 0f0c 	teq	r5, ip
  40af1a:	f47f af25 	bne.w	40ad68 <__aeabi_dmul+0x234>
  40af1e:	4610      	mov	r0, r2
  40af20:	4619      	mov	r1, r3
  40af22:	e72c      	b.n	40ad7e <__aeabi_dmul+0x24a>
  40af24:	ea95 0f0c 	teq	r5, ip
  40af28:	d106      	bne.n	40af38 <__aeabi_ddiv+0x1b0>
  40af2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40af2e:	f43f aefd 	beq.w	40ad2c <__aeabi_dmul+0x1f8>
  40af32:	4610      	mov	r0, r2
  40af34:	4619      	mov	r1, r3
  40af36:	e722      	b.n	40ad7e <__aeabi_dmul+0x24a>
  40af38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40af3c:	bf18      	it	ne
  40af3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40af42:	f47f aec5 	bne.w	40acd0 <__aeabi_dmul+0x19c>
  40af46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40af4a:	f47f af0d 	bne.w	40ad68 <__aeabi_dmul+0x234>
  40af4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40af52:	f47f aeeb 	bne.w	40ad2c <__aeabi_dmul+0x1f8>
  40af56:	e712      	b.n	40ad7e <__aeabi_dmul+0x24a>

0040af58 <__gedf2>:
  40af58:	f04f 3cff 	mov.w	ip, #4294967295
  40af5c:	e006      	b.n	40af6c <__cmpdf2+0x4>
  40af5e:	bf00      	nop

0040af60 <__ledf2>:
  40af60:	f04f 0c01 	mov.w	ip, #1
  40af64:	e002      	b.n	40af6c <__cmpdf2+0x4>
  40af66:	bf00      	nop

0040af68 <__cmpdf2>:
  40af68:	f04f 0c01 	mov.w	ip, #1
  40af6c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40af70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40af74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40af78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40af7c:	bf18      	it	ne
  40af7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40af82:	d01b      	beq.n	40afbc <__cmpdf2+0x54>
  40af84:	b001      	add	sp, #4
  40af86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40af8a:	bf0c      	ite	eq
  40af8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40af90:	ea91 0f03 	teqne	r1, r3
  40af94:	bf02      	ittt	eq
  40af96:	ea90 0f02 	teqeq	r0, r2
  40af9a:	2000      	moveq	r0, #0
  40af9c:	4770      	bxeq	lr
  40af9e:	f110 0f00 	cmn.w	r0, #0
  40afa2:	ea91 0f03 	teq	r1, r3
  40afa6:	bf58      	it	pl
  40afa8:	4299      	cmppl	r1, r3
  40afaa:	bf08      	it	eq
  40afac:	4290      	cmpeq	r0, r2
  40afae:	bf2c      	ite	cs
  40afb0:	17d8      	asrcs	r0, r3, #31
  40afb2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40afb6:	f040 0001 	orr.w	r0, r0, #1
  40afba:	4770      	bx	lr
  40afbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40afc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40afc4:	d102      	bne.n	40afcc <__cmpdf2+0x64>
  40afc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40afca:	d107      	bne.n	40afdc <__cmpdf2+0x74>
  40afcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40afd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40afd4:	d1d6      	bne.n	40af84 <__cmpdf2+0x1c>
  40afd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40afda:	d0d3      	beq.n	40af84 <__cmpdf2+0x1c>
  40afdc:	f85d 0b04 	ldr.w	r0, [sp], #4
  40afe0:	4770      	bx	lr
  40afe2:	bf00      	nop

0040afe4 <__aeabi_cdrcmple>:
  40afe4:	4684      	mov	ip, r0
  40afe6:	4610      	mov	r0, r2
  40afe8:	4662      	mov	r2, ip
  40afea:	468c      	mov	ip, r1
  40afec:	4619      	mov	r1, r3
  40afee:	4663      	mov	r3, ip
  40aff0:	e000      	b.n	40aff4 <__aeabi_cdcmpeq>
  40aff2:	bf00      	nop

0040aff4 <__aeabi_cdcmpeq>:
  40aff4:	b501      	push	{r0, lr}
  40aff6:	f7ff ffb7 	bl	40af68 <__cmpdf2>
  40affa:	2800      	cmp	r0, #0
  40affc:	bf48      	it	mi
  40affe:	f110 0f00 	cmnmi.w	r0, #0
  40b002:	bd01      	pop	{r0, pc}

0040b004 <__aeabi_dcmpeq>:
  40b004:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b008:	f7ff fff4 	bl	40aff4 <__aeabi_cdcmpeq>
  40b00c:	bf0c      	ite	eq
  40b00e:	2001      	moveq	r0, #1
  40b010:	2000      	movne	r0, #0
  40b012:	f85d fb08 	ldr.w	pc, [sp], #8
  40b016:	bf00      	nop

0040b018 <__aeabi_dcmplt>:
  40b018:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b01c:	f7ff ffea 	bl	40aff4 <__aeabi_cdcmpeq>
  40b020:	bf34      	ite	cc
  40b022:	2001      	movcc	r0, #1
  40b024:	2000      	movcs	r0, #0
  40b026:	f85d fb08 	ldr.w	pc, [sp], #8
  40b02a:	bf00      	nop

0040b02c <__aeabi_dcmple>:
  40b02c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b030:	f7ff ffe0 	bl	40aff4 <__aeabi_cdcmpeq>
  40b034:	bf94      	ite	ls
  40b036:	2001      	movls	r0, #1
  40b038:	2000      	movhi	r0, #0
  40b03a:	f85d fb08 	ldr.w	pc, [sp], #8
  40b03e:	bf00      	nop

0040b040 <__aeabi_dcmpge>:
  40b040:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b044:	f7ff ffce 	bl	40afe4 <__aeabi_cdrcmple>
  40b048:	bf94      	ite	ls
  40b04a:	2001      	movls	r0, #1
  40b04c:	2000      	movhi	r0, #0
  40b04e:	f85d fb08 	ldr.w	pc, [sp], #8
  40b052:	bf00      	nop

0040b054 <__aeabi_dcmpgt>:
  40b054:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b058:	f7ff ffc4 	bl	40afe4 <__aeabi_cdrcmple>
  40b05c:	bf34      	ite	cc
  40b05e:	2001      	movcc	r0, #1
  40b060:	2000      	movcs	r0, #0
  40b062:	f85d fb08 	ldr.w	pc, [sp], #8
  40b066:	bf00      	nop

0040b068 <__aeabi_dcmpun>:
  40b068:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40b06c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b070:	d102      	bne.n	40b078 <__aeabi_dcmpun+0x10>
  40b072:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40b076:	d10a      	bne.n	40b08e <__aeabi_dcmpun+0x26>
  40b078:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40b07c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b080:	d102      	bne.n	40b088 <__aeabi_dcmpun+0x20>
  40b082:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40b086:	d102      	bne.n	40b08e <__aeabi_dcmpun+0x26>
  40b088:	f04f 0000 	mov.w	r0, #0
  40b08c:	4770      	bx	lr
  40b08e:	f04f 0001 	mov.w	r0, #1
  40b092:	4770      	bx	lr

0040b094 <__aeabi_d2iz>:
  40b094:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b098:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40b09c:	d215      	bcs.n	40b0ca <__aeabi_d2iz+0x36>
  40b09e:	d511      	bpl.n	40b0c4 <__aeabi_d2iz+0x30>
  40b0a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40b0a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40b0a8:	d912      	bls.n	40b0d0 <__aeabi_d2iz+0x3c>
  40b0aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b0ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b0b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40b0b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b0ba:	fa23 f002 	lsr.w	r0, r3, r2
  40b0be:	bf18      	it	ne
  40b0c0:	4240      	negne	r0, r0
  40b0c2:	4770      	bx	lr
  40b0c4:	f04f 0000 	mov.w	r0, #0
  40b0c8:	4770      	bx	lr
  40b0ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40b0ce:	d105      	bne.n	40b0dc <__aeabi_d2iz+0x48>
  40b0d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40b0d4:	bf08      	it	eq
  40b0d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b0da:	4770      	bx	lr
  40b0dc:	f04f 0000 	mov.w	r0, #0
  40b0e0:	4770      	bx	lr
  40b0e2:	bf00      	nop

0040b0e4 <__aeabi_uldivmod>:
  40b0e4:	b953      	cbnz	r3, 40b0fc <__aeabi_uldivmod+0x18>
  40b0e6:	b94a      	cbnz	r2, 40b0fc <__aeabi_uldivmod+0x18>
  40b0e8:	2900      	cmp	r1, #0
  40b0ea:	bf08      	it	eq
  40b0ec:	2800      	cmpeq	r0, #0
  40b0ee:	bf1c      	itt	ne
  40b0f0:	f04f 31ff 	movne.w	r1, #4294967295
  40b0f4:	f04f 30ff 	movne.w	r0, #4294967295
  40b0f8:	f000 b97a 	b.w	40b3f0 <__aeabi_idiv0>
  40b0fc:	f1ad 0c08 	sub.w	ip, sp, #8
  40b100:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40b104:	f000 f806 	bl	40b114 <__udivmoddi4>
  40b108:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b10c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b110:	b004      	add	sp, #16
  40b112:	4770      	bx	lr

0040b114 <__udivmoddi4>:
  40b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b118:	468c      	mov	ip, r1
  40b11a:	460d      	mov	r5, r1
  40b11c:	4604      	mov	r4, r0
  40b11e:	9e08      	ldr	r6, [sp, #32]
  40b120:	2b00      	cmp	r3, #0
  40b122:	d151      	bne.n	40b1c8 <__udivmoddi4+0xb4>
  40b124:	428a      	cmp	r2, r1
  40b126:	4617      	mov	r7, r2
  40b128:	d96d      	bls.n	40b206 <__udivmoddi4+0xf2>
  40b12a:	fab2 fe82 	clz	lr, r2
  40b12e:	f1be 0f00 	cmp.w	lr, #0
  40b132:	d00b      	beq.n	40b14c <__udivmoddi4+0x38>
  40b134:	f1ce 0c20 	rsb	ip, lr, #32
  40b138:	fa01 f50e 	lsl.w	r5, r1, lr
  40b13c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40b140:	fa02 f70e 	lsl.w	r7, r2, lr
  40b144:	ea4c 0c05 	orr.w	ip, ip, r5
  40b148:	fa00 f40e 	lsl.w	r4, r0, lr
  40b14c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40b150:	0c25      	lsrs	r5, r4, #16
  40b152:	fbbc f8fa 	udiv	r8, ip, sl
  40b156:	fa1f f987 	uxth.w	r9, r7
  40b15a:	fb0a cc18 	mls	ip, sl, r8, ip
  40b15e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40b162:	fb08 f309 	mul.w	r3, r8, r9
  40b166:	42ab      	cmp	r3, r5
  40b168:	d90a      	bls.n	40b180 <__udivmoddi4+0x6c>
  40b16a:	19ed      	adds	r5, r5, r7
  40b16c:	f108 32ff 	add.w	r2, r8, #4294967295
  40b170:	f080 8123 	bcs.w	40b3ba <__udivmoddi4+0x2a6>
  40b174:	42ab      	cmp	r3, r5
  40b176:	f240 8120 	bls.w	40b3ba <__udivmoddi4+0x2a6>
  40b17a:	f1a8 0802 	sub.w	r8, r8, #2
  40b17e:	443d      	add	r5, r7
  40b180:	1aed      	subs	r5, r5, r3
  40b182:	b2a4      	uxth	r4, r4
  40b184:	fbb5 f0fa 	udiv	r0, r5, sl
  40b188:	fb0a 5510 	mls	r5, sl, r0, r5
  40b18c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40b190:	fb00 f909 	mul.w	r9, r0, r9
  40b194:	45a1      	cmp	r9, r4
  40b196:	d909      	bls.n	40b1ac <__udivmoddi4+0x98>
  40b198:	19e4      	adds	r4, r4, r7
  40b19a:	f100 33ff 	add.w	r3, r0, #4294967295
  40b19e:	f080 810a 	bcs.w	40b3b6 <__udivmoddi4+0x2a2>
  40b1a2:	45a1      	cmp	r9, r4
  40b1a4:	f240 8107 	bls.w	40b3b6 <__udivmoddi4+0x2a2>
  40b1a8:	3802      	subs	r0, #2
  40b1aa:	443c      	add	r4, r7
  40b1ac:	eba4 0409 	sub.w	r4, r4, r9
  40b1b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40b1b4:	2100      	movs	r1, #0
  40b1b6:	2e00      	cmp	r6, #0
  40b1b8:	d061      	beq.n	40b27e <__udivmoddi4+0x16a>
  40b1ba:	fa24 f40e 	lsr.w	r4, r4, lr
  40b1be:	2300      	movs	r3, #0
  40b1c0:	6034      	str	r4, [r6, #0]
  40b1c2:	6073      	str	r3, [r6, #4]
  40b1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b1c8:	428b      	cmp	r3, r1
  40b1ca:	d907      	bls.n	40b1dc <__udivmoddi4+0xc8>
  40b1cc:	2e00      	cmp	r6, #0
  40b1ce:	d054      	beq.n	40b27a <__udivmoddi4+0x166>
  40b1d0:	2100      	movs	r1, #0
  40b1d2:	e886 0021 	stmia.w	r6, {r0, r5}
  40b1d6:	4608      	mov	r0, r1
  40b1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b1dc:	fab3 f183 	clz	r1, r3
  40b1e0:	2900      	cmp	r1, #0
  40b1e2:	f040 808e 	bne.w	40b302 <__udivmoddi4+0x1ee>
  40b1e6:	42ab      	cmp	r3, r5
  40b1e8:	d302      	bcc.n	40b1f0 <__udivmoddi4+0xdc>
  40b1ea:	4282      	cmp	r2, r0
  40b1ec:	f200 80fa 	bhi.w	40b3e4 <__udivmoddi4+0x2d0>
  40b1f0:	1a84      	subs	r4, r0, r2
  40b1f2:	eb65 0503 	sbc.w	r5, r5, r3
  40b1f6:	2001      	movs	r0, #1
  40b1f8:	46ac      	mov	ip, r5
  40b1fa:	2e00      	cmp	r6, #0
  40b1fc:	d03f      	beq.n	40b27e <__udivmoddi4+0x16a>
  40b1fe:	e886 1010 	stmia.w	r6, {r4, ip}
  40b202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b206:	b912      	cbnz	r2, 40b20e <__udivmoddi4+0xfa>
  40b208:	2701      	movs	r7, #1
  40b20a:	fbb7 f7f2 	udiv	r7, r7, r2
  40b20e:	fab7 fe87 	clz	lr, r7
  40b212:	f1be 0f00 	cmp.w	lr, #0
  40b216:	d134      	bne.n	40b282 <__udivmoddi4+0x16e>
  40b218:	1beb      	subs	r3, r5, r7
  40b21a:	0c3a      	lsrs	r2, r7, #16
  40b21c:	fa1f fc87 	uxth.w	ip, r7
  40b220:	2101      	movs	r1, #1
  40b222:	fbb3 f8f2 	udiv	r8, r3, r2
  40b226:	0c25      	lsrs	r5, r4, #16
  40b228:	fb02 3318 	mls	r3, r2, r8, r3
  40b22c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40b230:	fb0c f308 	mul.w	r3, ip, r8
  40b234:	42ab      	cmp	r3, r5
  40b236:	d907      	bls.n	40b248 <__udivmoddi4+0x134>
  40b238:	19ed      	adds	r5, r5, r7
  40b23a:	f108 30ff 	add.w	r0, r8, #4294967295
  40b23e:	d202      	bcs.n	40b246 <__udivmoddi4+0x132>
  40b240:	42ab      	cmp	r3, r5
  40b242:	f200 80d1 	bhi.w	40b3e8 <__udivmoddi4+0x2d4>
  40b246:	4680      	mov	r8, r0
  40b248:	1aed      	subs	r5, r5, r3
  40b24a:	b2a3      	uxth	r3, r4
  40b24c:	fbb5 f0f2 	udiv	r0, r5, r2
  40b250:	fb02 5510 	mls	r5, r2, r0, r5
  40b254:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40b258:	fb0c fc00 	mul.w	ip, ip, r0
  40b25c:	45a4      	cmp	ip, r4
  40b25e:	d907      	bls.n	40b270 <__udivmoddi4+0x15c>
  40b260:	19e4      	adds	r4, r4, r7
  40b262:	f100 33ff 	add.w	r3, r0, #4294967295
  40b266:	d202      	bcs.n	40b26e <__udivmoddi4+0x15a>
  40b268:	45a4      	cmp	ip, r4
  40b26a:	f200 80b8 	bhi.w	40b3de <__udivmoddi4+0x2ca>
  40b26e:	4618      	mov	r0, r3
  40b270:	eba4 040c 	sub.w	r4, r4, ip
  40b274:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40b278:	e79d      	b.n	40b1b6 <__udivmoddi4+0xa2>
  40b27a:	4631      	mov	r1, r6
  40b27c:	4630      	mov	r0, r6
  40b27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b282:	f1ce 0420 	rsb	r4, lr, #32
  40b286:	fa05 f30e 	lsl.w	r3, r5, lr
  40b28a:	fa07 f70e 	lsl.w	r7, r7, lr
  40b28e:	fa20 f804 	lsr.w	r8, r0, r4
  40b292:	0c3a      	lsrs	r2, r7, #16
  40b294:	fa25 f404 	lsr.w	r4, r5, r4
  40b298:	ea48 0803 	orr.w	r8, r8, r3
  40b29c:	fbb4 f1f2 	udiv	r1, r4, r2
  40b2a0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40b2a4:	fb02 4411 	mls	r4, r2, r1, r4
  40b2a8:	fa1f fc87 	uxth.w	ip, r7
  40b2ac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40b2b0:	fb01 f30c 	mul.w	r3, r1, ip
  40b2b4:	42ab      	cmp	r3, r5
  40b2b6:	fa00 f40e 	lsl.w	r4, r0, lr
  40b2ba:	d909      	bls.n	40b2d0 <__udivmoddi4+0x1bc>
  40b2bc:	19ed      	adds	r5, r5, r7
  40b2be:	f101 30ff 	add.w	r0, r1, #4294967295
  40b2c2:	f080 808a 	bcs.w	40b3da <__udivmoddi4+0x2c6>
  40b2c6:	42ab      	cmp	r3, r5
  40b2c8:	f240 8087 	bls.w	40b3da <__udivmoddi4+0x2c6>
  40b2cc:	3902      	subs	r1, #2
  40b2ce:	443d      	add	r5, r7
  40b2d0:	1aeb      	subs	r3, r5, r3
  40b2d2:	fa1f f588 	uxth.w	r5, r8
  40b2d6:	fbb3 f0f2 	udiv	r0, r3, r2
  40b2da:	fb02 3310 	mls	r3, r2, r0, r3
  40b2de:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40b2e2:	fb00 f30c 	mul.w	r3, r0, ip
  40b2e6:	42ab      	cmp	r3, r5
  40b2e8:	d907      	bls.n	40b2fa <__udivmoddi4+0x1e6>
  40b2ea:	19ed      	adds	r5, r5, r7
  40b2ec:	f100 38ff 	add.w	r8, r0, #4294967295
  40b2f0:	d26f      	bcs.n	40b3d2 <__udivmoddi4+0x2be>
  40b2f2:	42ab      	cmp	r3, r5
  40b2f4:	d96d      	bls.n	40b3d2 <__udivmoddi4+0x2be>
  40b2f6:	3802      	subs	r0, #2
  40b2f8:	443d      	add	r5, r7
  40b2fa:	1aeb      	subs	r3, r5, r3
  40b2fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40b300:	e78f      	b.n	40b222 <__udivmoddi4+0x10e>
  40b302:	f1c1 0720 	rsb	r7, r1, #32
  40b306:	fa22 f807 	lsr.w	r8, r2, r7
  40b30a:	408b      	lsls	r3, r1
  40b30c:	fa05 f401 	lsl.w	r4, r5, r1
  40b310:	ea48 0303 	orr.w	r3, r8, r3
  40b314:	fa20 fe07 	lsr.w	lr, r0, r7
  40b318:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40b31c:	40fd      	lsrs	r5, r7
  40b31e:	ea4e 0e04 	orr.w	lr, lr, r4
  40b322:	fbb5 f9fc 	udiv	r9, r5, ip
  40b326:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40b32a:	fb0c 5519 	mls	r5, ip, r9, r5
  40b32e:	fa1f f883 	uxth.w	r8, r3
  40b332:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40b336:	fb09 f408 	mul.w	r4, r9, r8
  40b33a:	42ac      	cmp	r4, r5
  40b33c:	fa02 f201 	lsl.w	r2, r2, r1
  40b340:	fa00 fa01 	lsl.w	sl, r0, r1
  40b344:	d908      	bls.n	40b358 <__udivmoddi4+0x244>
  40b346:	18ed      	adds	r5, r5, r3
  40b348:	f109 30ff 	add.w	r0, r9, #4294967295
  40b34c:	d243      	bcs.n	40b3d6 <__udivmoddi4+0x2c2>
  40b34e:	42ac      	cmp	r4, r5
  40b350:	d941      	bls.n	40b3d6 <__udivmoddi4+0x2c2>
  40b352:	f1a9 0902 	sub.w	r9, r9, #2
  40b356:	441d      	add	r5, r3
  40b358:	1b2d      	subs	r5, r5, r4
  40b35a:	fa1f fe8e 	uxth.w	lr, lr
  40b35e:	fbb5 f0fc 	udiv	r0, r5, ip
  40b362:	fb0c 5510 	mls	r5, ip, r0, r5
  40b366:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40b36a:	fb00 f808 	mul.w	r8, r0, r8
  40b36e:	45a0      	cmp	r8, r4
  40b370:	d907      	bls.n	40b382 <__udivmoddi4+0x26e>
  40b372:	18e4      	adds	r4, r4, r3
  40b374:	f100 35ff 	add.w	r5, r0, #4294967295
  40b378:	d229      	bcs.n	40b3ce <__udivmoddi4+0x2ba>
  40b37a:	45a0      	cmp	r8, r4
  40b37c:	d927      	bls.n	40b3ce <__udivmoddi4+0x2ba>
  40b37e:	3802      	subs	r0, #2
  40b380:	441c      	add	r4, r3
  40b382:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40b386:	eba4 0408 	sub.w	r4, r4, r8
  40b38a:	fba0 8902 	umull	r8, r9, r0, r2
  40b38e:	454c      	cmp	r4, r9
  40b390:	46c6      	mov	lr, r8
  40b392:	464d      	mov	r5, r9
  40b394:	d315      	bcc.n	40b3c2 <__udivmoddi4+0x2ae>
  40b396:	d012      	beq.n	40b3be <__udivmoddi4+0x2aa>
  40b398:	b156      	cbz	r6, 40b3b0 <__udivmoddi4+0x29c>
  40b39a:	ebba 030e 	subs.w	r3, sl, lr
  40b39e:	eb64 0405 	sbc.w	r4, r4, r5
  40b3a2:	fa04 f707 	lsl.w	r7, r4, r7
  40b3a6:	40cb      	lsrs	r3, r1
  40b3a8:	431f      	orrs	r7, r3
  40b3aa:	40cc      	lsrs	r4, r1
  40b3ac:	6037      	str	r7, [r6, #0]
  40b3ae:	6074      	str	r4, [r6, #4]
  40b3b0:	2100      	movs	r1, #0
  40b3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b3b6:	4618      	mov	r0, r3
  40b3b8:	e6f8      	b.n	40b1ac <__udivmoddi4+0x98>
  40b3ba:	4690      	mov	r8, r2
  40b3bc:	e6e0      	b.n	40b180 <__udivmoddi4+0x6c>
  40b3be:	45c2      	cmp	sl, r8
  40b3c0:	d2ea      	bcs.n	40b398 <__udivmoddi4+0x284>
  40b3c2:	ebb8 0e02 	subs.w	lr, r8, r2
  40b3c6:	eb69 0503 	sbc.w	r5, r9, r3
  40b3ca:	3801      	subs	r0, #1
  40b3cc:	e7e4      	b.n	40b398 <__udivmoddi4+0x284>
  40b3ce:	4628      	mov	r0, r5
  40b3d0:	e7d7      	b.n	40b382 <__udivmoddi4+0x26e>
  40b3d2:	4640      	mov	r0, r8
  40b3d4:	e791      	b.n	40b2fa <__udivmoddi4+0x1e6>
  40b3d6:	4681      	mov	r9, r0
  40b3d8:	e7be      	b.n	40b358 <__udivmoddi4+0x244>
  40b3da:	4601      	mov	r1, r0
  40b3dc:	e778      	b.n	40b2d0 <__udivmoddi4+0x1bc>
  40b3de:	3802      	subs	r0, #2
  40b3e0:	443c      	add	r4, r7
  40b3e2:	e745      	b.n	40b270 <__udivmoddi4+0x15c>
  40b3e4:	4608      	mov	r0, r1
  40b3e6:	e708      	b.n	40b1fa <__udivmoddi4+0xe6>
  40b3e8:	f1a8 0802 	sub.w	r8, r8, #2
  40b3ec:	443d      	add	r5, r7
  40b3ee:	e72b      	b.n	40b248 <__udivmoddi4+0x134>

0040b3f0 <__aeabi_idiv0>:
  40b3f0:	4770      	bx	lr
  40b3f2:	bf00      	nop

0040b3f4 <mmc_trans_multipliers>:
  40b3f4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40b404:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  40b414:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  40b424:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040b434 <sd_mmc_trans_units>:
  40b434:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0040b450 <sd_trans_multipliers>:
  40b450:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40b460:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  40b470:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  40b480:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040b490 <__FUNCTION__.11436>:
  40b490:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  40b4a0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  40b4b0:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  40b4c0:	204c 6f63 6d6d 6e61 2164 000a               L command!..

0040b4cc <__FUNCTION__.9877>:
  40b4cc:	6968 5f66 6573 646e 0000 0000               hif_send....

0040b4d8 <__FUNCTION__.9887>:
  40b4d8:	6968 5f66 7369 0072                         hif_isr.

0040b4e0 <__FUNCTION__.9893>:
  40b4e0:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0040b4f0 <__FUNCTION__.9908>:
  40b4f0:	6968 5f66 6572 6563 7669 0065               hif_receive.

0040b4fc <__FUNCTION__.9923>:
  40b4fc:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
  40b50c:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
  40b51c:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
  40b52c:	6961 0a6c 0000 0000 6828 6669 2029 6461     ail.....(hif) ad
  40b53c:	7264 7365 2073 7562 2073 6166 6c69 000a     dress bus fail..
  40b54c:	6828 6669 2029 6f43 7272 7075 6574 2064     (hif) Corrupted 
  40b55c:	6170 6b63 7465 5320 7a69 2065 203d 7525     packet Size = %u
  40b56c:	3c20 204c 203d 7525 202c 2047 203d 7525      <L = %u, G = %u
  40b57c:	202c 504f 3d20 2520 3230 3e58 000a 0000     , OP = %02X>....
  40b58c:	6828 6669 2029 6e69 6176 696c 2064 7267     (hif) invalid gr
  40b59c:	756f 2070 4449 000a 6828 6669 2029 6f68     oup ID..(hif) ho
  40b5ac:	7473 6120 7070 6420 6469 276e 2074 6573     st app didn't se
  40b5bc:	2074 5852 4420 6e6f 0a65 0000 6828 6669     t RX Done...(hif
  40b5cc:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
  40b5dc:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
  40b5ec:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
  40b5fc:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
  40b60c:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
  40b61c:	6828 6669 2029 4146 4c49 7420 206f 6177     (hif) FAIL to wa
  40b62c:	656b 7075 7420 6568 6320 6968 0a70 0000     keup the chip...
  40b63c:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
  40b64c:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
  40b65c:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
  40b66c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
  40b67c:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
  40b68c:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
  40b69c:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
  40b6ac:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
  40b6bc:	6666 7265 7320 7a69 2065 253c 3e64 253c     ffer size <%d><%
  40b6cc:	3e64 000a 5041 2050 6552 7571 7365 6574     d>..APP Requeste
  40b6dc:	2064 6441 7264 7365 2073 6562 6f79 646e     d Address beyond
  40b6ec:	7420 6568 7220 6365 7669 6465 6220 6675      the recived buf
  40b6fc:	6566 2072 6461 7264 7365 2073 6e61 2064     fer address and 
  40b70c:	656c 676e 6874 000a 5247 2070 203f 6425     length..GRp ? %d
  40b71c:	000a 0000 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
  40b72c:	7720 6b61 7075 7420 6568 6320 6968 0a70      wakup the chip.
  40b73c:	0000 0000                                   ....

0040b740 <__FUNCTION__.9850>:
  40b740:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0040b74c <__FUNCTION__.9874>:
  40b74c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0040b75c <__FUNCTION__.9902>:
  40b75c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  40b76c:	735f 0063 4128 5050 2829 4e49 4f46 0029     _sc.(APP)(INFO).
  40b77c:	6f43 666e 696c 7463 6465 4920 2050 2022     Conflicted IP " 
  40b78c:	7525 252e 2e75 7525 252e 2075 2022 000a     %u.%u.%u.%u " ..
  40b79c:	4552 2051 6f4e 2074 6564 6966 656e 2064     REQ Not defined 
  40b7ac:	6425 000a 654b 2079 7369 6e20 746f 7620     %d..Key is not v
  40b7bc:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
  40b7cc:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
  40b7dc:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
  40b7ec:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
  40b7fc:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
  40b80c:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
  40b81c:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
  40b82c:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
  40b83c:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
  40b84c:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
  40b85c:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
  40b86c:	2520 2e75 7525 252e 0a75 0000 694d 206e      %u.%u.%u...Min 
  40b87c:	7264 7669 7265 7620 7265 3a20 2520 2e75     driver ver : %u.
  40b88c:	7525 252e 0a75 0000 7543 7272 6420 6972     %u.%u...Curr dri
  40b89c:	6576 2072 6576 3a72 2520 2e75 7525 252e     ver ver: %u.%u.%
  40b8ac:	0a75 0000 694d 6d73 7461 6863 4620 7269     u...Mismatch Fir
  40b8bc:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...

0040b8cc <__FUNCTION__.9687>:
  40b8cc:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.

0040b8dc <__FUNCTION__.9781>:
  40b8dc:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
  40b8ec:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  40b8fc:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  40b90c:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  40b91c:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  40b92c:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  40b93c:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  40b94c:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40b95c:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  40b96c:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40b97c:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  40b98c:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  40b99c:	000a 0000 6572 3a67 7825 2f20 2520 2078     ....reg:%x / %x 
  40b9ac:	000a 0000                                   ....

0040b9b0 <__FUNCTION__.9768>:
  40b9b0:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0040b9bc <__FUNCTION__.9775>:
  40b9bc:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
  40b9cc:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
  40b9dc:	645f 6965 696e 2074 6166 6c69 000a 0000     _deinit fail....
  40b9ec:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
  40b9fc:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
  40ba0c:	6c69 000a 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
  40ba1c:	6166 6c69 6920 696e 2074 7562 0a73 0000     fail init bus...
  40ba2c:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
  40ba3c:	6920 746e 7265 7572 7470 2e73 0a2e 0000      interrupts.....
  40ba4c:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  40ba5c:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  40ba6c:	4920 2044 6c25 0a78 0000 0000                ID %lx.....

0040ba78 <__FUNCTION__.9152>:
  40ba78:	7073 5f69 6d63 0064                         spi_cmd.

0040ba80 <__FUNCTION__.9160>:
  40ba80:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0040ba8c <__FUNCTION__.9176>:
  40ba8c:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0040ba9c <__FUNCTION__.9191>:
  40ba9c:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0040baac <__FUNCTION__.9201>:
  40baac:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0040babc <__FUNCTION__.9209>:
  40babc:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0040bacc <__FUNCTION__.9218>:
  40bacc:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0040badc <__FUNCTION__.9226>:
  40badc:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0040bae8 <__FUNCTION__.9243>:
  40bae8:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0040baf4 <crc7_syndrome_table>:
  40baf4:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  40bb04:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  40bb14:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  40bb24:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  40bb34:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  40bb44:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  40bb54:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  40bb64:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  40bb74:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  40bb84:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  40bb94:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  40bba4:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  40bbb4:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  40bbc4:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  40bbd4:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  40bbe4:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
  40bbf4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bc04:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40bc14:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  40bc24:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  40bc34:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  40bc44:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bc54:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40bc64:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  40bc74:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bc84:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  40bc94:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  40bca4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40bcb4:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  40bcc4:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  40bcd4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40bce4:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  40bcf4:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  40bd04:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40bd14:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40bd24:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  40bd34:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40bd44:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  40bd54:	7220 6165 2e64 2e2e 000a 0000 6e5b 696d      read.......[nmi
  40bd64:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40bd74:	2c64 7720 6972 6574 6220 6f6c 6b63 2820     d, write block (
  40bd84:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
  40bd94:	7320 6970 5d20 203a 6146 6c69 6465 6320      spi ]: Failed c
  40bda4:	646d 7220 7365 6f70 736e 2c65 7720 6972     md response, wri
  40bdb4:	6574 6220 6f6c 6b63 2820 3025 7838 2e29     te block (%08x).
  40bdc4:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40bdd4:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40bde4:	6320 646d 7720 6972 6574 202c 7562 2073      cmd write, bus 
  40bdf4:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  40be04:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  40be14:	6174 6220 6f6c 6b63 7720 6972 6574 202c     ta block write, 
  40be24:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  40be34:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40be44:	2064 6164 6174 6220 6f6c 6b63 6320 6372     d data block crc
  40be54:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  40be64:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  40be74:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  40be84:	6164 6174 7720 6972 6574 2e2e 0a2e 0000     data write......
  40be94:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bea4:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
  40beb4:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  40bec4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40bed4:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
  40bee4:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  40bef4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bf04:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  40bf14:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
  40bf24:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40bf34:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  40bf44:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
  40bf54:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
  40bf64:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40bf74:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
  40bf84:	2e2e 0a2e 0000 0000 6e5b 696d 7320 6970     ........[nmi spi
  40bf94:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  40bfa4:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
  40bfb4:	7375 6520 7272 726f 2e2e 0a2e 0000 0000     us error........
  40bfc4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40bfd4:	2064 6d63 2c64 7220 6165 2064 6572 2067     d cmd, read reg 
  40bfe4:	2528 3830 2978 2e2e 0a2e 0000 6e5b 696d     (%08x)......[nmi
  40bff4:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40c004:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40c014:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  40c024:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c034:	2064 6164 6174 7220 6165 2e64 2e2e 000a     d data read.....
  40c044:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c054:	2064 6d63 2c64 7720 6972 6574 7220 6765     d cmd, write reg
  40c064:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
  40c074:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40c084:	2064 6572 7073 6e6f 6573 202c 7277 7469     d response, writ
  40c094:	2065 6572 2067 2528 3830 2978 2e2e 0a2e     e reg (%08x)....
  40c0a4:	0000 0000 4528 5252 2952 7543 7272 6e65     ....(ERRR)Curren
  40c0b4:	2074 253c 3e64 000a 2d2d 5720 4e49 3143     t <%d>..-- WINC1
  40c0c4:	3035 2030 4354 2050 6573 7672 7265 6520     500 TCP server e
  40c0d4:	6178 706d 656c 2d20 0d2d 2d0a 202d 4153     xample --..-- SA
  40c0e4:	454d 3037 582d 4c50 2044 2d2d 0a0d 2d2d     ME70-XPLD --..--
  40c0f4:	4320 6d6f 6970 656c 3a64 4d20 7961 3320      Compiled: May 3
  40c104:	2030 3032 3731 3220 3a30 3733 303a 2039     0 2017 20:37:09 
  40c114:	2d2d 0a0d 0000 0000 616d 6e69 203a 326d     --......main: m2
  40c124:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
  40c134:	6520 7272 726f 2821 6425 0d29 000a 0000      error!(%d).....
  40c144:	0a0c 2d0d 202d 4453 4d2f 434d 532f 4944     ...-- SD/MMC/SDI
  40c154:	204f 6143 6472 4520 6178 706d 656c 6f20     O Card Example o
  40c164:	206e 6146 4674 2073 2d2d 0d0a 0000 0000     n FatFs --......
  40c174:	6c50 6165 6573 7020 756c 2067 6e61 5320     Please plug an S
  40c184:	2c44 4d20 434d 6f20 2072 4453 4f49 6320     D, MMC or SDIO c
  40c194:	7261 2064 6e69 7320 6f6c 2e74 0d0a 0000     ard in slot.....
  40c1a4:	6143 6472 6920 736e 6174 6c6c 4620 4941     Card install FAI
  40c1b4:	0a4c 000d 6c50 6165 6573 7520 706e 756c     L...Please unplu
  40c1c4:	2067 6e61 2064 6572 702d 756c 2067 6874     g and re-plug th
  40c1d4:	2065 6163 6472 0a2e 000d 0000 6f4d 6e75     e card......Moun
  40c1e4:	2074 6964 6b73 2820 5f66 6f6d 6e75 2974     t disk (f_mount)
  40c1f4:	2e2e 0d2e 000a 0000 465b 4941 5d4c 7220     ........[FAIL] r
  40c204:	7365 2520 0d64 000a 4f5b 5d4b 0a0d 0000     es %d...[OK]....
  40c214:	616d 6e69 203a 6166 6c69 6465 7420 206f     main: failed to 
  40c224:	7263 6165 6574 5420 5043 6320 696c 6e65     create TCP clien
  40c234:	2074 6f73 6b63 7465 6520 7272 726f 0d21     t socket error!.
  40c244:	000a 0000 616d 6e69 203a 6166 6c69 6465     ....main: failed
  40c254:	7420 206f 6f63 6e6e 6365 2074 6f73 6b63      to connect sock
  40c264:	7465 6520 7272 726f 0d21 000a 6f43 656e     et error!...Cone
  40c274:	7463 6461 206f 2021 000a 0000 4820 5454     ctado ! .... HTT
  40c284:	2f50 2e31 0d31 200a 6341 6563 7470 203a     P/1.1.. Accept: 
  40c294:	2f2a 0d2a 0d0a 000a 4547 2054 662f 6c69     */*.....GET /fil
  40c2a4:	2f65 6574 7473 2e65 7874 0074 7325 7325     e/teste.txt.%s%s
  40c2b4:	0000 0000 6f73 6b63 7465 635f 3a62 6320     ....socket_cb: c
  40c2c4:	6e6f 656e 7463 7320 6375 6563 7373 0d21     onnect success!.
  40c2d4:	000a 0000 6f73 6b63 7465 635f 3a62 6320     ....socket_cb: c
  40c2e4:	6e6f 656e 7463 6520 7272 726f 0d21 000a     onnect error!...
  40c2f4:	6f73 6b63 7465 635f 3a62 7320 6e65 2064     socket_cb: send 
  40c304:	7573 6363 7365 2173 0a0d 0000 2d20 2d2d     success!.... ---
  40c314:	2d2d 2d2d 2d2d 202d 200a 6e43 2074 203a     ------- . Cnt : 
  40c324:	6425 0a20 2d20 2d2d 2d2d 2d2d 2d2d 2d2d     %d . -----------
  40c334:	000a 0000 6f73 6b63 7465 635f 3a62 7220     ....socket_cb: r
  40c344:	6365 2076 7265 6f72 2172 0a0d 0000 0000     ecv error!......
  40c354:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
  40c364:	5f49 4552 5053 435f 4e4f 535f 4154 4554     I_RESP_CON_STATE
  40c374:	435f 4148 474e 4445 203a 4f43 4e4e 4345     _CHANGED: CONNEC
  40c384:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
  40c394:	4d20 4d32 575f 4649 5f49 4552 5053 435f      M2M_WIFI_RESP_C
  40c3a4:	4e4f 535f 4154 4554 435f 4148 474e 4445     ON_STATE_CHANGED
  40c3b4:	203a 4944 4353 4e4f 454e 5443 4445 0a0d     : DISCONNECTED..
  40c3c4:	0000 0000 6d61 6d61 6d66 3031 0000 0000     ....amamfm10....
  40c3d4:	6146 696d 796c 2e32 0034 0000 6977 6966     Family2.4...wifi
  40c3e4:	635f 3a62 4d20 4d32 575f 4649 5f49 4552     _cb: M2M_WIFI_RE
  40c3f4:	5f51 4844 5043 435f 4e4f 3a46 4920 2050     Q_DHCP_CONF: IP 
  40c404:	7369 2520 2e75 7525 252e 2e75 7525 0a0d     is %u.%u.%u.%u..
  40c414:	0000 0000                                   ....

0040c418 <_global_impure_ptr>:
  40c418:	0048 2040 4e49 0046 6e69 0066 414e 004e     H.@ INF.inf.NAN.
  40c428:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40c438:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40c448:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40c458:	296c 0000 0030 0000                         l)..0...

0040c460 <blanks.7208>:
  40c460:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040c470 <zeroes.7209>:
  40c470:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040c480 <blanks.7202>:
  40c480:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040c490 <zeroes.7203>:
  40c490:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40c4a0:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40c4b0:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040c4c0 <__mprec_bigtens>:
  40c4c0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40c4d0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40c4e0:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040c4e8 <__mprec_tens>:
  40c4e8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40c4f8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40c508:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40c518:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40c528:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40c538:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40c548:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40c558:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40c568:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40c578:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40c588:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40c598:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40c5a8:	9db4 79d9 7843 44ea                         ...yCx.D

0040c5b0 <p05.6040>:
  40c5b0:	0005 0000 0019 0000 007d 0000               ........}...

0040c5bc <_ctype_>:
  40c5bc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40c5cc:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40c5dc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40c5ec:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40c5fc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40c60c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40c61c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40c62c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40c63c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040c6c0 <_init>:
  40c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c6c2:	bf00      	nop
  40c6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c6c6:	bc08      	pop	{r3}
  40c6c8:	469e      	mov	lr, r3
  40c6ca:	4770      	bx	lr

0040c6cc <__init_array_start>:
  40c6cc:	0040771d 	.word	0x0040771d

0040c6d0 <__frame_dummy_init_array_entry>:
  40c6d0:	00400165                                e.@.

0040c6d4 <_fini>:
  40c6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c6d6:	bf00      	nop
  40c6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c6da:	bc08      	pop	{r3}
  40c6dc:	469e      	mov	lr, r3
  40c6de:	4770      	bx	lr

0040c6e0 <__fini_array_start>:
  40c6e0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <egstrNmBusCapabilities>:
20400030:	1000 0000                                   ....

20400034 <clk_status_reg_adr>:
20400034:	000f 0000                                   ....

20400038 <g_interrupt_enabled>:
20400038:	0001 0000                                   ....

2040003c <SystemCoreClock>:
2040003c:	0900 003d                                   ..=.

20400040 <tcp_client_socket>:
20400040:	00ff 0000                                   ....

20400044 <_impure_ptr>:
20400044:	0048 2040                                   H.@ 

20400048 <impure_data>:
20400048:	0000 0000 0334 2040 039c 2040 0404 2040     ....4.@ ..@ ..@ 
	...
204000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400470 <__global_locale>:
20400470:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400490:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400510:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400530:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400550:	a531 0040 966d 0040 0000 0000 c5bc 0040     1.@.m.@.......@.
20400560:	c4bc 0040 c350 0040 c350 0040 c350 0040     ..@.P.@.P.@.P.@.
20400570:	c350 0040 c350 0040 c350 0040 c350 0040     P.@.P.@.P.@.P.@.
20400580:	c350 0040 c350 0040 ffff ffff ffff ffff     P.@.P.@.........
20400590:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005b8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005dc <__malloc_av_>:
	...
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 
20400854:	084c 2040 084c 2040 0854 2040 0854 2040     L.@ L.@ T.@ T.@ 
20400864:	085c 2040 085c 2040 0864 2040 0864 2040     \.@ \.@ d.@ d.@ 
20400874:	086c 2040 086c 2040 0874 2040 0874 2040     l.@ l.@ t.@ t.@ 
20400884:	087c 2040 087c 2040 0884 2040 0884 2040     |.@ |.@ ..@ ..@ 
20400894:	088c 2040 088c 2040 0894 2040 0894 2040     ..@ ..@ ..@ ..@ 
204008a4:	089c 2040 089c 2040 08a4 2040 08a4 2040     ..@ ..@ ..@ ..@ 
204008b4:	08ac 2040 08ac 2040 08b4 2040 08b4 2040     ..@ ..@ ..@ ..@ 
204008c4:	08bc 2040 08bc 2040 08c4 2040 08c4 2040     ..@ ..@ ..@ ..@ 
204008d4:	08cc 2040 08cc 2040 08d4 2040 08d4 2040     ..@ ..@ ..@ ..@ 
204008e4:	08dc 2040 08dc 2040 08e4 2040 08e4 2040     ..@ ..@ ..@ ..@ 
204008f4:	08ec 2040 08ec 2040 08f4 2040 08f4 2040     ..@ ..@ ..@ ..@ 
20400904:	08fc 2040 08fc 2040 0904 2040 0904 2040     ..@ ..@ ..@ ..@ 
20400914:	090c 2040 090c 2040 0914 2040 0914 2040     ..@ ..@ ..@ ..@ 
20400924:	091c 2040 091c 2040 0924 2040 0924 2040     ..@ ..@ $.@ $.@ 
20400934:	092c 2040 092c 2040 0934 2040 0934 2040     ,.@ ,.@ 4.@ 4.@ 
20400944:	093c 2040 093c 2040 0944 2040 0944 2040     <.@ <.@ D.@ D.@ 
20400954:	094c 2040 094c 2040 0954 2040 0954 2040     L.@ L.@ T.@ T.@ 
20400964:	095c 2040 095c 2040 0964 2040 0964 2040     \.@ \.@ d.@ d.@ 
20400974:	096c 2040 096c 2040 0974 2040 0974 2040     l.@ l.@ t.@ t.@ 
20400984:	097c 2040 097c 2040 0984 2040 0984 2040     |.@ |.@ ..@ ..@ 
20400994:	098c 2040 098c 2040 0994 2040 0994 2040     ..@ ..@ ..@ ..@ 
204009a4:	099c 2040 099c 2040 09a4 2040 09a4 2040     ..@ ..@ ..@ ..@ 
204009b4:	09ac 2040 09ac 2040 09b4 2040 09b4 2040     ..@ ..@ ..@ ..@ 
204009c4:	09bc 2040 09bc 2040 09c4 2040 09c4 2040     ..@ ..@ ..@ ..@ 
204009d4:	09cc 2040 09cc 2040 09d4 2040 09d4 2040     ..@ ..@ ..@ ..@ 

204009e4 <__malloc_sbrk_base>:
204009e4:	ffff ffff                                   ....

204009e8 <__malloc_trim_threshold>:
204009e8:	0000 0002                                   ....
