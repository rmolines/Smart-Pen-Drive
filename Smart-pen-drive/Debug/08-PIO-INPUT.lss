
08-PIO-INPUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007774  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407774  00407774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000884  20400000  0040777c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000011c  20400884  00408000  00020884  2**2
                  ALLOC
  4 .stack        00002000  204009a0  0040811c  00020884  2**0
                  ALLOC
  5 .heap         00000200  204029a0  0040a11c  00020884  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208b2  2**0
                  CONTENTS, READONLY
  8 .debug_info   00018eda  00000000  00000000  0002090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003a51  00000000  00000000  000397e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b684  00000000  00000000  0003d236  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f88  00000000  00000000  000488ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f98  00000000  00000000  00049842  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023941  00000000  00000000  0004a7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001428e  00000000  00000000  0006e11b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00090553  00000000  00000000  000823a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003340  00000000  00000000  001128fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	204029a0 	.word	0x204029a0
  400004:	00403029 	.word	0x00403029
  400008:	00403025 	.word	0x00403025
  40000c:	00403025 	.word	0x00403025
  400010:	00403025 	.word	0x00403025
  400014:	00403025 	.word	0x00403025
  400018:	00403025 	.word	0x00403025
	...
  40002c:	00403025 	.word	0x00403025
  400030:	00403025 	.word	0x00403025
  400034:	00000000 	.word	0x00000000
  400038:	00403025 	.word	0x00403025
  40003c:	00403025 	.word	0x00403025
  400040:	00403025 	.word	0x00403025
  400044:	00403025 	.word	0x00403025
  400048:	00403025 	.word	0x00403025
  40004c:	00403025 	.word	0x00403025
  400050:	00403025 	.word	0x00403025
  400054:	00403025 	.word	0x00403025
  400058:	00403025 	.word	0x00403025
  40005c:	00403025 	.word	0x00403025
  400060:	00403025 	.word	0x00403025
  400064:	00000000 	.word	0x00000000
  400068:	00402b2d 	.word	0x00402b2d
  40006c:	00402b41 	.word	0x00402b41
  400070:	00402b55 	.word	0x00402b55
  400074:	00403025 	.word	0x00403025
  400078:	00403025 	.word	0x00403025
  40007c:	00403025 	.word	0x00403025
  400080:	00402b69 	.word	0x00402b69
  400084:	00402b7d 	.word	0x00402b7d
  400088:	00403025 	.word	0x00403025
  40008c:	00403025 	.word	0x00403025
  400090:	00403025 	.word	0x00403025
  400094:	00403025 	.word	0x00403025
  400098:	00403025 	.word	0x00403025
  40009c:	00403025 	.word	0x00403025
  4000a0:	00403025 	.word	0x00403025
  4000a4:	00403025 	.word	0x00403025
  4000a8:	00403025 	.word	0x00403025
  4000ac:	00403025 	.word	0x00403025
  4000b0:	00403025 	.word	0x00403025
  4000b4:	00403025 	.word	0x00403025
  4000b8:	00403025 	.word	0x00403025
  4000bc:	00403025 	.word	0x00403025
  4000c0:	00403025 	.word	0x00403025
  4000c4:	00403025 	.word	0x00403025
  4000c8:	00403025 	.word	0x00403025
  4000cc:	00403025 	.word	0x00403025
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00403025 	.word	0x00403025
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00403025 	.word	0x00403025
  4000e0:	00403025 	.word	0x00403025
  4000e4:	00403025 	.word	0x00403025
  4000e8:	00403025 	.word	0x00403025
  4000ec:	00403025 	.word	0x00403025
  4000f0:	00403025 	.word	0x00403025
  4000f4:	00403025 	.word	0x00403025
  4000f8:	00403025 	.word	0x00403025
  4000fc:	00403025 	.word	0x00403025
  400100:	00403025 	.word	0x00403025
  400104:	00403025 	.word	0x00403025
  400108:	00403025 	.word	0x00403025
  40010c:	00403025 	.word	0x00403025
  400110:	00403025 	.word	0x00403025
	...
  400120:	00403025 	.word	0x00403025
  400124:	00403025 	.word	0x00403025
  400128:	00403025 	.word	0x00403025
  40012c:	00403025 	.word	0x00403025
  400130:	00403025 	.word	0x00403025
  400134:	00000000 	.word	0x00000000
  400138:	00403025 	.word	0x00403025
  40013c:	00403025 	.word	0x00403025

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400884 	.word	0x20400884
  40015c:	00000000 	.word	0x00000000
  400160:	0040777c 	.word	0x0040777c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400888 	.word	0x20400888
  400190:	0040777c 	.word	0x0040777c
  400194:	0040777c 	.word	0x0040777c
  400198:	00000000 	.word	0x00000000

0040019c <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40019c:	2810      	cmp	r0, #16
  40019e:	d108      	bne.n	4001b2 <chip_isr+0x16>
  4001a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4001a4:	d105      	bne.n	4001b2 <chip_isr+0x16>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  4001a6:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  4001a8:	4b02      	ldr	r3, [pc, #8]	; (4001b4 <chip_isr+0x18>)
  4001aa:	681b      	ldr	r3, [r3, #0]
  4001ac:	b103      	cbz	r3, 4001b0 <chip_isr+0x14>
			gpfIsr();
  4001ae:	4798      	blx	r3
  4001b0:	bd08      	pop	{r3, pc}
  4001b2:	4770      	bx	lr
  4001b4:	204008a0 	.word	0x204008a0

004001b8 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001b8:	b140      	cbz	r0, 4001cc <nm_bsp_sleep+0x14>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  4001ba:	b570      	push	{r4, r5, r6, lr}
  4001bc:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(4);
  4001be:	4e04      	ldr	r6, [pc, #16]	; (4001d0 <nm_bsp_sleep+0x18>)
  4001c0:	4d04      	ldr	r5, [pc, #16]	; (4001d4 <nm_bsp_sleep+0x1c>)
  4001c2:	4630      	mov	r0, r6
  4001c4:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4001c6:	3c01      	subs	r4, #1
  4001c8:	d1fb      	bne.n	4001c2 <nm_bsp_sleep+0xa>
  4001ca:	bd70      	pop	{r4, r5, r6, pc}
  4001cc:	4770      	bx	lr
  4001ce:	bf00      	nop
  4001d0:	00031635 	.word	0x00031635
  4001d4:	20400001 	.word	0x20400001

004001d8 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  4001d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001dc:	4f09      	ldr	r7, [pc, #36]	; (400204 <nm_bsp_reset+0x2c>)
  4001de:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4001e2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4001e6:	4d08      	ldr	r5, [pc, #32]	; (400208 <nm_bsp_reset+0x30>)
  4001e8:	2608      	movs	r6, #8
  4001ea:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	nm_bsp_sleep(100);
  4001ec:	2064      	movs	r0, #100	; 0x64
  4001ee:	4c07      	ldr	r4, [pc, #28]	; (40020c <nm_bsp_reset+0x34>)
  4001f0:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001f2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001f6:	2064      	movs	r0, #100	; 0x64
  4001f8:	47a0      	blx	r4
  4001fa:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4001fc:	2064      	movs	r0, #100	; 0x64
  4001fe:	47a0      	blx	r4
  400200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400204:	400e1200 	.word	0x400e1200
  400208:	400e1000 	.word	0x400e1000
  40020c:	004001b9 	.word	0x004001b9

00400210 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  400210:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  400212:	2200      	movs	r2, #0
  400214:	4b14      	ldr	r3, [pc, #80]	; (400268 <nm_bsp_init+0x58>)
  400216:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400218:	200a      	movs	r0, #10
  40021a:	4c14      	ldr	r4, [pc, #80]	; (40026c <nm_bsp_init+0x5c>)
  40021c:	47a0      	blx	r4
  40021e:	200b      	movs	r0, #11
  400220:	47a0      	blx	r4
  400222:	200c      	movs	r0, #12
  400224:	47a0      	blx	r4
  400226:	2010      	movs	r0, #16
  400228:	47a0      	blx	r4
  40022a:	2011      	movs	r0, #17
  40022c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40022e:	4b10      	ldr	r3, [pc, #64]	; (400270 <nm_bsp_init+0x60>)
  400230:	2208      	movs	r2, #8
  400232:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400234:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400238:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40023a:	4a0e      	ldr	r2, [pc, #56]	; (400274 <nm_bsp_init+0x64>)
  40023c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400240:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400242:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400246:	6311      	str	r1, [r2, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400248:	2204      	movs	r2, #4
  40024a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40024c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400250:	631a      	str	r2, [r3, #48]	; 0x30

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  400252:	4b09      	ldr	r3, [pc, #36]	; (400278 <nm_bsp_init+0x68>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	f013 0f01 	tst.w	r3, #1
  40025a:	d001      	beq.n	400260 <nm_bsp_init+0x50>
  40025c:	4b06      	ldr	r3, [pc, #24]	; (400278 <nm_bsp_init+0x68>)
  40025e:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  400260:	4b06      	ldr	r3, [pc, #24]	; (40027c <nm_bsp_init+0x6c>)
  400262:	4798      	blx	r3

	return 0;
}
  400264:	2000      	movs	r0, #0
  400266:	bd10      	pop	{r4, pc}
  400268:	204008a0 	.word	0x204008a0
  40026c:	00402d3d 	.word	0x00402d3d
  400270:	400e1000 	.word	0x400e1000
  400274:	400e1200 	.word	0x400e1200
  400278:	e000e010 	.word	0xe000e010
  40027c:	004001d9 	.word	0x004001d9

00400280 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  400280:	b530      	push	{r4, r5, lr}
  400282:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  400284:	4b14      	ldr	r3, [pc, #80]	; (4002d8 <nm_bsp_register_isr+0x58>)
  400286:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  400288:	2010      	movs	r0, #16
  40028a:	4b14      	ldr	r3, [pc, #80]	; (4002dc <nm_bsp_register_isr+0x5c>)
  40028c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40028e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400292:	207c      	movs	r0, #124	; 0x7c
  400294:	4b12      	ldr	r3, [pc, #72]	; (4002e0 <nm_bsp_register_isr+0x60>)
  400296:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  400298:	4c12      	ldr	r4, [pc, #72]	; (4002e4 <nm_bsp_register_isr+0x64>)
  40029a:	2201      	movs	r2, #1
  40029c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002a0:	4620      	mov	r0, r4
  4002a2:	4b11      	ldr	r3, [pc, #68]	; (4002e8 <nm_bsp_register_isr+0x68>)
  4002a4:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  4002a6:	4b11      	ldr	r3, [pc, #68]	; (4002ec <nm_bsp_register_isr+0x6c>)
  4002a8:	9300      	str	r3, [sp, #0]
  4002aa:	2351      	movs	r3, #81	; 0x51
  4002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b0:	2110      	movs	r1, #16
  4002b2:	4620      	mov	r0, r4
  4002b4:	4d0e      	ldr	r5, [pc, #56]	; (4002f0 <nm_bsp_register_isr+0x70>)
  4002b6:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4002b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002bc:	4620      	mov	r0, r4
  4002be:	4b0d      	ldr	r3, [pc, #52]	; (4002f4 <nm_bsp_register_isr+0x74>)
  4002c0:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4002c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002c6:	4b0c      	ldr	r3, [pc, #48]	; (4002f8 <nm_bsp_register_isr+0x78>)
  4002c8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4002ca:	2200      	movs	r2, #0
  4002cc:	2110      	movs	r1, #16
  4002ce:	4620      	mov	r0, r4
  4002d0:	4b0a      	ldr	r3, [pc, #40]	; (4002fc <nm_bsp_register_isr+0x7c>)
  4002d2:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4002d4:	b003      	add	sp, #12
  4002d6:	bd30      	pop	{r4, r5, pc}
  4002d8:	204008a0 	.word	0x204008a0
  4002dc:	00402d3d 	.word	0x00402d3d
  4002e0:	0040293d 	.word	0x0040293d
  4002e4:	400e1400 	.word	0x400e1400
  4002e8:	004027f9 	.word	0x004027f9
  4002ec:	0040019d 	.word	0x0040019d
  4002f0:	00402ac1 	.word	0x00402ac1
  4002f4:	0040292d 	.word	0x0040292d
  4002f8:	e000e100 	.word	0xe000e100
  4002fc:	00402b91 	.word	0x00402b91

00400300 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  400300:	b508      	push	{r3, lr}
	if (u8Enable) {
  400302:	b128      	cbz	r0, 400310 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400304:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400308:	4804      	ldr	r0, [pc, #16]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  40030a:	4b05      	ldr	r3, [pc, #20]	; (400320 <nm_bsp_interrupt_ctrl+0x20>)
  40030c:	4798      	blx	r3
  40030e:	bd08      	pop	{r3, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  400310:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400314:	4801      	ldr	r0, [pc, #4]	; (40031c <nm_bsp_interrupt_ctrl+0x1c>)
  400316:	4b03      	ldr	r3, [pc, #12]	; (400324 <nm_bsp_interrupt_ctrl+0x24>)
  400318:	4798      	blx	r3
  40031a:	bd08      	pop	{r3, pc}
  40031c:	400e1400 	.word	0x400e1400
  400320:	0040292d 	.word	0x0040292d
  400324:	00402931 	.word	0x00402931

00400328 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  400328:	b538      	push	{r3, r4, r5, lr}
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40032a:	4b3c      	ldr	r3, [pc, #240]	; (40041c <nm_bus_init+0xf4>)
  40032c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  400330:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400332:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400336:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400338:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40033a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40033e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400340:	4322      	orrs	r2, r4
  400342:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400344:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400346:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40034a:	675a      	str	r2, [r3, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40034c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400350:	6618      	str	r0, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400352:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400356:	6558      	str	r0, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400358:	6258      	str	r0, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40035a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40035e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400360:	4302      	orrs	r2, r0
  400362:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400364:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400366:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40036a:	675a      	str	r2, [r3, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40036c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  400370:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400372:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400376:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400378:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40037a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40037e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400380:	430a      	orrs	r2, r1
  400382:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400384:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400386:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  40038a:	675a      	str	r2, [r3, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40038c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400390:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400396:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400398:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40039a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40039e:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  4003a0:	4315      	orrs	r5, r2
  4003a2:	671d      	str	r5, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003a4:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  4003a6:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
  4003aa:	675d      	str	r5, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ac:	605c      	str	r4, [r3, #4]
  4003ae:	6058      	str	r0, [r3, #4]
  4003b0:	6059      	str	r1, [r3, #4]
  4003b2:	605a      	str	r2, [r3, #4]
	ioport_disable_pin(CONF_WINC_SPI_MISO_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);

	spi_enable_clock(CONF_WINC_SPI);
  4003b4:	4c1a      	ldr	r4, [pc, #104]	; (400420 <nm_bus_init+0xf8>)
  4003b6:	4620      	mov	r0, r4
  4003b8:	4b1a      	ldr	r3, [pc, #104]	; (400424 <nm_bus_init+0xfc>)
  4003ba:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4003bc:	2302      	movs	r3, #2
  4003be:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4003c0:	2380      	movs	r3, #128	; 0x80
  4003c2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4003c4:	6863      	ldr	r3, [r4, #4]
  4003c6:	f043 0301 	orr.w	r3, r3, #1
  4003ca:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4003cc:	6863      	ldr	r3, [r4, #4]
  4003ce:	f043 0310 	orr.w	r3, r3, #16
  4003d2:	6063      	str	r3, [r4, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4003d4:	2101      	movs	r1, #1
  4003d6:	4620      	mov	r0, r4
  4003d8:	4b13      	ldr	r3, [pc, #76]	; (400428 <nm_bus_init+0x100>)
  4003da:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4003dc:	2200      	movs	r2, #0
  4003de:	2101      	movs	r1, #1
  4003e0:	4620      	mov	r0, r4
  4003e2:	4b12      	ldr	r3, [pc, #72]	; (40042c <nm_bus_init+0x104>)
  4003e4:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4003e6:	2201      	movs	r2, #1
  4003e8:	4611      	mov	r1, r2
  4003ea:	4620      	mov	r0, r4
  4003ec:	4b10      	ldr	r3, [pc, #64]	; (400430 <nm_bus_init+0x108>)
  4003ee:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4003f0:	2200      	movs	r2, #0
  4003f2:	2101      	movs	r1, #1
  4003f4:	4620      	mov	r0, r4
  4003f6:	4b0f      	ldr	r3, [pc, #60]	; (400434 <nm_bus_init+0x10c>)
  4003f8:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4003fa:	2206      	movs	r2, #6
  4003fc:	2101      	movs	r1, #1
  4003fe:	4620      	mov	r0, r4
  400400:	4b0d      	ldr	r3, [pc, #52]	; (400438 <nm_bus_init+0x110>)
  400402:	4798      	blx	r3
			(sysclk_get_cpu_hz() / CONF_WINC_SPI_CLOCK));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  400404:	2300      	movs	r3, #0
  400406:	461a      	mov	r2, r3
  400408:	2101      	movs	r1, #1
  40040a:	4620      	mov	r0, r4
  40040c:	4d0b      	ldr	r5, [pc, #44]	; (40043c <nm_bus_init+0x114>)
  40040e:	47a8      	blx	r5
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400410:	2301      	movs	r3, #1
  400412:	6023      	str	r3, [r4, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);

	nm_bsp_reset();
  400414:	4b0a      	ldr	r3, [pc, #40]	; (400440 <nm_bus_init+0x118>)
  400416:	4798      	blx	r3
#endif
	return result;
}
  400418:	2000      	movs	r0, #0
  40041a:	bd38      	pop	{r3, r4, r5, pc}
  40041c:	400e1400 	.word	0x400e1400
  400420:	40008000 	.word	0x40008000
  400424:	00402d91 	.word	0x00402d91
  400428:	00402dbd 	.word	0x00402dbd
  40042c:	00402e41 	.word	0x00402e41
  400430:	00402e61 	.word	0x00402e61
  400434:	00402e81 	.word	0x00402e81
  400438:	00402e95 	.word	0x00402e95
  40043c:	00402ec1 	.word	0x00402ec1
  400440:	004001d9 	.word	0x004001d9

00400444 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  400444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400448:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40044a:	2803      	cmp	r0, #3
  40044c:	d13b      	bne.n	4004c6 <nm_bus_ioctl+0x82>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40044e:	680e      	ldr	r6, [r1, #0]
  400450:	684d      	ldr	r5, [r1, #4]
  400452:	890c      	ldrh	r4, [r1, #8]

#ifdef CONF_WINC_USE_SPI

static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
  400454:	2300      	movs	r3, #0
  400456:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
  40045a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  40045e:	b966      	cbnz	r6, 40047a <nm_bus_ioctl+0x36>
#ifdef CONF_WINC_USE_SPI

static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  400460:	4699      	mov	r9, r3
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
  400462:	f04f 0801 	mov.w	r8, #1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
  400466:	ae01      	add	r6, sp, #4
  400468:	e004      	b.n	400474 <nm_bus_ioctl+0x30>
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
  40046a:	f04f 0901 	mov.w	r9, #1
#ifdef CONF_WINC_USE_SPI

static sint8 spi_rw(uint8 *pu8Mosi, uint8 *pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40046e:	f04f 0800 	mov.w	r8, #0
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
  400472:	ad01      	add	r5, sp, #4
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}

	while (u16Sz) {
  400474:	b934      	cbnz	r4, 400484 <nm_bus_ioctl+0x40>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	return M2M_SUCCESS;
  400476:	2000      	movs	r0, #0
  400478:	e030      	b.n	4004dc <nm_bus_ioctl+0x98>

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
  40047a:	2d00      	cmp	r5, #0
  40047c:	d0f5      	beq.n	40046a <nm_bus_ioctl+0x26>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
  40047e:	f06f 0005 	mvn.w	r0, #5
  400482:	e02b      	b.n	4004dc <nm_bus_ioctl+0x98>
	}

	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  400484:	4f17      	ldr	r7, [pc, #92]	; (4004e4 <nm_bus_ioctl+0xa0>)
  400486:	f8df b074 	ldr.w	fp, [pc, #116]	; 4004fc <nm_bus_ioctl+0xb8>

		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40048a:	f8df a074 	ldr.w	sl, [pc, #116]	; 400500 <nm_bus_ioctl+0xbc>
		return M2M_ERR_BUS_FAIL;
	}

	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40048e:	2300      	movs	r3, #0
  400490:	461a      	mov	r2, r3
  400492:	7831      	ldrb	r1, [r6, #0]
  400494:	4638      	mov	r0, r7
  400496:	47d8      	blx	fp

		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  400498:	f10d 0205 	add.w	r2, sp, #5
  40049c:	f10d 0106 	add.w	r1, sp, #6
  4004a0:	4638      	mov	r0, r7
  4004a2:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4004a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4004a8:	702b      	strb	r3, [r5, #0]

		u16Sz--;
  4004aa:	3c01      	subs	r4, #1
  4004ac:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4004ae:	f1b9 0f00 	cmp.w	r9, #0
  4004b2:	d100      	bne.n	4004b6 <nm_bus_ioctl+0x72>
			pu8Miso++;
  4004b4:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4004b6:	f1b8 0f00 	cmp.w	r8, #0
  4004ba:	d100      	bne.n	4004be <nm_bus_ioctl+0x7a>
			pu8Mosi++;
  4004bc:	3601      	adds	r6, #1
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}

	while (u16Sz) {
  4004be:	2c00      	cmp	r4, #0
  4004c0:	d1e5      	bne.n	40048e <nm_bus_ioctl+0x4a>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	return M2M_SUCCESS;
  4004c2:	2000      	movs	r0, #0
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
  4004c4:	e00a      	b.n	4004dc <nm_bus_ioctl+0x98>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("Invalid IOCTL command!\n");
  4004c6:	22ff      	movs	r2, #255	; 0xff
  4004c8:	4907      	ldr	r1, [pc, #28]	; (4004e8 <nm_bus_ioctl+0xa4>)
  4004ca:	4808      	ldr	r0, [pc, #32]	; (4004ec <nm_bus_ioctl+0xa8>)
  4004cc:	4c08      	ldr	r4, [pc, #32]	; (4004f0 <nm_bus_ioctl+0xac>)
  4004ce:	47a0      	blx	r4
  4004d0:	4808      	ldr	r0, [pc, #32]	; (4004f4 <nm_bus_ioctl+0xb0>)
  4004d2:	47a0      	blx	r4
  4004d4:	4808      	ldr	r0, [pc, #32]	; (4004f8 <nm_bus_ioctl+0xb4>)
  4004d6:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  4004d8:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4004dc:	b003      	add	sp, #12
  4004de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004e2:	bf00      	nop
  4004e4:	40008000 	.word	0x40008000
  4004e8:	004067c0 	.word	0x004067c0
  4004ec:	00406790 	.word	0x00406790
  4004f0:	00403711 	.word	0x00403711
  4004f4:	004067a4 	.word	0x004067a4
  4004f8:	004067bc 	.word	0x004067bc
  4004fc:	00402e09 	.word	0x00402e09
  400500:	00402dd5 	.word	0x00402dd5

00400504 <nm_bus_deinit>:
 *	@brief	De-initialize the bus wrapper
 */
sint8 nm_bus_deinit(void)
{
	return M2M_SUCCESS;
}
  400504:	2000      	movs	r0, #0
  400506:	4770      	bx	lr

00400508 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  400508:	b13a      	cbz	r2, 40051a <m2m_memcpy+0x12>
  40050a:	3901      	subs	r1, #1
  40050c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40050e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  400512:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  400516:	4290      	cmp	r0, r2
  400518:	d1f9      	bne.n	40050e <m2m_memcpy+0x6>
  40051a:	4770      	bx	lr

0040051c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  40051c:	b122      	cbz	r2, 400528 <m2m_memset+0xc>
  40051e:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  400520:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  400524:	4290      	cmp	r0, r2
  400526:	d1fb      	bne.n	400520 <m2m_memset+0x4>
  400528:	4770      	bx	lr
  40052a:	bf00      	nop

0040052c <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  40052c:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  40052e:	7802      	ldrb	r2, [r0, #0]
  400530:	b13a      	cbz	r2, 400542 <m2m_strlen+0x16>
  400532:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  400534:	3001      	adds	r0, #1
  400536:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  400538:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40053c:	2a00      	cmp	r2, #0
  40053e:	d1f9      	bne.n	400534 <m2m_strlen+0x8>
  400540:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  400542:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  400544:	4770      	bx	lr
  400546:	bf00      	nop

00400548 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  400548:	4a02      	ldr	r2, [pc, #8]	; (400554 <isr+0xc>)
  40054a:	7813      	ldrb	r3, [r2, #0]
  40054c:	3301      	adds	r3, #1
  40054e:	b2db      	uxtb	r3, r3
  400550:	7013      	strb	r3, [r2, #0]
  400552:	4770      	bx	lr
  400554:	204008ac 	.word	0x204008ac

00400558 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400558:	4770      	bx	lr
  40055a:	bf00      	nop

0040055c <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
  40055c:	b500      	push	{lr}
  40055e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  400560:	2001      	movs	r0, #1
  400562:	4b0b      	ldr	r3, [pc, #44]	; (400590 <hif_set_rx_done+0x34>)
  400564:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400566:	a901      	add	r1, sp, #4
  400568:	f241 0070 	movw	r0, #4208	; 0x1070
  40056c:	4b09      	ldr	r3, [pc, #36]	; (400594 <hif_set_rx_done+0x38>)
  40056e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400570:	4603      	mov	r3, r0
  400572:	b940      	cbnz	r0, 400586 <hif_set_rx_done+0x2a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  400574:	9901      	ldr	r1, [sp, #4]
  400576:	f041 0102 	orr.w	r1, r1, #2
  40057a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  40057c:	f241 0070 	movw	r0, #4208	; 0x1070
  400580:	4b05      	ldr	r3, [pc, #20]	; (400598 <hif_set_rx_done+0x3c>)
  400582:	4798      	blx	r3
  400584:	4603      	mov	r3, r0
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
  400586:	4618      	mov	r0, r3
  400588:	b003      	add	sp, #12
  40058a:	f85d fb04 	ldr.w	pc, [sp], #4
  40058e:	bf00      	nop
  400590:	00400301 	.word	0x00400301
  400594:	004018ad 	.word	0x004018ad
  400598:	004018b9 	.word	0x004018b9

0040059c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  40059c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  40059e:	4b11      	ldr	r3, [pc, #68]	; (4005e4 <hif_chip_wake+0x48>)
  4005a0:	781b      	ldrb	r3, [r3, #0]
  4005a2:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005a6:	d115      	bne.n	4005d4 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4005a8:	4b0f      	ldr	r3, [pc, #60]	; (4005e8 <hif_chip_wake+0x4c>)
  4005aa:	781b      	ldrb	r3, [r3, #0]
  4005ac:	b2db      	uxtb	r3, r3
  4005ae:	2b03      	cmp	r3, #3
  4005b0:	d004      	beq.n	4005bc <hif_chip_wake+0x20>
  4005b2:	4b0d      	ldr	r3, [pc, #52]	; (4005e8 <hif_chip_wake+0x4c>)
  4005b4:	781b      	ldrb	r3, [r3, #0]
  4005b6:	b2db      	uxtb	r3, r3
  4005b8:	2b04      	cmp	r3, #4
  4005ba:	d10b      	bne.n	4005d4 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  4005bc:	4b0b      	ldr	r3, [pc, #44]	; (4005ec <hif_chip_wake+0x50>)
  4005be:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4005c0:	4603      	mov	r3, r0
  4005c2:	b968      	cbnz	r0, 4005e0 <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  4005c4:	f245 6178 	movw	r1, #22136	; 0x5678
  4005c8:	f241 0074 	movw	r0, #4212	; 0x1074
  4005cc:	4b08      	ldr	r3, [pc, #32]	; (4005f0 <hif_chip_wake+0x54>)
  4005ce:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4005d0:	4603      	mov	r3, r0
  4005d2:	b928      	cbnz	r0, 4005e0 <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4005d4:	4a03      	ldr	r2, [pc, #12]	; (4005e4 <hif_chip_wake+0x48>)
  4005d6:	7813      	ldrb	r3, [r2, #0]
  4005d8:	3301      	adds	r3, #1
  4005da:	b2db      	uxtb	r3, r3
  4005dc:	7013      	strb	r3, [r2, #0]
  4005de:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4005e0:	4618      	mov	r0, r3
  4005e2:	bd08      	pop	{r3, pc}
  4005e4:	204008c8 	.word	0x204008c8
  4005e8:	204008b8 	.word	0x204008b8
  4005ec:	0040141d 	.word	0x0040141d
  4005f0:	004018b9 	.word	0x004018b9

004005f4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  4005f4:	b500      	push	{lr}
  4005f6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  4005f8:	4b1d      	ldr	r3, [pc, #116]	; (400670 <hif_chip_sleep+0x7c>)
  4005fa:	781b      	ldrb	r3, [r3, #0]
  4005fc:	f013 0fff 	tst.w	r3, #255	; 0xff
  400600:	d004      	beq.n	40060c <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  400602:	4a1b      	ldr	r2, [pc, #108]	; (400670 <hif_chip_sleep+0x7c>)
  400604:	7813      	ldrb	r3, [r2, #0]
  400606:	3b01      	subs	r3, #1
  400608:	b2db      	uxtb	r3, r3
  40060a:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  40060c:	4b18      	ldr	r3, [pc, #96]	; (400670 <hif_chip_sleep+0x7c>)
  40060e:	781b      	ldrb	r3, [r3, #0]
  400610:	f013 0fff 	tst.w	r3, #255	; 0xff
  400614:	d125      	bne.n	400662 <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  400616:	4b17      	ldr	r3, [pc, #92]	; (400674 <hif_chip_sleep+0x80>)
  400618:	781b      	ldrb	r3, [r3, #0]
  40061a:	b2db      	uxtb	r3, r3
  40061c:	2b03      	cmp	r3, #3
  40061e:	d004      	beq.n	40062a <hif_chip_sleep+0x36>
  400620:	4b14      	ldr	r3, [pc, #80]	; (400674 <hif_chip_sleep+0x80>)
  400622:	781b      	ldrb	r3, [r3, #0]
  400624:	b2db      	uxtb	r3, r3
  400626:	2b04      	cmp	r3, #4
  400628:	d11d      	bne.n	400666 <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  40062a:	2300      	movs	r3, #0
  40062c:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40062e:	f244 3121 	movw	r1, #17185	; 0x4321
  400632:	f241 0074 	movw	r0, #4212	; 0x1074
  400636:	4b10      	ldr	r3, [pc, #64]	; (400678 <hif_chip_sleep+0x84>)
  400638:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40063a:	4603      	mov	r3, r0
  40063c:	b9a0      	cbnz	r0, 400668 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  40063e:	a901      	add	r1, sp, #4
  400640:	2001      	movs	r0, #1
  400642:	4b0e      	ldr	r3, [pc, #56]	; (40067c <hif_chip_sleep+0x88>)
  400644:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  400646:	4603      	mov	r3, r0
  400648:	b970      	cbnz	r0, 400668 <hif_chip_sleep+0x74>
			if(reg&0x2)
  40064a:	9901      	ldr	r1, [sp, #4]
  40064c:	f011 0f02 	tst.w	r1, #2
  400650:	d00a      	beq.n	400668 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  400652:	f021 0102 	bic.w	r1, r1, #2
  400656:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  400658:	2001      	movs	r0, #1
  40065a:	4b07      	ldr	r3, [pc, #28]	; (400678 <hif_chip_sleep+0x84>)
  40065c:	4798      	blx	r3
  40065e:	4603      	mov	r3, r0
  400660:	e002      	b.n	400668 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  400662:	2300      	movs	r3, #0
  400664:	e000      	b.n	400668 <hif_chip_sleep+0x74>
  400666:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  400668:	4618      	mov	r0, r3
  40066a:	b003      	add	sp, #12
  40066c:	f85d fb04 	ldr.w	pc, [sp], #4
  400670:	204008c8 	.word	0x204008c8
  400674:	204008b8 	.word	0x204008b8
  400678:	004018b9 	.word	0x004018b9
  40067c:	004018ad 	.word	0x004018ad

00400680 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  400680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400684:	b087      	sub	sp, #28
  400686:	4680      	mov	r8, r0
  400688:	460f      	mov	r7, r1
  40068a:	4692      	mov	sl, r2
  40068c:	4699      	mov	r9, r3
  40068e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  400690:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  400694:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  400698:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  40069c:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4006a0:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4006a4:	2308      	movs	r3, #8
  4006a6:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4006aa:	b144      	cbz	r4, 4006be <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4006ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4006b0:	fa16 f383 	uxtah	r3, r6, r3
  4006b4:	442b      	add	r3, r5
  4006b6:	b29b      	uxth	r3, r3
  4006b8:	f8ad 3016 	strh.w	r3, [sp, #22]
  4006bc:	e006      	b.n	4006cc <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  4006be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4006c2:	fa19 f383 	uxtah	r3, r9, r3
  4006c6:	b29b      	uxth	r3, r3
  4006c8:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  4006cc:	4b57      	ldr	r3, [pc, #348]	; (40082c <hif_send+0x1ac>)
  4006ce:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4006d0:	4683      	mov	fp, r0
  4006d2:	2800      	cmp	r0, #0
  4006d4:	f040 8095 	bne.w	400802 <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  4006d8:	2300      	movs	r3, #0
  4006da:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4006dc:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4006e0:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4006e2:	9b02      	ldr	r3, [sp, #8]
  4006e4:	ea48 0303 	orr.w	r3, r8, r3
  4006e8:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4006ea:	9b02      	ldr	r3, [sp, #8]
  4006ec:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  4006f0:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4006f2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4006f6:	9b02      	ldr	r3, [sp, #8]
  4006f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4006fc:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  4006fe:	9902      	ldr	r1, [sp, #8]
  400700:	f241 008c 	movw	r0, #4236	; 0x108c
  400704:	4b4a      	ldr	r3, [pc, #296]	; (400830 <hif_send+0x1b0>)
  400706:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400708:	4683      	mov	fp, r0
  40070a:	2800      	cmp	r0, #0
  40070c:	f040 808a 	bne.w	400824 <hif_send+0x1a4>


		reg = 0;
  400710:	2300      	movs	r3, #0
  400712:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  400714:	9b02      	ldr	r3, [sp, #8]
  400716:	f043 0302 	orr.w	r3, r3, #2
  40071a:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  40071c:	9902      	ldr	r1, [sp, #8]
  40071e:	f241 0078 	movw	r0, #4216	; 0x1078
  400722:	4b43      	ldr	r3, [pc, #268]	; (400830 <hif_send+0x1b0>)
  400724:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  400726:	4683      	mov	fp, r0
  400728:	2800      	cmp	r0, #0
  40072a:	d17b      	bne.n	400824 <hif_send+0x1a4>
		dma_addr = 0;
  40072c:	2300      	movs	r3, #0
  40072e:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400730:	f8ad 3006 	strh.w	r3, [sp, #6]
  400734:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400738:	b29b      	uxth	r3, r3
  40073a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40073e:	d21e      	bcs.n	40077e <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  400740:	f241 0878 	movw	r8, #4216	; 0x1078
  400744:	4f3b      	ldr	r7, [pc, #236]	; (400834 <hif_send+0x1b4>)
  400746:	a902      	add	r1, sp, #8
  400748:	4640      	mov	r0, r8
  40074a:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  40074c:	b9b8      	cbnz	r0, 40077e <hif_send+0xfe>
			if (!(reg & 0x2))
  40074e:	9b02      	ldr	r3, [sp, #8]
  400750:	f013 0f02 	tst.w	r3, #2
  400754:	d107      	bne.n	400766 <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  400756:	a903      	add	r1, sp, #12
  400758:	4837      	ldr	r0, [pc, #220]	; (400838 <hif_send+0x1b8>)
  40075a:	4b36      	ldr	r3, [pc, #216]	; (400834 <hif_send+0x1b4>)
  40075c:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40075e:	b170      	cbz	r0, 40077e <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  400760:	2300      	movs	r3, #0
  400762:	9303      	str	r3, [sp, #12]
  400764:	e00b      	b.n	40077e <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  400766:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40076a:	3301      	adds	r3, #1
  40076c:	b29b      	uxth	r3, r3
  40076e:	f8ad 3006 	strh.w	r3, [sp, #6]
  400772:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  400776:	b29b      	uxth	r3, r3
  400778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40077c:	d3e3      	bcc.n	400746 <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  40077e:	9b03      	ldr	r3, [sp, #12]
  400780:	2b00      	cmp	r3, #0
  400782:	d04d      	beq.n	400820 <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  400784:	9b03      	ldr	r3, [sp, #12]
  400786:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  400788:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40078c:	b29b      	uxth	r3, r3
  40078e:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  400792:	9804      	ldr	r0, [sp, #16]
  400794:	2208      	movs	r2, #8
  400796:	a905      	add	r1, sp, #20
  400798:	4b28      	ldr	r3, [pc, #160]	; (40083c <hif_send+0x1bc>)
  40079a:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  40079c:	4683      	mov	fp, r0
  40079e:	2800      	cmp	r0, #0
  4007a0:	d140      	bne.n	400824 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4007a2:	9b04      	ldr	r3, [sp, #16]
  4007a4:	3308      	adds	r3, #8
  4007a6:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4007a8:	f1ba 0f00 	cmp.w	sl, #0
  4007ac:	d00a      	beq.n	4007c4 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4007ae:	9804      	ldr	r0, [sp, #16]
  4007b0:	464a      	mov	r2, r9
  4007b2:	4651      	mov	r1, sl
  4007b4:	4b21      	ldr	r3, [pc, #132]	; (40083c <hif_send+0x1bc>)
  4007b6:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4007b8:	4683      	mov	fp, r0
  4007ba:	2800      	cmp	r0, #0
  4007bc:	d132      	bne.n	400824 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4007be:	9b04      	ldr	r3, [sp, #16]
  4007c0:	444b      	add	r3, r9
  4007c2:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4007c4:	b174      	cbz	r4, 4007e4 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4007c6:	9b04      	ldr	r3, [sp, #16]
  4007c8:	ebc9 0505 	rsb	r5, r9, r5
  4007cc:	441d      	add	r5, r3
  4007ce:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4007d0:	9804      	ldr	r0, [sp, #16]
  4007d2:	4632      	mov	r2, r6
  4007d4:	4621      	mov	r1, r4
  4007d6:	4b19      	ldr	r3, [pc, #100]	; (40083c <hif_send+0x1bc>)
  4007d8:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4007da:	4683      	mov	fp, r0
  4007dc:	bb10      	cbnz	r0, 400824 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4007de:	9b04      	ldr	r3, [sp, #16]
  4007e0:	441e      	add	r6, r3
  4007e2:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4007e4:	9b03      	ldr	r3, [sp, #12]
  4007e6:	009b      	lsls	r3, r3, #2
  4007e8:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4007ea:	9b02      	ldr	r3, [sp, #8]
  4007ec:	f043 0302 	orr.w	r3, r3, #2
  4007f0:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4007f2:	9902      	ldr	r1, [sp, #8]
  4007f4:	f241 006c 	movw	r0, #4204	; 0x106c
  4007f8:	4b0d      	ldr	r3, [pc, #52]	; (400830 <hif_send+0x1b0>)
  4007fa:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4007fc:	4683      	mov	fp, r0
  4007fe:	b988      	cbnz	r0, 400824 <hif_send+0x1a4>
  400800:	e00a      	b.n	400818 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  400802:	f240 129f 	movw	r2, #415	; 0x19f
  400806:	490e      	ldr	r1, [pc, #56]	; (400840 <hif_send+0x1c0>)
  400808:	480e      	ldr	r0, [pc, #56]	; (400844 <hif_send+0x1c4>)
  40080a:	4c0f      	ldr	r4, [pc, #60]	; (400848 <hif_send+0x1c8>)
  40080c:	47a0      	blx	r4
  40080e:	480f      	ldr	r0, [pc, #60]	; (40084c <hif_send+0x1cc>)
  400810:	47a0      	blx	r4
  400812:	480f      	ldr	r0, [pc, #60]	; (400850 <hif_send+0x1d0>)
  400814:	47a0      	blx	r4
		goto ERR1;
  400816:	e005      	b.n	400824 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  400818:	4b0e      	ldr	r3, [pc, #56]	; (400854 <hif_send+0x1d4>)
  40081a:	4798      	blx	r3
  40081c:	4683      	mov	fp, r0
  40081e:	e001      	b.n	400824 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  400820:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  400824:	4658      	mov	r0, fp
  400826:	b007      	add	sp, #28
  400828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40082c:	0040059d 	.word	0x0040059d
  400830:	004018b9 	.word	0x004018b9
  400834:	004018ad 	.word	0x004018ad
  400838:	00150400 	.word	0x00150400
  40083c:	00401925 	.word	0x00401925
  400840:	00406a28 	.word	0x00406a28
  400844:	00406790 	.word	0x00406790
  400848:	00403711 	.word	0x00403711
  40084c:	004067e4 	.word	0x004067e4
  400850:	004067bc 	.word	0x004067bc
  400854:	004005f5 	.word	0x004005f5

00400858 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  400858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40085c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40085e:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 400b5c <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  400862:	4fa3      	ldr	r7, [pc, #652]	; (400af0 <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400864:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 400b60 <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400868:	4ea2      	ldr	r6, [pc, #648]	; (400af4 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40086a:	e17b      	b.n	400b64 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  40086c:	f899 3000 	ldrb.w	r3, [r9]
  400870:	3b01      	subs	r3, #1
  400872:	b2db      	uxtb	r3, r3
  400874:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  400878:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  40087a:	4604      	mov	r4, r0
  40087c:	2800      	cmp	r0, #0
  40087e:	f040 811a 	bne.w	400ab6 <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  400882:	a903      	add	r1, sp, #12
  400884:	f241 0070 	movw	r0, #4208	; 0x1070
  400888:	4b9b      	ldr	r3, [pc, #620]	; (400af8 <hif_handle_isr+0x2a0>)
  40088a:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  40088c:	4604      	mov	r4, r0
  40088e:	2800      	cmp	r0, #0
  400890:	f040 8106 	bne.w	400aa0 <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  400894:	9b03      	ldr	r3, [sp, #12]
  400896:	f013 0f01 	tst.w	r3, #1
  40089a:	f000 80f5 	beq.w	400a88 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  40089e:	4b97      	ldr	r3, [pc, #604]	; (400afc <hif_handle_isr+0x2a4>)
  4008a0:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  4008a2:	9903      	ldr	r1, [sp, #12]
  4008a4:	f021 0101 	bic.w	r1, r1, #1
  4008a8:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4008aa:	f241 0070 	movw	r0, #4208	; 0x1070
  4008ae:	4b94      	ldr	r3, [pc, #592]	; (400b00 <hif_handle_isr+0x2a8>)
  4008b0:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  4008b2:	4604      	mov	r4, r0
  4008b4:	2800      	cmp	r0, #0
  4008b6:	f040 810e 	bne.w	400ad6 <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  4008ba:	2200      	movs	r2, #0
  4008bc:	4b91      	ldr	r3, [pc, #580]	; (400b04 <hif_handle_isr+0x2ac>)
  4008be:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  4008c0:	9d03      	ldr	r5, [sp, #12]
  4008c2:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  4008c6:	2d00      	cmp	r5, #0
  4008c8:	f000 80d1 	beq.w	400a6e <hif_handle_isr+0x216>
					uint32 address = 0;
  4008cc:	a906      	add	r1, sp, #24
  4008ce:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  4008d2:	f241 0084 	movw	r0, #4228	; 0x1084
  4008d6:	4b88      	ldr	r3, [pc, #544]	; (400af8 <hif_handle_isr+0x2a0>)
  4008d8:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  4008da:	4604      	mov	r4, r0
  4008dc:	b168      	cbz	r0, 4008fa <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  4008de:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  4008e2:	4641      	mov	r1, r8
  4008e4:	4630      	mov	r0, r6
  4008e6:	4d88      	ldr	r5, [pc, #544]	; (400b08 <hif_handle_isr+0x2b0>)
  4008e8:	47a8      	blx	r5
  4008ea:	4888      	ldr	r0, [pc, #544]	; (400b0c <hif_handle_isr+0x2b4>)
  4008ec:	47a8      	blx	r5
  4008ee:	4888      	ldr	r0, [pc, #544]	; (400b10 <hif_handle_isr+0x2b8>)
  4008f0:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4008f2:	2001      	movs	r0, #1
  4008f4:	4b81      	ldr	r3, [pc, #516]	; (400afc <hif_handle_isr+0x2a4>)
  4008f6:	4798      	blx	r3
  4008f8:	e0eb      	b.n	400ad2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4008fa:	2204      	movs	r2, #4
  4008fc:	a904      	add	r1, sp, #16
  4008fe:	9805      	ldr	r0, [sp, #20]
  400900:	4b84      	ldr	r3, [pc, #528]	; (400b14 <hif_handle_isr+0x2bc>)
  400902:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  400904:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400908:	b29b      	uxth	r3, r3
  40090a:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  40090e:	4604      	mov	r4, r0
  400910:	b168      	cbz	r0, 40092e <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  400912:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  400916:	4641      	mov	r1, r8
  400918:	4630      	mov	r0, r6
  40091a:	4d7b      	ldr	r5, [pc, #492]	; (400b08 <hif_handle_isr+0x2b0>)
  40091c:	47a8      	blx	r5
  40091e:	487e      	ldr	r0, [pc, #504]	; (400b18 <hif_handle_isr+0x2c0>)
  400920:	47a8      	blx	r5
  400922:	487b      	ldr	r0, [pc, #492]	; (400b10 <hif_handle_isr+0x2b8>)
  400924:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  400926:	2001      	movs	r0, #1
  400928:	4b74      	ldr	r3, [pc, #464]	; (400afc <hif_handle_isr+0x2a4>)
  40092a:	4798      	blx	r3
  40092c:	e0d1      	b.n	400ad2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  40092e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  400932:	b29b      	uxth	r3, r3
  400934:	429d      	cmp	r5, r3
  400936:	d01e      	beq.n	400976 <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  400938:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40093c:	b29b      	uxth	r3, r3
  40093e:	1aeb      	subs	r3, r5, r3
  400940:	2b04      	cmp	r3, #4
  400942:	dd18      	ble.n	400976 <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  400944:	f240 12df 	movw	r2, #479	; 0x1df
  400948:	4641      	mov	r1, r8
  40094a:	4630      	mov	r0, r6
  40094c:	4c6e      	ldr	r4, [pc, #440]	; (400b08 <hif_handle_isr+0x2b0>)
  40094e:	47a0      	blx	r4
  400950:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  400954:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400958:	f89d 1011 	ldrb.w	r1, [sp, #17]
  40095c:	9100      	str	r1, [sp, #0]
  40095e:	b292      	uxth	r2, r2
  400960:	4629      	mov	r1, r5
  400962:	486e      	ldr	r0, [pc, #440]	; (400b1c <hif_handle_isr+0x2c4>)
  400964:	47a0      	blx	r4
  400966:	486a      	ldr	r0, [pc, #424]	; (400b10 <hif_handle_isr+0x2b8>)
  400968:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  40096a:	2001      	movs	r0, #1
  40096c:	4b63      	ldr	r3, [pc, #396]	; (400afc <hif_handle_isr+0x2a4>)
  40096e:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  400970:	f06f 0405 	mvn.w	r4, #5
  400974:	e0ad      	b.n	400ad2 <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  400976:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40097a:	b2db      	uxtb	r3, r3
  40097c:	2b01      	cmp	r3, #1
  40097e:	d10d      	bne.n	40099c <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  400980:	4b67      	ldr	r3, [pc, #412]	; (400b20 <hif_handle_isr+0x2c8>)
  400982:	681b      	ldr	r3, [r3, #0]
  400984:	2b00      	cmp	r3, #0
  400986:	d060      	beq.n	400a4a <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400988:	f89d 0011 	ldrb.w	r0, [sp, #17]
  40098c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400990:	3908      	subs	r1, #8
  400992:	9a05      	ldr	r2, [sp, #20]
  400994:	3208      	adds	r2, #8
  400996:	b289      	uxth	r1, r1
  400998:	4798      	blx	r3
  40099a:	e056      	b.n	400a4a <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  40099c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009a0:	b2db      	uxtb	r3, r3
  4009a2:	2b02      	cmp	r3, #2
  4009a4:	d10d      	bne.n	4009c2 <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  4009a6:	4b5f      	ldr	r3, [pc, #380]	; (400b24 <hif_handle_isr+0x2cc>)
  4009a8:	681b      	ldr	r3, [r3, #0]
  4009aa:	2b00      	cmp	r3, #0
  4009ac:	d04d      	beq.n	400a4a <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009ae:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009b2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4009b6:	3908      	subs	r1, #8
  4009b8:	9a05      	ldr	r2, [sp, #20]
  4009ba:	3208      	adds	r2, #8
  4009bc:	b289      	uxth	r1, r1
  4009be:	4798      	blx	r3
  4009c0:	e043      	b.n	400a4a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4009c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009c6:	b2db      	uxtb	r3, r3
  4009c8:	2b04      	cmp	r3, #4
  4009ca:	d10d      	bne.n	4009e8 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  4009cc:	4b56      	ldr	r3, [pc, #344]	; (400b28 <hif_handle_isr+0x2d0>)
  4009ce:	681b      	ldr	r3, [r3, #0]
  4009d0:	2b00      	cmp	r3, #0
  4009d2:	d03a      	beq.n	400a4a <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009d4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009d8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4009dc:	3908      	subs	r1, #8
  4009de:	9a05      	ldr	r2, [sp, #20]
  4009e0:	3208      	adds	r2, #8
  4009e2:	b289      	uxth	r1, r1
  4009e4:	4798      	blx	r3
  4009e6:	e030      	b.n	400a4a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4009e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009ec:	b2db      	uxtb	r3, r3
  4009ee:	2b06      	cmp	r3, #6
  4009f0:	d10c      	bne.n	400a0c <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  4009f2:	4b4e      	ldr	r3, [pc, #312]	; (400b2c <hif_handle_isr+0x2d4>)
  4009f4:	681b      	ldr	r3, [r3, #0]
  4009f6:	b343      	cbz	r3, 400a4a <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4009f8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4009fc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a00:	3908      	subs	r1, #8
  400a02:	9a05      	ldr	r2, [sp, #20]
  400a04:	3208      	adds	r2, #8
  400a06:	b289      	uxth	r1, r1
  400a08:	4798      	blx	r3
  400a0a:	e01e      	b.n	400a4a <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  400a0c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a10:	b2db      	uxtb	r3, r3
  400a12:	2b07      	cmp	r3, #7
  400a14:	d10c      	bne.n	400a30 <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  400a16:	4b46      	ldr	r3, [pc, #280]	; (400b30 <hif_handle_isr+0x2d8>)
  400a18:	681b      	ldr	r3, [r3, #0]
  400a1a:	b1b3      	cbz	r3, 400a4a <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  400a1c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  400a20:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  400a24:	3908      	subs	r1, #8
  400a26:	9a05      	ldr	r2, [sp, #20]
  400a28:	3208      	adds	r2, #8
  400a2a:	b289      	uxth	r1, r1
  400a2c:	4798      	blx	r3
  400a2e:	e00c      	b.n	400a4a <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  400a30:	f240 2202 	movw	r2, #514	; 0x202
  400a34:	4641      	mov	r1, r8
  400a36:	4630      	mov	r0, r6
  400a38:	4c33      	ldr	r4, [pc, #204]	; (400b08 <hif_handle_isr+0x2b0>)
  400a3a:	47a0      	blx	r4
  400a3c:	483d      	ldr	r0, [pc, #244]	; (400b34 <hif_handle_isr+0x2dc>)
  400a3e:	47a0      	blx	r4
  400a40:	4833      	ldr	r0, [pc, #204]	; (400b10 <hif_handle_isr+0x2b8>)
  400a42:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  400a44:	f06f 0405 	mvn.w	r4, #5
  400a48:	e043      	b.n	400ad2 <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  400a4a:	4b2e      	ldr	r3, [pc, #184]	; (400b04 <hif_handle_isr+0x2ac>)
  400a4c:	781b      	ldrb	r3, [r3, #0]
  400a4e:	f013 0fff 	tst.w	r3, #255	; 0xff
  400a52:	d13b      	bne.n	400acc <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  400a54:	f240 2209 	movw	r2, #521	; 0x209
  400a58:	4641      	mov	r1, r8
  400a5a:	4630      	mov	r0, r6
  400a5c:	4c2a      	ldr	r4, [pc, #168]	; (400b08 <hif_handle_isr+0x2b0>)
  400a5e:	47a0      	blx	r4
  400a60:	4835      	ldr	r0, [pc, #212]	; (400b38 <hif_handle_isr+0x2e0>)
  400a62:	47a0      	blx	r4
  400a64:	482a      	ldr	r0, [pc, #168]	; (400b10 <hif_handle_isr+0x2b8>)
  400a66:	47a0      	blx	r4
						ret = hif_set_rx_done();
  400a68:	4b34      	ldr	r3, [pc, #208]	; (400b3c <hif_handle_isr+0x2e4>)
  400a6a:	4798      	blx	r3
  400a6c:	e02e      	b.n	400acc <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  400a6e:	f240 2211 	movw	r2, #529	; 0x211
  400a72:	4641      	mov	r1, r8
  400a74:	4630      	mov	r0, r6
  400a76:	4c24      	ldr	r4, [pc, #144]	; (400b08 <hif_handle_isr+0x2b0>)
  400a78:	47a0      	blx	r4
  400a7a:	4831      	ldr	r0, [pc, #196]	; (400b40 <hif_handle_isr+0x2e8>)
  400a7c:	47a0      	blx	r4
  400a7e:	4824      	ldr	r0, [pc, #144]	; (400b10 <hif_handle_isr+0x2b8>)
  400a80:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  400a82:	f06f 0401 	mvn.w	r4, #1
  400a86:	e026      	b.n	400ad6 <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  400a88:	f44f 7206 	mov.w	r2, #536	; 0x218
  400a8c:	4641      	mov	r1, r8
  400a8e:	4630      	mov	r0, r6
  400a90:	4c1d      	ldr	r4, [pc, #116]	; (400b08 <hif_handle_isr+0x2b0>)
  400a92:	47a0      	blx	r4
  400a94:	9903      	ldr	r1, [sp, #12]
  400a96:	482b      	ldr	r0, [pc, #172]	; (400b44 <hif_handle_isr+0x2ec>)
  400a98:	47a0      	blx	r4
  400a9a:	481d      	ldr	r0, [pc, #116]	; (400b10 <hif_handle_isr+0x2b8>)
  400a9c:	47a0      	blx	r4
  400a9e:	e015      	b.n	400acc <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  400aa0:	f240 221e 	movw	r2, #542	; 0x21e
  400aa4:	4641      	mov	r1, r8
  400aa6:	4630      	mov	r0, r6
  400aa8:	4d17      	ldr	r5, [pc, #92]	; (400b08 <hif_handle_isr+0x2b0>)
  400aaa:	47a8      	blx	r5
  400aac:	4826      	ldr	r0, [pc, #152]	; (400b48 <hif_handle_isr+0x2f0>)
  400aae:	47a8      	blx	r5
  400ab0:	4817      	ldr	r0, [pc, #92]	; (400b10 <hif_handle_isr+0x2b8>)
  400ab2:	47a8      	blx	r5
  400ab4:	e00f      	b.n	400ad6 <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  400ab6:	f44f 7209 	mov.w	r2, #548	; 0x224
  400aba:	4641      	mov	r1, r8
  400abc:	4630      	mov	r0, r6
  400abe:	4d12      	ldr	r5, [pc, #72]	; (400b08 <hif_handle_isr+0x2b0>)
  400ac0:	47a8      	blx	r5
  400ac2:	4822      	ldr	r0, [pc, #136]	; (400b4c <hif_handle_isr+0x2f4>)
  400ac4:	47a8      	blx	r5
  400ac6:	4812      	ldr	r0, [pc, #72]	; (400b10 <hif_handle_isr+0x2b8>)
  400ac8:	47a8      	blx	r5
  400aca:	e004      	b.n	400ad6 <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  400acc:	4b20      	ldr	r3, [pc, #128]	; (400b50 <hif_handle_isr+0x2f8>)
  400ace:	4798      	blx	r3
  400ad0:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  400ad2:	2c00      	cmp	r4, #0
  400ad4:	d046      	beq.n	400b64 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  400ad6:	f240 2243 	movw	r2, #579	; 0x243
  400ada:	491e      	ldr	r1, [pc, #120]	; (400b54 <hif_handle_isr+0x2fc>)
  400adc:	4630      	mov	r0, r6
  400ade:	4d0a      	ldr	r5, [pc, #40]	; (400b08 <hif_handle_isr+0x2b0>)
  400ae0:	47a8      	blx	r5
  400ae2:	4621      	mov	r1, r4
  400ae4:	481c      	ldr	r0, [pc, #112]	; (400b58 <hif_handle_isr+0x300>)
  400ae6:	47a8      	blx	r5
  400ae8:	4809      	ldr	r0, [pc, #36]	; (400b10 <hif_handle_isr+0x2b8>)
  400aea:	47a8      	blx	r5
			}
		}
  400aec:	e6c4      	b.n	400878 <hif_handle_isr+0x20>
  400aee:	bf00      	nop
  400af0:	0040059d 	.word	0x0040059d
  400af4:	00406790 	.word	0x00406790
  400af8:	004018ad 	.word	0x004018ad
  400afc:	00400301 	.word	0x00400301
  400b00:	004018b9 	.word	0x004018b9
  400b04:	204008c0 	.word	0x204008c0
  400b08:	00403711 	.word	0x00403711
  400b0c:	00406804 	.word	0x00406804
  400b10:	004067bc 	.word	0x004067bc
  400b14:	004018c5 	.word	0x004018c5
  400b18:	0040682c 	.word	0x0040682c
  400b1c:	00406844 	.word	0x00406844
  400b20:	204008a8 	.word	0x204008a8
  400b24:	204008bc 	.word	0x204008bc
  400b28:	204008c4 	.word	0x204008c4
  400b2c:	204008a4 	.word	0x204008a4
  400b30:	204008b4 	.word	0x204008b4
  400b34:	00406884 	.word	0x00406884
  400b38:	0040689c 	.word	0x0040689c
  400b3c:	0040055d 	.word	0x0040055d
  400b40:	004068c0 	.word	0x004068c0
  400b44:	004068d4 	.word	0x004068d4
  400b48:	004068f0 	.word	0x004068f0
  400b4c:	00406914 	.word	0x00406914
  400b50:	004005f5 	.word	0x004005f5
  400b54:	00406a34 	.word	0x00406a34
  400b58:	00406934 	.word	0x00406934
  400b5c:	204008ac 	.word	0x204008ac
  400b60:	004067d0 	.word	0x004067d0

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  400b64:	f899 3000 	ldrb.w	r3, [r9]
  400b68:	f013 0fff 	tst.w	r3, #255	; 0xff
  400b6c:	f47f ae7e 	bne.w	40086c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  400b70:	2000      	movs	r0, #0
  400b72:	b007      	add	sp, #28
  400b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00400b78 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  400b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400b7c:	b083      	sub	sp, #12
  400b7e:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  400b80:	2a00      	cmp	r2, #0
  400b82:	bf18      	it	ne
  400b84:	2900      	cmpne	r1, #0
  400b86:	d003      	beq.n	400b90 <hif_receive+0x18>
  400b88:	4605      	mov	r5, r0
  400b8a:	460f      	mov	r7, r1
  400b8c:	4616      	mov	r6, r2
  400b8e:	b9a0      	cbnz	r0, 400bba <hif_receive+0x42>
	{
		if(isDone)
  400b90:	b134      	cbz	r4, 400ba0 <hif_receive+0x28>
		{
			gu8HifSizeDone = 1;
  400b92:	2201      	movs	r2, #1
  400b94:	4b31      	ldr	r3, [pc, #196]	; (400c5c <hif_receive+0xe4>)
  400b96:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  400b98:	4b31      	ldr	r3, [pc, #196]	; (400c60 <hif_receive+0xe8>)
  400b9a:	4798      	blx	r3
  400b9c:	4603      	mov	r3, r0
  400b9e:	e058      	b.n	400c52 <hif_receive+0xda>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  400ba0:	f240 2269 	movw	r2, #617	; 0x269
  400ba4:	492f      	ldr	r1, [pc, #188]	; (400c64 <hif_receive+0xec>)
  400ba6:	4830      	ldr	r0, [pc, #192]	; (400c68 <hif_receive+0xf0>)
  400ba8:	4c30      	ldr	r4, [pc, #192]	; (400c6c <hif_receive+0xf4>)
  400baa:	47a0      	blx	r4
  400bac:	4830      	ldr	r0, [pc, #192]	; (400c70 <hif_receive+0xf8>)
  400bae:	47a0      	blx	r4
  400bb0:	4830      	ldr	r0, [pc, #192]	; (400c74 <hif_receive+0xfc>)
  400bb2:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  400bb4:	f06f 030b 	mvn.w	r3, #11
  400bb8:	e04b      	b.n	400c52 <hif_receive+0xda>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  400bba:	4669      	mov	r1, sp
  400bbc:	f241 0070 	movw	r0, #4208	; 0x1070
  400bc0:	4b2d      	ldr	r3, [pc, #180]	; (400c78 <hif_receive+0x100>)
  400bc2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400bc4:	4603      	mov	r3, r0
  400bc6:	2800      	cmp	r0, #0
  400bc8:	d143      	bne.n	400c52 <hif_receive+0xda>


	size = (uint16)((reg >> 2) & 0xfff);
  400bca:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  400bce:	a901      	add	r1, sp, #4
  400bd0:	f241 0084 	movw	r0, #4228	; 0x1084
  400bd4:	4b28      	ldr	r3, [pc, #160]	; (400c78 <hif_receive+0x100>)
  400bd6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400bd8:	4603      	mov	r3, r0
  400bda:	2800      	cmp	r0, #0
  400bdc:	d139      	bne.n	400c52 <hif_receive+0xda>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  400bde:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  400be2:	4546      	cmp	r6, r8
  400be4:	d90e      	bls.n	400c04 <hif_receive+0x8c>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  400be6:	f240 227a 	movw	r2, #634	; 0x27a
  400bea:	491e      	ldr	r1, [pc, #120]	; (400c64 <hif_receive+0xec>)
  400bec:	481e      	ldr	r0, [pc, #120]	; (400c68 <hif_receive+0xf0>)
  400bee:	4c1f      	ldr	r4, [pc, #124]	; (400c6c <hif_receive+0xf4>)
  400bf0:	47a0      	blx	r4
  400bf2:	4642      	mov	r2, r8
  400bf4:	4631      	mov	r1, r6
  400bf6:	4821      	ldr	r0, [pc, #132]	; (400c7c <hif_receive+0x104>)
  400bf8:	47a0      	blx	r4
  400bfa:	481e      	ldr	r0, [pc, #120]	; (400c74 <hif_receive+0xfc>)
  400bfc:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  400bfe:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  400c02:	e026      	b.n	400c52 <hif_receive+0xda>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  400c04:	9b01      	ldr	r3, [sp, #4]
  400c06:	429d      	cmp	r5, r3
  400c08:	d304      	bcc.n	400c14 <hif_receive+0x9c>
  400c0a:	eb05 0906 	add.w	r9, r5, r6
  400c0e:	4443      	add	r3, r8
  400c10:	4599      	cmp	r9, r3
  400c12:	d90c      	bls.n	400c2e <hif_receive+0xb6>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  400c14:	f44f 7220 	mov.w	r2, #640	; 0x280
  400c18:	4912      	ldr	r1, [pc, #72]	; (400c64 <hif_receive+0xec>)
  400c1a:	4813      	ldr	r0, [pc, #76]	; (400c68 <hif_receive+0xf0>)
  400c1c:	4c13      	ldr	r4, [pc, #76]	; (400c6c <hif_receive+0xf4>)
  400c1e:	47a0      	blx	r4
  400c20:	4817      	ldr	r0, [pc, #92]	; (400c80 <hif_receive+0x108>)
  400c22:	47a0      	blx	r4
  400c24:	4813      	ldr	r0, [pc, #76]	; (400c74 <hif_receive+0xfc>)
  400c26:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  400c28:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  400c2c:	e011      	b.n	400c52 <hif_receive+0xda>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  400c2e:	4632      	mov	r2, r6
  400c30:	4639      	mov	r1, r7
  400c32:	4628      	mov	r0, r5
  400c34:	4b13      	ldr	r3, [pc, #76]	; (400c84 <hif_receive+0x10c>)
  400c36:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  400c38:	4603      	mov	r3, r0
  400c3a:	b950      	cbnz	r0, 400c52 <hif_receive+0xda>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  400c3c:	9a01      	ldr	r2, [sp, #4]
  400c3e:	4442      	add	r2, r8
  400c40:	454a      	cmp	r2, r9
  400c42:	d000      	beq.n	400c46 <hif_receive+0xce>
  400c44:	b12c      	cbz	r4, 400c52 <hif_receive+0xda>
	{
		gu8HifSizeDone = 1;
  400c46:	2201      	movs	r2, #1
  400c48:	4b04      	ldr	r3, [pc, #16]	; (400c5c <hif_receive+0xe4>)
  400c4a:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  400c4c:	4b04      	ldr	r3, [pc, #16]	; (400c60 <hif_receive+0xe8>)
  400c4e:	4798      	blx	r3
  400c50:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  400c52:	4618      	mov	r0, r3
  400c54:	b003      	add	sp, #12
  400c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400c5a:	bf00      	nop
  400c5c:	204008c0 	.word	0x204008c0
  400c60:	0040055d 	.word	0x0040055d
  400c64:	004067d8 	.word	0x004067d8
  400c68:	00406790 	.word	0x00406790
  400c6c:	00403711 	.word	0x00403711
  400c70:	00406964 	.word	0x00406964
  400c74:	004067bc 	.word	0x004067bc
  400c78:	004018ad 	.word	0x004018ad
  400c7c:	00406984 	.word	0x00406984
  400c80:	004069c8 	.word	0x004069c8
  400c84:	004018c5 	.word	0x004018c5

00400c88 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  400c88:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  400c8a:	1e43      	subs	r3, r0, #1
  400c8c:	2b06      	cmp	r3, #6
  400c8e:	d81d      	bhi.n	400ccc <hif_register_cb+0x44>
  400c90:	e8df f003 	tbb	[pc, r3]
  400c94:	0c100408 	.word	0x0c100408
  400c98:	141c      	.short	0x141c
  400c9a:	18          	.byte	0x18
  400c9b:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  400c9c:	4b13      	ldr	r3, [pc, #76]	; (400cec <hif_register_cb+0x64>)
  400c9e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400ca0:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  400ca2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  400ca4:	4b12      	ldr	r3, [pc, #72]	; (400cf0 <hif_register_cb+0x68>)
  400ca6:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400ca8:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  400caa:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  400cac:	4b11      	ldr	r3, [pc, #68]	; (400cf4 <hif_register_cb+0x6c>)
  400cae:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cb0:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  400cb2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  400cb4:	4b10      	ldr	r3, [pc, #64]	; (400cf8 <hif_register_cb+0x70>)
  400cb6:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cb8:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  400cba:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  400cbc:	4b0f      	ldr	r3, [pc, #60]	; (400cfc <hif_register_cb+0x74>)
  400cbe:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cc0:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  400cc2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  400cc4:	4b0e      	ldr	r3, [pc, #56]	; (400d00 <hif_register_cb+0x78>)
  400cc6:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  400cc8:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  400cca:	bd38      	pop	{r3, r4, r5, pc}
  400ccc:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  400cce:	f240 22b9 	movw	r2, #697	; 0x2b9
  400cd2:	490c      	ldr	r1, [pc, #48]	; (400d04 <hif_register_cb+0x7c>)
  400cd4:	480c      	ldr	r0, [pc, #48]	; (400d08 <hif_register_cb+0x80>)
  400cd6:	4d0d      	ldr	r5, [pc, #52]	; (400d0c <hif_register_cb+0x84>)
  400cd8:	47a8      	blx	r5
  400cda:	4621      	mov	r1, r4
  400cdc:	480c      	ldr	r0, [pc, #48]	; (400d10 <hif_register_cb+0x88>)
  400cde:	47a8      	blx	r5
  400ce0:	480c      	ldr	r0, [pc, #48]	; (400d14 <hif_register_cb+0x8c>)
  400ce2:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  400ce4:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  400ce8:	bd38      	pop	{r3, r4, r5, pc}
  400cea:	bf00      	nop
  400cec:	204008bc 	.word	0x204008bc
  400cf0:	204008a8 	.word	0x204008a8
  400cf4:	204008c4 	.word	0x204008c4
  400cf8:	204008b0 	.word	0x204008b0
  400cfc:	204008a4 	.word	0x204008a4
  400d00:	204008b4 	.word	0x204008b4
  400d04:	00406a18 	.word	0x00406a18
  400d08:	00406790 	.word	0x00406790
  400d0c:	00403711 	.word	0x00403711
  400d10:	00406a0c 	.word	0x00406a0c
  400d14:	004067bc 	.word	0x004067bc

00400d18 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  400d18:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  400d1a:	2400      	movs	r4, #0
  400d1c:	4b09      	ldr	r3, [pc, #36]	; (400d44 <hif_init+0x2c>)
  400d1e:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  400d20:	4b09      	ldr	r3, [pc, #36]	; (400d48 <hif_init+0x30>)
  400d22:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  400d24:	4b09      	ldr	r3, [pc, #36]	; (400d4c <hif_init+0x34>)
  400d26:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  400d28:	4b09      	ldr	r3, [pc, #36]	; (400d50 <hif_init+0x38>)
  400d2a:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  400d2c:	4b09      	ldr	r3, [pc, #36]	; (400d54 <hif_init+0x3c>)
  400d2e:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  400d30:	4809      	ldr	r0, [pc, #36]	; (400d58 <hif_init+0x40>)
  400d32:	4b0a      	ldr	r3, [pc, #40]	; (400d5c <hif_init+0x44>)
  400d34:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  400d36:	490a      	ldr	r1, [pc, #40]	; (400d60 <hif_init+0x48>)
  400d38:	2003      	movs	r0, #3
  400d3a:	4b0a      	ldr	r3, [pc, #40]	; (400d64 <hif_init+0x4c>)
  400d3c:	4798      	blx	r3

	return M2M_SUCCESS;
}
  400d3e:	4620      	mov	r0, r4
  400d40:	bd10      	pop	{r4, pc}
  400d42:	bf00      	nop
  400d44:	204008a8 	.word	0x204008a8
  400d48:	204008bc 	.word	0x204008bc
  400d4c:	204008c8 	.word	0x204008c8
  400d50:	204008b8 	.word	0x204008b8
  400d54:	204008ac 	.word	0x204008ac
  400d58:	00400549 	.word	0x00400549
  400d5c:	00400281 	.word	0x00400281
  400d60:	00400559 	.word	0x00400559
  400d64:	00400c89 	.word	0x00400c89

00400d68 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  400d68:	b530      	push	{r4, r5, lr}
  400d6a:	b09f      	sub	sp, #124	; 0x7c
  400d6c:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  400d6e:	282c      	cmp	r0, #44	; 0x2c
  400d70:	d111      	bne.n	400d96 <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  400d72:	2300      	movs	r3, #0
  400d74:	2204      	movs	r2, #4
  400d76:	a903      	add	r1, sp, #12
  400d78:	4628      	mov	r0, r5
  400d7a:	4c90      	ldr	r4, [pc, #576]	; (400fbc <m2m_wifi_cb+0x254>)
  400d7c:	47a0      	blx	r4
  400d7e:	2800      	cmp	r0, #0
  400d80:	f040 8119 	bne.w	400fb6 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400d84:	4b8e      	ldr	r3, [pc, #568]	; (400fc0 <m2m_wifi_cb+0x258>)
  400d86:	681b      	ldr	r3, [r3, #0]
  400d88:	2b00      	cmp	r3, #0
  400d8a:	f000 8114 	beq.w	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  400d8e:	a903      	add	r1, sp, #12
  400d90:	202c      	movs	r0, #44	; 0x2c
  400d92:	4798      	blx	r3
  400d94:	e10f      	b.n	400fb6 <m2m_wifi_cb+0x24e>
  400d96:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  400d98:	281b      	cmp	r0, #27
  400d9a:	d111      	bne.n	400dc0 <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  400d9c:	2300      	movs	r3, #0
  400d9e:	2208      	movs	r2, #8
  400da0:	a903      	add	r1, sp, #12
  400da2:	4628      	mov	r0, r5
  400da4:	4c85      	ldr	r4, [pc, #532]	; (400fbc <m2m_wifi_cb+0x254>)
  400da6:	47a0      	blx	r4
  400da8:	2800      	cmp	r0, #0
  400daa:	f040 8104 	bne.w	400fb6 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400dae:	4b84      	ldr	r3, [pc, #528]	; (400fc0 <m2m_wifi_cb+0x258>)
  400db0:	681b      	ldr	r3, [r3, #0]
  400db2:	2b00      	cmp	r3, #0
  400db4:	f000 80ff 	beq.w	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  400db8:	a903      	add	r1, sp, #12
  400dba:	201b      	movs	r0, #27
  400dbc:	4798      	blx	r3
  400dbe:	e0fa      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  400dc0:	2806      	cmp	r0, #6
  400dc2:	d111      	bne.n	400de8 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  400dc4:	2301      	movs	r3, #1
  400dc6:	2230      	movs	r2, #48	; 0x30
  400dc8:	a903      	add	r1, sp, #12
  400dca:	4628      	mov	r0, r5
  400dcc:	4c7b      	ldr	r4, [pc, #492]	; (400fbc <m2m_wifi_cb+0x254>)
  400dce:	47a0      	blx	r4
  400dd0:	2800      	cmp	r0, #0
  400dd2:	f040 80f0 	bne.w	400fb6 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400dd6:	4b7a      	ldr	r3, [pc, #488]	; (400fc0 <m2m_wifi_cb+0x258>)
  400dd8:	681b      	ldr	r3, [r3, #0]
  400dda:	2b00      	cmp	r3, #0
  400ddc:	f000 80eb 	beq.w	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  400de0:	a903      	add	r1, sp, #12
  400de2:	2006      	movs	r0, #6
  400de4:	4798      	blx	r3
  400de6:	e0e6      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  400de8:	280e      	cmp	r0, #14
  400dea:	f000 80e4 	beq.w	400fb6 <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  400dee:	2832      	cmp	r0, #50	; 0x32
  400df0:	d111      	bne.n	400e16 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  400df2:	2300      	movs	r3, #0
  400df4:	2210      	movs	r2, #16
  400df6:	a903      	add	r1, sp, #12
  400df8:	4628      	mov	r0, r5
  400dfa:	4c70      	ldr	r4, [pc, #448]	; (400fbc <m2m_wifi_cb+0x254>)
  400dfc:	47a0      	blx	r4
  400dfe:	2800      	cmp	r0, #0
  400e00:	f040 80d9 	bne.w	400fb6 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e04:	4b6e      	ldr	r3, [pc, #440]	; (400fc0 <m2m_wifi_cb+0x258>)
  400e06:	681b      	ldr	r3, [r3, #0]
  400e08:	2b00      	cmp	r3, #0
  400e0a:	f000 80d4 	beq.w	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  400e0e:	a903      	add	r1, sp, #12
  400e10:	2032      	movs	r0, #50	; 0x32
  400e12:	4798      	blx	r3
  400e14:	e0cf      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  400e16:	282f      	cmp	r0, #47	; 0x2f
  400e18:	d116      	bne.n	400e48 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  400e1a:	2264      	movs	r2, #100	; 0x64
  400e1c:	2100      	movs	r1, #0
  400e1e:	a803      	add	r0, sp, #12
  400e20:	4b68      	ldr	r3, [pc, #416]	; (400fc4 <m2m_wifi_cb+0x25c>)
  400e22:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  400e24:	2300      	movs	r3, #0
  400e26:	2264      	movs	r2, #100	; 0x64
  400e28:	a903      	add	r1, sp, #12
  400e2a:	4628      	mov	r0, r5
  400e2c:	4c63      	ldr	r4, [pc, #396]	; (400fbc <m2m_wifi_cb+0x254>)
  400e2e:	47a0      	blx	r4
  400e30:	2800      	cmp	r0, #0
  400e32:	f040 80c0 	bne.w	400fb6 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400e36:	4b62      	ldr	r3, [pc, #392]	; (400fc0 <m2m_wifi_cb+0x258>)
  400e38:	681b      	ldr	r3, [r3, #0]
  400e3a:	2b00      	cmp	r3, #0
  400e3c:	f000 80bb 	beq.w	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  400e40:	a903      	add	r1, sp, #12
  400e42:	202f      	movs	r0, #47	; 0x2f
  400e44:	4798      	blx	r3
  400e46:	e0b6      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  400e48:	2834      	cmp	r0, #52	; 0x34
  400e4a:	d120      	bne.n	400e8e <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  400e4c:	2300      	movs	r3, #0
  400e4e:	2204      	movs	r2, #4
  400e50:	a903      	add	r1, sp, #12
  400e52:	4628      	mov	r0, r5
  400e54:	4c59      	ldr	r4, [pc, #356]	; (400fbc <m2m_wifi_cb+0x254>)
  400e56:	47a0      	blx	r4
  400e58:	2800      	cmp	r0, #0
  400e5a:	f040 80ac 	bne.w	400fb6 <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  400e5e:	485a      	ldr	r0, [pc, #360]	; (400fc8 <m2m_wifi_cb+0x260>)
  400e60:	4c5a      	ldr	r4, [pc, #360]	; (400fcc <m2m_wifi_cb+0x264>)
  400e62:	47a0      	blx	r4
  400e64:	9903      	ldr	r1, [sp, #12]
  400e66:	0e0b      	lsrs	r3, r1, #24
  400e68:	9300      	str	r3, [sp, #0]
  400e6a:	f3c1 4307 	ubfx	r3, r1, #16, #8
  400e6e:	f3c1 2207 	ubfx	r2, r1, #8, #8
  400e72:	b2c9      	uxtb	r1, r1
  400e74:	4856      	ldr	r0, [pc, #344]	; (400fd0 <m2m_wifi_cb+0x268>)
  400e76:	47a0      	blx	r4
  400e78:	4856      	ldr	r0, [pc, #344]	; (400fd4 <m2m_wifi_cb+0x26c>)
  400e7a:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  400e7c:	4b50      	ldr	r3, [pc, #320]	; (400fc0 <m2m_wifi_cb+0x258>)
  400e7e:	681b      	ldr	r3, [r3, #0]
  400e80:	2b00      	cmp	r3, #0
  400e82:	f000 8098 	beq.w	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  400e86:	2100      	movs	r1, #0
  400e88:	2034      	movs	r0, #52	; 0x34
  400e8a:	4798      	blx	r3
  400e8c:	e093      	b.n	400fb6 <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  400e8e:	2811      	cmp	r0, #17
  400e90:	d116      	bne.n	400ec0 <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  400e92:	2300      	movs	r3, #0
  400e94:	4a50      	ldr	r2, [pc, #320]	; (400fd8 <m2m_wifi_cb+0x270>)
  400e96:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  400e98:	2204      	movs	r2, #4
  400e9a:	a903      	add	r1, sp, #12
  400e9c:	4628      	mov	r0, r5
  400e9e:	4c47      	ldr	r4, [pc, #284]	; (400fbc <m2m_wifi_cb+0x254>)
  400ea0:	47a0      	blx	r4
  400ea2:	2800      	cmp	r0, #0
  400ea4:	f040 8087 	bne.w	400fb6 <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  400ea8:	f89d 200c 	ldrb.w	r2, [sp, #12]
  400eac:	4b4b      	ldr	r3, [pc, #300]	; (400fdc <m2m_wifi_cb+0x274>)
  400eae:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  400eb0:	4b43      	ldr	r3, [pc, #268]	; (400fc0 <m2m_wifi_cb+0x258>)
  400eb2:	681b      	ldr	r3, [r3, #0]
  400eb4:	2b00      	cmp	r3, #0
  400eb6:	d07e      	beq.n	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  400eb8:	a903      	add	r1, sp, #12
  400eba:	2011      	movs	r0, #17
  400ebc:	4798      	blx	r3
  400ebe:	e07a      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  400ec0:	2813      	cmp	r0, #19
  400ec2:	d10f      	bne.n	400ee4 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  400ec4:	2300      	movs	r3, #0
  400ec6:	222c      	movs	r2, #44	; 0x2c
  400ec8:	a903      	add	r1, sp, #12
  400eca:	4628      	mov	r0, r5
  400ecc:	4c3b      	ldr	r4, [pc, #236]	; (400fbc <m2m_wifi_cb+0x254>)
  400ece:	47a0      	blx	r4
  400ed0:	2800      	cmp	r0, #0
  400ed2:	d170      	bne.n	400fb6 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400ed4:	4b3a      	ldr	r3, [pc, #232]	; (400fc0 <m2m_wifi_cb+0x258>)
  400ed6:	681b      	ldr	r3, [r3, #0]
  400ed8:	2b00      	cmp	r3, #0
  400eda:	d06c      	beq.n	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  400edc:	a903      	add	r1, sp, #12
  400ede:	2013      	movs	r0, #19
  400ee0:	4798      	blx	r3
  400ee2:	e068      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  400ee4:	2804      	cmp	r0, #4
  400ee6:	d10f      	bne.n	400f08 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400ee8:	2300      	movs	r3, #0
  400eea:	2204      	movs	r2, #4
  400eec:	a91c      	add	r1, sp, #112	; 0x70
  400eee:	4628      	mov	r0, r5
  400ef0:	4c32      	ldr	r4, [pc, #200]	; (400fbc <m2m_wifi_cb+0x254>)
  400ef2:	47a0      	blx	r4
  400ef4:	2800      	cmp	r0, #0
  400ef6:	d15e      	bne.n	400fb6 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400ef8:	4b31      	ldr	r3, [pc, #196]	; (400fc0 <m2m_wifi_cb+0x258>)
  400efa:	681b      	ldr	r3, [r3, #0]
  400efc:	2b00      	cmp	r3, #0
  400efe:	d05a      	beq.n	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  400f00:	a91c      	add	r1, sp, #112	; 0x70
  400f02:	2004      	movs	r0, #4
  400f04:	4798      	blx	r3
  400f06:	e056      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  400f08:	2865      	cmp	r0, #101	; 0x65
  400f0a:	d10f      	bne.n	400f2c <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  400f0c:	2300      	movs	r3, #0
  400f0e:	2204      	movs	r2, #4
  400f10:	a91c      	add	r1, sp, #112	; 0x70
  400f12:	4628      	mov	r0, r5
  400f14:	4c29      	ldr	r4, [pc, #164]	; (400fbc <m2m_wifi_cb+0x254>)
  400f16:	47a0      	blx	r4
  400f18:	2800      	cmp	r0, #0
  400f1a:	d14c      	bne.n	400fb6 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  400f1c:	4b28      	ldr	r3, [pc, #160]	; (400fc0 <m2m_wifi_cb+0x258>)
  400f1e:	681b      	ldr	r3, [r3, #0]
  400f20:	2b00      	cmp	r3, #0
  400f22:	d048      	beq.n	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  400f24:	a91c      	add	r1, sp, #112	; 0x70
  400f26:	2065      	movs	r0, #101	; 0x65
  400f28:	4798      	blx	r3
  400f2a:	e044      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  400f2c:	2809      	cmp	r0, #9
  400f2e:	d10f      	bne.n	400f50 <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  400f30:	2301      	movs	r3, #1
  400f32:	2264      	movs	r2, #100	; 0x64
  400f34:	a903      	add	r1, sp, #12
  400f36:	4628      	mov	r0, r5
  400f38:	4c20      	ldr	r4, [pc, #128]	; (400fbc <m2m_wifi_cb+0x254>)
  400f3a:	47a0      	blx	r4
  400f3c:	2800      	cmp	r0, #0
  400f3e:	d13a      	bne.n	400fb6 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400f40:	4b1f      	ldr	r3, [pc, #124]	; (400fc0 <m2m_wifi_cb+0x258>)
  400f42:	681b      	ldr	r3, [r3, #0]
  400f44:	2b00      	cmp	r3, #0
  400f46:	d036      	beq.n	400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  400f48:	a903      	add	r1, sp, #12
  400f4a:	2009      	movs	r0, #9
  400f4c:	4798      	blx	r3
  400f4e:	e032      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  400f50:	282a      	cmp	r0, #42	; 0x2a
  400f52:	d10d      	bne.n	400f70 <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  400f54:	2301      	movs	r3, #1
  400f56:	2204      	movs	r2, #4
  400f58:	a903      	add	r1, sp, #12
  400f5a:	4628      	mov	r0, r5
  400f5c:	4c17      	ldr	r4, [pc, #92]	; (400fbc <m2m_wifi_cb+0x254>)
  400f5e:	47a0      	blx	r4
  400f60:	bb48      	cbnz	r0, 400fb6 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  400f62:	4b17      	ldr	r3, [pc, #92]	; (400fc0 <m2m_wifi_cb+0x258>)
  400f64:	681b      	ldr	r3, [r3, #0]
  400f66:	b333      	cbz	r3, 400fb6 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  400f68:	a903      	add	r1, sp, #12
  400f6a:	202a      	movs	r0, #42	; 0x2a
  400f6c:	4798      	blx	r3
  400f6e:	e022      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  400f70:	2820      	cmp	r0, #32
  400f72:	d115      	bne.n	400fa0 <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  400f74:	2300      	movs	r3, #0
  400f76:	2208      	movs	r2, #8
  400f78:	a903      	add	r1, sp, #12
  400f7a:	4628      	mov	r0, r5
  400f7c:	4c0f      	ldr	r4, [pc, #60]	; (400fbc <m2m_wifi_cb+0x254>)
  400f7e:	47a0      	blx	r4
  400f80:	b9c8      	cbnz	r0, 400fb6 <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  400f82:	2301      	movs	r3, #1
  400f84:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  400f88:	9903      	ldr	r1, [sp, #12]
  400f8a:	f105 0008 	add.w	r0, r5, #8
  400f8e:	47a0      	blx	r4
  400f90:	b988      	cbnz	r0, 400fb6 <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  400f92:	4b0b      	ldr	r3, [pc, #44]	; (400fc0 <m2m_wifi_cb+0x258>)
  400f94:	681b      	ldr	r3, [r3, #0]
  400f96:	b173      	cbz	r3, 400fb6 <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  400f98:	a903      	add	r1, sp, #12
  400f9a:	2020      	movs	r0, #32
  400f9c:	4798      	blx	r3
  400f9e:	e00a      	b.n	400fb6 <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  400fa0:	f44f 7295 	mov.w	r2, #298	; 0x12a
  400fa4:	490e      	ldr	r1, [pc, #56]	; (400fe0 <m2m_wifi_cb+0x278>)
  400fa6:	480f      	ldr	r0, [pc, #60]	; (400fe4 <m2m_wifi_cb+0x27c>)
  400fa8:	4d08      	ldr	r5, [pc, #32]	; (400fcc <m2m_wifi_cb+0x264>)
  400faa:	47a8      	blx	r5
  400fac:	4621      	mov	r1, r4
  400fae:	480e      	ldr	r0, [pc, #56]	; (400fe8 <m2m_wifi_cb+0x280>)
  400fb0:	47a8      	blx	r5
  400fb2:	4808      	ldr	r0, [pc, #32]	; (400fd4 <m2m_wifi_cb+0x26c>)
  400fb4:	47a8      	blx	r5
	}
}
  400fb6:	b01f      	add	sp, #124	; 0x7c
  400fb8:	bd30      	pop	{r4, r5, pc}
  400fba:	bf00      	nop
  400fbc:	00400b79 	.word	0x00400b79
  400fc0:	204008cc 	.word	0x204008cc
  400fc4:	0040051d 	.word	0x0040051d
  400fc8:	00406a64 	.word	0x00406a64
  400fcc:	00403711 	.word	0x00403711
  400fd0:	00406a70 	.word	0x00406a70
  400fd4:	004067bc 	.word	0x004067bc
  400fd8:	204008d0 	.word	0x204008d0
  400fdc:	204008d1 	.word	0x204008d1
  400fe0:	00406a58 	.word	0x00406a58
  400fe4:	00406790 	.word	0x00406790
  400fe8:	00406a90 	.word	0x00406a90

00400fec <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  400fec:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fee:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  400ff0:	2301      	movs	r3, #1
  400ff2:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  400ff6:	2800      	cmp	r0, #0
  400ff8:	d04e      	beq.n	401098 <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  400ffa:	6802      	ldr	r2, [r0, #0]
  400ffc:	4b29      	ldr	r3, [pc, #164]	; (4010a4 <m2m_wifi_init+0xb8>)
  400ffe:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  401000:	2200      	movs	r2, #0
  401002:	4b29      	ldr	r3, [pc, #164]	; (4010a8 <m2m_wifi_init+0xbc>)
  401004:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  401006:	f10d 0007 	add.w	r0, sp, #7
  40100a:	4b28      	ldr	r3, [pc, #160]	; (4010ac <m2m_wifi_init+0xc0>)
  40100c:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  40100e:	4604      	mov	r4, r0
  401010:	2800      	cmp	r0, #0
  401012:	d143      	bne.n	40109c <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  401014:	4b26      	ldr	r3, [pc, #152]	; (4010b0 <m2m_wifi_init+0xc4>)
  401016:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  401018:	4604      	mov	r4, r0
  40101a:	2800      	cmp	r0, #0
  40101c:	d138      	bne.n	401090 <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40101e:	4925      	ldr	r1, [pc, #148]	; (4010b4 <m2m_wifi_init+0xc8>)
  401020:	2001      	movs	r0, #1
  401022:	4b25      	ldr	r3, [pc, #148]	; (4010b8 <m2m_wifi_init+0xcc>)
  401024:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  401026:	a802      	add	r0, sp, #8
  401028:	4b24      	ldr	r3, [pc, #144]	; (4010bc <m2m_wifi_init+0xd0>)
  40102a:	4798      	blx	r3
  40102c:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40102e:	4f24      	ldr	r7, [pc, #144]	; (4010c0 <m2m_wifi_init+0xd4>)
  401030:	4638      	mov	r0, r7
  401032:	4d24      	ldr	r5, [pc, #144]	; (4010c4 <m2m_wifi_init+0xd8>)
  401034:	47a8      	blx	r5
  401036:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40103a:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40103e:	f89d 100c 	ldrb.w	r1, [sp, #12]
  401042:	4821      	ldr	r0, [pc, #132]	; (4010c8 <m2m_wifi_init+0xdc>)
  401044:	47a8      	blx	r5
  401046:	4e21      	ldr	r6, [pc, #132]	; (4010cc <m2m_wifi_init+0xe0>)
  401048:	4630      	mov	r0, r6
  40104a:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  40104c:	4638      	mov	r0, r7
  40104e:	47a8      	blx	r5
  401050:	f89d 3011 	ldrb.w	r3, [sp, #17]
  401054:	f89d 2010 	ldrb.w	r2, [sp, #16]
  401058:	f89d 100f 	ldrb.w	r1, [sp, #15]
  40105c:	481c      	ldr	r0, [pc, #112]	; (4010d0 <m2m_wifi_init+0xe4>)
  40105e:	47a8      	blx	r5
  401060:	4630      	mov	r0, r6
  401062:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  401064:	4638      	mov	r0, r7
  401066:	47a8      	blx	r5
  401068:	2300      	movs	r3, #0
  40106a:	2203      	movs	r2, #3
  40106c:	2113      	movs	r1, #19
  40106e:	4819      	ldr	r0, [pc, #100]	; (4010d4 <m2m_wifi_init+0xe8>)
  401070:	47a8      	blx	r5
  401072:	4630      	mov	r0, r6
  401074:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  401076:	f114 0f0d 	cmn.w	r4, #13
  40107a:	d10f      	bne.n	40109c <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  40107c:	f240 12d5 	movw	r2, #469	; 0x1d5
  401080:	4915      	ldr	r1, [pc, #84]	; (4010d8 <m2m_wifi_init+0xec>)
  401082:	4816      	ldr	r0, [pc, #88]	; (4010dc <m2m_wifi_init+0xf0>)
  401084:	47a8      	blx	r5
  401086:	4816      	ldr	r0, [pc, #88]	; (4010e0 <m2m_wifi_init+0xf4>)
  401088:	47a8      	blx	r5
  40108a:	4630      	mov	r0, r6
  40108c:	47a8      	blx	r5
  40108e:	e005      	b.n	40109c <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  401090:	2000      	movs	r0, #0
  401092:	4b14      	ldr	r3, [pc, #80]	; (4010e4 <m2m_wifi_init+0xf8>)
  401094:	4798      	blx	r3
  401096:	e001      	b.n	40109c <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  401098:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  40109c:	4620      	mov	r0, r4
  40109e:	b00b      	add	sp, #44	; 0x2c
  4010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4010a2:	bf00      	nop
  4010a4:	204008cc 	.word	0x204008cc
  4010a8:	204008d0 	.word	0x204008d0
  4010ac:	00401a31 	.word	0x00401a31
  4010b0:	00400d19 	.word	0x00400d19
  4010b4:	00400d69 	.word	0x00400d69
  4010b8:	00400c89 	.word	0x00400c89
  4010bc:	00401985 	.word	0x00401985
  4010c0:	00406a64 	.word	0x00406a64
  4010c4:	00403711 	.word	0x00403711
  4010c8:	00406b48 	.word	0x00406b48
  4010cc:	004067bc 	.word	0x004067bc
  4010d0:	00406b64 	.word	0x00406b64
  4010d4:	00406b80 	.word	0x00406b80
  4010d8:	00406d8c 	.word	0x00406d8c
  4010dc:	00406790 	.word	0x00406790
  4010e0:	00406b9c 	.word	0x00406b9c
  4010e4:	00401af9 	.word	0x00401af9

004010e8 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  4010e8:	b508      	push	{r3, lr}
	return hif_handle_isr();
  4010ea:	4b01      	ldr	r3, [pc, #4]	; (4010f0 <m2m_wifi_handle_events+0x8>)
  4010ec:	4798      	blx	r3
}
  4010ee:	bd08      	pop	{r3, pc}
  4010f0:	00400859 	.word	0x00400859

004010f4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  4010f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010f8:	b0a0      	sub	sp, #128	; 0x80
  4010fa:	4680      	mov	r8, r0
  4010fc:	460d      	mov	r5, r1
  4010fe:	4614      	mov	r4, r2
  401100:	461e      	mov	r6, r3
  401102:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  401106:	2a01      	cmp	r2, #1
  401108:	d045      	beq.n	401196 <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  40110a:	b963      	cbnz	r3, 401126 <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  40110c:	f240 2203 	movw	r2, #515	; 0x203
  401110:	497a      	ldr	r1, [pc, #488]	; (4012fc <m2m_wifi_connect_sc+0x208>)
  401112:	487b      	ldr	r0, [pc, #492]	; (401300 <m2m_wifi_connect_sc+0x20c>)
  401114:	4c7b      	ldr	r4, [pc, #492]	; (401304 <m2m_wifi_connect_sc+0x210>)
  401116:	47a0      	blx	r4
  401118:	487b      	ldr	r0, [pc, #492]	; (401308 <m2m_wifi_connect_sc+0x214>)
  40111a:	47a0      	blx	r4
  40111c:	487b      	ldr	r0, [pc, #492]	; (40130c <m2m_wifi_connect_sc+0x218>)
  40111e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401120:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401124:	e0e7      	b.n	4012f6 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  401126:	2a02      	cmp	r2, #2
  401128:	d135      	bne.n	401196 <m2m_wifi_connect_sc+0xa2>
  40112a:	4618      	mov	r0, r3
  40112c:	4b78      	ldr	r3, [pc, #480]	; (401310 <m2m_wifi_connect_sc+0x21c>)
  40112e:	4798      	blx	r3
  401130:	2840      	cmp	r0, #64	; 0x40
  401132:	d130      	bne.n	401196 <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  401134:	7833      	ldrb	r3, [r6, #0]
  401136:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40113a:	b2d2      	uxtb	r2, r2
  40113c:	2a36      	cmp	r2, #54	; 0x36
  40113e:	d81b      	bhi.n	401178 <m2m_wifi_connect_sc+0x84>
  401140:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401144:	b2d2      	uxtb	r2, r2
  401146:	2a06      	cmp	r2, #6
  401148:	d916      	bls.n	401178 <m2m_wifi_connect_sc+0x84>
  40114a:	3b47      	subs	r3, #71	; 0x47
  40114c:	b2db      	uxtb	r3, r3
  40114e:	2b19      	cmp	r3, #25
  401150:	d912      	bls.n	401178 <m2m_wifi_connect_sc+0x84>
  401152:	4631      	mov	r1, r6
  401154:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  401158:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40115c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  401160:	b2d2      	uxtb	r2, r2
  401162:	2a06      	cmp	r2, #6
  401164:	d908      	bls.n	401178 <m2m_wifi_connect_sc+0x84>
  401166:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40116a:	b2d2      	uxtb	r2, r2
  40116c:	2a36      	cmp	r2, #54	; 0x36
  40116e:	d803      	bhi.n	401178 <m2m_wifi_connect_sc+0x84>
  401170:	3b47      	subs	r3, #71	; 0x47
  401172:	b2db      	uxtb	r3, r3
  401174:	2b19      	cmp	r3, #25
  401176:	d80c      	bhi.n	401192 <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  401178:	f240 220f 	movw	r2, #527	; 0x20f
  40117c:	495f      	ldr	r1, [pc, #380]	; (4012fc <m2m_wifi_connect_sc+0x208>)
  40117e:	4860      	ldr	r0, [pc, #384]	; (401300 <m2m_wifi_connect_sc+0x20c>)
  401180:	4c60      	ldr	r4, [pc, #384]	; (401304 <m2m_wifi_connect_sc+0x210>)
  401182:	47a0      	blx	r4
  401184:	4863      	ldr	r0, [pc, #396]	; (401314 <m2m_wifi_connect_sc+0x220>)
  401186:	47a0      	blx	r4
  401188:	4860      	ldr	r0, [pc, #384]	; (40130c <m2m_wifi_connect_sc+0x218>)
  40118a:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  40118c:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  401190:	e0b1      	b.n	4012f6 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  401192:	4288      	cmp	r0, r1
  401194:	d1e0      	bne.n	401158 <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  401196:	1e6b      	subs	r3, r5, #1
  401198:	b2db      	uxtb	r3, r3
  40119a:	2b1f      	cmp	r3, #31
  40119c:	d90c      	bls.n	4011b8 <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  40119e:	f240 2219 	movw	r2, #537	; 0x219
  4011a2:	4956      	ldr	r1, [pc, #344]	; (4012fc <m2m_wifi_connect_sc+0x208>)
  4011a4:	4856      	ldr	r0, [pc, #344]	; (401300 <m2m_wifi_connect_sc+0x20c>)
  4011a6:	4c57      	ldr	r4, [pc, #348]	; (401304 <m2m_wifi_connect_sc+0x210>)
  4011a8:	47a0      	blx	r4
  4011aa:	485b      	ldr	r0, [pc, #364]	; (401318 <m2m_wifi_connect_sc+0x224>)
  4011ac:	47a0      	blx	r4
  4011ae:	4857      	ldr	r0, [pc, #348]	; (40130c <m2m_wifi_connect_sc+0x218>)
  4011b0:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4011b2:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4011b6:	e09e      	b.n	4012f6 <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  4011b8:	2fff      	cmp	r7, #255	; 0xff
  4011ba:	d00e      	beq.n	4011da <m2m_wifi_connect_sc+0xe6>
  4011bc:	2f0d      	cmp	r7, #13
  4011be:	d90c      	bls.n	4011da <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  4011c0:	f240 2222 	movw	r2, #546	; 0x222
  4011c4:	494d      	ldr	r1, [pc, #308]	; (4012fc <m2m_wifi_connect_sc+0x208>)
  4011c6:	484e      	ldr	r0, [pc, #312]	; (401300 <m2m_wifi_connect_sc+0x20c>)
  4011c8:	4c4e      	ldr	r4, [pc, #312]	; (401304 <m2m_wifi_connect_sc+0x210>)
  4011ca:	47a0      	blx	r4
  4011cc:	4853      	ldr	r0, [pc, #332]	; (40131c <m2m_wifi_connect_sc+0x228>)
  4011ce:	47a0      	blx	r4
  4011d0:	484e      	ldr	r0, [pc, #312]	; (40130c <m2m_wifi_connect_sc+0x218>)
  4011d2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4011d4:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4011d8:	e08d      	b.n	4012f6 <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  4011da:	462a      	mov	r2, r5
  4011dc:	4641      	mov	r1, r8
  4011de:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4011e2:	4b4f      	ldr	r3, [pc, #316]	; (401320 <m2m_wifi_connect_sc+0x22c>)
  4011e4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4011e6:	ab20      	add	r3, sp, #128	; 0x80
  4011e8:	441d      	add	r5, r3
  4011ea:	2300      	movs	r3, #0
  4011ec:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4011f0:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4011f4:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4011f8:	3300      	adds	r3, #0
  4011fa:	bf18      	it	ne
  4011fc:	2301      	movne	r3, #1
  4011fe:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  401202:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  401206:	2c03      	cmp	r4, #3
  401208:	d138      	bne.n	40127c <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  40120a:	7833      	ldrb	r3, [r6, #0]
  40120c:	3b01      	subs	r3, #1
  40120e:	b2db      	uxtb	r3, r3
  401210:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  401214:	2b03      	cmp	r3, #3
  401216:	d90e      	bls.n	401236 <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  401218:	f240 2239 	movw	r2, #569	; 0x239
  40121c:	4937      	ldr	r1, [pc, #220]	; (4012fc <m2m_wifi_connect_sc+0x208>)
  40121e:	4838      	ldr	r0, [pc, #224]	; (401300 <m2m_wifi_connect_sc+0x20c>)
  401220:	4c38      	ldr	r4, [pc, #224]	; (401304 <m2m_wifi_connect_sc+0x210>)
  401222:	47a0      	blx	r4
  401224:	f89d 1014 	ldrb.w	r1, [sp, #20]
  401228:	483e      	ldr	r0, [pc, #248]	; (401324 <m2m_wifi_connect_sc+0x230>)
  40122a:	47a0      	blx	r4
  40122c:	4837      	ldr	r0, [pc, #220]	; (40130c <m2m_wifi_connect_sc+0x218>)
  40122e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  401230:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401234:	e05f      	b.n	4012f6 <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  401236:	7872      	ldrb	r2, [r6, #1]
  401238:	1e53      	subs	r3, r2, #1
  40123a:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  40123e:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  401242:	2b0b      	cmp	r3, #11
  401244:	d00e      	beq.n	401264 <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  401246:	f44f 7210 	mov.w	r2, #576	; 0x240
  40124a:	492c      	ldr	r1, [pc, #176]	; (4012fc <m2m_wifi_connect_sc+0x208>)
  40124c:	482c      	ldr	r0, [pc, #176]	; (401300 <m2m_wifi_connect_sc+0x20c>)
  40124e:	4c2d      	ldr	r4, [pc, #180]	; (401304 <m2m_wifi_connect_sc+0x210>)
  401250:	47a0      	blx	r4
  401252:	f89d 1015 	ldrb.w	r1, [sp, #21]
  401256:	4834      	ldr	r0, [pc, #208]	; (401328 <m2m_wifi_connect_sc+0x234>)
  401258:	47a0      	blx	r4
  40125a:	482c      	ldr	r0, [pc, #176]	; (40130c <m2m_wifi_connect_sc+0x218>)
  40125c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40125e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  401262:	e048      	b.n	4012f6 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  401264:	1cb1      	adds	r1, r6, #2
  401266:	f10d 0016 	add.w	r0, sp, #22
  40126a:	4b2d      	ldr	r3, [pc, #180]	; (401320 <m2m_wifi_connect_sc+0x22c>)
  40126c:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  40126e:	7873      	ldrb	r3, [r6, #1]
  401270:	aa20      	add	r2, sp, #128	; 0x80
  401272:	4413      	add	r3, r2
  401274:	2200      	movs	r2, #0
  401276:	f803 2c6a 	strb.w	r2, [r3, #-106]
  40127a:	e032      	b.n	4012e2 <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  40127c:	2c02      	cmp	r4, #2
  40127e:	d119      	bne.n	4012b4 <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  401280:	4630      	mov	r0, r6
  401282:	4b23      	ldr	r3, [pc, #140]	; (401310 <m2m_wifi_connect_sc+0x21c>)
  401284:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  401286:	1e43      	subs	r3, r0, #1
  401288:	b29b      	uxth	r3, r3
  40128a:	2b3f      	cmp	r3, #63	; 0x3f
  40128c:	d90c      	bls.n	4012a8 <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  40128e:	f240 224f 	movw	r2, #591	; 0x24f
  401292:	491a      	ldr	r1, [pc, #104]	; (4012fc <m2m_wifi_connect_sc+0x208>)
  401294:	481a      	ldr	r0, [pc, #104]	; (401300 <m2m_wifi_connect_sc+0x20c>)
  401296:	4c1b      	ldr	r4, [pc, #108]	; (401304 <m2m_wifi_connect_sc+0x210>)
  401298:	47a0      	blx	r4
  40129a:	4824      	ldr	r0, [pc, #144]	; (40132c <m2m_wifi_connect_sc+0x238>)
  40129c:	47a0      	blx	r4
  40129e:	481b      	ldr	r0, [pc, #108]	; (40130c <m2m_wifi_connect_sc+0x218>)
  4012a0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4012a2:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4012a6:	e026      	b.n	4012f6 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4012a8:	1c42      	adds	r2, r0, #1
  4012aa:	4631      	mov	r1, r6
  4012ac:	a805      	add	r0, sp, #20
  4012ae:	4b1c      	ldr	r3, [pc, #112]	; (401320 <m2m_wifi_connect_sc+0x22c>)
  4012b0:	4798      	blx	r3
  4012b2:	e016      	b.n	4012e2 <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  4012b4:	2c04      	cmp	r4, #4
  4012b6:	d105      	bne.n	4012c4 <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  4012b8:	223e      	movs	r2, #62	; 0x3e
  4012ba:	4631      	mov	r1, r6
  4012bc:	a805      	add	r0, sp, #20
  4012be:	4b18      	ldr	r3, [pc, #96]	; (401320 <m2m_wifi_connect_sc+0x22c>)
  4012c0:	4798      	blx	r3
  4012c2:	e00e      	b.n	4012e2 <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4012c4:	2c01      	cmp	r4, #1
  4012c6:	d00c      	beq.n	4012e2 <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  4012c8:	f240 225f 	movw	r2, #607	; 0x25f
  4012cc:	490b      	ldr	r1, [pc, #44]	; (4012fc <m2m_wifi_connect_sc+0x208>)
  4012ce:	480c      	ldr	r0, [pc, #48]	; (401300 <m2m_wifi_connect_sc+0x20c>)
  4012d0:	4c0c      	ldr	r4, [pc, #48]	; (401304 <m2m_wifi_connect_sc+0x210>)
  4012d2:	47a0      	blx	r4
  4012d4:	4816      	ldr	r0, [pc, #88]	; (401330 <m2m_wifi_connect_sc+0x23c>)
  4012d6:	47a0      	blx	r4
  4012d8:	480c      	ldr	r0, [pc, #48]	; (40130c <m2m_wifi_connect_sc+0x218>)
  4012da:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4012dc:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4012e0:	e009      	b.n	4012f6 <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4012e2:	2300      	movs	r3, #0
  4012e4:	9302      	str	r3, [sp, #8]
  4012e6:	9301      	str	r3, [sp, #4]
  4012e8:	9300      	str	r3, [sp, #0]
  4012ea:	236c      	movs	r3, #108	; 0x6c
  4012ec:	aa05      	add	r2, sp, #20
  4012ee:	2128      	movs	r1, #40	; 0x28
  4012f0:	2001      	movs	r0, #1
  4012f2:	4c10      	ldr	r4, [pc, #64]	; (401334 <m2m_wifi_connect_sc+0x240>)
  4012f4:	47a0      	blx	r4

ERR1:
	return ret;
}
  4012f6:	b020      	add	sp, #128	; 0x80
  4012f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012fc:	00406a44 	.word	0x00406a44
  401300:	00406790 	.word	0x00406790
  401304:	00403711 	.word	0x00403711
  401308:	00406bb8 	.word	0x00406bb8
  40130c:	004067bc 	.word	0x004067bc
  401310:	0040052d 	.word	0x0040052d
  401314:	00406bcc 	.word	0x00406bcc
  401318:	00406bdc 	.word	0x00406bdc
  40131c:	00406bf0 	.word	0x00406bf0
  401320:	00400509 	.word	0x00400509
  401324:	00406bfc 	.word	0x00406bfc
  401328:	00406c18 	.word	0x00406c18
  40132c:	00406c34 	.word	0x00406c34
  401330:	00406c50 	.word	0x00406c50
  401334:	00400681 	.word	0x00400681

00401338 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  401338:	b510      	push	{r4, lr}
  40133a:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  40133c:	2400      	movs	r4, #0
  40133e:	9401      	str	r4, [sp, #4]
  401340:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  401344:	9400      	str	r4, [sp, #0]
  401346:	4c02      	ldr	r4, [pc, #8]	; (401350 <m2m_wifi_connect+0x18>)
  401348:	47a0      	blx	r4
}
  40134a:	b002      	add	sp, #8
  40134c:	bd10      	pop	{r4, pc}
  40134e:	bf00      	nop
  401350:	004010f5 	.word	0x004010f5

00401354 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  401354:	2000      	movs	r0, #0
  401356:	4770      	bx	lr

00401358 <m2m_wifi_request_scan>:
}
sint8 m2m_wifi_request_scan(uint8 ch)
{
	sint8	s8Ret = M2M_SUCCESS;

	if(!gu8scanInProgress)
  401358:	4b13      	ldr	r3, [pc, #76]	; (4013a8 <m2m_wifi_request_scan+0x50>)
  40135a:	781b      	ldrb	r3, [r3, #0]
  40135c:	f013 0fff 	tst.w	r3, #255	; 0xff
  401360:	d118      	bne.n	401394 <m2m_wifi_request_scan+0x3c>
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
  401362:	f1a0 030e 	sub.w	r3, r0, #14
  401366:	b2db      	uxtb	r3, r3
  401368:	2bf0      	cmp	r3, #240	; 0xf0
  40136a:	d916      	bls.n	40139a <m2m_wifi_request_scan+0x42>
	strScanRegion.u16ScanRegion = ScanRegion;
	s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_REGION, (uint8*)&strScanRegion, sizeof(tstrM2MScanRegion),NULL, 0,0);
	return s8Ret;
}
sint8 m2m_wifi_request_scan(uint8 ch)
{
  40136c:	b510      	push	{r4, lr}
  40136e:	b086      	sub	sp, #24
	if(!gu8scanInProgress)
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
		{
			tstrM2MScan strtmp;
			strtmp.u8ChNum = ch;
  401370:	aa06      	add	r2, sp, #24
  401372:	f802 0d04 	strb.w	r0, [r2, #-4]!
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
  401376:	2300      	movs	r3, #0
  401378:	9302      	str	r3, [sp, #8]
  40137a:	9301      	str	r3, [sp, #4]
  40137c:	9300      	str	r3, [sp, #0]
  40137e:	2304      	movs	r3, #4
  401380:	2110      	movs	r1, #16
  401382:	2001      	movs	r0, #1
  401384:	4c09      	ldr	r4, [pc, #36]	; (4013ac <m2m_wifi_request_scan+0x54>)
  401386:	47a0      	blx	r4
			if(s8Ret == M2M_SUCCESS)
  401388:	4603      	mov	r3, r0
  40138a:	b950      	cbnz	r0, 4013a2 <m2m_wifi_request_scan+0x4a>
			{
				gu8scanInProgress = 1;
  40138c:	2101      	movs	r1, #1
  40138e:	4a06      	ldr	r2, [pc, #24]	; (4013a8 <m2m_wifi_request_scan+0x50>)
  401390:	7011      	strb	r1, [r2, #0]
  401392:	e006      	b.n	4013a2 <m2m_wifi_request_scan+0x4a>
			s8Ret = M2M_ERR_INVALID_ARG;
		}
	}
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
  401394:	f06f 030d 	mvn.w	r3, #13
  401398:	e001      	b.n	40139e <m2m_wifi_request_scan+0x46>
				gu8scanInProgress = 1;
			}
		}
		else
		{
			s8Ret = M2M_ERR_INVALID_ARG;
  40139a:	f06f 030e 	mvn.w	r3, #14
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
	}
	return s8Ret;
}
  40139e:	4618      	mov	r0, r3
  4013a0:	4770      	bx	lr
  4013a2:	4618      	mov	r0, r3
  4013a4:	b006      	add	sp, #24
  4013a6:	bd10      	pop	{r4, pc}
  4013a8:	204008d0 	.word	0x204008d0
  4013ac:	00400681 	.word	0x00400681

004013b0 <m2m_wifi_req_scan_result>:
			 which mean if large delay occur between the scan request and the scan result request, 
			 the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
  4013b0:	b510      	push	{r4, lr}
  4013b2:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;
	tstrM2mReqScanResult strReqScanRlt;
	strReqScanRlt.u8Index = index;
  4013b4:	aa06      	add	r2, sp, #24
  4013b6:	f802 0d04 	strb.w	r0, [r2, #-4]!
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
  4013ba:	2300      	movs	r3, #0
  4013bc:	9302      	str	r3, [sp, #8]
  4013be:	9301      	str	r3, [sp, #4]
  4013c0:	9300      	str	r3, [sp, #0]
  4013c2:	2304      	movs	r3, #4
  4013c4:	2112      	movs	r1, #18
  4013c6:	2001      	movs	r0, #1
  4013c8:	4c01      	ldr	r4, [pc, #4]	; (4013d0 <m2m_wifi_req_scan_result+0x20>)
  4013ca:	47a0      	blx	r4
	return ret;
}
  4013cc:	b006      	add	sp, #24
  4013ce:	bd10      	pop	{r4, pc}
  4013d0:	00400681 	.word	0x00400681

004013d4 <m2m_wifi_get_num_ap_found>:
			 calling that function in any other place will return undefined/undated numbers.
			 Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
	return gu8ChNum;
  4013d4:	4b01      	ldr	r3, [pc, #4]	; (4013dc <m2m_wifi_get_num_ap_found+0x8>)
  4013d6:	7818      	ldrb	r0, [r3, #0]
}
  4013d8:	4770      	bx	lr
  4013da:	bf00      	nop
  4013dc:	204008d1 	.word	0x204008d1

004013e0 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4013e2:	b083      	sub	sp, #12
  4013e4:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4013e6:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4013ea:	4e0a      	ldr	r6, [pc, #40]	; (401414 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4013ec:	4f0a      	ldr	r7, [pc, #40]	; (401418 <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4013ee:	4621      	mov	r1, r4
  4013f0:	4628      	mov	r0, r5
  4013f2:	47b0      	blx	r6
		if(val32 != 0) {		
  4013f4:	b154      	cbz	r4, 40140c <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4013f6:	a902      	add	r1, sp, #8
  4013f8:	2300      	movs	r3, #0
  4013fa:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4013fe:	4628      	mov	r0, r5
  401400:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  401402:	2800      	cmp	r0, #0
  401404:	d1f3      	bne.n	4013ee <chip_apply_conf+0xe>
				if(reg == val32)
  401406:	9b01      	ldr	r3, [sp, #4]
  401408:	429c      	cmp	r4, r3
  40140a:	d1f0      	bne.n	4013ee <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  40140c:	2000      	movs	r0, #0
  40140e:	b003      	add	sp, #12
  401410:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401412:	bf00      	nop
  401414:	004018b9 	.word	0x004018b9
  401418:	004018ad 	.word	0x004018ad

0040141c <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  40141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401420:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  401422:	2001      	movs	r0, #1
  401424:	4b3d      	ldr	r3, [pc, #244]	; (40151c <nm_clkless_wake+0x100>)
  401426:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  401428:	a901      	add	r1, sp, #4
  40142a:	2001      	movs	r0, #1
  40142c:	4b3c      	ldr	r3, [pc, #240]	; (401520 <nm_clkless_wake+0x104>)
  40142e:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  401430:	4682      	mov	sl, r0
  401432:	b148      	cbz	r0, 401448 <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  401434:	2272      	movs	r2, #114	; 0x72
  401436:	493b      	ldr	r1, [pc, #236]	; (401524 <nm_clkless_wake+0x108>)
  401438:	483b      	ldr	r0, [pc, #236]	; (401528 <nm_clkless_wake+0x10c>)
  40143a:	4c3c      	ldr	r4, [pc, #240]	; (40152c <nm_clkless_wake+0x110>)
  40143c:	47a0      	blx	r4
  40143e:	483c      	ldr	r0, [pc, #240]	; (401530 <nm_clkless_wake+0x114>)
  401440:	47a0      	blx	r4
  401442:	483c      	ldr	r0, [pc, #240]	; (401534 <nm_clkless_wake+0x118>)
  401444:	47a0      	blx	r4
		goto _WAKE_EXIT;
  401446:	e064      	b.n	401512 <nm_clkless_wake+0xf6>
  401448:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40144a:	f04f 0801 	mov.w	r8, #1
  40144e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 401548 <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  401452:	4d32      	ldr	r5, [pc, #200]	; (40151c <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  401454:	4f38      	ldr	r7, [pc, #224]	; (401538 <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  401456:	9901      	ldr	r1, [sp, #4]
  401458:	f041 0102 	orr.w	r1, r1, #2
  40145c:	4640      	mov	r0, r8
  40145e:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  401460:	4640      	mov	r0, r8
  401462:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401464:	4669      	mov	r1, sp
  401466:	4b35      	ldr	r3, [pc, #212]	; (40153c <nm_clkless_wake+0x120>)
  401468:	6818      	ldr	r0, [r3, #0]
  40146a:	4b2d      	ldr	r3, [pc, #180]	; (401520 <nm_clkless_wake+0x104>)
  40146c:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40146e:	b918      	cbnz	r0, 401478 <nm_clkless_wake+0x5c>
  401470:	9b00      	ldr	r3, [sp, #0]
  401472:	b10b      	cbz	r3, 401478 <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401474:	4e31      	ldr	r6, [pc, #196]	; (40153c <nm_clkless_wake+0x120>)
  401476:	e037      	b.n	4014e8 <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  401478:	4e30      	ldr	r6, [pc, #192]	; (40153c <nm_clkless_wake+0x120>)
  40147a:	230e      	movs	r3, #14
  40147c:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  40147e:	4640      	mov	r0, r8
  401480:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  401482:	4669      	mov	r1, sp
  401484:	6830      	ldr	r0, [r6, #0]
  401486:	4b26      	ldr	r3, [pc, #152]	; (401520 <nm_clkless_wake+0x104>)
  401488:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40148a:	b910      	cbnz	r0, 401492 <nm_clkless_wake+0x76>
  40148c:	9b00      	ldr	r3, [sp, #0]
  40148e:	2b00      	cmp	r3, #0
  401490:	d1f0      	bne.n	401474 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  401492:	4e2a      	ldr	r6, [pc, #168]	; (40153c <nm_clkless_wake+0x120>)
  401494:	2313      	movs	r3, #19
  401496:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  401498:	4640      	mov	r0, r8
  40149a:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40149c:	4669      	mov	r1, sp
  40149e:	6830      	ldr	r0, [r6, #0]
  4014a0:	4b1f      	ldr	r3, [pc, #124]	; (401520 <nm_clkless_wake+0x104>)
  4014a2:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  4014a4:	4606      	mov	r6, r0
  4014a6:	2800      	cmp	r0, #0
  4014a8:	d0e4      	beq.n	401474 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  4014aa:	2296      	movs	r2, #150	; 0x96
  4014ac:	491d      	ldr	r1, [pc, #116]	; (401524 <nm_clkless_wake+0x108>)
  4014ae:	481e      	ldr	r0, [pc, #120]	; (401528 <nm_clkless_wake+0x10c>)
  4014b0:	4c1e      	ldr	r4, [pc, #120]	; (40152c <nm_clkless_wake+0x110>)
  4014b2:	47a0      	blx	r4
  4014b4:	4822      	ldr	r0, [pc, #136]	; (401540 <nm_clkless_wake+0x124>)
  4014b6:	47a0      	blx	r4
  4014b8:	481e      	ldr	r0, [pc, #120]	; (401534 <nm_clkless_wake+0x118>)
  4014ba:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014bc:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  4014be:	e028      	b.n	401512 <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  4014c0:	2002      	movs	r0, #2
  4014c2:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4014c4:	4669      	mov	r1, sp
  4014c6:	6830      	ldr	r0, [r6, #0]
  4014c8:	4b15      	ldr	r3, [pc, #84]	; (401520 <nm_clkless_wake+0x104>)
  4014ca:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  4014cc:	9b00      	ldr	r3, [sp, #0]
  4014ce:	f013 0f04 	tst.w	r3, #4
  4014d2:	d109      	bne.n	4014e8 <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4014d4:	22aa      	movs	r2, #170	; 0xaa
  4014d6:	4913      	ldr	r1, [pc, #76]	; (401524 <nm_clkless_wake+0x108>)
  4014d8:	4813      	ldr	r0, [pc, #76]	; (401528 <nm_clkless_wake+0x10c>)
  4014da:	f8df b050 	ldr.w	fp, [pc, #80]	; 40152c <nm_clkless_wake+0x110>
  4014de:	47d8      	blx	fp
  4014e0:	4818      	ldr	r0, [pc, #96]	; (401544 <nm_clkless_wake+0x128>)
  4014e2:	47d8      	blx	fp
  4014e4:	4813      	ldr	r0, [pc, #76]	; (401534 <nm_clkless_wake+0x118>)
  4014e6:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4014e8:	9b00      	ldr	r3, [sp, #0]
  4014ea:	f013 0f04 	tst.w	r3, #4
  4014ee:	d110      	bne.n	401512 <nm_clkless_wake+0xf6>
  4014f0:	3401      	adds	r4, #1
  4014f2:	fba7 2304 	umull	r2, r3, r7, r4
  4014f6:	085b      	lsrs	r3, r3, #1
  4014f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4014fc:	429c      	cmp	r4, r3
  4014fe:	d0df      	beq.n	4014c0 <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  401500:	9901      	ldr	r1, [sp, #4]
  401502:	f041 0102 	orr.w	r1, r1, #2
  401506:	4640      	mov	r0, r8
  401508:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  40150a:	9b00      	ldr	r3, [sp, #0]
  40150c:	f013 0f04 	tst.w	r3, #4
  401510:	d0a1      	beq.n	401456 <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  401512:	4650      	mov	r0, sl
  401514:	b003      	add	sp, #12
  401516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40151a:	bf00      	nop
  40151c:	004001b9 	.word	0x004001b9
  401520:	004018ad 	.word	0x004018ad
  401524:	00406da8 	.word	0x00406da8
  401528:	00406790 	.word	0x00406790
  40152c:	00403711 	.word	0x00403711
  401530:	00406db8 	.word	0x00406db8
  401534:	004067bc 	.word	0x004067bc
  401538:	aaaaaaab 	.word	0xaaaaaaab
  40153c:	20400010 	.word	0x20400010
  401540:	00406dd8 	.word	0x00406dd8
  401544:	00406df8 	.word	0x00406df8
  401548:	004018b9 	.word	0x004018b9

0040154c <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  40154c:	b500      	push	{lr}
  40154e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  401550:	a901      	add	r1, sp, #4
  401552:	f241 4008 	movw	r0, #5128	; 0x1408
  401556:	4b15      	ldr	r3, [pc, #84]	; (4015ac <enable_interrupts+0x60>)
  401558:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40155a:	b9e0      	cbnz	r0, 401596 <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  40155c:	9901      	ldr	r1, [sp, #4]
  40155e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401562:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  401564:	f241 4008 	movw	r0, #5128	; 0x1408
  401568:	4b11      	ldr	r3, [pc, #68]	; (4015b0 <enable_interrupts+0x64>)
  40156a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40156c:	b9b0      	cbnz	r0, 40159c <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  40156e:	a901      	add	r1, sp, #4
  401570:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  401574:	4b0d      	ldr	r3, [pc, #52]	; (4015ac <enable_interrupts+0x60>)
  401576:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401578:	b998      	cbnz	r0, 4015a2 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40157a:	9901      	ldr	r1, [sp, #4]
  40157c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401580:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  401582:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  401586:	4b0a      	ldr	r3, [pc, #40]	; (4015b0 <enable_interrupts+0x64>)
  401588:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40158a:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  40158c:	bf14      	ite	ne
  40158e:	f06f 0005 	mvnne.w	r0, #5
  401592:	2000      	moveq	r0, #0
  401594:	e007      	b.n	4015a6 <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  401596:	f06f 0005 	mvn.w	r0, #5
  40159a:	e004      	b.n	4015a6 <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  40159c:	f06f 0005 	mvn.w	r0, #5
  4015a0:	e001      	b.n	4015a6 <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4015a2:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  4015a6:	b003      	add	sp, #12
  4015a8:	f85d fb04 	ldr.w	pc, [sp], #4
  4015ac:	004018ad 	.word	0x004018ad
  4015b0:	004018b9 	.word	0x004018b9

004015b4 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  4015b4:	b510      	push	{r4, lr}
  4015b6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  4015b8:	4b24      	ldr	r3, [pc, #144]	; (40164c <nmi_get_chipid+0x98>)
  4015ba:	681c      	ldr	r4, [r3, #0]
  4015bc:	2c00      	cmp	r4, #0
  4015be:	d140      	bne.n	401642 <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  4015c0:	4619      	mov	r1, r3
  4015c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4015c6:	4b22      	ldr	r3, [pc, #136]	; (401650 <nmi_get_chipid+0x9c>)
  4015c8:	4798      	blx	r3
  4015ca:	b118      	cbz	r0, 4015d4 <nmi_get_chipid+0x20>
			chipid = 0;
  4015cc:	2200      	movs	r2, #0
  4015ce:	4b1f      	ldr	r3, [pc, #124]	; (40164c <nmi_get_chipid+0x98>)
  4015d0:	601a      	str	r2, [r3, #0]
			return 0;
  4015d2:	e038      	b.n	401646 <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4015d4:	a901      	add	r1, sp, #4
  4015d6:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4015da:	4b1d      	ldr	r3, [pc, #116]	; (401650 <nmi_get_chipid+0x9c>)
  4015dc:	4798      	blx	r3
  4015de:	b118      	cbz	r0, 4015e8 <nmi_get_chipid+0x34>
			chipid = 0;
  4015e0:	2200      	movs	r2, #0
  4015e2:	4b1a      	ldr	r3, [pc, #104]	; (40164c <nmi_get_chipid+0x98>)
  4015e4:	601a      	str	r2, [r3, #0]
			return 0;
  4015e6:	e02e      	b.n	401646 <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  4015e8:	4b18      	ldr	r3, [pc, #96]	; (40164c <nmi_get_chipid+0x98>)
  4015ea:	681b      	ldr	r3, [r3, #0]
  4015ec:	4a19      	ldr	r2, [pc, #100]	; (401654 <nmi_get_chipid+0xa0>)
  4015ee:	4293      	cmp	r3, r2
  4015f0:	d106      	bne.n	401600 <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  4015f2:	9b01      	ldr	r3, [sp, #4]
  4015f4:	2b01      	cmp	r3, #1
  4015f6:	d01d      	beq.n	401634 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  4015f8:	3201      	adds	r2, #1
  4015fa:	4b14      	ldr	r3, [pc, #80]	; (40164c <nmi_get_chipid+0x98>)
  4015fc:	601a      	str	r2, [r3, #0]
  4015fe:	e019      	b.n	401634 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  401600:	4a15      	ldr	r2, [pc, #84]	; (401658 <nmi_get_chipid+0xa4>)
  401602:	4293      	cmp	r3, r2
  401604:	d109      	bne.n	40161a <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  401606:	9b01      	ldr	r3, [sp, #4]
  401608:	2b03      	cmp	r3, #3
  40160a:	d013      	beq.n	401634 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  40160c:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  40160e:	bf0c      	ite	eq
  401610:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  401612:	4a12      	ldrne	r2, [pc, #72]	; (40165c <nmi_get_chipid+0xa8>)
  401614:	4b0d      	ldr	r3, [pc, #52]	; (40164c <nmi_get_chipid+0x98>)
  401616:	601a      	str	r2, [r3, #0]
  401618:	e00c      	b.n	401634 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  40161a:	4a11      	ldr	r2, [pc, #68]	; (401660 <nmi_get_chipid+0xac>)
  40161c:	4293      	cmp	r3, r2
  40161e:	d109      	bne.n	401634 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  401620:	490a      	ldr	r1, [pc, #40]	; (40164c <nmi_get_chipid+0x98>)
  401622:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  401626:	4b0a      	ldr	r3, [pc, #40]	; (401650 <nmi_get_chipid+0x9c>)
  401628:	4798      	blx	r3
  40162a:	b118      	cbz	r0, 401634 <nmi_get_chipid+0x80>
			chipid = 0;
  40162c:	2200      	movs	r2, #0
  40162e:	4b07      	ldr	r3, [pc, #28]	; (40164c <nmi_get_chipid+0x98>)
  401630:	601a      	str	r2, [r3, #0]
			return 0;
  401632:	e008      	b.n	401646 <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  401634:	4a05      	ldr	r2, [pc, #20]	; (40164c <nmi_get_chipid+0x98>)
  401636:	6813      	ldr	r3, [r2, #0]
  401638:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40163c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  401640:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  401642:	4b02      	ldr	r3, [pc, #8]	; (40164c <nmi_get_chipid+0x98>)
  401644:	681c      	ldr	r4, [r3, #0]
}
  401646:	4620      	mov	r0, r4
  401648:	b002      	add	sp, #8
  40164a:	bd10      	pop	{r4, pc}
  40164c:	204008d4 	.word	0x204008d4
  401650:	004018ad 	.word	0x004018ad
  401654:	001002a0 	.word	0x001002a0
  401658:	001002b0 	.word	0x001002b0
  40165c:	001002b2 	.word	0x001002b2
  401660:	001000f0 	.word	0x001000f0

00401664 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  401664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401668:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40166a:	f241 0514 	movw	r5, #4116	; 0x1014
  40166e:	4c28      	ldr	r4, [pc, #160]	; (401710 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  401670:	4e28      	ldr	r6, [pc, #160]	; (401714 <wait_for_bootrom+0xb0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  401672:	4628      	mov	r0, r5
  401674:	47a0      	blx	r4
		if (reg & 0x80000000) {
  401676:	2800      	cmp	r0, #0
  401678:	db02      	blt.n	401680 <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40167a:	2001      	movs	r0, #1
  40167c:	47b0      	blx	r6
	}
  40167e:	e7f8      	b.n	401672 <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  401680:	4825      	ldr	r0, [pc, #148]	; (401718 <wait_for_bootrom+0xb4>)
  401682:	4b23      	ldr	r3, [pc, #140]	; (401710 <wait_for_bootrom+0xac>)
  401684:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  401686:	f010 0f01 	tst.w	r0, #1
  40168a:	d110      	bne.n	4016ae <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  40168c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 401714 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  401690:	4e1f      	ldr	r6, [pc, #124]	; (401710 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  401692:	4d22      	ldr	r5, [pc, #136]	; (40171c <wait_for_bootrom+0xb8>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  401694:	2001      	movs	r0, #1
  401696:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  401698:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  40169c:	47b0      	blx	r6
  40169e:	4604      	mov	r4, r0

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4016a0:	462a      	mov	r2, r5
  4016a2:	4601      	mov	r1, r0
  4016a4:	481e      	ldr	r0, [pc, #120]	; (401720 <wait_for_bootrom+0xbc>)
  4016a6:	4b1f      	ldr	r3, [pc, #124]	; (401724 <wait_for_bootrom+0xc0>)
  4016a8:	4798      	blx	r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  4016aa:	42ac      	cmp	r4, r5
  4016ac:	d1f2      	bne.n	401694 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4016ae:	2f02      	cmp	r7, #2
  4016b0:	d10a      	bne.n	4016c8 <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4016b2:	491d      	ldr	r1, [pc, #116]	; (401728 <wait_for_bootrom+0xc4>)
  4016b4:	481d      	ldr	r0, [pc, #116]	; (40172c <wait_for_bootrom+0xc8>)
  4016b6:	4c1e      	ldr	r4, [pc, #120]	; (401730 <wait_for_bootrom+0xcc>)
  4016b8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4016ba:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4016be:	f241 008c 	movw	r0, #4236	; 0x108c
  4016c2:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  4016c4:	2400      	movs	r4, #0
  4016c6:	e00f      	b.n	4016e8 <wait_for_bootrom+0x84>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  4016c8:	2f03      	cmp	r7, #3
  4016ca:	d109      	bne.n	4016e0 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4016cc:	4916      	ldr	r1, [pc, #88]	; (401728 <wait_for_bootrom+0xc4>)
  4016ce:	4817      	ldr	r0, [pc, #92]	; (40172c <wait_for_bootrom+0xc8>)
  4016d0:	4c17      	ldr	r4, [pc, #92]	; (401730 <wait_for_bootrom+0xcc>)
  4016d2:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4016d4:	2100      	movs	r1, #0
  4016d6:	f241 008c 	movw	r0, #4236	; 0x108c
  4016da:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  4016dc:	2400      	movs	r4, #0
  4016de:	e003      	b.n	4016e8 <wait_for_bootrom+0x84>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4016e0:	2f04      	cmp	r7, #4
  4016e2:	bf14      	ite	ne
  4016e4:	2400      	movne	r4, #0
  4016e6:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4016e8:	4b12      	ldr	r3, [pc, #72]	; (401734 <wait_for_bootrom+0xd0>)
  4016ea:	4798      	blx	r3
  4016ec:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4016f0:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4016f4:	bf0c      	ite	eq
  4016f6:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4016fa:	4620      	movne	r0, r4
  4016fc:	4b0e      	ldr	r3, [pc, #56]	; (401738 <wait_for_bootrom+0xd4>)
  4016fe:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  401700:	490e      	ldr	r1, [pc, #56]	; (40173c <wait_for_bootrom+0xd8>)
  401702:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  401706:	4b0a      	ldr	r3, [pc, #40]	; (401730 <wait_for_bootrom+0xcc>)
  401708:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  40170a:	2000      	movs	r0, #0
  40170c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401710:	004018a1 	.word	0x004018a1
  401714:	004001b9 	.word	0x004001b9
  401718:	000207bc 	.word	0x000207bc
  40171c:	10add09e 	.word	0x10add09e
  401720:	00406e44 	.word	0x00406e44
  401724:	00403711 	.word	0x00403711
  401728:	3c1cd57d 	.word	0x3c1cd57d
  40172c:	000207ac 	.word	0x000207ac
  401730:	004018b9 	.word	0x004018b9
  401734:	004015b5 	.word	0x004015b5
  401738:	004013e1 	.word	0x004013e1
  40173c:	ef522f61 	.word	0xef522f61

00401740 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  401740:	b5f0      	push	{r4, r5, r6, r7, lr}
  401742:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  401744:	f241 038c 	movw	r3, #4236	; 0x108c
  401748:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  40174a:	4b18      	ldr	r3, [pc, #96]	; (4017ac <wait_for_firmware_start+0x6c>)
  40174c:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  40174e:	3802      	subs	r0, #2
  401750:	b2c0      	uxtb	r0, r0
  401752:	2801      	cmp	r0, #1
  401754:	d810      	bhi.n	401778 <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  401756:	4b16      	ldr	r3, [pc, #88]	; (4017b0 <wait_for_firmware_start+0x70>)
  401758:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  40175a:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40175e:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  401762:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  401766:	9300      	str	r3, [sp, #0]
  401768:	e006      	b.n	401778 <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  40176a:	4638      	mov	r0, r7
  40176c:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  40176e:	9801      	ldr	r0, [sp, #4]
  401770:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  401772:	3c01      	subs	r4, #1
  401774:	d106      	bne.n	401784 <wait_for_firmware_start+0x44>
  401776:	e013      	b.n	4017a0 <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  401778:	f04f 34ff 	mov.w	r4, #4294967295
  40177c:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  40177e:	2702      	movs	r7, #2
  401780:	4e0c      	ldr	r6, [pc, #48]	; (4017b4 <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  401782:	4d0d      	ldr	r5, [pc, #52]	; (4017b8 <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  401784:	9b00      	ldr	r3, [sp, #0]
  401786:	4298      	cmp	r0, r3
  401788:	d1ef      	bne.n	40176a <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  40178a:	9a00      	ldr	r2, [sp, #0]
  40178c:	4b07      	ldr	r3, [pc, #28]	; (4017ac <wait_for_firmware_start+0x6c>)
  40178e:	429a      	cmp	r2, r3
  401790:	d109      	bne.n	4017a6 <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  401792:	2100      	movs	r1, #0
  401794:	f241 008c 	movw	r0, #4236	; 0x108c
  401798:	4b08      	ldr	r3, [pc, #32]	; (4017bc <wait_for_firmware_start+0x7c>)
  40179a:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  40179c:	2000      	movs	r0, #0
  40179e:	e003      	b.n	4017a8 <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  4017a0:	f06f 0004 	mvn.w	r0, #4
  4017a4:	e000      	b.n	4017a8 <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  4017a6:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  4017a8:	b003      	add	sp, #12
  4017aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4017ac:	02532636 	.word	0x02532636
  4017b0:	000207ac 	.word	0x000207ac
  4017b4:	004001b9 	.word	0x004001b9
  4017b8:	004018a1 	.word	0x004018a1
  4017bc:	004018b9 	.word	0x004018b9

004017c0 <chip_deinit>:

sint8 chip_deinit(void)
{
  4017c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4017c2:	b083      	sub	sp, #12
	uint32 reg = 0;
  4017c4:	a902      	add	r1, sp, #8
  4017c6:	2300      	movs	r3, #0
  4017c8:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4017cc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4017d0:	4b24      	ldr	r3, [pc, #144]	; (401864 <chip_deinit+0xa4>)
  4017d2:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  4017d4:	b148      	cbz	r0, 4017ea <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  4017d6:	f240 2231 	movw	r2, #561	; 0x231
  4017da:	4923      	ldr	r1, [pc, #140]	; (401868 <chip_deinit+0xa8>)
  4017dc:	4823      	ldr	r0, [pc, #140]	; (40186c <chip_deinit+0xac>)
  4017de:	4c24      	ldr	r4, [pc, #144]	; (401870 <chip_deinit+0xb0>)
  4017e0:	47a0      	blx	r4
  4017e2:	4824      	ldr	r0, [pc, #144]	; (401874 <chip_deinit+0xb4>)
  4017e4:	47a0      	blx	r4
  4017e6:	4824      	ldr	r0, [pc, #144]	; (401878 <chip_deinit+0xb8>)
  4017e8:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  4017ea:	9901      	ldr	r1, [sp, #4]
  4017ec:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4017f0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4017f2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4017f6:	4b21      	ldr	r3, [pc, #132]	; (40187c <chip_deinit+0xbc>)
  4017f8:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4017fa:	4605      	mov	r5, r0
  4017fc:	b158      	cbz	r0, 401816 <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  4017fe:	f240 2237 	movw	r2, #567	; 0x237
  401802:	4919      	ldr	r1, [pc, #100]	; (401868 <chip_deinit+0xa8>)
  401804:	4819      	ldr	r0, [pc, #100]	; (40186c <chip_deinit+0xac>)
  401806:	4c1a      	ldr	r4, [pc, #104]	; (401870 <chip_deinit+0xb0>)
  401808:	47a0      	blx	r4
  40180a:	481d      	ldr	r0, [pc, #116]	; (401880 <chip_deinit+0xc0>)
  40180c:	47a0      	blx	r4
  40180e:	481a      	ldr	r0, [pc, #104]	; (401878 <chip_deinit+0xb8>)
  401810:	47a0      	blx	r4
		return ret;
  401812:	4628      	mov	r0, r5
  401814:	e024      	b.n	401860 <chip_deinit+0xa0>
  401816:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  401818:	4e12      	ldr	r6, [pc, #72]	; (401864 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40181a:	4f18      	ldr	r7, [pc, #96]	; (40187c <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40181c:	a901      	add	r1, sp, #4
  40181e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401822:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  401824:	4605      	mov	r5, r0
  401826:	b158      	cbz	r0, 401840 <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  401828:	f240 223e 	movw	r2, #574	; 0x23e
  40182c:	490e      	ldr	r1, [pc, #56]	; (401868 <chip_deinit+0xa8>)
  40182e:	480f      	ldr	r0, [pc, #60]	; (40186c <chip_deinit+0xac>)
  401830:	4c0f      	ldr	r4, [pc, #60]	; (401870 <chip_deinit+0xb0>)
  401832:	47a0      	blx	r4
  401834:	4813      	ldr	r0, [pc, #76]	; (401884 <chip_deinit+0xc4>)
  401836:	47a0      	blx	r4
  401838:	480f      	ldr	r0, [pc, #60]	; (401878 <chip_deinit+0xb8>)
  40183a:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40183c:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  40183e:	e00f      	b.n	401860 <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  401840:	9901      	ldr	r1, [sp, #4]
  401842:	f411 6f80 	tst.w	r1, #1024	; 0x400
  401846:	d00a      	beq.n	40185e <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  401848:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40184c:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40184e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  401852:	47b8      	blx	r7
  401854:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  401856:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40185a:	d1df      	bne.n	40181c <chip_deinit+0x5c>
  40185c:	e000      	b.n	401860 <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40185e:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  401860:	b003      	add	sp, #12
  401862:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401864:	004018ad 	.word	0x004018ad
  401868:	00406d9c 	.word	0x00406d9c
  40186c:	00406790 	.word	0x00406790
  401870:	00403711 	.word	0x00403711
  401874:	00406e54 	.word	0x00406e54
  401878:	004067bc 	.word	0x004067bc
  40187c:	004018b9 	.word	0x004018b9
  401880:	00406e70 	.word	0x00406e70
  401884:	00406e8c 	.word	0x00406e8c

00401888 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  401888:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  40188a:	4b01      	ldr	r3, [pc, #4]	; (401890 <nm_bus_iface_init+0x8>)
  40188c:	4798      	blx	r3

	return ret;
}
  40188e:	bd08      	pop	{r3, pc}
  401890:	00400329 	.word	0x00400329

00401894 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  401894:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  401896:	4b01      	ldr	r3, [pc, #4]	; (40189c <nm_bus_iface_deinit+0x8>)
  401898:	4798      	blx	r3

	return ret;
}
  40189a:	bd08      	pop	{r3, pc}
  40189c:	00400505 	.word	0x00400505

004018a0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  4018a0:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  4018a2:	4b01      	ldr	r3, [pc, #4]	; (4018a8 <nm_read_reg+0x8>)
  4018a4:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  4018a6:	bd08      	pop	{r3, pc}
  4018a8:	004020f1 	.word	0x004020f1

004018ac <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4018ac:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  4018ae:	4b01      	ldr	r3, [pc, #4]	; (4018b4 <nm_read_reg_with_ret+0x8>)
  4018b0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  4018b2:	bd08      	pop	{r3, pc}
  4018b4:	00402109 	.word	0x00402109

004018b8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4018b8:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  4018ba:	4b01      	ldr	r3, [pc, #4]	; (4018c0 <nm_write_reg+0x8>)
  4018bc:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  4018be:	bd08      	pop	{r3, pc}
  4018c0:	00402121 	.word	0x00402121

004018c4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4018c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018c8:	4607      	mov	r7, r0
  4018ca:	4689      	mov	r9, r1
  4018cc:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4018ce:	4b13      	ldr	r3, [pc, #76]	; (40191c <nm_read_block+0x58>)
  4018d0:	f8b3 8000 	ldrh.w	r8, [r3]
  4018d4:	f1a8 0808 	sub.w	r8, r8, #8
  4018d8:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4018dc:	4542      	cmp	r2, r8
  4018de:	d808      	bhi.n	4018f2 <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  4018e0:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4018e2:	b2aa      	uxth	r2, r5
  4018e4:	eb09 0106 	add.w	r1, r9, r6
  4018e8:	4638      	mov	r0, r7
  4018ea:	4b0d      	ldr	r3, [pc, #52]	; (401920 <nm_read_block+0x5c>)
  4018ec:	4798      	blx	r3
  4018ee:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  4018f0:	e010      	b.n	401914 <nm_read_block+0x50>
  4018f2:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4018f4:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4018f6:	f8df a028 	ldr.w	sl, [pc, #40]	; 401920 <nm_read_block+0x5c>
  4018fa:	4642      	mov	r2, r8
  4018fc:	eb09 0106 	add.w	r1, r9, r6
  401900:	4638      	mov	r0, r7
  401902:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401904:	4603      	mov	r3, r0
  401906:	b928      	cbnz	r0, 401914 <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  401908:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40190a:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40190c:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40190e:	42a5      	cmp	r5, r4
  401910:	d8f3      	bhi.n	4018fa <nm_read_block+0x36>
  401912:	e7e6      	b.n	4018e2 <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  401914:	4618      	mov	r0, r3
  401916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40191a:	bf00      	nop
  40191c:	2040000c 	.word	0x2040000c
  401920:	00402245 	.word	0x00402245

00401924 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  401924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401928:	4607      	mov	r7, r0
  40192a:	4689      	mov	r9, r1
  40192c:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40192e:	4b13      	ldr	r3, [pc, #76]	; (40197c <nm_write_block+0x58>)
  401930:	f8b3 8000 	ldrh.w	r8, [r3]
  401934:	f1a8 0808 	sub.w	r8, r8, #8
  401938:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40193c:	4542      	cmp	r2, r8
  40193e:	d808      	bhi.n	401952 <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  401940:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401942:	b2aa      	uxth	r2, r5
  401944:	eb09 0106 	add.w	r1, r9, r6
  401948:	4638      	mov	r0, r7
  40194a:	4b0d      	ldr	r3, [pc, #52]	; (401980 <nm_write_block+0x5c>)
  40194c:	4798      	blx	r3
  40194e:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  401950:	e010      	b.n	401974 <nm_write_block+0x50>
  401952:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  401954:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  401956:	f8df a028 	ldr.w	sl, [pc, #40]	; 401980 <nm_write_block+0x5c>
  40195a:	4642      	mov	r2, r8
  40195c:	eb09 0106 	add.w	r1, r9, r6
  401960:	4638      	mov	r0, r7
  401962:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  401964:	4603      	mov	r3, r0
  401966:	b928      	cbnz	r0, 401974 <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  401968:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40196a:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40196c:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40196e:	42a5      	cmp	r5, r4
  401970:	d8f3      	bhi.n	40195a <nm_write_block+0x36>
  401972:	e7e6      	b.n	401942 <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  401974:	4618      	mov	r0, r3
  401976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40197a:	bf00      	nop
  40197c:	2040000c 	.word	0x2040000c
  401980:	00402311 	.word	0x00402311

00401984 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  401984:	b530      	push	{r4, r5, lr}
  401986:	b083      	sub	sp, #12
  401988:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40198a:	a902      	add	r1, sp, #8
  40198c:	2300      	movs	r3, #0
  40198e:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  401992:	4823      	ldr	r0, [pc, #140]	; (401a20 <nm_get_firmware_info+0x9c>)
  401994:	4b23      	ldr	r3, [pc, #140]	; (401a24 <nm_get_firmware_info+0xa0>)
  401996:	4798      	blx	r3
  401998:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40199a:	9a01      	ldr	r2, [sp, #4]
  40199c:	4b22      	ldr	r3, [pc, #136]	; (401a28 <nm_get_firmware_info+0xa4>)
  40199e:	429a      	cmp	r2, r3
  4019a0:	d105      	bne.n	4019ae <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4019a2:	a901      	add	r1, sp, #4
  4019a4:	f241 0048 	movw	r0, #4168	; 0x1048
  4019a8:	4b1e      	ldr	r3, [pc, #120]	; (401a24 <nm_get_firmware_info+0xa0>)
  4019aa:	4798      	blx	r3
  4019ac:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  4019ae:	9b01      	ldr	r3, [sp, #4]
  4019b0:	0c1a      	lsrs	r2, r3, #16
  4019b2:	1211      	asrs	r1, r2, #8
  4019b4:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  4019b6:	f3c2 1103 	ubfx	r1, r2, #4, #4
  4019ba:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  4019bc:	f002 020f 	and.w	r2, r2, #15
  4019c0:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  4019c2:	121a      	asrs	r2, r3, #8
  4019c4:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  4019c6:	f3c3 1203 	ubfx	r2, r3, #4, #4
  4019ca:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  4019cc:	f003 030f 	and.w	r3, r3, #15
  4019d0:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  4019d2:	4b16      	ldr	r3, [pc, #88]	; (401a2c <nm_get_firmware_info+0xa8>)
  4019d4:	4798      	blx	r3
  4019d6:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  4019d8:	7922      	ldrb	r2, [r4, #4]
  4019da:	79a3      	ldrb	r3, [r4, #6]
  4019dc:	f003 030f 	and.w	r3, r3, #15
  4019e0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4019e4:	7963      	ldrb	r3, [r4, #5]
  4019e6:	011b      	lsls	r3, r3, #4
  4019e8:	b2db      	uxtb	r3, r3
  4019ea:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  4019ec:	79e1      	ldrb	r1, [r4, #7]
  4019ee:	7a62      	ldrb	r2, [r4, #9]
  4019f0:	f002 020f 	and.w	r2, r2, #15
  4019f4:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  4019f8:	7a22      	ldrb	r2, [r4, #8]
  4019fa:	0112      	lsls	r2, r2, #4
  4019fc:	b2d2      	uxtb	r2, r2
  4019fe:	430a      	orrs	r2, r1
  401a00:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  401a04:	428a      	cmp	r2, r1
  401a06:	bf88      	it	hi
  401a08:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  401a0c:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  401a10:	4293      	cmp	r3, r2
	}
	return ret;
}
  401a12:	bf8c      	ite	hi
  401a14:	4628      	movhi	r0, r5
  401a16:	f06f 000c 	mvnls.w	r0, #12
  401a1a:	b003      	add	sp, #12
  401a1c:	bd30      	pop	{r4, r5, pc}
  401a1e:	bf00      	nop
  401a20:	000207ac 	.word	0x000207ac
  401a24:	004018ad 	.word	0x004018ad
  401a28:	d75dc1c3 	.word	0xd75dc1c3
  401a2c:	004015b5 	.word	0x004015b5

00401a30 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  401a30:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  401a32:	b130      	cbz	r0, 401a42 <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  401a34:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  401a36:	1e63      	subs	r3, r4, #1
  401a38:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  401a3a:	2b04      	cmp	r3, #4
  401a3c:	bf28      	it	cs
  401a3e:	2401      	movcs	r4, #1
  401a40:	e000      	b.n	401a44 <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  401a42:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  401a44:	2000      	movs	r0, #0
  401a46:	4b1d      	ldr	r3, [pc, #116]	; (401abc <nm_drv_init+0x8c>)
  401a48:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a4a:	4605      	mov	r5, r0
  401a4c:	b150      	cbz	r0, 401a64 <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  401a4e:	f44f 7292 	mov.w	r2, #292	; 0x124
  401a52:	491b      	ldr	r1, [pc, #108]	; (401ac0 <nm_drv_init+0x90>)
  401a54:	481b      	ldr	r0, [pc, #108]	; (401ac4 <nm_drv_init+0x94>)
  401a56:	4c1c      	ldr	r4, [pc, #112]	; (401ac8 <nm_drv_init+0x98>)
  401a58:	47a0      	blx	r4
  401a5a:	481c      	ldr	r0, [pc, #112]	; (401acc <nm_drv_init+0x9c>)
  401a5c:	47a0      	blx	r4
  401a5e:	481c      	ldr	r0, [pc, #112]	; (401ad0 <nm_drv_init+0xa0>)
  401a60:	47a0      	blx	r4
		goto ERR1;
  401a62:	e029      	b.n	401ab8 <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  401a64:	481b      	ldr	r0, [pc, #108]	; (401ad4 <nm_drv_init+0xa4>)
  401a66:	4d18      	ldr	r5, [pc, #96]	; (401ac8 <nm_drv_init+0x98>)
  401a68:	47a8      	blx	r5
  401a6a:	4b1b      	ldr	r3, [pc, #108]	; (401ad8 <nm_drv_init+0xa8>)
  401a6c:	4798      	blx	r3
  401a6e:	4601      	mov	r1, r0
  401a70:	481a      	ldr	r0, [pc, #104]	; (401adc <nm_drv_init+0xac>)
  401a72:	47a8      	blx	r5
  401a74:	4816      	ldr	r0, [pc, #88]	; (401ad0 <nm_drv_init+0xa0>)
  401a76:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  401a78:	4b19      	ldr	r3, [pc, #100]	; (401ae0 <nm_drv_init+0xb0>)
  401a7a:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  401a7c:	4620      	mov	r0, r4
  401a7e:	4b19      	ldr	r3, [pc, #100]	; (401ae4 <nm_drv_init+0xb4>)
  401a80:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a82:	4605      	mov	r5, r0
  401a84:	b9b0      	cbnz	r0, 401ab4 <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  401a86:	4620      	mov	r0, r4
  401a88:	4b17      	ldr	r3, [pc, #92]	; (401ae8 <nm_drv_init+0xb8>)
  401a8a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a8c:	4605      	mov	r5, r0
  401a8e:	b988      	cbnz	r0, 401ab4 <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  401a90:	3c02      	subs	r4, #2
  401a92:	b2e4      	uxtb	r4, r4
  401a94:	2c01      	cmp	r4, #1
  401a96:	d90f      	bls.n	401ab8 <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  401a98:	4b14      	ldr	r3, [pc, #80]	; (401aec <nm_drv_init+0xbc>)
  401a9a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401a9c:	4605      	mov	r5, r0
  401a9e:	b158      	cbz	r0, 401ab8 <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  401aa0:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  401aa4:	4906      	ldr	r1, [pc, #24]	; (401ac0 <nm_drv_init+0x90>)
  401aa6:	4807      	ldr	r0, [pc, #28]	; (401ac4 <nm_drv_init+0x94>)
  401aa8:	4c07      	ldr	r4, [pc, #28]	; (401ac8 <nm_drv_init+0x98>)
  401aaa:	47a0      	blx	r4
  401aac:	4810      	ldr	r0, [pc, #64]	; (401af0 <nm_drv_init+0xc0>)
  401aae:	47a0      	blx	r4
  401ab0:	4807      	ldr	r0, [pc, #28]	; (401ad0 <nm_drv_init+0xa0>)
  401ab2:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  401ab4:	4b0f      	ldr	r3, [pc, #60]	; (401af4 <nm_drv_init+0xc4>)
  401ab6:	4798      	blx	r3
ERR1:
	return ret;
}
  401ab8:	4628      	mov	r0, r5
  401aba:	bd38      	pop	{r3, r4, r5, pc}
  401abc:	00401889 	.word	0x00401889
  401ac0:	00406f94 	.word	0x00406f94
  401ac4:	00406790 	.word	0x00406790
  401ac8:	00403711 	.word	0x00403711
  401acc:	00406ee8 	.word	0x00406ee8
  401ad0:	004067bc 	.word	0x004067bc
  401ad4:	00406a64 	.word	0x00406a64
  401ad8:	004015b5 	.word	0x004015b5
  401adc:	00406f04 	.word	0x00406f04
  401ae0:	00402139 	.word	0x00402139
  401ae4:	00401665 	.word	0x00401665
  401ae8:	00401741 	.word	0x00401741
  401aec:	0040154d 	.word	0x0040154d
  401af0:	00406f14 	.word	0x00406f14
  401af4:	00401895 	.word	0x00401895

00401af8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  401af8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  401afa:	4b19      	ldr	r3, [pc, #100]	; (401b60 <nm_drv_deinit+0x68>)
  401afc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401afe:	b158      	cbz	r0, 401b18 <nm_drv_deinit+0x20>
  401b00:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  401b02:	f44f 72ba 	mov.w	r2, #372	; 0x174
  401b06:	4917      	ldr	r1, [pc, #92]	; (401b64 <nm_drv_deinit+0x6c>)
  401b08:	4817      	ldr	r0, [pc, #92]	; (401b68 <nm_drv_deinit+0x70>)
  401b0a:	4d18      	ldr	r5, [pc, #96]	; (401b6c <nm_drv_deinit+0x74>)
  401b0c:	47a8      	blx	r5
  401b0e:	4818      	ldr	r0, [pc, #96]	; (401b70 <nm_drv_deinit+0x78>)
  401b10:	47a8      	blx	r5
  401b12:	4818      	ldr	r0, [pc, #96]	; (401b74 <nm_drv_deinit+0x7c>)
  401b14:	47a8      	blx	r5
		goto ERR1;
  401b16:	e020      	b.n	401b5a <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  401b18:	2000      	movs	r0, #0
  401b1a:	4b17      	ldr	r3, [pc, #92]	; (401b78 <nm_drv_deinit+0x80>)
  401b1c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401b1e:	4604      	mov	r4, r0
  401b20:	b150      	cbz	r0, 401b38 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  401b22:	f240 127b 	movw	r2, #379	; 0x17b
  401b26:	490f      	ldr	r1, [pc, #60]	; (401b64 <nm_drv_deinit+0x6c>)
  401b28:	480f      	ldr	r0, [pc, #60]	; (401b68 <nm_drv_deinit+0x70>)
  401b2a:	4d10      	ldr	r5, [pc, #64]	; (401b6c <nm_drv_deinit+0x74>)
  401b2c:	47a8      	blx	r5
  401b2e:	4813      	ldr	r0, [pc, #76]	; (401b7c <nm_drv_deinit+0x84>)
  401b30:	47a8      	blx	r5
  401b32:	4810      	ldr	r0, [pc, #64]	; (401b74 <nm_drv_deinit+0x7c>)
  401b34:	47a8      	blx	r5
		goto ERR1;
  401b36:	e010      	b.n	401b5a <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  401b38:	4b11      	ldr	r3, [pc, #68]	; (401b80 <nm_drv_deinit+0x88>)
  401b3a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  401b3c:	4604      	mov	r4, r0
  401b3e:	b150      	cbz	r0, 401b56 <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  401b40:	f240 1281 	movw	r2, #385	; 0x181
  401b44:	4907      	ldr	r1, [pc, #28]	; (401b64 <nm_drv_deinit+0x6c>)
  401b46:	4808      	ldr	r0, [pc, #32]	; (401b68 <nm_drv_deinit+0x70>)
  401b48:	4d08      	ldr	r5, [pc, #32]	; (401b6c <nm_drv_deinit+0x74>)
  401b4a:	47a8      	blx	r5
  401b4c:	480d      	ldr	r0, [pc, #52]	; (401b84 <nm_drv_deinit+0x8c>)
  401b4e:	47a8      	blx	r5
  401b50:	4808      	ldr	r0, [pc, #32]	; (401b74 <nm_drv_deinit+0x7c>)
  401b52:	47a8      	blx	r5
		goto ERR1;
  401b54:	e001      	b.n	401b5a <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  401b56:	4b0c      	ldr	r3, [pc, #48]	; (401b88 <nm_drv_deinit+0x90>)
  401b58:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  401b5a:	4620      	mov	r0, r4
  401b5c:	bd38      	pop	{r3, r4, r5, pc}
  401b5e:	bf00      	nop
  401b60:	004017c1 	.word	0x004017c1
  401b64:	00406fa0 	.word	0x00406fa0
  401b68:	00406790 	.word	0x00406790
  401b6c:	00403711 	.word	0x00403711
  401b70:	00406f34 	.word	0x00406f34
  401b74:	004067bc 	.word	0x004067bc
  401b78:	00402495 	.word	0x00402495
  401b7c:	00406f54 	.word	0x00406f54
  401b80:	00401895 	.word	0x00401895
  401b84:	00406f78 	.word	0x00406f78
  401b88:	004020e5 	.word	0x004020e5

00401b8c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  401b8c:	b500      	push	{lr}
  401b8e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  401b90:	2300      	movs	r3, #0
  401b92:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  401b94:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  401b96:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401b9a:	a901      	add	r1, sp, #4
  401b9c:	2003      	movs	r0, #3
  401b9e:	4b02      	ldr	r3, [pc, #8]	; (401ba8 <nmi_spi_read+0x1c>)
  401ba0:	4798      	blx	r3
}
  401ba2:	b005      	add	sp, #20
  401ba4:	f85d fb04 	ldr.w	pc, [sp], #4
  401ba8:	00400445 	.word	0x00400445

00401bac <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401bac:	b5f0      	push	{r4, r5, r6, r7, lr}
  401bae:	b083      	sub	sp, #12
  401bb0:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  401bb2:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  401bb6:	b2db      	uxtb	r3, r3
  401bb8:	2b01      	cmp	r3, #1
  401bba:	d901      	bls.n	401bc0 <spi_cmd_rsp+0x14>
  401bbc:	28cf      	cmp	r0, #207	; 0xcf
  401bbe:	d106      	bne.n	401bce <spi_cmd_rsp+0x22>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401bc0:	2101      	movs	r1, #1
  401bc2:	f10d 0007 	add.w	r0, sp, #7
  401bc6:	4b22      	ldr	r3, [pc, #136]	; (401c50 <spi_cmd_rsp+0xa4>)
  401bc8:	4798      	blx	r3
  401bca:	2800      	cmp	r0, #0
  401bcc:	d13a      	bne.n	401c44 <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  401bce:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401bd0:	2701      	movs	r7, #1
  401bd2:	4e1f      	ldr	r6, [pc, #124]	; (401c50 <spi_cmd_rsp+0xa4>)
  401bd4:	4639      	mov	r1, r7
  401bd6:	f10d 0007 	add.w	r0, sp, #7
  401bda:	47b0      	blx	r6
  401bdc:	b158      	cbz	r0, 401bf6 <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401bde:	f240 1227 	movw	r2, #295	; 0x127
  401be2:	491c      	ldr	r1, [pc, #112]	; (401c54 <spi_cmd_rsp+0xa8>)
  401be4:	481c      	ldr	r0, [pc, #112]	; (401c58 <spi_cmd_rsp+0xac>)
  401be6:	4c1d      	ldr	r4, [pc, #116]	; (401c5c <spi_cmd_rsp+0xb0>)
  401be8:	47a0      	blx	r4
  401bea:	481d      	ldr	r0, [pc, #116]	; (401c60 <spi_cmd_rsp+0xb4>)
  401bec:	47a0      	blx	r4
  401bee:	481d      	ldr	r0, [pc, #116]	; (401c64 <spi_cmd_rsp+0xb8>)
  401bf0:	47a0      	blx	r4
			result = N_FAIL;
  401bf2:	2000      	movs	r0, #0
			goto _fail_;
  401bf4:	e029      	b.n	401c4a <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  401bf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401bfa:	42ab      	cmp	r3, r5
  401bfc:	d005      	beq.n	401c0a <spi_cmd_rsp+0x5e>
  401bfe:	1e63      	subs	r3, r4, #1
  401c00:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401c04:	d1e6      	bne.n	401bd4 <spi_cmd_rsp+0x28>
  401c06:	240b      	movs	r4, #11
  401c08:	e000      	b.n	401c0c <spi_cmd_rsp+0x60>
  401c0a:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c0c:	2601      	movs	r6, #1
  401c0e:	4d10      	ldr	r5, [pc, #64]	; (401c50 <spi_cmd_rsp+0xa4>)
  401c10:	4631      	mov	r1, r6
  401c12:	f10d 0007 	add.w	r0, sp, #7
  401c16:	47a8      	blx	r5
  401c18:	b158      	cbz	r0, 401c32 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  401c1a:	f240 1235 	movw	r2, #309	; 0x135
  401c1e:	490d      	ldr	r1, [pc, #52]	; (401c54 <spi_cmd_rsp+0xa8>)
  401c20:	480d      	ldr	r0, [pc, #52]	; (401c58 <spi_cmd_rsp+0xac>)
  401c22:	4c0e      	ldr	r4, [pc, #56]	; (401c5c <spi_cmd_rsp+0xb0>)
  401c24:	47a0      	blx	r4
  401c26:	480e      	ldr	r0, [pc, #56]	; (401c60 <spi_cmd_rsp+0xb4>)
  401c28:	47a0      	blx	r4
  401c2a:	480e      	ldr	r0, [pc, #56]	; (401c64 <spi_cmd_rsp+0xb8>)
  401c2c:	47a0      	blx	r4
			result = N_FAIL;
  401c2e:	2000      	movs	r0, #0
			goto _fail_;
  401c30:	e00b      	b.n	401c4a <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  401c32:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401c36:	b13b      	cbz	r3, 401c48 <spi_cmd_rsp+0x9c>
  401c38:	1e63      	subs	r3, r4, #1
  401c3a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401c3e:	d1e7      	bne.n	401c10 <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401c40:	2001      	movs	r0, #1
  401c42:	e002      	b.n	401c4a <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  401c44:	2000      	movs	r0, #0
  401c46:	e000      	b.n	401c4a <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  401c48:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  401c4a:	b003      	add	sp, #12
  401c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401c4e:	bf00      	nop
  401c50:	00401b8d 	.word	0x00401b8d
  401c54:	004075c4 	.word	0x004075c4
  401c58:	00406790 	.word	0x00406790
  401c5c:	00403711 	.word	0x00403711
  401c60:	004070e8 	.word	0x004070e8
  401c64:	004067bc 	.word	0x004067bc

00401c68 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  401c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c6c:	b083      	sub	sp, #12
  401c6e:	4682      	mov	sl, r0
  401c70:	4689      	mov	r9, r1
  401c72:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  401c74:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c78:	4d35      	ldr	r5, [pc, #212]	; (401d50 <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  401c7a:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  401c7e:	bf94      	ite	ls
  401c80:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  401c84:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  401c88:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  401c8a:	2601      	movs	r6, #1
  401c8c:	4631      	mov	r1, r6
  401c8e:	f10d 0003 	add.w	r0, sp, #3
  401c92:	47a8      	blx	r5
  401c94:	b158      	cbz	r0, 401cae <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  401c96:	f240 1257 	movw	r2, #343	; 0x157
  401c9a:	492e      	ldr	r1, [pc, #184]	; (401d54 <spi_data_read+0xec>)
  401c9c:	482e      	ldr	r0, [pc, #184]	; (401d58 <spi_data_read+0xf0>)
  401c9e:	4c2f      	ldr	r4, [pc, #188]	; (401d5c <spi_data_read+0xf4>)
  401ca0:	47a0      	blx	r4
  401ca2:	482f      	ldr	r0, [pc, #188]	; (401d60 <spi_data_read+0xf8>)
  401ca4:	47a0      	blx	r4
  401ca6:	482f      	ldr	r0, [pc, #188]	; (401d64 <spi_data_read+0xfc>)
  401ca8:	47a0      	blx	r4
  401caa:	2000      	movs	r0, #0
  401cac:	e04d      	b.n	401d4a <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  401cae:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401cb2:	091b      	lsrs	r3, r3, #4
  401cb4:	2b0f      	cmp	r3, #15
  401cb6:	d005      	beq.n	401cc4 <spi_data_read+0x5c>
  401cb8:	3c01      	subs	r4, #1
  401cba:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  401cbc:	f1b4 3fff 	cmp.w	r4, #4294967295
  401cc0:	d1e4      	bne.n	401c8c <spi_data_read+0x24>
  401cc2:	e001      	b.n	401cc8 <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  401cc4:	2c00      	cmp	r4, #0
  401cc6:	dc0d      	bgt.n	401ce4 <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  401cc8:	f240 1263 	movw	r2, #355	; 0x163
  401ccc:	4921      	ldr	r1, [pc, #132]	; (401d54 <spi_data_read+0xec>)
  401cce:	4822      	ldr	r0, [pc, #136]	; (401d58 <spi_data_read+0xf0>)
  401cd0:	4c22      	ldr	r4, [pc, #136]	; (401d5c <spi_data_read+0xf4>)
  401cd2:	47a0      	blx	r4
  401cd4:	f89d 1003 	ldrb.w	r1, [sp, #3]
  401cd8:	4823      	ldr	r0, [pc, #140]	; (401d68 <spi_data_read+0x100>)
  401cda:	47a0      	blx	r4
  401cdc:	4821      	ldr	r0, [pc, #132]	; (401d64 <spi_data_read+0xfc>)
  401cde:	47a0      	blx	r4
			result = N_FAIL;
  401ce0:	2000      	movs	r0, #0
			break;
  401ce2:	e032      	b.n	401d4a <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  401ce4:	b2bf      	uxth	r7, r7
  401ce6:	4639      	mov	r1, r7
  401ce8:	eb0a 0008 	add.w	r0, sl, r8
  401cec:	47a8      	blx	r5
  401cee:	b158      	cbz	r0, 401d08 <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  401cf0:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  401cf4:	4917      	ldr	r1, [pc, #92]	; (401d54 <spi_data_read+0xec>)
  401cf6:	4818      	ldr	r0, [pc, #96]	; (401d58 <spi_data_read+0xf0>)
  401cf8:	4c18      	ldr	r4, [pc, #96]	; (401d5c <spi_data_read+0xf4>)
  401cfa:	47a0      	blx	r4
  401cfc:	481b      	ldr	r0, [pc, #108]	; (401d6c <spi_data_read+0x104>)
  401cfe:	47a0      	blx	r4
  401d00:	4818      	ldr	r0, [pc, #96]	; (401d64 <spi_data_read+0xfc>)
  401d02:	47a0      	blx	r4
			result = N_FAIL;
  401d04:	2000      	movs	r0, #0
			break;
  401d06:	e020      	b.n	401d4a <spi_data_read+0xe2>
		}
		if(!clockless)
  401d08:	f1bb 0f00 	cmp.w	fp, #0
  401d0c:	d112      	bne.n	401d34 <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  401d0e:	4b18      	ldr	r3, [pc, #96]	; (401d70 <spi_data_read+0x108>)
  401d10:	781b      	ldrb	r3, [r3, #0]
  401d12:	b97b      	cbnz	r3, 401d34 <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  401d14:	2102      	movs	r1, #2
  401d16:	a801      	add	r0, sp, #4
  401d18:	47a8      	blx	r5
  401d1a:	b158      	cbz	r0, 401d34 <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  401d1c:	f240 1277 	movw	r2, #375	; 0x177
  401d20:	490c      	ldr	r1, [pc, #48]	; (401d54 <spi_data_read+0xec>)
  401d22:	480d      	ldr	r0, [pc, #52]	; (401d58 <spi_data_read+0xf0>)
  401d24:	4c0d      	ldr	r4, [pc, #52]	; (401d5c <spi_data_read+0xf4>)
  401d26:	47a0      	blx	r4
  401d28:	4812      	ldr	r0, [pc, #72]	; (401d74 <spi_data_read+0x10c>)
  401d2a:	47a0      	blx	r4
  401d2c:	480d      	ldr	r0, [pc, #52]	; (401d64 <spi_data_read+0xfc>)
  401d2e:	47a0      	blx	r4
					result = N_FAIL;
  401d30:	2000      	movs	r0, #0
					break;
  401d32:	e00a      	b.n	401d4a <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  401d34:	44b8      	add	r8, r7
  401d36:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  401d3a:	ebc7 0709 	rsb	r7, r7, r9
  401d3e:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  401d42:	f1b9 0f00 	cmp.w	r9, #0
  401d46:	d198      	bne.n	401c7a <spi_data_read+0x12>
  401d48:	2001      	movs	r0, #1

	return result;
}
  401d4a:	b003      	add	sp, #12
  401d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d50:	00401b8d 	.word	0x00401b8d
  401d54:	00406fb0 	.word	0x00406fb0
  401d58:	00406790 	.word	0x00406790
  401d5c:	00403711 	.word	0x00403711
  401d60:	0040711c 	.word	0x0040711c
  401d64:	004067bc 	.word	0x004067bc
  401d68:	00407150 	.word	0x00407150
  401d6c:	00407180 	.word	0x00407180
  401d70:	204008d8 	.word	0x204008d8
  401d74:	004071b4 	.word	0x004071b4

00401d78 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  401d78:	b500      	push	{lr}
  401d7a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  401d7c:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  401d7e:	2300      	movs	r3, #0
  401d80:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  401d82:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  401d86:	a901      	add	r1, sp, #4
  401d88:	2003      	movs	r0, #3
  401d8a:	4b02      	ldr	r3, [pc, #8]	; (401d94 <nmi_spi_write+0x1c>)
  401d8c:	4798      	blx	r3
}
  401d8e:	b005      	add	sp, #20
  401d90:	f85d fb04 	ldr.w	pc, [sp], #4
  401d94:	00400445 	.word	0x00400445

00401d98 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  401d98:	b570      	push	{r4, r5, r6, lr}
  401d9a:	b084      	sub	sp, #16
  401d9c:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  401da0:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  401da4:	38c1      	subs	r0, #193	; 0xc1
  401da6:	280e      	cmp	r0, #14
  401da8:	f200 80ae 	bhi.w	401f08 <spi_cmd+0x170>
  401dac:	e8df f000 	tbb	[pc, r0]
  401db0:	125f3e3e 	.word	0x125f3e3e
  401db4:	4d4d2c23 	.word	0x4d4d2c23
  401db8:	acac0878 	.word	0xacac0878
  401dbc:	acac      	.short	0xacac
  401dbe:	35          	.byte	0x35
  401dbf:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  401dc0:	0c0b      	lsrs	r3, r1, #16
  401dc2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401dc6:	0a0b      	lsrs	r3, r1, #8
  401dc8:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  401dcc:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  401dd0:	2105      	movs	r1, #5
		break;
  401dd2:	e0a4      	b.n	401f1e <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  401dd4:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401dd8:	b914      	cbnz	r4, 401de0 <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  401dda:	f88d 3005 	strb.w	r3, [sp, #5]
  401dde:	e003      	b.n	401de8 <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  401de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401de4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  401de8:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  401dec:	2300      	movs	r3, #0
  401dee:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401df2:	2105      	movs	r1, #5
		break;
  401df4:	e093      	b.n	401f1e <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  401df6:	2300      	movs	r3, #0
  401df8:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401dfc:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401e00:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e04:	2105      	movs	r1, #5
		break;
  401e06:	e08a      	b.n	401f1e <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  401e08:	2300      	movs	r3, #0
  401e0a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  401e0e:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  401e12:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e16:	2105      	movs	r1, #5
		break;
  401e18:	e081      	b.n	401f1e <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  401e1a:	23ff      	movs	r3, #255	; 0xff
  401e1c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  401e20:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  401e24:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  401e28:	2105      	movs	r1, #5
		break;
  401e2a:	e078      	b.n	401f1e <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  401e2c:	0c0a      	lsrs	r2, r1, #16
  401e2e:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e32:	0a0a      	lsrs	r2, r1, #8
  401e34:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401e38:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  401e3c:	0a1a      	lsrs	r2, r3, #8
  401e3e:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  401e42:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  401e46:	2107      	movs	r1, #7
		break;
  401e48:	e069      	b.n	401f1e <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  401e4a:	0c0a      	lsrs	r2, r1, #16
  401e4c:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401e50:	0a0a      	lsrs	r2, r1, #8
  401e52:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  401e56:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  401e5a:	0c1a      	lsrs	r2, r3, #16
  401e5c:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  401e60:	0a1a      	lsrs	r2, r3, #8
  401e62:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  401e66:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  401e6a:	2108      	movs	r1, #8
		break;
  401e6c:	e057      	b.n	401f1e <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  401e6e:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  401e72:	b914      	cbnz	r4, 401e7a <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  401e74:	f88d 3005 	strb.w	r3, [sp, #5]
  401e78:	e003      	b.n	401e82 <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  401e7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401e7e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  401e82:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  401e86:	0e13      	lsrs	r3, r2, #24
  401e88:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  401e8c:	0c13      	lsrs	r3, r2, #16
  401e8e:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  401e92:	0a13      	lsrs	r3, r2, #8
  401e94:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  401e98:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  401e9c:	2108      	movs	r1, #8
		break;
  401e9e:	e03e      	b.n	401f1e <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  401ea0:	0c0b      	lsrs	r3, r1, #16
  401ea2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  401ea6:	0a0b      	lsrs	r3, r1, #8
  401ea8:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  401eac:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  401eb0:	0e13      	lsrs	r3, r2, #24
  401eb2:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  401eb6:	0c13      	lsrs	r3, r2, #16
  401eb8:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  401ebc:	0a13      	lsrs	r3, r2, #8
  401ebe:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  401ec2:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  401ec6:	2109      	movs	r1, #9
		break;
  401ec8:	e029      	b.n	401f1e <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  401eca:	f812 3b01 	ldrb.w	r3, [r2], #1
  401ece:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  401ed2:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  401ed4:	4295      	cmp	r5, r2
  401ed6:	d1f8      	bne.n	401eca <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401ed8:	ab04      	add	r3, sp, #16
  401eda:	441e      	add	r6, r3
  401edc:	0043      	lsls	r3, r0, #1
  401ede:	f806 3c0c 	strb.w	r3, [r6, #-12]
  401ee2:	e001      	b.n	401ee8 <spi_cmd+0x150>
		else
			len-=1;
  401ee4:	3901      	subs	r1, #1
  401ee6:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  401ee8:	a801      	add	r0, sp, #4
  401eea:	4b10      	ldr	r3, [pc, #64]	; (401f2c <spi_cmd+0x194>)
  401eec:	4798      	blx	r3
  401eee:	b168      	cbz	r0, 401f0c <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  401ef0:	f44f 7284 	mov.w	r2, #264	; 0x108
  401ef4:	490e      	ldr	r1, [pc, #56]	; (401f30 <spi_cmd+0x198>)
  401ef6:	480f      	ldr	r0, [pc, #60]	; (401f34 <spi_cmd+0x19c>)
  401ef8:	4c0f      	ldr	r4, [pc, #60]	; (401f38 <spi_cmd+0x1a0>)
  401efa:	47a0      	blx	r4
  401efc:	480f      	ldr	r0, [pc, #60]	; (401f3c <spi_cmd+0x1a4>)
  401efe:	47a0      	blx	r4
  401f00:	480f      	ldr	r0, [pc, #60]	; (401f40 <spi_cmd+0x1a8>)
  401f02:	47a0      	blx	r4
			result = N_FAIL;
  401f04:	2000      	movs	r0, #0
  401f06:	e00f      	b.n	401f28 <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  401f08:	2000      	movs	r0, #0
  401f0a:	e00d      	b.n	401f28 <spi_cmd+0x190>
  401f0c:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  401f0e:	e00b      	b.n	401f28 <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  401f10:	1e4e      	subs	r6, r1, #1
  401f12:	ab01      	add	r3, sp, #4
  401f14:	199d      	adds	r5, r3, r6
  401f16:	207f      	movs	r0, #127	; 0x7f
  401f18:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  401f1a:	4c0a      	ldr	r4, [pc, #40]	; (401f44 <spi_cmd+0x1ac>)
  401f1c:	e7d5      	b.n	401eca <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  401f1e:	4b0a      	ldr	r3, [pc, #40]	; (401f48 <spi_cmd+0x1b0>)
  401f20:	781b      	ldrb	r3, [r3, #0]
  401f22:	2b00      	cmp	r3, #0
  401f24:	d1de      	bne.n	401ee4 <spi_cmd+0x14c>
  401f26:	e7f3      	b.n	401f10 <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  401f28:	b004      	add	sp, #16
  401f2a:	bd70      	pop	{r4, r5, r6, pc}
  401f2c:	00401d79 	.word	0x00401d79
  401f30:	004075ac 	.word	0x004075ac
  401f34:	00406790 	.word	0x00406790
  401f38:	00403711 	.word	0x00403711
  401f3c:	004071ec 	.word	0x004071ec
  401f40:	004067bc 	.word	0x004067bc
  401f44:	00406fc0 	.word	0x00406fc0
  401f48:	204008d8 	.word	0x204008d8

00401f4c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  401f4c:	b570      	push	{r4, r5, r6, lr}
  401f4e:	b082      	sub	sp, #8
  401f50:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  401f52:	2831      	cmp	r0, #49	; 0x31
  401f54:	bf35      	itete	cc
  401f56:	2301      	movcc	r3, #1
  401f58:	2300      	movcs	r3, #0
  401f5a:	25c3      	movcc	r5, #195	; 0xc3
  401f5c:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  401f5e:	9300      	str	r3, [sp, #0]
  401f60:	2304      	movs	r3, #4
  401f62:	460a      	mov	r2, r1
  401f64:	4601      	mov	r1, r0
  401f66:	4628      	mov	r0, r5
  401f68:	4e16      	ldr	r6, [pc, #88]	; (401fc4 <spi_write_reg+0x78>)
  401f6a:	47b0      	blx	r6
	if (result != N_OK) {
  401f6c:	2801      	cmp	r0, #1
  401f6e:	d00c      	beq.n	401f8a <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  401f70:	f240 12eb 	movw	r2, #491	; 0x1eb
  401f74:	4914      	ldr	r1, [pc, #80]	; (401fc8 <spi_write_reg+0x7c>)
  401f76:	4815      	ldr	r0, [pc, #84]	; (401fcc <spi_write_reg+0x80>)
  401f78:	4d15      	ldr	r5, [pc, #84]	; (401fd0 <spi_write_reg+0x84>)
  401f7a:	47a8      	blx	r5
  401f7c:	4621      	mov	r1, r4
  401f7e:	4815      	ldr	r0, [pc, #84]	; (401fd4 <spi_write_reg+0x88>)
  401f80:	47a8      	blx	r5
  401f82:	4815      	ldr	r0, [pc, #84]	; (401fd8 <spi_write_reg+0x8c>)
  401f84:	47a8      	blx	r5
		return N_FAIL;
  401f86:	2000      	movs	r0, #0
  401f88:	e01a      	b.n	401fc0 <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  401f8a:	4628      	mov	r0, r5
  401f8c:	4b13      	ldr	r3, [pc, #76]	; (401fdc <spi_write_reg+0x90>)
  401f8e:	4798      	blx	r3
	if (result != N_OK) {
  401f90:	2801      	cmp	r0, #1
  401f92:	d014      	beq.n	401fbe <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  401f94:	f240 12f1 	movw	r2, #497	; 0x1f1
  401f98:	490b      	ldr	r1, [pc, #44]	; (401fc8 <spi_write_reg+0x7c>)
  401f9a:	480c      	ldr	r0, [pc, #48]	; (401fcc <spi_write_reg+0x80>)
  401f9c:	4d0c      	ldr	r5, [pc, #48]	; (401fd0 <spi_write_reg+0x84>)
  401f9e:	47a8      	blx	r5
  401fa0:	4621      	mov	r1, r4
  401fa2:	480f      	ldr	r0, [pc, #60]	; (401fe0 <spi_write_reg+0x94>)
  401fa4:	47a8      	blx	r5
  401fa6:	480c      	ldr	r0, [pc, #48]	; (401fd8 <spi_write_reg+0x8c>)
  401fa8:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  401faa:	2400      	movs	r4, #0
  401fac:	9400      	str	r4, [sp, #0]
  401fae:	4623      	mov	r3, r4
  401fb0:	4622      	mov	r2, r4
  401fb2:	4621      	mov	r1, r4
  401fb4:	20cf      	movs	r0, #207	; 0xcf
  401fb6:	4d03      	ldr	r5, [pc, #12]	; (401fc4 <spi_write_reg+0x78>)
  401fb8:	47a8      	blx	r5
		return N_FAIL;
  401fba:	4620      	mov	r0, r4
  401fbc:	e000      	b.n	401fc0 <spi_write_reg+0x74>
	}

	return N_OK;
  401fbe:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  401fc0:	b002      	add	sp, #8
  401fc2:	bd70      	pop	{r4, r5, r6, pc}
  401fc4:	00401d99 	.word	0x00401d99
  401fc8:	0040759c 	.word	0x0040759c
  401fcc:	00406790 	.word	0x00406790
  401fd0:	00403711 	.word	0x00403711
  401fd4:	00407218 	.word	0x00407218
  401fd8:	004067bc 	.word	0x004067bc
  401fdc:	00401bad 	.word	0x00401bad
  401fe0:	00407244 	.word	0x00407244

00401fe4 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  401fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fe8:	b084      	sub	sp, #16
  401fea:	4604      	mov	r4, r0
  401fec:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  401fee:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  401ff2:	bf35      	itete	cc
  401ff4:	2601      	movcc	r6, #1
  401ff6:	2600      	movcs	r6, #0
  401ff8:	25c4      	movcc	r5, #196	; 0xc4
  401ffa:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  401ffc:	9600      	str	r6, [sp, #0]
  401ffe:	2304      	movs	r3, #4
  402000:	2200      	movs	r2, #0
  402002:	4601      	mov	r1, r0
  402004:	4628      	mov	r0, r5
  402006:	4f2d      	ldr	r7, [pc, #180]	; (4020bc <spi_read_reg+0xd8>)
  402008:	47b8      	blx	r7
	if (result != N_OK) {
  40200a:	2801      	cmp	r0, #1
  40200c:	d00c      	beq.n	402028 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  40200e:	f240 2245 	movw	r2, #581	; 0x245
  402012:	492b      	ldr	r1, [pc, #172]	; (4020c0 <spi_read_reg+0xdc>)
  402014:	482b      	ldr	r0, [pc, #172]	; (4020c4 <spi_read_reg+0xe0>)
  402016:	4d2c      	ldr	r5, [pc, #176]	; (4020c8 <spi_read_reg+0xe4>)
  402018:	47a8      	blx	r5
  40201a:	4621      	mov	r1, r4
  40201c:	482b      	ldr	r0, [pc, #172]	; (4020cc <spi_read_reg+0xe8>)
  40201e:	47a8      	blx	r5
  402020:	482b      	ldr	r0, [pc, #172]	; (4020d0 <spi_read_reg+0xec>)
  402022:	47a8      	blx	r5
		return N_FAIL;
  402024:	2000      	movs	r0, #0
  402026:	e045      	b.n	4020b4 <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  402028:	4628      	mov	r0, r5
  40202a:	4b2a      	ldr	r3, [pc, #168]	; (4020d4 <spi_read_reg+0xf0>)
  40202c:	4798      	blx	r3
	if (result != N_OK) {
  40202e:	2801      	cmp	r0, #1
  402030:	d014      	beq.n	40205c <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  402032:	f240 224b 	movw	r2, #587	; 0x24b
  402036:	4922      	ldr	r1, [pc, #136]	; (4020c0 <spi_read_reg+0xdc>)
  402038:	4822      	ldr	r0, [pc, #136]	; (4020c4 <spi_read_reg+0xe0>)
  40203a:	4d23      	ldr	r5, [pc, #140]	; (4020c8 <spi_read_reg+0xe4>)
  40203c:	47a8      	blx	r5
  40203e:	4621      	mov	r1, r4
  402040:	4825      	ldr	r0, [pc, #148]	; (4020d8 <spi_read_reg+0xf4>)
  402042:	47a8      	blx	r5
  402044:	4822      	ldr	r0, [pc, #136]	; (4020d0 <spi_read_reg+0xec>)
  402046:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402048:	2400      	movs	r4, #0
  40204a:	9400      	str	r4, [sp, #0]
  40204c:	4623      	mov	r3, r4
  40204e:	4622      	mov	r2, r4
  402050:	4621      	mov	r1, r4
  402052:	20cf      	movs	r0, #207	; 0xcf
  402054:	4d19      	ldr	r5, [pc, #100]	; (4020bc <spi_read_reg+0xd8>)
  402056:	47a8      	blx	r5
		return N_FAIL;
  402058:	4620      	mov	r0, r4
  40205a:	e02b      	b.n	4020b4 <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  40205c:	4632      	mov	r2, r6
  40205e:	2104      	movs	r1, #4
  402060:	a803      	add	r0, sp, #12
  402062:	4b1e      	ldr	r3, [pc, #120]	; (4020dc <spi_read_reg+0xf8>)
  402064:	4798      	blx	r3
	if (result != N_OK) {
  402066:	2801      	cmp	r0, #1
  402068:	d013      	beq.n	402092 <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  40206a:	f240 2253 	movw	r2, #595	; 0x253
  40206e:	4914      	ldr	r1, [pc, #80]	; (4020c0 <spi_read_reg+0xdc>)
  402070:	4814      	ldr	r0, [pc, #80]	; (4020c4 <spi_read_reg+0xe0>)
  402072:	4c15      	ldr	r4, [pc, #84]	; (4020c8 <spi_read_reg+0xe4>)
  402074:	47a0      	blx	r4
  402076:	481a      	ldr	r0, [pc, #104]	; (4020e0 <spi_read_reg+0xfc>)
  402078:	47a0      	blx	r4
  40207a:	4815      	ldr	r0, [pc, #84]	; (4020d0 <spi_read_reg+0xec>)
  40207c:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40207e:	2400      	movs	r4, #0
  402080:	9400      	str	r4, [sp, #0]
  402082:	4623      	mov	r3, r4
  402084:	4622      	mov	r2, r4
  402086:	4621      	mov	r1, r4
  402088:	20cf      	movs	r0, #207	; 0xcf
  40208a:	4d0c      	ldr	r5, [pc, #48]	; (4020bc <spi_read_reg+0xd8>)
  40208c:	47a8      	blx	r5
		return N_FAIL;
  40208e:	4620      	mov	r0, r4
  402090:	e010      	b.n	4020b4 <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  402092:	f89d 100d 	ldrb.w	r1, [sp, #13]
  402096:	f89d 200e 	ldrb.w	r2, [sp, #14]
  40209a:	0413      	lsls	r3, r2, #16
  40209c:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  4020a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
  4020a4:	4313      	orrs	r3, r2
  4020a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
  4020aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4020ae:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  4020b2:	2001      	movs	r0, #1
}
  4020b4:	b004      	add	sp, #16
  4020b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4020ba:	bf00      	nop
  4020bc:	00401d99 	.word	0x00401d99
  4020c0:	004075d0 	.word	0x004075d0
  4020c4:	00406790 	.word	0x00406790
  4020c8:	00403711 	.word	0x00403711
  4020cc:	0040727c 	.word	0x0040727c
  4020d0:	004067bc 	.word	0x004067bc
  4020d4:	00401bad 	.word	0x00401bad
  4020d8:	004072a8 	.word	0x004072a8
  4020dc:	00401c69 	.word	0x00401c69
  4020e0:	004072dc 	.word	0x004072dc

004020e4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4020e4:	2000      	movs	r0, #0
  4020e6:	4b01      	ldr	r3, [pc, #4]	; (4020ec <nm_spi_deinit+0x8>)
  4020e8:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4020ea:	4770      	bx	lr
  4020ec:	204008d8 	.word	0x204008d8

004020f0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4020f0:	b500      	push	{lr}
  4020f2:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4020f4:	a901      	add	r1, sp, #4
  4020f6:	4b03      	ldr	r3, [pc, #12]	; (402104 <nm_spi_read_reg+0x14>)
  4020f8:	4798      	blx	r3

	return u32Val;
}
  4020fa:	9801      	ldr	r0, [sp, #4]
  4020fc:	b003      	add	sp, #12
  4020fe:	f85d fb04 	ldr.w	pc, [sp], #4
  402102:	bf00      	nop
  402104:	00401fe5 	.word	0x00401fe5

00402108 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402108:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  40210a:	4b04      	ldr	r3, [pc, #16]	; (40211c <nm_spi_read_reg_with_ret+0x14>)
  40210c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40210e:	2801      	cmp	r0, #1

	return s8Ret;
}
  402110:	bf0c      	ite	eq
  402112:	2000      	moveq	r0, #0
  402114:	f06f 0005 	mvnne.w	r0, #5
  402118:	bd08      	pop	{r3, pc}
  40211a:	bf00      	nop
  40211c:	00401fe5 	.word	0x00401fe5

00402120 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  402120:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  402122:	4b04      	ldr	r3, [pc, #16]	; (402134 <nm_spi_write_reg+0x14>)
  402124:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  402126:	2801      	cmp	r0, #1

	return s8Ret;
}
  402128:	bf0c      	ite	eq
  40212a:	2000      	moveq	r0, #0
  40212c:	f06f 0005 	mvnne.w	r0, #5
  402130:	bd08      	pop	{r3, pc}
  402132:	bf00      	nop
  402134:	00401f4d 	.word	0x00401f4d

00402138 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  402138:	b530      	push	{r4, r5, lr}
  40213a:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  40213c:	2300      	movs	r3, #0
  40213e:	a902      	add	r1, sp, #8
  402140:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  402144:	4a32      	ldr	r2, [pc, #200]	; (402210 <nm_spi_init+0xd8>)
  402146:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  402148:	f64e 0024 	movw	r0, #59428	; 0xe824
  40214c:	4b31      	ldr	r3, [pc, #196]	; (402214 <nm_spi_init+0xdc>)
  40214e:	4798      	blx	r3
  402150:	b9f0      	cbnz	r0, 402190 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  402152:	2201      	movs	r2, #1
  402154:	4b2e      	ldr	r3, [pc, #184]	; (402210 <nm_spi_init+0xd8>)
  402156:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  402158:	f240 22c5 	movw	r2, #709	; 0x2c5
  40215c:	492e      	ldr	r1, [pc, #184]	; (402218 <nm_spi_init+0xe0>)
  40215e:	482f      	ldr	r0, [pc, #188]	; (40221c <nm_spi_init+0xe4>)
  402160:	4c2f      	ldr	r4, [pc, #188]	; (402220 <nm_spi_init+0xe8>)
  402162:	47a0      	blx	r4
  402164:	482f      	ldr	r0, [pc, #188]	; (402224 <nm_spi_init+0xec>)
  402166:	47a0      	blx	r4
  402168:	482f      	ldr	r0, [pc, #188]	; (402228 <nm_spi_init+0xf0>)
  40216a:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  40216c:	4669      	mov	r1, sp
  40216e:	f64e 0024 	movw	r0, #59428	; 0xe824
  402172:	4b28      	ldr	r3, [pc, #160]	; (402214 <nm_spi_init+0xdc>)
  402174:	4798      	blx	r3
  402176:	4604      	mov	r4, r0
  402178:	b950      	cbnz	r0, 402190 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  40217a:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  40217e:	4926      	ldr	r1, [pc, #152]	; (402218 <nm_spi_init+0xe0>)
  402180:	4826      	ldr	r0, [pc, #152]	; (40221c <nm_spi_init+0xe4>)
  402182:	4d27      	ldr	r5, [pc, #156]	; (402220 <nm_spi_init+0xe8>)
  402184:	47a8      	blx	r5
  402186:	4829      	ldr	r0, [pc, #164]	; (40222c <nm_spi_init+0xf4>)
  402188:	47a8      	blx	r5
  40218a:	4827      	ldr	r0, [pc, #156]	; (402228 <nm_spi_init+0xf0>)
  40218c:	47a8      	blx	r5
			return 0;
  40218e:	e03c      	b.n	40220a <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  402190:	4b1f      	ldr	r3, [pc, #124]	; (402210 <nm_spi_init+0xd8>)
  402192:	781b      	ldrb	r3, [r3, #0]
  402194:	b9cb      	cbnz	r3, 4021ca <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  402196:	9900      	ldr	r1, [sp, #0]
  402198:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  40219c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4021a0:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  4021a2:	f64e 0024 	movw	r0, #59428	; 0xe824
  4021a6:	4b22      	ldr	r3, [pc, #136]	; (402230 <nm_spi_init+0xf8>)
  4021a8:	4798      	blx	r3
  4021aa:	4604      	mov	r4, r0
  4021ac:	b950      	cbnz	r0, 4021c4 <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  4021ae:	f240 22d2 	movw	r2, #722	; 0x2d2
  4021b2:	4919      	ldr	r1, [pc, #100]	; (402218 <nm_spi_init+0xe0>)
  4021b4:	4819      	ldr	r0, [pc, #100]	; (40221c <nm_spi_init+0xe4>)
  4021b6:	4d1a      	ldr	r5, [pc, #104]	; (402220 <nm_spi_init+0xe8>)
  4021b8:	47a8      	blx	r5
  4021ba:	481e      	ldr	r0, [pc, #120]	; (402234 <nm_spi_init+0xfc>)
  4021bc:	47a8      	blx	r5
  4021be:	481a      	ldr	r0, [pc, #104]	; (402228 <nm_spi_init+0xf0>)
  4021c0:	47a8      	blx	r5
			return 0;
  4021c2:	e022      	b.n	40220a <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  4021c4:	2201      	movs	r2, #1
  4021c6:	4b12      	ldr	r3, [pc, #72]	; (402210 <nm_spi_init+0xd8>)
  4021c8:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  4021ca:	a901      	add	r1, sp, #4
  4021cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4021d0:	4b10      	ldr	r3, [pc, #64]	; (402214 <nm_spi_init+0xdc>)
  4021d2:	4798      	blx	r3
  4021d4:	b960      	cbnz	r0, 4021f0 <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  4021d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  4021da:	490f      	ldr	r1, [pc, #60]	; (402218 <nm_spi_init+0xe0>)
  4021dc:	480f      	ldr	r0, [pc, #60]	; (40221c <nm_spi_init+0xe4>)
  4021de:	4c10      	ldr	r4, [pc, #64]	; (402220 <nm_spi_init+0xe8>)
  4021e0:	47a0      	blx	r4
  4021e2:	4815      	ldr	r0, [pc, #84]	; (402238 <nm_spi_init+0x100>)
  4021e4:	47a0      	blx	r4
  4021e6:	4810      	ldr	r0, [pc, #64]	; (402228 <nm_spi_init+0xf0>)
  4021e8:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4021ea:	f06f 0405 	mvn.w	r4, #5
  4021ee:	e00c      	b.n	40220a <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  4021f0:	f64e 0024 	movw	r0, #59428	; 0xe824
  4021f4:	4b11      	ldr	r3, [pc, #68]	; (40223c <nm_spi_init+0x104>)
  4021f6:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  4021f8:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  4021fc:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  402200:	f64e 0024 	movw	r0, #59428	; 0xe824
  402204:	4b0e      	ldr	r3, [pc, #56]	; (402240 <nm_spi_init+0x108>)
  402206:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  402208:	2400      	movs	r4, #0
}
  40220a:	4620      	mov	r0, r4
  40220c:	b003      	add	sp, #12
  40220e:	bd30      	pop	{r4, r5, pc}
  402210:	204008d8 	.word	0x204008d8
  402214:	00401fe5 	.word	0x00401fe5
  402218:	004070c0 	.word	0x004070c0
  40221c:	00406790 	.word	0x00406790
  402220:	00403711 	.word	0x00403711
  402224:	004072fc 	.word	0x004072fc
  402228:	004067bc 	.word	0x004067bc
  40222c:	0040734c 	.word	0x0040734c
  402230:	00401f4d 	.word	0x00401f4d
  402234:	0040737c 	.word	0x0040737c
  402238:	004073b0 	.word	0x004073b0
  40223c:	004020f1 	.word	0x004020f1
  402240:	00402121 	.word	0x00402121

00402244 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402244:	b5f0      	push	{r4, r5, r6, r7, lr}
  402246:	b083      	sub	sp, #12
  402248:	4604      	mov	r4, r0
  40224a:	460f      	mov	r7, r1
  40224c:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  40224e:	2200      	movs	r2, #0
  402250:	9200      	str	r2, [sp, #0]
  402252:	462b      	mov	r3, r5
  402254:	4601      	mov	r1, r0
  402256:	20c8      	movs	r0, #200	; 0xc8
  402258:	4e23      	ldr	r6, [pc, #140]	; (4022e8 <nm_spi_read_block+0xa4>)
  40225a:	47b0      	blx	r6
	if (result != N_OK) {
  40225c:	2801      	cmp	r0, #1
  40225e:	d00b      	beq.n	402278 <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  402260:	f44f 721d 	mov.w	r2, #628	; 0x274
  402264:	4921      	ldr	r1, [pc, #132]	; (4022ec <nm_spi_read_block+0xa8>)
  402266:	4822      	ldr	r0, [pc, #136]	; (4022f0 <nm_spi_read_block+0xac>)
  402268:	4d22      	ldr	r5, [pc, #136]	; (4022f4 <nm_spi_read_block+0xb0>)
  40226a:	47a8      	blx	r5
  40226c:	4621      	mov	r1, r4
  40226e:	4822      	ldr	r0, [pc, #136]	; (4022f8 <nm_spi_read_block+0xb4>)
  402270:	47a8      	blx	r5
  402272:	4822      	ldr	r0, [pc, #136]	; (4022fc <nm_spi_read_block+0xb8>)
  402274:	47a8      	blx	r5
  402276:	e032      	b.n	4022de <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  402278:	20c8      	movs	r0, #200	; 0xc8
  40227a:	4b21      	ldr	r3, [pc, #132]	; (402300 <nm_spi_read_block+0xbc>)
  40227c:	4798      	blx	r3
	if (result != N_OK) {
  40227e:	2801      	cmp	r0, #1
  402280:	d012      	beq.n	4022a8 <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  402282:	f240 227a 	movw	r2, #634	; 0x27a
  402286:	4919      	ldr	r1, [pc, #100]	; (4022ec <nm_spi_read_block+0xa8>)
  402288:	4819      	ldr	r0, [pc, #100]	; (4022f0 <nm_spi_read_block+0xac>)
  40228a:	4d1a      	ldr	r5, [pc, #104]	; (4022f4 <nm_spi_read_block+0xb0>)
  40228c:	47a8      	blx	r5
  40228e:	4621      	mov	r1, r4
  402290:	481c      	ldr	r0, [pc, #112]	; (402304 <nm_spi_read_block+0xc0>)
  402292:	47a8      	blx	r5
  402294:	4819      	ldr	r0, [pc, #100]	; (4022fc <nm_spi_read_block+0xb8>)
  402296:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402298:	2100      	movs	r1, #0
  40229a:	9100      	str	r1, [sp, #0]
  40229c:	460b      	mov	r3, r1
  40229e:	460a      	mov	r2, r1
  4022a0:	20cf      	movs	r0, #207	; 0xcf
  4022a2:	4c11      	ldr	r4, [pc, #68]	; (4022e8 <nm_spi_read_block+0xa4>)
  4022a4:	47a0      	blx	r4
  4022a6:	e01a      	b.n	4022de <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  4022a8:	2200      	movs	r2, #0
  4022aa:	4629      	mov	r1, r5
  4022ac:	4638      	mov	r0, r7
  4022ae:	4b16      	ldr	r3, [pc, #88]	; (402308 <nm_spi_read_block+0xc4>)
  4022b0:	4798      	blx	r3
	if (result != N_OK) {
  4022b2:	2801      	cmp	r0, #1
  4022b4:	d011      	beq.n	4022da <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  4022b6:	f44f 7221 	mov.w	r2, #644	; 0x284
  4022ba:	490c      	ldr	r1, [pc, #48]	; (4022ec <nm_spi_read_block+0xa8>)
  4022bc:	480c      	ldr	r0, [pc, #48]	; (4022f0 <nm_spi_read_block+0xac>)
  4022be:	4c0d      	ldr	r4, [pc, #52]	; (4022f4 <nm_spi_read_block+0xb0>)
  4022c0:	47a0      	blx	r4
  4022c2:	4812      	ldr	r0, [pc, #72]	; (40230c <nm_spi_read_block+0xc8>)
  4022c4:	47a0      	blx	r4
  4022c6:	480d      	ldr	r0, [pc, #52]	; (4022fc <nm_spi_read_block+0xb8>)
  4022c8:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4022ca:	2100      	movs	r1, #0
  4022cc:	9100      	str	r1, [sp, #0]
  4022ce:	460b      	mov	r3, r1
  4022d0:	460a      	mov	r2, r1
  4022d2:	20cf      	movs	r0, #207	; 0xcf
  4022d4:	4c04      	ldr	r4, [pc, #16]	; (4022e8 <nm_spi_read_block+0xa4>)
  4022d6:	47a0      	blx	r4
  4022d8:	e001      	b.n	4022de <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4022da:	2000      	movs	r0, #0
  4022dc:	e001      	b.n	4022e2 <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4022de:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4022e2:	b003      	add	sp, #12
  4022e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4022e6:	bf00      	nop
  4022e8:	00401d99 	.word	0x00401d99
  4022ec:	004070dc 	.word	0x004070dc
  4022f0:	00406790 	.word	0x00406790
  4022f4:	00403711 	.word	0x00403711
  4022f8:	004073d8 	.word	0x004073d8
  4022fc:	004067bc 	.word	0x004067bc
  402300:	00401bad 	.word	0x00401bad
  402304:	00407408 	.word	0x00407408
  402308:	00401c69 	.word	0x00401c69
  40230c:	00407440 	.word	0x00407440

00402310 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  402310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402314:	b085      	sub	sp, #20
  402316:	4604      	mov	r4, r0
  402318:	4688      	mov	r8, r1
  40231a:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  40231c:	2200      	movs	r2, #0
  40231e:	9200      	str	r2, [sp, #0]
  402320:	462b      	mov	r3, r5
  402322:	4601      	mov	r1, r0
  402324:	20c7      	movs	r0, #199	; 0xc7
  402326:	4e4c      	ldr	r6, [pc, #304]	; (402458 <nm_spi_write_block+0x148>)
  402328:	47b0      	blx	r6
	if (result != N_OK) {
  40232a:	2801      	cmp	r0, #1
  40232c:	d00b      	beq.n	402346 <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  40232e:	f240 220f 	movw	r2, #527	; 0x20f
  402332:	494a      	ldr	r1, [pc, #296]	; (40245c <nm_spi_write_block+0x14c>)
  402334:	484a      	ldr	r0, [pc, #296]	; (402460 <nm_spi_write_block+0x150>)
  402336:	4d4b      	ldr	r5, [pc, #300]	; (402464 <nm_spi_write_block+0x154>)
  402338:	47a8      	blx	r5
  40233a:	4621      	mov	r1, r4
  40233c:	484a      	ldr	r0, [pc, #296]	; (402468 <nm_spi_write_block+0x158>)
  40233e:	47a8      	blx	r5
  402340:	484a      	ldr	r0, [pc, #296]	; (40246c <nm_spi_write_block+0x15c>)
  402342:	47a8      	blx	r5
  402344:	e082      	b.n	40244c <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  402346:	20c7      	movs	r0, #199	; 0xc7
  402348:	4b49      	ldr	r3, [pc, #292]	; (402470 <nm_spi_write_block+0x160>)
  40234a:	4798      	blx	r3
	if (result != N_OK) {
  40234c:	2801      	cmp	r0, #1
  40234e:	d012      	beq.n	402376 <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  402350:	f240 2215 	movw	r2, #533	; 0x215
  402354:	4941      	ldr	r1, [pc, #260]	; (40245c <nm_spi_write_block+0x14c>)
  402356:	4842      	ldr	r0, [pc, #264]	; (402460 <nm_spi_write_block+0x150>)
  402358:	4d42      	ldr	r5, [pc, #264]	; (402464 <nm_spi_write_block+0x154>)
  40235a:	47a8      	blx	r5
  40235c:	4621      	mov	r1, r4
  40235e:	4845      	ldr	r0, [pc, #276]	; (402474 <nm_spi_write_block+0x164>)
  402360:	47a8      	blx	r5
  402362:	4842      	ldr	r0, [pc, #264]	; (40246c <nm_spi_write_block+0x15c>)
  402364:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402366:	2100      	movs	r1, #0
  402368:	9100      	str	r1, [sp, #0]
  40236a:	460b      	mov	r3, r1
  40236c:	460a      	mov	r2, r1
  40236e:	20cf      	movs	r0, #207	; 0xcf
  402370:	4c39      	ldr	r4, [pc, #228]	; (402458 <nm_spi_write_block+0x148>)
  402372:	47a0      	blx	r4
  402374:	e06a      	b.n	40244c <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  402376:	2400      	movs	r4, #0
  402378:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  40237c:	4f3e      	ldr	r7, [pc, #248]	; (402478 <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  40237e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 402490 <nm_spi_write_block+0x180>
  402382:	462e      	mov	r6, r5
  402384:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402388:	bf28      	it	cs
  40238a:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  40238e:	b92c      	cbnz	r4, 40239c <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  402390:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  402394:	bf94      	ite	ls
  402396:	2303      	movls	r3, #3
  402398:	2301      	movhi	r3, #1
  40239a:	e004      	b.n	4023a6 <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  40239c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4023a0:	bf94      	ite	ls
  4023a2:	2303      	movls	r3, #3
  4023a4:	2302      	movhi	r3, #2
		}
		cmd |= order;
  4023a6:	f063 030f 	orn	r3, r3, #15
  4023aa:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4023ae:	2101      	movs	r1, #1
  4023b0:	f10d 000b 	add.w	r0, sp, #11
  4023b4:	47b8      	blx	r7
  4023b6:	b150      	cbz	r0, 4023ce <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4023b8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4023bc:	492f      	ldr	r1, [pc, #188]	; (40247c <nm_spi_write_block+0x16c>)
  4023be:	4828      	ldr	r0, [pc, #160]	; (402460 <nm_spi_write_block+0x150>)
  4023c0:	4c28      	ldr	r4, [pc, #160]	; (402464 <nm_spi_write_block+0x154>)
  4023c2:	47a0      	blx	r4
  4023c4:	482e      	ldr	r0, [pc, #184]	; (402480 <nm_spi_write_block+0x170>)
  4023c6:	47a0      	blx	r4
  4023c8:	4828      	ldr	r0, [pc, #160]	; (40246c <nm_spi_write_block+0x15c>)
  4023ca:	47a0      	blx	r4
  4023cc:	e028      	b.n	402420 <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  4023ce:	4631      	mov	r1, r6
  4023d0:	eb08 0004 	add.w	r0, r8, r4
  4023d4:	47b8      	blx	r7
  4023d6:	b150      	cbz	r0, 4023ee <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4023d8:	f240 12b1 	movw	r2, #433	; 0x1b1
  4023dc:	4927      	ldr	r1, [pc, #156]	; (40247c <nm_spi_write_block+0x16c>)
  4023de:	4820      	ldr	r0, [pc, #128]	; (402460 <nm_spi_write_block+0x150>)
  4023e0:	4c20      	ldr	r4, [pc, #128]	; (402464 <nm_spi_write_block+0x154>)
  4023e2:	47a0      	blx	r4
  4023e4:	4827      	ldr	r0, [pc, #156]	; (402484 <nm_spi_write_block+0x174>)
  4023e6:	47a0      	blx	r4
  4023e8:	4820      	ldr	r0, [pc, #128]	; (40246c <nm_spi_write_block+0x15c>)
  4023ea:	47a0      	blx	r4
  4023ec:	e018      	b.n	402420 <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  4023ee:	f899 3000 	ldrb.w	r3, [r9]
  4023f2:	b973      	cbnz	r3, 402412 <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4023f4:	2102      	movs	r1, #2
  4023f6:	a803      	add	r0, sp, #12
  4023f8:	47b8      	blx	r7
  4023fa:	b150      	cbz	r0, 402412 <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  4023fc:	f240 12bb 	movw	r2, #443	; 0x1bb
  402400:	491e      	ldr	r1, [pc, #120]	; (40247c <nm_spi_write_block+0x16c>)
  402402:	4817      	ldr	r0, [pc, #92]	; (402460 <nm_spi_write_block+0x150>)
  402404:	4c17      	ldr	r4, [pc, #92]	; (402464 <nm_spi_write_block+0x154>)
  402406:	47a0      	blx	r4
  402408:	481f      	ldr	r0, [pc, #124]	; (402488 <nm_spi_write_block+0x178>)
  40240a:	47a0      	blx	r4
  40240c:	4817      	ldr	r0, [pc, #92]	; (40246c <nm_spi_write_block+0x15c>)
  40240e:	47a0      	blx	r4
  402410:	e006      	b.n	402420 <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  402412:	4434      	add	r4, r6
  402414:	b224      	sxth	r4, r4
		sz -= nbytes;
  402416:	1bad      	subs	r5, r5, r6
  402418:	b2ad      	uxth	r5, r5
	} while (sz);
  40241a:	2d00      	cmp	r5, #0
  40241c:	d1b1      	bne.n	402382 <nm_spi_write_block+0x72>
  40241e:	e013      	b.n	402448 <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  402420:	f240 2226 	movw	r2, #550	; 0x226
  402424:	490d      	ldr	r1, [pc, #52]	; (40245c <nm_spi_write_block+0x14c>)
  402426:	480e      	ldr	r0, [pc, #56]	; (402460 <nm_spi_write_block+0x150>)
  402428:	4c0e      	ldr	r4, [pc, #56]	; (402464 <nm_spi_write_block+0x154>)
  40242a:	47a0      	blx	r4
  40242c:	4817      	ldr	r0, [pc, #92]	; (40248c <nm_spi_write_block+0x17c>)
  40242e:	47a0      	blx	r4
  402430:	480e      	ldr	r0, [pc, #56]	; (40246c <nm_spi_write_block+0x15c>)
  402432:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402434:	2400      	movs	r4, #0
  402436:	9400      	str	r4, [sp, #0]
  402438:	4623      	mov	r3, r4
  40243a:	4622      	mov	r2, r4
  40243c:	4621      	mov	r1, r4
  40243e:	20cf      	movs	r0, #207	; 0xcf
  402440:	4d05      	ldr	r5, [pc, #20]	; (402458 <nm_spi_write_block+0x148>)
  402442:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  402444:	4620      	mov	r0, r4
  402446:	e003      	b.n	402450 <nm_spi_write_block+0x140>
  402448:	2000      	movs	r0, #0
  40244a:	e001      	b.n	402450 <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  40244c:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  402450:	b005      	add	sp, #20
  402452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402456:	bf00      	nop
  402458:	00401d99 	.word	0x00401d99
  40245c:	004075b4 	.word	0x004075b4
  402460:	00406790 	.word	0x00406790
  402464:	00403711 	.word	0x00403711
  402468:	00407468 	.word	0x00407468
  40246c:	004067bc 	.word	0x004067bc
  402470:	00401bad 	.word	0x00401bad
  402474:	00407498 	.word	0x00407498
  402478:	00401d79 	.word	0x00401d79
  40247c:	004070cc 	.word	0x004070cc
  402480:	004074d0 	.word	0x004074d0
  402484:	00407508 	.word	0x00407508
  402488:	0040753c 	.word	0x0040753c
  40248c:	00407574 	.word	0x00407574
  402490:	204008d8 	.word	0x204008d8

00402494 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  402494:	b570      	push	{r4, r5, r6, lr}
  402496:	b082      	sub	sp, #8
  402498:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  40249a:	4b2b      	ldr	r3, [pc, #172]	; (402548 <spi_flash_enable+0xb4>)
  40249c:	4798      	blx	r3
  40249e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4024a2:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  4024a6:	d34a      	bcc.n	40253e <spi_flash_enable+0xaa>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  4024a8:	a901      	add	r1, sp, #4
  4024aa:	f241 4010 	movw	r0, #5136	; 0x1410
  4024ae:	4b27      	ldr	r3, [pc, #156]	; (40254c <spi_flash_enable+0xb8>)
  4024b0:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  4024b2:	4604      	mov	r4, r0
  4024b4:	2800      	cmp	r0, #0
  4024b6:	d143      	bne.n	402540 <spi_flash_enable+0xac>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  4024b8:	4b25      	ldr	r3, [pc, #148]	; (402550 <spi_flash_enable+0xbc>)
  4024ba:	9a01      	ldr	r2, [sp, #4]
  4024bc:	4013      	ands	r3, r2
  4024be:	4925      	ldr	r1, [pc, #148]	; (402554 <spi_flash_enable+0xc0>)
  4024c0:	4319      	orrs	r1, r3
  4024c2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  4024c4:	f241 4010 	movw	r0, #5136	; 0x1410
  4024c8:	4b23      	ldr	r3, [pc, #140]	; (402558 <spi_flash_enable+0xc4>)
  4024ca:	4798      	blx	r3
		if(enable) {
  4024cc:	b1b5      	cbz	r5, 4024fc <spi_flash_enable+0x68>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4024ce:	2100      	movs	r1, #0
  4024d0:	4822      	ldr	r0, [pc, #136]	; (40255c <spi_flash_enable+0xc8>)
  4024d2:	4d21      	ldr	r5, [pc, #132]	; (402558 <spi_flash_enable+0xc4>)
  4024d4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  4024d6:	21ab      	movs	r1, #171	; 0xab
  4024d8:	4821      	ldr	r0, [pc, #132]	; (402560 <spi_flash_enable+0xcc>)
  4024da:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4024dc:	2101      	movs	r1, #1
  4024de:	4821      	ldr	r0, [pc, #132]	; (402564 <spi_flash_enable+0xd0>)
  4024e0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4024e2:	2100      	movs	r1, #0
  4024e4:	4820      	ldr	r0, [pc, #128]	; (402568 <spi_flash_enable+0xd4>)
  4024e6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  4024e8:	2181      	movs	r1, #129	; 0x81
  4024ea:	4820      	ldr	r0, [pc, #128]	; (40256c <spi_flash_enable+0xd8>)
  4024ec:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4024ee:	4e20      	ldr	r6, [pc, #128]	; (402570 <spi_flash_enable+0xdc>)
  4024f0:	4d20      	ldr	r5, [pc, #128]	; (402574 <spi_flash_enable+0xe0>)
  4024f2:	4630      	mov	r0, r6
  4024f4:	47a8      	blx	r5
  4024f6:	2801      	cmp	r0, #1
  4024f8:	d1fb      	bne.n	4024f2 <spi_flash_enable+0x5e>
  4024fa:	e015      	b.n	402528 <spi_flash_enable+0x94>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4024fc:	2100      	movs	r1, #0
  4024fe:	4817      	ldr	r0, [pc, #92]	; (40255c <spi_flash_enable+0xc8>)
  402500:	4d15      	ldr	r5, [pc, #84]	; (402558 <spi_flash_enable+0xc4>)
  402502:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  402504:	21b9      	movs	r1, #185	; 0xb9
  402506:	4816      	ldr	r0, [pc, #88]	; (402560 <spi_flash_enable+0xcc>)
  402508:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  40250a:	2101      	movs	r1, #1
  40250c:	4815      	ldr	r0, [pc, #84]	; (402564 <spi_flash_enable+0xd0>)
  40250e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  402510:	2100      	movs	r1, #0
  402512:	4815      	ldr	r0, [pc, #84]	; (402568 <spi_flash_enable+0xd4>)
  402514:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  402516:	2181      	movs	r1, #129	; 0x81
  402518:	4814      	ldr	r0, [pc, #80]	; (40256c <spi_flash_enable+0xd8>)
  40251a:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  40251c:	4e14      	ldr	r6, [pc, #80]	; (402570 <spi_flash_enable+0xdc>)
  40251e:	4d15      	ldr	r5, [pc, #84]	; (402574 <spi_flash_enable+0xe0>)
  402520:	4630      	mov	r0, r6
  402522:	47a8      	blx	r5
  402524:	2801      	cmp	r0, #1
  402526:	d1fb      	bne.n	402520 <spi_flash_enable+0x8c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  402528:	4909      	ldr	r1, [pc, #36]	; (402550 <spi_flash_enable+0xbc>)
  40252a:	9b01      	ldr	r3, [sp, #4]
  40252c:	4019      	ands	r1, r3
  40252e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402532:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  402534:	f241 4010 	movw	r0, #5136	; 0x1410
  402538:	4b07      	ldr	r3, [pc, #28]	; (402558 <spi_flash_enable+0xc4>)
  40253a:	4798      	blx	r3
  40253c:	e000      	b.n	402540 <spi_flash_enable+0xac>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  40253e:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  402540:	4620      	mov	r0, r4
  402542:	b002      	add	sp, #8
  402544:	bd70      	pop	{r4, r5, r6, pc}
  402546:	bf00      	nop
  402548:	004015b5 	.word	0x004015b5
  40254c:	004018ad 	.word	0x004018ad
  402550:	f8888fff 	.word	0xf8888fff
  402554:	01111000 	.word	0x01111000
  402558:	004018b9 	.word	0x004018b9
  40255c:	00010208 	.word	0x00010208
  402560:	0001020c 	.word	0x0001020c
  402564:	00010214 	.word	0x00010214
  402568:	0001021c 	.word	0x0001021c
  40256c:	00010204 	.word	0x00010204
  402570:	00010218 	.word	0x00010218
  402574:	004018a1 	.word	0x004018a1

00402578 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402578:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40257a:	4810      	ldr	r0, [pc, #64]	; (4025bc <sysclk_init+0x44>)
  40257c:	4b10      	ldr	r3, [pc, #64]	; (4025c0 <sysclk_init+0x48>)
  40257e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402580:	213e      	movs	r1, #62	; 0x3e
  402582:	2000      	movs	r0, #0
  402584:	4b0f      	ldr	r3, [pc, #60]	; (4025c4 <sysclk_init+0x4c>)
  402586:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402588:	4c0f      	ldr	r4, [pc, #60]	; (4025c8 <sysclk_init+0x50>)
  40258a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40258c:	2800      	cmp	r0, #0
  40258e:	d0fc      	beq.n	40258a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402590:	4b0e      	ldr	r3, [pc, #56]	; (4025cc <sysclk_init+0x54>)
  402592:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402594:	4a0e      	ldr	r2, [pc, #56]	; (4025d0 <sysclk_init+0x58>)
  402596:	4b0f      	ldr	r3, [pc, #60]	; (4025d4 <sysclk_init+0x5c>)
  402598:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40259a:	4c0f      	ldr	r4, [pc, #60]	; (4025d8 <sysclk_init+0x60>)
  40259c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40259e:	2800      	cmp	r0, #0
  4025a0:	d0fc      	beq.n	40259c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4025a2:	2002      	movs	r0, #2
  4025a4:	4b0d      	ldr	r3, [pc, #52]	; (4025dc <sysclk_init+0x64>)
  4025a6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4025a8:	2000      	movs	r0, #0
  4025aa:	4b0d      	ldr	r3, [pc, #52]	; (4025e0 <sysclk_init+0x68>)
  4025ac:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4025ae:	4b0d      	ldr	r3, [pc, #52]	; (4025e4 <sysclk_init+0x6c>)
  4025b0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4025b2:	4802      	ldr	r0, [pc, #8]	; (4025bc <sysclk_init+0x44>)
  4025b4:	4b02      	ldr	r3, [pc, #8]	; (4025c0 <sysclk_init+0x48>)
  4025b6:	4798      	blx	r3
  4025b8:	bd10      	pop	{r4, pc}
  4025ba:	bf00      	nop
  4025bc:	11e1a300 	.word	0x11e1a300
  4025c0:	00403215 	.word	0x00403215
  4025c4:	00402cb9 	.word	0x00402cb9
  4025c8:	00402d0d 	.word	0x00402d0d
  4025cc:	00402d1d 	.word	0x00402d1d
  4025d0:	20183f01 	.word	0x20183f01
  4025d4:	400e0600 	.word	0x400e0600
  4025d8:	00402d2d 	.word	0x00402d2d
  4025dc:	00402c15 	.word	0x00402c15
  4025e0:	00402c51 	.word	0x00402c51
  4025e4:	00403105 	.word	0x00403105

004025e8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  4025e8:	b990      	cbnz	r0, 402610 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4025ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025ee:	460c      	mov	r4, r1
  4025f0:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4025f2:	2a00      	cmp	r2, #0
  4025f4:	dd0f      	ble.n	402616 <_read+0x2e>
  4025f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4025f8:	4e08      	ldr	r6, [pc, #32]	; (40261c <_read+0x34>)
  4025fa:	4d09      	ldr	r5, [pc, #36]	; (402620 <_read+0x38>)
  4025fc:	6830      	ldr	r0, [r6, #0]
  4025fe:	4621      	mov	r1, r4
  402600:	682b      	ldr	r3, [r5, #0]
  402602:	4798      	blx	r3
		ptr++;
  402604:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402606:	42a7      	cmp	r7, r4
  402608:	d1f8      	bne.n	4025fc <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40260a:	4640      	mov	r0, r8
  40260c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  402610:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  402614:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  402616:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  402618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40261c:	20400998 	.word	0x20400998
  402620:	20400990 	.word	0x20400990

00402624 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  402624:	3801      	subs	r0, #1
  402626:	2802      	cmp	r0, #2
  402628:	d815      	bhi.n	402656 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40262a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40262e:	460e      	mov	r6, r1
  402630:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  402632:	b19a      	cbz	r2, 40265c <_write+0x38>
  402634:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  402636:	f8df 8038 	ldr.w	r8, [pc, #56]	; 402670 <_write+0x4c>
  40263a:	4f0c      	ldr	r7, [pc, #48]	; (40266c <_write+0x48>)
  40263c:	f8d8 0000 	ldr.w	r0, [r8]
  402640:	f815 1b01 	ldrb.w	r1, [r5], #1
  402644:	683b      	ldr	r3, [r7, #0]
  402646:	4798      	blx	r3
  402648:	2800      	cmp	r0, #0
  40264a:	db0a      	blt.n	402662 <_write+0x3e>
  40264c:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40264e:	3c01      	subs	r4, #1
  402650:	d1f4      	bne.n	40263c <_write+0x18>
  402652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  402656:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40265a:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40265c:	2000      	movs	r0, #0
  40265e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  402662:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  402666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40266a:	bf00      	nop
  40266c:	20400994 	.word	0x20400994
  402670:	20400998 	.word	0x20400998

00402674 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  402674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402676:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40267a:	4b57      	ldr	r3, [pc, #348]	; (4027d8 <board_init+0x164>)
  40267c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40267e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402682:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402686:	4b55      	ldr	r3, [pc, #340]	; (4027dc <board_init+0x168>)
  402688:	2200      	movs	r2, #0
  40268a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40268e:	695a      	ldr	r2, [r3, #20]
  402690:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  402694:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402696:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40269a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40269e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4026a2:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4026a6:	f006 0707 	and.w	r7, r6, #7
  4026aa:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4026ac:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4026b0:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  4026b4:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4026b8:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4026bc:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4026be:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4026c0:	fa05 f107 	lsl.w	r1, r5, r7
  4026c4:	fa03 f200 	lsl.w	r2, r3, r0
  4026c8:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  4026ca:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  4026ce:	3b01      	subs	r3, #1
  4026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4026d4:	d1f6      	bne.n	4026c4 <board_init+0x50>
        } while(sets--);
  4026d6:	3d01      	subs	r5, #1
  4026d8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4026dc:	d1ef      	bne.n	4026be <board_init+0x4a>
  4026de:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4026e2:	4b3e      	ldr	r3, [pc, #248]	; (4027dc <board_init+0x168>)
  4026e4:	695a      	ldr	r2, [r3, #20]
  4026e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4026ea:	615a      	str	r2, [r3, #20]
  4026ec:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4026f0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026f4:	4a3a      	ldr	r2, [pc, #232]	; (4027e0 <board_init+0x16c>)
  4026f6:	493b      	ldr	r1, [pc, #236]	; (4027e4 <board_init+0x170>)
  4026f8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4026fa:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4026fe:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402700:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402704:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402708:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40270c:	f022 0201 	bic.w	r2, r2, #1
  402710:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402714:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  402718:	f022 0201 	bic.w	r2, r2, #1
  40271c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402720:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402724:	f3bf 8f6f 	isb	sy
  402728:	200a      	movs	r0, #10
  40272a:	4c2f      	ldr	r4, [pc, #188]	; (4027e8 <board_init+0x174>)
  40272c:	47a0      	blx	r4
  40272e:	200b      	movs	r0, #11
  402730:	47a0      	blx	r4
  402732:	200c      	movs	r0, #12
  402734:	47a0      	blx	r4
  402736:	2010      	movs	r0, #16
  402738:	47a0      	blx	r4
  40273a:	2011      	movs	r0, #17
  40273c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40273e:	4b2b      	ldr	r3, [pc, #172]	; (4027ec <board_init+0x178>)
  402740:	f44f 7280 	mov.w	r2, #256	; 0x100
  402744:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402746:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40274a:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40274c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  402750:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402754:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402756:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40275a:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40275c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402760:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  402762:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402768:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40276a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40276e:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402770:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402772:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  402776:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402778:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40277c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402780:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402784:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402788:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40278a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40278e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402790:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402796:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402798:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40279c:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40279e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4027a0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4027a4:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4027a6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4027a8:	4a11      	ldr	r2, [pc, #68]	; (4027f0 <board_init+0x17c>)
  4027aa:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4027ae:	f043 0310 	orr.w	r3, r3, #16
  4027b2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4027b6:	4b0f      	ldr	r3, [pc, #60]	; (4027f4 <board_init+0x180>)
  4027b8:	2210      	movs	r2, #16
  4027ba:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4027bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4027c0:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4027c2:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4027c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4027c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4027ca:	4311      	orrs	r1, r2
  4027cc:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4027ce:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4027d0:	4311      	orrs	r1, r2
  4027d2:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4027d4:	605a      	str	r2, [r3, #4]
  4027d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027d8:	400e1850 	.word	0x400e1850
  4027dc:	e000ed00 	.word	0xe000ed00
  4027e0:	400e0c00 	.word	0x400e0c00
  4027e4:	5a00080c 	.word	0x5a00080c
  4027e8:	00402d3d 	.word	0x00402d3d
  4027ec:	400e1200 	.word	0x400e1200
  4027f0:	40088000 	.word	0x40088000
  4027f4:	400e1000 	.word	0x400e1000

004027f8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4027f8:	b10a      	cbz	r2, 4027fe <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4027fa:	6641      	str	r1, [r0, #100]	; 0x64
  4027fc:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4027fe:	6601      	str	r1, [r0, #96]	; 0x60
  402800:	4770      	bx	lr
  402802:	bf00      	nop

00402804 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402804:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402806:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40280a:	d02f      	beq.n	40286c <pio_set_peripheral+0x68>
  40280c:	d807      	bhi.n	40281e <pio_set_peripheral+0x1a>
  40280e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402812:	d014      	beq.n	40283e <pio_set_peripheral+0x3a>
  402814:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402818:	d01e      	beq.n	402858 <pio_set_peripheral+0x54>
  40281a:	b939      	cbnz	r1, 40282c <pio_set_peripheral+0x28>
  40281c:	4770      	bx	lr
  40281e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402822:	d037      	beq.n	402894 <pio_set_peripheral+0x90>
  402824:	d804      	bhi.n	402830 <pio_set_peripheral+0x2c>
  402826:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40282a:	d029      	beq.n	402880 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40282c:	6042      	str	r2, [r0, #4]
  40282e:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402830:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402834:	d02e      	beq.n	402894 <pio_set_peripheral+0x90>
  402836:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40283a:	d02b      	beq.n	402894 <pio_set_peripheral+0x90>
  40283c:	e7f6      	b.n	40282c <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40283e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402840:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402842:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402844:	43d3      	mvns	r3, r2
  402846:	4021      	ands	r1, r4
  402848:	4019      	ands	r1, r3
  40284a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40284c:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40284e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402850:	4021      	ands	r1, r4
  402852:	400b      	ands	r3, r1
  402854:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402856:	e01a      	b.n	40288e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402858:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40285a:	4313      	orrs	r3, r2
  40285c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40285e:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402860:	6f43      	ldr	r3, [r0, #116]	; 0x74
  402862:	400b      	ands	r3, r1
  402864:	ea23 0302 	bic.w	r3, r3, r2
  402868:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40286a:	e7df      	b.n	40282c <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40286c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40286e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  402870:	400b      	ands	r3, r1
  402872:	ea23 0302 	bic.w	r3, r3, r2
  402876:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402878:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40287a:	4313      	orrs	r3, r2
  40287c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40287e:	e7d5      	b.n	40282c <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402880:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402882:	4313      	orrs	r3, r2
  402884:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402886:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402888:	4313      	orrs	r3, r2
  40288a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40288c:	e7ce      	b.n	40282c <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40288e:	6042      	str	r2, [r0, #4]
}
  402890:	f85d 4b04 	ldr.w	r4, [sp], #4
  402894:	4770      	bx	lr
  402896:	bf00      	nop

00402898 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402898:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40289a:	f012 0f01 	tst.w	r2, #1
  40289e:	d001      	beq.n	4028a4 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  4028a0:	6641      	str	r1, [r0, #100]	; 0x64
  4028a2:	e000      	b.n	4028a6 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4028a4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4028a6:	f012 0f0a 	tst.w	r2, #10
  4028aa:	d001      	beq.n	4028b0 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  4028ac:	6201      	str	r1, [r0, #32]
  4028ae:	e000      	b.n	4028b2 <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4028b0:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4028b2:	f012 0f02 	tst.w	r2, #2
  4028b6:	d002      	beq.n	4028be <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  4028b8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4028bc:	e004      	b.n	4028c8 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4028be:	f012 0f08 	tst.w	r2, #8
  4028c2:	d001      	beq.n	4028c8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4028c4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4028c8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4028ca:	6001      	str	r1, [r0, #0]
  4028cc:	4770      	bx	lr
  4028ce:	bf00      	nop

004028d0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4028d0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4028d2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4028d4:	9c01      	ldr	r4, [sp, #4]
  4028d6:	b10c      	cbz	r4, 4028dc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4028d8:	6641      	str	r1, [r0, #100]	; 0x64
  4028da:	e000      	b.n	4028de <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4028dc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4028de:	b10b      	cbz	r3, 4028e4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4028e0:	6501      	str	r1, [r0, #80]	; 0x50
  4028e2:	e000      	b.n	4028e6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4028e4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4028e6:	b10a      	cbz	r2, 4028ec <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4028e8:	6301      	str	r1, [r0, #48]	; 0x30
  4028ea:	e000      	b.n	4028ee <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4028ec:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4028ee:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4028f0:	6001      	str	r1, [r0, #0]
}
  4028f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028f6:	4770      	bx	lr

004028f8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4028f8:	f012 0f10 	tst.w	r2, #16
  4028fc:	d012      	beq.n	402924 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4028fe:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402902:	f012 0f20 	tst.w	r2, #32
  402906:	d002      	beq.n	40290e <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402908:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  40290c:	e001      	b.n	402912 <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40290e:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402912:	f012 0f40 	tst.w	r2, #64	; 0x40
  402916:	d002      	beq.n	40291e <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402918:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40291c:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40291e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  402922:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402924:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402928:	4770      	bx	lr
  40292a:	bf00      	nop

0040292c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  40292c:	6401      	str	r1, [r0, #64]	; 0x40
  40292e:	4770      	bx	lr

00402930 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402930:	6441      	str	r1, [r0, #68]	; 0x44
  402932:	4770      	bx	lr

00402934 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402934:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402936:	4770      	bx	lr

00402938 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402938:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40293a:	4770      	bx	lr

0040293c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40293c:	b570      	push	{r4, r5, r6, lr}
  40293e:	b082      	sub	sp, #8
  402940:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402942:	4c47      	ldr	r4, [pc, #284]	; (402a60 <pio_configure_pin+0x124>)
  402944:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  402948:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40294a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40294e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402952:	d04d      	beq.n	4029f0 <pio_configure_pin+0xb4>
  402954:	d809      	bhi.n	40296a <pio_configure_pin+0x2e>
  402956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40295a:	d023      	beq.n	4029a4 <pio_configure_pin+0x68>
  40295c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402960:	d033      	beq.n	4029ca <pio_configure_pin+0x8e>
  402962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402966:	d177      	bne.n	402a58 <pio_configure_pin+0x11c>
  402968:	e009      	b.n	40297e <pio_configure_pin+0x42>
  40296a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40296e:	d05d      	beq.n	402a2c <pio_configure_pin+0xf0>
  402970:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402974:	d05a      	beq.n	402a2c <pio_configure_pin+0xf0>
  402976:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40297a:	d04c      	beq.n	402a16 <pio_configure_pin+0xda>
  40297c:	e06c      	b.n	402a58 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40297e:	f000 001f 	and.w	r0, r0, #31
  402982:	2601      	movs	r6, #1
  402984:	4086      	lsls	r6, r0
  402986:	4632      	mov	r2, r6
  402988:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40298c:	4620      	mov	r0, r4
  40298e:	4b35      	ldr	r3, [pc, #212]	; (402a64 <pio_configure_pin+0x128>)
  402990:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402992:	f015 0f01 	tst.w	r5, #1
  402996:	d002      	beq.n	40299e <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  402998:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  40299a:	2001      	movs	r0, #1
  40299c:	e05d      	b.n	402a5a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40299e:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4029a0:	2001      	movs	r0, #1
  4029a2:	e05a      	b.n	402a5a <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4029a4:	f000 001f 	and.w	r0, r0, #31
  4029a8:	2601      	movs	r6, #1
  4029aa:	4086      	lsls	r6, r0
  4029ac:	4632      	mov	r2, r6
  4029ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4029b2:	4620      	mov	r0, r4
  4029b4:	4b2b      	ldr	r3, [pc, #172]	; (402a64 <pio_configure_pin+0x128>)
  4029b6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4029b8:	f015 0f01 	tst.w	r5, #1
  4029bc:	d002      	beq.n	4029c4 <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  4029be:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4029c0:	2001      	movs	r0, #1
  4029c2:	e04a      	b.n	402a5a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4029c4:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4029c6:	2001      	movs	r0, #1
  4029c8:	e047      	b.n	402a5a <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4029ca:	f000 001f 	and.w	r0, r0, #31
  4029ce:	2601      	movs	r6, #1
  4029d0:	4086      	lsls	r6, r0
  4029d2:	4632      	mov	r2, r6
  4029d4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4029d8:	4620      	mov	r0, r4
  4029da:	4b22      	ldr	r3, [pc, #136]	; (402a64 <pio_configure_pin+0x128>)
  4029dc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4029de:	f015 0f01 	tst.w	r5, #1
  4029e2:	d002      	beq.n	4029ea <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  4029e4:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4029e6:	2001      	movs	r0, #1
  4029e8:	e037      	b.n	402a5a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4029ea:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4029ec:	2001      	movs	r0, #1
  4029ee:	e034      	b.n	402a5a <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4029f0:	f000 001f 	and.w	r0, r0, #31
  4029f4:	2601      	movs	r6, #1
  4029f6:	4086      	lsls	r6, r0
  4029f8:	4632      	mov	r2, r6
  4029fa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4029fe:	4620      	mov	r0, r4
  402a00:	4b18      	ldr	r3, [pc, #96]	; (402a64 <pio_configure_pin+0x128>)
  402a02:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402a04:	f015 0f01 	tst.w	r5, #1
  402a08:	d002      	beq.n	402a10 <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  402a0a:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  402a0c:	2001      	movs	r0, #1
  402a0e:	e024      	b.n	402a5a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402a10:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402a12:	2001      	movs	r0, #1
  402a14:	e021      	b.n	402a5a <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402a16:	f000 011f 	and.w	r1, r0, #31
  402a1a:	2601      	movs	r6, #1
  402a1c:	462a      	mov	r2, r5
  402a1e:	fa06 f101 	lsl.w	r1, r6, r1
  402a22:	4620      	mov	r0, r4
  402a24:	4b10      	ldr	r3, [pc, #64]	; (402a68 <pio_configure_pin+0x12c>)
  402a26:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402a28:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  402a2a:	e016      	b.n	402a5a <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402a2c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  402a30:	f000 011f 	and.w	r1, r0, #31
  402a34:	2601      	movs	r6, #1
  402a36:	ea05 0306 	and.w	r3, r5, r6
  402a3a:	9300      	str	r3, [sp, #0]
  402a3c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402a40:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402a44:	bf14      	ite	ne
  402a46:	2200      	movne	r2, #0
  402a48:	2201      	moveq	r2, #1
  402a4a:	fa06 f101 	lsl.w	r1, r6, r1
  402a4e:	4620      	mov	r0, r4
  402a50:	4c06      	ldr	r4, [pc, #24]	; (402a6c <pio_configure_pin+0x130>)
  402a52:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  402a54:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  402a56:	e000      	b.n	402a5a <pio_configure_pin+0x11e>

	default:
		return 0;
  402a58:	2000      	movs	r0, #0
	}

	return 1;
}
  402a5a:	b002      	add	sp, #8
  402a5c:	bd70      	pop	{r4, r5, r6, pc}
  402a5e:	bf00      	nop
  402a60:	00200707 	.word	0x00200707
  402a64:	00402805 	.word	0x00402805
  402a68:	00402899 	.word	0x00402899
  402a6c:	004028d1 	.word	0x004028d1

00402a70 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a74:	4604      	mov	r4, r0
  402a76:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402a78:	4b0e      	ldr	r3, [pc, #56]	; (402ab4 <pio_handler_process+0x44>)
  402a7a:	4798      	blx	r3
  402a7c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402a7e:	4620      	mov	r0, r4
  402a80:	4b0d      	ldr	r3, [pc, #52]	; (402ab8 <pio_handler_process+0x48>)
  402a82:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402a84:	4005      	ands	r5, r0
  402a86:	d013      	beq.n	402ab0 <pio_handler_process+0x40>
  402a88:	4c0c      	ldr	r4, [pc, #48]	; (402abc <pio_handler_process+0x4c>)
  402a8a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402a8e:	6823      	ldr	r3, [r4, #0]
  402a90:	4543      	cmp	r3, r8
  402a92:	d108      	bne.n	402aa6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402a94:	6861      	ldr	r1, [r4, #4]
  402a96:	4229      	tst	r1, r5
  402a98:	d005      	beq.n	402aa6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402a9a:	68e3      	ldr	r3, [r4, #12]
  402a9c:	4640      	mov	r0, r8
  402a9e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402aa0:	6863      	ldr	r3, [r4, #4]
  402aa2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  402aa6:	42b4      	cmp	r4, r6
  402aa8:	d002      	beq.n	402ab0 <pio_handler_process+0x40>
  402aaa:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  402aac:	2d00      	cmp	r5, #0
  402aae:	d1ee      	bne.n	402a8e <pio_handler_process+0x1e>
  402ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ab4:	00402935 	.word	0x00402935
  402ab8:	00402939 	.word	0x00402939
  402abc:	204008e0 	.word	0x204008e0

00402ac0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  402ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  402ac2:	4c17      	ldr	r4, [pc, #92]	; (402b20 <pio_handler_set+0x60>)
  402ac4:	6826      	ldr	r6, [r4, #0]
  402ac6:	2e06      	cmp	r6, #6
  402ac8:	d828      	bhi.n	402b1c <pio_handler_set+0x5c>
  402aca:	f04f 0c00 	mov.w	ip, #0
  402ace:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402ad0:	4f14      	ldr	r7, [pc, #80]	; (402b24 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  402ad2:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402ad4:	0125      	lsls	r5, r4, #4
  402ad6:	597d      	ldr	r5, [r7, r5]
  402ad8:	428d      	cmp	r5, r1
  402ada:	d104      	bne.n	402ae6 <pio_handler_set+0x26>
  402adc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  402ae0:	686d      	ldr	r5, [r5, #4]
  402ae2:	4295      	cmp	r5, r2
  402ae4:	d004      	beq.n	402af0 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402ae6:	3401      	adds	r4, #1
  402ae8:	b2e4      	uxtb	r4, r4
  402aea:	46a4      	mov	ip, r4
  402aec:	42a6      	cmp	r6, r4
  402aee:	d2f0      	bcs.n	402ad2 <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  402af0:	4d0c      	ldr	r5, [pc, #48]	; (402b24 <pio_handler_set+0x64>)
  402af2:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  402af6:	eb05 040e 	add.w	r4, r5, lr
  402afa:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  402afe:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  402b00:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  402b02:	9906      	ldr	r1, [sp, #24]
  402b04:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  402b06:	3601      	adds	r6, #1
  402b08:	4566      	cmp	r6, ip
  402b0a:	d101      	bne.n	402b10 <pio_handler_set+0x50>
		gs_ul_nb_sources++;
  402b0c:	4904      	ldr	r1, [pc, #16]	; (402b20 <pio_handler_set+0x60>)
  402b0e:	600e      	str	r6, [r1, #0]
  402b10:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402b12:	461a      	mov	r2, r3
  402b14:	4b04      	ldr	r3, [pc, #16]	; (402b28 <pio_handler_set+0x68>)
  402b16:	4798      	blx	r3

	return 0;
  402b18:	2000      	movs	r0, #0
  402b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  402b1c:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  402b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b20:	204008dc 	.word	0x204008dc
  402b24:	204008e0 	.word	0x204008e0
  402b28:	004028f9 	.word	0x004028f9

00402b2c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402b2c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  402b2e:	210a      	movs	r1, #10
  402b30:	4801      	ldr	r0, [pc, #4]	; (402b38 <PIOA_Handler+0xc>)
  402b32:	4b02      	ldr	r3, [pc, #8]	; (402b3c <PIOA_Handler+0x10>)
  402b34:	4798      	blx	r3
  402b36:	bd08      	pop	{r3, pc}
  402b38:	400e0e00 	.word	0x400e0e00
  402b3c:	00402a71 	.word	0x00402a71

00402b40 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402b40:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402b42:	210b      	movs	r1, #11
  402b44:	4801      	ldr	r0, [pc, #4]	; (402b4c <PIOB_Handler+0xc>)
  402b46:	4b02      	ldr	r3, [pc, #8]	; (402b50 <PIOB_Handler+0x10>)
  402b48:	4798      	blx	r3
  402b4a:	bd08      	pop	{r3, pc}
  402b4c:	400e1000 	.word	0x400e1000
  402b50:	00402a71 	.word	0x00402a71

00402b54 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402b54:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  402b56:	210c      	movs	r1, #12
  402b58:	4801      	ldr	r0, [pc, #4]	; (402b60 <PIOC_Handler+0xc>)
  402b5a:	4b02      	ldr	r3, [pc, #8]	; (402b64 <PIOC_Handler+0x10>)
  402b5c:	4798      	blx	r3
  402b5e:	bd08      	pop	{r3, pc}
  402b60:	400e1200 	.word	0x400e1200
  402b64:	00402a71 	.word	0x00402a71

00402b68 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402b68:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  402b6a:	2110      	movs	r1, #16
  402b6c:	4801      	ldr	r0, [pc, #4]	; (402b74 <PIOD_Handler+0xc>)
  402b6e:	4b02      	ldr	r3, [pc, #8]	; (402b78 <PIOD_Handler+0x10>)
  402b70:	4798      	blx	r3
  402b72:	bd08      	pop	{r3, pc}
  402b74:	400e1400 	.word	0x400e1400
  402b78:	00402a71 	.word	0x00402a71

00402b7c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  402b7c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  402b7e:	2111      	movs	r1, #17
  402b80:	4801      	ldr	r0, [pc, #4]	; (402b88 <PIOE_Handler+0xc>)
  402b82:	4b02      	ldr	r3, [pc, #8]	; (402b8c <PIOE_Handler+0x10>)
  402b84:	4798      	blx	r3
  402b86:	bd08      	pop	{r3, pc}
  402b88:	400e1600 	.word	0x400e1600
  402b8c:	00402a71 	.word	0x00402a71

00402b90 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  402b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b92:	4606      	mov	r6, r0
  402b94:	460d      	mov	r5, r1
  402b96:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  402b98:	4b17      	ldr	r3, [pc, #92]	; (402bf8 <pio_handler_set_priority+0x68>)
  402b9a:	4798      	blx	r3
  402b9c:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  402b9e:	f04f 31ff 	mov.w	r1, #4294967295
  402ba2:	4630      	mov	r0, r6
  402ba4:	4b15      	ldr	r3, [pc, #84]	; (402bfc <pio_handler_set_priority+0x6c>)
  402ba6:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  402ba8:	4630      	mov	r0, r6
  402baa:	4b15      	ldr	r3, [pc, #84]	; (402c00 <pio_handler_set_priority+0x70>)
  402bac:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402bae:	fa5f fe85 	uxtb.w	lr, r5
  402bb2:	f00e 031f 	and.w	r3, lr, #31
  402bb6:	2201      	movs	r2, #1
  402bb8:	fa02 f303 	lsl.w	r3, r2, r3
  402bbc:	0968      	lsrs	r0, r5, #5
  402bbe:	4911      	ldr	r1, [pc, #68]	; (402c04 <pio_handler_set_priority+0x74>)
  402bc0:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  402bc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402bc8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  402bcc:	2d00      	cmp	r5, #0
  402bce:	da07      	bge.n	402be0 <pio_handler_set_priority+0x50>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402bd0:	f00e 0e0f 	and.w	lr, lr, #15
  402bd4:	0164      	lsls	r4, r4, #5
  402bd6:	b2e4      	uxtb	r4, r4
  402bd8:	4a0b      	ldr	r2, [pc, #44]	; (402c08 <pio_handler_set_priority+0x78>)
  402bda:	f802 400e 	strb.w	r4, [r2, lr]
  402bde:	e003      	b.n	402be8 <pio_handler_set_priority+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402be0:	0164      	lsls	r4, r4, #5
  402be2:	b2e4      	uxtb	r4, r4
  402be4:	4a09      	ldr	r2, [pc, #36]	; (402c0c <pio_handler_set_priority+0x7c>)
  402be6:	5554      	strb	r4, [r2, r5]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402be8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  402bec:	4639      	mov	r1, r7
  402bee:	4630      	mov	r0, r6
  402bf0:	4b07      	ldr	r3, [pc, #28]	; (402c10 <pio_handler_set_priority+0x80>)
  402bf2:	4798      	blx	r3
  402bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402bf6:	bf00      	nop
  402bf8:	00402939 	.word	0x00402939
  402bfc:	00402931 	.word	0x00402931
  402c00:	00402935 	.word	0x00402935
  402c04:	e000e100 	.word	0xe000e100
  402c08:	e000ed14 	.word	0xe000ed14
  402c0c:	e000e400 	.word	0xe000e400
  402c10:	0040292d 	.word	0x0040292d

00402c14 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  402c14:	2803      	cmp	r0, #3
  402c16:	d007      	beq.n	402c28 <pmc_mck_set_division+0x14>
  402c18:	2804      	cmp	r0, #4
  402c1a:	d008      	beq.n	402c2e <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402c1c:	2802      	cmp	r0, #2
  402c1e:	bf0c      	ite	eq
  402c20:	f44f 7280 	moveq.w	r2, #256	; 0x100
  402c24:	2200      	movne	r2, #0
  402c26:	e004      	b.n	402c32 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402c28:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  402c2c:	e001      	b.n	402c32 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402c32:	4906      	ldr	r1, [pc, #24]	; (402c4c <pmc_mck_set_division+0x38>)
  402c34:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402c3a:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  402c3c:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402c3e:	460a      	mov	r2, r1
  402c40:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402c42:	f013 0f08 	tst.w	r3, #8
  402c46:	d0fb      	beq.n	402c40 <pmc_mck_set_division+0x2c>
}
  402c48:	4770      	bx	lr
  402c4a:	bf00      	nop
  402c4c:	400e0600 	.word	0x400e0600

00402c50 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402c50:	4a18      	ldr	r2, [pc, #96]	; (402cb4 <pmc_switch_mck_to_pllack+0x64>)
  402c52:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402c58:	4318      	orrs	r0, r3
  402c5a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402c5c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402c5e:	f013 0f08 	tst.w	r3, #8
  402c62:	d003      	beq.n	402c6c <pmc_switch_mck_to_pllack+0x1c>
  402c64:	e009      	b.n	402c7a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402c66:	3b01      	subs	r3, #1
  402c68:	d103      	bne.n	402c72 <pmc_switch_mck_to_pllack+0x22>
  402c6a:	e01e      	b.n	402caa <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402c70:	4910      	ldr	r1, [pc, #64]	; (402cb4 <pmc_switch_mck_to_pllack+0x64>)
  402c72:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402c74:	f012 0f08 	tst.w	r2, #8
  402c78:	d0f5      	beq.n	402c66 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402c7a:	4a0e      	ldr	r2, [pc, #56]	; (402cb4 <pmc_switch_mck_to_pllack+0x64>)
  402c7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402c7e:	f023 0303 	bic.w	r3, r3, #3
  402c82:	f043 0302 	orr.w	r3, r3, #2
  402c86:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402c88:	6e90      	ldr	r0, [r2, #104]	; 0x68
  402c8a:	f010 0008 	ands.w	r0, r0, #8
  402c8e:	d004      	beq.n	402c9a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402c90:	2000      	movs	r0, #0
  402c92:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402c94:	3b01      	subs	r3, #1
  402c96:	d103      	bne.n	402ca0 <pmc_switch_mck_to_pllack+0x50>
  402c98:	e009      	b.n	402cae <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402c9e:	4905      	ldr	r1, [pc, #20]	; (402cb4 <pmc_switch_mck_to_pllack+0x64>)
  402ca0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402ca2:	f012 0f08 	tst.w	r2, #8
  402ca6:	d0f5      	beq.n	402c94 <pmc_switch_mck_to_pllack+0x44>
  402ca8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402caa:	2001      	movs	r0, #1
  402cac:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402cae:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402cb0:	4770      	bx	lr
  402cb2:	bf00      	nop
  402cb4:	400e0600 	.word	0x400e0600

00402cb8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402cb8:	b138      	cbz	r0, 402cca <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402cba:	490e      	ldr	r1, [pc, #56]	; (402cf4 <pmc_switch_mainck_to_xtal+0x3c>)
  402cbc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402cbe:	4a0e      	ldr	r2, [pc, #56]	; (402cf8 <pmc_switch_mainck_to_xtal+0x40>)
  402cc0:	401a      	ands	r2, r3
  402cc2:	4b0e      	ldr	r3, [pc, #56]	; (402cfc <pmc_switch_mainck_to_xtal+0x44>)
  402cc4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402cc6:	620b      	str	r3, [r1, #32]
  402cc8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402cca:	480a      	ldr	r0, [pc, #40]	; (402cf4 <pmc_switch_mainck_to_xtal+0x3c>)
  402ccc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402cce:	0209      	lsls	r1, r1, #8
  402cd0:	b289      	uxth	r1, r1
  402cd2:	4a0b      	ldr	r2, [pc, #44]	; (402d00 <pmc_switch_mainck_to_xtal+0x48>)
  402cd4:	401a      	ands	r2, r3
  402cd6:	4b0b      	ldr	r3, [pc, #44]	; (402d04 <pmc_switch_mainck_to_xtal+0x4c>)
  402cd8:	4313      	orrs	r3, r2
  402cda:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402cdc:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402cde:	4602      	mov	r2, r0
  402ce0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402ce2:	f013 0f01 	tst.w	r3, #1
  402ce6:	d0fb      	beq.n	402ce0 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402ce8:	4a02      	ldr	r2, [pc, #8]	; (402cf4 <pmc_switch_mainck_to_xtal+0x3c>)
  402cea:	6a11      	ldr	r1, [r2, #32]
  402cec:	4b06      	ldr	r3, [pc, #24]	; (402d08 <pmc_switch_mainck_to_xtal+0x50>)
  402cee:	430b      	orrs	r3, r1
  402cf0:	6213      	str	r3, [r2, #32]
  402cf2:	4770      	bx	lr
  402cf4:	400e0600 	.word	0x400e0600
  402cf8:	fec8fffc 	.word	0xfec8fffc
  402cfc:	01370002 	.word	0x01370002
  402d00:	ffc8fffc 	.word	0xffc8fffc
  402d04:	00370001 	.word	0x00370001
  402d08:	01370000 	.word	0x01370000

00402d0c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402d0c:	4b02      	ldr	r3, [pc, #8]	; (402d18 <pmc_osc_is_ready_mainck+0xc>)
  402d0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402d10:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402d14:	4770      	bx	lr
  402d16:	bf00      	nop
  402d18:	400e0600 	.word	0x400e0600

00402d1c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402d1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402d20:	4b01      	ldr	r3, [pc, #4]	; (402d28 <pmc_disable_pllack+0xc>)
  402d22:	629a      	str	r2, [r3, #40]	; 0x28
  402d24:	4770      	bx	lr
  402d26:	bf00      	nop
  402d28:	400e0600 	.word	0x400e0600

00402d2c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402d2c:	4b02      	ldr	r3, [pc, #8]	; (402d38 <pmc_is_locked_pllack+0xc>)
  402d2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402d30:	f000 0002 	and.w	r0, r0, #2
  402d34:	4770      	bx	lr
  402d36:	bf00      	nop
  402d38:	400e0600 	.word	0x400e0600

00402d3c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402d3c:	283f      	cmp	r0, #63	; 0x3f
  402d3e:	d81e      	bhi.n	402d7e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402d40:	281f      	cmp	r0, #31
  402d42:	d80c      	bhi.n	402d5e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402d44:	4b11      	ldr	r3, [pc, #68]	; (402d8c <pmc_enable_periph_clk+0x50>)
  402d46:	699a      	ldr	r2, [r3, #24]
  402d48:	2301      	movs	r3, #1
  402d4a:	4083      	lsls	r3, r0
  402d4c:	4393      	bics	r3, r2
  402d4e:	d018      	beq.n	402d82 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402d50:	2301      	movs	r3, #1
  402d52:	fa03 f000 	lsl.w	r0, r3, r0
  402d56:	4b0d      	ldr	r3, [pc, #52]	; (402d8c <pmc_enable_periph_clk+0x50>)
  402d58:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402d5a:	2000      	movs	r0, #0
  402d5c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402d5e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402d60:	4b0a      	ldr	r3, [pc, #40]	; (402d8c <pmc_enable_periph_clk+0x50>)
  402d62:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402d66:	2301      	movs	r3, #1
  402d68:	4083      	lsls	r3, r0
  402d6a:	4393      	bics	r3, r2
  402d6c:	d00b      	beq.n	402d86 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402d6e:	2301      	movs	r3, #1
  402d70:	fa03 f000 	lsl.w	r0, r3, r0
  402d74:	4b05      	ldr	r3, [pc, #20]	; (402d8c <pmc_enable_periph_clk+0x50>)
  402d76:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  402d7a:	2000      	movs	r0, #0
  402d7c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402d7e:	2001      	movs	r0, #1
  402d80:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402d82:	2000      	movs	r0, #0
  402d84:	4770      	bx	lr
  402d86:	2000      	movs	r0, #0
}
  402d88:	4770      	bx	lr
  402d8a:	bf00      	nop
  402d8c:	400e0600 	.word	0x400e0600

00402d90 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  402d90:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  402d92:	4b07      	ldr	r3, [pc, #28]	; (402db0 <spi_enable_clock+0x20>)
  402d94:	4298      	cmp	r0, r3
  402d96:	d103      	bne.n	402da0 <spi_enable_clock+0x10>
  402d98:	2015      	movs	r0, #21
  402d9a:	4b06      	ldr	r3, [pc, #24]	; (402db4 <spi_enable_clock+0x24>)
  402d9c:	4798      	blx	r3
  402d9e:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  402da0:	4b05      	ldr	r3, [pc, #20]	; (402db8 <spi_enable_clock+0x28>)
  402da2:	4298      	cmp	r0, r3
  402da4:	d102      	bne.n	402dac <spi_enable_clock+0x1c>
  402da6:	202a      	movs	r0, #42	; 0x2a
  402da8:	4b02      	ldr	r3, [pc, #8]	; (402db4 <spi_enable_clock+0x24>)
  402daa:	4798      	blx	r3
  402dac:	bd08      	pop	{r3, pc}
  402dae:	bf00      	nop
  402db0:	40008000 	.word	0x40008000
  402db4:	00402d3d 	.word	0x00402d3d
  402db8:	40058000 	.word	0x40058000

00402dbc <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  402dbc:	6843      	ldr	r3, [r0, #4]
  402dbe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  402dc2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  402dc4:	6843      	ldr	r3, [r0, #4]
  402dc6:	0409      	lsls	r1, r1, #16
  402dc8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  402dcc:	430b      	orrs	r3, r1
  402dce:	6043      	str	r3, [r0, #4]
  402dd0:	4770      	bx	lr
  402dd2:	bf00      	nop

00402dd4 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  402dd4:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  402dd6:	f643 2399 	movw	r3, #15001	; 0x3a99
  402dda:	e001      	b.n	402de0 <spi_read+0xc>
		if (!timeout--) {
  402ddc:	3b01      	subs	r3, #1
  402dde:	d00e      	beq.n	402dfe <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  402de0:	6904      	ldr	r4, [r0, #16]
  402de2:	f014 0f01 	tst.w	r4, #1
  402de6:	d0f9      	beq.n	402ddc <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  402de8:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  402dea:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  402dec:	f010 0f02 	tst.w	r0, #2
  402df0:	d002      	beq.n	402df8 <spi_read+0x24>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  402df2:	f3c3 4003 	ubfx	r0, r3, #16, #4
  402df6:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  402df8:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  402dfa:	2000      	movs	r0, #0
  402dfc:	e000      	b.n	402e00 <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  402dfe:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  402e00:	f85d 4b04 	ldr.w	r4, [sp], #4
  402e04:	4770      	bx	lr
  402e06:	bf00      	nop

00402e08 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  402e08:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  402e0a:	f643 2499 	movw	r4, #15001	; 0x3a99
  402e0e:	e001      	b.n	402e14 <spi_write+0xc>
		if (!timeout--) {
  402e10:	3c01      	subs	r4, #1
  402e12:	d011      	beq.n	402e38 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  402e14:	6905      	ldr	r5, [r0, #16]
  402e16:	f015 0f02 	tst.w	r5, #2
  402e1a:	d0f9      	beq.n	402e10 <spi_write+0x8>
  402e1c:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  402e1e:	f014 0f02 	tst.w	r4, #2
  402e22:	d006      	beq.n	402e32 <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  402e24:	0412      	lsls	r2, r2, #16
  402e26:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  402e2a:	4311      	orrs	r1, r2
		if (uc_last) {
  402e2c:	b10b      	cbz	r3, 402e32 <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  402e2e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  402e32:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  402e34:	2000      	movs	r0, #0
  402e36:	e000      	b.n	402e3a <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  402e38:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  402e3a:	bc30      	pop	{r4, r5}
  402e3c:	4770      	bx	lr
  402e3e:	bf00      	nop

00402e40 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  402e40:	b132      	cbz	r2, 402e50 <spi_set_clock_polarity+0x10>
  402e42:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  402e46:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402e48:	f043 0301 	orr.w	r3, r3, #1
  402e4c:	6303      	str	r3, [r0, #48]	; 0x30
  402e4e:	4770      	bx	lr
  402e50:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  402e54:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402e56:	f023 0301 	bic.w	r3, r3, #1
  402e5a:	6303      	str	r3, [r0, #48]	; 0x30
  402e5c:	4770      	bx	lr
  402e5e:	bf00      	nop

00402e60 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  402e60:	b132      	cbz	r2, 402e70 <spi_set_clock_phase+0x10>
  402e62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  402e66:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402e68:	f043 0302 	orr.w	r3, r3, #2
  402e6c:	6303      	str	r3, [r0, #48]	; 0x30
  402e6e:	4770      	bx	lr
  402e70:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  402e74:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402e76:	f023 0302 	bic.w	r3, r3, #2
  402e7a:	6303      	str	r3, [r0, #48]	; 0x30
  402e7c:	4770      	bx	lr
  402e7e:	bf00      	nop

00402e80 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  402e80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  402e84:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  402e8a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  402e8c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402e8e:	431a      	orrs	r2, r3
  402e90:	630a      	str	r2, [r1, #48]	; 0x30
  402e92:	4770      	bx	lr

00402e94 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  402e94:	b16a      	cbz	r2, 402eb2 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  402e96:	b410      	push	{r4}
  402e98:	4614      	mov	r4, r2
  402e9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  402e9e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402ea0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  402ea4:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  402ea6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402ea8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  402eac:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  402eae:	2000      	movs	r0, #0
  402eb0:	e002      	b.n	402eb8 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  402eb2:	f04f 30ff 	mov.w	r0, #4294967295
  402eb6:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  402eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  402ebc:	4770      	bx	lr
  402ebe:	bf00      	nop

00402ec0 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  402ec0:	b410      	push	{r4}
  402ec2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  402ec6:	6b08      	ldr	r0, [r1, #48]	; 0x30
  402ec8:	b280      	uxth	r0, r0
  402eca:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  402ecc:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  402ece:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  402ed2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  402ed6:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  402ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
  402edc:	4770      	bx	lr
  402ede:	bf00      	nop

00402ee0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402ee0:	6943      	ldr	r3, [r0, #20]
  402ee2:	f013 0f02 	tst.w	r3, #2
  402ee6:	d002      	beq.n	402eee <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402ee8:	61c1      	str	r1, [r0, #28]
	return 0;
  402eea:	2000      	movs	r0, #0
  402eec:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402eee:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402ef0:	4770      	bx	lr
  402ef2:	bf00      	nop

00402ef4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402ef4:	6943      	ldr	r3, [r0, #20]
  402ef6:	f013 0f01 	tst.w	r3, #1
  402efa:	d003      	beq.n	402f04 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402efc:	6983      	ldr	r3, [r0, #24]
  402efe:	700b      	strb	r3, [r1, #0]
	return 0;
  402f00:	2000      	movs	r0, #0
  402f02:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402f04:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402f06:	4770      	bx	lr

00402f08 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  402f08:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402f0a:	010c      	lsls	r4, r1, #4
  402f0c:	4294      	cmp	r4, r2
  402f0e:	d90f      	bls.n	402f30 <usart_set_async_baudrate+0x28>
  402f10:	e01a      	b.n	402f48 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  402f12:	6841      	ldr	r1, [r0, #4]
  402f14:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  402f18:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402f1a:	0412      	lsls	r2, r2, #16
  402f1c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402f20:	431a      	orrs	r2, r3
  402f22:	6202      	str	r2, [r0, #32]

	return 0;
  402f24:	2000      	movs	r0, #0
  402f26:	e01c      	b.n	402f62 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  402f28:	2001      	movs	r0, #1
  402f2a:	e01a      	b.n	402f62 <usart_set_async_baudrate+0x5a>
  402f2c:	2001      	movs	r0, #1
  402f2e:	e018      	b.n	402f62 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402f30:	0863      	lsrs	r3, r4, #1
  402f32:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402f36:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  402f3a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402f3c:	1e5c      	subs	r4, r3, #1
  402f3e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402f42:	428c      	cmp	r4, r1
  402f44:	d9e9      	bls.n	402f1a <usart_set_async_baudrate+0x12>
  402f46:	e7ef      	b.n	402f28 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  402f48:	00c9      	lsls	r1, r1, #3
  402f4a:	084b      	lsrs	r3, r1, #1
  402f4c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402f50:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  402f54:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402f56:	1e5c      	subs	r4, r3, #1
  402f58:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  402f5c:	428c      	cmp	r4, r1
  402f5e:	d8e5      	bhi.n	402f2c <usart_set_async_baudrate+0x24>
  402f60:	e7d7      	b.n	402f12 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  402f62:	f85d 4b04 	ldr.w	r4, [sp], #4
  402f66:	4770      	bx	lr

00402f68 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402f68:	4b08      	ldr	r3, [pc, #32]	; (402f8c <usart_reset+0x24>)
  402f6a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  402f6e:	2300      	movs	r3, #0
  402f70:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  402f72:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402f74:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402f76:	2388      	movs	r3, #136	; 0x88
  402f78:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402f7a:	2324      	movs	r3, #36	; 0x24
  402f7c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  402f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
  402f82:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  402f84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402f88:	6003      	str	r3, [r0, #0]
  402f8a:	4770      	bx	lr
  402f8c:	55534100 	.word	0x55534100

00402f90 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  402f90:	b570      	push	{r4, r5, r6, lr}
  402f92:	4605      	mov	r5, r0
  402f94:	460c      	mov	r4, r1
  402f96:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  402f98:	4b0f      	ldr	r3, [pc, #60]	; (402fd8 <usart_init_rs232+0x48>)
  402f9a:	4798      	blx	r3

	ul_reg_val = 0;
  402f9c:	2200      	movs	r2, #0
  402f9e:	4b0f      	ldr	r3, [pc, #60]	; (402fdc <usart_init_rs232+0x4c>)
  402fa0:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  402fa2:	b19c      	cbz	r4, 402fcc <usart_init_rs232+0x3c>
  402fa4:	4632      	mov	r2, r6
  402fa6:	6821      	ldr	r1, [r4, #0]
  402fa8:	4628      	mov	r0, r5
  402faa:	4b0d      	ldr	r3, [pc, #52]	; (402fe0 <usart_init_rs232+0x50>)
  402fac:	4798      	blx	r3
  402fae:	4602      	mov	r2, r0
  402fb0:	b970      	cbnz	r0, 402fd0 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402fb2:	6861      	ldr	r1, [r4, #4]
  402fb4:	68a3      	ldr	r3, [r4, #8]
  402fb6:	4319      	orrs	r1, r3
  402fb8:	6923      	ldr	r3, [r4, #16]
  402fba:	4319      	orrs	r1, r3
  402fbc:	68e3      	ldr	r3, [r4, #12]
  402fbe:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402fc0:	4906      	ldr	r1, [pc, #24]	; (402fdc <usart_init_rs232+0x4c>)
  402fc2:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  402fc4:	6869      	ldr	r1, [r5, #4]
  402fc6:	430b      	orrs	r3, r1
  402fc8:	606b      	str	r3, [r5, #4]

	return 0;
  402fca:	e002      	b.n	402fd2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  402fcc:	2201      	movs	r2, #1
  402fce:	e000      	b.n	402fd2 <usart_init_rs232+0x42>
  402fd0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  402fd2:	4610      	mov	r0, r2
  402fd4:	bd70      	pop	{r4, r5, r6, pc}
  402fd6:	bf00      	nop
  402fd8:	00402f69 	.word	0x00402f69
  402fdc:	20400950 	.word	0x20400950
  402fe0:	00402f09 	.word	0x00402f09

00402fe4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  402fe4:	2340      	movs	r3, #64	; 0x40
  402fe6:	6003      	str	r3, [r0, #0]
  402fe8:	4770      	bx	lr
  402fea:	bf00      	nop

00402fec <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  402fec:	2310      	movs	r3, #16
  402fee:	6003      	str	r3, [r0, #0]
  402ff0:	4770      	bx	lr
  402ff2:	bf00      	nop

00402ff4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402ff4:	6943      	ldr	r3, [r0, #20]
  402ff6:	f013 0f02 	tst.w	r3, #2
  402ffa:	d004      	beq.n	403006 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  402ffc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  403000:	61c1      	str	r1, [r0, #28]
	return 0;
  403002:	2000      	movs	r0, #0
  403004:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  403006:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  403008:	4770      	bx	lr
  40300a:	bf00      	nop

0040300c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40300c:	6943      	ldr	r3, [r0, #20]
  40300e:	f013 0f01 	tst.w	r3, #1
  403012:	d005      	beq.n	403020 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403014:	6983      	ldr	r3, [r0, #24]
  403016:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40301a:	600b      	str	r3, [r1, #0]

	return 0;
  40301c:	2000      	movs	r0, #0
  40301e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  403020:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  403022:	4770      	bx	lr

00403024 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403024:	e7fe      	b.n	403024 <Dummy_Handler>
  403026:	bf00      	nop

00403028 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403028:	b500      	push	{lr}
  40302a:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  40302c:	4b27      	ldr	r3, [pc, #156]	; (4030cc <Reset_Handler+0xa4>)
  40302e:	4a28      	ldr	r2, [pc, #160]	; (4030d0 <Reset_Handler+0xa8>)
  403030:	429a      	cmp	r2, r3
  403032:	d003      	beq.n	40303c <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  403034:	4b27      	ldr	r3, [pc, #156]	; (4030d4 <Reset_Handler+0xac>)
  403036:	4a25      	ldr	r2, [pc, #148]	; (4030cc <Reset_Handler+0xa4>)
  403038:	429a      	cmp	r2, r3
  40303a:	d304      	bcc.n	403046 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40303c:	4b26      	ldr	r3, [pc, #152]	; (4030d8 <Reset_Handler+0xb0>)
  40303e:	4a27      	ldr	r2, [pc, #156]	; (4030dc <Reset_Handler+0xb4>)
  403040:	429a      	cmp	r2, r3
  403042:	d30f      	bcc.n	403064 <Reset_Handler+0x3c>
  403044:	e01a      	b.n	40307c <Reset_Handler+0x54>
  403046:	4921      	ldr	r1, [pc, #132]	; (4030cc <Reset_Handler+0xa4>)
  403048:	4b25      	ldr	r3, [pc, #148]	; (4030e0 <Reset_Handler+0xb8>)
  40304a:	1a5b      	subs	r3, r3, r1
  40304c:	f023 0303 	bic.w	r3, r3, #3
  403050:	3304      	adds	r3, #4
  403052:	4a1f      	ldr	r2, [pc, #124]	; (4030d0 <Reset_Handler+0xa8>)
  403054:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  403056:	f852 0b04 	ldr.w	r0, [r2], #4
  40305a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40305e:	429a      	cmp	r2, r3
  403060:	d1f9      	bne.n	403056 <Reset_Handler+0x2e>
  403062:	e7eb      	b.n	40303c <Reset_Handler+0x14>
  403064:	4b1f      	ldr	r3, [pc, #124]	; (4030e4 <Reset_Handler+0xbc>)
  403066:	4a20      	ldr	r2, [pc, #128]	; (4030e8 <Reset_Handler+0xc0>)
  403068:	1ad2      	subs	r2, r2, r3
  40306a:	f022 0203 	bic.w	r2, r2, #3
  40306e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403070:	3b04      	subs	r3, #4
                *pDest++ = 0;
  403072:	2100      	movs	r1, #0
  403074:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403078:	4293      	cmp	r3, r2
  40307a:	d1fb      	bne.n	403074 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40307c:	4a1b      	ldr	r2, [pc, #108]	; (4030ec <Reset_Handler+0xc4>)
  40307e:	4b1c      	ldr	r3, [pc, #112]	; (4030f0 <Reset_Handler+0xc8>)
  403080:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403084:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403086:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40308a:	fab3 f383 	clz	r3, r3
  40308e:	095b      	lsrs	r3, r3, #5
  403090:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  403092:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403094:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403098:	2200      	movs	r2, #0
  40309a:	4b16      	ldr	r3, [pc, #88]	; (4030f4 <Reset_Handler+0xcc>)
  40309c:	701a      	strb	r2, [r3, #0]
	return flags;
  40309e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4030a0:	4a15      	ldr	r2, [pc, #84]	; (4030f8 <Reset_Handler+0xd0>)
  4030a2:	6813      	ldr	r3, [r2, #0]
  4030a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4030a8:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4030aa:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4030ae:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4030b2:	b129      	cbz	r1, 4030c0 <Reset_Handler+0x98>
		cpu_irq_enable();
  4030b4:	2201      	movs	r2, #1
  4030b6:	4b0f      	ldr	r3, [pc, #60]	; (4030f4 <Reset_Handler+0xcc>)
  4030b8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4030ba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4030be:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4030c0:	4b0e      	ldr	r3, [pc, #56]	; (4030fc <Reset_Handler+0xd4>)
  4030c2:	4798      	blx	r3

        /* Branch to main function */
        main();
  4030c4:	4b0e      	ldr	r3, [pc, #56]	; (403100 <Reset_Handler+0xd8>)
  4030c6:	4798      	blx	r3
  4030c8:	e7fe      	b.n	4030c8 <Reset_Handler+0xa0>
  4030ca:	bf00      	nop
  4030cc:	20400000 	.word	0x20400000
  4030d0:	0040777c 	.word	0x0040777c
  4030d4:	20400884 	.word	0x20400884
  4030d8:	204009a0 	.word	0x204009a0
  4030dc:	20400884 	.word	0x20400884
  4030e0:	20400883 	.word	0x20400883
  4030e4:	20400888 	.word	0x20400888
  4030e8:	204009a3 	.word	0x204009a3
  4030ec:	e000ed00 	.word	0xe000ed00
  4030f0:	00400000 	.word	0x00400000
  4030f4:	20400014 	.word	0x20400014
  4030f8:	e000ed88 	.word	0xe000ed88
  4030fc:	004036c1 	.word	0x004036c1
  403100:	004035c1 	.word	0x004035c1

00403104 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403104:	4b3c      	ldr	r3, [pc, #240]	; (4031f8 <SystemCoreClockUpdate+0xf4>)
  403106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403108:	f003 0303 	and.w	r3, r3, #3
  40310c:	2b01      	cmp	r3, #1
  40310e:	d00f      	beq.n	403130 <SystemCoreClockUpdate+0x2c>
  403110:	b113      	cbz	r3, 403118 <SystemCoreClockUpdate+0x14>
  403112:	2b02      	cmp	r3, #2
  403114:	d029      	beq.n	40316a <SystemCoreClockUpdate+0x66>
  403116:	e057      	b.n	4031c8 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403118:	4b38      	ldr	r3, [pc, #224]	; (4031fc <SystemCoreClockUpdate+0xf8>)
  40311a:	695b      	ldr	r3, [r3, #20]
  40311c:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403120:	bf14      	ite	ne
  403122:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403126:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40312a:	4b35      	ldr	r3, [pc, #212]	; (403200 <SystemCoreClockUpdate+0xfc>)
  40312c:	601a      	str	r2, [r3, #0]
  40312e:	e04b      	b.n	4031c8 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403130:	4b31      	ldr	r3, [pc, #196]	; (4031f8 <SystemCoreClockUpdate+0xf4>)
  403132:	6a1b      	ldr	r3, [r3, #32]
  403134:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403138:	d003      	beq.n	403142 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40313a:	4a32      	ldr	r2, [pc, #200]	; (403204 <SystemCoreClockUpdate+0x100>)
  40313c:	4b30      	ldr	r3, [pc, #192]	; (403200 <SystemCoreClockUpdate+0xfc>)
  40313e:	601a      	str	r2, [r3, #0]
  403140:	e042      	b.n	4031c8 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403142:	4a31      	ldr	r2, [pc, #196]	; (403208 <SystemCoreClockUpdate+0x104>)
  403144:	4b2e      	ldr	r3, [pc, #184]	; (403200 <SystemCoreClockUpdate+0xfc>)
  403146:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403148:	4b2b      	ldr	r3, [pc, #172]	; (4031f8 <SystemCoreClockUpdate+0xf4>)
  40314a:	6a1b      	ldr	r3, [r3, #32]
  40314c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403150:	2b10      	cmp	r3, #16
  403152:	d002      	beq.n	40315a <SystemCoreClockUpdate+0x56>
  403154:	2b20      	cmp	r3, #32
  403156:	d004      	beq.n	403162 <SystemCoreClockUpdate+0x5e>
  403158:	e036      	b.n	4031c8 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40315a:	4a2c      	ldr	r2, [pc, #176]	; (40320c <SystemCoreClockUpdate+0x108>)
  40315c:	4b28      	ldr	r3, [pc, #160]	; (403200 <SystemCoreClockUpdate+0xfc>)
  40315e:	601a      	str	r2, [r3, #0]
          break;
  403160:	e032      	b.n	4031c8 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403162:	4a28      	ldr	r2, [pc, #160]	; (403204 <SystemCoreClockUpdate+0x100>)
  403164:	4b26      	ldr	r3, [pc, #152]	; (403200 <SystemCoreClockUpdate+0xfc>)
  403166:	601a      	str	r2, [r3, #0]
          break;
  403168:	e02e      	b.n	4031c8 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40316a:	4b23      	ldr	r3, [pc, #140]	; (4031f8 <SystemCoreClockUpdate+0xf4>)
  40316c:	6a1b      	ldr	r3, [r3, #32]
  40316e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403172:	d003      	beq.n	40317c <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403174:	4a23      	ldr	r2, [pc, #140]	; (403204 <SystemCoreClockUpdate+0x100>)
  403176:	4b22      	ldr	r3, [pc, #136]	; (403200 <SystemCoreClockUpdate+0xfc>)
  403178:	601a      	str	r2, [r3, #0]
  40317a:	e012      	b.n	4031a2 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40317c:	4a22      	ldr	r2, [pc, #136]	; (403208 <SystemCoreClockUpdate+0x104>)
  40317e:	4b20      	ldr	r3, [pc, #128]	; (403200 <SystemCoreClockUpdate+0xfc>)
  403180:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403182:	4b1d      	ldr	r3, [pc, #116]	; (4031f8 <SystemCoreClockUpdate+0xf4>)
  403184:	6a1b      	ldr	r3, [r3, #32]
  403186:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40318a:	2b10      	cmp	r3, #16
  40318c:	d002      	beq.n	403194 <SystemCoreClockUpdate+0x90>
  40318e:	2b20      	cmp	r3, #32
  403190:	d004      	beq.n	40319c <SystemCoreClockUpdate+0x98>
  403192:	e006      	b.n	4031a2 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403194:	4a1d      	ldr	r2, [pc, #116]	; (40320c <SystemCoreClockUpdate+0x108>)
  403196:	4b1a      	ldr	r3, [pc, #104]	; (403200 <SystemCoreClockUpdate+0xfc>)
  403198:	601a      	str	r2, [r3, #0]
          break;
  40319a:	e002      	b.n	4031a2 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40319c:	4a19      	ldr	r2, [pc, #100]	; (403204 <SystemCoreClockUpdate+0x100>)
  40319e:	4b18      	ldr	r3, [pc, #96]	; (403200 <SystemCoreClockUpdate+0xfc>)
  4031a0:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4031a2:	4b15      	ldr	r3, [pc, #84]	; (4031f8 <SystemCoreClockUpdate+0xf4>)
  4031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031a6:	f003 0303 	and.w	r3, r3, #3
  4031aa:	2b02      	cmp	r3, #2
  4031ac:	d10c      	bne.n	4031c8 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4031ae:	4a12      	ldr	r2, [pc, #72]	; (4031f8 <SystemCoreClockUpdate+0xf4>)
  4031b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4031b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4031b4:	4812      	ldr	r0, [pc, #72]	; (403200 <SystemCoreClockUpdate+0xfc>)
  4031b6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4031ba:	6803      	ldr	r3, [r0, #0]
  4031bc:	fb01 3303 	mla	r3, r1, r3, r3
  4031c0:	b2d2      	uxtb	r2, r2
  4031c2:	fbb3 f3f2 	udiv	r3, r3, r2
  4031c6:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4031c8:	4b0b      	ldr	r3, [pc, #44]	; (4031f8 <SystemCoreClockUpdate+0xf4>)
  4031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4031d0:	2b70      	cmp	r3, #112	; 0x70
  4031d2:	d107      	bne.n	4031e4 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  4031d4:	4a0a      	ldr	r2, [pc, #40]	; (403200 <SystemCoreClockUpdate+0xfc>)
  4031d6:	6813      	ldr	r3, [r2, #0]
  4031d8:	490d      	ldr	r1, [pc, #52]	; (403210 <SystemCoreClockUpdate+0x10c>)
  4031da:	fba1 1303 	umull	r1, r3, r1, r3
  4031de:	085b      	lsrs	r3, r3, #1
  4031e0:	6013      	str	r3, [r2, #0]
  4031e2:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4031e4:	4b04      	ldr	r3, [pc, #16]	; (4031f8 <SystemCoreClockUpdate+0xf4>)
  4031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031e8:	4905      	ldr	r1, [pc, #20]	; (403200 <SystemCoreClockUpdate+0xfc>)
  4031ea:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4031ee:	680b      	ldr	r3, [r1, #0]
  4031f0:	40d3      	lsrs	r3, r2
  4031f2:	600b      	str	r3, [r1, #0]
  4031f4:	4770      	bx	lr
  4031f6:	bf00      	nop
  4031f8:	400e0600 	.word	0x400e0600
  4031fc:	400e1810 	.word	0x400e1810
  403200:	20400018 	.word	0x20400018
  403204:	00b71b00 	.word	0x00b71b00
  403208:	003d0900 	.word	0x003d0900
  40320c:	007a1200 	.word	0x007a1200
  403210:	aaaaaaab 	.word	0xaaaaaaab

00403214 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403214:	4b12      	ldr	r3, [pc, #72]	; (403260 <system_init_flash+0x4c>)
  403216:	4298      	cmp	r0, r3
  403218:	d804      	bhi.n	403224 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40321a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40321e:	4b11      	ldr	r3, [pc, #68]	; (403264 <system_init_flash+0x50>)
  403220:	601a      	str	r2, [r3, #0]
  403222:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403224:	4b10      	ldr	r3, [pc, #64]	; (403268 <system_init_flash+0x54>)
  403226:	4298      	cmp	r0, r3
  403228:	d803      	bhi.n	403232 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40322a:	4a10      	ldr	r2, [pc, #64]	; (40326c <system_init_flash+0x58>)
  40322c:	4b0d      	ldr	r3, [pc, #52]	; (403264 <system_init_flash+0x50>)
  40322e:	601a      	str	r2, [r3, #0]
  403230:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403232:	4b0f      	ldr	r3, [pc, #60]	; (403270 <system_init_flash+0x5c>)
  403234:	4298      	cmp	r0, r3
  403236:	d803      	bhi.n	403240 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403238:	4a0e      	ldr	r2, [pc, #56]	; (403274 <system_init_flash+0x60>)
  40323a:	4b0a      	ldr	r3, [pc, #40]	; (403264 <system_init_flash+0x50>)
  40323c:	601a      	str	r2, [r3, #0]
  40323e:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403240:	4b0d      	ldr	r3, [pc, #52]	; (403278 <system_init_flash+0x64>)
  403242:	4298      	cmp	r0, r3
  403244:	d803      	bhi.n	40324e <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403246:	4a0d      	ldr	r2, [pc, #52]	; (40327c <system_init_flash+0x68>)
  403248:	4b06      	ldr	r3, [pc, #24]	; (403264 <system_init_flash+0x50>)
  40324a:	601a      	str	r2, [r3, #0]
  40324c:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40324e:	4b0c      	ldr	r3, [pc, #48]	; (403280 <system_init_flash+0x6c>)
  403250:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403252:	bf94      	ite	ls
  403254:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403258:	4a0a      	ldrhi	r2, [pc, #40]	; (403284 <system_init_flash+0x70>)
  40325a:	4b02      	ldr	r3, [pc, #8]	; (403264 <system_init_flash+0x50>)
  40325c:	601a      	str	r2, [r3, #0]
  40325e:	4770      	bx	lr
  403260:	01312cff 	.word	0x01312cff
  403264:	400e0c00 	.word	0x400e0c00
  403268:	026259ff 	.word	0x026259ff
  40326c:	04000100 	.word	0x04000100
  403270:	039386ff 	.word	0x039386ff
  403274:	04000200 	.word	0x04000200
  403278:	04c4b3ff 	.word	0x04c4b3ff
  40327c:	04000300 	.word	0x04000300
  403280:	05f5e0ff 	.word	0x05f5e0ff
  403284:	04000500 	.word	0x04000500

00403288 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403288:	4b09      	ldr	r3, [pc, #36]	; (4032b0 <_sbrk+0x28>)
  40328a:	681b      	ldr	r3, [r3, #0]
  40328c:	b913      	cbnz	r3, 403294 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40328e:	4a09      	ldr	r2, [pc, #36]	; (4032b4 <_sbrk+0x2c>)
  403290:	4b07      	ldr	r3, [pc, #28]	; (4032b0 <_sbrk+0x28>)
  403292:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403294:	4b06      	ldr	r3, [pc, #24]	; (4032b0 <_sbrk+0x28>)
  403296:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403298:	181a      	adds	r2, r3, r0
  40329a:	4907      	ldr	r1, [pc, #28]	; (4032b8 <_sbrk+0x30>)
  40329c:	4291      	cmp	r1, r2
  40329e:	db04      	blt.n	4032aa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4032a0:	4610      	mov	r0, r2
  4032a2:	4a03      	ldr	r2, [pc, #12]	; (4032b0 <_sbrk+0x28>)
  4032a4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4032a6:	4618      	mov	r0, r3
  4032a8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4032aa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4032ae:	4770      	bx	lr
  4032b0:	20400954 	.word	0x20400954
  4032b4:	20402ba0 	.word	0x20402ba0
  4032b8:	2045fffc 	.word	0x2045fffc

004032bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4032bc:	f04f 30ff 	mov.w	r0, #4294967295
  4032c0:	4770      	bx	lr
  4032c2:	bf00      	nop

004032c4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4032c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4032c8:	604b      	str	r3, [r1, #4]

	return 0;
}
  4032ca:	2000      	movs	r0, #0
  4032cc:	4770      	bx	lr
  4032ce:	bf00      	nop

004032d0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4032d0:	2001      	movs	r0, #1
  4032d2:	4770      	bx	lr

004032d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4032d4:	2000      	movs	r0, #0
  4032d6:	4770      	bx	lr

004032d8 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  4032d8:	b570      	push	{r4, r5, r6, lr}
  4032da:	b082      	sub	sp, #8
  4032dc:	460c      	mov	r4, r1
	switch (u8MsgType) {
  4032de:	3811      	subs	r0, #17
  4032e0:	2821      	cmp	r0, #33	; 0x21
  4032e2:	d873      	bhi.n	4033cc <wifi_cb+0xf4>
  4032e4:	e8df f000 	tbb	[pc, r0]
  4032e8:	72227211 	.word	0x72227211
  4032ec:	72727272 	.word	0x72727272
  4032f0:	72727272 	.word	0x72727272
  4032f4:	72727272 	.word	0x72727272
  4032f8:	72727272 	.word	0x72727272
  4032fc:	72727272 	.word	0x72727272
  403300:	5a727272 	.word	0x5a727272
  403304:	72727272 	.word	0x72727272
  403308:	6872      	.short	0x6872
	case M2M_WIFI_RESP_SCAN_DONE:
	{
		tstrM2mScanDone *pstrInfo = (tstrM2mScanDone *)pvMsg;
		scan_request_index = 0;
  40330a:	2200      	movs	r2, #0
  40330c:	4b30      	ldr	r3, [pc, #192]	; (4033d0 <wifi_cb+0xf8>)
  40330e:	701a      	strb	r2, [r3, #0]
		if (pstrInfo->u8NumofCh >= 1) {
  403310:	780b      	ldrb	r3, [r1, #0]
  403312:	b13b      	cbz	r3, 403324 <wifi_cb+0x4c>
			m2m_wifi_req_scan_result(scan_request_index);
  403314:	4610      	mov	r0, r2
  403316:	4b2f      	ldr	r3, [pc, #188]	; (4033d4 <wifi_cb+0xfc>)
  403318:	4798      	blx	r3
			scan_request_index++;
  40331a:	4a2d      	ldr	r2, [pc, #180]	; (4033d0 <wifi_cb+0xf8>)
  40331c:	7813      	ldrb	r3, [r2, #0]
  40331e:	3301      	adds	r3, #1
  403320:	7013      	strb	r3, [r2, #0]
  403322:	e053      	b.n	4033cc <wifi_cb+0xf4>
		} else {
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
  403324:	20ff      	movs	r0, #255	; 0xff
  403326:	4b2c      	ldr	r3, [pc, #176]	; (4033d8 <wifi_cb+0x100>)
  403328:	4798      	blx	r3
  40332a:	e04f      	b.n	4033cc <wifi_cb+0xf4>

	case M2M_WIFI_RESP_SCAN_RESULT:
	{
		tstrM2mWifiscanResult *pstrScanResult = (tstrM2mWifiscanResult *)pvMsg;
		uint16_t demo_ssid_len;
		uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
  40332c:	340a      	adds	r4, #10
  40332e:	4620      	mov	r0, r4
  403330:	4b2a      	ldr	r3, [pc, #168]	; (4033dc <wifi_cb+0x104>)
  403332:	4798      	blx	r3
  403334:	4605      	mov	r5, r0

		/* display founded AP. */
		printf("[%d] SSID:%s\r\n", scan_request_index, pstrScanResult->au8SSID);
  403336:	4622      	mov	r2, r4
  403338:	4b25      	ldr	r3, [pc, #148]	; (4033d0 <wifi_cb+0xf8>)
  40333a:	7819      	ldrb	r1, [r3, #0]
  40333c:	4828      	ldr	r0, [pc, #160]	; (4033e0 <wifi_cb+0x108>)
  40333e:	4b29      	ldr	r3, [pc, #164]	; (4033e4 <wifi_cb+0x10c>)
  403340:	4798      	blx	r3

		num_founded_ap = m2m_wifi_get_num_ap_found();
  403342:	4b29      	ldr	r3, [pc, #164]	; (4033e8 <wifi_cb+0x110>)
  403344:	4798      	blx	r3
  403346:	4606      	mov	r6, r0
		if (scan_ssid_len) {
			/* check same SSID. */
			demo_ssid_len = strlen((const char *)MAIN_WLAN_SSID);
			if
			(
  403348:	b2ad      	uxth	r5, r5
  40334a:	2d0b      	cmp	r5, #11
  40334c:	d113      	bne.n	403376 <wifi_cb+0x9e>
				(demo_ssid_len == scan_ssid_len) &&
				(!memcmp(pstrScanResult->au8SSID, (uint8_t *)MAIN_WLAN_SSID, demo_ssid_len))
  40334e:	220b      	movs	r2, #11
  403350:	4926      	ldr	r1, [pc, #152]	; (4033ec <wifi_cb+0x114>)
  403352:	4620      	mov	r0, r4
  403354:	4b26      	ldr	r3, [pc, #152]	; (4033f0 <wifi_cb+0x118>)
  403356:	4798      	blx	r3
		if (scan_ssid_len) {
			/* check same SSID. */
			demo_ssid_len = strlen((const char *)MAIN_WLAN_SSID);
			if
			(
				(demo_ssid_len == scan_ssid_len) &&
  403358:	b968      	cbnz	r0, 403376 <wifi_cb+0x9e>
				(!memcmp(pstrScanResult->au8SSID, (uint8_t *)MAIN_WLAN_SSID, demo_ssid_len))
			) {
				/* A scan result matches an entry in the preferred AP List.
				 * Initiate a connection request.
				 */
				printf("Found %s \r\n", MAIN_WLAN_SSID);
  40335a:	4c24      	ldr	r4, [pc, #144]	; (4033ec <wifi_cb+0x114>)
  40335c:	4621      	mov	r1, r4
  40335e:	4825      	ldr	r0, [pc, #148]	; (4033f4 <wifi_cb+0x11c>)
  403360:	4b20      	ldr	r3, [pc, #128]	; (4033e4 <wifi_cb+0x10c>)
  403362:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID,
  403364:	23ff      	movs	r3, #255	; 0xff
  403366:	9300      	str	r3, [sp, #0]
  403368:	4b23      	ldr	r3, [pc, #140]	; (4033f8 <wifi_cb+0x120>)
  40336a:	2202      	movs	r2, #2
  40336c:	210c      	movs	r1, #12
  40336e:	4620      	mov	r0, r4
  403370:	4c22      	ldr	r4, [pc, #136]	; (4033fc <wifi_cb+0x124>)
  403372:	47a0      	blx	r4
						sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH,
						(void *)MAIN_WLAN_PSK,
						M2M_WIFI_CH_ALL);
				break;
  403374:	e02a      	b.n	4033cc <wifi_cb+0xf4>
			}
		}

		if (scan_request_index < num_founded_ap) {
  403376:	4b16      	ldr	r3, [pc, #88]	; (4033d0 <wifi_cb+0xf8>)
  403378:	7818      	ldrb	r0, [r3, #0]
  40337a:	4286      	cmp	r6, r0
  40337c:	d906      	bls.n	40338c <wifi_cb+0xb4>
			m2m_wifi_req_scan_result(scan_request_index);
  40337e:	4b15      	ldr	r3, [pc, #84]	; (4033d4 <wifi_cb+0xfc>)
  403380:	4798      	blx	r3
			scan_request_index++;
  403382:	4a13      	ldr	r2, [pc, #76]	; (4033d0 <wifi_cb+0xf8>)
  403384:	7813      	ldrb	r3, [r2, #0]
  403386:	3301      	adds	r3, #1
  403388:	7013      	strb	r3, [r2, #0]
  40338a:	e01f      	b.n	4033cc <wifi_cb+0xf4>
		} else {
			printf("can not find AP %s\r\n", MAIN_WLAN_SSID);
  40338c:	4917      	ldr	r1, [pc, #92]	; (4033ec <wifi_cb+0x114>)
  40338e:	481c      	ldr	r0, [pc, #112]	; (403400 <wifi_cb+0x128>)
  403390:	4b14      	ldr	r3, [pc, #80]	; (4033e4 <wifi_cb+0x10c>)
  403392:	4798      	blx	r3
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
  403394:	20ff      	movs	r0, #255	; 0xff
  403396:	4b10      	ldr	r3, [pc, #64]	; (4033d8 <wifi_cb+0x100>)
  403398:	4798      	blx	r3
  40339a:	e017      	b.n	4033cc <wifi_cb+0xf4>
	}

	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  40339c:	780b      	ldrb	r3, [r1, #0]
  40339e:	2b01      	cmp	r3, #1
  4033a0:	d102      	bne.n	4033a8 <wifi_cb+0xd0>
			m2m_wifi_request_dhcp_client();
  4033a2:	4b18      	ldr	r3, [pc, #96]	; (403404 <wifi_cb+0x12c>)
  4033a4:	4798      	blx	r3
  4033a6:	e011      	b.n	4033cc <wifi_cb+0xf4>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  4033a8:	b983      	cbnz	r3, 4033cc <wifi_cb+0xf4>
			printf("Wi-Fi disconnected\r\n");
  4033aa:	4817      	ldr	r0, [pc, #92]	; (403408 <wifi_cb+0x130>)
  4033ac:	4b0d      	ldr	r3, [pc, #52]	; (4033e4 <wifi_cb+0x10c>)
  4033ae:	4798      	blx	r3

			/* Request scan. */
			m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
  4033b0:	20ff      	movs	r0, #255	; 0xff
  4033b2:	4b09      	ldr	r3, [pc, #36]	; (4033d8 <wifi_cb+0x100>)
  4033b4:	4798      	blx	r3
  4033b6:	e009      	b.n	4033cc <wifi_cb+0xf4>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("Wi-Fi connected\r\n");
  4033b8:	4814      	ldr	r0, [pc, #80]	; (40340c <wifi_cb+0x134>)
  4033ba:	4d0a      	ldr	r5, [pc, #40]	; (4033e4 <wifi_cb+0x10c>)
  4033bc:	47a8      	blx	r5
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
  4033be:	78a3      	ldrb	r3, [r4, #2]
  4033c0:	7862      	ldrb	r2, [r4, #1]
  4033c2:	7821      	ldrb	r1, [r4, #0]
  4033c4:	78e0      	ldrb	r0, [r4, #3]
  4033c6:	9000      	str	r0, [sp, #0]
  4033c8:	4811      	ldr	r0, [pc, #68]	; (403410 <wifi_cb+0x138>)
  4033ca:	47a8      	blx	r5
	default:
	{
		break;
	}
	}
}
  4033cc:	b002      	add	sp, #8
  4033ce:	bd70      	pop	{r4, r5, r6, pc}
  4033d0:	20400958 	.word	0x20400958
  4033d4:	004013b1 	.word	0x004013b1
  4033d8:	00401359 	.word	0x00401359
  4033dc:	004039c1 	.word	0x004039c1
  4033e0:	004075e0 	.word	0x004075e0
  4033e4:	00403711 	.word	0x00403711
  4033e8:	004013d5 	.word	0x004013d5
  4033ec:	004075f0 	.word	0x004075f0
  4033f0:	00403739 	.word	0x00403739
  4033f4:	004075fc 	.word	0x004075fc
  4033f8:	00407608 	.word	0x00407608
  4033fc:	00401339 	.word	0x00401339
  403400:	00407614 	.word	0x00407614
  403404:	00401355 	.word	0x00401355
  403408:	0040762c 	.word	0x0040762c
  40340c:	00407644 	.word	0x00407644
  403410:	00407658 	.word	0x00407658

00403414 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403414:	b5f0      	push	{r4, r5, r6, r7, lr}
  403416:	b083      	sub	sp, #12
  403418:	4605      	mov	r5, r0
  40341a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40341c:	2300      	movs	r3, #0
  40341e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403420:	4b29      	ldr	r3, [pc, #164]	; (4034c8 <usart_serial_getchar+0xb4>)
  403422:	4298      	cmp	r0, r3
  403424:	d107      	bne.n	403436 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  403426:	461f      	mov	r7, r3
  403428:	4e28      	ldr	r6, [pc, #160]	; (4034cc <usart_serial_getchar+0xb8>)
  40342a:	4621      	mov	r1, r4
  40342c:	4638      	mov	r0, r7
  40342e:	47b0      	blx	r6
  403430:	2800      	cmp	r0, #0
  403432:	d1fa      	bne.n	40342a <usart_serial_getchar+0x16>
  403434:	e015      	b.n	403462 <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403436:	4b26      	ldr	r3, [pc, #152]	; (4034d0 <usart_serial_getchar+0xbc>)
  403438:	4298      	cmp	r0, r3
  40343a:	d107      	bne.n	40344c <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  40343c:	461f      	mov	r7, r3
  40343e:	4e23      	ldr	r6, [pc, #140]	; (4034cc <usart_serial_getchar+0xb8>)
  403440:	4621      	mov	r1, r4
  403442:	4638      	mov	r0, r7
  403444:	47b0      	blx	r6
  403446:	2800      	cmp	r0, #0
  403448:	d1fa      	bne.n	403440 <usart_serial_getchar+0x2c>
  40344a:	e015      	b.n	403478 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40344c:	4b21      	ldr	r3, [pc, #132]	; (4034d4 <usart_serial_getchar+0xc0>)
  40344e:	4298      	cmp	r0, r3
  403450:	d107      	bne.n	403462 <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  403452:	461f      	mov	r7, r3
  403454:	4e1d      	ldr	r6, [pc, #116]	; (4034cc <usart_serial_getchar+0xb8>)
  403456:	4621      	mov	r1, r4
  403458:	4638      	mov	r0, r7
  40345a:	47b0      	blx	r6
  40345c:	2800      	cmp	r0, #0
  40345e:	d1fa      	bne.n	403456 <usart_serial_getchar+0x42>
  403460:	e017      	b.n	403492 <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403462:	4b1d      	ldr	r3, [pc, #116]	; (4034d8 <usart_serial_getchar+0xc4>)
  403464:	429d      	cmp	r5, r3
  403466:	d107      	bne.n	403478 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  403468:	461f      	mov	r7, r3
  40346a:	4e18      	ldr	r6, [pc, #96]	; (4034cc <usart_serial_getchar+0xb8>)
  40346c:	4621      	mov	r1, r4
  40346e:	4638      	mov	r0, r7
  403470:	47b0      	blx	r6
  403472:	2800      	cmp	r0, #0
  403474:	d1fa      	bne.n	40346c <usart_serial_getchar+0x58>
  403476:	e019      	b.n	4034ac <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403478:	4b18      	ldr	r3, [pc, #96]	; (4034dc <usart_serial_getchar+0xc8>)
  40347a:	429d      	cmp	r5, r3
  40347c:	d109      	bne.n	403492 <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  40347e:	461e      	mov	r6, r3
  403480:	4d17      	ldr	r5, [pc, #92]	; (4034e0 <usart_serial_getchar+0xcc>)
  403482:	a901      	add	r1, sp, #4
  403484:	4630      	mov	r0, r6
  403486:	47a8      	blx	r5
  403488:	2800      	cmp	r0, #0
  40348a:	d1fa      	bne.n	403482 <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  40348c:	9b01      	ldr	r3, [sp, #4]
  40348e:	7023      	strb	r3, [r4, #0]
  403490:	e018      	b.n	4034c4 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403492:	4b14      	ldr	r3, [pc, #80]	; (4034e4 <usart_serial_getchar+0xd0>)
  403494:	429d      	cmp	r5, r3
  403496:	d109      	bne.n	4034ac <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  403498:	461e      	mov	r6, r3
  40349a:	4d11      	ldr	r5, [pc, #68]	; (4034e0 <usart_serial_getchar+0xcc>)
  40349c:	a901      	add	r1, sp, #4
  40349e:	4630      	mov	r0, r6
  4034a0:	47a8      	blx	r5
  4034a2:	2800      	cmp	r0, #0
  4034a4:	d1fa      	bne.n	40349c <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  4034a6:	9b01      	ldr	r3, [sp, #4]
  4034a8:	7023      	strb	r3, [r4, #0]
  4034aa:	e00b      	b.n	4034c4 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4034ac:	4b0e      	ldr	r3, [pc, #56]	; (4034e8 <usart_serial_getchar+0xd4>)
  4034ae:	429d      	cmp	r5, r3
  4034b0:	d108      	bne.n	4034c4 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  4034b2:	461e      	mov	r6, r3
  4034b4:	4d0a      	ldr	r5, [pc, #40]	; (4034e0 <usart_serial_getchar+0xcc>)
  4034b6:	a901      	add	r1, sp, #4
  4034b8:	4630      	mov	r0, r6
  4034ba:	47a8      	blx	r5
  4034bc:	2800      	cmp	r0, #0
  4034be:	d1fa      	bne.n	4034b6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  4034c0:	9b01      	ldr	r3, [sp, #4]
  4034c2:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4034c4:	b003      	add	sp, #12
  4034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4034c8:	400e0800 	.word	0x400e0800
  4034cc:	00402ef5 	.word	0x00402ef5
  4034d0:	400e0a00 	.word	0x400e0a00
  4034d4:	400e1a00 	.word	0x400e1a00
  4034d8:	400e1c00 	.word	0x400e1c00
  4034dc:	40024000 	.word	0x40024000
  4034e0:	0040300d 	.word	0x0040300d
  4034e4:	40028000 	.word	0x40028000
  4034e8:	4002c000 	.word	0x4002c000

004034ec <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4034ec:	b570      	push	{r4, r5, r6, lr}
  4034ee:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4034f0:	4b2a      	ldr	r3, [pc, #168]	; (40359c <usart_serial_putchar+0xb0>)
  4034f2:	4298      	cmp	r0, r3
  4034f4:	d108      	bne.n	403508 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  4034f6:	461e      	mov	r6, r3
  4034f8:	4d29      	ldr	r5, [pc, #164]	; (4035a0 <usart_serial_putchar+0xb4>)
  4034fa:	4621      	mov	r1, r4
  4034fc:	4630      	mov	r0, r6
  4034fe:	47a8      	blx	r5
  403500:	2800      	cmp	r0, #0
  403502:	d1fa      	bne.n	4034fa <usart_serial_putchar+0xe>
		return 1;
  403504:	2001      	movs	r0, #1
  403506:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403508:	4b26      	ldr	r3, [pc, #152]	; (4035a4 <usart_serial_putchar+0xb8>)
  40350a:	4298      	cmp	r0, r3
  40350c:	d108      	bne.n	403520 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40350e:	461e      	mov	r6, r3
  403510:	4d23      	ldr	r5, [pc, #140]	; (4035a0 <usart_serial_putchar+0xb4>)
  403512:	4621      	mov	r1, r4
  403514:	4630      	mov	r0, r6
  403516:	47a8      	blx	r5
  403518:	2800      	cmp	r0, #0
  40351a:	d1fa      	bne.n	403512 <usart_serial_putchar+0x26>
		return 1;
  40351c:	2001      	movs	r0, #1
  40351e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403520:	4b21      	ldr	r3, [pc, #132]	; (4035a8 <usart_serial_putchar+0xbc>)
  403522:	4298      	cmp	r0, r3
  403524:	d108      	bne.n	403538 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  403526:	461e      	mov	r6, r3
  403528:	4d1d      	ldr	r5, [pc, #116]	; (4035a0 <usart_serial_putchar+0xb4>)
  40352a:	4621      	mov	r1, r4
  40352c:	4630      	mov	r0, r6
  40352e:	47a8      	blx	r5
  403530:	2800      	cmp	r0, #0
  403532:	d1fa      	bne.n	40352a <usart_serial_putchar+0x3e>
		return 1;
  403534:	2001      	movs	r0, #1
  403536:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403538:	4b1c      	ldr	r3, [pc, #112]	; (4035ac <usart_serial_putchar+0xc0>)
  40353a:	4298      	cmp	r0, r3
  40353c:	d108      	bne.n	403550 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  40353e:	461e      	mov	r6, r3
  403540:	4d17      	ldr	r5, [pc, #92]	; (4035a0 <usart_serial_putchar+0xb4>)
  403542:	4621      	mov	r1, r4
  403544:	4630      	mov	r0, r6
  403546:	47a8      	blx	r5
  403548:	2800      	cmp	r0, #0
  40354a:	d1fa      	bne.n	403542 <usart_serial_putchar+0x56>
		return 1;
  40354c:	2001      	movs	r0, #1
  40354e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403550:	4b17      	ldr	r3, [pc, #92]	; (4035b0 <usart_serial_putchar+0xc4>)
  403552:	4298      	cmp	r0, r3
  403554:	d108      	bne.n	403568 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  403556:	461e      	mov	r6, r3
  403558:	4d16      	ldr	r5, [pc, #88]	; (4035b4 <usart_serial_putchar+0xc8>)
  40355a:	4621      	mov	r1, r4
  40355c:	4630      	mov	r0, r6
  40355e:	47a8      	blx	r5
  403560:	2800      	cmp	r0, #0
  403562:	d1fa      	bne.n	40355a <usart_serial_putchar+0x6e>
		return 1;
  403564:	2001      	movs	r0, #1
  403566:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403568:	4b13      	ldr	r3, [pc, #76]	; (4035b8 <usart_serial_putchar+0xcc>)
  40356a:	4298      	cmp	r0, r3
  40356c:	d108      	bne.n	403580 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  40356e:	461e      	mov	r6, r3
  403570:	4d10      	ldr	r5, [pc, #64]	; (4035b4 <usart_serial_putchar+0xc8>)
  403572:	4621      	mov	r1, r4
  403574:	4630      	mov	r0, r6
  403576:	47a8      	blx	r5
  403578:	2800      	cmp	r0, #0
  40357a:	d1fa      	bne.n	403572 <usart_serial_putchar+0x86>
		return 1;
  40357c:	2001      	movs	r0, #1
  40357e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403580:	4b0e      	ldr	r3, [pc, #56]	; (4035bc <usart_serial_putchar+0xd0>)
  403582:	4298      	cmp	r0, r3
  403584:	d108      	bne.n	403598 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  403586:	461e      	mov	r6, r3
  403588:	4d0a      	ldr	r5, [pc, #40]	; (4035b4 <usart_serial_putchar+0xc8>)
  40358a:	4621      	mov	r1, r4
  40358c:	4630      	mov	r0, r6
  40358e:	47a8      	blx	r5
  403590:	2800      	cmp	r0, #0
  403592:	d1fa      	bne.n	40358a <usart_serial_putchar+0x9e>
		return 1;
  403594:	2001      	movs	r0, #1
  403596:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  403598:	2000      	movs	r0, #0
}
  40359a:	bd70      	pop	{r4, r5, r6, pc}
  40359c:	400e0800 	.word	0x400e0800
  4035a0:	00402ee1 	.word	0x00402ee1
  4035a4:	400e0a00 	.word	0x400e0a00
  4035a8:	400e1a00 	.word	0x400e1a00
  4035ac:	400e1c00 	.word	0x400e1c00
  4035b0:	40024000 	.word	0x40024000
  4035b4:	00402ff5 	.word	0x00402ff5
  4035b8:	40028000 	.word	0x40028000
  4035bc:	4002c000 	.word	0x4002c000

004035c0 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
  4035c0:	b570      	push	{r4, r5, r6, lr}
  4035c2:	b08c      	sub	sp, #48	; 0x30
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the board. */
	sysclk_init();
  4035c4:	4b27      	ldr	r3, [pc, #156]	; (403664 <main+0xa4>)
  4035c6:	4798      	blx	r3
	board_init();
  4035c8:	4b27      	ldr	r3, [pc, #156]	; (403668 <main+0xa8>)
  4035ca:	4798      	blx	r3
  4035cc:	200e      	movs	r0, #14
  4035ce:	4e27      	ldr	r6, [pc, #156]	; (40366c <main+0xac>)
  4035d0:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4035d2:	4d27      	ldr	r5, [pc, #156]	; (403670 <main+0xb0>)
  4035d4:	4b27      	ldr	r3, [pc, #156]	; (403674 <main+0xb4>)
  4035d6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4035d8:	4a27      	ldr	r2, [pc, #156]	; (403678 <main+0xb8>)
  4035da:	4b28      	ldr	r3, [pc, #160]	; (40367c <main+0xbc>)
  4035dc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4035de:	4a28      	ldr	r2, [pc, #160]	; (403680 <main+0xc0>)
  4035e0:	4b28      	ldr	r3, [pc, #160]	; (403684 <main+0xc4>)
  4035e2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4035e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4035e8:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  4035ea:	23c0      	movs	r3, #192	; 0xc0
  4035ec:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  4035ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4035f2:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  4035f4:	2400      	movs	r4, #0
  4035f6:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4035f8:	9404      	str	r4, [sp, #16]
  4035fa:	200e      	movs	r0, #14
  4035fc:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4035fe:	4a22      	ldr	r2, [pc, #136]	; (403688 <main+0xc8>)
  403600:	4669      	mov	r1, sp
  403602:	4628      	mov	r0, r5
  403604:	4b21      	ldr	r3, [pc, #132]	; (40368c <main+0xcc>)
  403606:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403608:	4628      	mov	r0, r5
  40360a:	4b21      	ldr	r3, [pc, #132]	; (403690 <main+0xd0>)
  40360c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40360e:	4628      	mov	r0, r5
  403610:	4b20      	ldr	r3, [pc, #128]	; (403694 <main+0xd4>)
  403612:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403614:	4e20      	ldr	r6, [pc, #128]	; (403698 <main+0xd8>)
  403616:	6833      	ldr	r3, [r6, #0]
  403618:	4621      	mov	r1, r4
  40361a:	6898      	ldr	r0, [r3, #8]
  40361c:	4d1f      	ldr	r5, [pc, #124]	; (40369c <main+0xdc>)
  40361e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403620:	6833      	ldr	r3, [r6, #0]
  403622:	4621      	mov	r1, r4
  403624:	6858      	ldr	r0, [r3, #4]
  403626:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  403628:	481d      	ldr	r0, [pc, #116]	; (4036a0 <main+0xe0>)
  40362a:	4b1e      	ldr	r3, [pc, #120]	; (4036a4 <main+0xe4>)
  40362c:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  40362e:	4b1e      	ldr	r3, [pc, #120]	; (4036a8 <main+0xe8>)
  403630:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  403632:	9407      	str	r4, [sp, #28]
  403634:	9408      	str	r4, [sp, #32]
  403636:	9409      	str	r4, [sp, #36]	; 0x24
  403638:	940a      	str	r4, [sp, #40]	; 0x28
  40363a:	940b      	str	r4, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  40363c:	4b1b      	ldr	r3, [pc, #108]	; (4036ac <main+0xec>)
  40363e:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  403640:	a806      	add	r0, sp, #24
  403642:	4b1b      	ldr	r3, [pc, #108]	; (4036b0 <main+0xf0>)
  403644:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403646:	b120      	cbz	r0, 403652 <main+0x92>
  403648:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  40364a:	481a      	ldr	r0, [pc, #104]	; (4036b4 <main+0xf4>)
  40364c:	4b15      	ldr	r3, [pc, #84]	; (4036a4 <main+0xe4>)
  40364e:	4798      	blx	r3
  403650:	e7fe      	b.n	403650 <main+0x90>
		while (1) {
		}
	}

	/* Request scan. */
	m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
  403652:	20ff      	movs	r0, #255	; 0xff
  403654:	4b18      	ldr	r3, [pc, #96]	; (4036b8 <main+0xf8>)
  403656:	4798      	blx	r3

	while (1) {
		/* Handle pending events from network controller. */
		while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS) {
  403658:	2500      	movs	r5, #0
  40365a:	4c18      	ldr	r4, [pc, #96]	; (4036bc <main+0xfc>)
  40365c:	4628      	mov	r0, r5
  40365e:	47a0      	blx	r4
  403660:	e7fc      	b.n	40365c <main+0x9c>
  403662:	bf00      	nop
  403664:	00402579 	.word	0x00402579
  403668:	00402675 	.word	0x00402675
  40366c:	00402d3d 	.word	0x00402d3d
  403670:	40028000 	.word	0x40028000
  403674:	20400998 	.word	0x20400998
  403678:	004034ed 	.word	0x004034ed
  40367c:	20400994 	.word	0x20400994
  403680:	00403415 	.word	0x00403415
  403684:	20400990 	.word	0x20400990
  403688:	08f0d180 	.word	0x08f0d180
  40368c:	00402f91 	.word	0x00402f91
  403690:	00402fe5 	.word	0x00402fe5
  403694:	00402fed 	.word	0x00402fed
  403698:	20400448 	.word	0x20400448
  40369c:	00403839 	.word	0x00403839
  4036a0:	00407674 	.word	0x00407674
  4036a4:	00403711 	.word	0x00403711
  4036a8:	00400211 	.word	0x00400211
  4036ac:	004032d9 	.word	0x004032d9
  4036b0:	00400fed 	.word	0x00400fed
  4036b4:	004076d0 	.word	0x004076d0
  4036b8:	00401359 	.word	0x00401359
  4036bc:	004010e9 	.word	0x004010e9

004036c0 <__libc_init_array>:
  4036c0:	b570      	push	{r4, r5, r6, lr}
  4036c2:	4e0f      	ldr	r6, [pc, #60]	; (403700 <__libc_init_array+0x40>)
  4036c4:	4d0f      	ldr	r5, [pc, #60]	; (403704 <__libc_init_array+0x44>)
  4036c6:	1b76      	subs	r6, r6, r5
  4036c8:	10b6      	asrs	r6, r6, #2
  4036ca:	bf18      	it	ne
  4036cc:	2400      	movne	r4, #0
  4036ce:	d005      	beq.n	4036dc <__libc_init_array+0x1c>
  4036d0:	3401      	adds	r4, #1
  4036d2:	f855 3b04 	ldr.w	r3, [r5], #4
  4036d6:	4798      	blx	r3
  4036d8:	42a6      	cmp	r6, r4
  4036da:	d1f9      	bne.n	4036d0 <__libc_init_array+0x10>
  4036dc:	4e0a      	ldr	r6, [pc, #40]	; (403708 <__libc_init_array+0x48>)
  4036de:	4d0b      	ldr	r5, [pc, #44]	; (40370c <__libc_init_array+0x4c>)
  4036e0:	1b76      	subs	r6, r6, r5
  4036e2:	f004 f835 	bl	407750 <_init>
  4036e6:	10b6      	asrs	r6, r6, #2
  4036e8:	bf18      	it	ne
  4036ea:	2400      	movne	r4, #0
  4036ec:	d006      	beq.n	4036fc <__libc_init_array+0x3c>
  4036ee:	3401      	adds	r4, #1
  4036f0:	f855 3b04 	ldr.w	r3, [r5], #4
  4036f4:	4798      	blx	r3
  4036f6:	42a6      	cmp	r6, r4
  4036f8:	d1f9      	bne.n	4036ee <__libc_init_array+0x2e>
  4036fa:	bd70      	pop	{r4, r5, r6, pc}
  4036fc:	bd70      	pop	{r4, r5, r6, pc}
  4036fe:	bf00      	nop
  403700:	0040775c 	.word	0x0040775c
  403704:	0040775c 	.word	0x0040775c
  403708:	00407764 	.word	0x00407764
  40370c:	0040775c 	.word	0x0040775c

00403710 <iprintf>:
  403710:	b40f      	push	{r0, r1, r2, r3}
  403712:	b500      	push	{lr}
  403714:	4907      	ldr	r1, [pc, #28]	; (403734 <iprintf+0x24>)
  403716:	b083      	sub	sp, #12
  403718:	ab04      	add	r3, sp, #16
  40371a:	6808      	ldr	r0, [r1, #0]
  40371c:	f853 2b04 	ldr.w	r2, [r3], #4
  403720:	6881      	ldr	r1, [r0, #8]
  403722:	9301      	str	r3, [sp, #4]
  403724:	f000 f9f6 	bl	403b14 <_vfiprintf_r>
  403728:	b003      	add	sp, #12
  40372a:	f85d eb04 	ldr.w	lr, [sp], #4
  40372e:	b004      	add	sp, #16
  403730:	4770      	bx	lr
  403732:	bf00      	nop
  403734:	20400448 	.word	0x20400448

00403738 <memcmp>:
  403738:	2a03      	cmp	r2, #3
  40373a:	b470      	push	{r4, r5, r6}
  40373c:	d926      	bls.n	40378c <memcmp+0x54>
  40373e:	ea40 0301 	orr.w	r3, r0, r1
  403742:	079b      	lsls	r3, r3, #30
  403744:	d011      	beq.n	40376a <memcmp+0x32>
  403746:	7804      	ldrb	r4, [r0, #0]
  403748:	780d      	ldrb	r5, [r1, #0]
  40374a:	42ac      	cmp	r4, r5
  40374c:	d122      	bne.n	403794 <memcmp+0x5c>
  40374e:	4402      	add	r2, r0
  403750:	1c43      	adds	r3, r0, #1
  403752:	e005      	b.n	403760 <memcmp+0x28>
  403754:	f813 4b01 	ldrb.w	r4, [r3], #1
  403758:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  40375c:	42ac      	cmp	r4, r5
  40375e:	d119      	bne.n	403794 <memcmp+0x5c>
  403760:	4293      	cmp	r3, r2
  403762:	d1f7      	bne.n	403754 <memcmp+0x1c>
  403764:	2000      	movs	r0, #0
  403766:	bc70      	pop	{r4, r5, r6}
  403768:	4770      	bx	lr
  40376a:	460c      	mov	r4, r1
  40376c:	4603      	mov	r3, r0
  40376e:	681e      	ldr	r6, [r3, #0]
  403770:	6825      	ldr	r5, [r4, #0]
  403772:	42ae      	cmp	r6, r5
  403774:	4618      	mov	r0, r3
  403776:	4621      	mov	r1, r4
  403778:	f103 0304 	add.w	r3, r3, #4
  40377c:	f104 0404 	add.w	r4, r4, #4
  403780:	d1e1      	bne.n	403746 <memcmp+0xe>
  403782:	3a04      	subs	r2, #4
  403784:	2a03      	cmp	r2, #3
  403786:	4618      	mov	r0, r3
  403788:	4621      	mov	r1, r4
  40378a:	d8f0      	bhi.n	40376e <memcmp+0x36>
  40378c:	2a00      	cmp	r2, #0
  40378e:	d1da      	bne.n	403746 <memcmp+0xe>
  403790:	4610      	mov	r0, r2
  403792:	e7e8      	b.n	403766 <memcmp+0x2e>
  403794:	1b60      	subs	r0, r4, r5
  403796:	bc70      	pop	{r4, r5, r6}
  403798:	4770      	bx	lr
  40379a:	bf00      	nop

0040379c <memset>:
  40379c:	b470      	push	{r4, r5, r6}
  40379e:	0784      	lsls	r4, r0, #30
  4037a0:	d046      	beq.n	403830 <memset+0x94>
  4037a2:	1e54      	subs	r4, r2, #1
  4037a4:	2a00      	cmp	r2, #0
  4037a6:	d041      	beq.n	40382c <memset+0x90>
  4037a8:	b2cd      	uxtb	r5, r1
  4037aa:	4603      	mov	r3, r0
  4037ac:	e002      	b.n	4037b4 <memset+0x18>
  4037ae:	1e62      	subs	r2, r4, #1
  4037b0:	b3e4      	cbz	r4, 40382c <memset+0x90>
  4037b2:	4614      	mov	r4, r2
  4037b4:	f803 5b01 	strb.w	r5, [r3], #1
  4037b8:	079a      	lsls	r2, r3, #30
  4037ba:	d1f8      	bne.n	4037ae <memset+0x12>
  4037bc:	2c03      	cmp	r4, #3
  4037be:	d92e      	bls.n	40381e <memset+0x82>
  4037c0:	b2cd      	uxtb	r5, r1
  4037c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4037c6:	2c0f      	cmp	r4, #15
  4037c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4037cc:	d919      	bls.n	403802 <memset+0x66>
  4037ce:	f103 0210 	add.w	r2, r3, #16
  4037d2:	4626      	mov	r6, r4
  4037d4:	3e10      	subs	r6, #16
  4037d6:	2e0f      	cmp	r6, #15
  4037d8:	f842 5c10 	str.w	r5, [r2, #-16]
  4037dc:	f842 5c0c 	str.w	r5, [r2, #-12]
  4037e0:	f842 5c08 	str.w	r5, [r2, #-8]
  4037e4:	f842 5c04 	str.w	r5, [r2, #-4]
  4037e8:	f102 0210 	add.w	r2, r2, #16
  4037ec:	d8f2      	bhi.n	4037d4 <memset+0x38>
  4037ee:	f1a4 0210 	sub.w	r2, r4, #16
  4037f2:	f022 020f 	bic.w	r2, r2, #15
  4037f6:	f004 040f 	and.w	r4, r4, #15
  4037fa:	3210      	adds	r2, #16
  4037fc:	2c03      	cmp	r4, #3
  4037fe:	4413      	add	r3, r2
  403800:	d90d      	bls.n	40381e <memset+0x82>
  403802:	461e      	mov	r6, r3
  403804:	4622      	mov	r2, r4
  403806:	3a04      	subs	r2, #4
  403808:	2a03      	cmp	r2, #3
  40380a:	f846 5b04 	str.w	r5, [r6], #4
  40380e:	d8fa      	bhi.n	403806 <memset+0x6a>
  403810:	1f22      	subs	r2, r4, #4
  403812:	f022 0203 	bic.w	r2, r2, #3
  403816:	3204      	adds	r2, #4
  403818:	4413      	add	r3, r2
  40381a:	f004 0403 	and.w	r4, r4, #3
  40381e:	b12c      	cbz	r4, 40382c <memset+0x90>
  403820:	b2c9      	uxtb	r1, r1
  403822:	441c      	add	r4, r3
  403824:	f803 1b01 	strb.w	r1, [r3], #1
  403828:	42a3      	cmp	r3, r4
  40382a:	d1fb      	bne.n	403824 <memset+0x88>
  40382c:	bc70      	pop	{r4, r5, r6}
  40382e:	4770      	bx	lr
  403830:	4614      	mov	r4, r2
  403832:	4603      	mov	r3, r0
  403834:	e7c2      	b.n	4037bc <memset+0x20>
  403836:	bf00      	nop

00403838 <setbuf>:
  403838:	2900      	cmp	r1, #0
  40383a:	bf0c      	ite	eq
  40383c:	2202      	moveq	r2, #2
  40383e:	2200      	movne	r2, #0
  403840:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403844:	f000 b800 	b.w	403848 <setvbuf>

00403848 <setvbuf>:
  403848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40384c:	4c51      	ldr	r4, [pc, #324]	; (403994 <setvbuf+0x14c>)
  40384e:	6825      	ldr	r5, [r4, #0]
  403850:	b083      	sub	sp, #12
  403852:	4604      	mov	r4, r0
  403854:	460f      	mov	r7, r1
  403856:	4690      	mov	r8, r2
  403858:	461e      	mov	r6, r3
  40385a:	b115      	cbz	r5, 403862 <setvbuf+0x1a>
  40385c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40385e:	2b00      	cmp	r3, #0
  403860:	d079      	beq.n	403956 <setvbuf+0x10e>
  403862:	f1b8 0f02 	cmp.w	r8, #2
  403866:	d004      	beq.n	403872 <setvbuf+0x2a>
  403868:	f1b8 0f01 	cmp.w	r8, #1
  40386c:	d87f      	bhi.n	40396e <setvbuf+0x126>
  40386e:	2e00      	cmp	r6, #0
  403870:	db7d      	blt.n	40396e <setvbuf+0x126>
  403872:	4621      	mov	r1, r4
  403874:	4628      	mov	r0, r5
  403876:	f001 f999 	bl	404bac <_fflush_r>
  40387a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40387c:	b141      	cbz	r1, 403890 <setvbuf+0x48>
  40387e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403882:	4299      	cmp	r1, r3
  403884:	d002      	beq.n	40388c <setvbuf+0x44>
  403886:	4628      	mov	r0, r5
  403888:	f001 faee 	bl	404e68 <_free_r>
  40388c:	2300      	movs	r3, #0
  40388e:	6323      	str	r3, [r4, #48]	; 0x30
  403890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403894:	2200      	movs	r2, #0
  403896:	61a2      	str	r2, [r4, #24]
  403898:	6062      	str	r2, [r4, #4]
  40389a:	061a      	lsls	r2, r3, #24
  40389c:	d454      	bmi.n	403948 <setvbuf+0x100>
  40389e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4038a2:	f023 0303 	bic.w	r3, r3, #3
  4038a6:	f1b8 0f02 	cmp.w	r8, #2
  4038aa:	81a3      	strh	r3, [r4, #12]
  4038ac:	d039      	beq.n	403922 <setvbuf+0xda>
  4038ae:	ab01      	add	r3, sp, #4
  4038b0:	466a      	mov	r2, sp
  4038b2:	4621      	mov	r1, r4
  4038b4:	4628      	mov	r0, r5
  4038b6:	f001 fd75 	bl	4053a4 <__swhatbuf_r>
  4038ba:	89a3      	ldrh	r3, [r4, #12]
  4038bc:	4318      	orrs	r0, r3
  4038be:	81a0      	strh	r0, [r4, #12]
  4038c0:	b326      	cbz	r6, 40390c <setvbuf+0xc4>
  4038c2:	b327      	cbz	r7, 40390e <setvbuf+0xc6>
  4038c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4038c6:	2b00      	cmp	r3, #0
  4038c8:	d04d      	beq.n	403966 <setvbuf+0x11e>
  4038ca:	9b00      	ldr	r3, [sp, #0]
  4038cc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4038d0:	6027      	str	r7, [r4, #0]
  4038d2:	429e      	cmp	r6, r3
  4038d4:	bf1c      	itt	ne
  4038d6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4038da:	81a0      	strhne	r0, [r4, #12]
  4038dc:	f1b8 0f01 	cmp.w	r8, #1
  4038e0:	bf08      	it	eq
  4038e2:	f040 0001 	orreq.w	r0, r0, #1
  4038e6:	b283      	uxth	r3, r0
  4038e8:	bf08      	it	eq
  4038ea:	81a0      	strheq	r0, [r4, #12]
  4038ec:	f003 0008 	and.w	r0, r3, #8
  4038f0:	b280      	uxth	r0, r0
  4038f2:	6127      	str	r7, [r4, #16]
  4038f4:	6166      	str	r6, [r4, #20]
  4038f6:	b318      	cbz	r0, 403940 <setvbuf+0xf8>
  4038f8:	f013 0001 	ands.w	r0, r3, #1
  4038fc:	d02f      	beq.n	40395e <setvbuf+0x116>
  4038fe:	2000      	movs	r0, #0
  403900:	4276      	negs	r6, r6
  403902:	61a6      	str	r6, [r4, #24]
  403904:	60a0      	str	r0, [r4, #8]
  403906:	b003      	add	sp, #12
  403908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40390c:	9e00      	ldr	r6, [sp, #0]
  40390e:	4630      	mov	r0, r6
  403910:	f001 fdbc 	bl	40548c <malloc>
  403914:	4607      	mov	r7, r0
  403916:	b368      	cbz	r0, 403974 <setvbuf+0x12c>
  403918:	89a3      	ldrh	r3, [r4, #12]
  40391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40391e:	81a3      	strh	r3, [r4, #12]
  403920:	e7d0      	b.n	4038c4 <setvbuf+0x7c>
  403922:	2000      	movs	r0, #0
  403924:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403928:	f043 0302 	orr.w	r3, r3, #2
  40392c:	2500      	movs	r5, #0
  40392e:	2101      	movs	r1, #1
  403930:	81a3      	strh	r3, [r4, #12]
  403932:	60a5      	str	r5, [r4, #8]
  403934:	6022      	str	r2, [r4, #0]
  403936:	6122      	str	r2, [r4, #16]
  403938:	6161      	str	r1, [r4, #20]
  40393a:	b003      	add	sp, #12
  40393c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403940:	60a0      	str	r0, [r4, #8]
  403942:	b003      	add	sp, #12
  403944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403948:	6921      	ldr	r1, [r4, #16]
  40394a:	4628      	mov	r0, r5
  40394c:	f001 fa8c 	bl	404e68 <_free_r>
  403950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403954:	e7a3      	b.n	40389e <setvbuf+0x56>
  403956:	4628      	mov	r0, r5
  403958:	f001 f9bc 	bl	404cd4 <__sinit>
  40395c:	e781      	b.n	403862 <setvbuf+0x1a>
  40395e:	60a6      	str	r6, [r4, #8]
  403960:	b003      	add	sp, #12
  403962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403966:	4628      	mov	r0, r5
  403968:	f001 f9b4 	bl	404cd4 <__sinit>
  40396c:	e7ad      	b.n	4038ca <setvbuf+0x82>
  40396e:	f04f 30ff 	mov.w	r0, #4294967295
  403972:	e7e2      	b.n	40393a <setvbuf+0xf2>
  403974:	f8dd 9000 	ldr.w	r9, [sp]
  403978:	45b1      	cmp	r9, r6
  40397a:	d006      	beq.n	40398a <setvbuf+0x142>
  40397c:	4648      	mov	r0, r9
  40397e:	f001 fd85 	bl	40548c <malloc>
  403982:	4607      	mov	r7, r0
  403984:	b108      	cbz	r0, 40398a <setvbuf+0x142>
  403986:	464e      	mov	r6, r9
  403988:	e7c6      	b.n	403918 <setvbuf+0xd0>
  40398a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40398e:	f04f 30ff 	mov.w	r0, #4294967295
  403992:	e7c7      	b.n	403924 <setvbuf+0xdc>
  403994:	20400448 	.word	0x20400448
	...

004039c0 <strlen>:
  4039c0:	f890 f000 	pld	[r0]
  4039c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4039c8:	f020 0107 	bic.w	r1, r0, #7
  4039cc:	f06f 0c00 	mvn.w	ip, #0
  4039d0:	f010 0407 	ands.w	r4, r0, #7
  4039d4:	f891 f020 	pld	[r1, #32]
  4039d8:	f040 8049 	bne.w	403a6e <strlen+0xae>
  4039dc:	f04f 0400 	mov.w	r4, #0
  4039e0:	f06f 0007 	mvn.w	r0, #7
  4039e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4039e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4039ec:	f100 0008 	add.w	r0, r0, #8
  4039f0:	fa82 f24c 	uadd8	r2, r2, ip
  4039f4:	faa4 f28c 	sel	r2, r4, ip
  4039f8:	fa83 f34c 	uadd8	r3, r3, ip
  4039fc:	faa2 f38c 	sel	r3, r2, ip
  403a00:	bb4b      	cbnz	r3, 403a56 <strlen+0x96>
  403a02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403a06:	fa82 f24c 	uadd8	r2, r2, ip
  403a0a:	f100 0008 	add.w	r0, r0, #8
  403a0e:	faa4 f28c 	sel	r2, r4, ip
  403a12:	fa83 f34c 	uadd8	r3, r3, ip
  403a16:	faa2 f38c 	sel	r3, r2, ip
  403a1a:	b9e3      	cbnz	r3, 403a56 <strlen+0x96>
  403a1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403a20:	fa82 f24c 	uadd8	r2, r2, ip
  403a24:	f100 0008 	add.w	r0, r0, #8
  403a28:	faa4 f28c 	sel	r2, r4, ip
  403a2c:	fa83 f34c 	uadd8	r3, r3, ip
  403a30:	faa2 f38c 	sel	r3, r2, ip
  403a34:	b97b      	cbnz	r3, 403a56 <strlen+0x96>
  403a36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403a3a:	f101 0120 	add.w	r1, r1, #32
  403a3e:	fa82 f24c 	uadd8	r2, r2, ip
  403a42:	f100 0008 	add.w	r0, r0, #8
  403a46:	faa4 f28c 	sel	r2, r4, ip
  403a4a:	fa83 f34c 	uadd8	r3, r3, ip
  403a4e:	faa2 f38c 	sel	r3, r2, ip
  403a52:	2b00      	cmp	r3, #0
  403a54:	d0c6      	beq.n	4039e4 <strlen+0x24>
  403a56:	2a00      	cmp	r2, #0
  403a58:	bf04      	itt	eq
  403a5a:	3004      	addeq	r0, #4
  403a5c:	461a      	moveq	r2, r3
  403a5e:	ba12      	rev	r2, r2
  403a60:	fab2 f282 	clz	r2, r2
  403a64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403a68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403a6c:	4770      	bx	lr
  403a6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403a72:	f004 0503 	and.w	r5, r4, #3
  403a76:	f1c4 0000 	rsb	r0, r4, #0
  403a7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403a7e:	f014 0f04 	tst.w	r4, #4
  403a82:	f891 f040 	pld	[r1, #64]	; 0x40
  403a86:	fa0c f505 	lsl.w	r5, ip, r5
  403a8a:	ea62 0205 	orn	r2, r2, r5
  403a8e:	bf1c      	itt	ne
  403a90:	ea63 0305 	ornne	r3, r3, r5
  403a94:	4662      	movne	r2, ip
  403a96:	f04f 0400 	mov.w	r4, #0
  403a9a:	e7a9      	b.n	4039f0 <strlen+0x30>

00403a9c <__sprint_r.part.0>:
  403a9c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403aa2:	049c      	lsls	r4, r3, #18
  403aa4:	4692      	mov	sl, r2
  403aa6:	d52c      	bpl.n	403b02 <__sprint_r.part.0+0x66>
  403aa8:	6893      	ldr	r3, [r2, #8]
  403aaa:	6812      	ldr	r2, [r2, #0]
  403aac:	b33b      	cbz	r3, 403afe <__sprint_r.part.0+0x62>
  403aae:	460f      	mov	r7, r1
  403ab0:	4680      	mov	r8, r0
  403ab2:	f102 0908 	add.w	r9, r2, #8
  403ab6:	e919 0060 	ldmdb	r9, {r5, r6}
  403aba:	08b6      	lsrs	r6, r6, #2
  403abc:	d017      	beq.n	403aee <__sprint_r.part.0+0x52>
  403abe:	3d04      	subs	r5, #4
  403ac0:	2400      	movs	r4, #0
  403ac2:	e001      	b.n	403ac8 <__sprint_r.part.0+0x2c>
  403ac4:	42a6      	cmp	r6, r4
  403ac6:	d010      	beq.n	403aea <__sprint_r.part.0+0x4e>
  403ac8:	463a      	mov	r2, r7
  403aca:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403ace:	4640      	mov	r0, r8
  403ad0:	f001 f96a 	bl	404da8 <_fputwc_r>
  403ad4:	1c43      	adds	r3, r0, #1
  403ad6:	f104 0401 	add.w	r4, r4, #1
  403ada:	d1f3      	bne.n	403ac4 <__sprint_r.part.0+0x28>
  403adc:	2300      	movs	r3, #0
  403ade:	f8ca 3008 	str.w	r3, [sl, #8]
  403ae2:	f8ca 3004 	str.w	r3, [sl, #4]
  403ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403aea:	f8da 3008 	ldr.w	r3, [sl, #8]
  403aee:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  403af2:	f8ca 3008 	str.w	r3, [sl, #8]
  403af6:	f109 0908 	add.w	r9, r9, #8
  403afa:	2b00      	cmp	r3, #0
  403afc:	d1db      	bne.n	403ab6 <__sprint_r.part.0+0x1a>
  403afe:	2000      	movs	r0, #0
  403b00:	e7ec      	b.n	403adc <__sprint_r.part.0+0x40>
  403b02:	f001 fa99 	bl	405038 <__sfvwrite_r>
  403b06:	2300      	movs	r3, #0
  403b08:	f8ca 3008 	str.w	r3, [sl, #8]
  403b0c:	f8ca 3004 	str.w	r3, [sl, #4]
  403b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403b14 <_vfiprintf_r>:
  403b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b18:	b0ab      	sub	sp, #172	; 0xac
  403b1a:	461c      	mov	r4, r3
  403b1c:	9100      	str	r1, [sp, #0]
  403b1e:	4690      	mov	r8, r2
  403b20:	9304      	str	r3, [sp, #16]
  403b22:	9005      	str	r0, [sp, #20]
  403b24:	b118      	cbz	r0, 403b2e <_vfiprintf_r+0x1a>
  403b26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403b28:	2b00      	cmp	r3, #0
  403b2a:	f000 80de 	beq.w	403cea <_vfiprintf_r+0x1d6>
  403b2e:	9800      	ldr	r0, [sp, #0]
  403b30:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  403b34:	b28a      	uxth	r2, r1
  403b36:	0495      	lsls	r5, r2, #18
  403b38:	d407      	bmi.n	403b4a <_vfiprintf_r+0x36>
  403b3a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  403b3c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  403b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403b44:	8182      	strh	r2, [r0, #12]
  403b46:	6643      	str	r3, [r0, #100]	; 0x64
  403b48:	b292      	uxth	r2, r2
  403b4a:	0711      	lsls	r1, r2, #28
  403b4c:	f140 80b1 	bpl.w	403cb2 <_vfiprintf_r+0x19e>
  403b50:	9b00      	ldr	r3, [sp, #0]
  403b52:	691b      	ldr	r3, [r3, #16]
  403b54:	2b00      	cmp	r3, #0
  403b56:	f000 80ac 	beq.w	403cb2 <_vfiprintf_r+0x19e>
  403b5a:	f002 021a 	and.w	r2, r2, #26
  403b5e:	2a0a      	cmp	r2, #10
  403b60:	f000 80b5 	beq.w	403cce <_vfiprintf_r+0x1ba>
  403b64:	2300      	movs	r3, #0
  403b66:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  403b6a:	9302      	str	r3, [sp, #8]
  403b6c:	930f      	str	r3, [sp, #60]	; 0x3c
  403b6e:	930e      	str	r3, [sp, #56]	; 0x38
  403b70:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  403b74:	46da      	mov	sl, fp
  403b76:	f898 3000 	ldrb.w	r3, [r8]
  403b7a:	4644      	mov	r4, r8
  403b7c:	b1fb      	cbz	r3, 403bbe <_vfiprintf_r+0xaa>
  403b7e:	2b25      	cmp	r3, #37	; 0x25
  403b80:	d102      	bne.n	403b88 <_vfiprintf_r+0x74>
  403b82:	e01c      	b.n	403bbe <_vfiprintf_r+0xaa>
  403b84:	2b25      	cmp	r3, #37	; 0x25
  403b86:	d003      	beq.n	403b90 <_vfiprintf_r+0x7c>
  403b88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403b8c:	2b00      	cmp	r3, #0
  403b8e:	d1f9      	bne.n	403b84 <_vfiprintf_r+0x70>
  403b90:	ebc8 0504 	rsb	r5, r8, r4
  403b94:	b19d      	cbz	r5, 403bbe <_vfiprintf_r+0xaa>
  403b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403b98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403b9a:	f8ca 8000 	str.w	r8, [sl]
  403b9e:	3301      	adds	r3, #1
  403ba0:	442a      	add	r2, r5
  403ba2:	2b07      	cmp	r3, #7
  403ba4:	f8ca 5004 	str.w	r5, [sl, #4]
  403ba8:	920f      	str	r2, [sp, #60]	; 0x3c
  403baa:	930e      	str	r3, [sp, #56]	; 0x38
  403bac:	dd7b      	ble.n	403ca6 <_vfiprintf_r+0x192>
  403bae:	2a00      	cmp	r2, #0
  403bb0:	f040 8528 	bne.w	404604 <_vfiprintf_r+0xaf0>
  403bb4:	9b02      	ldr	r3, [sp, #8]
  403bb6:	920e      	str	r2, [sp, #56]	; 0x38
  403bb8:	442b      	add	r3, r5
  403bba:	46da      	mov	sl, fp
  403bbc:	9302      	str	r3, [sp, #8]
  403bbe:	7823      	ldrb	r3, [r4, #0]
  403bc0:	2b00      	cmp	r3, #0
  403bc2:	f000 843e 	beq.w	404442 <_vfiprintf_r+0x92e>
  403bc6:	2100      	movs	r1, #0
  403bc8:	f04f 0300 	mov.w	r3, #0
  403bcc:	f04f 32ff 	mov.w	r2, #4294967295
  403bd0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403bd4:	f104 0801 	add.w	r8, r4, #1
  403bd8:	7863      	ldrb	r3, [r4, #1]
  403bda:	9201      	str	r2, [sp, #4]
  403bdc:	4608      	mov	r0, r1
  403bde:	460e      	mov	r6, r1
  403be0:	460c      	mov	r4, r1
  403be2:	f108 0801 	add.w	r8, r8, #1
  403be6:	f1a3 0220 	sub.w	r2, r3, #32
  403bea:	2a58      	cmp	r2, #88	; 0x58
  403bec:	f200 8393 	bhi.w	404316 <_vfiprintf_r+0x802>
  403bf0:	e8df f012 	tbh	[pc, r2, lsl #1]
  403bf4:	03910346 	.word	0x03910346
  403bf8:	034e0391 	.word	0x034e0391
  403bfc:	03910391 	.word	0x03910391
  403c00:	03910391 	.word	0x03910391
  403c04:	03910391 	.word	0x03910391
  403c08:	02670289 	.word	0x02670289
  403c0c:	00800391 	.word	0x00800391
  403c10:	0391026c 	.word	0x0391026c
  403c14:	025901c6 	.word	0x025901c6
  403c18:	02590259 	.word	0x02590259
  403c1c:	02590259 	.word	0x02590259
  403c20:	02590259 	.word	0x02590259
  403c24:	02590259 	.word	0x02590259
  403c28:	03910391 	.word	0x03910391
  403c2c:	03910391 	.word	0x03910391
  403c30:	03910391 	.word	0x03910391
  403c34:	03910391 	.word	0x03910391
  403c38:	03910391 	.word	0x03910391
  403c3c:	039101cb 	.word	0x039101cb
  403c40:	03910391 	.word	0x03910391
  403c44:	03910391 	.word	0x03910391
  403c48:	03910391 	.word	0x03910391
  403c4c:	03910391 	.word	0x03910391
  403c50:	02140391 	.word	0x02140391
  403c54:	03910391 	.word	0x03910391
  403c58:	03910391 	.word	0x03910391
  403c5c:	02ee0391 	.word	0x02ee0391
  403c60:	03910391 	.word	0x03910391
  403c64:	03910311 	.word	0x03910311
  403c68:	03910391 	.word	0x03910391
  403c6c:	03910391 	.word	0x03910391
  403c70:	03910391 	.word	0x03910391
  403c74:	03910391 	.word	0x03910391
  403c78:	03340391 	.word	0x03340391
  403c7c:	0391038a 	.word	0x0391038a
  403c80:	03910391 	.word	0x03910391
  403c84:	038a0367 	.word	0x038a0367
  403c88:	03910391 	.word	0x03910391
  403c8c:	0391036c 	.word	0x0391036c
  403c90:	02950379 	.word	0x02950379
  403c94:	02e90085 	.word	0x02e90085
  403c98:	029b0391 	.word	0x029b0391
  403c9c:	02ba0391 	.word	0x02ba0391
  403ca0:	03910391 	.word	0x03910391
  403ca4:	0353      	.short	0x0353
  403ca6:	f10a 0a08 	add.w	sl, sl, #8
  403caa:	9b02      	ldr	r3, [sp, #8]
  403cac:	442b      	add	r3, r5
  403cae:	9302      	str	r3, [sp, #8]
  403cb0:	e785      	b.n	403bbe <_vfiprintf_r+0xaa>
  403cb2:	9900      	ldr	r1, [sp, #0]
  403cb4:	9805      	ldr	r0, [sp, #20]
  403cb6:	f000 fe61 	bl	40497c <__swsetup_r>
  403cba:	2800      	cmp	r0, #0
  403cbc:	f040 8558 	bne.w	404770 <_vfiprintf_r+0xc5c>
  403cc0:	9b00      	ldr	r3, [sp, #0]
  403cc2:	899a      	ldrh	r2, [r3, #12]
  403cc4:	f002 021a 	and.w	r2, r2, #26
  403cc8:	2a0a      	cmp	r2, #10
  403cca:	f47f af4b 	bne.w	403b64 <_vfiprintf_r+0x50>
  403cce:	9900      	ldr	r1, [sp, #0]
  403cd0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  403cd4:	2b00      	cmp	r3, #0
  403cd6:	f6ff af45 	blt.w	403b64 <_vfiprintf_r+0x50>
  403cda:	4623      	mov	r3, r4
  403cdc:	4642      	mov	r2, r8
  403cde:	9805      	ldr	r0, [sp, #20]
  403ce0:	f000 fe16 	bl	404910 <__sbprintf>
  403ce4:	b02b      	add	sp, #172	; 0xac
  403ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cea:	f000 fff3 	bl	404cd4 <__sinit>
  403cee:	e71e      	b.n	403b2e <_vfiprintf_r+0x1a>
  403cf0:	4264      	negs	r4, r4
  403cf2:	9304      	str	r3, [sp, #16]
  403cf4:	f046 0604 	orr.w	r6, r6, #4
  403cf8:	f898 3000 	ldrb.w	r3, [r8]
  403cfc:	e771      	b.n	403be2 <_vfiprintf_r+0xce>
  403cfe:	2130      	movs	r1, #48	; 0x30
  403d00:	9804      	ldr	r0, [sp, #16]
  403d02:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  403d06:	9901      	ldr	r1, [sp, #4]
  403d08:	9406      	str	r4, [sp, #24]
  403d0a:	f04f 0300 	mov.w	r3, #0
  403d0e:	2278      	movs	r2, #120	; 0x78
  403d10:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  403d14:	2900      	cmp	r1, #0
  403d16:	4603      	mov	r3, r0
  403d18:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  403d1c:	6804      	ldr	r4, [r0, #0]
  403d1e:	f103 0304 	add.w	r3, r3, #4
  403d22:	f04f 0500 	mov.w	r5, #0
  403d26:	f046 0202 	orr.w	r2, r6, #2
  403d2a:	f2c0 8525 	blt.w	404778 <_vfiprintf_r+0xc64>
  403d2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403d32:	ea54 0205 	orrs.w	r2, r4, r5
  403d36:	f046 0602 	orr.w	r6, r6, #2
  403d3a:	9304      	str	r3, [sp, #16]
  403d3c:	f040 84bf 	bne.w	4046be <_vfiprintf_r+0xbaa>
  403d40:	48b3      	ldr	r0, [pc, #716]	; (404010 <_vfiprintf_r+0x4fc>)
  403d42:	9b01      	ldr	r3, [sp, #4]
  403d44:	2b00      	cmp	r3, #0
  403d46:	f040 841c 	bne.w	404582 <_vfiprintf_r+0xa6e>
  403d4a:	4699      	mov	r9, r3
  403d4c:	2300      	movs	r3, #0
  403d4e:	9301      	str	r3, [sp, #4]
  403d50:	9303      	str	r3, [sp, #12]
  403d52:	465f      	mov	r7, fp
  403d54:	9b01      	ldr	r3, [sp, #4]
  403d56:	9a03      	ldr	r2, [sp, #12]
  403d58:	4293      	cmp	r3, r2
  403d5a:	bfb8      	it	lt
  403d5c:	4613      	movlt	r3, r2
  403d5e:	461d      	mov	r5, r3
  403d60:	f1b9 0f00 	cmp.w	r9, #0
  403d64:	d000      	beq.n	403d68 <_vfiprintf_r+0x254>
  403d66:	3501      	adds	r5, #1
  403d68:	f016 0302 	ands.w	r3, r6, #2
  403d6c:	9307      	str	r3, [sp, #28]
  403d6e:	bf18      	it	ne
  403d70:	3502      	addne	r5, #2
  403d72:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  403d76:	9308      	str	r3, [sp, #32]
  403d78:	f040 82f1 	bne.w	40435e <_vfiprintf_r+0x84a>
  403d7c:	9b06      	ldr	r3, [sp, #24]
  403d7e:	1b5c      	subs	r4, r3, r5
  403d80:	2c00      	cmp	r4, #0
  403d82:	f340 82ec 	ble.w	40435e <_vfiprintf_r+0x84a>
  403d86:	2c10      	cmp	r4, #16
  403d88:	f340 8556 	ble.w	404838 <_vfiprintf_r+0xd24>
  403d8c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 404014 <_vfiprintf_r+0x500>
  403d90:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  403d94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403d96:	46d4      	mov	ip, sl
  403d98:	2310      	movs	r3, #16
  403d9a:	46c2      	mov	sl, r8
  403d9c:	4670      	mov	r0, lr
  403d9e:	46a8      	mov	r8, r5
  403da0:	464d      	mov	r5, r9
  403da2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403da6:	e007      	b.n	403db8 <_vfiprintf_r+0x2a4>
  403da8:	f100 0e02 	add.w	lr, r0, #2
  403dac:	f10c 0c08 	add.w	ip, ip, #8
  403db0:	4608      	mov	r0, r1
  403db2:	3c10      	subs	r4, #16
  403db4:	2c10      	cmp	r4, #16
  403db6:	dd13      	ble.n	403de0 <_vfiprintf_r+0x2cc>
  403db8:	1c41      	adds	r1, r0, #1
  403dba:	3210      	adds	r2, #16
  403dbc:	2907      	cmp	r1, #7
  403dbe:	920f      	str	r2, [sp, #60]	; 0x3c
  403dc0:	f8cc 5000 	str.w	r5, [ip]
  403dc4:	f8cc 3004 	str.w	r3, [ip, #4]
  403dc8:	910e      	str	r1, [sp, #56]	; 0x38
  403dca:	dded      	ble.n	403da8 <_vfiprintf_r+0x294>
  403dcc:	2a00      	cmp	r2, #0
  403dce:	f040 82b7 	bne.w	404340 <_vfiprintf_r+0x82c>
  403dd2:	3c10      	subs	r4, #16
  403dd4:	2c10      	cmp	r4, #16
  403dd6:	4610      	mov	r0, r2
  403dd8:	f04f 0e01 	mov.w	lr, #1
  403ddc:	46dc      	mov	ip, fp
  403dde:	dceb      	bgt.n	403db8 <_vfiprintf_r+0x2a4>
  403de0:	46a9      	mov	r9, r5
  403de2:	4670      	mov	r0, lr
  403de4:	4645      	mov	r5, r8
  403de6:	46d0      	mov	r8, sl
  403de8:	46e2      	mov	sl, ip
  403dea:	4422      	add	r2, r4
  403dec:	2807      	cmp	r0, #7
  403dee:	920f      	str	r2, [sp, #60]	; 0x3c
  403df0:	f8ca 9000 	str.w	r9, [sl]
  403df4:	f8ca 4004 	str.w	r4, [sl, #4]
  403df8:	900e      	str	r0, [sp, #56]	; 0x38
  403dfa:	f300 8375 	bgt.w	4044e8 <_vfiprintf_r+0x9d4>
  403dfe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  403e02:	f10a 0a08 	add.w	sl, sl, #8
  403e06:	f100 0e01 	add.w	lr, r0, #1
  403e0a:	2b00      	cmp	r3, #0
  403e0c:	f040 82b0 	bne.w	404370 <_vfiprintf_r+0x85c>
  403e10:	9b07      	ldr	r3, [sp, #28]
  403e12:	2b00      	cmp	r3, #0
  403e14:	f000 82c3 	beq.w	40439e <_vfiprintf_r+0x88a>
  403e18:	3202      	adds	r2, #2
  403e1a:	a90c      	add	r1, sp, #48	; 0x30
  403e1c:	2302      	movs	r3, #2
  403e1e:	f1be 0f07 	cmp.w	lr, #7
  403e22:	920f      	str	r2, [sp, #60]	; 0x3c
  403e24:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  403e28:	e88a 000a 	stmia.w	sl, {r1, r3}
  403e2c:	f340 8378 	ble.w	404520 <_vfiprintf_r+0xa0c>
  403e30:	2a00      	cmp	r2, #0
  403e32:	f040 840a 	bne.w	40464a <_vfiprintf_r+0xb36>
  403e36:	9b08      	ldr	r3, [sp, #32]
  403e38:	2b80      	cmp	r3, #128	; 0x80
  403e3a:	f04f 0e01 	mov.w	lr, #1
  403e3e:	4610      	mov	r0, r2
  403e40:	46da      	mov	sl, fp
  403e42:	f040 82b0 	bne.w	4043a6 <_vfiprintf_r+0x892>
  403e46:	9b06      	ldr	r3, [sp, #24]
  403e48:	1b5c      	subs	r4, r3, r5
  403e4a:	2c00      	cmp	r4, #0
  403e4c:	f340 82ab 	ble.w	4043a6 <_vfiprintf_r+0x892>
  403e50:	2c10      	cmp	r4, #16
  403e52:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 404018 <_vfiprintf_r+0x504>
  403e56:	f340 850b 	ble.w	404870 <_vfiprintf_r+0xd5c>
  403e5a:	46d6      	mov	lr, sl
  403e5c:	2310      	movs	r3, #16
  403e5e:	46c2      	mov	sl, r8
  403e60:	46a8      	mov	r8, r5
  403e62:	464d      	mov	r5, r9
  403e64:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403e68:	e007      	b.n	403e7a <_vfiprintf_r+0x366>
  403e6a:	f100 0c02 	add.w	ip, r0, #2
  403e6e:	f10e 0e08 	add.w	lr, lr, #8
  403e72:	4608      	mov	r0, r1
  403e74:	3c10      	subs	r4, #16
  403e76:	2c10      	cmp	r4, #16
  403e78:	dd13      	ble.n	403ea2 <_vfiprintf_r+0x38e>
  403e7a:	1c41      	adds	r1, r0, #1
  403e7c:	3210      	adds	r2, #16
  403e7e:	2907      	cmp	r1, #7
  403e80:	920f      	str	r2, [sp, #60]	; 0x3c
  403e82:	f8ce 5000 	str.w	r5, [lr]
  403e86:	f8ce 3004 	str.w	r3, [lr, #4]
  403e8a:	910e      	str	r1, [sp, #56]	; 0x38
  403e8c:	dded      	ble.n	403e6a <_vfiprintf_r+0x356>
  403e8e:	2a00      	cmp	r2, #0
  403e90:	f040 8315 	bne.w	4044be <_vfiprintf_r+0x9aa>
  403e94:	3c10      	subs	r4, #16
  403e96:	2c10      	cmp	r4, #16
  403e98:	f04f 0c01 	mov.w	ip, #1
  403e9c:	4610      	mov	r0, r2
  403e9e:	46de      	mov	lr, fp
  403ea0:	dceb      	bgt.n	403e7a <_vfiprintf_r+0x366>
  403ea2:	46a9      	mov	r9, r5
  403ea4:	4645      	mov	r5, r8
  403ea6:	46d0      	mov	r8, sl
  403ea8:	46f2      	mov	sl, lr
  403eaa:	4422      	add	r2, r4
  403eac:	f1bc 0f07 	cmp.w	ip, #7
  403eb0:	920f      	str	r2, [sp, #60]	; 0x3c
  403eb2:	f8ca 9000 	str.w	r9, [sl]
  403eb6:	f8ca 4004 	str.w	r4, [sl, #4]
  403eba:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  403ebe:	f300 83d2 	bgt.w	404666 <_vfiprintf_r+0xb52>
  403ec2:	9b01      	ldr	r3, [sp, #4]
  403ec4:	9903      	ldr	r1, [sp, #12]
  403ec6:	1a5c      	subs	r4, r3, r1
  403ec8:	2c00      	cmp	r4, #0
  403eca:	f10a 0a08 	add.w	sl, sl, #8
  403ece:	f10c 0e01 	add.w	lr, ip, #1
  403ed2:	4660      	mov	r0, ip
  403ed4:	f300 826d 	bgt.w	4043b2 <_vfiprintf_r+0x89e>
  403ed8:	9903      	ldr	r1, [sp, #12]
  403eda:	f8ca 7000 	str.w	r7, [sl]
  403ede:	440a      	add	r2, r1
  403ee0:	f1be 0f07 	cmp.w	lr, #7
  403ee4:	920f      	str	r2, [sp, #60]	; 0x3c
  403ee6:	f8ca 1004 	str.w	r1, [sl, #4]
  403eea:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  403eee:	f340 82ce 	ble.w	40448e <_vfiprintf_r+0x97a>
  403ef2:	2a00      	cmp	r2, #0
  403ef4:	f040 833a 	bne.w	40456c <_vfiprintf_r+0xa58>
  403ef8:	0770      	lsls	r0, r6, #29
  403efa:	920e      	str	r2, [sp, #56]	; 0x38
  403efc:	d538      	bpl.n	403f70 <_vfiprintf_r+0x45c>
  403efe:	9b06      	ldr	r3, [sp, #24]
  403f00:	1b5c      	subs	r4, r3, r5
  403f02:	2c00      	cmp	r4, #0
  403f04:	dd34      	ble.n	403f70 <_vfiprintf_r+0x45c>
  403f06:	46da      	mov	sl, fp
  403f08:	2c10      	cmp	r4, #16
  403f0a:	f340 84ab 	ble.w	404864 <_vfiprintf_r+0xd50>
  403f0e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 404014 <_vfiprintf_r+0x500>
  403f12:	990e      	ldr	r1, [sp, #56]	; 0x38
  403f14:	464f      	mov	r7, r9
  403f16:	2610      	movs	r6, #16
  403f18:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403f1c:	e006      	b.n	403f2c <_vfiprintf_r+0x418>
  403f1e:	1c88      	adds	r0, r1, #2
  403f20:	f10a 0a08 	add.w	sl, sl, #8
  403f24:	4619      	mov	r1, r3
  403f26:	3c10      	subs	r4, #16
  403f28:	2c10      	cmp	r4, #16
  403f2a:	dd13      	ble.n	403f54 <_vfiprintf_r+0x440>
  403f2c:	1c4b      	adds	r3, r1, #1
  403f2e:	3210      	adds	r2, #16
  403f30:	2b07      	cmp	r3, #7
  403f32:	920f      	str	r2, [sp, #60]	; 0x3c
  403f34:	f8ca 7000 	str.w	r7, [sl]
  403f38:	f8ca 6004 	str.w	r6, [sl, #4]
  403f3c:	930e      	str	r3, [sp, #56]	; 0x38
  403f3e:	ddee      	ble.n	403f1e <_vfiprintf_r+0x40a>
  403f40:	2a00      	cmp	r2, #0
  403f42:	f040 828e 	bne.w	404462 <_vfiprintf_r+0x94e>
  403f46:	3c10      	subs	r4, #16
  403f48:	2c10      	cmp	r4, #16
  403f4a:	f04f 0001 	mov.w	r0, #1
  403f4e:	4611      	mov	r1, r2
  403f50:	46da      	mov	sl, fp
  403f52:	dceb      	bgt.n	403f2c <_vfiprintf_r+0x418>
  403f54:	46b9      	mov	r9, r7
  403f56:	4422      	add	r2, r4
  403f58:	2807      	cmp	r0, #7
  403f5a:	920f      	str	r2, [sp, #60]	; 0x3c
  403f5c:	f8ca 9000 	str.w	r9, [sl]
  403f60:	f8ca 4004 	str.w	r4, [sl, #4]
  403f64:	900e      	str	r0, [sp, #56]	; 0x38
  403f66:	f340 829b 	ble.w	4044a0 <_vfiprintf_r+0x98c>
  403f6a:	2a00      	cmp	r2, #0
  403f6c:	f040 8425 	bne.w	4047ba <_vfiprintf_r+0xca6>
  403f70:	9b02      	ldr	r3, [sp, #8]
  403f72:	9a06      	ldr	r2, [sp, #24]
  403f74:	42aa      	cmp	r2, r5
  403f76:	bfac      	ite	ge
  403f78:	189b      	addge	r3, r3, r2
  403f7a:	195b      	addlt	r3, r3, r5
  403f7c:	9302      	str	r3, [sp, #8]
  403f7e:	e299      	b.n	4044b4 <_vfiprintf_r+0x9a0>
  403f80:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  403f84:	f898 3000 	ldrb.w	r3, [r8]
  403f88:	e62b      	b.n	403be2 <_vfiprintf_r+0xce>
  403f8a:	9406      	str	r4, [sp, #24]
  403f8c:	2900      	cmp	r1, #0
  403f8e:	f040 84af 	bne.w	4048f0 <_vfiprintf_r+0xddc>
  403f92:	f046 0610 	orr.w	r6, r6, #16
  403f96:	06b3      	lsls	r3, r6, #26
  403f98:	f140 8312 	bpl.w	4045c0 <_vfiprintf_r+0xaac>
  403f9c:	9904      	ldr	r1, [sp, #16]
  403f9e:	3107      	adds	r1, #7
  403fa0:	f021 0107 	bic.w	r1, r1, #7
  403fa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  403fa8:	3108      	adds	r1, #8
  403faa:	9104      	str	r1, [sp, #16]
  403fac:	4614      	mov	r4, r2
  403fae:	461d      	mov	r5, r3
  403fb0:	2a00      	cmp	r2, #0
  403fb2:	f173 0300 	sbcs.w	r3, r3, #0
  403fb6:	f2c0 8386 	blt.w	4046c6 <_vfiprintf_r+0xbb2>
  403fba:	9b01      	ldr	r3, [sp, #4]
  403fbc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  403fc0:	2b00      	cmp	r3, #0
  403fc2:	f2c0 831a 	blt.w	4045fa <_vfiprintf_r+0xae6>
  403fc6:	ea54 0305 	orrs.w	r3, r4, r5
  403fca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  403fce:	f000 80ed 	beq.w	4041ac <_vfiprintf_r+0x698>
  403fd2:	2d00      	cmp	r5, #0
  403fd4:	bf08      	it	eq
  403fd6:	2c0a      	cmpeq	r4, #10
  403fd8:	f0c0 80ed 	bcc.w	4041b6 <_vfiprintf_r+0x6a2>
  403fdc:	465f      	mov	r7, fp
  403fde:	4620      	mov	r0, r4
  403fe0:	4629      	mov	r1, r5
  403fe2:	220a      	movs	r2, #10
  403fe4:	2300      	movs	r3, #0
  403fe6:	f002 fa47 	bl	406478 <__aeabi_uldivmod>
  403fea:	3230      	adds	r2, #48	; 0x30
  403fec:	f807 2d01 	strb.w	r2, [r7, #-1]!
  403ff0:	4620      	mov	r0, r4
  403ff2:	4629      	mov	r1, r5
  403ff4:	2300      	movs	r3, #0
  403ff6:	220a      	movs	r2, #10
  403ff8:	f002 fa3e 	bl	406478 <__aeabi_uldivmod>
  403ffc:	4604      	mov	r4, r0
  403ffe:	460d      	mov	r5, r1
  404000:	ea54 0305 	orrs.w	r3, r4, r5
  404004:	d1eb      	bne.n	403fde <_vfiprintf_r+0x4ca>
  404006:	ebc7 030b 	rsb	r3, r7, fp
  40400a:	9303      	str	r3, [sp, #12]
  40400c:	e6a2      	b.n	403d54 <_vfiprintf_r+0x240>
  40400e:	bf00      	nop
  404010:	00407724 	.word	0x00407724
  404014:	00407740 	.word	0x00407740
  404018:	00407700 	.word	0x00407700
  40401c:	9406      	str	r4, [sp, #24]
  40401e:	2900      	cmp	r1, #0
  404020:	f040 8462 	bne.w	4048e8 <_vfiprintf_r+0xdd4>
  404024:	f046 0610 	orr.w	r6, r6, #16
  404028:	f016 0320 	ands.w	r3, r6, #32
  40402c:	f000 82ae 	beq.w	40458c <_vfiprintf_r+0xa78>
  404030:	9b04      	ldr	r3, [sp, #16]
  404032:	3307      	adds	r3, #7
  404034:	f023 0307 	bic.w	r3, r3, #7
  404038:	f04f 0200 	mov.w	r2, #0
  40403c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404040:	e9d3 4500 	ldrd	r4, r5, [r3]
  404044:	f103 0208 	add.w	r2, r3, #8
  404048:	9b01      	ldr	r3, [sp, #4]
  40404a:	9204      	str	r2, [sp, #16]
  40404c:	2b00      	cmp	r3, #0
  40404e:	f2c0 8174 	blt.w	40433a <_vfiprintf_r+0x826>
  404052:	ea54 0305 	orrs.w	r3, r4, r5
  404056:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40405a:	f040 816e 	bne.w	40433a <_vfiprintf_r+0x826>
  40405e:	9b01      	ldr	r3, [sp, #4]
  404060:	2b00      	cmp	r3, #0
  404062:	f000 8430 	beq.w	4048c6 <_vfiprintf_r+0xdb2>
  404066:	f04f 0900 	mov.w	r9, #0
  40406a:	2400      	movs	r4, #0
  40406c:	2500      	movs	r5, #0
  40406e:	465f      	mov	r7, fp
  404070:	08e2      	lsrs	r2, r4, #3
  404072:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404076:	08e9      	lsrs	r1, r5, #3
  404078:	f004 0307 	and.w	r3, r4, #7
  40407c:	460d      	mov	r5, r1
  40407e:	4614      	mov	r4, r2
  404080:	3330      	adds	r3, #48	; 0x30
  404082:	ea54 0205 	orrs.w	r2, r4, r5
  404086:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40408a:	d1f1      	bne.n	404070 <_vfiprintf_r+0x55c>
  40408c:	07f4      	lsls	r4, r6, #31
  40408e:	d5ba      	bpl.n	404006 <_vfiprintf_r+0x4f2>
  404090:	2b30      	cmp	r3, #48	; 0x30
  404092:	d0b8      	beq.n	404006 <_vfiprintf_r+0x4f2>
  404094:	2230      	movs	r2, #48	; 0x30
  404096:	1e7b      	subs	r3, r7, #1
  404098:	f807 2c01 	strb.w	r2, [r7, #-1]
  40409c:	ebc3 020b 	rsb	r2, r3, fp
  4040a0:	9203      	str	r2, [sp, #12]
  4040a2:	461f      	mov	r7, r3
  4040a4:	e656      	b.n	403d54 <_vfiprintf_r+0x240>
  4040a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4040aa:	2400      	movs	r4, #0
  4040ac:	f818 3b01 	ldrb.w	r3, [r8], #1
  4040b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4040b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4040b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4040bc:	2a09      	cmp	r2, #9
  4040be:	d9f5      	bls.n	4040ac <_vfiprintf_r+0x598>
  4040c0:	e591      	b.n	403be6 <_vfiprintf_r+0xd2>
  4040c2:	f898 3000 	ldrb.w	r3, [r8]
  4040c6:	2101      	movs	r1, #1
  4040c8:	202b      	movs	r0, #43	; 0x2b
  4040ca:	e58a      	b.n	403be2 <_vfiprintf_r+0xce>
  4040cc:	f898 3000 	ldrb.w	r3, [r8]
  4040d0:	2b2a      	cmp	r3, #42	; 0x2a
  4040d2:	f108 0501 	add.w	r5, r8, #1
  4040d6:	f000 83dd 	beq.w	404894 <_vfiprintf_r+0xd80>
  4040da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4040de:	2a09      	cmp	r2, #9
  4040e0:	46a8      	mov	r8, r5
  4040e2:	bf98      	it	ls
  4040e4:	2500      	movls	r5, #0
  4040e6:	f200 83ce 	bhi.w	404886 <_vfiprintf_r+0xd72>
  4040ea:	f818 3b01 	ldrb.w	r3, [r8], #1
  4040ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4040f2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4040f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4040fa:	2a09      	cmp	r2, #9
  4040fc:	d9f5      	bls.n	4040ea <_vfiprintf_r+0x5d6>
  4040fe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  404102:	9201      	str	r2, [sp, #4]
  404104:	e56f      	b.n	403be6 <_vfiprintf_r+0xd2>
  404106:	9a04      	ldr	r2, [sp, #16]
  404108:	6814      	ldr	r4, [r2, #0]
  40410a:	4613      	mov	r3, r2
  40410c:	2c00      	cmp	r4, #0
  40410e:	f103 0304 	add.w	r3, r3, #4
  404112:	f6ff aded 	blt.w	403cf0 <_vfiprintf_r+0x1dc>
  404116:	9304      	str	r3, [sp, #16]
  404118:	f898 3000 	ldrb.w	r3, [r8]
  40411c:	e561      	b.n	403be2 <_vfiprintf_r+0xce>
  40411e:	9406      	str	r4, [sp, #24]
  404120:	2900      	cmp	r1, #0
  404122:	d081      	beq.n	404028 <_vfiprintf_r+0x514>
  404124:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404128:	e77e      	b.n	404028 <_vfiprintf_r+0x514>
  40412a:	9a04      	ldr	r2, [sp, #16]
  40412c:	9406      	str	r4, [sp, #24]
  40412e:	6817      	ldr	r7, [r2, #0]
  404130:	f04f 0300 	mov.w	r3, #0
  404134:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404138:	1d14      	adds	r4, r2, #4
  40413a:	9b01      	ldr	r3, [sp, #4]
  40413c:	2f00      	cmp	r7, #0
  40413e:	f000 8386 	beq.w	40484e <_vfiprintf_r+0xd3a>
  404142:	2b00      	cmp	r3, #0
  404144:	f2c0 835f 	blt.w	404806 <_vfiprintf_r+0xcf2>
  404148:	461a      	mov	r2, r3
  40414a:	2100      	movs	r1, #0
  40414c:	4638      	mov	r0, r7
  40414e:	f001 fc5f 	bl	405a10 <memchr>
  404152:	2800      	cmp	r0, #0
  404154:	f000 838f 	beq.w	404876 <_vfiprintf_r+0xd62>
  404158:	1bc3      	subs	r3, r0, r7
  40415a:	9303      	str	r3, [sp, #12]
  40415c:	2300      	movs	r3, #0
  40415e:	9404      	str	r4, [sp, #16]
  404160:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  404164:	9301      	str	r3, [sp, #4]
  404166:	e5f5      	b.n	403d54 <_vfiprintf_r+0x240>
  404168:	9406      	str	r4, [sp, #24]
  40416a:	2900      	cmp	r1, #0
  40416c:	f040 83b9 	bne.w	4048e2 <_vfiprintf_r+0xdce>
  404170:	f016 0920 	ands.w	r9, r6, #32
  404174:	d135      	bne.n	4041e2 <_vfiprintf_r+0x6ce>
  404176:	f016 0310 	ands.w	r3, r6, #16
  40417a:	d103      	bne.n	404184 <_vfiprintf_r+0x670>
  40417c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  404180:	f040 832a 	bne.w	4047d8 <_vfiprintf_r+0xcc4>
  404184:	9a04      	ldr	r2, [sp, #16]
  404186:	4613      	mov	r3, r2
  404188:	6814      	ldr	r4, [r2, #0]
  40418a:	9a01      	ldr	r2, [sp, #4]
  40418c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404190:	2a00      	cmp	r2, #0
  404192:	f103 0304 	add.w	r3, r3, #4
  404196:	f04f 0500 	mov.w	r5, #0
  40419a:	f2c0 8332 	blt.w	404802 <_vfiprintf_r+0xcee>
  40419e:	ea54 0205 	orrs.w	r2, r4, r5
  4041a2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4041a6:	9304      	str	r3, [sp, #16]
  4041a8:	f47f af13 	bne.w	403fd2 <_vfiprintf_r+0x4be>
  4041ac:	9b01      	ldr	r3, [sp, #4]
  4041ae:	2b00      	cmp	r3, #0
  4041b0:	f43f adcc 	beq.w	403d4c <_vfiprintf_r+0x238>
  4041b4:	2400      	movs	r4, #0
  4041b6:	af2a      	add	r7, sp, #168	; 0xa8
  4041b8:	3430      	adds	r4, #48	; 0x30
  4041ba:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4041be:	ebc7 030b 	rsb	r3, r7, fp
  4041c2:	9303      	str	r3, [sp, #12]
  4041c4:	e5c6      	b.n	403d54 <_vfiprintf_r+0x240>
  4041c6:	f046 0620 	orr.w	r6, r6, #32
  4041ca:	f898 3000 	ldrb.w	r3, [r8]
  4041ce:	e508      	b.n	403be2 <_vfiprintf_r+0xce>
  4041d0:	9406      	str	r4, [sp, #24]
  4041d2:	2900      	cmp	r1, #0
  4041d4:	f040 836e 	bne.w	4048b4 <_vfiprintf_r+0xda0>
  4041d8:	f046 0610 	orr.w	r6, r6, #16
  4041dc:	f016 0920 	ands.w	r9, r6, #32
  4041e0:	d0c9      	beq.n	404176 <_vfiprintf_r+0x662>
  4041e2:	9b04      	ldr	r3, [sp, #16]
  4041e4:	3307      	adds	r3, #7
  4041e6:	f023 0307 	bic.w	r3, r3, #7
  4041ea:	f04f 0200 	mov.w	r2, #0
  4041ee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4041f2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4041f6:	f103 0208 	add.w	r2, r3, #8
  4041fa:	9b01      	ldr	r3, [sp, #4]
  4041fc:	9204      	str	r2, [sp, #16]
  4041fe:	2b00      	cmp	r3, #0
  404200:	f2c0 81f9 	blt.w	4045f6 <_vfiprintf_r+0xae2>
  404204:	ea54 0305 	orrs.w	r3, r4, r5
  404208:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40420c:	f04f 0900 	mov.w	r9, #0
  404210:	f47f aedf 	bne.w	403fd2 <_vfiprintf_r+0x4be>
  404214:	e7ca      	b.n	4041ac <_vfiprintf_r+0x698>
  404216:	9406      	str	r4, [sp, #24]
  404218:	2900      	cmp	r1, #0
  40421a:	f040 8351 	bne.w	4048c0 <_vfiprintf_r+0xdac>
  40421e:	06b2      	lsls	r2, r6, #26
  404220:	48ae      	ldr	r0, [pc, #696]	; (4044dc <_vfiprintf_r+0x9c8>)
  404222:	d541      	bpl.n	4042a8 <_vfiprintf_r+0x794>
  404224:	9a04      	ldr	r2, [sp, #16]
  404226:	3207      	adds	r2, #7
  404228:	f022 0207 	bic.w	r2, r2, #7
  40422c:	e9d2 4500 	ldrd	r4, r5, [r2]
  404230:	f102 0108 	add.w	r1, r2, #8
  404234:	9104      	str	r1, [sp, #16]
  404236:	f016 0901 	ands.w	r9, r6, #1
  40423a:	f000 8177 	beq.w	40452c <_vfiprintf_r+0xa18>
  40423e:	ea54 0205 	orrs.w	r2, r4, r5
  404242:	f040 8226 	bne.w	404692 <_vfiprintf_r+0xb7e>
  404246:	f04f 0300 	mov.w	r3, #0
  40424a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40424e:	9b01      	ldr	r3, [sp, #4]
  404250:	2b00      	cmp	r3, #0
  404252:	f2c0 8196 	blt.w	404582 <_vfiprintf_r+0xa6e>
  404256:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40425a:	e572      	b.n	403d42 <_vfiprintf_r+0x22e>
  40425c:	9a04      	ldr	r2, [sp, #16]
  40425e:	9406      	str	r4, [sp, #24]
  404260:	6813      	ldr	r3, [r2, #0]
  404262:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  404266:	4613      	mov	r3, r2
  404268:	f04f 0100 	mov.w	r1, #0
  40426c:	2501      	movs	r5, #1
  40426e:	3304      	adds	r3, #4
  404270:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  404274:	9304      	str	r3, [sp, #16]
  404276:	9503      	str	r5, [sp, #12]
  404278:	af10      	add	r7, sp, #64	; 0x40
  40427a:	2300      	movs	r3, #0
  40427c:	9301      	str	r3, [sp, #4]
  40427e:	e573      	b.n	403d68 <_vfiprintf_r+0x254>
  404280:	f898 3000 	ldrb.w	r3, [r8]
  404284:	2800      	cmp	r0, #0
  404286:	f47f acac 	bne.w	403be2 <_vfiprintf_r+0xce>
  40428a:	2101      	movs	r1, #1
  40428c:	2020      	movs	r0, #32
  40428e:	e4a8      	b.n	403be2 <_vfiprintf_r+0xce>
  404290:	f046 0601 	orr.w	r6, r6, #1
  404294:	f898 3000 	ldrb.w	r3, [r8]
  404298:	e4a3      	b.n	403be2 <_vfiprintf_r+0xce>
  40429a:	9406      	str	r4, [sp, #24]
  40429c:	2900      	cmp	r1, #0
  40429e:	f040 830c 	bne.w	4048ba <_vfiprintf_r+0xda6>
  4042a2:	06b2      	lsls	r2, r6, #26
  4042a4:	488e      	ldr	r0, [pc, #568]	; (4044e0 <_vfiprintf_r+0x9cc>)
  4042a6:	d4bd      	bmi.n	404224 <_vfiprintf_r+0x710>
  4042a8:	9904      	ldr	r1, [sp, #16]
  4042aa:	06f7      	lsls	r7, r6, #27
  4042ac:	460a      	mov	r2, r1
  4042ae:	f100 819d 	bmi.w	4045ec <_vfiprintf_r+0xad8>
  4042b2:	0675      	lsls	r5, r6, #25
  4042b4:	f140 819a 	bpl.w	4045ec <_vfiprintf_r+0xad8>
  4042b8:	3204      	adds	r2, #4
  4042ba:	880c      	ldrh	r4, [r1, #0]
  4042bc:	9204      	str	r2, [sp, #16]
  4042be:	2500      	movs	r5, #0
  4042c0:	e7b9      	b.n	404236 <_vfiprintf_r+0x722>
  4042c2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4042c6:	f898 3000 	ldrb.w	r3, [r8]
  4042ca:	e48a      	b.n	403be2 <_vfiprintf_r+0xce>
  4042cc:	f898 3000 	ldrb.w	r3, [r8]
  4042d0:	2b6c      	cmp	r3, #108	; 0x6c
  4042d2:	bf03      	ittte	eq
  4042d4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  4042d8:	f046 0620 	orreq.w	r6, r6, #32
  4042dc:	f108 0801 	addeq.w	r8, r8, #1
  4042e0:	f046 0610 	orrne.w	r6, r6, #16
  4042e4:	e47d      	b.n	403be2 <_vfiprintf_r+0xce>
  4042e6:	2900      	cmp	r1, #0
  4042e8:	f040 8309 	bne.w	4048fe <_vfiprintf_r+0xdea>
  4042ec:	06b4      	lsls	r4, r6, #26
  4042ee:	f140 821c 	bpl.w	40472a <_vfiprintf_r+0xc16>
  4042f2:	9a04      	ldr	r2, [sp, #16]
  4042f4:	9902      	ldr	r1, [sp, #8]
  4042f6:	6813      	ldr	r3, [r2, #0]
  4042f8:	17cd      	asrs	r5, r1, #31
  4042fa:	4608      	mov	r0, r1
  4042fc:	3204      	adds	r2, #4
  4042fe:	4629      	mov	r1, r5
  404300:	9204      	str	r2, [sp, #16]
  404302:	e9c3 0100 	strd	r0, r1, [r3]
  404306:	e436      	b.n	403b76 <_vfiprintf_r+0x62>
  404308:	9406      	str	r4, [sp, #24]
  40430a:	2900      	cmp	r1, #0
  40430c:	f43f ae43 	beq.w	403f96 <_vfiprintf_r+0x482>
  404310:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404314:	e63f      	b.n	403f96 <_vfiprintf_r+0x482>
  404316:	9406      	str	r4, [sp, #24]
  404318:	2900      	cmp	r1, #0
  40431a:	f040 82ed 	bne.w	4048f8 <_vfiprintf_r+0xde4>
  40431e:	2b00      	cmp	r3, #0
  404320:	f000 808f 	beq.w	404442 <_vfiprintf_r+0x92e>
  404324:	2501      	movs	r5, #1
  404326:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40432a:	f04f 0300 	mov.w	r3, #0
  40432e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  404332:	9503      	str	r5, [sp, #12]
  404334:	af10      	add	r7, sp, #64	; 0x40
  404336:	e7a0      	b.n	40427a <_vfiprintf_r+0x766>
  404338:	9304      	str	r3, [sp, #16]
  40433a:	f04f 0900 	mov.w	r9, #0
  40433e:	e696      	b.n	40406e <_vfiprintf_r+0x55a>
  404340:	aa0d      	add	r2, sp, #52	; 0x34
  404342:	9900      	ldr	r1, [sp, #0]
  404344:	9309      	str	r3, [sp, #36]	; 0x24
  404346:	4648      	mov	r0, r9
  404348:	f7ff fba8 	bl	403a9c <__sprint_r.part.0>
  40434c:	2800      	cmp	r0, #0
  40434e:	d17f      	bne.n	404450 <_vfiprintf_r+0x93c>
  404350:	980e      	ldr	r0, [sp, #56]	; 0x38
  404352:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404354:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404356:	f100 0e01 	add.w	lr, r0, #1
  40435a:	46dc      	mov	ip, fp
  40435c:	e529      	b.n	403db2 <_vfiprintf_r+0x29e>
  40435e:	980e      	ldr	r0, [sp, #56]	; 0x38
  404360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404362:	f100 0e01 	add.w	lr, r0, #1
  404366:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40436a:	2b00      	cmp	r3, #0
  40436c:	f43f ad50 	beq.w	403e10 <_vfiprintf_r+0x2fc>
  404370:	3201      	adds	r2, #1
  404372:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  404376:	2301      	movs	r3, #1
  404378:	f1be 0f07 	cmp.w	lr, #7
  40437c:	920f      	str	r2, [sp, #60]	; 0x3c
  40437e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  404382:	e88a 000a 	stmia.w	sl, {r1, r3}
  404386:	f340 80bf 	ble.w	404508 <_vfiprintf_r+0x9f4>
  40438a:	2a00      	cmp	r2, #0
  40438c:	f040 814e 	bne.w	40462c <_vfiprintf_r+0xb18>
  404390:	9907      	ldr	r1, [sp, #28]
  404392:	2900      	cmp	r1, #0
  404394:	f040 80be 	bne.w	404514 <_vfiprintf_r+0xa00>
  404398:	469e      	mov	lr, r3
  40439a:	4610      	mov	r0, r2
  40439c:	46da      	mov	sl, fp
  40439e:	9b08      	ldr	r3, [sp, #32]
  4043a0:	2b80      	cmp	r3, #128	; 0x80
  4043a2:	f43f ad50 	beq.w	403e46 <_vfiprintf_r+0x332>
  4043a6:	9b01      	ldr	r3, [sp, #4]
  4043a8:	9903      	ldr	r1, [sp, #12]
  4043aa:	1a5c      	subs	r4, r3, r1
  4043ac:	2c00      	cmp	r4, #0
  4043ae:	f77f ad93 	ble.w	403ed8 <_vfiprintf_r+0x3c4>
  4043b2:	2c10      	cmp	r4, #16
  4043b4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4044e4 <_vfiprintf_r+0x9d0>
  4043b8:	dd25      	ble.n	404406 <_vfiprintf_r+0x8f2>
  4043ba:	46d4      	mov	ip, sl
  4043bc:	2310      	movs	r3, #16
  4043be:	46c2      	mov	sl, r8
  4043c0:	46a8      	mov	r8, r5
  4043c2:	464d      	mov	r5, r9
  4043c4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4043c8:	e007      	b.n	4043da <_vfiprintf_r+0x8c6>
  4043ca:	f100 0e02 	add.w	lr, r0, #2
  4043ce:	f10c 0c08 	add.w	ip, ip, #8
  4043d2:	4608      	mov	r0, r1
  4043d4:	3c10      	subs	r4, #16
  4043d6:	2c10      	cmp	r4, #16
  4043d8:	dd11      	ble.n	4043fe <_vfiprintf_r+0x8ea>
  4043da:	1c41      	adds	r1, r0, #1
  4043dc:	3210      	adds	r2, #16
  4043de:	2907      	cmp	r1, #7
  4043e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4043e2:	f8cc 5000 	str.w	r5, [ip]
  4043e6:	f8cc 3004 	str.w	r3, [ip, #4]
  4043ea:	910e      	str	r1, [sp, #56]	; 0x38
  4043ec:	dded      	ble.n	4043ca <_vfiprintf_r+0x8b6>
  4043ee:	b9d2      	cbnz	r2, 404426 <_vfiprintf_r+0x912>
  4043f0:	3c10      	subs	r4, #16
  4043f2:	2c10      	cmp	r4, #16
  4043f4:	f04f 0e01 	mov.w	lr, #1
  4043f8:	4610      	mov	r0, r2
  4043fa:	46dc      	mov	ip, fp
  4043fc:	dced      	bgt.n	4043da <_vfiprintf_r+0x8c6>
  4043fe:	46a9      	mov	r9, r5
  404400:	4645      	mov	r5, r8
  404402:	46d0      	mov	r8, sl
  404404:	46e2      	mov	sl, ip
  404406:	4422      	add	r2, r4
  404408:	f1be 0f07 	cmp.w	lr, #7
  40440c:	920f      	str	r2, [sp, #60]	; 0x3c
  40440e:	f8ca 9000 	str.w	r9, [sl]
  404412:	f8ca 4004 	str.w	r4, [sl, #4]
  404416:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40441a:	dc2e      	bgt.n	40447a <_vfiprintf_r+0x966>
  40441c:	f10a 0a08 	add.w	sl, sl, #8
  404420:	f10e 0e01 	add.w	lr, lr, #1
  404424:	e558      	b.n	403ed8 <_vfiprintf_r+0x3c4>
  404426:	aa0d      	add	r2, sp, #52	; 0x34
  404428:	9900      	ldr	r1, [sp, #0]
  40442a:	9301      	str	r3, [sp, #4]
  40442c:	4648      	mov	r0, r9
  40442e:	f7ff fb35 	bl	403a9c <__sprint_r.part.0>
  404432:	b968      	cbnz	r0, 404450 <_vfiprintf_r+0x93c>
  404434:	980e      	ldr	r0, [sp, #56]	; 0x38
  404436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404438:	9b01      	ldr	r3, [sp, #4]
  40443a:	f100 0e01 	add.w	lr, r0, #1
  40443e:	46dc      	mov	ip, fp
  404440:	e7c8      	b.n	4043d4 <_vfiprintf_r+0x8c0>
  404442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404444:	b123      	cbz	r3, 404450 <_vfiprintf_r+0x93c>
  404446:	9805      	ldr	r0, [sp, #20]
  404448:	9900      	ldr	r1, [sp, #0]
  40444a:	aa0d      	add	r2, sp, #52	; 0x34
  40444c:	f7ff fb26 	bl	403a9c <__sprint_r.part.0>
  404450:	9b00      	ldr	r3, [sp, #0]
  404452:	899b      	ldrh	r3, [r3, #12]
  404454:	065a      	lsls	r2, r3, #25
  404456:	f100 818b 	bmi.w	404770 <_vfiprintf_r+0xc5c>
  40445a:	9802      	ldr	r0, [sp, #8]
  40445c:	b02b      	add	sp, #172	; 0xac
  40445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404462:	aa0d      	add	r2, sp, #52	; 0x34
  404464:	9900      	ldr	r1, [sp, #0]
  404466:	4648      	mov	r0, r9
  404468:	f7ff fb18 	bl	403a9c <__sprint_r.part.0>
  40446c:	2800      	cmp	r0, #0
  40446e:	d1ef      	bne.n	404450 <_vfiprintf_r+0x93c>
  404470:	990e      	ldr	r1, [sp, #56]	; 0x38
  404472:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404474:	1c48      	adds	r0, r1, #1
  404476:	46da      	mov	sl, fp
  404478:	e555      	b.n	403f26 <_vfiprintf_r+0x412>
  40447a:	2a00      	cmp	r2, #0
  40447c:	f040 80fb 	bne.w	404676 <_vfiprintf_r+0xb62>
  404480:	9a03      	ldr	r2, [sp, #12]
  404482:	921b      	str	r2, [sp, #108]	; 0x6c
  404484:	2301      	movs	r3, #1
  404486:	920f      	str	r2, [sp, #60]	; 0x3c
  404488:	971a      	str	r7, [sp, #104]	; 0x68
  40448a:	930e      	str	r3, [sp, #56]	; 0x38
  40448c:	46da      	mov	sl, fp
  40448e:	f10a 0a08 	add.w	sl, sl, #8
  404492:	0771      	lsls	r1, r6, #29
  404494:	d504      	bpl.n	4044a0 <_vfiprintf_r+0x98c>
  404496:	9b06      	ldr	r3, [sp, #24]
  404498:	1b5c      	subs	r4, r3, r5
  40449a:	2c00      	cmp	r4, #0
  40449c:	f73f ad34 	bgt.w	403f08 <_vfiprintf_r+0x3f4>
  4044a0:	9b02      	ldr	r3, [sp, #8]
  4044a2:	9906      	ldr	r1, [sp, #24]
  4044a4:	42a9      	cmp	r1, r5
  4044a6:	bfac      	ite	ge
  4044a8:	185b      	addge	r3, r3, r1
  4044aa:	195b      	addlt	r3, r3, r5
  4044ac:	9302      	str	r3, [sp, #8]
  4044ae:	2a00      	cmp	r2, #0
  4044b0:	f040 80b3 	bne.w	40461a <_vfiprintf_r+0xb06>
  4044b4:	2300      	movs	r3, #0
  4044b6:	930e      	str	r3, [sp, #56]	; 0x38
  4044b8:	46da      	mov	sl, fp
  4044ba:	f7ff bb5c 	b.w	403b76 <_vfiprintf_r+0x62>
  4044be:	aa0d      	add	r2, sp, #52	; 0x34
  4044c0:	9900      	ldr	r1, [sp, #0]
  4044c2:	9307      	str	r3, [sp, #28]
  4044c4:	4648      	mov	r0, r9
  4044c6:	f7ff fae9 	bl	403a9c <__sprint_r.part.0>
  4044ca:	2800      	cmp	r0, #0
  4044cc:	d1c0      	bne.n	404450 <_vfiprintf_r+0x93c>
  4044ce:	980e      	ldr	r0, [sp, #56]	; 0x38
  4044d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4044d2:	9b07      	ldr	r3, [sp, #28]
  4044d4:	f100 0c01 	add.w	ip, r0, #1
  4044d8:	46de      	mov	lr, fp
  4044da:	e4cb      	b.n	403e74 <_vfiprintf_r+0x360>
  4044dc:	00407710 	.word	0x00407710
  4044e0:	00407724 	.word	0x00407724
  4044e4:	00407700 	.word	0x00407700
  4044e8:	2a00      	cmp	r2, #0
  4044ea:	f040 8133 	bne.w	404754 <_vfiprintf_r+0xc40>
  4044ee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  4044f2:	2b00      	cmp	r3, #0
  4044f4:	f000 80f5 	beq.w	4046e2 <_vfiprintf_r+0xbce>
  4044f8:	2301      	movs	r3, #1
  4044fa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  4044fe:	461a      	mov	r2, r3
  404500:	931b      	str	r3, [sp, #108]	; 0x6c
  404502:	469e      	mov	lr, r3
  404504:	911a      	str	r1, [sp, #104]	; 0x68
  404506:	46da      	mov	sl, fp
  404508:	4670      	mov	r0, lr
  40450a:	f10a 0a08 	add.w	sl, sl, #8
  40450e:	f10e 0e01 	add.w	lr, lr, #1
  404512:	e47d      	b.n	403e10 <_vfiprintf_r+0x2fc>
  404514:	a90c      	add	r1, sp, #48	; 0x30
  404516:	2202      	movs	r2, #2
  404518:	469e      	mov	lr, r3
  40451a:	911a      	str	r1, [sp, #104]	; 0x68
  40451c:	921b      	str	r2, [sp, #108]	; 0x6c
  40451e:	46da      	mov	sl, fp
  404520:	4670      	mov	r0, lr
  404522:	f10a 0a08 	add.w	sl, sl, #8
  404526:	f10e 0e01 	add.w	lr, lr, #1
  40452a:	e738      	b.n	40439e <_vfiprintf_r+0x88a>
  40452c:	9b01      	ldr	r3, [sp, #4]
  40452e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404532:	2b00      	cmp	r3, #0
  404534:	f2c0 812a 	blt.w	40478c <_vfiprintf_r+0xc78>
  404538:	ea54 0305 	orrs.w	r3, r4, r5
  40453c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404540:	f43f abff 	beq.w	403d42 <_vfiprintf_r+0x22e>
  404544:	465f      	mov	r7, fp
  404546:	0923      	lsrs	r3, r4, #4
  404548:	f004 010f 	and.w	r1, r4, #15
  40454c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404550:	092a      	lsrs	r2, r5, #4
  404552:	461c      	mov	r4, r3
  404554:	4615      	mov	r5, r2
  404556:	5c43      	ldrb	r3, [r0, r1]
  404558:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40455c:	ea54 0305 	orrs.w	r3, r4, r5
  404560:	d1f1      	bne.n	404546 <_vfiprintf_r+0xa32>
  404562:	ebc7 030b 	rsb	r3, r7, fp
  404566:	9303      	str	r3, [sp, #12]
  404568:	f7ff bbf4 	b.w	403d54 <_vfiprintf_r+0x240>
  40456c:	aa0d      	add	r2, sp, #52	; 0x34
  40456e:	9900      	ldr	r1, [sp, #0]
  404570:	9805      	ldr	r0, [sp, #20]
  404572:	f7ff fa93 	bl	403a9c <__sprint_r.part.0>
  404576:	2800      	cmp	r0, #0
  404578:	f47f af6a 	bne.w	404450 <_vfiprintf_r+0x93c>
  40457c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40457e:	46da      	mov	sl, fp
  404580:	e787      	b.n	404492 <_vfiprintf_r+0x97e>
  404582:	f04f 0900 	mov.w	r9, #0
  404586:	2400      	movs	r4, #0
  404588:	2500      	movs	r5, #0
  40458a:	e7db      	b.n	404544 <_vfiprintf_r+0xa30>
  40458c:	f016 0210 	ands.w	r2, r6, #16
  404590:	f000 80b2 	beq.w	4046f8 <_vfiprintf_r+0xbe4>
  404594:	9904      	ldr	r1, [sp, #16]
  404596:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40459a:	460a      	mov	r2, r1
  40459c:	680c      	ldr	r4, [r1, #0]
  40459e:	9901      	ldr	r1, [sp, #4]
  4045a0:	2900      	cmp	r1, #0
  4045a2:	f102 0204 	add.w	r2, r2, #4
  4045a6:	f04f 0500 	mov.w	r5, #0
  4045aa:	f2c0 8159 	blt.w	404860 <_vfiprintf_r+0xd4c>
  4045ae:	ea54 0105 	orrs.w	r1, r4, r5
  4045b2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4045b6:	9204      	str	r2, [sp, #16]
  4045b8:	f43f ad51 	beq.w	40405e <_vfiprintf_r+0x54a>
  4045bc:	4699      	mov	r9, r3
  4045be:	e556      	b.n	40406e <_vfiprintf_r+0x55a>
  4045c0:	06f7      	lsls	r7, r6, #27
  4045c2:	d40a      	bmi.n	4045da <_vfiprintf_r+0xac6>
  4045c4:	0675      	lsls	r5, r6, #25
  4045c6:	d508      	bpl.n	4045da <_vfiprintf_r+0xac6>
  4045c8:	9904      	ldr	r1, [sp, #16]
  4045ca:	f9b1 4000 	ldrsh.w	r4, [r1]
  4045ce:	3104      	adds	r1, #4
  4045d0:	17e5      	asrs	r5, r4, #31
  4045d2:	4622      	mov	r2, r4
  4045d4:	462b      	mov	r3, r5
  4045d6:	9104      	str	r1, [sp, #16]
  4045d8:	e4ea      	b.n	403fb0 <_vfiprintf_r+0x49c>
  4045da:	9a04      	ldr	r2, [sp, #16]
  4045dc:	6814      	ldr	r4, [r2, #0]
  4045de:	4613      	mov	r3, r2
  4045e0:	3304      	adds	r3, #4
  4045e2:	17e5      	asrs	r5, r4, #31
  4045e4:	9304      	str	r3, [sp, #16]
  4045e6:	4622      	mov	r2, r4
  4045e8:	462b      	mov	r3, r5
  4045ea:	e4e1      	b.n	403fb0 <_vfiprintf_r+0x49c>
  4045ec:	6814      	ldr	r4, [r2, #0]
  4045ee:	3204      	adds	r2, #4
  4045f0:	9204      	str	r2, [sp, #16]
  4045f2:	2500      	movs	r5, #0
  4045f4:	e61f      	b.n	404236 <_vfiprintf_r+0x722>
  4045f6:	f04f 0900 	mov.w	r9, #0
  4045fa:	ea54 0305 	orrs.w	r3, r4, r5
  4045fe:	f47f ace8 	bne.w	403fd2 <_vfiprintf_r+0x4be>
  404602:	e5d8      	b.n	4041b6 <_vfiprintf_r+0x6a2>
  404604:	aa0d      	add	r2, sp, #52	; 0x34
  404606:	9900      	ldr	r1, [sp, #0]
  404608:	9805      	ldr	r0, [sp, #20]
  40460a:	f7ff fa47 	bl	403a9c <__sprint_r.part.0>
  40460e:	2800      	cmp	r0, #0
  404610:	f47f af1e 	bne.w	404450 <_vfiprintf_r+0x93c>
  404614:	46da      	mov	sl, fp
  404616:	f7ff bb48 	b.w	403caa <_vfiprintf_r+0x196>
  40461a:	aa0d      	add	r2, sp, #52	; 0x34
  40461c:	9900      	ldr	r1, [sp, #0]
  40461e:	9805      	ldr	r0, [sp, #20]
  404620:	f7ff fa3c 	bl	403a9c <__sprint_r.part.0>
  404624:	2800      	cmp	r0, #0
  404626:	f43f af45 	beq.w	4044b4 <_vfiprintf_r+0x9a0>
  40462a:	e711      	b.n	404450 <_vfiprintf_r+0x93c>
  40462c:	aa0d      	add	r2, sp, #52	; 0x34
  40462e:	9900      	ldr	r1, [sp, #0]
  404630:	9805      	ldr	r0, [sp, #20]
  404632:	f7ff fa33 	bl	403a9c <__sprint_r.part.0>
  404636:	2800      	cmp	r0, #0
  404638:	f47f af0a 	bne.w	404450 <_vfiprintf_r+0x93c>
  40463c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40463e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404640:	f100 0e01 	add.w	lr, r0, #1
  404644:	46da      	mov	sl, fp
  404646:	f7ff bbe3 	b.w	403e10 <_vfiprintf_r+0x2fc>
  40464a:	aa0d      	add	r2, sp, #52	; 0x34
  40464c:	9900      	ldr	r1, [sp, #0]
  40464e:	9805      	ldr	r0, [sp, #20]
  404650:	f7ff fa24 	bl	403a9c <__sprint_r.part.0>
  404654:	2800      	cmp	r0, #0
  404656:	f47f aefb 	bne.w	404450 <_vfiprintf_r+0x93c>
  40465a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40465c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40465e:	f100 0e01 	add.w	lr, r0, #1
  404662:	46da      	mov	sl, fp
  404664:	e69b      	b.n	40439e <_vfiprintf_r+0x88a>
  404666:	2a00      	cmp	r2, #0
  404668:	f040 80d8 	bne.w	40481c <_vfiprintf_r+0xd08>
  40466c:	f04f 0e01 	mov.w	lr, #1
  404670:	4610      	mov	r0, r2
  404672:	46da      	mov	sl, fp
  404674:	e697      	b.n	4043a6 <_vfiprintf_r+0x892>
  404676:	aa0d      	add	r2, sp, #52	; 0x34
  404678:	9900      	ldr	r1, [sp, #0]
  40467a:	9805      	ldr	r0, [sp, #20]
  40467c:	f7ff fa0e 	bl	403a9c <__sprint_r.part.0>
  404680:	2800      	cmp	r0, #0
  404682:	f47f aee5 	bne.w	404450 <_vfiprintf_r+0x93c>
  404686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40468a:	f103 0e01 	add.w	lr, r3, #1
  40468e:	46da      	mov	sl, fp
  404690:	e422      	b.n	403ed8 <_vfiprintf_r+0x3c4>
  404692:	2230      	movs	r2, #48	; 0x30
  404694:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  404698:	9a01      	ldr	r2, [sp, #4]
  40469a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40469e:	2a00      	cmp	r2, #0
  4046a0:	f04f 0300 	mov.w	r3, #0
  4046a4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4046a8:	f046 0302 	orr.w	r3, r6, #2
  4046ac:	f2c0 80cb 	blt.w	404846 <_vfiprintf_r+0xd32>
  4046b0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4046b4:	f046 0602 	orr.w	r6, r6, #2
  4046b8:	f04f 0900 	mov.w	r9, #0
  4046bc:	e742      	b.n	404544 <_vfiprintf_r+0xa30>
  4046be:	f04f 0900 	mov.w	r9, #0
  4046c2:	4890      	ldr	r0, [pc, #576]	; (404904 <_vfiprintf_r+0xdf0>)
  4046c4:	e73e      	b.n	404544 <_vfiprintf_r+0xa30>
  4046c6:	9b01      	ldr	r3, [sp, #4]
  4046c8:	4264      	negs	r4, r4
  4046ca:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4046ce:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4046d2:	2b00      	cmp	r3, #0
  4046d4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4046d8:	f6ff ac7b 	blt.w	403fd2 <_vfiprintf_r+0x4be>
  4046dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4046e0:	e477      	b.n	403fd2 <_vfiprintf_r+0x4be>
  4046e2:	9b07      	ldr	r3, [sp, #28]
  4046e4:	2b00      	cmp	r3, #0
  4046e6:	d072      	beq.n	4047ce <_vfiprintf_r+0xcba>
  4046e8:	ab0c      	add	r3, sp, #48	; 0x30
  4046ea:	2202      	movs	r2, #2
  4046ec:	931a      	str	r3, [sp, #104]	; 0x68
  4046ee:	921b      	str	r2, [sp, #108]	; 0x6c
  4046f0:	f04f 0e01 	mov.w	lr, #1
  4046f4:	46da      	mov	sl, fp
  4046f6:	e713      	b.n	404520 <_vfiprintf_r+0xa0c>
  4046f8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  4046fc:	d048      	beq.n	404790 <_vfiprintf_r+0xc7c>
  4046fe:	9904      	ldr	r1, [sp, #16]
  404700:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  404704:	460b      	mov	r3, r1
  404706:	880c      	ldrh	r4, [r1, #0]
  404708:	9901      	ldr	r1, [sp, #4]
  40470a:	2900      	cmp	r1, #0
  40470c:	f103 0304 	add.w	r3, r3, #4
  404710:	f04f 0500 	mov.w	r5, #0
  404714:	f6ff ae10 	blt.w	404338 <_vfiprintf_r+0x824>
  404718:	ea54 0105 	orrs.w	r1, r4, r5
  40471c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  404720:	9304      	str	r3, [sp, #16]
  404722:	f43f ac9c 	beq.w	40405e <_vfiprintf_r+0x54a>
  404726:	4691      	mov	r9, r2
  404728:	e4a1      	b.n	40406e <_vfiprintf_r+0x55a>
  40472a:	06f0      	lsls	r0, r6, #27
  40472c:	d40a      	bmi.n	404744 <_vfiprintf_r+0xc30>
  40472e:	0671      	lsls	r1, r6, #25
  404730:	d508      	bpl.n	404744 <_vfiprintf_r+0xc30>
  404732:	9a04      	ldr	r2, [sp, #16]
  404734:	6813      	ldr	r3, [r2, #0]
  404736:	3204      	adds	r2, #4
  404738:	9204      	str	r2, [sp, #16]
  40473a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40473e:	801a      	strh	r2, [r3, #0]
  404740:	f7ff ba19 	b.w	403b76 <_vfiprintf_r+0x62>
  404744:	9a04      	ldr	r2, [sp, #16]
  404746:	6813      	ldr	r3, [r2, #0]
  404748:	3204      	adds	r2, #4
  40474a:	9204      	str	r2, [sp, #16]
  40474c:	9a02      	ldr	r2, [sp, #8]
  40474e:	601a      	str	r2, [r3, #0]
  404750:	f7ff ba11 	b.w	403b76 <_vfiprintf_r+0x62>
  404754:	aa0d      	add	r2, sp, #52	; 0x34
  404756:	9900      	ldr	r1, [sp, #0]
  404758:	9805      	ldr	r0, [sp, #20]
  40475a:	f7ff f99f 	bl	403a9c <__sprint_r.part.0>
  40475e:	2800      	cmp	r0, #0
  404760:	f47f ae76 	bne.w	404450 <_vfiprintf_r+0x93c>
  404764:	980e      	ldr	r0, [sp, #56]	; 0x38
  404766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404768:	f100 0e01 	add.w	lr, r0, #1
  40476c:	46da      	mov	sl, fp
  40476e:	e5fa      	b.n	404366 <_vfiprintf_r+0x852>
  404770:	f04f 30ff 	mov.w	r0, #4294967295
  404774:	f7ff bab6 	b.w	403ce4 <_vfiprintf_r+0x1d0>
  404778:	4862      	ldr	r0, [pc, #392]	; (404904 <_vfiprintf_r+0xdf0>)
  40477a:	4616      	mov	r6, r2
  40477c:	ea54 0205 	orrs.w	r2, r4, r5
  404780:	9304      	str	r3, [sp, #16]
  404782:	f04f 0900 	mov.w	r9, #0
  404786:	f47f aedd 	bne.w	404544 <_vfiprintf_r+0xa30>
  40478a:	e6fc      	b.n	404586 <_vfiprintf_r+0xa72>
  40478c:	9b04      	ldr	r3, [sp, #16]
  40478e:	e7f5      	b.n	40477c <_vfiprintf_r+0xc68>
  404790:	9a04      	ldr	r2, [sp, #16]
  404792:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  404796:	4613      	mov	r3, r2
  404798:	6814      	ldr	r4, [r2, #0]
  40479a:	9a01      	ldr	r2, [sp, #4]
  40479c:	2a00      	cmp	r2, #0
  40479e:	f103 0304 	add.w	r3, r3, #4
  4047a2:	f04f 0500 	mov.w	r5, #0
  4047a6:	f6ff adc7 	blt.w	404338 <_vfiprintf_r+0x824>
  4047aa:	ea54 0205 	orrs.w	r2, r4, r5
  4047ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4047b2:	9304      	str	r3, [sp, #16]
  4047b4:	f47f ac5b 	bne.w	40406e <_vfiprintf_r+0x55a>
  4047b8:	e451      	b.n	40405e <_vfiprintf_r+0x54a>
  4047ba:	aa0d      	add	r2, sp, #52	; 0x34
  4047bc:	9900      	ldr	r1, [sp, #0]
  4047be:	9805      	ldr	r0, [sp, #20]
  4047c0:	f7ff f96c 	bl	403a9c <__sprint_r.part.0>
  4047c4:	2800      	cmp	r0, #0
  4047c6:	f47f ae43 	bne.w	404450 <_vfiprintf_r+0x93c>
  4047ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4047cc:	e668      	b.n	4044a0 <_vfiprintf_r+0x98c>
  4047ce:	4610      	mov	r0, r2
  4047d0:	f04f 0e01 	mov.w	lr, #1
  4047d4:	46da      	mov	sl, fp
  4047d6:	e5e6      	b.n	4043a6 <_vfiprintf_r+0x892>
  4047d8:	9904      	ldr	r1, [sp, #16]
  4047da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4047de:	460a      	mov	r2, r1
  4047e0:	880c      	ldrh	r4, [r1, #0]
  4047e2:	9901      	ldr	r1, [sp, #4]
  4047e4:	2900      	cmp	r1, #0
  4047e6:	f102 0204 	add.w	r2, r2, #4
  4047ea:	f04f 0500 	mov.w	r5, #0
  4047ee:	db4e      	blt.n	40488e <_vfiprintf_r+0xd7a>
  4047f0:	ea54 0105 	orrs.w	r1, r4, r5
  4047f4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4047f8:	9204      	str	r2, [sp, #16]
  4047fa:	4699      	mov	r9, r3
  4047fc:	f47f abe9 	bne.w	403fd2 <_vfiprintf_r+0x4be>
  404800:	e4d4      	b.n	4041ac <_vfiprintf_r+0x698>
  404802:	9304      	str	r3, [sp, #16]
  404804:	e6f9      	b.n	4045fa <_vfiprintf_r+0xae6>
  404806:	4638      	mov	r0, r7
  404808:	9404      	str	r4, [sp, #16]
  40480a:	f7ff f8d9 	bl	4039c0 <strlen>
  40480e:	2300      	movs	r3, #0
  404810:	9003      	str	r0, [sp, #12]
  404812:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  404816:	9301      	str	r3, [sp, #4]
  404818:	f7ff ba9c 	b.w	403d54 <_vfiprintf_r+0x240>
  40481c:	aa0d      	add	r2, sp, #52	; 0x34
  40481e:	9900      	ldr	r1, [sp, #0]
  404820:	9805      	ldr	r0, [sp, #20]
  404822:	f7ff f93b 	bl	403a9c <__sprint_r.part.0>
  404826:	2800      	cmp	r0, #0
  404828:	f47f ae12 	bne.w	404450 <_vfiprintf_r+0x93c>
  40482c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40482e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404830:	f100 0e01 	add.w	lr, r0, #1
  404834:	46da      	mov	sl, fp
  404836:	e5b6      	b.n	4043a6 <_vfiprintf_r+0x892>
  404838:	980e      	ldr	r0, [sp, #56]	; 0x38
  40483a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40483c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40490c <_vfiprintf_r+0xdf8>
  404840:	3001      	adds	r0, #1
  404842:	f7ff bad2 	b.w	403dea <_vfiprintf_r+0x2d6>
  404846:	461e      	mov	r6, r3
  404848:	f04f 0900 	mov.w	r9, #0
  40484c:	e67a      	b.n	404544 <_vfiprintf_r+0xa30>
  40484e:	2b06      	cmp	r3, #6
  404850:	bf28      	it	cs
  404852:	2306      	movcs	r3, #6
  404854:	9303      	str	r3, [sp, #12]
  404856:	9404      	str	r4, [sp, #16]
  404858:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40485c:	4f2a      	ldr	r7, [pc, #168]	; (404908 <_vfiprintf_r+0xdf4>)
  40485e:	e50c      	b.n	40427a <_vfiprintf_r+0x766>
  404860:	9204      	str	r2, [sp, #16]
  404862:	e56a      	b.n	40433a <_vfiprintf_r+0x826>
  404864:	980e      	ldr	r0, [sp, #56]	; 0x38
  404866:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40490c <_vfiprintf_r+0xdf8>
  40486a:	3001      	adds	r0, #1
  40486c:	f7ff bb73 	b.w	403f56 <_vfiprintf_r+0x442>
  404870:	46f4      	mov	ip, lr
  404872:	f7ff bb1a 	b.w	403eaa <_vfiprintf_r+0x396>
  404876:	9b01      	ldr	r3, [sp, #4]
  404878:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40487c:	9303      	str	r3, [sp, #12]
  40487e:	9404      	str	r4, [sp, #16]
  404880:	9001      	str	r0, [sp, #4]
  404882:	f7ff ba67 	b.w	403d54 <_vfiprintf_r+0x240>
  404886:	2200      	movs	r2, #0
  404888:	9201      	str	r2, [sp, #4]
  40488a:	f7ff b9ac 	b.w	403be6 <_vfiprintf_r+0xd2>
  40488e:	9204      	str	r2, [sp, #16]
  404890:	4699      	mov	r9, r3
  404892:	e6b2      	b.n	4045fa <_vfiprintf_r+0xae6>
  404894:	9a04      	ldr	r2, [sp, #16]
  404896:	6813      	ldr	r3, [r2, #0]
  404898:	9301      	str	r3, [sp, #4]
  40489a:	3204      	adds	r2, #4
  40489c:	2b00      	cmp	r3, #0
  40489e:	9204      	str	r2, [sp, #16]
  4048a0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4048a4:	46a8      	mov	r8, r5
  4048a6:	f6bf a99c 	bge.w	403be2 <_vfiprintf_r+0xce>
  4048aa:	f04f 32ff 	mov.w	r2, #4294967295
  4048ae:	9201      	str	r2, [sp, #4]
  4048b0:	f7ff b997 	b.w	403be2 <_vfiprintf_r+0xce>
  4048b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4048b8:	e48e      	b.n	4041d8 <_vfiprintf_r+0x6c4>
  4048ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4048be:	e4f0      	b.n	4042a2 <_vfiprintf_r+0x78e>
  4048c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4048c4:	e4ab      	b.n	40421e <_vfiprintf_r+0x70a>
  4048c6:	4699      	mov	r9, r3
  4048c8:	07f3      	lsls	r3, r6, #31
  4048ca:	d505      	bpl.n	4048d8 <_vfiprintf_r+0xdc4>
  4048cc:	af2a      	add	r7, sp, #168	; 0xa8
  4048ce:	2330      	movs	r3, #48	; 0x30
  4048d0:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4048d4:	f7ff bb97 	b.w	404006 <_vfiprintf_r+0x4f2>
  4048d8:	9b01      	ldr	r3, [sp, #4]
  4048da:	9303      	str	r3, [sp, #12]
  4048dc:	465f      	mov	r7, fp
  4048de:	f7ff ba39 	b.w	403d54 <_vfiprintf_r+0x240>
  4048e2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4048e6:	e443      	b.n	404170 <_vfiprintf_r+0x65c>
  4048e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4048ec:	f7ff bb9a 	b.w	404024 <_vfiprintf_r+0x510>
  4048f0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4048f4:	f7ff bb4d 	b.w	403f92 <_vfiprintf_r+0x47e>
  4048f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4048fc:	e50f      	b.n	40431e <_vfiprintf_r+0x80a>
  4048fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  404902:	e4f3      	b.n	4042ec <_vfiprintf_r+0x7d8>
  404904:	00407724 	.word	0x00407724
  404908:	00407738 	.word	0x00407738
  40490c:	00407740 	.word	0x00407740

00404910 <__sbprintf>:
  404910:	b5f0      	push	{r4, r5, r6, r7, lr}
  404912:	460c      	mov	r4, r1
  404914:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  404918:	8989      	ldrh	r1, [r1, #12]
  40491a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40491c:	89e5      	ldrh	r5, [r4, #14]
  40491e:	9619      	str	r6, [sp, #100]	; 0x64
  404920:	f021 0102 	bic.w	r1, r1, #2
  404924:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404926:	f8ad 500e 	strh.w	r5, [sp, #14]
  40492a:	2500      	movs	r5, #0
  40492c:	69e7      	ldr	r7, [r4, #28]
  40492e:	f8ad 100c 	strh.w	r1, [sp, #12]
  404932:	9609      	str	r6, [sp, #36]	; 0x24
  404934:	9506      	str	r5, [sp, #24]
  404936:	ae1a      	add	r6, sp, #104	; 0x68
  404938:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40493c:	4669      	mov	r1, sp
  40493e:	9600      	str	r6, [sp, #0]
  404940:	9604      	str	r6, [sp, #16]
  404942:	9502      	str	r5, [sp, #8]
  404944:	9505      	str	r5, [sp, #20]
  404946:	9707      	str	r7, [sp, #28]
  404948:	4606      	mov	r6, r0
  40494a:	f7ff f8e3 	bl	403b14 <_vfiprintf_r>
  40494e:	1e05      	subs	r5, r0, #0
  404950:	db07      	blt.n	404962 <__sbprintf+0x52>
  404952:	4630      	mov	r0, r6
  404954:	4669      	mov	r1, sp
  404956:	f000 f929 	bl	404bac <_fflush_r>
  40495a:	2800      	cmp	r0, #0
  40495c:	bf18      	it	ne
  40495e:	f04f 35ff 	movne.w	r5, #4294967295
  404962:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404966:	065b      	lsls	r3, r3, #25
  404968:	d503      	bpl.n	404972 <__sbprintf+0x62>
  40496a:	89a3      	ldrh	r3, [r4, #12]
  40496c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404970:	81a3      	strh	r3, [r4, #12]
  404972:	4628      	mov	r0, r5
  404974:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  404978:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40497a:	bf00      	nop

0040497c <__swsetup_r>:
  40497c:	b538      	push	{r3, r4, r5, lr}
  40497e:	4b30      	ldr	r3, [pc, #192]	; (404a40 <__swsetup_r+0xc4>)
  404980:	681b      	ldr	r3, [r3, #0]
  404982:	4605      	mov	r5, r0
  404984:	460c      	mov	r4, r1
  404986:	b113      	cbz	r3, 40498e <__swsetup_r+0x12>
  404988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40498a:	2a00      	cmp	r2, #0
  40498c:	d038      	beq.n	404a00 <__swsetup_r+0x84>
  40498e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404992:	b293      	uxth	r3, r2
  404994:	0718      	lsls	r0, r3, #28
  404996:	d50c      	bpl.n	4049b2 <__swsetup_r+0x36>
  404998:	6920      	ldr	r0, [r4, #16]
  40499a:	b1a8      	cbz	r0, 4049c8 <__swsetup_r+0x4c>
  40499c:	f013 0201 	ands.w	r2, r3, #1
  4049a0:	d01e      	beq.n	4049e0 <__swsetup_r+0x64>
  4049a2:	6963      	ldr	r3, [r4, #20]
  4049a4:	2200      	movs	r2, #0
  4049a6:	425b      	negs	r3, r3
  4049a8:	61a3      	str	r3, [r4, #24]
  4049aa:	60a2      	str	r2, [r4, #8]
  4049ac:	b1f0      	cbz	r0, 4049ec <__swsetup_r+0x70>
  4049ae:	2000      	movs	r0, #0
  4049b0:	bd38      	pop	{r3, r4, r5, pc}
  4049b2:	06d9      	lsls	r1, r3, #27
  4049b4:	d53c      	bpl.n	404a30 <__swsetup_r+0xb4>
  4049b6:	0758      	lsls	r0, r3, #29
  4049b8:	d426      	bmi.n	404a08 <__swsetup_r+0x8c>
  4049ba:	6920      	ldr	r0, [r4, #16]
  4049bc:	f042 0308 	orr.w	r3, r2, #8
  4049c0:	81a3      	strh	r3, [r4, #12]
  4049c2:	b29b      	uxth	r3, r3
  4049c4:	2800      	cmp	r0, #0
  4049c6:	d1e9      	bne.n	40499c <__swsetup_r+0x20>
  4049c8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4049cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4049d0:	d0e4      	beq.n	40499c <__swsetup_r+0x20>
  4049d2:	4628      	mov	r0, r5
  4049d4:	4621      	mov	r1, r4
  4049d6:	f000 fd15 	bl	405404 <__smakebuf_r>
  4049da:	89a3      	ldrh	r3, [r4, #12]
  4049dc:	6920      	ldr	r0, [r4, #16]
  4049de:	e7dd      	b.n	40499c <__swsetup_r+0x20>
  4049e0:	0799      	lsls	r1, r3, #30
  4049e2:	bf58      	it	pl
  4049e4:	6962      	ldrpl	r2, [r4, #20]
  4049e6:	60a2      	str	r2, [r4, #8]
  4049e8:	2800      	cmp	r0, #0
  4049ea:	d1e0      	bne.n	4049ae <__swsetup_r+0x32>
  4049ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049f0:	061a      	lsls	r2, r3, #24
  4049f2:	d5dd      	bpl.n	4049b0 <__swsetup_r+0x34>
  4049f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4049f8:	81a3      	strh	r3, [r4, #12]
  4049fa:	f04f 30ff 	mov.w	r0, #4294967295
  4049fe:	bd38      	pop	{r3, r4, r5, pc}
  404a00:	4618      	mov	r0, r3
  404a02:	f000 f967 	bl	404cd4 <__sinit>
  404a06:	e7c2      	b.n	40498e <__swsetup_r+0x12>
  404a08:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a0a:	b151      	cbz	r1, 404a22 <__swsetup_r+0xa6>
  404a0c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a10:	4299      	cmp	r1, r3
  404a12:	d004      	beq.n	404a1e <__swsetup_r+0xa2>
  404a14:	4628      	mov	r0, r5
  404a16:	f000 fa27 	bl	404e68 <_free_r>
  404a1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a1e:	2300      	movs	r3, #0
  404a20:	6323      	str	r3, [r4, #48]	; 0x30
  404a22:	2300      	movs	r3, #0
  404a24:	6920      	ldr	r0, [r4, #16]
  404a26:	6063      	str	r3, [r4, #4]
  404a28:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404a2c:	6020      	str	r0, [r4, #0]
  404a2e:	e7c5      	b.n	4049bc <__swsetup_r+0x40>
  404a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404a34:	2309      	movs	r3, #9
  404a36:	602b      	str	r3, [r5, #0]
  404a38:	f04f 30ff 	mov.w	r0, #4294967295
  404a3c:	81a2      	strh	r2, [r4, #12]
  404a3e:	bd38      	pop	{r3, r4, r5, pc}
  404a40:	20400448 	.word	0x20400448

00404a44 <register_fini>:
  404a44:	4b02      	ldr	r3, [pc, #8]	; (404a50 <register_fini+0xc>)
  404a46:	b113      	cbz	r3, 404a4e <register_fini+0xa>
  404a48:	4802      	ldr	r0, [pc, #8]	; (404a54 <register_fini+0x10>)
  404a4a:	f000 b805 	b.w	404a58 <atexit>
  404a4e:	4770      	bx	lr
  404a50:	00000000 	.word	0x00000000
  404a54:	00404ce9 	.word	0x00404ce9

00404a58 <atexit>:
  404a58:	2300      	movs	r3, #0
  404a5a:	4601      	mov	r1, r0
  404a5c:	461a      	mov	r2, r3
  404a5e:	4618      	mov	r0, r3
  404a60:	f001 bc12 	b.w	406288 <__register_exitproc>

00404a64 <__sflush_r>:
  404a64:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  404a68:	b29a      	uxth	r2, r3
  404a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a6e:	460d      	mov	r5, r1
  404a70:	0711      	lsls	r1, r2, #28
  404a72:	4680      	mov	r8, r0
  404a74:	d43c      	bmi.n	404af0 <__sflush_r+0x8c>
  404a76:	686a      	ldr	r2, [r5, #4]
  404a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404a7c:	2a00      	cmp	r2, #0
  404a7e:	81ab      	strh	r3, [r5, #12]
  404a80:	dd73      	ble.n	404b6a <__sflush_r+0x106>
  404a82:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404a84:	2c00      	cmp	r4, #0
  404a86:	d04b      	beq.n	404b20 <__sflush_r+0xbc>
  404a88:	b29b      	uxth	r3, r3
  404a8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  404a8e:	2100      	movs	r1, #0
  404a90:	b292      	uxth	r2, r2
  404a92:	f8d8 6000 	ldr.w	r6, [r8]
  404a96:	f8c8 1000 	str.w	r1, [r8]
  404a9a:	2a00      	cmp	r2, #0
  404a9c:	d069      	beq.n	404b72 <__sflush_r+0x10e>
  404a9e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404aa0:	075f      	lsls	r7, r3, #29
  404aa2:	d505      	bpl.n	404ab0 <__sflush_r+0x4c>
  404aa4:	6869      	ldr	r1, [r5, #4]
  404aa6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404aa8:	1a52      	subs	r2, r2, r1
  404aaa:	b10b      	cbz	r3, 404ab0 <__sflush_r+0x4c>
  404aac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404aae:	1ad2      	subs	r2, r2, r3
  404ab0:	2300      	movs	r3, #0
  404ab2:	69e9      	ldr	r1, [r5, #28]
  404ab4:	4640      	mov	r0, r8
  404ab6:	47a0      	blx	r4
  404ab8:	1c44      	adds	r4, r0, #1
  404aba:	d03c      	beq.n	404b36 <__sflush_r+0xd2>
  404abc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404ac0:	692a      	ldr	r2, [r5, #16]
  404ac2:	602a      	str	r2, [r5, #0]
  404ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404ac8:	2200      	movs	r2, #0
  404aca:	81ab      	strh	r3, [r5, #12]
  404acc:	04db      	lsls	r3, r3, #19
  404ace:	606a      	str	r2, [r5, #4]
  404ad0:	d449      	bmi.n	404b66 <__sflush_r+0x102>
  404ad2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404ad4:	f8c8 6000 	str.w	r6, [r8]
  404ad8:	b311      	cbz	r1, 404b20 <__sflush_r+0xbc>
  404ada:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404ade:	4299      	cmp	r1, r3
  404ae0:	d002      	beq.n	404ae8 <__sflush_r+0x84>
  404ae2:	4640      	mov	r0, r8
  404ae4:	f000 f9c0 	bl	404e68 <_free_r>
  404ae8:	2000      	movs	r0, #0
  404aea:	6328      	str	r0, [r5, #48]	; 0x30
  404aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404af0:	692e      	ldr	r6, [r5, #16]
  404af2:	b1ae      	cbz	r6, 404b20 <__sflush_r+0xbc>
  404af4:	682c      	ldr	r4, [r5, #0]
  404af6:	602e      	str	r6, [r5, #0]
  404af8:	0790      	lsls	r0, r2, #30
  404afa:	bf0c      	ite	eq
  404afc:	696b      	ldreq	r3, [r5, #20]
  404afe:	2300      	movne	r3, #0
  404b00:	1ba4      	subs	r4, r4, r6
  404b02:	60ab      	str	r3, [r5, #8]
  404b04:	e00a      	b.n	404b1c <__sflush_r+0xb8>
  404b06:	4623      	mov	r3, r4
  404b08:	4632      	mov	r2, r6
  404b0a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  404b0c:	69e9      	ldr	r1, [r5, #28]
  404b0e:	4640      	mov	r0, r8
  404b10:	47b8      	blx	r7
  404b12:	2800      	cmp	r0, #0
  404b14:	eba4 0400 	sub.w	r4, r4, r0
  404b18:	4406      	add	r6, r0
  404b1a:	dd04      	ble.n	404b26 <__sflush_r+0xc2>
  404b1c:	2c00      	cmp	r4, #0
  404b1e:	dcf2      	bgt.n	404b06 <__sflush_r+0xa2>
  404b20:	2000      	movs	r0, #0
  404b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b26:	89ab      	ldrh	r3, [r5, #12]
  404b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b2c:	81ab      	strh	r3, [r5, #12]
  404b2e:	f04f 30ff 	mov.w	r0, #4294967295
  404b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b36:	f8d8 2000 	ldr.w	r2, [r8]
  404b3a:	2a1d      	cmp	r2, #29
  404b3c:	d8f3      	bhi.n	404b26 <__sflush_r+0xc2>
  404b3e:	4b1a      	ldr	r3, [pc, #104]	; (404ba8 <__sflush_r+0x144>)
  404b40:	40d3      	lsrs	r3, r2
  404b42:	f003 0301 	and.w	r3, r3, #1
  404b46:	f083 0401 	eor.w	r4, r3, #1
  404b4a:	2b00      	cmp	r3, #0
  404b4c:	d0eb      	beq.n	404b26 <__sflush_r+0xc2>
  404b4e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404b52:	6929      	ldr	r1, [r5, #16]
  404b54:	6029      	str	r1, [r5, #0]
  404b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404b5a:	04d9      	lsls	r1, r3, #19
  404b5c:	606c      	str	r4, [r5, #4]
  404b5e:	81ab      	strh	r3, [r5, #12]
  404b60:	d5b7      	bpl.n	404ad2 <__sflush_r+0x6e>
  404b62:	2a00      	cmp	r2, #0
  404b64:	d1b5      	bne.n	404ad2 <__sflush_r+0x6e>
  404b66:	6528      	str	r0, [r5, #80]	; 0x50
  404b68:	e7b3      	b.n	404ad2 <__sflush_r+0x6e>
  404b6a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404b6c:	2a00      	cmp	r2, #0
  404b6e:	dc88      	bgt.n	404a82 <__sflush_r+0x1e>
  404b70:	e7d6      	b.n	404b20 <__sflush_r+0xbc>
  404b72:	2301      	movs	r3, #1
  404b74:	69e9      	ldr	r1, [r5, #28]
  404b76:	4640      	mov	r0, r8
  404b78:	47a0      	blx	r4
  404b7a:	1c43      	adds	r3, r0, #1
  404b7c:	4602      	mov	r2, r0
  404b7e:	d002      	beq.n	404b86 <__sflush_r+0x122>
  404b80:	89ab      	ldrh	r3, [r5, #12]
  404b82:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404b84:	e78c      	b.n	404aa0 <__sflush_r+0x3c>
  404b86:	f8d8 3000 	ldr.w	r3, [r8]
  404b8a:	2b00      	cmp	r3, #0
  404b8c:	d0f8      	beq.n	404b80 <__sflush_r+0x11c>
  404b8e:	2b1d      	cmp	r3, #29
  404b90:	d001      	beq.n	404b96 <__sflush_r+0x132>
  404b92:	2b16      	cmp	r3, #22
  404b94:	d102      	bne.n	404b9c <__sflush_r+0x138>
  404b96:	f8c8 6000 	str.w	r6, [r8]
  404b9a:	e7c1      	b.n	404b20 <__sflush_r+0xbc>
  404b9c:	89ab      	ldrh	r3, [r5, #12]
  404b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404ba2:	81ab      	strh	r3, [r5, #12]
  404ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ba8:	20400001 	.word	0x20400001

00404bac <_fflush_r>:
  404bac:	b510      	push	{r4, lr}
  404bae:	4604      	mov	r4, r0
  404bb0:	b082      	sub	sp, #8
  404bb2:	b108      	cbz	r0, 404bb8 <_fflush_r+0xc>
  404bb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404bb6:	b153      	cbz	r3, 404bce <_fflush_r+0x22>
  404bb8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  404bbc:	b908      	cbnz	r0, 404bc2 <_fflush_r+0x16>
  404bbe:	b002      	add	sp, #8
  404bc0:	bd10      	pop	{r4, pc}
  404bc2:	4620      	mov	r0, r4
  404bc4:	b002      	add	sp, #8
  404bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404bca:	f7ff bf4b 	b.w	404a64 <__sflush_r>
  404bce:	9101      	str	r1, [sp, #4]
  404bd0:	f000 f880 	bl	404cd4 <__sinit>
  404bd4:	9901      	ldr	r1, [sp, #4]
  404bd6:	e7ef      	b.n	404bb8 <_fflush_r+0xc>

00404bd8 <_cleanup_r>:
  404bd8:	4901      	ldr	r1, [pc, #4]	; (404be0 <_cleanup_r+0x8>)
  404bda:	f000 bbaf 	b.w	40533c <_fwalk_reent>
  404bde:	bf00      	nop
  404be0:	00406351 	.word	0x00406351

00404be4 <__sinit.part.1>:
  404be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404be8:	4b35      	ldr	r3, [pc, #212]	; (404cc0 <__sinit.part.1+0xdc>)
  404bea:	6845      	ldr	r5, [r0, #4]
  404bec:	63c3      	str	r3, [r0, #60]	; 0x3c
  404bee:	2400      	movs	r4, #0
  404bf0:	4607      	mov	r7, r0
  404bf2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  404bf6:	2304      	movs	r3, #4
  404bf8:	2103      	movs	r1, #3
  404bfa:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  404bfe:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  404c02:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  404c06:	b083      	sub	sp, #12
  404c08:	602c      	str	r4, [r5, #0]
  404c0a:	606c      	str	r4, [r5, #4]
  404c0c:	60ac      	str	r4, [r5, #8]
  404c0e:	666c      	str	r4, [r5, #100]	; 0x64
  404c10:	81ec      	strh	r4, [r5, #14]
  404c12:	612c      	str	r4, [r5, #16]
  404c14:	616c      	str	r4, [r5, #20]
  404c16:	61ac      	str	r4, [r5, #24]
  404c18:	81ab      	strh	r3, [r5, #12]
  404c1a:	4621      	mov	r1, r4
  404c1c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404c20:	2208      	movs	r2, #8
  404c22:	f7fe fdbb 	bl	40379c <memset>
  404c26:	68be      	ldr	r6, [r7, #8]
  404c28:	f8df b098 	ldr.w	fp, [pc, #152]	; 404cc4 <__sinit.part.1+0xe0>
  404c2c:	f8df a098 	ldr.w	sl, [pc, #152]	; 404cc8 <__sinit.part.1+0xe4>
  404c30:	f8df 9098 	ldr.w	r9, [pc, #152]	; 404ccc <__sinit.part.1+0xe8>
  404c34:	f8df 8098 	ldr.w	r8, [pc, #152]	; 404cd0 <__sinit.part.1+0xec>
  404c38:	f8c5 b020 	str.w	fp, [r5, #32]
  404c3c:	2301      	movs	r3, #1
  404c3e:	2209      	movs	r2, #9
  404c40:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  404c44:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404c48:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  404c4c:	61ed      	str	r5, [r5, #28]
  404c4e:	4621      	mov	r1, r4
  404c50:	81f3      	strh	r3, [r6, #14]
  404c52:	81b2      	strh	r2, [r6, #12]
  404c54:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  404c58:	6034      	str	r4, [r6, #0]
  404c5a:	6074      	str	r4, [r6, #4]
  404c5c:	60b4      	str	r4, [r6, #8]
  404c5e:	6674      	str	r4, [r6, #100]	; 0x64
  404c60:	6134      	str	r4, [r6, #16]
  404c62:	6174      	str	r4, [r6, #20]
  404c64:	61b4      	str	r4, [r6, #24]
  404c66:	2208      	movs	r2, #8
  404c68:	9301      	str	r3, [sp, #4]
  404c6a:	f7fe fd97 	bl	40379c <memset>
  404c6e:	68fd      	ldr	r5, [r7, #12]
  404c70:	61f6      	str	r6, [r6, #28]
  404c72:	2012      	movs	r0, #18
  404c74:	2202      	movs	r2, #2
  404c76:	f8c6 b020 	str.w	fp, [r6, #32]
  404c7a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  404c7e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  404c82:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  404c86:	4621      	mov	r1, r4
  404c88:	81a8      	strh	r0, [r5, #12]
  404c8a:	81ea      	strh	r2, [r5, #14]
  404c8c:	602c      	str	r4, [r5, #0]
  404c8e:	606c      	str	r4, [r5, #4]
  404c90:	60ac      	str	r4, [r5, #8]
  404c92:	666c      	str	r4, [r5, #100]	; 0x64
  404c94:	612c      	str	r4, [r5, #16]
  404c96:	616c      	str	r4, [r5, #20]
  404c98:	61ac      	str	r4, [r5, #24]
  404c9a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404c9e:	2208      	movs	r2, #8
  404ca0:	f7fe fd7c 	bl	40379c <memset>
  404ca4:	9b01      	ldr	r3, [sp, #4]
  404ca6:	61ed      	str	r5, [r5, #28]
  404ca8:	f8c5 b020 	str.w	fp, [r5, #32]
  404cac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  404cb0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404cb4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  404cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  404cba:	b003      	add	sp, #12
  404cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cc0:	00404bd9 	.word	0x00404bd9
  404cc4:	004060b9 	.word	0x004060b9
  404cc8:	004060dd 	.word	0x004060dd
  404ccc:	00406119 	.word	0x00406119
  404cd0:	00406139 	.word	0x00406139

00404cd4 <__sinit>:
  404cd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404cd6:	b103      	cbz	r3, 404cda <__sinit+0x6>
  404cd8:	4770      	bx	lr
  404cda:	f7ff bf83 	b.w	404be4 <__sinit.part.1>
  404cde:	bf00      	nop

00404ce0 <__sfp_lock_acquire>:
  404ce0:	4770      	bx	lr
  404ce2:	bf00      	nop

00404ce4 <__sfp_lock_release>:
  404ce4:	4770      	bx	lr
  404ce6:	bf00      	nop

00404ce8 <__libc_fini_array>:
  404ce8:	b538      	push	{r3, r4, r5, lr}
  404cea:	4d07      	ldr	r5, [pc, #28]	; (404d08 <__libc_fini_array+0x20>)
  404cec:	4c07      	ldr	r4, [pc, #28]	; (404d0c <__libc_fini_array+0x24>)
  404cee:	1b2c      	subs	r4, r5, r4
  404cf0:	10a4      	asrs	r4, r4, #2
  404cf2:	d005      	beq.n	404d00 <__libc_fini_array+0x18>
  404cf4:	3c01      	subs	r4, #1
  404cf6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404cfa:	4798      	blx	r3
  404cfc:	2c00      	cmp	r4, #0
  404cfe:	d1f9      	bne.n	404cf4 <__libc_fini_array+0xc>
  404d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404d04:	f002 bd2e 	b.w	407764 <_fini>
  404d08:	00407774 	.word	0x00407774
  404d0c:	00407770 	.word	0x00407770

00404d10 <__fputwc>:
  404d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404d14:	b082      	sub	sp, #8
  404d16:	4680      	mov	r8, r0
  404d18:	4689      	mov	r9, r1
  404d1a:	4614      	mov	r4, r2
  404d1c:	f000 fb3c 	bl	405398 <__locale_mb_cur_max>
  404d20:	2801      	cmp	r0, #1
  404d22:	d033      	beq.n	404d8c <__fputwc+0x7c>
  404d24:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404d28:	464a      	mov	r2, r9
  404d2a:	a901      	add	r1, sp, #4
  404d2c:	4640      	mov	r0, r8
  404d2e:	f001 fa5d 	bl	4061ec <_wcrtomb_r>
  404d32:	f1b0 3fff 	cmp.w	r0, #4294967295
  404d36:	4682      	mov	sl, r0
  404d38:	d021      	beq.n	404d7e <__fputwc+0x6e>
  404d3a:	b388      	cbz	r0, 404da0 <__fputwc+0x90>
  404d3c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  404d40:	2500      	movs	r5, #0
  404d42:	e008      	b.n	404d56 <__fputwc+0x46>
  404d44:	6823      	ldr	r3, [r4, #0]
  404d46:	1c5a      	adds	r2, r3, #1
  404d48:	6022      	str	r2, [r4, #0]
  404d4a:	701e      	strb	r6, [r3, #0]
  404d4c:	3501      	adds	r5, #1
  404d4e:	4555      	cmp	r5, sl
  404d50:	d226      	bcs.n	404da0 <__fputwc+0x90>
  404d52:	ab01      	add	r3, sp, #4
  404d54:	5d5e      	ldrb	r6, [r3, r5]
  404d56:	68a3      	ldr	r3, [r4, #8]
  404d58:	3b01      	subs	r3, #1
  404d5a:	2b00      	cmp	r3, #0
  404d5c:	60a3      	str	r3, [r4, #8]
  404d5e:	daf1      	bge.n	404d44 <__fputwc+0x34>
  404d60:	69a7      	ldr	r7, [r4, #24]
  404d62:	42bb      	cmp	r3, r7
  404d64:	4631      	mov	r1, r6
  404d66:	4622      	mov	r2, r4
  404d68:	4640      	mov	r0, r8
  404d6a:	db01      	blt.n	404d70 <__fputwc+0x60>
  404d6c:	2e0a      	cmp	r6, #10
  404d6e:	d1e9      	bne.n	404d44 <__fputwc+0x34>
  404d70:	f001 f9e6 	bl	406140 <__swbuf_r>
  404d74:	1c43      	adds	r3, r0, #1
  404d76:	d1e9      	bne.n	404d4c <__fputwc+0x3c>
  404d78:	b002      	add	sp, #8
  404d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404d7e:	89a3      	ldrh	r3, [r4, #12]
  404d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404d84:	81a3      	strh	r3, [r4, #12]
  404d86:	b002      	add	sp, #8
  404d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404d8c:	f109 33ff 	add.w	r3, r9, #4294967295
  404d90:	2bfe      	cmp	r3, #254	; 0xfe
  404d92:	d8c7      	bhi.n	404d24 <__fputwc+0x14>
  404d94:	fa5f f689 	uxtb.w	r6, r9
  404d98:	4682      	mov	sl, r0
  404d9a:	f88d 6004 	strb.w	r6, [sp, #4]
  404d9e:	e7cf      	b.n	404d40 <__fputwc+0x30>
  404da0:	4648      	mov	r0, r9
  404da2:	b002      	add	sp, #8
  404da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404da8 <_fputwc_r>:
  404da8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404dac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  404db0:	d10a      	bne.n	404dc8 <_fputwc_r+0x20>
  404db2:	b410      	push	{r4}
  404db4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  404db6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404dba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  404dbe:	6654      	str	r4, [r2, #100]	; 0x64
  404dc0:	8193      	strh	r3, [r2, #12]
  404dc2:	bc10      	pop	{r4}
  404dc4:	f7ff bfa4 	b.w	404d10 <__fputwc>
  404dc8:	f7ff bfa2 	b.w	404d10 <__fputwc>

00404dcc <_malloc_trim_r>:
  404dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404dce:	4f23      	ldr	r7, [pc, #140]	; (404e5c <_malloc_trim_r+0x90>)
  404dd0:	460c      	mov	r4, r1
  404dd2:	4606      	mov	r6, r0
  404dd4:	f000 ff6a 	bl	405cac <__malloc_lock>
  404dd8:	68bb      	ldr	r3, [r7, #8]
  404dda:	685d      	ldr	r5, [r3, #4]
  404ddc:	f025 0503 	bic.w	r5, r5, #3
  404de0:	1b29      	subs	r1, r5, r4
  404de2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  404de6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404dea:	f021 010f 	bic.w	r1, r1, #15
  404dee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404df2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404df6:	db07      	blt.n	404e08 <_malloc_trim_r+0x3c>
  404df8:	2100      	movs	r1, #0
  404dfa:	4630      	mov	r0, r6
  404dfc:	f001 f94a 	bl	406094 <_sbrk_r>
  404e00:	68bb      	ldr	r3, [r7, #8]
  404e02:	442b      	add	r3, r5
  404e04:	4298      	cmp	r0, r3
  404e06:	d004      	beq.n	404e12 <_malloc_trim_r+0x46>
  404e08:	4630      	mov	r0, r6
  404e0a:	f000 ff51 	bl	405cb0 <__malloc_unlock>
  404e0e:	2000      	movs	r0, #0
  404e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e12:	4261      	negs	r1, r4
  404e14:	4630      	mov	r0, r6
  404e16:	f001 f93d 	bl	406094 <_sbrk_r>
  404e1a:	3001      	adds	r0, #1
  404e1c:	d00d      	beq.n	404e3a <_malloc_trim_r+0x6e>
  404e1e:	4b10      	ldr	r3, [pc, #64]	; (404e60 <_malloc_trim_r+0x94>)
  404e20:	68ba      	ldr	r2, [r7, #8]
  404e22:	6819      	ldr	r1, [r3, #0]
  404e24:	1b2d      	subs	r5, r5, r4
  404e26:	f045 0501 	orr.w	r5, r5, #1
  404e2a:	4630      	mov	r0, r6
  404e2c:	1b09      	subs	r1, r1, r4
  404e2e:	6055      	str	r5, [r2, #4]
  404e30:	6019      	str	r1, [r3, #0]
  404e32:	f000 ff3d 	bl	405cb0 <__malloc_unlock>
  404e36:	2001      	movs	r0, #1
  404e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e3a:	2100      	movs	r1, #0
  404e3c:	4630      	mov	r0, r6
  404e3e:	f001 f929 	bl	406094 <_sbrk_r>
  404e42:	68ba      	ldr	r2, [r7, #8]
  404e44:	1a83      	subs	r3, r0, r2
  404e46:	2b0f      	cmp	r3, #15
  404e48:	ddde      	ble.n	404e08 <_malloc_trim_r+0x3c>
  404e4a:	4c06      	ldr	r4, [pc, #24]	; (404e64 <_malloc_trim_r+0x98>)
  404e4c:	4904      	ldr	r1, [pc, #16]	; (404e60 <_malloc_trim_r+0x94>)
  404e4e:	6824      	ldr	r4, [r4, #0]
  404e50:	f043 0301 	orr.w	r3, r3, #1
  404e54:	1b00      	subs	r0, r0, r4
  404e56:	6053      	str	r3, [r2, #4]
  404e58:	6008      	str	r0, [r1, #0]
  404e5a:	e7d5      	b.n	404e08 <_malloc_trim_r+0x3c>
  404e5c:	20400470 	.word	0x20400470
  404e60:	20400968 	.word	0x20400968
  404e64:	2040087c 	.word	0x2040087c

00404e68 <_free_r>:
  404e68:	2900      	cmp	r1, #0
  404e6a:	d045      	beq.n	404ef8 <_free_r+0x90>
  404e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404e70:	460d      	mov	r5, r1
  404e72:	4680      	mov	r8, r0
  404e74:	f000 ff1a 	bl	405cac <__malloc_lock>
  404e78:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404e7c:	496a      	ldr	r1, [pc, #424]	; (405028 <_free_r+0x1c0>)
  404e7e:	f027 0301 	bic.w	r3, r7, #1
  404e82:	f1a5 0408 	sub.w	r4, r5, #8
  404e86:	18e2      	adds	r2, r4, r3
  404e88:	688e      	ldr	r6, [r1, #8]
  404e8a:	6850      	ldr	r0, [r2, #4]
  404e8c:	42b2      	cmp	r2, r6
  404e8e:	f020 0003 	bic.w	r0, r0, #3
  404e92:	d062      	beq.n	404f5a <_free_r+0xf2>
  404e94:	07fe      	lsls	r6, r7, #31
  404e96:	6050      	str	r0, [r2, #4]
  404e98:	d40b      	bmi.n	404eb2 <_free_r+0x4a>
  404e9a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404e9e:	1be4      	subs	r4, r4, r7
  404ea0:	f101 0e08 	add.w	lr, r1, #8
  404ea4:	68a5      	ldr	r5, [r4, #8]
  404ea6:	4575      	cmp	r5, lr
  404ea8:	443b      	add	r3, r7
  404eaa:	d06f      	beq.n	404f8c <_free_r+0x124>
  404eac:	68e7      	ldr	r7, [r4, #12]
  404eae:	60ef      	str	r7, [r5, #12]
  404eb0:	60bd      	str	r5, [r7, #8]
  404eb2:	1815      	adds	r5, r2, r0
  404eb4:	686d      	ldr	r5, [r5, #4]
  404eb6:	07ed      	lsls	r5, r5, #31
  404eb8:	d542      	bpl.n	404f40 <_free_r+0xd8>
  404eba:	f043 0201 	orr.w	r2, r3, #1
  404ebe:	6062      	str	r2, [r4, #4]
  404ec0:	50e3      	str	r3, [r4, r3]
  404ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404ec6:	d218      	bcs.n	404efa <_free_r+0x92>
  404ec8:	08db      	lsrs	r3, r3, #3
  404eca:	1c5a      	adds	r2, r3, #1
  404ecc:	684d      	ldr	r5, [r1, #4]
  404ece:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  404ed2:	60a7      	str	r7, [r4, #8]
  404ed4:	2001      	movs	r0, #1
  404ed6:	109b      	asrs	r3, r3, #2
  404ed8:	fa00 f303 	lsl.w	r3, r0, r3
  404edc:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  404ee0:	431d      	orrs	r5, r3
  404ee2:	3808      	subs	r0, #8
  404ee4:	60e0      	str	r0, [r4, #12]
  404ee6:	604d      	str	r5, [r1, #4]
  404ee8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  404eec:	60fc      	str	r4, [r7, #12]
  404eee:	4640      	mov	r0, r8
  404ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404ef4:	f000 bedc 	b.w	405cb0 <__malloc_unlock>
  404ef8:	4770      	bx	lr
  404efa:	0a5a      	lsrs	r2, r3, #9
  404efc:	2a04      	cmp	r2, #4
  404efe:	d853      	bhi.n	404fa8 <_free_r+0x140>
  404f00:	099a      	lsrs	r2, r3, #6
  404f02:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404f06:	007f      	lsls	r7, r7, #1
  404f08:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404f0c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  404f10:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  404f14:	4944      	ldr	r1, [pc, #272]	; (405028 <_free_r+0x1c0>)
  404f16:	3808      	subs	r0, #8
  404f18:	4290      	cmp	r0, r2
  404f1a:	d04d      	beq.n	404fb8 <_free_r+0x150>
  404f1c:	6851      	ldr	r1, [r2, #4]
  404f1e:	f021 0103 	bic.w	r1, r1, #3
  404f22:	428b      	cmp	r3, r1
  404f24:	d202      	bcs.n	404f2c <_free_r+0xc4>
  404f26:	6892      	ldr	r2, [r2, #8]
  404f28:	4290      	cmp	r0, r2
  404f2a:	d1f7      	bne.n	404f1c <_free_r+0xb4>
  404f2c:	68d0      	ldr	r0, [r2, #12]
  404f2e:	60e0      	str	r0, [r4, #12]
  404f30:	60a2      	str	r2, [r4, #8]
  404f32:	6084      	str	r4, [r0, #8]
  404f34:	60d4      	str	r4, [r2, #12]
  404f36:	4640      	mov	r0, r8
  404f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404f3c:	f000 beb8 	b.w	405cb0 <__malloc_unlock>
  404f40:	6895      	ldr	r5, [r2, #8]
  404f42:	4f3a      	ldr	r7, [pc, #232]	; (40502c <_free_r+0x1c4>)
  404f44:	42bd      	cmp	r5, r7
  404f46:	4403      	add	r3, r0
  404f48:	d03f      	beq.n	404fca <_free_r+0x162>
  404f4a:	68d0      	ldr	r0, [r2, #12]
  404f4c:	60e8      	str	r0, [r5, #12]
  404f4e:	f043 0201 	orr.w	r2, r3, #1
  404f52:	6085      	str	r5, [r0, #8]
  404f54:	6062      	str	r2, [r4, #4]
  404f56:	50e3      	str	r3, [r4, r3]
  404f58:	e7b3      	b.n	404ec2 <_free_r+0x5a>
  404f5a:	07ff      	lsls	r7, r7, #31
  404f5c:	4403      	add	r3, r0
  404f5e:	d407      	bmi.n	404f70 <_free_r+0x108>
  404f60:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404f64:	1aa4      	subs	r4, r4, r2
  404f66:	4413      	add	r3, r2
  404f68:	68a0      	ldr	r0, [r4, #8]
  404f6a:	68e2      	ldr	r2, [r4, #12]
  404f6c:	60c2      	str	r2, [r0, #12]
  404f6e:	6090      	str	r0, [r2, #8]
  404f70:	4a2f      	ldr	r2, [pc, #188]	; (405030 <_free_r+0x1c8>)
  404f72:	6812      	ldr	r2, [r2, #0]
  404f74:	f043 0001 	orr.w	r0, r3, #1
  404f78:	4293      	cmp	r3, r2
  404f7a:	6060      	str	r0, [r4, #4]
  404f7c:	608c      	str	r4, [r1, #8]
  404f7e:	d3b6      	bcc.n	404eee <_free_r+0x86>
  404f80:	4b2c      	ldr	r3, [pc, #176]	; (405034 <_free_r+0x1cc>)
  404f82:	4640      	mov	r0, r8
  404f84:	6819      	ldr	r1, [r3, #0]
  404f86:	f7ff ff21 	bl	404dcc <_malloc_trim_r>
  404f8a:	e7b0      	b.n	404eee <_free_r+0x86>
  404f8c:	1811      	adds	r1, r2, r0
  404f8e:	6849      	ldr	r1, [r1, #4]
  404f90:	07c9      	lsls	r1, r1, #31
  404f92:	d444      	bmi.n	40501e <_free_r+0x1b6>
  404f94:	6891      	ldr	r1, [r2, #8]
  404f96:	68d2      	ldr	r2, [r2, #12]
  404f98:	60ca      	str	r2, [r1, #12]
  404f9a:	4403      	add	r3, r0
  404f9c:	f043 0001 	orr.w	r0, r3, #1
  404fa0:	6091      	str	r1, [r2, #8]
  404fa2:	6060      	str	r0, [r4, #4]
  404fa4:	50e3      	str	r3, [r4, r3]
  404fa6:	e7a2      	b.n	404eee <_free_r+0x86>
  404fa8:	2a14      	cmp	r2, #20
  404faa:	d817      	bhi.n	404fdc <_free_r+0x174>
  404fac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404fb0:	007f      	lsls	r7, r7, #1
  404fb2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404fb6:	e7a9      	b.n	404f0c <_free_r+0xa4>
  404fb8:	10aa      	asrs	r2, r5, #2
  404fba:	684b      	ldr	r3, [r1, #4]
  404fbc:	2501      	movs	r5, #1
  404fbe:	fa05 f202 	lsl.w	r2, r5, r2
  404fc2:	4313      	orrs	r3, r2
  404fc4:	604b      	str	r3, [r1, #4]
  404fc6:	4602      	mov	r2, r0
  404fc8:	e7b1      	b.n	404f2e <_free_r+0xc6>
  404fca:	f043 0201 	orr.w	r2, r3, #1
  404fce:	614c      	str	r4, [r1, #20]
  404fd0:	610c      	str	r4, [r1, #16]
  404fd2:	60e5      	str	r5, [r4, #12]
  404fd4:	60a5      	str	r5, [r4, #8]
  404fd6:	6062      	str	r2, [r4, #4]
  404fd8:	50e3      	str	r3, [r4, r3]
  404fda:	e788      	b.n	404eee <_free_r+0x86>
  404fdc:	2a54      	cmp	r2, #84	; 0x54
  404fde:	d806      	bhi.n	404fee <_free_r+0x186>
  404fe0:	0b1a      	lsrs	r2, r3, #12
  404fe2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404fe6:	007f      	lsls	r7, r7, #1
  404fe8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404fec:	e78e      	b.n	404f0c <_free_r+0xa4>
  404fee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404ff2:	d806      	bhi.n	405002 <_free_r+0x19a>
  404ff4:	0bda      	lsrs	r2, r3, #15
  404ff6:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404ffa:	007f      	lsls	r7, r7, #1
  404ffc:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405000:	e784      	b.n	404f0c <_free_r+0xa4>
  405002:	f240 5054 	movw	r0, #1364	; 0x554
  405006:	4282      	cmp	r2, r0
  405008:	d806      	bhi.n	405018 <_free_r+0x1b0>
  40500a:	0c9a      	lsrs	r2, r3, #18
  40500c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405010:	007f      	lsls	r7, r7, #1
  405012:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405016:	e779      	b.n	404f0c <_free_r+0xa4>
  405018:	27fe      	movs	r7, #254	; 0xfe
  40501a:	257e      	movs	r5, #126	; 0x7e
  40501c:	e776      	b.n	404f0c <_free_r+0xa4>
  40501e:	f043 0201 	orr.w	r2, r3, #1
  405022:	6062      	str	r2, [r4, #4]
  405024:	50e3      	str	r3, [r4, r3]
  405026:	e762      	b.n	404eee <_free_r+0x86>
  405028:	20400470 	.word	0x20400470
  40502c:	20400478 	.word	0x20400478
  405030:	20400878 	.word	0x20400878
  405034:	20400964 	.word	0x20400964

00405038 <__sfvwrite_r>:
  405038:	6893      	ldr	r3, [r2, #8]
  40503a:	2b00      	cmp	r3, #0
  40503c:	d076      	beq.n	40512c <__sfvwrite_r+0xf4>
  40503e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405042:	898b      	ldrh	r3, [r1, #12]
  405044:	b085      	sub	sp, #20
  405046:	460c      	mov	r4, r1
  405048:	0719      	lsls	r1, r3, #28
  40504a:	9001      	str	r0, [sp, #4]
  40504c:	4616      	mov	r6, r2
  40504e:	d529      	bpl.n	4050a4 <__sfvwrite_r+0x6c>
  405050:	6922      	ldr	r2, [r4, #16]
  405052:	b33a      	cbz	r2, 4050a4 <__sfvwrite_r+0x6c>
  405054:	f003 0802 	and.w	r8, r3, #2
  405058:	fa1f f088 	uxth.w	r0, r8
  40505c:	6835      	ldr	r5, [r6, #0]
  40505e:	2800      	cmp	r0, #0
  405060:	d02f      	beq.n	4050c2 <__sfvwrite_r+0x8a>
  405062:	f04f 0900 	mov.w	r9, #0
  405066:	4fb4      	ldr	r7, [pc, #720]	; (405338 <__sfvwrite_r+0x300>)
  405068:	46c8      	mov	r8, r9
  40506a:	46b2      	mov	sl, r6
  40506c:	45b8      	cmp	r8, r7
  40506e:	4643      	mov	r3, r8
  405070:	464a      	mov	r2, r9
  405072:	bf28      	it	cs
  405074:	463b      	movcs	r3, r7
  405076:	9801      	ldr	r0, [sp, #4]
  405078:	f1b8 0f00 	cmp.w	r8, #0
  40507c:	d050      	beq.n	405120 <__sfvwrite_r+0xe8>
  40507e:	69e1      	ldr	r1, [r4, #28]
  405080:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405082:	47b0      	blx	r6
  405084:	2800      	cmp	r0, #0
  405086:	dd71      	ble.n	40516c <__sfvwrite_r+0x134>
  405088:	f8da 3008 	ldr.w	r3, [sl, #8]
  40508c:	1a1b      	subs	r3, r3, r0
  40508e:	4481      	add	r9, r0
  405090:	ebc0 0808 	rsb	r8, r0, r8
  405094:	f8ca 3008 	str.w	r3, [sl, #8]
  405098:	2b00      	cmp	r3, #0
  40509a:	d1e7      	bne.n	40506c <__sfvwrite_r+0x34>
  40509c:	2000      	movs	r0, #0
  40509e:	b005      	add	sp, #20
  4050a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050a4:	4621      	mov	r1, r4
  4050a6:	9801      	ldr	r0, [sp, #4]
  4050a8:	f7ff fc68 	bl	40497c <__swsetup_r>
  4050ac:	2800      	cmp	r0, #0
  4050ae:	f040 813a 	bne.w	405326 <__sfvwrite_r+0x2ee>
  4050b2:	89a3      	ldrh	r3, [r4, #12]
  4050b4:	6835      	ldr	r5, [r6, #0]
  4050b6:	f003 0802 	and.w	r8, r3, #2
  4050ba:	fa1f f088 	uxth.w	r0, r8
  4050be:	2800      	cmp	r0, #0
  4050c0:	d1cf      	bne.n	405062 <__sfvwrite_r+0x2a>
  4050c2:	f013 0901 	ands.w	r9, r3, #1
  4050c6:	d15b      	bne.n	405180 <__sfvwrite_r+0x148>
  4050c8:	464f      	mov	r7, r9
  4050ca:	9602      	str	r6, [sp, #8]
  4050cc:	b31f      	cbz	r7, 405116 <__sfvwrite_r+0xde>
  4050ce:	059a      	lsls	r2, r3, #22
  4050d0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4050d4:	d52c      	bpl.n	405130 <__sfvwrite_r+0xf8>
  4050d6:	4547      	cmp	r7, r8
  4050d8:	46c2      	mov	sl, r8
  4050da:	f0c0 80a4 	bcc.w	405226 <__sfvwrite_r+0x1ee>
  4050de:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4050e2:	f040 80b1 	bne.w	405248 <__sfvwrite_r+0x210>
  4050e6:	6820      	ldr	r0, [r4, #0]
  4050e8:	4652      	mov	r2, sl
  4050ea:	4649      	mov	r1, r9
  4050ec:	f000 fd7a 	bl	405be4 <memmove>
  4050f0:	68a0      	ldr	r0, [r4, #8]
  4050f2:	6823      	ldr	r3, [r4, #0]
  4050f4:	ebc8 0000 	rsb	r0, r8, r0
  4050f8:	4453      	add	r3, sl
  4050fa:	60a0      	str	r0, [r4, #8]
  4050fc:	6023      	str	r3, [r4, #0]
  4050fe:	4638      	mov	r0, r7
  405100:	9a02      	ldr	r2, [sp, #8]
  405102:	6893      	ldr	r3, [r2, #8]
  405104:	1a1b      	subs	r3, r3, r0
  405106:	4481      	add	r9, r0
  405108:	1a3f      	subs	r7, r7, r0
  40510a:	6093      	str	r3, [r2, #8]
  40510c:	2b00      	cmp	r3, #0
  40510e:	d0c5      	beq.n	40509c <__sfvwrite_r+0x64>
  405110:	89a3      	ldrh	r3, [r4, #12]
  405112:	2f00      	cmp	r7, #0
  405114:	d1db      	bne.n	4050ce <__sfvwrite_r+0x96>
  405116:	f8d5 9000 	ldr.w	r9, [r5]
  40511a:	686f      	ldr	r7, [r5, #4]
  40511c:	3508      	adds	r5, #8
  40511e:	e7d5      	b.n	4050cc <__sfvwrite_r+0x94>
  405120:	f8d5 9000 	ldr.w	r9, [r5]
  405124:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405128:	3508      	adds	r5, #8
  40512a:	e79f      	b.n	40506c <__sfvwrite_r+0x34>
  40512c:	2000      	movs	r0, #0
  40512e:	4770      	bx	lr
  405130:	6820      	ldr	r0, [r4, #0]
  405132:	6923      	ldr	r3, [r4, #16]
  405134:	4298      	cmp	r0, r3
  405136:	d803      	bhi.n	405140 <__sfvwrite_r+0x108>
  405138:	6961      	ldr	r1, [r4, #20]
  40513a:	428f      	cmp	r7, r1
  40513c:	f080 80b7 	bcs.w	4052ae <__sfvwrite_r+0x276>
  405140:	45b8      	cmp	r8, r7
  405142:	bf28      	it	cs
  405144:	46b8      	movcs	r8, r7
  405146:	4642      	mov	r2, r8
  405148:	4649      	mov	r1, r9
  40514a:	f000 fd4b 	bl	405be4 <memmove>
  40514e:	68a3      	ldr	r3, [r4, #8]
  405150:	6822      	ldr	r2, [r4, #0]
  405152:	ebc8 0303 	rsb	r3, r8, r3
  405156:	4442      	add	r2, r8
  405158:	60a3      	str	r3, [r4, #8]
  40515a:	6022      	str	r2, [r4, #0]
  40515c:	2b00      	cmp	r3, #0
  40515e:	d149      	bne.n	4051f4 <__sfvwrite_r+0x1bc>
  405160:	4621      	mov	r1, r4
  405162:	9801      	ldr	r0, [sp, #4]
  405164:	f7ff fd22 	bl	404bac <_fflush_r>
  405168:	2800      	cmp	r0, #0
  40516a:	d043      	beq.n	4051f4 <__sfvwrite_r+0x1bc>
  40516c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405174:	f04f 30ff 	mov.w	r0, #4294967295
  405178:	81a3      	strh	r3, [r4, #12]
  40517a:	b005      	add	sp, #20
  40517c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405180:	4680      	mov	r8, r0
  405182:	9002      	str	r0, [sp, #8]
  405184:	4682      	mov	sl, r0
  405186:	4681      	mov	r9, r0
  405188:	f1b9 0f00 	cmp.w	r9, #0
  40518c:	d02a      	beq.n	4051e4 <__sfvwrite_r+0x1ac>
  40518e:	9b02      	ldr	r3, [sp, #8]
  405190:	2b00      	cmp	r3, #0
  405192:	d04c      	beq.n	40522e <__sfvwrite_r+0x1f6>
  405194:	6820      	ldr	r0, [r4, #0]
  405196:	6923      	ldr	r3, [r4, #16]
  405198:	6962      	ldr	r2, [r4, #20]
  40519a:	45c8      	cmp	r8, r9
  40519c:	46c3      	mov	fp, r8
  40519e:	bf28      	it	cs
  4051a0:	46cb      	movcs	fp, r9
  4051a2:	4298      	cmp	r0, r3
  4051a4:	465f      	mov	r7, fp
  4051a6:	d904      	bls.n	4051b2 <__sfvwrite_r+0x17a>
  4051a8:	68a3      	ldr	r3, [r4, #8]
  4051aa:	4413      	add	r3, r2
  4051ac:	459b      	cmp	fp, r3
  4051ae:	f300 8090 	bgt.w	4052d2 <__sfvwrite_r+0x29a>
  4051b2:	4593      	cmp	fp, r2
  4051b4:	db20      	blt.n	4051f8 <__sfvwrite_r+0x1c0>
  4051b6:	4613      	mov	r3, r2
  4051b8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4051ba:	69e1      	ldr	r1, [r4, #28]
  4051bc:	9801      	ldr	r0, [sp, #4]
  4051be:	4652      	mov	r2, sl
  4051c0:	47b8      	blx	r7
  4051c2:	1e07      	subs	r7, r0, #0
  4051c4:	ddd2      	ble.n	40516c <__sfvwrite_r+0x134>
  4051c6:	ebb8 0807 	subs.w	r8, r8, r7
  4051ca:	d023      	beq.n	405214 <__sfvwrite_r+0x1dc>
  4051cc:	68b3      	ldr	r3, [r6, #8]
  4051ce:	1bdb      	subs	r3, r3, r7
  4051d0:	44ba      	add	sl, r7
  4051d2:	ebc7 0909 	rsb	r9, r7, r9
  4051d6:	60b3      	str	r3, [r6, #8]
  4051d8:	2b00      	cmp	r3, #0
  4051da:	f43f af5f 	beq.w	40509c <__sfvwrite_r+0x64>
  4051de:	f1b9 0f00 	cmp.w	r9, #0
  4051e2:	d1d4      	bne.n	40518e <__sfvwrite_r+0x156>
  4051e4:	2300      	movs	r3, #0
  4051e6:	f8d5 a000 	ldr.w	sl, [r5]
  4051ea:	f8d5 9004 	ldr.w	r9, [r5, #4]
  4051ee:	9302      	str	r3, [sp, #8]
  4051f0:	3508      	adds	r5, #8
  4051f2:	e7c9      	b.n	405188 <__sfvwrite_r+0x150>
  4051f4:	4640      	mov	r0, r8
  4051f6:	e783      	b.n	405100 <__sfvwrite_r+0xc8>
  4051f8:	465a      	mov	r2, fp
  4051fa:	4651      	mov	r1, sl
  4051fc:	f000 fcf2 	bl	405be4 <memmove>
  405200:	68a2      	ldr	r2, [r4, #8]
  405202:	6823      	ldr	r3, [r4, #0]
  405204:	ebcb 0202 	rsb	r2, fp, r2
  405208:	445b      	add	r3, fp
  40520a:	ebb8 0807 	subs.w	r8, r8, r7
  40520e:	60a2      	str	r2, [r4, #8]
  405210:	6023      	str	r3, [r4, #0]
  405212:	d1db      	bne.n	4051cc <__sfvwrite_r+0x194>
  405214:	4621      	mov	r1, r4
  405216:	9801      	ldr	r0, [sp, #4]
  405218:	f7ff fcc8 	bl	404bac <_fflush_r>
  40521c:	2800      	cmp	r0, #0
  40521e:	d1a5      	bne.n	40516c <__sfvwrite_r+0x134>
  405220:	f8cd 8008 	str.w	r8, [sp, #8]
  405224:	e7d2      	b.n	4051cc <__sfvwrite_r+0x194>
  405226:	6820      	ldr	r0, [r4, #0]
  405228:	46b8      	mov	r8, r7
  40522a:	46ba      	mov	sl, r7
  40522c:	e75c      	b.n	4050e8 <__sfvwrite_r+0xb0>
  40522e:	464a      	mov	r2, r9
  405230:	210a      	movs	r1, #10
  405232:	4650      	mov	r0, sl
  405234:	f000 fbec 	bl	405a10 <memchr>
  405238:	2800      	cmp	r0, #0
  40523a:	d06f      	beq.n	40531c <__sfvwrite_r+0x2e4>
  40523c:	3001      	adds	r0, #1
  40523e:	2301      	movs	r3, #1
  405240:	ebca 0800 	rsb	r8, sl, r0
  405244:	9302      	str	r3, [sp, #8]
  405246:	e7a5      	b.n	405194 <__sfvwrite_r+0x15c>
  405248:	6962      	ldr	r2, [r4, #20]
  40524a:	6820      	ldr	r0, [r4, #0]
  40524c:	6921      	ldr	r1, [r4, #16]
  40524e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405252:	ebc1 0a00 	rsb	sl, r1, r0
  405256:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40525a:	f10a 0001 	add.w	r0, sl, #1
  40525e:	ea4f 0868 	mov.w	r8, r8, asr #1
  405262:	4438      	add	r0, r7
  405264:	4540      	cmp	r0, r8
  405266:	4642      	mov	r2, r8
  405268:	bf84      	itt	hi
  40526a:	4680      	movhi	r8, r0
  40526c:	4642      	movhi	r2, r8
  40526e:	055b      	lsls	r3, r3, #21
  405270:	d542      	bpl.n	4052f8 <__sfvwrite_r+0x2c0>
  405272:	4611      	mov	r1, r2
  405274:	9801      	ldr	r0, [sp, #4]
  405276:	f000 f911 	bl	40549c <_malloc_r>
  40527a:	4683      	mov	fp, r0
  40527c:	2800      	cmp	r0, #0
  40527e:	d055      	beq.n	40532c <__sfvwrite_r+0x2f4>
  405280:	4652      	mov	r2, sl
  405282:	6921      	ldr	r1, [r4, #16]
  405284:	f000 fc14 	bl	405ab0 <memcpy>
  405288:	89a3      	ldrh	r3, [r4, #12]
  40528a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40528e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405292:	81a3      	strh	r3, [r4, #12]
  405294:	ebca 0308 	rsb	r3, sl, r8
  405298:	eb0b 000a 	add.w	r0, fp, sl
  40529c:	f8c4 8014 	str.w	r8, [r4, #20]
  4052a0:	f8c4 b010 	str.w	fp, [r4, #16]
  4052a4:	6020      	str	r0, [r4, #0]
  4052a6:	60a3      	str	r3, [r4, #8]
  4052a8:	46b8      	mov	r8, r7
  4052aa:	46ba      	mov	sl, r7
  4052ac:	e71c      	b.n	4050e8 <__sfvwrite_r+0xb0>
  4052ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4052b2:	42bb      	cmp	r3, r7
  4052b4:	bf28      	it	cs
  4052b6:	463b      	movcs	r3, r7
  4052b8:	464a      	mov	r2, r9
  4052ba:	fb93 f3f1 	sdiv	r3, r3, r1
  4052be:	9801      	ldr	r0, [sp, #4]
  4052c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4052c2:	fb01 f303 	mul.w	r3, r1, r3
  4052c6:	69e1      	ldr	r1, [r4, #28]
  4052c8:	47b0      	blx	r6
  4052ca:	2800      	cmp	r0, #0
  4052cc:	f73f af18 	bgt.w	405100 <__sfvwrite_r+0xc8>
  4052d0:	e74c      	b.n	40516c <__sfvwrite_r+0x134>
  4052d2:	461a      	mov	r2, r3
  4052d4:	4651      	mov	r1, sl
  4052d6:	9303      	str	r3, [sp, #12]
  4052d8:	f000 fc84 	bl	405be4 <memmove>
  4052dc:	6822      	ldr	r2, [r4, #0]
  4052de:	9b03      	ldr	r3, [sp, #12]
  4052e0:	9801      	ldr	r0, [sp, #4]
  4052e2:	441a      	add	r2, r3
  4052e4:	6022      	str	r2, [r4, #0]
  4052e6:	4621      	mov	r1, r4
  4052e8:	f7ff fc60 	bl	404bac <_fflush_r>
  4052ec:	9b03      	ldr	r3, [sp, #12]
  4052ee:	2800      	cmp	r0, #0
  4052f0:	f47f af3c 	bne.w	40516c <__sfvwrite_r+0x134>
  4052f4:	461f      	mov	r7, r3
  4052f6:	e766      	b.n	4051c6 <__sfvwrite_r+0x18e>
  4052f8:	9801      	ldr	r0, [sp, #4]
  4052fa:	f000 fcdb 	bl	405cb4 <_realloc_r>
  4052fe:	4683      	mov	fp, r0
  405300:	2800      	cmp	r0, #0
  405302:	d1c7      	bne.n	405294 <__sfvwrite_r+0x25c>
  405304:	9d01      	ldr	r5, [sp, #4]
  405306:	6921      	ldr	r1, [r4, #16]
  405308:	4628      	mov	r0, r5
  40530a:	f7ff fdad 	bl	404e68 <_free_r>
  40530e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405312:	220c      	movs	r2, #12
  405314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405318:	602a      	str	r2, [r5, #0]
  40531a:	e729      	b.n	405170 <__sfvwrite_r+0x138>
  40531c:	2301      	movs	r3, #1
  40531e:	f109 0801 	add.w	r8, r9, #1
  405322:	9302      	str	r3, [sp, #8]
  405324:	e736      	b.n	405194 <__sfvwrite_r+0x15c>
  405326:	f04f 30ff 	mov.w	r0, #4294967295
  40532a:	e6b8      	b.n	40509e <__sfvwrite_r+0x66>
  40532c:	9a01      	ldr	r2, [sp, #4]
  40532e:	230c      	movs	r3, #12
  405330:	6013      	str	r3, [r2, #0]
  405332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405336:	e71b      	b.n	405170 <__sfvwrite_r+0x138>
  405338:	7ffffc00 	.word	0x7ffffc00

0040533c <_fwalk_reent>:
  40533c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405340:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405344:	d01f      	beq.n	405386 <_fwalk_reent+0x4a>
  405346:	4688      	mov	r8, r1
  405348:	4606      	mov	r6, r0
  40534a:	f04f 0900 	mov.w	r9, #0
  40534e:	687d      	ldr	r5, [r7, #4]
  405350:	68bc      	ldr	r4, [r7, #8]
  405352:	3d01      	subs	r5, #1
  405354:	d411      	bmi.n	40537a <_fwalk_reent+0x3e>
  405356:	89a3      	ldrh	r3, [r4, #12]
  405358:	2b01      	cmp	r3, #1
  40535a:	f105 35ff 	add.w	r5, r5, #4294967295
  40535e:	d908      	bls.n	405372 <_fwalk_reent+0x36>
  405360:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405364:	3301      	adds	r3, #1
  405366:	4621      	mov	r1, r4
  405368:	4630      	mov	r0, r6
  40536a:	d002      	beq.n	405372 <_fwalk_reent+0x36>
  40536c:	47c0      	blx	r8
  40536e:	ea49 0900 	orr.w	r9, r9, r0
  405372:	1c6b      	adds	r3, r5, #1
  405374:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405378:	d1ed      	bne.n	405356 <_fwalk_reent+0x1a>
  40537a:	683f      	ldr	r7, [r7, #0]
  40537c:	2f00      	cmp	r7, #0
  40537e:	d1e6      	bne.n	40534e <_fwalk_reent+0x12>
  405380:	4648      	mov	r0, r9
  405382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405386:	46b9      	mov	r9, r7
  405388:	4648      	mov	r0, r9
  40538a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40538e:	bf00      	nop

00405390 <__locale_charset>:
  405390:	4800      	ldr	r0, [pc, #0]	; (405394 <__locale_charset+0x4>)
  405392:	4770      	bx	lr
  405394:	2040044c 	.word	0x2040044c

00405398 <__locale_mb_cur_max>:
  405398:	4b01      	ldr	r3, [pc, #4]	; (4053a0 <__locale_mb_cur_max+0x8>)
  40539a:	6818      	ldr	r0, [r3, #0]
  40539c:	4770      	bx	lr
  40539e:	bf00      	nop
  4053a0:	2040046c 	.word	0x2040046c

004053a4 <__swhatbuf_r>:
  4053a4:	b570      	push	{r4, r5, r6, lr}
  4053a6:	460d      	mov	r5, r1
  4053a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4053ac:	2900      	cmp	r1, #0
  4053ae:	b090      	sub	sp, #64	; 0x40
  4053b0:	4614      	mov	r4, r2
  4053b2:	461e      	mov	r6, r3
  4053b4:	db14      	blt.n	4053e0 <__swhatbuf_r+0x3c>
  4053b6:	aa01      	add	r2, sp, #4
  4053b8:	f001 f80c 	bl	4063d4 <_fstat_r>
  4053bc:	2800      	cmp	r0, #0
  4053be:	db0f      	blt.n	4053e0 <__swhatbuf_r+0x3c>
  4053c0:	9a02      	ldr	r2, [sp, #8]
  4053c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4053c6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4053ca:	fab2 f282 	clz	r2, r2
  4053ce:	0952      	lsrs	r2, r2, #5
  4053d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4053d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4053d8:	6032      	str	r2, [r6, #0]
  4053da:	6023      	str	r3, [r4, #0]
  4053dc:	b010      	add	sp, #64	; 0x40
  4053de:	bd70      	pop	{r4, r5, r6, pc}
  4053e0:	89a8      	ldrh	r0, [r5, #12]
  4053e2:	f000 0080 	and.w	r0, r0, #128	; 0x80
  4053e6:	b282      	uxth	r2, r0
  4053e8:	2000      	movs	r0, #0
  4053ea:	6030      	str	r0, [r6, #0]
  4053ec:	b11a      	cbz	r2, 4053f6 <__swhatbuf_r+0x52>
  4053ee:	2340      	movs	r3, #64	; 0x40
  4053f0:	6023      	str	r3, [r4, #0]
  4053f2:	b010      	add	sp, #64	; 0x40
  4053f4:	bd70      	pop	{r4, r5, r6, pc}
  4053f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4053fa:	4610      	mov	r0, r2
  4053fc:	6023      	str	r3, [r4, #0]
  4053fe:	b010      	add	sp, #64	; 0x40
  405400:	bd70      	pop	{r4, r5, r6, pc}
  405402:	bf00      	nop

00405404 <__smakebuf_r>:
  405404:	898a      	ldrh	r2, [r1, #12]
  405406:	0792      	lsls	r2, r2, #30
  405408:	460b      	mov	r3, r1
  40540a:	d506      	bpl.n	40541a <__smakebuf_r+0x16>
  40540c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405410:	2101      	movs	r1, #1
  405412:	601a      	str	r2, [r3, #0]
  405414:	611a      	str	r2, [r3, #16]
  405416:	6159      	str	r1, [r3, #20]
  405418:	4770      	bx	lr
  40541a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40541c:	b083      	sub	sp, #12
  40541e:	ab01      	add	r3, sp, #4
  405420:	466a      	mov	r2, sp
  405422:	460c      	mov	r4, r1
  405424:	4605      	mov	r5, r0
  405426:	f7ff ffbd 	bl	4053a4 <__swhatbuf_r>
  40542a:	9900      	ldr	r1, [sp, #0]
  40542c:	4606      	mov	r6, r0
  40542e:	4628      	mov	r0, r5
  405430:	f000 f834 	bl	40549c <_malloc_r>
  405434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405438:	b1d0      	cbz	r0, 405470 <__smakebuf_r+0x6c>
  40543a:	9a01      	ldr	r2, [sp, #4]
  40543c:	4f12      	ldr	r7, [pc, #72]	; (405488 <__smakebuf_r+0x84>)
  40543e:	9900      	ldr	r1, [sp, #0]
  405440:	63ef      	str	r7, [r5, #60]	; 0x3c
  405442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405446:	81a3      	strh	r3, [r4, #12]
  405448:	6020      	str	r0, [r4, #0]
  40544a:	6120      	str	r0, [r4, #16]
  40544c:	6161      	str	r1, [r4, #20]
  40544e:	b91a      	cbnz	r2, 405458 <__smakebuf_r+0x54>
  405450:	4333      	orrs	r3, r6
  405452:	81a3      	strh	r3, [r4, #12]
  405454:	b003      	add	sp, #12
  405456:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405458:	4628      	mov	r0, r5
  40545a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40545e:	f000 ffcd 	bl	4063fc <_isatty_r>
  405462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405466:	2800      	cmp	r0, #0
  405468:	d0f2      	beq.n	405450 <__smakebuf_r+0x4c>
  40546a:	f043 0301 	orr.w	r3, r3, #1
  40546e:	e7ef      	b.n	405450 <__smakebuf_r+0x4c>
  405470:	059a      	lsls	r2, r3, #22
  405472:	d4ef      	bmi.n	405454 <__smakebuf_r+0x50>
  405474:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405478:	f043 0302 	orr.w	r3, r3, #2
  40547c:	2101      	movs	r1, #1
  40547e:	81a3      	strh	r3, [r4, #12]
  405480:	6022      	str	r2, [r4, #0]
  405482:	6122      	str	r2, [r4, #16]
  405484:	6161      	str	r1, [r4, #20]
  405486:	e7e5      	b.n	405454 <__smakebuf_r+0x50>
  405488:	00404bd9 	.word	0x00404bd9

0040548c <malloc>:
  40548c:	4b02      	ldr	r3, [pc, #8]	; (405498 <malloc+0xc>)
  40548e:	4601      	mov	r1, r0
  405490:	6818      	ldr	r0, [r3, #0]
  405492:	f000 b803 	b.w	40549c <_malloc_r>
  405496:	bf00      	nop
  405498:	20400448 	.word	0x20400448

0040549c <_malloc_r>:
  40549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054a0:	f101 050b 	add.w	r5, r1, #11
  4054a4:	2d16      	cmp	r5, #22
  4054a6:	b083      	sub	sp, #12
  4054a8:	4606      	mov	r6, r0
  4054aa:	f240 809f 	bls.w	4055ec <_malloc_r+0x150>
  4054ae:	f035 0507 	bics.w	r5, r5, #7
  4054b2:	f100 80bf 	bmi.w	405634 <_malloc_r+0x198>
  4054b6:	42a9      	cmp	r1, r5
  4054b8:	f200 80bc 	bhi.w	405634 <_malloc_r+0x198>
  4054bc:	f000 fbf6 	bl	405cac <__malloc_lock>
  4054c0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4054c4:	f0c0 829c 	bcc.w	405a00 <_malloc_r+0x564>
  4054c8:	0a6b      	lsrs	r3, r5, #9
  4054ca:	f000 80ba 	beq.w	405642 <_malloc_r+0x1a6>
  4054ce:	2b04      	cmp	r3, #4
  4054d0:	f200 8183 	bhi.w	4057da <_malloc_r+0x33e>
  4054d4:	09a8      	lsrs	r0, r5, #6
  4054d6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  4054da:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4054de:	3038      	adds	r0, #56	; 0x38
  4054e0:	4fc4      	ldr	r7, [pc, #784]	; (4057f4 <_malloc_r+0x358>)
  4054e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4054e6:	f1a3 0108 	sub.w	r1, r3, #8
  4054ea:	685c      	ldr	r4, [r3, #4]
  4054ec:	42a1      	cmp	r1, r4
  4054ee:	d107      	bne.n	405500 <_malloc_r+0x64>
  4054f0:	e0ac      	b.n	40564c <_malloc_r+0x1b0>
  4054f2:	2a00      	cmp	r2, #0
  4054f4:	f280 80ac 	bge.w	405650 <_malloc_r+0x1b4>
  4054f8:	68e4      	ldr	r4, [r4, #12]
  4054fa:	42a1      	cmp	r1, r4
  4054fc:	f000 80a6 	beq.w	40564c <_malloc_r+0x1b0>
  405500:	6863      	ldr	r3, [r4, #4]
  405502:	f023 0303 	bic.w	r3, r3, #3
  405506:	1b5a      	subs	r2, r3, r5
  405508:	2a0f      	cmp	r2, #15
  40550a:	ddf2      	ble.n	4054f2 <_malloc_r+0x56>
  40550c:	49b9      	ldr	r1, [pc, #740]	; (4057f4 <_malloc_r+0x358>)
  40550e:	693c      	ldr	r4, [r7, #16]
  405510:	f101 0e08 	add.w	lr, r1, #8
  405514:	4574      	cmp	r4, lr
  405516:	f000 81b3 	beq.w	405880 <_malloc_r+0x3e4>
  40551a:	6863      	ldr	r3, [r4, #4]
  40551c:	f023 0303 	bic.w	r3, r3, #3
  405520:	1b5a      	subs	r2, r3, r5
  405522:	2a0f      	cmp	r2, #15
  405524:	f300 8199 	bgt.w	40585a <_malloc_r+0x3be>
  405528:	2a00      	cmp	r2, #0
  40552a:	f8c1 e014 	str.w	lr, [r1, #20]
  40552e:	f8c1 e010 	str.w	lr, [r1, #16]
  405532:	f280 809e 	bge.w	405672 <_malloc_r+0x1d6>
  405536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40553a:	f080 8167 	bcs.w	40580c <_malloc_r+0x370>
  40553e:	08db      	lsrs	r3, r3, #3
  405540:	f103 0c01 	add.w	ip, r3, #1
  405544:	2201      	movs	r2, #1
  405546:	109b      	asrs	r3, r3, #2
  405548:	fa02 f303 	lsl.w	r3, r2, r3
  40554c:	684a      	ldr	r2, [r1, #4]
  40554e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  405552:	f8c4 8008 	str.w	r8, [r4, #8]
  405556:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40555a:	431a      	orrs	r2, r3
  40555c:	f1a9 0308 	sub.w	r3, r9, #8
  405560:	60e3      	str	r3, [r4, #12]
  405562:	604a      	str	r2, [r1, #4]
  405564:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  405568:	f8c8 400c 	str.w	r4, [r8, #12]
  40556c:	1083      	asrs	r3, r0, #2
  40556e:	2401      	movs	r4, #1
  405570:	409c      	lsls	r4, r3
  405572:	4294      	cmp	r4, r2
  405574:	f200 808a 	bhi.w	40568c <_malloc_r+0x1f0>
  405578:	4214      	tst	r4, r2
  40557a:	d106      	bne.n	40558a <_malloc_r+0xee>
  40557c:	f020 0003 	bic.w	r0, r0, #3
  405580:	0064      	lsls	r4, r4, #1
  405582:	4214      	tst	r4, r2
  405584:	f100 0004 	add.w	r0, r0, #4
  405588:	d0fa      	beq.n	405580 <_malloc_r+0xe4>
  40558a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40558e:	46cc      	mov	ip, r9
  405590:	4680      	mov	r8, r0
  405592:	f8dc 100c 	ldr.w	r1, [ip, #12]
  405596:	458c      	cmp	ip, r1
  405598:	d107      	bne.n	4055aa <_malloc_r+0x10e>
  40559a:	e173      	b.n	405884 <_malloc_r+0x3e8>
  40559c:	2a00      	cmp	r2, #0
  40559e:	f280 8181 	bge.w	4058a4 <_malloc_r+0x408>
  4055a2:	68c9      	ldr	r1, [r1, #12]
  4055a4:	458c      	cmp	ip, r1
  4055a6:	f000 816d 	beq.w	405884 <_malloc_r+0x3e8>
  4055aa:	684b      	ldr	r3, [r1, #4]
  4055ac:	f023 0303 	bic.w	r3, r3, #3
  4055b0:	1b5a      	subs	r2, r3, r5
  4055b2:	2a0f      	cmp	r2, #15
  4055b4:	ddf2      	ble.n	40559c <_malloc_r+0x100>
  4055b6:	460c      	mov	r4, r1
  4055b8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4055bc:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4055c0:	194b      	adds	r3, r1, r5
  4055c2:	f045 0501 	orr.w	r5, r5, #1
  4055c6:	604d      	str	r5, [r1, #4]
  4055c8:	f042 0101 	orr.w	r1, r2, #1
  4055cc:	f8c8 c00c 	str.w	ip, [r8, #12]
  4055d0:	4630      	mov	r0, r6
  4055d2:	f8cc 8008 	str.w	r8, [ip, #8]
  4055d6:	617b      	str	r3, [r7, #20]
  4055d8:	613b      	str	r3, [r7, #16]
  4055da:	f8c3 e00c 	str.w	lr, [r3, #12]
  4055de:	f8c3 e008 	str.w	lr, [r3, #8]
  4055e2:	6059      	str	r1, [r3, #4]
  4055e4:	509a      	str	r2, [r3, r2]
  4055e6:	f000 fb63 	bl	405cb0 <__malloc_unlock>
  4055ea:	e01f      	b.n	40562c <_malloc_r+0x190>
  4055ec:	2910      	cmp	r1, #16
  4055ee:	d821      	bhi.n	405634 <_malloc_r+0x198>
  4055f0:	f000 fb5c 	bl	405cac <__malloc_lock>
  4055f4:	2510      	movs	r5, #16
  4055f6:	2306      	movs	r3, #6
  4055f8:	2002      	movs	r0, #2
  4055fa:	4f7e      	ldr	r7, [pc, #504]	; (4057f4 <_malloc_r+0x358>)
  4055fc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  405600:	f1a3 0208 	sub.w	r2, r3, #8
  405604:	685c      	ldr	r4, [r3, #4]
  405606:	4294      	cmp	r4, r2
  405608:	f000 8145 	beq.w	405896 <_malloc_r+0x3fa>
  40560c:	6863      	ldr	r3, [r4, #4]
  40560e:	68e1      	ldr	r1, [r4, #12]
  405610:	68a5      	ldr	r5, [r4, #8]
  405612:	f023 0303 	bic.w	r3, r3, #3
  405616:	4423      	add	r3, r4
  405618:	4630      	mov	r0, r6
  40561a:	685a      	ldr	r2, [r3, #4]
  40561c:	60e9      	str	r1, [r5, #12]
  40561e:	f042 0201 	orr.w	r2, r2, #1
  405622:	608d      	str	r5, [r1, #8]
  405624:	605a      	str	r2, [r3, #4]
  405626:	f000 fb43 	bl	405cb0 <__malloc_unlock>
  40562a:	3408      	adds	r4, #8
  40562c:	4620      	mov	r0, r4
  40562e:	b003      	add	sp, #12
  405630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405634:	2400      	movs	r4, #0
  405636:	230c      	movs	r3, #12
  405638:	4620      	mov	r0, r4
  40563a:	6033      	str	r3, [r6, #0]
  40563c:	b003      	add	sp, #12
  40563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405642:	2380      	movs	r3, #128	; 0x80
  405644:	f04f 0e40 	mov.w	lr, #64	; 0x40
  405648:	203f      	movs	r0, #63	; 0x3f
  40564a:	e749      	b.n	4054e0 <_malloc_r+0x44>
  40564c:	4670      	mov	r0, lr
  40564e:	e75d      	b.n	40550c <_malloc_r+0x70>
  405650:	4423      	add	r3, r4
  405652:	68e1      	ldr	r1, [r4, #12]
  405654:	685a      	ldr	r2, [r3, #4]
  405656:	68a5      	ldr	r5, [r4, #8]
  405658:	f042 0201 	orr.w	r2, r2, #1
  40565c:	60e9      	str	r1, [r5, #12]
  40565e:	4630      	mov	r0, r6
  405660:	608d      	str	r5, [r1, #8]
  405662:	605a      	str	r2, [r3, #4]
  405664:	f000 fb24 	bl	405cb0 <__malloc_unlock>
  405668:	3408      	adds	r4, #8
  40566a:	4620      	mov	r0, r4
  40566c:	b003      	add	sp, #12
  40566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405672:	4423      	add	r3, r4
  405674:	4630      	mov	r0, r6
  405676:	685a      	ldr	r2, [r3, #4]
  405678:	f042 0201 	orr.w	r2, r2, #1
  40567c:	605a      	str	r2, [r3, #4]
  40567e:	f000 fb17 	bl	405cb0 <__malloc_unlock>
  405682:	3408      	adds	r4, #8
  405684:	4620      	mov	r0, r4
  405686:	b003      	add	sp, #12
  405688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40568c:	68bc      	ldr	r4, [r7, #8]
  40568e:	6863      	ldr	r3, [r4, #4]
  405690:	f023 0803 	bic.w	r8, r3, #3
  405694:	45a8      	cmp	r8, r5
  405696:	d304      	bcc.n	4056a2 <_malloc_r+0x206>
  405698:	ebc5 0308 	rsb	r3, r5, r8
  40569c:	2b0f      	cmp	r3, #15
  40569e:	f300 808c 	bgt.w	4057ba <_malloc_r+0x31e>
  4056a2:	4b55      	ldr	r3, [pc, #340]	; (4057f8 <_malloc_r+0x35c>)
  4056a4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 405808 <_malloc_r+0x36c>
  4056a8:	681a      	ldr	r2, [r3, #0]
  4056aa:	f8d9 3000 	ldr.w	r3, [r9]
  4056ae:	3301      	adds	r3, #1
  4056b0:	442a      	add	r2, r5
  4056b2:	eb04 0a08 	add.w	sl, r4, r8
  4056b6:	f000 8160 	beq.w	40597a <_malloc_r+0x4de>
  4056ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4056be:	320f      	adds	r2, #15
  4056c0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4056c4:	f022 020f 	bic.w	r2, r2, #15
  4056c8:	4611      	mov	r1, r2
  4056ca:	4630      	mov	r0, r6
  4056cc:	9201      	str	r2, [sp, #4]
  4056ce:	f000 fce1 	bl	406094 <_sbrk_r>
  4056d2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4056d6:	4683      	mov	fp, r0
  4056d8:	9a01      	ldr	r2, [sp, #4]
  4056da:	f000 8158 	beq.w	40598e <_malloc_r+0x4f2>
  4056de:	4582      	cmp	sl, r0
  4056e0:	f200 80fc 	bhi.w	4058dc <_malloc_r+0x440>
  4056e4:	4b45      	ldr	r3, [pc, #276]	; (4057fc <_malloc_r+0x360>)
  4056e6:	6819      	ldr	r1, [r3, #0]
  4056e8:	45da      	cmp	sl, fp
  4056ea:	4411      	add	r1, r2
  4056ec:	6019      	str	r1, [r3, #0]
  4056ee:	f000 8153 	beq.w	405998 <_malloc_r+0x4fc>
  4056f2:	f8d9 0000 	ldr.w	r0, [r9]
  4056f6:	f8df e110 	ldr.w	lr, [pc, #272]	; 405808 <_malloc_r+0x36c>
  4056fa:	3001      	adds	r0, #1
  4056fc:	bf1b      	ittet	ne
  4056fe:	ebca 0a0b 	rsbne	sl, sl, fp
  405702:	4451      	addne	r1, sl
  405704:	f8ce b000 	streq.w	fp, [lr]
  405708:	6019      	strne	r1, [r3, #0]
  40570a:	f01b 0107 	ands.w	r1, fp, #7
  40570e:	f000 8117 	beq.w	405940 <_malloc_r+0x4a4>
  405712:	f1c1 0008 	rsb	r0, r1, #8
  405716:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40571a:	4483      	add	fp, r0
  40571c:	3108      	adds	r1, #8
  40571e:	445a      	add	r2, fp
  405720:	f3c2 020b 	ubfx	r2, r2, #0, #12
  405724:	ebc2 0901 	rsb	r9, r2, r1
  405728:	4649      	mov	r1, r9
  40572a:	4630      	mov	r0, r6
  40572c:	9301      	str	r3, [sp, #4]
  40572e:	f000 fcb1 	bl	406094 <_sbrk_r>
  405732:	1c43      	adds	r3, r0, #1
  405734:	9b01      	ldr	r3, [sp, #4]
  405736:	f000 813f 	beq.w	4059b8 <_malloc_r+0x51c>
  40573a:	ebcb 0200 	rsb	r2, fp, r0
  40573e:	444a      	add	r2, r9
  405740:	f042 0201 	orr.w	r2, r2, #1
  405744:	6819      	ldr	r1, [r3, #0]
  405746:	f8c7 b008 	str.w	fp, [r7, #8]
  40574a:	4449      	add	r1, r9
  40574c:	42bc      	cmp	r4, r7
  40574e:	f8cb 2004 	str.w	r2, [fp, #4]
  405752:	6019      	str	r1, [r3, #0]
  405754:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4057fc <_malloc_r+0x360>
  405758:	d016      	beq.n	405788 <_malloc_r+0x2ec>
  40575a:	f1b8 0f0f 	cmp.w	r8, #15
  40575e:	f240 80fd 	bls.w	40595c <_malloc_r+0x4c0>
  405762:	6862      	ldr	r2, [r4, #4]
  405764:	f1a8 030c 	sub.w	r3, r8, #12
  405768:	f023 0307 	bic.w	r3, r3, #7
  40576c:	18e0      	adds	r0, r4, r3
  40576e:	f002 0201 	and.w	r2, r2, #1
  405772:	f04f 0e05 	mov.w	lr, #5
  405776:	431a      	orrs	r2, r3
  405778:	2b0f      	cmp	r3, #15
  40577a:	6062      	str	r2, [r4, #4]
  40577c:	f8c0 e004 	str.w	lr, [r0, #4]
  405780:	f8c0 e008 	str.w	lr, [r0, #8]
  405784:	f200 811c 	bhi.w	4059c0 <_malloc_r+0x524>
  405788:	4b1d      	ldr	r3, [pc, #116]	; (405800 <_malloc_r+0x364>)
  40578a:	68bc      	ldr	r4, [r7, #8]
  40578c:	681a      	ldr	r2, [r3, #0]
  40578e:	4291      	cmp	r1, r2
  405790:	bf88      	it	hi
  405792:	6019      	strhi	r1, [r3, #0]
  405794:	4b1b      	ldr	r3, [pc, #108]	; (405804 <_malloc_r+0x368>)
  405796:	681a      	ldr	r2, [r3, #0]
  405798:	4291      	cmp	r1, r2
  40579a:	6862      	ldr	r2, [r4, #4]
  40579c:	bf88      	it	hi
  40579e:	6019      	strhi	r1, [r3, #0]
  4057a0:	f022 0203 	bic.w	r2, r2, #3
  4057a4:	4295      	cmp	r5, r2
  4057a6:	eba2 0305 	sub.w	r3, r2, r5
  4057aa:	d801      	bhi.n	4057b0 <_malloc_r+0x314>
  4057ac:	2b0f      	cmp	r3, #15
  4057ae:	dc04      	bgt.n	4057ba <_malloc_r+0x31e>
  4057b0:	4630      	mov	r0, r6
  4057b2:	f000 fa7d 	bl	405cb0 <__malloc_unlock>
  4057b6:	2400      	movs	r4, #0
  4057b8:	e738      	b.n	40562c <_malloc_r+0x190>
  4057ba:	1962      	adds	r2, r4, r5
  4057bc:	f043 0301 	orr.w	r3, r3, #1
  4057c0:	f045 0501 	orr.w	r5, r5, #1
  4057c4:	6065      	str	r5, [r4, #4]
  4057c6:	4630      	mov	r0, r6
  4057c8:	60ba      	str	r2, [r7, #8]
  4057ca:	6053      	str	r3, [r2, #4]
  4057cc:	f000 fa70 	bl	405cb0 <__malloc_unlock>
  4057d0:	3408      	adds	r4, #8
  4057d2:	4620      	mov	r0, r4
  4057d4:	b003      	add	sp, #12
  4057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057da:	2b14      	cmp	r3, #20
  4057dc:	d971      	bls.n	4058c2 <_malloc_r+0x426>
  4057de:	2b54      	cmp	r3, #84	; 0x54
  4057e0:	f200 80a4 	bhi.w	40592c <_malloc_r+0x490>
  4057e4:	0b28      	lsrs	r0, r5, #12
  4057e6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4057ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4057ee:	306e      	adds	r0, #110	; 0x6e
  4057f0:	e676      	b.n	4054e0 <_malloc_r+0x44>
  4057f2:	bf00      	nop
  4057f4:	20400470 	.word	0x20400470
  4057f8:	20400964 	.word	0x20400964
  4057fc:	20400968 	.word	0x20400968
  405800:	20400960 	.word	0x20400960
  405804:	2040095c 	.word	0x2040095c
  405808:	2040087c 	.word	0x2040087c
  40580c:	0a5a      	lsrs	r2, r3, #9
  40580e:	2a04      	cmp	r2, #4
  405810:	d95e      	bls.n	4058d0 <_malloc_r+0x434>
  405812:	2a14      	cmp	r2, #20
  405814:	f200 80b3 	bhi.w	40597e <_malloc_r+0x4e2>
  405818:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40581c:	0049      	lsls	r1, r1, #1
  40581e:	325b      	adds	r2, #91	; 0x5b
  405820:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  405824:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  405828:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 405a08 <_malloc_r+0x56c>
  40582c:	f1ac 0c08 	sub.w	ip, ip, #8
  405830:	458c      	cmp	ip, r1
  405832:	f000 8088 	beq.w	405946 <_malloc_r+0x4aa>
  405836:	684a      	ldr	r2, [r1, #4]
  405838:	f022 0203 	bic.w	r2, r2, #3
  40583c:	4293      	cmp	r3, r2
  40583e:	d202      	bcs.n	405846 <_malloc_r+0x3aa>
  405840:	6889      	ldr	r1, [r1, #8]
  405842:	458c      	cmp	ip, r1
  405844:	d1f7      	bne.n	405836 <_malloc_r+0x39a>
  405846:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40584a:	687a      	ldr	r2, [r7, #4]
  40584c:	f8c4 c00c 	str.w	ip, [r4, #12]
  405850:	60a1      	str	r1, [r4, #8]
  405852:	f8cc 4008 	str.w	r4, [ip, #8]
  405856:	60cc      	str	r4, [r1, #12]
  405858:	e688      	b.n	40556c <_malloc_r+0xd0>
  40585a:	1963      	adds	r3, r4, r5
  40585c:	f042 0701 	orr.w	r7, r2, #1
  405860:	f045 0501 	orr.w	r5, r5, #1
  405864:	6065      	str	r5, [r4, #4]
  405866:	4630      	mov	r0, r6
  405868:	614b      	str	r3, [r1, #20]
  40586a:	610b      	str	r3, [r1, #16]
  40586c:	f8c3 e00c 	str.w	lr, [r3, #12]
  405870:	f8c3 e008 	str.w	lr, [r3, #8]
  405874:	605f      	str	r7, [r3, #4]
  405876:	509a      	str	r2, [r3, r2]
  405878:	3408      	adds	r4, #8
  40587a:	f000 fa19 	bl	405cb0 <__malloc_unlock>
  40587e:	e6d5      	b.n	40562c <_malloc_r+0x190>
  405880:	684a      	ldr	r2, [r1, #4]
  405882:	e673      	b.n	40556c <_malloc_r+0xd0>
  405884:	f108 0801 	add.w	r8, r8, #1
  405888:	f018 0f03 	tst.w	r8, #3
  40588c:	f10c 0c08 	add.w	ip, ip, #8
  405890:	f47f ae7f 	bne.w	405592 <_malloc_r+0xf6>
  405894:	e030      	b.n	4058f8 <_malloc_r+0x45c>
  405896:	68dc      	ldr	r4, [r3, #12]
  405898:	42a3      	cmp	r3, r4
  40589a:	bf08      	it	eq
  40589c:	3002      	addeq	r0, #2
  40589e:	f43f ae35 	beq.w	40550c <_malloc_r+0x70>
  4058a2:	e6b3      	b.n	40560c <_malloc_r+0x170>
  4058a4:	440b      	add	r3, r1
  4058a6:	460c      	mov	r4, r1
  4058a8:	685a      	ldr	r2, [r3, #4]
  4058aa:	68c9      	ldr	r1, [r1, #12]
  4058ac:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4058b0:	f042 0201 	orr.w	r2, r2, #1
  4058b4:	605a      	str	r2, [r3, #4]
  4058b6:	4630      	mov	r0, r6
  4058b8:	60e9      	str	r1, [r5, #12]
  4058ba:	608d      	str	r5, [r1, #8]
  4058bc:	f000 f9f8 	bl	405cb0 <__malloc_unlock>
  4058c0:	e6b4      	b.n	40562c <_malloc_r+0x190>
  4058c2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4058c6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4058ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4058ce:	e607      	b.n	4054e0 <_malloc_r+0x44>
  4058d0:	099a      	lsrs	r2, r3, #6
  4058d2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4058d6:	0049      	lsls	r1, r1, #1
  4058d8:	3238      	adds	r2, #56	; 0x38
  4058da:	e7a1      	b.n	405820 <_malloc_r+0x384>
  4058dc:	42bc      	cmp	r4, r7
  4058de:	4b4a      	ldr	r3, [pc, #296]	; (405a08 <_malloc_r+0x56c>)
  4058e0:	f43f af00 	beq.w	4056e4 <_malloc_r+0x248>
  4058e4:	689c      	ldr	r4, [r3, #8]
  4058e6:	6862      	ldr	r2, [r4, #4]
  4058e8:	f022 0203 	bic.w	r2, r2, #3
  4058ec:	e75a      	b.n	4057a4 <_malloc_r+0x308>
  4058ee:	f859 3908 	ldr.w	r3, [r9], #-8
  4058f2:	4599      	cmp	r9, r3
  4058f4:	f040 8082 	bne.w	4059fc <_malloc_r+0x560>
  4058f8:	f010 0f03 	tst.w	r0, #3
  4058fc:	f100 30ff 	add.w	r0, r0, #4294967295
  405900:	d1f5      	bne.n	4058ee <_malloc_r+0x452>
  405902:	687b      	ldr	r3, [r7, #4]
  405904:	ea23 0304 	bic.w	r3, r3, r4
  405908:	607b      	str	r3, [r7, #4]
  40590a:	0064      	lsls	r4, r4, #1
  40590c:	429c      	cmp	r4, r3
  40590e:	f63f aebd 	bhi.w	40568c <_malloc_r+0x1f0>
  405912:	2c00      	cmp	r4, #0
  405914:	f43f aeba 	beq.w	40568c <_malloc_r+0x1f0>
  405918:	421c      	tst	r4, r3
  40591a:	4640      	mov	r0, r8
  40591c:	f47f ae35 	bne.w	40558a <_malloc_r+0xee>
  405920:	0064      	lsls	r4, r4, #1
  405922:	421c      	tst	r4, r3
  405924:	f100 0004 	add.w	r0, r0, #4
  405928:	d0fa      	beq.n	405920 <_malloc_r+0x484>
  40592a:	e62e      	b.n	40558a <_malloc_r+0xee>
  40592c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405930:	d818      	bhi.n	405964 <_malloc_r+0x4c8>
  405932:	0be8      	lsrs	r0, r5, #15
  405934:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  405938:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40593c:	3077      	adds	r0, #119	; 0x77
  40593e:	e5cf      	b.n	4054e0 <_malloc_r+0x44>
  405940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405944:	e6eb      	b.n	40571e <_malloc_r+0x282>
  405946:	2101      	movs	r1, #1
  405948:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40594c:	1092      	asrs	r2, r2, #2
  40594e:	fa01 f202 	lsl.w	r2, r1, r2
  405952:	431a      	orrs	r2, r3
  405954:	f8c8 2004 	str.w	r2, [r8, #4]
  405958:	4661      	mov	r1, ip
  40595a:	e777      	b.n	40584c <_malloc_r+0x3b0>
  40595c:	2301      	movs	r3, #1
  40595e:	f8cb 3004 	str.w	r3, [fp, #4]
  405962:	e725      	b.n	4057b0 <_malloc_r+0x314>
  405964:	f240 5254 	movw	r2, #1364	; 0x554
  405968:	4293      	cmp	r3, r2
  40596a:	d820      	bhi.n	4059ae <_malloc_r+0x512>
  40596c:	0ca8      	lsrs	r0, r5, #18
  40596e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  405972:	ea4f 034e 	mov.w	r3, lr, lsl #1
  405976:	307c      	adds	r0, #124	; 0x7c
  405978:	e5b2      	b.n	4054e0 <_malloc_r+0x44>
  40597a:	3210      	adds	r2, #16
  40597c:	e6a4      	b.n	4056c8 <_malloc_r+0x22c>
  40597e:	2a54      	cmp	r2, #84	; 0x54
  405980:	d826      	bhi.n	4059d0 <_malloc_r+0x534>
  405982:	0b1a      	lsrs	r2, r3, #12
  405984:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405988:	0049      	lsls	r1, r1, #1
  40598a:	326e      	adds	r2, #110	; 0x6e
  40598c:	e748      	b.n	405820 <_malloc_r+0x384>
  40598e:	68bc      	ldr	r4, [r7, #8]
  405990:	6862      	ldr	r2, [r4, #4]
  405992:	f022 0203 	bic.w	r2, r2, #3
  405996:	e705      	b.n	4057a4 <_malloc_r+0x308>
  405998:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40599c:	2800      	cmp	r0, #0
  40599e:	f47f aea8 	bne.w	4056f2 <_malloc_r+0x256>
  4059a2:	4442      	add	r2, r8
  4059a4:	68bb      	ldr	r3, [r7, #8]
  4059a6:	f042 0201 	orr.w	r2, r2, #1
  4059aa:	605a      	str	r2, [r3, #4]
  4059ac:	e6ec      	b.n	405788 <_malloc_r+0x2ec>
  4059ae:	23fe      	movs	r3, #254	; 0xfe
  4059b0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4059b4:	207e      	movs	r0, #126	; 0x7e
  4059b6:	e593      	b.n	4054e0 <_malloc_r+0x44>
  4059b8:	2201      	movs	r2, #1
  4059ba:	f04f 0900 	mov.w	r9, #0
  4059be:	e6c1      	b.n	405744 <_malloc_r+0x2a8>
  4059c0:	f104 0108 	add.w	r1, r4, #8
  4059c4:	4630      	mov	r0, r6
  4059c6:	f7ff fa4f 	bl	404e68 <_free_r>
  4059ca:	f8d9 1000 	ldr.w	r1, [r9]
  4059ce:	e6db      	b.n	405788 <_malloc_r+0x2ec>
  4059d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4059d4:	d805      	bhi.n	4059e2 <_malloc_r+0x546>
  4059d6:	0bda      	lsrs	r2, r3, #15
  4059d8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4059dc:	0049      	lsls	r1, r1, #1
  4059de:	3277      	adds	r2, #119	; 0x77
  4059e0:	e71e      	b.n	405820 <_malloc_r+0x384>
  4059e2:	f240 5154 	movw	r1, #1364	; 0x554
  4059e6:	428a      	cmp	r2, r1
  4059e8:	d805      	bhi.n	4059f6 <_malloc_r+0x55a>
  4059ea:	0c9a      	lsrs	r2, r3, #18
  4059ec:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4059f0:	0049      	lsls	r1, r1, #1
  4059f2:	327c      	adds	r2, #124	; 0x7c
  4059f4:	e714      	b.n	405820 <_malloc_r+0x384>
  4059f6:	21fe      	movs	r1, #254	; 0xfe
  4059f8:	227e      	movs	r2, #126	; 0x7e
  4059fa:	e711      	b.n	405820 <_malloc_r+0x384>
  4059fc:	687b      	ldr	r3, [r7, #4]
  4059fe:	e784      	b.n	40590a <_malloc_r+0x46e>
  405a00:	08e8      	lsrs	r0, r5, #3
  405a02:	1c43      	adds	r3, r0, #1
  405a04:	005b      	lsls	r3, r3, #1
  405a06:	e5f8      	b.n	4055fa <_malloc_r+0x15e>
  405a08:	20400470 	.word	0x20400470
  405a0c:	00000000 	.word	0x00000000

00405a10 <memchr>:
  405a10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405a14:	2a10      	cmp	r2, #16
  405a16:	db2b      	blt.n	405a70 <memchr+0x60>
  405a18:	f010 0f07 	tst.w	r0, #7
  405a1c:	d008      	beq.n	405a30 <memchr+0x20>
  405a1e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405a22:	3a01      	subs	r2, #1
  405a24:	428b      	cmp	r3, r1
  405a26:	d02d      	beq.n	405a84 <memchr+0x74>
  405a28:	f010 0f07 	tst.w	r0, #7
  405a2c:	b342      	cbz	r2, 405a80 <memchr+0x70>
  405a2e:	d1f6      	bne.n	405a1e <memchr+0xe>
  405a30:	b4f0      	push	{r4, r5, r6, r7}
  405a32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405a36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405a3a:	f022 0407 	bic.w	r4, r2, #7
  405a3e:	f07f 0700 	mvns.w	r7, #0
  405a42:	2300      	movs	r3, #0
  405a44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405a48:	3c08      	subs	r4, #8
  405a4a:	ea85 0501 	eor.w	r5, r5, r1
  405a4e:	ea86 0601 	eor.w	r6, r6, r1
  405a52:	fa85 f547 	uadd8	r5, r5, r7
  405a56:	faa3 f587 	sel	r5, r3, r7
  405a5a:	fa86 f647 	uadd8	r6, r6, r7
  405a5e:	faa5 f687 	sel	r6, r5, r7
  405a62:	b98e      	cbnz	r6, 405a88 <memchr+0x78>
  405a64:	d1ee      	bne.n	405a44 <memchr+0x34>
  405a66:	bcf0      	pop	{r4, r5, r6, r7}
  405a68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405a6c:	f002 0207 	and.w	r2, r2, #7
  405a70:	b132      	cbz	r2, 405a80 <memchr+0x70>
  405a72:	f810 3b01 	ldrb.w	r3, [r0], #1
  405a76:	3a01      	subs	r2, #1
  405a78:	ea83 0301 	eor.w	r3, r3, r1
  405a7c:	b113      	cbz	r3, 405a84 <memchr+0x74>
  405a7e:	d1f8      	bne.n	405a72 <memchr+0x62>
  405a80:	2000      	movs	r0, #0
  405a82:	4770      	bx	lr
  405a84:	3801      	subs	r0, #1
  405a86:	4770      	bx	lr
  405a88:	2d00      	cmp	r5, #0
  405a8a:	bf06      	itte	eq
  405a8c:	4635      	moveq	r5, r6
  405a8e:	3803      	subeq	r0, #3
  405a90:	3807      	subne	r0, #7
  405a92:	f015 0f01 	tst.w	r5, #1
  405a96:	d107      	bne.n	405aa8 <memchr+0x98>
  405a98:	3001      	adds	r0, #1
  405a9a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405a9e:	bf02      	ittt	eq
  405aa0:	3001      	addeq	r0, #1
  405aa2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405aa6:	3001      	addeq	r0, #1
  405aa8:	bcf0      	pop	{r4, r5, r6, r7}
  405aaa:	3801      	subs	r0, #1
  405aac:	4770      	bx	lr
  405aae:	bf00      	nop

00405ab0 <memcpy>:
  405ab0:	4684      	mov	ip, r0
  405ab2:	ea41 0300 	orr.w	r3, r1, r0
  405ab6:	f013 0303 	ands.w	r3, r3, #3
  405aba:	d16d      	bne.n	405b98 <memcpy+0xe8>
  405abc:	3a40      	subs	r2, #64	; 0x40
  405abe:	d341      	bcc.n	405b44 <memcpy+0x94>
  405ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ac4:	f840 3b04 	str.w	r3, [r0], #4
  405ac8:	f851 3b04 	ldr.w	r3, [r1], #4
  405acc:	f840 3b04 	str.w	r3, [r0], #4
  405ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ad4:	f840 3b04 	str.w	r3, [r0], #4
  405ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  405adc:	f840 3b04 	str.w	r3, [r0], #4
  405ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  405ae4:	f840 3b04 	str.w	r3, [r0], #4
  405ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  405aec:	f840 3b04 	str.w	r3, [r0], #4
  405af0:	f851 3b04 	ldr.w	r3, [r1], #4
  405af4:	f840 3b04 	str.w	r3, [r0], #4
  405af8:	f851 3b04 	ldr.w	r3, [r1], #4
  405afc:	f840 3b04 	str.w	r3, [r0], #4
  405b00:	f851 3b04 	ldr.w	r3, [r1], #4
  405b04:	f840 3b04 	str.w	r3, [r0], #4
  405b08:	f851 3b04 	ldr.w	r3, [r1], #4
  405b0c:	f840 3b04 	str.w	r3, [r0], #4
  405b10:	f851 3b04 	ldr.w	r3, [r1], #4
  405b14:	f840 3b04 	str.w	r3, [r0], #4
  405b18:	f851 3b04 	ldr.w	r3, [r1], #4
  405b1c:	f840 3b04 	str.w	r3, [r0], #4
  405b20:	f851 3b04 	ldr.w	r3, [r1], #4
  405b24:	f840 3b04 	str.w	r3, [r0], #4
  405b28:	f851 3b04 	ldr.w	r3, [r1], #4
  405b2c:	f840 3b04 	str.w	r3, [r0], #4
  405b30:	f851 3b04 	ldr.w	r3, [r1], #4
  405b34:	f840 3b04 	str.w	r3, [r0], #4
  405b38:	f851 3b04 	ldr.w	r3, [r1], #4
  405b3c:	f840 3b04 	str.w	r3, [r0], #4
  405b40:	3a40      	subs	r2, #64	; 0x40
  405b42:	d2bd      	bcs.n	405ac0 <memcpy+0x10>
  405b44:	3230      	adds	r2, #48	; 0x30
  405b46:	d311      	bcc.n	405b6c <memcpy+0xbc>
  405b48:	f851 3b04 	ldr.w	r3, [r1], #4
  405b4c:	f840 3b04 	str.w	r3, [r0], #4
  405b50:	f851 3b04 	ldr.w	r3, [r1], #4
  405b54:	f840 3b04 	str.w	r3, [r0], #4
  405b58:	f851 3b04 	ldr.w	r3, [r1], #4
  405b5c:	f840 3b04 	str.w	r3, [r0], #4
  405b60:	f851 3b04 	ldr.w	r3, [r1], #4
  405b64:	f840 3b04 	str.w	r3, [r0], #4
  405b68:	3a10      	subs	r2, #16
  405b6a:	d2ed      	bcs.n	405b48 <memcpy+0x98>
  405b6c:	320c      	adds	r2, #12
  405b6e:	d305      	bcc.n	405b7c <memcpy+0xcc>
  405b70:	f851 3b04 	ldr.w	r3, [r1], #4
  405b74:	f840 3b04 	str.w	r3, [r0], #4
  405b78:	3a04      	subs	r2, #4
  405b7a:	d2f9      	bcs.n	405b70 <memcpy+0xc0>
  405b7c:	3204      	adds	r2, #4
  405b7e:	d008      	beq.n	405b92 <memcpy+0xe2>
  405b80:	07d2      	lsls	r2, r2, #31
  405b82:	bf1c      	itt	ne
  405b84:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405b88:	f800 3b01 	strbne.w	r3, [r0], #1
  405b8c:	d301      	bcc.n	405b92 <memcpy+0xe2>
  405b8e:	880b      	ldrh	r3, [r1, #0]
  405b90:	8003      	strh	r3, [r0, #0]
  405b92:	4660      	mov	r0, ip
  405b94:	4770      	bx	lr
  405b96:	bf00      	nop
  405b98:	2a08      	cmp	r2, #8
  405b9a:	d313      	bcc.n	405bc4 <memcpy+0x114>
  405b9c:	078b      	lsls	r3, r1, #30
  405b9e:	d08d      	beq.n	405abc <memcpy+0xc>
  405ba0:	f010 0303 	ands.w	r3, r0, #3
  405ba4:	d08a      	beq.n	405abc <memcpy+0xc>
  405ba6:	f1c3 0304 	rsb	r3, r3, #4
  405baa:	1ad2      	subs	r2, r2, r3
  405bac:	07db      	lsls	r3, r3, #31
  405bae:	bf1c      	itt	ne
  405bb0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405bb4:	f800 3b01 	strbne.w	r3, [r0], #1
  405bb8:	d380      	bcc.n	405abc <memcpy+0xc>
  405bba:	f831 3b02 	ldrh.w	r3, [r1], #2
  405bbe:	f820 3b02 	strh.w	r3, [r0], #2
  405bc2:	e77b      	b.n	405abc <memcpy+0xc>
  405bc4:	3a04      	subs	r2, #4
  405bc6:	d3d9      	bcc.n	405b7c <memcpy+0xcc>
  405bc8:	3a01      	subs	r2, #1
  405bca:	f811 3b01 	ldrb.w	r3, [r1], #1
  405bce:	f800 3b01 	strb.w	r3, [r0], #1
  405bd2:	d2f9      	bcs.n	405bc8 <memcpy+0x118>
  405bd4:	780b      	ldrb	r3, [r1, #0]
  405bd6:	7003      	strb	r3, [r0, #0]
  405bd8:	784b      	ldrb	r3, [r1, #1]
  405bda:	7043      	strb	r3, [r0, #1]
  405bdc:	788b      	ldrb	r3, [r1, #2]
  405bde:	7083      	strb	r3, [r0, #2]
  405be0:	4660      	mov	r0, ip
  405be2:	4770      	bx	lr

00405be4 <memmove>:
  405be4:	4288      	cmp	r0, r1
  405be6:	b5f0      	push	{r4, r5, r6, r7, lr}
  405be8:	d90d      	bls.n	405c06 <memmove+0x22>
  405bea:	188b      	adds	r3, r1, r2
  405bec:	4298      	cmp	r0, r3
  405bee:	d20a      	bcs.n	405c06 <memmove+0x22>
  405bf0:	1881      	adds	r1, r0, r2
  405bf2:	2a00      	cmp	r2, #0
  405bf4:	d051      	beq.n	405c9a <memmove+0xb6>
  405bf6:	1a9a      	subs	r2, r3, r2
  405bf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405bfc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  405c00:	4293      	cmp	r3, r2
  405c02:	d1f9      	bne.n	405bf8 <memmove+0x14>
  405c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c06:	2a0f      	cmp	r2, #15
  405c08:	d948      	bls.n	405c9c <memmove+0xb8>
  405c0a:	ea41 0300 	orr.w	r3, r1, r0
  405c0e:	079b      	lsls	r3, r3, #30
  405c10:	d146      	bne.n	405ca0 <memmove+0xbc>
  405c12:	f100 0410 	add.w	r4, r0, #16
  405c16:	f101 0310 	add.w	r3, r1, #16
  405c1a:	4615      	mov	r5, r2
  405c1c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405c20:	f844 6c10 	str.w	r6, [r4, #-16]
  405c24:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405c28:	f844 6c0c 	str.w	r6, [r4, #-12]
  405c2c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405c30:	f844 6c08 	str.w	r6, [r4, #-8]
  405c34:	3d10      	subs	r5, #16
  405c36:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405c3a:	f844 6c04 	str.w	r6, [r4, #-4]
  405c3e:	2d0f      	cmp	r5, #15
  405c40:	f103 0310 	add.w	r3, r3, #16
  405c44:	f104 0410 	add.w	r4, r4, #16
  405c48:	d8e8      	bhi.n	405c1c <memmove+0x38>
  405c4a:	f1a2 0310 	sub.w	r3, r2, #16
  405c4e:	f023 030f 	bic.w	r3, r3, #15
  405c52:	f002 0e0f 	and.w	lr, r2, #15
  405c56:	3310      	adds	r3, #16
  405c58:	f1be 0f03 	cmp.w	lr, #3
  405c5c:	4419      	add	r1, r3
  405c5e:	4403      	add	r3, r0
  405c60:	d921      	bls.n	405ca6 <memmove+0xc2>
  405c62:	1f1e      	subs	r6, r3, #4
  405c64:	460d      	mov	r5, r1
  405c66:	4674      	mov	r4, lr
  405c68:	3c04      	subs	r4, #4
  405c6a:	f855 7b04 	ldr.w	r7, [r5], #4
  405c6e:	f846 7f04 	str.w	r7, [r6, #4]!
  405c72:	2c03      	cmp	r4, #3
  405c74:	d8f8      	bhi.n	405c68 <memmove+0x84>
  405c76:	f1ae 0404 	sub.w	r4, lr, #4
  405c7a:	f024 0403 	bic.w	r4, r4, #3
  405c7e:	3404      	adds	r4, #4
  405c80:	4423      	add	r3, r4
  405c82:	4421      	add	r1, r4
  405c84:	f002 0203 	and.w	r2, r2, #3
  405c88:	b162      	cbz	r2, 405ca4 <memmove+0xc0>
  405c8a:	3b01      	subs	r3, #1
  405c8c:	440a      	add	r2, r1
  405c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405c92:	f803 4f01 	strb.w	r4, [r3, #1]!
  405c96:	428a      	cmp	r2, r1
  405c98:	d1f9      	bne.n	405c8e <memmove+0xaa>
  405c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c9c:	4603      	mov	r3, r0
  405c9e:	e7f3      	b.n	405c88 <memmove+0xa4>
  405ca0:	4603      	mov	r3, r0
  405ca2:	e7f2      	b.n	405c8a <memmove+0xa6>
  405ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ca6:	4672      	mov	r2, lr
  405ca8:	e7ee      	b.n	405c88 <memmove+0xa4>
  405caa:	bf00      	nop

00405cac <__malloc_lock>:
  405cac:	4770      	bx	lr
  405cae:	bf00      	nop

00405cb0 <__malloc_unlock>:
  405cb0:	4770      	bx	lr
  405cb2:	bf00      	nop

00405cb4 <_realloc_r>:
  405cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cb8:	4617      	mov	r7, r2
  405cba:	b083      	sub	sp, #12
  405cbc:	2900      	cmp	r1, #0
  405cbe:	f000 80c1 	beq.w	405e44 <_realloc_r+0x190>
  405cc2:	460e      	mov	r6, r1
  405cc4:	4681      	mov	r9, r0
  405cc6:	f107 050b 	add.w	r5, r7, #11
  405cca:	f7ff ffef 	bl	405cac <__malloc_lock>
  405cce:	f856 ec04 	ldr.w	lr, [r6, #-4]
  405cd2:	2d16      	cmp	r5, #22
  405cd4:	f02e 0403 	bic.w	r4, lr, #3
  405cd8:	f1a6 0808 	sub.w	r8, r6, #8
  405cdc:	d840      	bhi.n	405d60 <_realloc_r+0xac>
  405cde:	2210      	movs	r2, #16
  405ce0:	4615      	mov	r5, r2
  405ce2:	42af      	cmp	r7, r5
  405ce4:	d841      	bhi.n	405d6a <_realloc_r+0xb6>
  405ce6:	4294      	cmp	r4, r2
  405ce8:	da75      	bge.n	405dd6 <_realloc_r+0x122>
  405cea:	4bc9      	ldr	r3, [pc, #804]	; (406010 <_realloc_r+0x35c>)
  405cec:	6899      	ldr	r1, [r3, #8]
  405cee:	eb08 0004 	add.w	r0, r8, r4
  405cf2:	4288      	cmp	r0, r1
  405cf4:	6841      	ldr	r1, [r0, #4]
  405cf6:	f000 80d9 	beq.w	405eac <_realloc_r+0x1f8>
  405cfa:	f021 0301 	bic.w	r3, r1, #1
  405cfe:	4403      	add	r3, r0
  405d00:	685b      	ldr	r3, [r3, #4]
  405d02:	07db      	lsls	r3, r3, #31
  405d04:	d57d      	bpl.n	405e02 <_realloc_r+0x14e>
  405d06:	f01e 0f01 	tst.w	lr, #1
  405d0a:	d035      	beq.n	405d78 <_realloc_r+0xc4>
  405d0c:	4639      	mov	r1, r7
  405d0e:	4648      	mov	r0, r9
  405d10:	f7ff fbc4 	bl	40549c <_malloc_r>
  405d14:	4607      	mov	r7, r0
  405d16:	b1e0      	cbz	r0, 405d52 <_realloc_r+0x9e>
  405d18:	f856 3c04 	ldr.w	r3, [r6, #-4]
  405d1c:	f023 0301 	bic.w	r3, r3, #1
  405d20:	4443      	add	r3, r8
  405d22:	f1a0 0208 	sub.w	r2, r0, #8
  405d26:	429a      	cmp	r2, r3
  405d28:	f000 8144 	beq.w	405fb4 <_realloc_r+0x300>
  405d2c:	1f22      	subs	r2, r4, #4
  405d2e:	2a24      	cmp	r2, #36	; 0x24
  405d30:	f200 8131 	bhi.w	405f96 <_realloc_r+0x2e2>
  405d34:	2a13      	cmp	r2, #19
  405d36:	f200 8104 	bhi.w	405f42 <_realloc_r+0x28e>
  405d3a:	4603      	mov	r3, r0
  405d3c:	4632      	mov	r2, r6
  405d3e:	6811      	ldr	r1, [r2, #0]
  405d40:	6019      	str	r1, [r3, #0]
  405d42:	6851      	ldr	r1, [r2, #4]
  405d44:	6059      	str	r1, [r3, #4]
  405d46:	6892      	ldr	r2, [r2, #8]
  405d48:	609a      	str	r2, [r3, #8]
  405d4a:	4631      	mov	r1, r6
  405d4c:	4648      	mov	r0, r9
  405d4e:	f7ff f88b 	bl	404e68 <_free_r>
  405d52:	4648      	mov	r0, r9
  405d54:	f7ff ffac 	bl	405cb0 <__malloc_unlock>
  405d58:	4638      	mov	r0, r7
  405d5a:	b003      	add	sp, #12
  405d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d60:	f025 0507 	bic.w	r5, r5, #7
  405d64:	2d00      	cmp	r5, #0
  405d66:	462a      	mov	r2, r5
  405d68:	dabb      	bge.n	405ce2 <_realloc_r+0x2e>
  405d6a:	230c      	movs	r3, #12
  405d6c:	2000      	movs	r0, #0
  405d6e:	f8c9 3000 	str.w	r3, [r9]
  405d72:	b003      	add	sp, #12
  405d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d78:	f856 3c08 	ldr.w	r3, [r6, #-8]
  405d7c:	ebc3 0a08 	rsb	sl, r3, r8
  405d80:	f8da 3004 	ldr.w	r3, [sl, #4]
  405d84:	f023 0c03 	bic.w	ip, r3, #3
  405d88:	eb04 030c 	add.w	r3, r4, ip
  405d8c:	4293      	cmp	r3, r2
  405d8e:	dbbd      	blt.n	405d0c <_realloc_r+0x58>
  405d90:	4657      	mov	r7, sl
  405d92:	f8da 100c 	ldr.w	r1, [sl, #12]
  405d96:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405d9a:	1f22      	subs	r2, r4, #4
  405d9c:	2a24      	cmp	r2, #36	; 0x24
  405d9e:	60c1      	str	r1, [r0, #12]
  405da0:	6088      	str	r0, [r1, #8]
  405da2:	f200 8117 	bhi.w	405fd4 <_realloc_r+0x320>
  405da6:	2a13      	cmp	r2, #19
  405da8:	f240 8112 	bls.w	405fd0 <_realloc_r+0x31c>
  405dac:	6831      	ldr	r1, [r6, #0]
  405dae:	f8ca 1008 	str.w	r1, [sl, #8]
  405db2:	6871      	ldr	r1, [r6, #4]
  405db4:	f8ca 100c 	str.w	r1, [sl, #12]
  405db8:	2a1b      	cmp	r2, #27
  405dba:	f200 812b 	bhi.w	406014 <_realloc_r+0x360>
  405dbe:	3608      	adds	r6, #8
  405dc0:	f10a 0210 	add.w	r2, sl, #16
  405dc4:	6831      	ldr	r1, [r6, #0]
  405dc6:	6011      	str	r1, [r2, #0]
  405dc8:	6871      	ldr	r1, [r6, #4]
  405dca:	6051      	str	r1, [r2, #4]
  405dcc:	68b1      	ldr	r1, [r6, #8]
  405dce:	6091      	str	r1, [r2, #8]
  405dd0:	463e      	mov	r6, r7
  405dd2:	461c      	mov	r4, r3
  405dd4:	46d0      	mov	r8, sl
  405dd6:	1b63      	subs	r3, r4, r5
  405dd8:	2b0f      	cmp	r3, #15
  405dda:	d81d      	bhi.n	405e18 <_realloc_r+0x164>
  405ddc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405de0:	f003 0301 	and.w	r3, r3, #1
  405de4:	4323      	orrs	r3, r4
  405de6:	4444      	add	r4, r8
  405de8:	f8c8 3004 	str.w	r3, [r8, #4]
  405dec:	6863      	ldr	r3, [r4, #4]
  405dee:	f043 0301 	orr.w	r3, r3, #1
  405df2:	6063      	str	r3, [r4, #4]
  405df4:	4648      	mov	r0, r9
  405df6:	f7ff ff5b 	bl	405cb0 <__malloc_unlock>
  405dfa:	4630      	mov	r0, r6
  405dfc:	b003      	add	sp, #12
  405dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e02:	f021 0103 	bic.w	r1, r1, #3
  405e06:	4421      	add	r1, r4
  405e08:	4291      	cmp	r1, r2
  405e0a:	db21      	blt.n	405e50 <_realloc_r+0x19c>
  405e0c:	68c3      	ldr	r3, [r0, #12]
  405e0e:	6882      	ldr	r2, [r0, #8]
  405e10:	460c      	mov	r4, r1
  405e12:	60d3      	str	r3, [r2, #12]
  405e14:	609a      	str	r2, [r3, #8]
  405e16:	e7de      	b.n	405dd6 <_realloc_r+0x122>
  405e18:	f8d8 2004 	ldr.w	r2, [r8, #4]
  405e1c:	eb08 0105 	add.w	r1, r8, r5
  405e20:	f002 0201 	and.w	r2, r2, #1
  405e24:	4315      	orrs	r5, r2
  405e26:	f043 0201 	orr.w	r2, r3, #1
  405e2a:	440b      	add	r3, r1
  405e2c:	f8c8 5004 	str.w	r5, [r8, #4]
  405e30:	604a      	str	r2, [r1, #4]
  405e32:	685a      	ldr	r2, [r3, #4]
  405e34:	f042 0201 	orr.w	r2, r2, #1
  405e38:	3108      	adds	r1, #8
  405e3a:	605a      	str	r2, [r3, #4]
  405e3c:	4648      	mov	r0, r9
  405e3e:	f7ff f813 	bl	404e68 <_free_r>
  405e42:	e7d7      	b.n	405df4 <_realloc_r+0x140>
  405e44:	4611      	mov	r1, r2
  405e46:	b003      	add	sp, #12
  405e48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e4c:	f7ff bb26 	b.w	40549c <_malloc_r>
  405e50:	f01e 0f01 	tst.w	lr, #1
  405e54:	f47f af5a 	bne.w	405d0c <_realloc_r+0x58>
  405e58:	f856 3c08 	ldr.w	r3, [r6, #-8]
  405e5c:	ebc3 0a08 	rsb	sl, r3, r8
  405e60:	f8da 3004 	ldr.w	r3, [sl, #4]
  405e64:	f023 0c03 	bic.w	ip, r3, #3
  405e68:	eb01 0e0c 	add.w	lr, r1, ip
  405e6c:	4596      	cmp	lr, r2
  405e6e:	db8b      	blt.n	405d88 <_realloc_r+0xd4>
  405e70:	68c3      	ldr	r3, [r0, #12]
  405e72:	6882      	ldr	r2, [r0, #8]
  405e74:	4657      	mov	r7, sl
  405e76:	60d3      	str	r3, [r2, #12]
  405e78:	609a      	str	r2, [r3, #8]
  405e7a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  405e7e:	f8da 300c 	ldr.w	r3, [sl, #12]
  405e82:	60cb      	str	r3, [r1, #12]
  405e84:	1f22      	subs	r2, r4, #4
  405e86:	2a24      	cmp	r2, #36	; 0x24
  405e88:	6099      	str	r1, [r3, #8]
  405e8a:	f200 8099 	bhi.w	405fc0 <_realloc_r+0x30c>
  405e8e:	2a13      	cmp	r2, #19
  405e90:	d962      	bls.n	405f58 <_realloc_r+0x2a4>
  405e92:	6833      	ldr	r3, [r6, #0]
  405e94:	f8ca 3008 	str.w	r3, [sl, #8]
  405e98:	6873      	ldr	r3, [r6, #4]
  405e9a:	f8ca 300c 	str.w	r3, [sl, #12]
  405e9e:	2a1b      	cmp	r2, #27
  405ea0:	f200 80a0 	bhi.w	405fe4 <_realloc_r+0x330>
  405ea4:	3608      	adds	r6, #8
  405ea6:	f10a 0310 	add.w	r3, sl, #16
  405eaa:	e056      	b.n	405f5a <_realloc_r+0x2a6>
  405eac:	f021 0b03 	bic.w	fp, r1, #3
  405eb0:	44a3      	add	fp, r4
  405eb2:	f105 0010 	add.w	r0, r5, #16
  405eb6:	4583      	cmp	fp, r0
  405eb8:	da59      	bge.n	405f6e <_realloc_r+0x2ba>
  405eba:	f01e 0f01 	tst.w	lr, #1
  405ebe:	f47f af25 	bne.w	405d0c <_realloc_r+0x58>
  405ec2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  405ec6:	ebc1 0a08 	rsb	sl, r1, r8
  405eca:	f8da 1004 	ldr.w	r1, [sl, #4]
  405ece:	f021 0c03 	bic.w	ip, r1, #3
  405ed2:	44e3      	add	fp, ip
  405ed4:	4558      	cmp	r0, fp
  405ed6:	f73f af57 	bgt.w	405d88 <_realloc_r+0xd4>
  405eda:	4657      	mov	r7, sl
  405edc:	f8da 100c 	ldr.w	r1, [sl, #12]
  405ee0:	f857 0f08 	ldr.w	r0, [r7, #8]!
  405ee4:	1f22      	subs	r2, r4, #4
  405ee6:	2a24      	cmp	r2, #36	; 0x24
  405ee8:	60c1      	str	r1, [r0, #12]
  405eea:	6088      	str	r0, [r1, #8]
  405eec:	f200 80b4 	bhi.w	406058 <_realloc_r+0x3a4>
  405ef0:	2a13      	cmp	r2, #19
  405ef2:	f240 80a5 	bls.w	406040 <_realloc_r+0x38c>
  405ef6:	6831      	ldr	r1, [r6, #0]
  405ef8:	f8ca 1008 	str.w	r1, [sl, #8]
  405efc:	6871      	ldr	r1, [r6, #4]
  405efe:	f8ca 100c 	str.w	r1, [sl, #12]
  405f02:	2a1b      	cmp	r2, #27
  405f04:	f200 80af 	bhi.w	406066 <_realloc_r+0x3b2>
  405f08:	3608      	adds	r6, #8
  405f0a:	f10a 0210 	add.w	r2, sl, #16
  405f0e:	6831      	ldr	r1, [r6, #0]
  405f10:	6011      	str	r1, [r2, #0]
  405f12:	6871      	ldr	r1, [r6, #4]
  405f14:	6051      	str	r1, [r2, #4]
  405f16:	68b1      	ldr	r1, [r6, #8]
  405f18:	6091      	str	r1, [r2, #8]
  405f1a:	eb0a 0105 	add.w	r1, sl, r5
  405f1e:	ebc5 020b 	rsb	r2, r5, fp
  405f22:	f042 0201 	orr.w	r2, r2, #1
  405f26:	6099      	str	r1, [r3, #8]
  405f28:	604a      	str	r2, [r1, #4]
  405f2a:	f8da 3004 	ldr.w	r3, [sl, #4]
  405f2e:	f003 0301 	and.w	r3, r3, #1
  405f32:	431d      	orrs	r5, r3
  405f34:	4648      	mov	r0, r9
  405f36:	f8ca 5004 	str.w	r5, [sl, #4]
  405f3a:	f7ff feb9 	bl	405cb0 <__malloc_unlock>
  405f3e:	4638      	mov	r0, r7
  405f40:	e75c      	b.n	405dfc <_realloc_r+0x148>
  405f42:	6833      	ldr	r3, [r6, #0]
  405f44:	6003      	str	r3, [r0, #0]
  405f46:	6873      	ldr	r3, [r6, #4]
  405f48:	6043      	str	r3, [r0, #4]
  405f4a:	2a1b      	cmp	r2, #27
  405f4c:	d827      	bhi.n	405f9e <_realloc_r+0x2ea>
  405f4e:	f100 0308 	add.w	r3, r0, #8
  405f52:	f106 0208 	add.w	r2, r6, #8
  405f56:	e6f2      	b.n	405d3e <_realloc_r+0x8a>
  405f58:	463b      	mov	r3, r7
  405f5a:	6832      	ldr	r2, [r6, #0]
  405f5c:	601a      	str	r2, [r3, #0]
  405f5e:	6872      	ldr	r2, [r6, #4]
  405f60:	605a      	str	r2, [r3, #4]
  405f62:	68b2      	ldr	r2, [r6, #8]
  405f64:	609a      	str	r2, [r3, #8]
  405f66:	463e      	mov	r6, r7
  405f68:	4674      	mov	r4, lr
  405f6a:	46d0      	mov	r8, sl
  405f6c:	e733      	b.n	405dd6 <_realloc_r+0x122>
  405f6e:	eb08 0105 	add.w	r1, r8, r5
  405f72:	ebc5 0b0b 	rsb	fp, r5, fp
  405f76:	f04b 0201 	orr.w	r2, fp, #1
  405f7a:	6099      	str	r1, [r3, #8]
  405f7c:	604a      	str	r2, [r1, #4]
  405f7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  405f82:	f003 0301 	and.w	r3, r3, #1
  405f86:	431d      	orrs	r5, r3
  405f88:	4648      	mov	r0, r9
  405f8a:	f846 5c04 	str.w	r5, [r6, #-4]
  405f8e:	f7ff fe8f 	bl	405cb0 <__malloc_unlock>
  405f92:	4630      	mov	r0, r6
  405f94:	e732      	b.n	405dfc <_realloc_r+0x148>
  405f96:	4631      	mov	r1, r6
  405f98:	f7ff fe24 	bl	405be4 <memmove>
  405f9c:	e6d5      	b.n	405d4a <_realloc_r+0x96>
  405f9e:	68b3      	ldr	r3, [r6, #8]
  405fa0:	6083      	str	r3, [r0, #8]
  405fa2:	68f3      	ldr	r3, [r6, #12]
  405fa4:	60c3      	str	r3, [r0, #12]
  405fa6:	2a24      	cmp	r2, #36	; 0x24
  405fa8:	d028      	beq.n	405ffc <_realloc_r+0x348>
  405faa:	f100 0310 	add.w	r3, r0, #16
  405fae:	f106 0210 	add.w	r2, r6, #16
  405fb2:	e6c4      	b.n	405d3e <_realloc_r+0x8a>
  405fb4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405fb8:	f023 0303 	bic.w	r3, r3, #3
  405fbc:	441c      	add	r4, r3
  405fbe:	e70a      	b.n	405dd6 <_realloc_r+0x122>
  405fc0:	4631      	mov	r1, r6
  405fc2:	4638      	mov	r0, r7
  405fc4:	4674      	mov	r4, lr
  405fc6:	46d0      	mov	r8, sl
  405fc8:	f7ff fe0c 	bl	405be4 <memmove>
  405fcc:	463e      	mov	r6, r7
  405fce:	e702      	b.n	405dd6 <_realloc_r+0x122>
  405fd0:	463a      	mov	r2, r7
  405fd2:	e6f7      	b.n	405dc4 <_realloc_r+0x110>
  405fd4:	4631      	mov	r1, r6
  405fd6:	4638      	mov	r0, r7
  405fd8:	461c      	mov	r4, r3
  405fda:	46d0      	mov	r8, sl
  405fdc:	f7ff fe02 	bl	405be4 <memmove>
  405fe0:	463e      	mov	r6, r7
  405fe2:	e6f8      	b.n	405dd6 <_realloc_r+0x122>
  405fe4:	68b3      	ldr	r3, [r6, #8]
  405fe6:	f8ca 3010 	str.w	r3, [sl, #16]
  405fea:	68f3      	ldr	r3, [r6, #12]
  405fec:	f8ca 3014 	str.w	r3, [sl, #20]
  405ff0:	2a24      	cmp	r2, #36	; 0x24
  405ff2:	d01b      	beq.n	40602c <_realloc_r+0x378>
  405ff4:	3610      	adds	r6, #16
  405ff6:	f10a 0318 	add.w	r3, sl, #24
  405ffa:	e7ae      	b.n	405f5a <_realloc_r+0x2a6>
  405ffc:	6933      	ldr	r3, [r6, #16]
  405ffe:	6103      	str	r3, [r0, #16]
  406000:	6973      	ldr	r3, [r6, #20]
  406002:	6143      	str	r3, [r0, #20]
  406004:	f106 0218 	add.w	r2, r6, #24
  406008:	f100 0318 	add.w	r3, r0, #24
  40600c:	e697      	b.n	405d3e <_realloc_r+0x8a>
  40600e:	bf00      	nop
  406010:	20400470 	.word	0x20400470
  406014:	68b1      	ldr	r1, [r6, #8]
  406016:	f8ca 1010 	str.w	r1, [sl, #16]
  40601a:	68f1      	ldr	r1, [r6, #12]
  40601c:	f8ca 1014 	str.w	r1, [sl, #20]
  406020:	2a24      	cmp	r2, #36	; 0x24
  406022:	d00f      	beq.n	406044 <_realloc_r+0x390>
  406024:	3610      	adds	r6, #16
  406026:	f10a 0218 	add.w	r2, sl, #24
  40602a:	e6cb      	b.n	405dc4 <_realloc_r+0x110>
  40602c:	6933      	ldr	r3, [r6, #16]
  40602e:	f8ca 3018 	str.w	r3, [sl, #24]
  406032:	6973      	ldr	r3, [r6, #20]
  406034:	f8ca 301c 	str.w	r3, [sl, #28]
  406038:	3618      	adds	r6, #24
  40603a:	f10a 0320 	add.w	r3, sl, #32
  40603e:	e78c      	b.n	405f5a <_realloc_r+0x2a6>
  406040:	463a      	mov	r2, r7
  406042:	e764      	b.n	405f0e <_realloc_r+0x25a>
  406044:	6932      	ldr	r2, [r6, #16]
  406046:	f8ca 2018 	str.w	r2, [sl, #24]
  40604a:	6972      	ldr	r2, [r6, #20]
  40604c:	f8ca 201c 	str.w	r2, [sl, #28]
  406050:	3618      	adds	r6, #24
  406052:	f10a 0220 	add.w	r2, sl, #32
  406056:	e6b5      	b.n	405dc4 <_realloc_r+0x110>
  406058:	4631      	mov	r1, r6
  40605a:	4638      	mov	r0, r7
  40605c:	9301      	str	r3, [sp, #4]
  40605e:	f7ff fdc1 	bl	405be4 <memmove>
  406062:	9b01      	ldr	r3, [sp, #4]
  406064:	e759      	b.n	405f1a <_realloc_r+0x266>
  406066:	68b1      	ldr	r1, [r6, #8]
  406068:	f8ca 1010 	str.w	r1, [sl, #16]
  40606c:	68f1      	ldr	r1, [r6, #12]
  40606e:	f8ca 1014 	str.w	r1, [sl, #20]
  406072:	2a24      	cmp	r2, #36	; 0x24
  406074:	d003      	beq.n	40607e <_realloc_r+0x3ca>
  406076:	3610      	adds	r6, #16
  406078:	f10a 0218 	add.w	r2, sl, #24
  40607c:	e747      	b.n	405f0e <_realloc_r+0x25a>
  40607e:	6932      	ldr	r2, [r6, #16]
  406080:	f8ca 2018 	str.w	r2, [sl, #24]
  406084:	6972      	ldr	r2, [r6, #20]
  406086:	f8ca 201c 	str.w	r2, [sl, #28]
  40608a:	3618      	adds	r6, #24
  40608c:	f10a 0220 	add.w	r2, sl, #32
  406090:	e73d      	b.n	405f0e <_realloc_r+0x25a>
  406092:	bf00      	nop

00406094 <_sbrk_r>:
  406094:	b538      	push	{r3, r4, r5, lr}
  406096:	4c07      	ldr	r4, [pc, #28]	; (4060b4 <_sbrk_r+0x20>)
  406098:	2300      	movs	r3, #0
  40609a:	4605      	mov	r5, r0
  40609c:	4608      	mov	r0, r1
  40609e:	6023      	str	r3, [r4, #0]
  4060a0:	f7fd f8f2 	bl	403288 <_sbrk>
  4060a4:	1c43      	adds	r3, r0, #1
  4060a6:	d000      	beq.n	4060aa <_sbrk_r+0x16>
  4060a8:	bd38      	pop	{r3, r4, r5, pc}
  4060aa:	6823      	ldr	r3, [r4, #0]
  4060ac:	2b00      	cmp	r3, #0
  4060ae:	d0fb      	beq.n	4060a8 <_sbrk_r+0x14>
  4060b0:	602b      	str	r3, [r5, #0]
  4060b2:	bd38      	pop	{r3, r4, r5, pc}
  4060b4:	2040099c 	.word	0x2040099c

004060b8 <__sread>:
  4060b8:	b510      	push	{r4, lr}
  4060ba:	460c      	mov	r4, r1
  4060bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4060c0:	f000 f9c4 	bl	40644c <_read_r>
  4060c4:	2800      	cmp	r0, #0
  4060c6:	db03      	blt.n	4060d0 <__sread+0x18>
  4060c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4060ca:	4403      	add	r3, r0
  4060cc:	6523      	str	r3, [r4, #80]	; 0x50
  4060ce:	bd10      	pop	{r4, pc}
  4060d0:	89a3      	ldrh	r3, [r4, #12]
  4060d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4060d6:	81a3      	strh	r3, [r4, #12]
  4060d8:	bd10      	pop	{r4, pc}
  4060da:	bf00      	nop

004060dc <__swrite>:
  4060dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4060e0:	4616      	mov	r6, r2
  4060e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4060e6:	461f      	mov	r7, r3
  4060e8:	05d3      	lsls	r3, r2, #23
  4060ea:	460c      	mov	r4, r1
  4060ec:	4605      	mov	r5, r0
  4060ee:	d507      	bpl.n	406100 <__swrite+0x24>
  4060f0:	2200      	movs	r2, #0
  4060f2:	2302      	movs	r3, #2
  4060f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4060f8:	f000 f992 	bl	406420 <_lseek_r>
  4060fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406104:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406108:	81a2      	strh	r2, [r4, #12]
  40610a:	463b      	mov	r3, r7
  40610c:	4632      	mov	r2, r6
  40610e:	4628      	mov	r0, r5
  406110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406114:	f000 b8a2 	b.w	40625c <_write_r>

00406118 <__sseek>:
  406118:	b510      	push	{r4, lr}
  40611a:	460c      	mov	r4, r1
  40611c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406120:	f000 f97e 	bl	406420 <_lseek_r>
  406124:	89a3      	ldrh	r3, [r4, #12]
  406126:	1c42      	adds	r2, r0, #1
  406128:	bf0e      	itee	eq
  40612a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40612e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406132:	6520      	strne	r0, [r4, #80]	; 0x50
  406134:	81a3      	strh	r3, [r4, #12]
  406136:	bd10      	pop	{r4, pc}

00406138 <__sclose>:
  406138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40613c:	f000 b8f6 	b.w	40632c <_close_r>

00406140 <__swbuf_r>:
  406140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406142:	460e      	mov	r6, r1
  406144:	4614      	mov	r4, r2
  406146:	4607      	mov	r7, r0
  406148:	b110      	cbz	r0, 406150 <__swbuf_r+0x10>
  40614a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40614c:	2b00      	cmp	r3, #0
  40614e:	d04a      	beq.n	4061e6 <__swbuf_r+0xa6>
  406150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406154:	69a3      	ldr	r3, [r4, #24]
  406156:	60a3      	str	r3, [r4, #8]
  406158:	b291      	uxth	r1, r2
  40615a:	0708      	lsls	r0, r1, #28
  40615c:	d538      	bpl.n	4061d0 <__swbuf_r+0x90>
  40615e:	6923      	ldr	r3, [r4, #16]
  406160:	2b00      	cmp	r3, #0
  406162:	d035      	beq.n	4061d0 <__swbuf_r+0x90>
  406164:	0489      	lsls	r1, r1, #18
  406166:	b2f5      	uxtb	r5, r6
  406168:	d515      	bpl.n	406196 <__swbuf_r+0x56>
  40616a:	6822      	ldr	r2, [r4, #0]
  40616c:	6961      	ldr	r1, [r4, #20]
  40616e:	1ad3      	subs	r3, r2, r3
  406170:	428b      	cmp	r3, r1
  406172:	da1c      	bge.n	4061ae <__swbuf_r+0x6e>
  406174:	3301      	adds	r3, #1
  406176:	68a1      	ldr	r1, [r4, #8]
  406178:	1c50      	adds	r0, r2, #1
  40617a:	3901      	subs	r1, #1
  40617c:	60a1      	str	r1, [r4, #8]
  40617e:	6020      	str	r0, [r4, #0]
  406180:	7016      	strb	r6, [r2, #0]
  406182:	6962      	ldr	r2, [r4, #20]
  406184:	429a      	cmp	r2, r3
  406186:	d01a      	beq.n	4061be <__swbuf_r+0x7e>
  406188:	89a3      	ldrh	r3, [r4, #12]
  40618a:	07db      	lsls	r3, r3, #31
  40618c:	d501      	bpl.n	406192 <__swbuf_r+0x52>
  40618e:	2d0a      	cmp	r5, #10
  406190:	d015      	beq.n	4061be <__swbuf_r+0x7e>
  406192:	4628      	mov	r0, r5
  406194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406196:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40619c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4061a0:	81a2      	strh	r2, [r4, #12]
  4061a2:	6822      	ldr	r2, [r4, #0]
  4061a4:	6661      	str	r1, [r4, #100]	; 0x64
  4061a6:	6961      	ldr	r1, [r4, #20]
  4061a8:	1ad3      	subs	r3, r2, r3
  4061aa:	428b      	cmp	r3, r1
  4061ac:	dbe2      	blt.n	406174 <__swbuf_r+0x34>
  4061ae:	4621      	mov	r1, r4
  4061b0:	4638      	mov	r0, r7
  4061b2:	f7fe fcfb 	bl	404bac <_fflush_r>
  4061b6:	b940      	cbnz	r0, 4061ca <__swbuf_r+0x8a>
  4061b8:	6822      	ldr	r2, [r4, #0]
  4061ba:	2301      	movs	r3, #1
  4061bc:	e7db      	b.n	406176 <__swbuf_r+0x36>
  4061be:	4621      	mov	r1, r4
  4061c0:	4638      	mov	r0, r7
  4061c2:	f7fe fcf3 	bl	404bac <_fflush_r>
  4061c6:	2800      	cmp	r0, #0
  4061c8:	d0e3      	beq.n	406192 <__swbuf_r+0x52>
  4061ca:	f04f 30ff 	mov.w	r0, #4294967295
  4061ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4061d0:	4621      	mov	r1, r4
  4061d2:	4638      	mov	r0, r7
  4061d4:	f7fe fbd2 	bl	40497c <__swsetup_r>
  4061d8:	2800      	cmp	r0, #0
  4061da:	d1f6      	bne.n	4061ca <__swbuf_r+0x8a>
  4061dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4061e0:	6923      	ldr	r3, [r4, #16]
  4061e2:	b291      	uxth	r1, r2
  4061e4:	e7be      	b.n	406164 <__swbuf_r+0x24>
  4061e6:	f7fe fd75 	bl	404cd4 <__sinit>
  4061ea:	e7b1      	b.n	406150 <__swbuf_r+0x10>

004061ec <_wcrtomb_r>:
  4061ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4061f0:	4605      	mov	r5, r0
  4061f2:	b086      	sub	sp, #24
  4061f4:	461e      	mov	r6, r3
  4061f6:	460c      	mov	r4, r1
  4061f8:	b1a1      	cbz	r1, 406224 <_wcrtomb_r+0x38>
  4061fa:	4b10      	ldr	r3, [pc, #64]	; (40623c <_wcrtomb_r+0x50>)
  4061fc:	4617      	mov	r7, r2
  4061fe:	f8d3 8000 	ldr.w	r8, [r3]
  406202:	f7ff f8c5 	bl	405390 <__locale_charset>
  406206:	9600      	str	r6, [sp, #0]
  406208:	4603      	mov	r3, r0
  40620a:	463a      	mov	r2, r7
  40620c:	4621      	mov	r1, r4
  40620e:	4628      	mov	r0, r5
  406210:	47c0      	blx	r8
  406212:	1c43      	adds	r3, r0, #1
  406214:	d103      	bne.n	40621e <_wcrtomb_r+0x32>
  406216:	2200      	movs	r2, #0
  406218:	238a      	movs	r3, #138	; 0x8a
  40621a:	6032      	str	r2, [r6, #0]
  40621c:	602b      	str	r3, [r5, #0]
  40621e:	b006      	add	sp, #24
  406220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406224:	4b05      	ldr	r3, [pc, #20]	; (40623c <_wcrtomb_r+0x50>)
  406226:	681f      	ldr	r7, [r3, #0]
  406228:	f7ff f8b2 	bl	405390 <__locale_charset>
  40622c:	9600      	str	r6, [sp, #0]
  40622e:	4603      	mov	r3, r0
  406230:	4622      	mov	r2, r4
  406232:	a903      	add	r1, sp, #12
  406234:	4628      	mov	r0, r5
  406236:	47b8      	blx	r7
  406238:	e7eb      	b.n	406212 <_wcrtomb_r+0x26>
  40623a:	bf00      	nop
  40623c:	20400880 	.word	0x20400880

00406240 <__ascii_wctomb>:
  406240:	b121      	cbz	r1, 40624c <__ascii_wctomb+0xc>
  406242:	2aff      	cmp	r2, #255	; 0xff
  406244:	d804      	bhi.n	406250 <__ascii_wctomb+0x10>
  406246:	700a      	strb	r2, [r1, #0]
  406248:	2001      	movs	r0, #1
  40624a:	4770      	bx	lr
  40624c:	4608      	mov	r0, r1
  40624e:	4770      	bx	lr
  406250:	238a      	movs	r3, #138	; 0x8a
  406252:	6003      	str	r3, [r0, #0]
  406254:	f04f 30ff 	mov.w	r0, #4294967295
  406258:	4770      	bx	lr
  40625a:	bf00      	nop

0040625c <_write_r>:
  40625c:	b570      	push	{r4, r5, r6, lr}
  40625e:	460d      	mov	r5, r1
  406260:	4c08      	ldr	r4, [pc, #32]	; (406284 <_write_r+0x28>)
  406262:	4611      	mov	r1, r2
  406264:	4606      	mov	r6, r0
  406266:	461a      	mov	r2, r3
  406268:	4628      	mov	r0, r5
  40626a:	2300      	movs	r3, #0
  40626c:	6023      	str	r3, [r4, #0]
  40626e:	f7fc f9d9 	bl	402624 <_write>
  406272:	1c43      	adds	r3, r0, #1
  406274:	d000      	beq.n	406278 <_write_r+0x1c>
  406276:	bd70      	pop	{r4, r5, r6, pc}
  406278:	6823      	ldr	r3, [r4, #0]
  40627a:	2b00      	cmp	r3, #0
  40627c:	d0fb      	beq.n	406276 <_write_r+0x1a>
  40627e:	6033      	str	r3, [r6, #0]
  406280:	bd70      	pop	{r4, r5, r6, pc}
  406282:	bf00      	nop
  406284:	2040099c 	.word	0x2040099c

00406288 <__register_exitproc>:
  406288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40628c:	4c25      	ldr	r4, [pc, #148]	; (406324 <__register_exitproc+0x9c>)
  40628e:	6825      	ldr	r5, [r4, #0]
  406290:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  406294:	4606      	mov	r6, r0
  406296:	4688      	mov	r8, r1
  406298:	4692      	mov	sl, r2
  40629a:	4699      	mov	r9, r3
  40629c:	b3c4      	cbz	r4, 406310 <__register_exitproc+0x88>
  40629e:	6860      	ldr	r0, [r4, #4]
  4062a0:	281f      	cmp	r0, #31
  4062a2:	dc17      	bgt.n	4062d4 <__register_exitproc+0x4c>
  4062a4:	1c43      	adds	r3, r0, #1
  4062a6:	b176      	cbz	r6, 4062c6 <__register_exitproc+0x3e>
  4062a8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4062ac:	2201      	movs	r2, #1
  4062ae:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4062b2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4062b6:	4082      	lsls	r2, r0
  4062b8:	4311      	orrs	r1, r2
  4062ba:	2e02      	cmp	r6, #2
  4062bc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4062c0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4062c4:	d01e      	beq.n	406304 <__register_exitproc+0x7c>
  4062c6:	3002      	adds	r0, #2
  4062c8:	6063      	str	r3, [r4, #4]
  4062ca:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4062ce:	2000      	movs	r0, #0
  4062d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4062d4:	4b14      	ldr	r3, [pc, #80]	; (406328 <__register_exitproc+0xa0>)
  4062d6:	b303      	cbz	r3, 40631a <__register_exitproc+0x92>
  4062d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4062dc:	f7ff f8d6 	bl	40548c <malloc>
  4062e0:	4604      	mov	r4, r0
  4062e2:	b1d0      	cbz	r0, 40631a <__register_exitproc+0x92>
  4062e4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4062e8:	2700      	movs	r7, #0
  4062ea:	e880 0088 	stmia.w	r0, {r3, r7}
  4062ee:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4062f2:	4638      	mov	r0, r7
  4062f4:	2301      	movs	r3, #1
  4062f6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4062fa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4062fe:	2e00      	cmp	r6, #0
  406300:	d0e1      	beq.n	4062c6 <__register_exitproc+0x3e>
  406302:	e7d1      	b.n	4062a8 <__register_exitproc+0x20>
  406304:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  406308:	430a      	orrs	r2, r1
  40630a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40630e:	e7da      	b.n	4062c6 <__register_exitproc+0x3e>
  406310:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  406314:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  406318:	e7c1      	b.n	40629e <__register_exitproc+0x16>
  40631a:	f04f 30ff 	mov.w	r0, #4294967295
  40631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406322:	bf00      	nop
  406324:	004076fc 	.word	0x004076fc
  406328:	0040548d 	.word	0x0040548d

0040632c <_close_r>:
  40632c:	b538      	push	{r3, r4, r5, lr}
  40632e:	4c07      	ldr	r4, [pc, #28]	; (40634c <_close_r+0x20>)
  406330:	2300      	movs	r3, #0
  406332:	4605      	mov	r5, r0
  406334:	4608      	mov	r0, r1
  406336:	6023      	str	r3, [r4, #0]
  406338:	f7fc ffc0 	bl	4032bc <_close>
  40633c:	1c43      	adds	r3, r0, #1
  40633e:	d000      	beq.n	406342 <_close_r+0x16>
  406340:	bd38      	pop	{r3, r4, r5, pc}
  406342:	6823      	ldr	r3, [r4, #0]
  406344:	2b00      	cmp	r3, #0
  406346:	d0fb      	beq.n	406340 <_close_r+0x14>
  406348:	602b      	str	r3, [r5, #0]
  40634a:	bd38      	pop	{r3, r4, r5, pc}
  40634c:	2040099c 	.word	0x2040099c

00406350 <_fclose_r>:
  406350:	2900      	cmp	r1, #0
  406352:	d03d      	beq.n	4063d0 <_fclose_r+0x80>
  406354:	b570      	push	{r4, r5, r6, lr}
  406356:	4605      	mov	r5, r0
  406358:	460c      	mov	r4, r1
  40635a:	b108      	cbz	r0, 406360 <_fclose_r+0x10>
  40635c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40635e:	b37b      	cbz	r3, 4063c0 <_fclose_r+0x70>
  406360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406364:	b90b      	cbnz	r3, 40636a <_fclose_r+0x1a>
  406366:	2000      	movs	r0, #0
  406368:	bd70      	pop	{r4, r5, r6, pc}
  40636a:	4621      	mov	r1, r4
  40636c:	4628      	mov	r0, r5
  40636e:	f7fe fb79 	bl	404a64 <__sflush_r>
  406372:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406374:	4606      	mov	r6, r0
  406376:	b133      	cbz	r3, 406386 <_fclose_r+0x36>
  406378:	69e1      	ldr	r1, [r4, #28]
  40637a:	4628      	mov	r0, r5
  40637c:	4798      	blx	r3
  40637e:	2800      	cmp	r0, #0
  406380:	bfb8      	it	lt
  406382:	f04f 36ff 	movlt.w	r6, #4294967295
  406386:	89a3      	ldrh	r3, [r4, #12]
  406388:	061b      	lsls	r3, r3, #24
  40638a:	d41c      	bmi.n	4063c6 <_fclose_r+0x76>
  40638c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40638e:	b141      	cbz	r1, 4063a2 <_fclose_r+0x52>
  406390:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406394:	4299      	cmp	r1, r3
  406396:	d002      	beq.n	40639e <_fclose_r+0x4e>
  406398:	4628      	mov	r0, r5
  40639a:	f7fe fd65 	bl	404e68 <_free_r>
  40639e:	2300      	movs	r3, #0
  4063a0:	6323      	str	r3, [r4, #48]	; 0x30
  4063a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4063a4:	b121      	cbz	r1, 4063b0 <_fclose_r+0x60>
  4063a6:	4628      	mov	r0, r5
  4063a8:	f7fe fd5e 	bl	404e68 <_free_r>
  4063ac:	2300      	movs	r3, #0
  4063ae:	6463      	str	r3, [r4, #68]	; 0x44
  4063b0:	f7fe fc96 	bl	404ce0 <__sfp_lock_acquire>
  4063b4:	2300      	movs	r3, #0
  4063b6:	81a3      	strh	r3, [r4, #12]
  4063b8:	f7fe fc94 	bl	404ce4 <__sfp_lock_release>
  4063bc:	4630      	mov	r0, r6
  4063be:	bd70      	pop	{r4, r5, r6, pc}
  4063c0:	f7fe fc88 	bl	404cd4 <__sinit>
  4063c4:	e7cc      	b.n	406360 <_fclose_r+0x10>
  4063c6:	6921      	ldr	r1, [r4, #16]
  4063c8:	4628      	mov	r0, r5
  4063ca:	f7fe fd4d 	bl	404e68 <_free_r>
  4063ce:	e7dd      	b.n	40638c <_fclose_r+0x3c>
  4063d0:	2000      	movs	r0, #0
  4063d2:	4770      	bx	lr

004063d4 <_fstat_r>:
  4063d4:	b538      	push	{r3, r4, r5, lr}
  4063d6:	460b      	mov	r3, r1
  4063d8:	4c07      	ldr	r4, [pc, #28]	; (4063f8 <_fstat_r+0x24>)
  4063da:	4605      	mov	r5, r0
  4063dc:	4611      	mov	r1, r2
  4063de:	4618      	mov	r0, r3
  4063e0:	2300      	movs	r3, #0
  4063e2:	6023      	str	r3, [r4, #0]
  4063e4:	f7fc ff6e 	bl	4032c4 <_fstat>
  4063e8:	1c43      	adds	r3, r0, #1
  4063ea:	d000      	beq.n	4063ee <_fstat_r+0x1a>
  4063ec:	bd38      	pop	{r3, r4, r5, pc}
  4063ee:	6823      	ldr	r3, [r4, #0]
  4063f0:	2b00      	cmp	r3, #0
  4063f2:	d0fb      	beq.n	4063ec <_fstat_r+0x18>
  4063f4:	602b      	str	r3, [r5, #0]
  4063f6:	bd38      	pop	{r3, r4, r5, pc}
  4063f8:	2040099c 	.word	0x2040099c

004063fc <_isatty_r>:
  4063fc:	b538      	push	{r3, r4, r5, lr}
  4063fe:	4c07      	ldr	r4, [pc, #28]	; (40641c <_isatty_r+0x20>)
  406400:	2300      	movs	r3, #0
  406402:	4605      	mov	r5, r0
  406404:	4608      	mov	r0, r1
  406406:	6023      	str	r3, [r4, #0]
  406408:	f7fc ff62 	bl	4032d0 <_isatty>
  40640c:	1c43      	adds	r3, r0, #1
  40640e:	d000      	beq.n	406412 <_isatty_r+0x16>
  406410:	bd38      	pop	{r3, r4, r5, pc}
  406412:	6823      	ldr	r3, [r4, #0]
  406414:	2b00      	cmp	r3, #0
  406416:	d0fb      	beq.n	406410 <_isatty_r+0x14>
  406418:	602b      	str	r3, [r5, #0]
  40641a:	bd38      	pop	{r3, r4, r5, pc}
  40641c:	2040099c 	.word	0x2040099c

00406420 <_lseek_r>:
  406420:	b570      	push	{r4, r5, r6, lr}
  406422:	460d      	mov	r5, r1
  406424:	4c08      	ldr	r4, [pc, #32]	; (406448 <_lseek_r+0x28>)
  406426:	4611      	mov	r1, r2
  406428:	4606      	mov	r6, r0
  40642a:	461a      	mov	r2, r3
  40642c:	4628      	mov	r0, r5
  40642e:	2300      	movs	r3, #0
  406430:	6023      	str	r3, [r4, #0]
  406432:	f7fc ff4f 	bl	4032d4 <_lseek>
  406436:	1c43      	adds	r3, r0, #1
  406438:	d000      	beq.n	40643c <_lseek_r+0x1c>
  40643a:	bd70      	pop	{r4, r5, r6, pc}
  40643c:	6823      	ldr	r3, [r4, #0]
  40643e:	2b00      	cmp	r3, #0
  406440:	d0fb      	beq.n	40643a <_lseek_r+0x1a>
  406442:	6033      	str	r3, [r6, #0]
  406444:	bd70      	pop	{r4, r5, r6, pc}
  406446:	bf00      	nop
  406448:	2040099c 	.word	0x2040099c

0040644c <_read_r>:
  40644c:	b570      	push	{r4, r5, r6, lr}
  40644e:	460d      	mov	r5, r1
  406450:	4c08      	ldr	r4, [pc, #32]	; (406474 <_read_r+0x28>)
  406452:	4611      	mov	r1, r2
  406454:	4606      	mov	r6, r0
  406456:	461a      	mov	r2, r3
  406458:	4628      	mov	r0, r5
  40645a:	2300      	movs	r3, #0
  40645c:	6023      	str	r3, [r4, #0]
  40645e:	f7fc f8c3 	bl	4025e8 <_read>
  406462:	1c43      	adds	r3, r0, #1
  406464:	d000      	beq.n	406468 <_read_r+0x1c>
  406466:	bd70      	pop	{r4, r5, r6, pc}
  406468:	6823      	ldr	r3, [r4, #0]
  40646a:	2b00      	cmp	r3, #0
  40646c:	d0fb      	beq.n	406466 <_read_r+0x1a>
  40646e:	6033      	str	r3, [r6, #0]
  406470:	bd70      	pop	{r4, r5, r6, pc}
  406472:	bf00      	nop
  406474:	2040099c 	.word	0x2040099c

00406478 <__aeabi_uldivmod>:
  406478:	b953      	cbnz	r3, 406490 <__aeabi_uldivmod+0x18>
  40647a:	b94a      	cbnz	r2, 406490 <__aeabi_uldivmod+0x18>
  40647c:	2900      	cmp	r1, #0
  40647e:	bf08      	it	eq
  406480:	2800      	cmpeq	r0, #0
  406482:	bf1c      	itt	ne
  406484:	f04f 31ff 	movne.w	r1, #4294967295
  406488:	f04f 30ff 	movne.w	r0, #4294967295
  40648c:	f000 b97e 	b.w	40678c <__aeabi_idiv0>
  406490:	f1ad 0c08 	sub.w	ip, sp, #8
  406494:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406498:	f000 f806 	bl	4064a8 <__udivmoddi4>
  40649c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4064a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4064a4:	b004      	add	sp, #16
  4064a6:	4770      	bx	lr

004064a8 <__udivmoddi4>:
  4064a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4064ac:	468c      	mov	ip, r1
  4064ae:	460e      	mov	r6, r1
  4064b0:	4604      	mov	r4, r0
  4064b2:	9d08      	ldr	r5, [sp, #32]
  4064b4:	2b00      	cmp	r3, #0
  4064b6:	d150      	bne.n	40655a <__udivmoddi4+0xb2>
  4064b8:	428a      	cmp	r2, r1
  4064ba:	4617      	mov	r7, r2
  4064bc:	d96c      	bls.n	406598 <__udivmoddi4+0xf0>
  4064be:	fab2 fe82 	clz	lr, r2
  4064c2:	f1be 0f00 	cmp.w	lr, #0
  4064c6:	d00b      	beq.n	4064e0 <__udivmoddi4+0x38>
  4064c8:	f1ce 0420 	rsb	r4, lr, #32
  4064cc:	fa20 f404 	lsr.w	r4, r0, r4
  4064d0:	fa01 f60e 	lsl.w	r6, r1, lr
  4064d4:	ea44 0c06 	orr.w	ip, r4, r6
  4064d8:	fa02 f70e 	lsl.w	r7, r2, lr
  4064dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4064e0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4064e4:	0c22      	lsrs	r2, r4, #16
  4064e6:	fbbc f0f9 	udiv	r0, ip, r9
  4064ea:	fa1f f887 	uxth.w	r8, r7
  4064ee:	fb09 c610 	mls	r6, r9, r0, ip
  4064f2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4064f6:	fb00 f308 	mul.w	r3, r0, r8
  4064fa:	42b3      	cmp	r3, r6
  4064fc:	d909      	bls.n	406512 <__udivmoddi4+0x6a>
  4064fe:	19f6      	adds	r6, r6, r7
  406500:	f100 32ff 	add.w	r2, r0, #4294967295
  406504:	f080 8122 	bcs.w	40674c <__udivmoddi4+0x2a4>
  406508:	42b3      	cmp	r3, r6
  40650a:	f240 811f 	bls.w	40674c <__udivmoddi4+0x2a4>
  40650e:	3802      	subs	r0, #2
  406510:	443e      	add	r6, r7
  406512:	1af6      	subs	r6, r6, r3
  406514:	b2a2      	uxth	r2, r4
  406516:	fbb6 f3f9 	udiv	r3, r6, r9
  40651a:	fb09 6613 	mls	r6, r9, r3, r6
  40651e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  406522:	fb03 f808 	mul.w	r8, r3, r8
  406526:	45a0      	cmp	r8, r4
  406528:	d909      	bls.n	40653e <__udivmoddi4+0x96>
  40652a:	19e4      	adds	r4, r4, r7
  40652c:	f103 32ff 	add.w	r2, r3, #4294967295
  406530:	f080 810a 	bcs.w	406748 <__udivmoddi4+0x2a0>
  406534:	45a0      	cmp	r8, r4
  406536:	f240 8107 	bls.w	406748 <__udivmoddi4+0x2a0>
  40653a:	3b02      	subs	r3, #2
  40653c:	443c      	add	r4, r7
  40653e:	ebc8 0404 	rsb	r4, r8, r4
  406542:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  406546:	2100      	movs	r1, #0
  406548:	2d00      	cmp	r5, #0
  40654a:	d062      	beq.n	406612 <__udivmoddi4+0x16a>
  40654c:	fa24 f40e 	lsr.w	r4, r4, lr
  406550:	2300      	movs	r3, #0
  406552:	602c      	str	r4, [r5, #0]
  406554:	606b      	str	r3, [r5, #4]
  406556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40655a:	428b      	cmp	r3, r1
  40655c:	d907      	bls.n	40656e <__udivmoddi4+0xc6>
  40655e:	2d00      	cmp	r5, #0
  406560:	d055      	beq.n	40660e <__udivmoddi4+0x166>
  406562:	2100      	movs	r1, #0
  406564:	e885 0041 	stmia.w	r5, {r0, r6}
  406568:	4608      	mov	r0, r1
  40656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40656e:	fab3 f183 	clz	r1, r3
  406572:	2900      	cmp	r1, #0
  406574:	f040 8090 	bne.w	406698 <__udivmoddi4+0x1f0>
  406578:	42b3      	cmp	r3, r6
  40657a:	d302      	bcc.n	406582 <__udivmoddi4+0xda>
  40657c:	4282      	cmp	r2, r0
  40657e:	f200 80f8 	bhi.w	406772 <__udivmoddi4+0x2ca>
  406582:	1a84      	subs	r4, r0, r2
  406584:	eb66 0603 	sbc.w	r6, r6, r3
  406588:	2001      	movs	r0, #1
  40658a:	46b4      	mov	ip, r6
  40658c:	2d00      	cmp	r5, #0
  40658e:	d040      	beq.n	406612 <__udivmoddi4+0x16a>
  406590:	e885 1010 	stmia.w	r5, {r4, ip}
  406594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406598:	b912      	cbnz	r2, 4065a0 <__udivmoddi4+0xf8>
  40659a:	2701      	movs	r7, #1
  40659c:	fbb7 f7f2 	udiv	r7, r7, r2
  4065a0:	fab7 fe87 	clz	lr, r7
  4065a4:	f1be 0f00 	cmp.w	lr, #0
  4065a8:	d135      	bne.n	406616 <__udivmoddi4+0x16e>
  4065aa:	1bf3      	subs	r3, r6, r7
  4065ac:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4065b0:	fa1f fc87 	uxth.w	ip, r7
  4065b4:	2101      	movs	r1, #1
  4065b6:	fbb3 f0f8 	udiv	r0, r3, r8
  4065ba:	0c22      	lsrs	r2, r4, #16
  4065bc:	fb08 3610 	mls	r6, r8, r0, r3
  4065c0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4065c4:	fb0c f300 	mul.w	r3, ip, r0
  4065c8:	42b3      	cmp	r3, r6
  4065ca:	d907      	bls.n	4065dc <__udivmoddi4+0x134>
  4065cc:	19f6      	adds	r6, r6, r7
  4065ce:	f100 32ff 	add.w	r2, r0, #4294967295
  4065d2:	d202      	bcs.n	4065da <__udivmoddi4+0x132>
  4065d4:	42b3      	cmp	r3, r6
  4065d6:	f200 80ce 	bhi.w	406776 <__udivmoddi4+0x2ce>
  4065da:	4610      	mov	r0, r2
  4065dc:	1af6      	subs	r6, r6, r3
  4065de:	b2a2      	uxth	r2, r4
  4065e0:	fbb6 f3f8 	udiv	r3, r6, r8
  4065e4:	fb08 6613 	mls	r6, r8, r3, r6
  4065e8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4065ec:	fb0c fc03 	mul.w	ip, ip, r3
  4065f0:	45a4      	cmp	ip, r4
  4065f2:	d907      	bls.n	406604 <__udivmoddi4+0x15c>
  4065f4:	19e4      	adds	r4, r4, r7
  4065f6:	f103 32ff 	add.w	r2, r3, #4294967295
  4065fa:	d202      	bcs.n	406602 <__udivmoddi4+0x15a>
  4065fc:	45a4      	cmp	ip, r4
  4065fe:	f200 80b5 	bhi.w	40676c <__udivmoddi4+0x2c4>
  406602:	4613      	mov	r3, r2
  406604:	ebcc 0404 	rsb	r4, ip, r4
  406608:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40660c:	e79c      	b.n	406548 <__udivmoddi4+0xa0>
  40660e:	4629      	mov	r1, r5
  406610:	4628      	mov	r0, r5
  406612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406616:	f1ce 0120 	rsb	r1, lr, #32
  40661a:	fa06 f30e 	lsl.w	r3, r6, lr
  40661e:	fa07 f70e 	lsl.w	r7, r7, lr
  406622:	fa20 f901 	lsr.w	r9, r0, r1
  406626:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40662a:	40ce      	lsrs	r6, r1
  40662c:	ea49 0903 	orr.w	r9, r9, r3
  406630:	fbb6 faf8 	udiv	sl, r6, r8
  406634:	ea4f 4419 	mov.w	r4, r9, lsr #16
  406638:	fb08 661a 	mls	r6, r8, sl, r6
  40663c:	fa1f fc87 	uxth.w	ip, r7
  406640:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  406644:	fb0a f20c 	mul.w	r2, sl, ip
  406648:	429a      	cmp	r2, r3
  40664a:	fa00 f40e 	lsl.w	r4, r0, lr
  40664e:	d90a      	bls.n	406666 <__udivmoddi4+0x1be>
  406650:	19db      	adds	r3, r3, r7
  406652:	f10a 31ff 	add.w	r1, sl, #4294967295
  406656:	f080 8087 	bcs.w	406768 <__udivmoddi4+0x2c0>
  40665a:	429a      	cmp	r2, r3
  40665c:	f240 8084 	bls.w	406768 <__udivmoddi4+0x2c0>
  406660:	f1aa 0a02 	sub.w	sl, sl, #2
  406664:	443b      	add	r3, r7
  406666:	1a9b      	subs	r3, r3, r2
  406668:	fa1f f989 	uxth.w	r9, r9
  40666c:	fbb3 f1f8 	udiv	r1, r3, r8
  406670:	fb08 3311 	mls	r3, r8, r1, r3
  406674:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  406678:	fb01 f60c 	mul.w	r6, r1, ip
  40667c:	429e      	cmp	r6, r3
  40667e:	d907      	bls.n	406690 <__udivmoddi4+0x1e8>
  406680:	19db      	adds	r3, r3, r7
  406682:	f101 32ff 	add.w	r2, r1, #4294967295
  406686:	d26b      	bcs.n	406760 <__udivmoddi4+0x2b8>
  406688:	429e      	cmp	r6, r3
  40668a:	d969      	bls.n	406760 <__udivmoddi4+0x2b8>
  40668c:	3902      	subs	r1, #2
  40668e:	443b      	add	r3, r7
  406690:	1b9b      	subs	r3, r3, r6
  406692:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  406696:	e78e      	b.n	4065b6 <__udivmoddi4+0x10e>
  406698:	f1c1 0e20 	rsb	lr, r1, #32
  40669c:	fa22 f40e 	lsr.w	r4, r2, lr
  4066a0:	408b      	lsls	r3, r1
  4066a2:	4323      	orrs	r3, r4
  4066a4:	fa20 f70e 	lsr.w	r7, r0, lr
  4066a8:	fa06 f401 	lsl.w	r4, r6, r1
  4066ac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4066b0:	fa26 f60e 	lsr.w	r6, r6, lr
  4066b4:	433c      	orrs	r4, r7
  4066b6:	fbb6 f9fc 	udiv	r9, r6, ip
  4066ba:	0c27      	lsrs	r7, r4, #16
  4066bc:	fb0c 6619 	mls	r6, ip, r9, r6
  4066c0:	fa1f f883 	uxth.w	r8, r3
  4066c4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4066c8:	fb09 f708 	mul.w	r7, r9, r8
  4066cc:	42b7      	cmp	r7, r6
  4066ce:	fa02 f201 	lsl.w	r2, r2, r1
  4066d2:	fa00 fa01 	lsl.w	sl, r0, r1
  4066d6:	d908      	bls.n	4066ea <__udivmoddi4+0x242>
  4066d8:	18f6      	adds	r6, r6, r3
  4066da:	f109 30ff 	add.w	r0, r9, #4294967295
  4066de:	d241      	bcs.n	406764 <__udivmoddi4+0x2bc>
  4066e0:	42b7      	cmp	r7, r6
  4066e2:	d93f      	bls.n	406764 <__udivmoddi4+0x2bc>
  4066e4:	f1a9 0902 	sub.w	r9, r9, #2
  4066e8:	441e      	add	r6, r3
  4066ea:	1bf6      	subs	r6, r6, r7
  4066ec:	b2a0      	uxth	r0, r4
  4066ee:	fbb6 f4fc 	udiv	r4, r6, ip
  4066f2:	fb0c 6614 	mls	r6, ip, r4, r6
  4066f6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4066fa:	fb04 f808 	mul.w	r8, r4, r8
  4066fe:	45b8      	cmp	r8, r7
  406700:	d907      	bls.n	406712 <__udivmoddi4+0x26a>
  406702:	18ff      	adds	r7, r7, r3
  406704:	f104 30ff 	add.w	r0, r4, #4294967295
  406708:	d228      	bcs.n	40675c <__udivmoddi4+0x2b4>
  40670a:	45b8      	cmp	r8, r7
  40670c:	d926      	bls.n	40675c <__udivmoddi4+0x2b4>
  40670e:	3c02      	subs	r4, #2
  406710:	441f      	add	r7, r3
  406712:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  406716:	ebc8 0707 	rsb	r7, r8, r7
  40671a:	fba0 8902 	umull	r8, r9, r0, r2
  40671e:	454f      	cmp	r7, r9
  406720:	4644      	mov	r4, r8
  406722:	464e      	mov	r6, r9
  406724:	d314      	bcc.n	406750 <__udivmoddi4+0x2a8>
  406726:	d029      	beq.n	40677c <__udivmoddi4+0x2d4>
  406728:	b365      	cbz	r5, 406784 <__udivmoddi4+0x2dc>
  40672a:	ebba 0304 	subs.w	r3, sl, r4
  40672e:	eb67 0706 	sbc.w	r7, r7, r6
  406732:	fa07 fe0e 	lsl.w	lr, r7, lr
  406736:	40cb      	lsrs	r3, r1
  406738:	40cf      	lsrs	r7, r1
  40673a:	ea4e 0303 	orr.w	r3, lr, r3
  40673e:	e885 0088 	stmia.w	r5, {r3, r7}
  406742:	2100      	movs	r1, #0
  406744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406748:	4613      	mov	r3, r2
  40674a:	e6f8      	b.n	40653e <__udivmoddi4+0x96>
  40674c:	4610      	mov	r0, r2
  40674e:	e6e0      	b.n	406512 <__udivmoddi4+0x6a>
  406750:	ebb8 0402 	subs.w	r4, r8, r2
  406754:	eb69 0603 	sbc.w	r6, r9, r3
  406758:	3801      	subs	r0, #1
  40675a:	e7e5      	b.n	406728 <__udivmoddi4+0x280>
  40675c:	4604      	mov	r4, r0
  40675e:	e7d8      	b.n	406712 <__udivmoddi4+0x26a>
  406760:	4611      	mov	r1, r2
  406762:	e795      	b.n	406690 <__udivmoddi4+0x1e8>
  406764:	4681      	mov	r9, r0
  406766:	e7c0      	b.n	4066ea <__udivmoddi4+0x242>
  406768:	468a      	mov	sl, r1
  40676a:	e77c      	b.n	406666 <__udivmoddi4+0x1be>
  40676c:	3b02      	subs	r3, #2
  40676e:	443c      	add	r4, r7
  406770:	e748      	b.n	406604 <__udivmoddi4+0x15c>
  406772:	4608      	mov	r0, r1
  406774:	e70a      	b.n	40658c <__udivmoddi4+0xe4>
  406776:	3802      	subs	r0, #2
  406778:	443e      	add	r6, r7
  40677a:	e72f      	b.n	4065dc <__udivmoddi4+0x134>
  40677c:	45c2      	cmp	sl, r8
  40677e:	d3e7      	bcc.n	406750 <__udivmoddi4+0x2a8>
  406780:	463e      	mov	r6, r7
  406782:	e7d1      	b.n	406728 <__udivmoddi4+0x280>
  406784:	4629      	mov	r1, r5
  406786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40678a:	bf00      	nop

0040678c <__aeabi_idiv0>:
  40678c:	4770      	bx	lr
  40678e:	bf00      	nop
  406790:	50504128 	.word	0x50504128
  406794:	52452829 	.word	0x52452829
  406798:	255b2952 	.word	0x255b2952
  40679c:	255b5d73 	.word	0x255b5d73
  4067a0:	00005d64 	.word	0x00005d64
  4067a4:	61766e49 	.word	0x61766e49
  4067a8:	2064696c 	.word	0x2064696c
  4067ac:	54434f49 	.word	0x54434f49
  4067b0:	6f63204c 	.word	0x6f63204c
  4067b4:	6e616d6d 	.word	0x6e616d6d
  4067b8:	000a2164 	.word	0x000a2164
  4067bc:	0000000d 	.word	0x0000000d

004067c0 <__FUNCTION__.9672>:
  4067c0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....

004067d0 <__FUNCTION__.8784>:
  4067d0:	5f666968 00727369                       hif_isr.

004067d8 <__FUNCTION__.8805>:
  4067d8:	5f666968 65636572 00657669 46494828     hif_receive.(HIF
  4067e8:	69614629 6f74206c 6b617720 74207075     )Fail to wakup t
  4067f8:	63206568 0a706968 00000000 66696828     he chip.....(hif
  406808:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
  406818:	4c525443 6220315f 66207375 0a6c6961     CTRL_1 bus fail.
  406828:	00000000 66696828 64612029 73657264     ....(hif) addres
  406838:	75622073 61662073 000a6c69 66696828     s bus fail..(hif
  406848:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
  406858:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
  406868:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
  406878:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
  406888:	6e692029 696c6176 72672064 2070756f     ) invalid group 
  406898:	000a4449 66696828 6f682029 61207473     ID..(hif) host a
  4068a8:	64207070 276e6469 65732074 58522074     pp didn't set RX
  4068b8:	6e6f4420 00000a65 66696828 72572029      Done...(hif) Wr
  4068c8:	20676e6f 657a6953 0000000a 66696828     ong Size....(hif
  4068d8:	61462029 2065736c 65746e69 70757272     ) False interrup
  4068e8:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
  4068f8:	74206c69 6552206f 69206461 7265746e     il to Read inter
  406908:	74707572 67657220 0000000a 66696828     rupt reg....(hif
  406918:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
  406928:	65687420 69686320 00000a70 46494828      the chip...(HIF
  406938:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
  406948:	746e6920 75727265 25207470 72742064      interrupt %d tr
  406958:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
  406968:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
  406978:	72612064 656d7567 000a746e 20505041     d argument..APP 
  406988:	75716552 65747365 69532064 6920657a     Requested Size i
  406998:	616c2073 72656772 61687420 6874206e     s larger than th
  4069a8:	65722065 65766963 75622064 72656666     e recived buffer
  4069b8:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
  4069c8:	20505041 75716552 65747365 64412064     APP Requested Ad
  4069d8:	73657264 65622073 646e6f79 65687420     dress beyond the
  4069e8:	63657220 64657669 66756220 20726566      recived buffer 
  4069f8:	72646461 20737365 20646e61 676e656c     address and leng
  406a08:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....

00406a18 <__FUNCTION__.8820>:
  406a18:	5f666968 69676572 72657473 0062635f     hif_register_cb.

00406a28 <__FUNCTION__.8774>:
  406a28:	5f666968 646e6573 00000000              hif_send....

00406a34 <__FUNCTION__.8790>:
  406a34:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00406a44 <__FUNCTION__.8799>:
  406a44:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  406a54:	0063735f                                _sc.

00406a58 <__FUNCTION__.8747>:
  406a58:	5f6d326d 69666977 0062635f 50504128     m2m_wifi_cb.(APP
  406a68:	4e492829 00294f46 666e6f43 7463696c     )(INFO).Conflict
  406a78:	49206465 20222050 252e7525 75252e75     ed IP " %u.%u.%u
  406a88:	2075252e 000a2022 20514552 20746f4e     .%u " ..REQ Not 
  406a98:	69666564 2064656e 000a6425 41564e49     defined %d..INVA
  406aa8:	2044494c 4e494f50 0a524554 00000000     LID POINTER.....
  406ab8:	41564e49 2044494c 44495353 0000000a     INVALID SSID....
  406ac8:	41564e49 2044494c 000a4843 41564e49     INVALID CH..INVA
  406ad8:	2044494c 50434844 52455320 20524556     LID DHCP SERVER 
  406ae8:	000a5049 41564e49 2044494c 2059454b     IP..INVALID KEY 
  406af8:	45444e49 00000a58 41564e49 2044494c     INDEX...INVALID 
  406b08:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
  406b18:	2044494c 20504557 0a59454b 00000000     LID WEP KEY.....
  406b28:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
  406b38:	49544143 4d204e4f 0a45444f 00000000     CATION MODE.....
  406b48:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  406b58:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  406b68:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  406b78:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  406b88:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  406b98:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  406ba8:	7277616d 65562065 6f697372 00000a6e     mawre Version...
  406bb8:	2079654b 6e207369 7620746f 64696c61     Key is not valid
  406bc8:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
  406bd8:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
  406be8:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
  406bf8:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
  406c08:	2079656b 65646e69 64252078 0000000a     key index %d....
  406c18:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
  406c28:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
  406c38:	63657272 53502074 656b204b 656c2079     rrect PSK key le
  406c48:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
  406c58:	65732064 79742063 000a6570 41564e49     d sec type..INVA
  406c68:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
  406c78:	73746f6c 00000a21 41564e49 2044494c     lots!...INVALID 
  406c88:	6e616373 6f6c7320 69742074 0a21656d     scan slot time!.
  406c98:	00000000 41564e49 2044494c 6f206f4e     ....INVALID No o
  406ca8:	72702066 2065626f 75716572 73747365     f probe requests
  406cb8:	72657020 61637320 6c73206e 000a746f      per scan slot..
  406cc8:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
  406cd8:	6f687365 2520646c 000a2064 5f53505f     eshold %d .._PS_
  406ce8:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
  406cf8:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
  406d08:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
  406d18:	6220796c 2c312065 6f203620 31312072     ly be 1, 6 or 11
  406d28:	0000000a 45574f50 41532052 25204556     ....POWER SAVE %
  406d38:	00000a64 41564e49 2044494c 414d4f44     d...INVALID DOMA
  406d48:	4e204e49 0a454d41 00000000 474e5250     IN NAME.....PRNG
  406d58:	66754220 20726566 65637865 64656465      Buffer exceeded
  406d68:	78616d20 6d756d69 7a697320 64252065      maximum size %d
  406d78:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
  406d88:	00000000                                ....

00406d8c <__FUNCTION__.8771>:
  406d8c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00406d9c <__FUNCTION__.8678>:
  406d9c:	70696863 6965645f 0074696e              chip_deinit.

00406da8 <__FUNCTION__.8584>:
  406da8:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
  406db8:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  406dc8:	20656b61 66207075 656c6961 00000a64     ake up failed...
  406dd8:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  406de8:	20656b61 66207075 656c6961 00000a64     ake up failed...
  406df8:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  406e08:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  406e18:	0000000a 696d6e5b 61747320 3a5d7472     ....[nmi start]:
  406e28:	69616620 6572206c 72206461 30206765      fail read reg 0
  406e38:	31313178 2e2e2038 00000a2e 3a676572     x1118 ......reg:
  406e48:	2f207825 20782520 0000000a 6c696166     %x / %x ....fail
  406e58:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  406e68:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  406e78:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  406e88:	00000000 6f727245 68772072 20656c69     ....Error while 
  406e98:	64616572 20676e69 0a676572 00000000     reading reg.....
  406ea8:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  406eb8:	656c6961 6f742064 61657220 00000a64     ailed to read...
  406ec8:	6c75705b 5f70756c 6c727463 66203a5d     [pullup_ctrl]: f
  406ed8:	656c6961 6f742064 69727720 000a6574     ailed to write..
  406ee8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  406ef8:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  406f08:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
  406f18:	74206465 6e65206f 656c6261 746e6920     ed to enable int
  406f28:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
  406f38:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
  406f48:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
  406f58:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
  406f68:	69642068 6c626173 61662065 000a6c69     h disable fail..
  406f78:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
  406f88:	696e6920 75622074 00000a73               init bus...

00406f94 <__FUNCTION__.8665>:
  406f94:	645f6d6e 695f7672 0074696e              nm_drv_init.

00406fa0 <__FUNCTION__.8672>:
  406fa0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00406fb0 <__FUNCTION__.8073>:
  406fb0:	5f697073 61746164 6165725f 00000064     spi_data_read...

00406fc0 <crc7_syndrome_table>:
  406fc0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  406fd0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  406fe0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  406ff0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  407000:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  407010:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  407020:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  407030:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  407040:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  407050:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  407060:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  407070:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  407080:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  407090:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  4070a0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  4070b0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

004070c0 <__FUNCTION__.8140>:
  4070c0:	735f6d6e 695f6970 0074696e              nm_spi_init.

004070cc <__FUNCTION__.8088>:
  4070cc:	5f697073 61746164 6972775f 00006574     spi_data_write..

004070dc <__FUNCTION__.8123>:
  4070dc:	735f6d6e 725f6970 00646165 696d6e5b     nm_spi_read.[nmi
  4070ec:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4070fc:	65722064 6e6f7073 72206573 2c646165     d response read,
  40710c:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40711c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40712c:	61642064 72206174 6f707365 2065736e     d data response 
  40713c:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40714c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40715c:	656c6961 61642064 72206174 6f707365     ailed data respo
  40716c:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40717c:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40718c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40719c:	61657220 62202c64 65207375 726f7272      read, bus error
  4071ac:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  4071bc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  4071cc:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  4071dc:	65207375 726f7272 0a2e2e2e 00000000     us error........
  4071ec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4071fc:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40720c:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40721c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40722c:	77202c64 65746972 67657220 30252820     d, write reg (%0
  40723c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
  40724c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
  40725c:	6e6f7073 202c6573 74697277 65722065     sponse, write re
  40726c:	25282067 29783830 0a2e2e2e 00000000     g (%08x)........
  40727c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40728c:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40729c:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  4072ac:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4072bc:	65722064 6e6f7073 202c6573 64616572     d response, read
  4072cc:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  4072dc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4072ec:	61642064 72206174 2e646165 000a2e2e     d data read.....
  4072fc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40730c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40731c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40732c:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40733c:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40734c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40735c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40736c:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40737c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40738c:	6e692064 6e726574 77206c61 65746972     d internal write
  40739c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  4073ac:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  4073bc:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  4073cc:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  4073dc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4073ec:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  4073fc:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40740c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40741c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40742c:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40743c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40744c:	656c6961 6c622064 206b636f 61746164     ailed block data
  40745c:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40746c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40747c:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40748c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40749c:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  4074ac:	7220646d 6f707365 2c65736e 69727720     md response, wri
  4074bc:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  4074cc:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  4074dc:	656c6961 61642064 62206174 6b636f6c     ailed data block
  4074ec:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  4074fc:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40750c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40751c:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40752c:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40753c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40754c:	61642064 62206174 6b636f6c 63726320     d data block crc
  40755c:	69727720 202c6574 20737562 6f727265      write, bus erro
  40756c:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40757c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40758c:	61746164 69727720 2e2e6574 00000a2e     data write......

0040759c <__FUNCTION__.8098>:
  40759c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

004075ac <__FUNCTION__.8049>:
  4075ac:	5f697073 00646d63                       spi_cmd.

004075b4 <__FUNCTION__.8106>:
  4075b4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

004075c4 <__FUNCTION__.8057>:
  4075c4:	5f697073 5f646d63 00707372              spi_cmd_rsp.

004075d0 <__FUNCTION__.8115>:
  4075d0:	5f697073 64616572 6765725f 00000000     spi_read_reg....
  4075e0:	5d64255b 49535320 73253a44 00000a0d     [%d] SSID:%s....
  4075f0:	6f6d6f53 736e4973 00726570 6e756f46     SomosInsper.Foun
  407600:	73252064 000a0d20 736e6f63 6f686c65     d %s ...conselho
  407610:	00000000 206e6163 20746f6e 646e6966     ....can not find
  407620:	20504120 0a0d7325 00000000 462d6957      AP %s......Wi-F
  407630:	69642069 6e6f6373 7463656e 0a0d6465     i disconnected..
  407640:	00000000 462d6957 6f632069 63656e6e     ....Wi-Fi connec
  407650:	0d646574 0000000a 462d6957 50492069     ted.....Wi-Fi IP
  407660:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
  407670:	0000000a 57202d2d 31434e49 20303035     ....-- WINC1500 
  407680:	73205041 206e6163 6d617865 20656c70     AP scan example 
  407690:	0a0d2d2d 53202d2d 37454d41 50582d30     --..-- SAME70-XP
  4076a0:	2d20444c 2d0a0d2d 6f43202d 6c69706d     LD --..-- Compil
  4076b0:	203a6465 2072614d 32203031 20373130     ed: Mar 10 2017 
  4076c0:	333a3831 39343a31 0d2d2d20 0000000a     18:31:49 --.....
  4076d0:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
  4076e0:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
  4076f0:	0d296425 0000000a 00000043              %d).....C...

004076fc <_global_impure_ptr>:
  4076fc:	20400020                                 .@ 

00407700 <zeroes.6993>:
  407700:	30303030 30303030 30303030 30303030     0000000000000000
  407710:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  407720:	00000000 33323130 37363534 62613938     ....0123456789ab
  407730:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00407740 <blanks.6992>:
  407740:	20202020 20202020 20202020 20202020                     

00407750 <_init>:
  407750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407752:	bf00      	nop
  407754:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407756:	bc08      	pop	{r3}
  407758:	469e      	mov	lr, r3
  40775a:	4770      	bx	lr

0040775c <__init_array_start>:
  40775c:	00404a45 	.word	0x00404a45

00407760 <__frame_dummy_init_array_entry>:
  407760:	00400165                                e.@.

00407764 <_fini>:
  407764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407766:	bf00      	nop
  407768:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40776a:	bc08      	pop	{r3}
  40776c:	469e      	mov	lr, r3
  40776e:	4770      	bx	lr

00407770 <__fini_array_start>:
  407770:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <egstrNmBusCapabilities>:
2040000c:	1000 0000                                   ....

20400010 <clk_status_reg_adr>:
20400010:	000f 0000                                   ....

20400014 <g_interrupt_enabled>:
20400014:	0001 0000                                   ....

20400018 <SystemCoreClock>:
20400018:	0900 003d 0000 0000                         ..=.....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	76f8 0040 0000 0000 0000 0000 0000 0000     .v@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 

2040044c <lc_ctype_charset>:
2040044c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2040046c <__mb_cur_max>:
2040046c:	0001 0000                                   ....

20400470 <__malloc_av_>:
	...
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 

20400878 <__malloc_trim_threshold>:
20400878:	0000 0002                                   ....

2040087c <__malloc_sbrk_base>:
2040087c:	ffff ffff                                   ....

20400880 <__wctomb>:
20400880:	6241 0040                                   Ab@.
