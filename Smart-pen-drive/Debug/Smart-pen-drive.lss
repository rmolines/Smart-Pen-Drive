
Smart-pen-drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cd38  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040cd38  0040cd38  0001cd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008e4  20400000  0040cd40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000d80  204008e4  0040d624  000208e4  2**2
                  ALLOC
  4 .stack        00002004  20401664  0040e3a4  000208e4  2**0
                  ALLOC
  5 .heap         00000200  20403668  004103a8  000208e4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208e4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020912  2**0
                  CONTENTS, READONLY
  8 .debug_info   00024be5  00000000  00000000  0002096b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000502f  00000000  00000000  00045550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016a0d  00000000  00000000  0004a57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001468  00000000  00000000  00060f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015e8  00000000  00000000  000623f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000289f3  00000000  00000000  000639dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001aaf6  00000000  00000000  0008c3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00099fce  00000000  00000000  000a6ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000477c  00000000  00000000  00140e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20403668 	.word	0x20403668
  400004:	00404901 	.word	0x00404901
  400008:	004048fd 	.word	0x004048fd
  40000c:	004048fd 	.word	0x004048fd
  400010:	004048fd 	.word	0x004048fd
  400014:	004048fd 	.word	0x004048fd
  400018:	004048fd 	.word	0x004048fd
	...
  40002c:	004048fd 	.word	0x004048fd
  400030:	004048fd 	.word	0x004048fd
  400034:	00000000 	.word	0x00000000
  400038:	004048fd 	.word	0x004048fd
  40003c:	004048fd 	.word	0x004048fd
  400040:	004048fd 	.word	0x004048fd
  400044:	004048fd 	.word	0x004048fd
  400048:	004048fd 	.word	0x004048fd
  40004c:	004048fd 	.word	0x004048fd
  400050:	004048fd 	.word	0x004048fd
  400054:	004048fd 	.word	0x004048fd
  400058:	004048fd 	.word	0x004048fd
  40005c:	004048fd 	.word	0x004048fd
  400060:	004048fd 	.word	0x004048fd
  400064:	00000000 	.word	0x00000000
  400068:	004043ed 	.word	0x004043ed
  40006c:	00404401 	.word	0x00404401
  400070:	00404415 	.word	0x00404415
  400074:	004048fd 	.word	0x004048fd
  400078:	004048fd 	.word	0x004048fd
  40007c:	004048fd 	.word	0x004048fd
  400080:	00404429 	.word	0x00404429
  400084:	0040443d 	.word	0x0040443d
  400088:	004048fd 	.word	0x004048fd
  40008c:	004048fd 	.word	0x004048fd
  400090:	004048fd 	.word	0x004048fd
  400094:	004048fd 	.word	0x004048fd
  400098:	004048fd 	.word	0x004048fd
  40009c:	004048fd 	.word	0x004048fd
  4000a0:	004048fd 	.word	0x004048fd
  4000a4:	004048fd 	.word	0x004048fd
  4000a8:	004048fd 	.word	0x004048fd
  4000ac:	004048fd 	.word	0x004048fd
  4000b0:	004048fd 	.word	0x004048fd
  4000b4:	004048fd 	.word	0x004048fd
  4000b8:	004048fd 	.word	0x004048fd
  4000bc:	004048fd 	.word	0x004048fd
  4000c0:	004048fd 	.word	0x004048fd
  4000c4:	004048fd 	.word	0x004048fd
  4000c8:	004048fd 	.word	0x004048fd
  4000cc:	004048fd 	.word	0x004048fd
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004048fd 	.word	0x004048fd
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004048fd 	.word	0x004048fd
  4000e0:	004048fd 	.word	0x004048fd
  4000e4:	004048fd 	.word	0x004048fd
  4000e8:	004048fd 	.word	0x004048fd
  4000ec:	004048fd 	.word	0x004048fd
  4000f0:	004048fd 	.word	0x004048fd
  4000f4:	004048fd 	.word	0x004048fd
  4000f8:	004048fd 	.word	0x004048fd
  4000fc:	004048fd 	.word	0x004048fd
  400100:	004048fd 	.word	0x004048fd
  400104:	004048fd 	.word	0x004048fd
  400108:	004048fd 	.word	0x004048fd
  40010c:	004048fd 	.word	0x004048fd
  400110:	004048fd 	.word	0x004048fd
	...
  400120:	004048fd 	.word	0x004048fd
  400124:	004048fd 	.word	0x004048fd
  400128:	004048fd 	.word	0x004048fd
  40012c:	004048fd 	.word	0x004048fd
  400130:	004048fd 	.word	0x004048fd
  400134:	00000000 	.word	0x00000000
  400138:	004048fd 	.word	0x004048fd
  40013c:	004048fd 	.word	0x004048fd

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008e4 	.word	0x204008e4
  40015c:	00000000 	.word	0x00000000
  400160:	0040cd40 	.word	0x0040cd40

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008e8 	.word	0x204008e8
  400190:	0040cd40 	.word	0x0040cd40
  400194:	0040cd40 	.word	0x0040cd40
  400198:	00000000 	.word	0x00000000

0040019c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  40019c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40019e:	4b07      	ldr	r3, [pc, #28]	; (4001bc <sd_mmc_configure_slot+0x20>)
  4001a0:	6819      	ldr	r1, [r3, #0]
  4001a2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001a6:	3300      	adds	r3, #0
  4001a8:	bf18      	it	ne
  4001aa:	2301      	movne	r3, #1
  4001ac:	7c4a      	ldrb	r2, [r1, #17]
  4001ae:	6809      	ldr	r1, [r1, #0]
  4001b0:	4803      	ldr	r0, [pc, #12]	; (4001c0 <sd_mmc_configure_slot+0x24>)
  4001b2:	7800      	ldrb	r0, [r0, #0]
  4001b4:	4c03      	ldr	r4, [pc, #12]	; (4001c4 <sd_mmc_configure_slot+0x28>)
  4001b6:	47a0      	blx	r4
  4001b8:	bd10      	pop	{r4, pc}
  4001ba:	bf00      	nop
  4001bc:	20400904 	.word	0x20400904
  4001c0:	20400908 	.word	0x20400908
  4001c4:	00400d81 	.word	0x00400d81

004001c8 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  4001c8:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d154      	bne.n	400278 <sd_mmc_select_slot+0xb0>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001ce:	4b33      	ldr	r3, [pc, #204]	; (40029c <sd_mmc_select_slot+0xd4>)
  4001d0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001d2:	4b33      	ldr	r3, [pc, #204]	; (4002a0 <sd_mmc_select_slot+0xd8>)
  4001d4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001d8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  4001dc:	f002 021f 	and.w	r2, r2, #31
  4001e0:	2301      	movs	r3, #1
  4001e2:	fa03 f202 	lsl.w	r2, r3, r2
  4001e6:	420a      	tst	r2, r1
  4001e8:	d00e      	beq.n	400208 <sd_mmc_select_slot+0x40>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001ea:	4b2c      	ldr	r3, [pc, #176]	; (40029c <sd_mmc_select_slot+0xd4>)
  4001ec:	7b9b      	ldrb	r3, [r3, #14]
  4001ee:	2b01      	cmp	r3, #1
  4001f0:	d105      	bne.n	4001fe <sd_mmc_select_slot+0x36>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
  4001f2:	4b2c      	ldr	r3, [pc, #176]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  4001f4:	781b      	ldrb	r3, [r3, #0]
  4001f6:	b113      	cbz	r3, 4001fe <sd_mmc_select_slot+0x36>
		SysTick->CTRL = 0;
  4001f8:	2200      	movs	r2, #0
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  4001fc:	601a      	str	r2, [r3, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4001fe:	2204      	movs	r2, #4
  400200:	4b26      	ldr	r3, [pc, #152]	; (40029c <sd_mmc_select_slot+0xd4>)
  400202:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400204:	2002      	movs	r0, #2
  400206:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  400208:	4b24      	ldr	r3, [pc, #144]	; (40029c <sd_mmc_select_slot+0xd4>)
  40020a:	7b9b      	ldrb	r3, [r3, #14]
  40020c:	2b04      	cmp	r3, #4
  40020e:	d115      	bne.n	40023c <sd_mmc_select_slot+0x74>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400210:	2201      	movs	r2, #1
  400212:	4b22      	ldr	r3, [pc, #136]	; (40029c <sd_mmc_select_slot+0xd4>)
  400214:	739a      	strb	r2, [r3, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
  400216:	4b24      	ldr	r3, [pc, #144]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400218:	681b      	ldr	r3, [r3, #0]
  40021a:	b93b      	cbnz	r3, 40022c <sd_mmc_select_slot+0x64>
		sd_mmc_sam_systick_used = true;
  40021c:	4b21      	ldr	r3, [pc, #132]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  40021e:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400220:	4b21      	ldr	r3, [pc, #132]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400222:	4922      	ldr	r1, [pc, #136]	; (4002ac <sd_mmc_select_slot+0xe4>)
  400224:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400226:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400228:	2002      	movs	r0, #2
  40022a:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
  40022c:	2200      	movs	r2, #0
  40022e:	4b1d      	ldr	r3, [pc, #116]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  400230:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400232:	481f      	ldr	r0, [pc, #124]	; (4002b0 <sd_mmc_select_slot+0xe8>)
  400234:	4b1f      	ldr	r3, [pc, #124]	; (4002b4 <sd_mmc_select_slot+0xec>)
  400236:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400238:	2002      	movs	r0, #2
  40023a:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  40023c:	2b01      	cmp	r3, #1
  40023e:	d10b      	bne.n	400258 <sd_mmc_select_slot+0x90>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
  400240:	4b18      	ldr	r3, [pc, #96]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  400242:	781b      	ldrb	r3, [r3, #0]
  400244:	b1f3      	cbz	r3, 400284 <sd_mmc_select_slot+0xbc>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400246:	4b18      	ldr	r3, [pc, #96]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400248:	681b      	ldr	r3, [r3, #0]
  40024a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40024e:	d015      	beq.n	40027c <sd_mmc_select_slot+0xb4>
		SysTick->CTRL = 0;
  400250:	2200      	movs	r2, #0
  400252:	4b15      	ldr	r3, [pc, #84]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400254:	601a      	str	r2, [r3, #0]
  400256:	e015      	b.n	400284 <sd_mmc_select_slot+0xbc>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400258:	2b03      	cmp	r3, #3
  40025a:	d011      	beq.n	400280 <sd_mmc_select_slot+0xb8>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  40025c:	2200      	movs	r2, #0
  40025e:	4b16      	ldr	r3, [pc, #88]	; (4002b8 <sd_mmc_select_slot+0xf0>)
  400260:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  400262:	4c0e      	ldr	r4, [pc, #56]	; (40029c <sd_mmc_select_slot+0xd4>)
  400264:	4b15      	ldr	r3, [pc, #84]	; (4002bc <sd_mmc_select_slot+0xf4>)
  400266:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400268:	4b15      	ldr	r3, [pc, #84]	; (4002c0 <sd_mmc_select_slot+0xf8>)
  40026a:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  40026c:	7ba0      	ldrb	r0, [r4, #14]
  40026e:	2802      	cmp	r0, #2
  400270:	bf14      	ite	ne
  400272:	2000      	movne	r0, #0
  400274:	2001      	moveq	r0, #1
  400276:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
  400278:	2004      	movs	r0, #4
  40027a:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  40027c:	2002      	movs	r0, #2
  40027e:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
  400280:	2003      	movs	r0, #3
  400282:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <sd_mmc_select_slot+0xd4>)
  400286:	2202      	movs	r2, #2
  400288:	739a      	strb	r2, [r3, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40028a:	4a0e      	ldr	r2, [pc, #56]	; (4002c4 <sd_mmc_select_slot+0xfc>)
  40028c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40028e:	2201      	movs	r2, #1
  400290:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400292:	2200      	movs	r2, #0
  400294:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  400298:	e7e0      	b.n	40025c <sd_mmc_select_slot+0x94>
  40029a:	bf00      	nop
  40029c:	2040000c 	.word	0x2040000c
  4002a0:	00200707 	.word	0x00200707
  4002a4:	20400900 	.word	0x20400900
  4002a8:	e000e010 	.word	0xe000e010
  4002ac:	023c3460 	.word	0x023c3460
  4002b0:	0303af6b 	.word	0x0303af6b
  4002b4:	20400001 	.word	0x20400001
  4002b8:	20400908 	.word	0x20400908
  4002bc:	20400904 	.word	0x20400904
  4002c0:	0040019d 	.word	0x0040019d
  4002c4:	00061a80 	.word	0x00061a80

004002c8 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
  4002c8:	b538      	push	{r3, r4, r5, lr}
  4002ca:	9c04      	ldr	r4, [sp, #16]
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002cc:	0252      	lsls	r2, r2, #9
  4002ce:	ea42 63c3 	orr.w	r3, r2, r3, lsl #27
  4002d2:	ea43 7101 	orr.w	r1, r3, r1, lsl #28
  4002d6:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
  4002da:	7821      	ldrb	r1, [r4, #0]
  4002dc:	4301      	orrs	r1, r0
  4002de:	f241 3034 	movw	r0, #4916	; 0x1334
  4002e2:	4b04      	ldr	r3, [pc, #16]	; (4002f4 <sdio_cmd52+0x2c>)
  4002e4:	4798      	blx	r3
  4002e6:	4605      	mov	r5, r0
  4002e8:	b110      	cbz	r0, 4002f0 <sdio_cmd52+0x28>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
  4002ea:	4b03      	ldr	r3, [pc, #12]	; (4002f8 <sdio_cmd52+0x30>)
  4002ec:	4798      	blx	r3
  4002ee:	7020      	strb	r0, [r4, #0]
	return true;
}
  4002f0:	4628      	mov	r0, r5
  4002f2:	bd38      	pop	{r3, r4, r5, pc}
  4002f4:	00400e4d 	.word	0x00400e4d
  4002f8:	00400e71 	.word	0x00400e71

004002fc <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  4002fc:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  4002fe:	4b08      	ldr	r3, [pc, #32]	; (400320 <sd_mmc_cmd9_mci+0x24>)
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	8999      	ldrh	r1, [r3, #12]
  400304:	0409      	lsls	r1, r1, #16
  400306:	f641 3009 	movw	r0, #6921	; 0x1b09
  40030a:	4b06      	ldr	r3, [pc, #24]	; (400324 <sd_mmc_cmd9_mci+0x28>)
  40030c:	4798      	blx	r3
  40030e:	4604      	mov	r4, r0
  400310:	b120      	cbz	r0, 40031c <sd_mmc_cmd9_mci+0x20>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
  400312:	4b03      	ldr	r3, [pc, #12]	; (400320 <sd_mmc_cmd9_mci+0x24>)
  400314:	6818      	ldr	r0, [r3, #0]
  400316:	3012      	adds	r0, #18
  400318:	4b03      	ldr	r3, [pc, #12]	; (400328 <sd_mmc_cmd9_mci+0x2c>)
  40031a:	4798      	blx	r3
	return true;
}
  40031c:	4620      	mov	r0, r4
  40031e:	bd10      	pop	{r4, pc}
  400320:	20400904 	.word	0x20400904
  400324:	00400e4d 	.word	0x00400e4d
  400328:	00400e79 	.word	0x00400e79

0040032c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  40032c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40032e:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_deselect_slot+0x10>)
  400330:	781b      	ldrb	r3, [r3, #0]
  400332:	b913      	cbnz	r3, 40033a <sd_mmc_deselect_slot+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
  400334:	2000      	movs	r0, #0
  400336:	4b02      	ldr	r3, [pc, #8]	; (400340 <sd_mmc_deselect_slot+0x14>)
  400338:	4798      	blx	r3
  40033a:	bd08      	pop	{r3, pc}
  40033c:	20400908 	.word	0x20400908
  400340:	00400e25 	.word	0x00400e25

00400344 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  400344:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  400346:	2010      	movs	r0, #16
  400348:	4b05      	ldr	r3, [pc, #20]	; (400360 <sd_mmc_init+0x1c>)
  40034a:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40034c:	2204      	movs	r2, #4
  40034e:	4b05      	ldr	r3, [pc, #20]	; (400364 <sd_mmc_init+0x20>)
  400350:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400352:	22ff      	movs	r2, #255	; 0xff
  400354:	4b04      	ldr	r3, [pc, #16]	; (400368 <sd_mmc_init+0x24>)
  400356:	701a      	strb	r2, [r3, #0]
	driver_init();
  400358:	4b04      	ldr	r3, [pc, #16]	; (40036c <sd_mmc_init+0x28>)
  40035a:	4798      	blx	r3
  40035c:	bd08      	pop	{r3, pc}
  40035e:	bf00      	nop
  400360:	004045fd 	.word	0x004045fd
  400364:	2040000c 	.word	0x2040000c
  400368:	20400908 	.word	0x20400908
  40036c:	00400d45 	.word	0x00400d45

00400370 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400374:	b094      	sub	sp, #80	; 0x50
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400376:	4ba8      	ldr	r3, [pc, #672]	; (400618 <sd_mmc_check+0x2a8>)
  400378:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  40037a:	2801      	cmp	r0, #1
  40037c:	d005      	beq.n	40038a <sd_mmc_check+0x1a>
  40037e:	4604      	mov	r4, r0
		sd_mmc_deselect_slot();
  400380:	4ba6      	ldr	r3, [pc, #664]	; (40061c <sd_mmc_check+0x2ac>)
  400382:	4798      	blx	r3
		return sd_mmc_err;
  400384:	4620      	mov	r0, r4
  400386:	f000 bc14 	b.w	400bb2 <sd_mmc_check+0x842>
 */
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;
#ifdef SDIO_SUPPORT_ENABLE
	uint8_t data = 0x08;
  40038a:	ad14      	add	r5, sp, #80	; 0x50
  40038c:	2308      	movs	r3, #8
  40038e:	f805 3d45 	strb.w	r3, [r5, #-69]!
#endif

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  400392:	4ba3      	ldr	r3, [pc, #652]	; (400620 <sd_mmc_check+0x2b0>)
  400394:	681b      	ldr	r3, [r3, #0]
  400396:	2601      	movs	r6, #1
  400398:	73de      	strb	r6, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  40039a:	2400      	movs	r4, #0
  40039c:	741c      	strb	r4, [r3, #16]
	sd_mmc_card->rca = 0;
  40039e:	819c      	strh	r4, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  4003a0:	4ba0      	ldr	r3, [pc, #640]	; (400624 <sd_mmc_check+0x2b4>)
  4003a2:	4798      	blx	r3

#ifdef SDIO_SUPPORT_ENABLE
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003a4:	9500      	str	r5, [sp, #0]
  4003a6:	4623      	mov	r3, r4
  4003a8:	2206      	movs	r2, #6
  4003aa:	4621      	mov	r1, r4
  4003ac:	4630      	mov	r0, r6
  4003ae:	4d9e      	ldr	r5, [pc, #632]	; (400628 <sd_mmc_check+0x2b8>)
  4003b0:	47a8      	blx	r5
#endif

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003b2:	4621      	mov	r1, r4
  4003b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003b8:	4b9c      	ldr	r3, [pc, #624]	; (40062c <sd_mmc_check+0x2bc>)
  4003ba:	4798      	blx	r3
  4003bc:	2800      	cmp	r0, #0
  4003be:	f000 83ab 	beq.w	400b18 <sd_mmc_check+0x7a8>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003c2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003c6:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ca:	4b98      	ldr	r3, [pc, #608]	; (40062c <sd_mmc_check+0x2bc>)
  4003cc:	4798      	blx	r3
  4003ce:	2800      	cmp	r0, #0
  4003d0:	f000 83aa 	beq.w	400b28 <sd_mmc_check+0x7b8>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
  4003d4:	4b96      	ldr	r3, [pc, #600]	; (400630 <sd_mmc_check+0x2c0>)
  4003d6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  4003d8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4003dc:	f000 83a7 	beq.w	400b2e <sd_mmc_check+0x7be>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  4003e0:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4003e4:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  4003e8:	f040 8396 	bne.w	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  4003ec:	46b0      	mov	r8, r6
  4003ee:	e3a0      	b.n	400b32 <sd_mmc_check+0x7c2>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
  4003f0:	4b8f      	ldr	r3, [pc, #572]	; (400630 <sd_mmc_check+0x2c0>)
  4003f2:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  4003f4:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  4003f8:	f000 83a3 	beq.w	400b42 <sd_mmc_check+0x7d2>
  4003fc:	f241 3489 	movw	r4, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400400:	f244 5605 	movw	r6, #17669	; 0x4505
  400404:	4d89      	ldr	r5, [pc, #548]	; (40062c <sd_mmc_check+0x2bc>)
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400406:	4f8a      	ldr	r7, [pc, #552]	; (400630 <sd_mmc_check+0x2c0>)
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400408:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  40040c:	4630      	mov	r0, r6
  40040e:	47a8      	blx	r5
  400410:	2800      	cmp	r0, #0
  400412:	f000 8381 	beq.w	400b18 <sd_mmc_check+0x7a8>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400416:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400418:	2800      	cmp	r0, #0
  40041a:	db02      	blt.n	400422 <sd_mmc_check+0xb2>
			break;
		}
		if (cmd5_retry-- == 0) {
  40041c:	3c01      	subs	r4, #1
  40041e:	d1f3      	bne.n	400408 <sd_mmc_check+0x98>
  400420:	e37a      	b.n	400b18 <sd_mmc_check+0x7a8>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
  400422:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400426:	d004      	beq.n	400432 <sd_mmc_check+0xc2>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  400428:	4b7d      	ldr	r3, [pc, #500]	; (400620 <sd_mmc_check+0x2b0>)
  40042a:	681b      	ldr	r3, [r3, #0]
  40042c:	2205      	movs	r2, #5
  40042e:	73da      	strb	r2, [r3, #15]
  400430:	e38e      	b.n	400b50 <sd_mmc_check+0x7e0>
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400432:	4b7b      	ldr	r3, [pc, #492]	; (400620 <sd_mmc_check+0x2b0>)
  400434:	681b      	ldr	r3, [r3, #0]
  400436:	2204      	movs	r2, #4
  400438:	73da      	strb	r2, [r3, #15]
  40043a:	e161      	b.n	400700 <sd_mmc_check+0x390>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40043c:	4641      	mov	r1, r8
  40043e:	f241 1037 	movw	r0, #4407	; 0x1137
  400442:	47a8      	blx	r5
  400444:	2800      	cmp	r0, #0
  400446:	f000 8390 	beq.w	400b6a <sd_mmc_check+0x7fa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  40044a:	4631      	mov	r1, r6
  40044c:	f244 5029 	movw	r0, #17705	; 0x4529
  400450:	47a8      	blx	r5
  400452:	2800      	cmp	r0, #0
  400454:	f000 8389 	beq.w	400b6a <sd_mmc_check+0x7fa>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400458:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  40045a:	2800      	cmp	r0, #0
  40045c:	da0a      	bge.n	400474 <sd_mmc_check+0x104>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  40045e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400462:	f000 838e 	beq.w	400b82 <sd_mmc_check+0x812>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400466:	4b6e      	ldr	r3, [pc, #440]	; (400620 <sd_mmc_check+0x2b0>)
  400468:	681a      	ldr	r2, [r3, #0]
  40046a:	7bd3      	ldrb	r3, [r2, #15]
  40046c:	f043 0308 	orr.w	r3, r3, #8
  400470:	73d3      	strb	r3, [r2, #15]
  400472:	e386      	b.n	400b82 <sd_mmc_check+0x812>
			}
			break;
		}
		if (retry-- == 0) {
  400474:	3c01      	subs	r4, #1
  400476:	d1e1      	bne.n	40043c <sd_mmc_check+0xcc>
  400478:	e377      	b.n	400b6a <sd_mmc_check+0x7fa>
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40047a:	f241 0469 	movw	r4, #4201	; 0x1069
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  40047e:	4e6d      	ldr	r6, [pc, #436]	; (400634 <sd_mmc_check+0x2c4>)
  400480:	4d6a      	ldr	r5, [pc, #424]	; (40062c <sd_mmc_check+0x2bc>)
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400482:	4f6b      	ldr	r7, [pc, #428]	; (400630 <sd_mmc_check+0x2c0>)
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400484:	4631      	mov	r1, r6
  400486:	f244 5001 	movw	r0, #17665	; 0x4501
  40048a:	47a8      	blx	r5
  40048c:	2800      	cmp	r0, #0
  40048e:	f000 8343 	beq.w	400b18 <sd_mmc_check+0x7a8>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400492:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  400494:	2800      	cmp	r0, #0
  400496:	da0c      	bge.n	4004b2 <sd_mmc_check+0x142>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  400498:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40049c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4004a0:	f040 8377 	bne.w	400b92 <sd_mmc_check+0x822>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  4004a4:	4b5e      	ldr	r3, [pc, #376]	; (400620 <sd_mmc_check+0x2b0>)
  4004a6:	681a      	ldr	r2, [r3, #0]
  4004a8:	7bd3      	ldrb	r3, [r2, #15]
  4004aa:	f043 0308 	orr.w	r3, r3, #8
  4004ae:	73d3      	strb	r3, [r2, #15]
  4004b0:	e36f      	b.n	400b92 <sd_mmc_check+0x822>
			}
			break;
		}
		if (retry-- == 0) {
  4004b2:	3c01      	subs	r4, #1
  4004b4:	d1e6      	bne.n	400484 <sd_mmc_check+0x114>
  4004b6:	e32f      	b.n	400b18 <sd_mmc_check+0x7a8>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  4004b8:	4b59      	ldr	r3, [pc, #356]	; (400620 <sd_mmc_check+0x2b0>)
  4004ba:	681b      	ldr	r3, [r3, #0]
  4004bc:	2201      	movs	r2, #1
  4004be:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4004c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004c4:	f241 1003 	movw	r0, #4355	; 0x1103
  4004c8:	4b58      	ldr	r3, [pc, #352]	; (40062c <sd_mmc_check+0x2bc>)
  4004ca:	4798      	blx	r3
  4004cc:	2800      	cmp	r0, #0
  4004ce:	f000 8323 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  4004d2:	4b59      	ldr	r3, [pc, #356]	; (400638 <sd_mmc_check+0x2c8>)
  4004d4:	4798      	blx	r3
  4004d6:	2800      	cmp	r0, #0
  4004d8:	f000 831e 	beq.w	400b18 <sd_mmc_check+0x7a8>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4004dc:	4b50      	ldr	r3, [pc, #320]	; (400620 <sd_mmc_check+0x2b0>)
  4004de:	6819      	ldr	r1, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004e0:	7c8b      	ldrb	r3, [r1, #18]
  4004e2:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4004e6:	3b01      	subs	r3, #1
  4004e8:	2b03      	cmp	r3, #3
  4004ea:	d803      	bhi.n	4004f4 <sd_mmc_check+0x184>
  4004ec:	e8df f003 	tbb	[pc, r3]
  4004f0:	0e0b0805 	.word	0x0e0b0805
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4004f4:	2312      	movs	r3, #18
  4004f6:	740b      	strb	r3, [r1, #16]
  4004f8:	e00a      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4004fa:	2314      	movs	r3, #20
  4004fc:	740b      	strb	r3, [r1, #16]
  4004fe:	e007      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400500:	2322      	movs	r3, #34	; 0x22
  400502:	740b      	strb	r3, [r1, #16]
  400504:	e004      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  400506:	2330      	movs	r3, #48	; 0x30
  400508:	740b      	strb	r3, [r1, #16]
  40050a:	e001      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  40050c:	2340      	movs	r3, #64	; 0x40
  40050e:	740b      	strb	r3, [r1, #16]
  400510:	7d4b      	ldrb	r3, [r1, #21]
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400512:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400516:	f003 0307 	and.w	r3, r3, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40051a:	4a48      	ldr	r2, [pc, #288]	; (40063c <sd_mmc_check+0x2cc>)
  40051c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400524:	fb03 f302 	mul.w	r3, r3, r2
  400528:	4a45      	ldr	r2, [pc, #276]	; (400640 <sd_mmc_check+0x2d0>)
  40052a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  40052e:	fb03 f302 	mul.w	r3, r3, r2
  400532:	600b      	str	r3, [r1, #0]
  400534:	7e88      	ldrb	r0, [r1, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400536:	7e4b      	ldrb	r3, [r1, #25]
  400538:	7e0a      	ldrb	r2, [r1, #24]
  40053a:	0292      	lsls	r2, r2, #10
  40053c:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  400540:	ea43 13a0 	orr.w	r3, r3, r0, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  400544:	f3c3 030b 	ubfx	r3, r3, #0, #12
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400548:	f640 72ff 	movw	r2, #4095	; 0xfff
  40054c:	4293      	cmp	r3, r2
  40054e:	d00f      	beq.n	400570 <sd_mmc_check+0x200>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400550:	7f08      	ldrb	r0, [r1, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400552:	7eca      	ldrb	r2, [r1, #27]
  400554:	0052      	lsls	r2, r2, #1
  400556:	ea42 12e0 	orr.w	r2, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  40055a:	3301      	adds	r3, #1
  40055c:	f002 0207 	and.w	r2, r2, #7
  400560:	3202      	adds	r2, #2
  400562:	4093      	lsls	r3, r2
  400564:	7dca      	ldrb	r2, [r1, #23]
  400566:	f002 020f 	and.w	r2, r2, #15
  40056a:	4093      	lsls	r3, r2
  40056c:	0a9b      	lsrs	r3, r3, #10
  40056e:	604b      	str	r3, [r1, #4]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400570:	8989      	ldrh	r1, [r1, #12]
  400572:	0409      	lsls	r1, r1, #16
  400574:	f243 1007 	movw	r0, #12551	; 0x3107
  400578:	4b2c      	ldr	r3, [pc, #176]	; (40062c <sd_mmc_check+0x2bc>)
  40057a:	4798      	blx	r3
  40057c:	2800      	cmp	r0, #0
  40057e:	f000 82cb 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400582:	4b27      	ldr	r3, [pc, #156]	; (400620 <sd_mmc_check+0x2b0>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	7c1b      	ldrb	r3, [r3, #16]
  400588:	2b3f      	cmp	r3, #63	; 0x3f
  40058a:	f240 809d 	bls.w	4006c8 <sd_mmc_check+0x358>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  40058e:	2100      	movs	r1, #0
  400590:	9100      	str	r1, [sp, #0]
  400592:	2301      	movs	r3, #1
  400594:	f44f 7200 	mov.w	r2, #512	; 0x200
  400598:	482a      	ldr	r0, [pc, #168]	; (400644 <sd_mmc_check+0x2d4>)
  40059a:	4c2b      	ldr	r4, [pc, #172]	; (400648 <sd_mmc_check+0x2d8>)
  40059c:	47a0      	blx	r4
  40059e:	2800      	cmp	r0, #0
  4005a0:	f000 82ba 	beq.w	400b18 <sd_mmc_check+0x7a8>
  4005a4:	2400      	movs	r4, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
  4005a6:	4d29      	ldr	r5, [pc, #164]	; (40064c <sd_mmc_check+0x2dc>)
  4005a8:	a803      	add	r0, sp, #12
  4005aa:	47a8      	blx	r5
  4005ac:	2800      	cmp	r0, #0
  4005ae:	f000 82b3 	beq.w	400b18 <sd_mmc_check+0x7a8>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4005b2:	3401      	adds	r4, #1
  4005b4:	b2a4      	uxth	r4, r4
  4005b6:	2c32      	cmp	r4, #50	; 0x32
  4005b8:	d1f6      	bne.n	4005a8 <sd_mmc_check+0x238>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  4005ba:	9b03      	ldr	r3, [sp, #12]
  4005bc:	f003 0302 	and.w	r3, r3, #2
  4005c0:	b2dd      	uxtb	r5, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4005c2:	4b17      	ldr	r3, [pc, #92]	; (400620 <sd_mmc_check+0x2b0>)
  4005c4:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005c6:	7e91      	ldrb	r1, [r2, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005c8:	7e53      	ldrb	r3, [r2, #25]
  4005ca:	7e12      	ldrb	r2, [r2, #24]
  4005cc:	0292      	lsls	r2, r2, #10
  4005ce:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  4005d2:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
  4005d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005da:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005de:	4293      	cmp	r3, r2
  4005e0:	d10e      	bne.n	400600 <sd_mmc_check+0x290>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  4005e2:	4e1a      	ldr	r6, [pc, #104]	; (40064c <sd_mmc_check+0x2dc>)
  4005e4:	a804      	add	r0, sp, #16
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f000 8295 	beq.w	400b18 <sd_mmc_check+0x7a8>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4005ee:	3401      	adds	r4, #1
  4005f0:	b2a4      	uxth	r4, r4
  4005f2:	2c35      	cmp	r4, #53	; 0x35
  4005f4:	d9f6      	bls.n	4005e4 <sd_mmc_check+0x274>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  4005f6:	4b0a      	ldr	r3, [pc, #40]	; (400620 <sd_mmc_check+0x2b0>)
  4005f8:	681a      	ldr	r2, [r3, #0]
  4005fa:	9b04      	ldr	r3, [sp, #16]
  4005fc:	085b      	lsrs	r3, r3, #1
  4005fe:	6053      	str	r3, [r2, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
  400600:	4e12      	ldr	r6, [pc, #72]	; (40064c <sd_mmc_check+0x2dc>)
  400602:	e006      	b.n	400612 <sd_mmc_check+0x2a2>
  400604:	a804      	add	r0, sp, #16
  400606:	47b0      	blx	r6
  400608:	2800      	cmp	r0, #0
  40060a:	f000 8285 	beq.w	400b18 <sd_mmc_check+0x7a8>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40060e:	3401      	adds	r4, #1
  400610:	b2a4      	uxth	r4, r4
  400612:	2c7f      	cmp	r4, #127	; 0x7f
  400614:	d9f6      	bls.n	400604 <sd_mmc_check+0x294>
  400616:	e2c4      	b.n	400ba2 <sd_mmc_check+0x832>
  400618:	004001c9 	.word	0x004001c9
  40061c:	0040032d 	.word	0x0040032d
  400620:	20400904 	.word	0x20400904
  400624:	00400e29 	.word	0x00400e29
  400628:	004002c9 	.word	0x004002c9
  40062c:	00400e4d 	.word	0x00400e4d
  400630:	00400e71 	.word	0x00400e71
  400634:	401f8000 	.word	0x401f8000
  400638:	004002fd 	.word	0x004002fd
  40063c:	0040b90c 	.word	0x0040b90c
  400640:	0040b928 	.word	0x0040b928
  400644:	00081108 	.word	0x00081108
  400648:	00400ea9 	.word	0x00400ea9
  40064c:	00400f71 	.word	0x00400f71
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  400650:	4ba4      	ldr	r3, [pc, #656]	; (4008e4 <sd_mmc_check+0x574>)
  400652:	7818      	ldrb	r0, [r3, #0]
  400654:	4ba4      	ldr	r3, [pc, #656]	; (4008e8 <sd_mmc_check+0x578>)
  400656:	4798      	blx	r3
  400658:	4604      	mov	r4, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
  40065a:	2804      	cmp	r0, #4
  40065c:	d005      	beq.n	40066a <sd_mmc_check+0x2fa>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40065e:	49a3      	ldr	r1, [pc, #652]	; (4008ec <sd_mmc_check+0x57c>)
  400660:	4ba3      	ldr	r3, [pc, #652]	; (4008f0 <sd_mmc_check+0x580>)
  400662:	2808      	cmp	r0, #8
  400664:	bf08      	it	eq
  400666:	4619      	moveq	r1, r3
  400668:	e000      	b.n	40066c <sd_mmc_check+0x2fc>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40066a:	49a2      	ldr	r1, [pc, #648]	; (4008f4 <sd_mmc_check+0x584>)
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40066c:	f243 1006 	movw	r0, #12550	; 0x3106
  400670:	4ba1      	ldr	r3, [pc, #644]	; (4008f8 <sd_mmc_check+0x588>)
  400672:	4798      	blx	r3
  400674:	2800      	cmp	r0, #0
  400676:	f000 824f 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40067a:	4ba0      	ldr	r3, [pc, #640]	; (4008fc <sd_mmc_check+0x58c>)
  40067c:	4798      	blx	r3
  40067e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400682:	f040 8249 	bne.w	400b18 <sd_mmc_check+0x7a8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
  400686:	4b9e      	ldr	r3, [pc, #632]	; (400900 <sd_mmc_check+0x590>)
  400688:	681b      	ldr	r3, [r3, #0]
  40068a:	745c      	strb	r4, [r3, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  40068c:	4b9d      	ldr	r3, [pc, #628]	; (400904 <sd_mmc_check+0x594>)
  40068e:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400690:	4b9d      	ldr	r3, [pc, #628]	; (400908 <sd_mmc_check+0x598>)
  400692:	4798      	blx	r3
  400694:	b305      	cbz	r5, 4006d8 <sd_mmc_check+0x368>
  400696:	b1f8      	cbz	r0, 4006d8 <sd_mmc_check+0x368>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400698:	499c      	ldr	r1, [pc, #624]	; (40090c <sd_mmc_check+0x59c>)
  40069a:	f243 1006 	movw	r0, #12550	; 0x3106
  40069e:	4b96      	ldr	r3, [pc, #600]	; (4008f8 <sd_mmc_check+0x588>)
  4006a0:	4798      	blx	r3
  4006a2:	2800      	cmp	r0, #0
  4006a4:	f000 8238 	beq.w	400b18 <sd_mmc_check+0x7a8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4006a8:	4b94      	ldr	r3, [pc, #592]	; (4008fc <sd_mmc_check+0x58c>)
  4006aa:	4798      	blx	r3
  4006ac:	f010 0f80 	tst.w	r0, #128	; 0x80
  4006b0:	f040 8232 	bne.w	400b18 <sd_mmc_check+0x7a8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
  4006b4:	4b92      	ldr	r3, [pc, #584]	; (400900 <sd_mmc_check+0x590>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	2201      	movs	r2, #1
  4006ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  4006be:	4a94      	ldr	r2, [pc, #592]	; (400910 <sd_mmc_check+0x5a0>)
  4006c0:	601a      	str	r2, [r3, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  4006c2:	4b90      	ldr	r3, [pc, #576]	; (400904 <sd_mmc_check+0x594>)
  4006c4:	4798      	blx	r3
  4006c6:	e007      	b.n	4006d8 <sd_mmc_check+0x368>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  4006c8:	4b8e      	ldr	r3, [pc, #568]	; (400904 <sd_mmc_check+0x594>)
  4006ca:	4798      	blx	r3
  4006cc:	e004      	b.n	4006d8 <sd_mmc_check+0x368>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4006ce:	4639      	mov	r1, r7
  4006d0:	4630      	mov	r0, r6
  4006d2:	47a8      	blx	r5
  4006d4:	b138      	cbz	r0, 4006e6 <sd_mmc_check+0x376>
  4006d6:	e217      	b.n	400b08 <sd_mmc_check+0x798>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006d8:	240a      	movs	r4, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4006da:	f44f 7700 	mov.w	r7, #512	; 0x200
  4006de:	f241 1610 	movw	r6, #4368	; 0x1110
  4006e2:	4d85      	ldr	r5, [pc, #532]	; (4008f8 <sd_mmc_check+0x588>)
  4006e4:	e7f3      	b.n	4006ce <sd_mmc_check+0x35e>
  4006e6:	3c01      	subs	r4, #1
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  4006e8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4006ec:	d1ef      	bne.n	4006ce <sd_mmc_check+0x35e>
  4006ee:	e213      	b.n	400b18 <sd_mmc_check+0x7a8>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4006f0:	2100      	movs	r1, #0
  4006f2:	f645 3002 	movw	r0, #23298	; 0x5b02
  4006f6:	4b80      	ldr	r3, [pc, #512]	; (4008f8 <sd_mmc_check+0x588>)
  4006f8:	4798      	blx	r3
  4006fa:	2800      	cmp	r0, #0
  4006fc:	f000 820c 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400700:	2100      	movs	r1, #0
  400702:	f245 1003 	movw	r0, #20739	; 0x5103
  400706:	4b7c      	ldr	r3, [pc, #496]	; (4008f8 <sd_mmc_check+0x588>)
  400708:	4798      	blx	r3
  40070a:	2800      	cmp	r0, #0
  40070c:	f000 8204 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400710:	4c7b      	ldr	r4, [pc, #492]	; (400900 <sd_mmc_check+0x590>)
  400712:	6825      	ldr	r5, [r4, #0]
  400714:	4b79      	ldr	r3, [pc, #484]	; (4008fc <sd_mmc_check+0x58c>)
  400716:	4798      	blx	r3
  400718:	0c00      	lsrs	r0, r0, #16
  40071a:	81a8      	strh	r0, [r5, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40071c:	6823      	ldr	r3, [r4, #0]
  40071e:	7bdb      	ldrb	r3, [r3, #15]
  400720:	f013 0f01 	tst.w	r3, #1
  400724:	d041      	beq.n	4007aa <sd_mmc_check+0x43a>
		if (!sd_mmc_cmd9_mci()) {
  400726:	4b7b      	ldr	r3, [pc, #492]	; (400914 <sd_mmc_check+0x5a4>)
  400728:	4798      	blx	r3
  40072a:	2800      	cmp	r0, #0
  40072c:	f000 81f4 	beq.w	400b18 <sd_mmc_check+0x7a8>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400730:	6823      	ldr	r3, [r4, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400732:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400734:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400738:	f002 0207 	and.w	r2, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40073c:	4976      	ldr	r1, [pc, #472]	; (400918 <sd_mmc_check+0x5a8>)
  40073e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400746:	fb02 f201 	mul.w	r2, r2, r1
  40074a:	4974      	ldr	r1, [pc, #464]	; (40091c <sd_mmc_check+0x5ac>)
  40074c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400750:	fb02 f201 	mul.w	r2, r2, r1
  400754:	601a      	str	r2, [r3, #0]
  400756:	7c9a      	ldrb	r2, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400758:	0992      	lsrs	r2, r2, #6
  40075a:	d00c      	beq.n	400776 <sd_mmc_check+0x406>
  40075c:	7eda      	ldrb	r2, [r3, #27]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40075e:	7e98      	ldrb	r0, [r3, #26]
  400760:	7e59      	ldrb	r1, [r3, #25]
  400762:	0409      	lsls	r1, r1, #16
  400764:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  400768:	430a      	orrs	r2, r1
		sd_mmc_card->capacity =
  40076a:	f3c2 0215 	ubfx	r2, r2, #0, #22
  40076e:	3201      	adds	r2, #1
  400770:	0252      	lsls	r2, r2, #9
  400772:	605a      	str	r2, [r3, #4]
  400774:	e019      	b.n	4007aa <sd_mmc_check+0x43a>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400776:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400778:	7e5a      	ldrb	r2, [r3, #25]
  40077a:	7e19      	ldrb	r1, [r3, #24]
  40077c:	0289      	lsls	r1, r1, #10
  40077e:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
  400782:	ea42 12a0 	orr.w	r2, r2, r0, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400786:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400788:	7ed9      	ldrb	r1, [r3, #27]
  40078a:	0049      	lsls	r1, r1, #1
  40078c:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400790:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400794:	3201      	adds	r2, #1
  400796:	f001 0107 	and.w	r1, r1, #7
  40079a:	3102      	adds	r1, #2
  40079c:	408a      	lsls	r2, r1
  40079e:	7dd9      	ldrb	r1, [r3, #23]
  4007a0:	f001 010f 	and.w	r1, r1, #15
  4007a4:	408a      	lsls	r2, r1
  4007a6:	0a92      	lsrs	r2, r2, #10
  4007a8:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4007aa:	4b55      	ldr	r3, [pc, #340]	; (400900 <sd_mmc_check+0x590>)
  4007ac:	681b      	ldr	r3, [r3, #0]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4007ae:	8999      	ldrh	r1, [r3, #12]
  4007b0:	0409      	lsls	r1, r1, #16
  4007b2:	f243 1007 	movw	r0, #12551	; 0x3107
  4007b6:	4b50      	ldr	r3, [pc, #320]	; (4008f8 <sd_mmc_check+0x588>)
  4007b8:	4798      	blx	r3
  4007ba:	2800      	cmp	r0, #0
  4007bc:	f000 81ac 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4007c0:	4b4f      	ldr	r3, [pc, #316]	; (400900 <sd_mmc_check+0x590>)
  4007c2:	681b      	ldr	r3, [r3, #0]
  4007c4:	7bda      	ldrb	r2, [r3, #15]
  4007c6:	f012 0f01 	tst.w	r2, #1
  4007ca:	d040      	beq.n	40084e <sd_mmc_check+0x4de>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4007cc:	8999      	ldrh	r1, [r3, #12]
  4007ce:	0409      	lsls	r1, r1, #16
  4007d0:	f241 1037 	movw	r0, #4407	; 0x1137
  4007d4:	4b48      	ldr	r3, [pc, #288]	; (4008f8 <sd_mmc_check+0x588>)
  4007d6:	4798      	blx	r3
  4007d8:	2800      	cmp	r0, #0
  4007da:	f000 819d 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4007de:	2301      	movs	r3, #1
  4007e0:	9300      	str	r3, [sp, #0]
  4007e2:	2208      	movs	r2, #8
  4007e4:	2100      	movs	r1, #0
  4007e6:	484e      	ldr	r0, [pc, #312]	; (400920 <sd_mmc_check+0x5b0>)
  4007e8:	4c4e      	ldr	r4, [pc, #312]	; (400924 <sd_mmc_check+0x5b4>)
  4007ea:	47a0      	blx	r4
  4007ec:	2800      	cmp	r0, #0
  4007ee:	f000 8193 	beq.w	400b18 <sd_mmc_check+0x7a8>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
  4007f2:	2101      	movs	r1, #1
  4007f4:	a804      	add	r0, sp, #16
  4007f6:	4b4c      	ldr	r3, [pc, #304]	; (400928 <sd_mmc_check+0x5b8>)
  4007f8:	4798      	blx	r3
  4007fa:	2800      	cmp	r0, #0
  4007fc:	f000 818c 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400800:	4b4a      	ldr	r3, [pc, #296]	; (40092c <sd_mmc_check+0x5bc>)
  400802:	4798      	blx	r3
  400804:	2800      	cmp	r0, #0
  400806:	f000 8187 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  40080a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40080e:	f003 030f 	and.w	r3, r3, #15
  400812:	2b01      	cmp	r3, #1
  400814:	d008      	beq.n	400828 <sd_mmc_check+0x4b8>
  400816:	b113      	cbz	r3, 40081e <sd_mmc_check+0x4ae>
  400818:	2b02      	cmp	r3, #2
  40081a:	d00a      	beq.n	400832 <sd_mmc_check+0x4c2>
  40081c:	e013      	b.n	400846 <sd_mmc_check+0x4d6>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40081e:	4b38      	ldr	r3, [pc, #224]	; (400900 <sd_mmc_check+0x590>)
  400820:	681b      	ldr	r3, [r3, #0]
  400822:	2210      	movs	r2, #16
  400824:	741a      	strb	r2, [r3, #16]
  400826:	e012      	b.n	40084e <sd_mmc_check+0x4de>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400828:	4b35      	ldr	r3, [pc, #212]	; (400900 <sd_mmc_check+0x590>)
  40082a:	681b      	ldr	r3, [r3, #0]
  40082c:	221a      	movs	r2, #26
  40082e:	741a      	strb	r2, [r3, #16]
  400830:	e00d      	b.n	40084e <sd_mmc_check+0x4de>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400832:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400836:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400838:	4b31      	ldr	r3, [pc, #196]	; (400900 <sd_mmc_check+0x590>)
  40083a:	681b      	ldr	r3, [r3, #0]
  40083c:	bf14      	ite	ne
  40083e:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400840:	2220      	moveq	r2, #32
  400842:	741a      	strb	r2, [r3, #16]
  400844:	e003      	b.n	40084e <sd_mmc_check+0x4de>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400846:	4b2e      	ldr	r3, [pc, #184]	; (400900 <sd_mmc_check+0x590>)
  400848:	681b      	ldr	r3, [r3, #0]
  40084a:	2210      	movs	r2, #16
  40084c:	741a      	strb	r2, [r3, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
  40084e:	4b2c      	ldr	r3, [pc, #176]	; (400900 <sd_mmc_check+0x590>)
  400850:	681b      	ldr	r3, [r3, #0]
  400852:	7bdb      	ldrb	r3, [r3, #15]
  400854:	f013 0f04 	tst.w	r3, #4
  400858:	f000 8093 	beq.w	400982 <sd_mmc_check+0x612>
  40085c:	2409      	movs	r4, #9
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
	for(i = 0; i < 4; i++) {
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  40085e:	2600      	movs	r6, #0
  400860:	4d33      	ldr	r5, [pc, #204]	; (400930 <sd_mmc_check+0x5c0>)
  400862:	f1a4 0309 	sub.w	r3, r4, #9
  400866:	aa03      	add	r2, sp, #12
  400868:	4413      	add	r3, r2
  40086a:	9300      	str	r3, [sp, #0]
  40086c:	4633      	mov	r3, r6
  40086e:	4622      	mov	r2, r4
  400870:	4631      	mov	r1, r6
  400872:	4630      	mov	r0, r6
  400874:	47a8      	blx	r5
		addr_old++;
  400876:	3401      	adds	r4, #1
	uint8_t tplfe_max_tran_speed, i;
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
	for(i = 0; i < 4; i++) {
  400878:	2c0d      	cmp	r4, #13
  40087a:	d1f2      	bne.n	400862 <sd_mmc_check+0x4f2>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
		addr_old++;
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  40087c:	f89d 200d 	ldrb.w	r2, [sp, #13]
  400880:	f89d 300c 	ldrb.w	r3, [sp, #12]
  400884:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  400888:	f89d 800e 	ldrb.w	r8, [sp, #14]
  40088c:	eb03 4308 	add.w	r3, r3, r8, lsl #16
  400890:	f89d 800f 	ldrb.w	r8, [sp, #15]
  400894:	eb03 6808 	add.w	r8, r3, r8, lsl #24
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;
  400898:	4645      	mov	r5, r8

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40089a:	4f25      	ldr	r7, [pc, #148]	; (400930 <sd_mmc_check+0x5c0>)
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
		addr_old++;
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;
  40089c:	2400      	movs	r4, #0

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40089e:	4626      	mov	r6, r4
  4008a0:	ab04      	add	r3, sp, #16
  4008a2:	4423      	add	r3, r4
  4008a4:	9300      	str	r3, [sp, #0]
  4008a6:	4633      	mov	r3, r6
  4008a8:	192a      	adds	r2, r5, r4
  4008aa:	4631      	mov	r1, r6
  4008ac:	4630      	mov	r0, r6
  4008ae:	47b8      	blx	r7
  4008b0:	3401      	adds	r4, #1
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
  4008b2:	2c03      	cmp	r4, #3
  4008b4:	d1f4      	bne.n	4008a0 <sd_mmc_check+0x530>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
			addr_new++;
		}
		if (buf[0] == SDIO_CISTPL_END) {
  4008b6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008ba:	2bff      	cmp	r3, #255	; 0xff
  4008bc:	f000 812c 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false; /* Tuple error */
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4008c0:	2b22      	cmp	r3, #34	; 0x22
  4008c2:	d102      	bne.n	4008ca <sd_mmc_check+0x55a>
  4008c4:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4008c8:	b3a3      	cbz	r3, 400934 <sd_mmc_check+0x5c4>
			break; /* Fun0 tuple found */
		}
		if (buf[1] == 0) {
  4008ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4008ce:	2b00      	cmp	r3, #0
  4008d0:	f000 8122 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false; /* Tuple error */
		}
		/* Next address */
		addr_new += buf[1]-1;
  4008d4:	3302      	adds	r3, #2
  4008d6:	441d      	add	r5, r3
		if (addr_new > (addr_old + 256)) {
  4008d8:	f508 7380 	add.w	r3, r8, #256	; 0x100
  4008dc:	429d      	cmp	r5, r3
  4008de:	d9dd      	bls.n	40089c <sd_mmc_check+0x52c>
  4008e0:	e11a      	b.n	400b18 <sd_mmc_check+0x7a8>
  4008e2:	bf00      	nop
  4008e4:	20400908 	.word	0x20400908
  4008e8:	00400d71 	.word	0x00400d71
  4008ec:	01b70000 	.word	0x01b70000
  4008f0:	01b70200 	.word	0x01b70200
  4008f4:	01b70100 	.word	0x01b70100
  4008f8:	00400e4d 	.word	0x00400e4d
  4008fc:	00400e71 	.word	0x00400e71
  400900:	20400904 	.word	0x20400904
  400904:	0040019d 	.word	0x0040019d
  400908:	00400d7d 	.word	0x00400d7d
  40090c:	03b90100 	.word	0x03b90100
  400910:	03197500 	.word	0x03197500
  400914:	004002fd 	.word	0x004002fd
  400918:	0040b90c 	.word	0x0040b90c
  40091c:	0040b8cc 	.word	0x0040b8cc
  400920:	00081133 	.word	0x00081133
  400924:	00400ea9 	.word	0x00400ea9
  400928:	00400fe5 	.word	0x00400fe5
  40092c:	00401099 	.word	0x00401099
  400930:	004002c9 	.word	0x004002c9
  400934:	ac04      	add	r4, sp, #16
  400936:	f105 0806 	add.w	r8, r5, #6
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
	for(i = 0; i < 6; i++) {
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40093a:	2700      	movs	r7, #0
  40093c:	4e9e      	ldr	r6, [pc, #632]	; (400bb8 <sd_mmc_check+0x848>)
  40093e:	9400      	str	r4, [sp, #0]
  400940:	463b      	mov	r3, r7
  400942:	462a      	mov	r2, r5
  400944:	4639      	mov	r1, r7
  400946:	4638      	mov	r0, r7
  400948:	47b0      	blx	r6
		addr_new++;
  40094a:	3501      	adds	r5, #1
  40094c:	3401      	adds	r4, #1
		}
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
	for(i = 0; i < 6; i++) {
  40094e:	4545      	cmp	r5, r8
  400950:	d1f5      	bne.n	40093e <sd_mmc_check+0x5ce>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
		addr_new++;
	}

	tplfe_max_tran_speed = buf[5];
  400952:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400956:	2b32      	cmp	r3, #50	; 0x32
  400958:	bf28      	it	cs
  40095a:	2332      	movcs	r3, #50	; 0x32
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40095c:	4a97      	ldr	r2, [pc, #604]	; (400bbc <sd_mmc_check+0x84c>)
  40095e:	6812      	ldr	r2, [r2, #0]
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400960:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		 */
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400964:	f003 0307 	and.w	r3, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  400968:	4995      	ldr	r1, [pc, #596]	; (400bc0 <sd_mmc_check+0x850>)
  40096a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400972:	fb03 f301 	mul.w	r3, r3, r1
  400976:	4993      	ldr	r1, [pc, #588]	; (400bc4 <sd_mmc_check+0x854>)
  400978:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40097c:	fb03 f301 	mul.w	r3, r3, r1
  400980:	6013      	str	r3, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400982:	4b91      	ldr	r3, [pc, #580]	; (400bc8 <sd_mmc_check+0x858>)
  400984:	7818      	ldrb	r0, [r3, #0]
  400986:	4b91      	ldr	r3, [pc, #580]	; (400bcc <sd_mmc_check+0x85c>)
  400988:	4798      	blx	r3
  40098a:	2803      	cmp	r0, #3
  40098c:	d942      	bls.n	400a14 <sd_mmc_check+0x6a4>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
  40098e:	4b8b      	ldr	r3, [pc, #556]	; (400bbc <sd_mmc_check+0x84c>)
  400990:	681b      	ldr	r3, [r3, #0]
  400992:	7bdb      	ldrb	r3, [r3, #15]
  400994:	f013 0f04 	tst.w	r3, #4
  400998:	d01f      	beq.n	4009da <sd_mmc_check+0x66a>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  40099a:	ab04      	add	r3, sp, #16
  40099c:	9300      	str	r3, [sp, #0]
  40099e:	2300      	movs	r3, #0
  4009a0:	2208      	movs	r2, #8
  4009a2:	4619      	mov	r1, r3
  4009a4:	4618      	mov	r0, r3
  4009a6:	4c84      	ldr	r4, [pc, #528]	; (400bb8 <sd_mmc_check+0x848>)
  4009a8:	47a0      	blx	r4
  4009aa:	2800      	cmp	r0, #0
  4009ac:	f000 80b4 	beq.w	400b18 <sd_mmc_check+0x7a8>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  4009b0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  4009b4:	2b00      	cmp	r3, #0
  4009b6:	da10      	bge.n	4009da <sd_mmc_check+0x66a>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
  4009b8:	ab14      	add	r3, sp, #80	; 0x50
  4009ba:	2202      	movs	r2, #2
  4009bc:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  4009c0:	9300      	str	r3, [sp, #0]
  4009c2:	2301      	movs	r3, #1
  4009c4:	2207      	movs	r2, #7
  4009c6:	2100      	movs	r1, #0
  4009c8:	4618      	mov	r0, r3
  4009ca:	47a0      	blx	r4
  4009cc:	2800      	cmp	r0, #0
  4009ce:	f000 80a3 	beq.w	400b18 <sd_mmc_check+0x7a8>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
  4009d2:	4b7a      	ldr	r3, [pc, #488]	; (400bbc <sd_mmc_check+0x84c>)
  4009d4:	681b      	ldr	r3, [r3, #0]
  4009d6:	2204      	movs	r2, #4
  4009d8:	745a      	strb	r2, [r3, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4009da:	4b78      	ldr	r3, [pc, #480]	; (400bbc <sd_mmc_check+0x84c>)
  4009dc:	681b      	ldr	r3, [r3, #0]
  4009de:	7bda      	ldrb	r2, [r3, #15]
  4009e0:	f012 0f01 	tst.w	r2, #1
  4009e4:	d014      	beq.n	400a10 <sd_mmc_check+0x6a0>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4009e6:	8999      	ldrh	r1, [r3, #12]
  4009e8:	0409      	lsls	r1, r1, #16
  4009ea:	f241 1037 	movw	r0, #4407	; 0x1137
  4009ee:	4b78      	ldr	r3, [pc, #480]	; (400bd0 <sd_mmc_check+0x860>)
  4009f0:	4798      	blx	r3
  4009f2:	2800      	cmp	r0, #0
  4009f4:	f000 8090 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  4009f8:	2102      	movs	r1, #2
  4009fa:	f241 1006 	movw	r0, #4358	; 0x1106
  4009fe:	4b74      	ldr	r3, [pc, #464]	; (400bd0 <sd_mmc_check+0x860>)
  400a00:	4798      	blx	r3
  400a02:	2800      	cmp	r0, #0
  400a04:	f000 8088 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	sd_mmc_card->bus_width = 4;
  400a08:	4b6c      	ldr	r3, [pc, #432]	; (400bbc <sd_mmc_check+0x84c>)
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	2204      	movs	r2, #4
  400a0e:	745a      	strb	r2, [r3, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  400a10:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x864>)
  400a12:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  400a14:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x868>)
  400a16:	4798      	blx	r3
  400a18:	2800      	cmp	r0, #0
  400a1a:	d068      	beq.n	400aee <sd_mmc_check+0x77e>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
  400a1c:	4b67      	ldr	r3, [pc, #412]	; (400bbc <sd_mmc_check+0x84c>)
  400a1e:	681b      	ldr	r3, [r3, #0]
  400a20:	7bdb      	ldrb	r3, [r3, #15]
  400a22:	f013 0f04 	tst.w	r3, #4
  400a26:	d022      	beq.n	400a6e <sd_mmc_check+0x6fe>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400a28:	ab04      	add	r3, sp, #16
  400a2a:	9300      	str	r3, [sp, #0]
  400a2c:	2300      	movs	r3, #0
  400a2e:	2213      	movs	r2, #19
  400a30:	4619      	mov	r1, r3
  400a32:	4618      	mov	r0, r3
  400a34:	4c60      	ldr	r4, [pc, #384]	; (400bb8 <sd_mmc_check+0x848>)
  400a36:	47a0      	blx	r4
  400a38:	2800      	cmp	r0, #0
  400a3a:	d06d      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400a3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a40:	f013 0f01 	tst.w	r3, #1
  400a44:	d013      	beq.n	400a6e <sd_mmc_check+0x6fe>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
  400a46:	ab14      	add	r3, sp, #80	; 0x50
  400a48:	2202      	movs	r2, #2
  400a4a:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400a4e:	9300      	str	r3, [sp, #0]
  400a50:	2301      	movs	r3, #1
  400a52:	2213      	movs	r2, #19
  400a54:	2100      	movs	r1, #0
  400a56:	4618      	mov	r0, r3
  400a58:	47a0      	blx	r4
  400a5a:	2800      	cmp	r0, #0
  400a5c:	d05c      	beq.n	400b18 <sd_mmc_check+0x7a8>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
  400a5e:	4b57      	ldr	r3, [pc, #348]	; (400bbc <sd_mmc_check+0x84c>)
  400a60:	681b      	ldr	r3, [r3, #0]
  400a62:	2201      	movs	r2, #1
  400a64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400a68:	681a      	ldr	r2, [r3, #0]
  400a6a:	0052      	lsls	r2, r2, #1
  400a6c:	601a      	str	r2, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a6e:	4b53      	ldr	r3, [pc, #332]	; (400bbc <sd_mmc_check+0x84c>)
  400a70:	681b      	ldr	r3, [r3, #0]
  400a72:	7bda      	ldrb	r2, [r3, #15]
  400a74:	f012 0f01 	tst.w	r2, #1
  400a78:	d037      	beq.n	400aea <sd_mmc_check+0x77a>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a7a:	7c1b      	ldrb	r3, [r3, #16]
  400a7c:	2b10      	cmp	r3, #16
  400a7e:	d934      	bls.n	400aea <sd_mmc_check+0x77a>
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400a80:	2440      	movs	r4, #64	; 0x40
  400a82:	4622      	mov	r2, r4
  400a84:	2100      	movs	r1, #0
  400a86:	a804      	add	r0, sp, #16
  400a88:	4b54      	ldr	r3, [pc, #336]	; (400bdc <sd_mmc_check+0x86c>)
  400a8a:	4798      	blx	r3

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400a8c:	2301      	movs	r3, #1
  400a8e:	9300      	str	r3, [sp, #0]
  400a90:	4622      	mov	r2, r4
  400a92:	4953      	ldr	r1, [pc, #332]	; (400be0 <sd_mmc_check+0x870>)
  400a94:	4853      	ldr	r0, [pc, #332]	; (400be4 <sd_mmc_check+0x874>)
  400a96:	4c54      	ldr	r4, [pc, #336]	; (400be8 <sd_mmc_check+0x878>)
  400a98:	47a0      	blx	r4
  400a9a:	2800      	cmp	r0, #0
  400a9c:	d03c      	beq.n	400b18 <sd_mmc_check+0x7a8>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  400a9e:	2101      	movs	r1, #1
  400aa0:	a804      	add	r0, sp, #16
  400aa2:	4b52      	ldr	r3, [pc, #328]	; (400bec <sd_mmc_check+0x87c>)
  400aa4:	4798      	blx	r3
  400aa6:	2800      	cmp	r0, #0
  400aa8:	d036      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400aaa:	4b51      	ldr	r3, [pc, #324]	; (400bf0 <sd_mmc_check+0x880>)
  400aac:	4798      	blx	r3
  400aae:	2800      	cmp	r0, #0
  400ab0:	d032      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400ab2:	4b50      	ldr	r3, [pc, #320]	; (400bf4 <sd_mmc_check+0x884>)
  400ab4:	4798      	blx	r3
  400ab6:	f010 0f80 	tst.w	r0, #128	; 0x80
  400aba:	d12d      	bne.n	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400abc:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400ac0:	f003 030f 	and.w	r3, r3, #15
  400ac4:	2b0f      	cmp	r3, #15
  400ac6:	d010      	beq.n	400aea <sd_mmc_check+0x77a>
  400ac8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400acc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ad0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ad4:	d120      	bne.n	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  400ad6:	4b48      	ldr	r3, [pc, #288]	; (400bf8 <sd_mmc_check+0x888>)
  400ad8:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400ada:	4b38      	ldr	r3, [pc, #224]	; (400bbc <sd_mmc_check+0x84c>)
  400adc:	681b      	ldr	r3, [r3, #0]
  400ade:	2201      	movs	r2, #1
  400ae0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400ae4:	681a      	ldr	r2, [r3, #0]
  400ae6:	0052      	lsls	r2, r2, #1
  400ae8:	601a      	str	r2, [r3, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  400aea:	4b3a      	ldr	r3, [pc, #232]	; (400bd4 <sd_mmc_check+0x864>)
  400aec:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400aee:	4b33      	ldr	r3, [pc, #204]	; (400bbc <sd_mmc_check+0x84c>)
  400af0:	681b      	ldr	r3, [r3, #0]
  400af2:	7bdb      	ldrb	r3, [r3, #15]
  400af4:	f013 0f01 	tst.w	r3, #1
  400af8:	d006      	beq.n	400b08 <sd_mmc_check+0x798>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400afa:	f44f 7100 	mov.w	r1, #512	; 0x200
  400afe:	f241 1010 	movw	r0, #4368	; 0x1110
  400b02:	4b33      	ldr	r3, [pc, #204]	; (400bd0 <sd_mmc_check+0x860>)
  400b04:	4798      	blx	r3
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400b06:	b138      	cbz	r0, 400b18 <sd_mmc_check+0x7a8>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400b08:	4b2c      	ldr	r3, [pc, #176]	; (400bbc <sd_mmc_check+0x84c>)
  400b0a:	681b      	ldr	r3, [r3, #0]
  400b0c:	2200      	movs	r2, #0
  400b0e:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400b10:	4b3a      	ldr	r3, [pc, #232]	; (400bfc <sd_mmc_check+0x88c>)
  400b12:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  400b14:	2001      	movs	r0, #1
  400b16:	e04c      	b.n	400bb2 <sd_mmc_check+0x842>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  400b18:	4b28      	ldr	r3, [pc, #160]	; (400bbc <sd_mmc_check+0x84c>)
  400b1a:	681b      	ldr	r3, [r3, #0]
  400b1c:	2403      	movs	r4, #3
  400b1e:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  400b20:	4b36      	ldr	r3, [pc, #216]	; (400bfc <sd_mmc_check+0x88c>)
  400b22:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  400b24:	4620      	mov	r0, r4
  400b26:	e044      	b.n	400bb2 <sd_mmc_check+0x842>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
  400b28:	f04f 0800 	mov.w	r8, #0
  400b2c:	e001      	b.n	400b32 <sd_mmc_check+0x7c2>
  400b2e:	f04f 0800 	mov.w	r8, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400b32:	2100      	movs	r1, #0
  400b34:	f244 5005 	movw	r0, #17669	; 0x4505
  400b38:	4b25      	ldr	r3, [pc, #148]	; (400bd0 <sd_mmc_check+0x860>)
  400b3a:	4798      	blx	r3
  400b3c:	2800      	cmp	r0, #0
  400b3e:	f47f ac57 	bne.w	4003f0 <sd_mmc_check+0x80>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b42:	4b1e      	ldr	r3, [pc, #120]	; (400bbc <sd_mmc_check+0x84c>)
  400b44:	681b      	ldr	r3, [r3, #0]
  400b46:	7bdb      	ldrb	r3, [r3, #15]
  400b48:	f013 0f01 	tst.w	r3, #1
  400b4c:	f43f add8 	beq.w	400700 <sd_mmc_check+0x390>
  400b50:	f1b8 0f00 	cmp.w	r8, #0
  400b54:	4e2a      	ldr	r6, [pc, #168]	; (400c00 <sd_mmc_check+0x890>)
  400b56:	bf08      	it	eq
  400b58:	f44f 16fc 	moveq.w	r6, #2064384	; 0x1f8000
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
	if ((resp & OCR_SDIO_NF) == 0) {
  400b5c:	f640 0435 	movw	r4, #2101	; 0x835
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400b60:	f04f 0800 	mov.w	r8, #0
  400b64:	4d1a      	ldr	r5, [pc, #104]	; (400bd0 <sd_mmc_check+0x860>)
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400b66:	4f23      	ldr	r7, [pc, #140]	; (400bf4 <sd_mmc_check+0x884>)
  400b68:	e468      	b.n	40043c <sd_mmc_check+0xcc>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  400b6a:	4b14      	ldr	r3, [pc, #80]	; (400bbc <sd_mmc_check+0x84c>)
  400b6c:	681b      	ldr	r3, [r3, #0]
  400b6e:	2202      	movs	r2, #2
  400b70:	73da      	strb	r2, [r3, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400b72:	2100      	movs	r1, #0
  400b74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400b78:	4b15      	ldr	r3, [pc, #84]	; (400bd0 <sd_mmc_check+0x860>)
  400b7a:	4798      	blx	r3
  400b7c:	2800      	cmp	r0, #0
  400b7e:	d0cb      	beq.n	400b18 <sd_mmc_check+0x7a8>
  400b80:	e47b      	b.n	40047a <sd_mmc_check+0x10a>
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b82:	4b0e      	ldr	r3, [pc, #56]	; (400bbc <sd_mmc_check+0x84c>)
  400b84:	681b      	ldr	r3, [r3, #0]
  400b86:	7bdb      	ldrb	r3, [r3, #15]
  400b88:	f013 0f01 	tst.w	r3, #1
  400b8c:	f47f adb0 	bne.w	4006f0 <sd_mmc_check+0x380>
  400b90:	e5b6      	b.n	400700 <sd_mmc_check+0x390>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400b92:	2100      	movs	r1, #0
  400b94:	f645 3002 	movw	r0, #23298	; 0x5b02
  400b98:	4b0d      	ldr	r3, [pc, #52]	; (400bd0 <sd_mmc_check+0x860>)
  400b9a:	4798      	blx	r3
  400b9c:	2800      	cmp	r0, #0
  400b9e:	d0bb      	beq.n	400b18 <sd_mmc_check+0x7a8>
  400ba0:	e48a      	b.n	4004b8 <sd_mmc_check+0x148>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  400ba2:	4b09      	ldr	r3, [pc, #36]	; (400bc8 <sd_mmc_check+0x858>)
  400ba4:	7818      	ldrb	r0, [r3, #0]
  400ba6:	4b09      	ldr	r3, [pc, #36]	; (400bcc <sd_mmc_check+0x85c>)
  400ba8:	4798      	blx	r3
  400baa:	2803      	cmp	r0, #3
  400bac:	f63f ad50 	bhi.w	400650 <sd_mmc_check+0x2e0>
  400bb0:	e56e      	b.n	400690 <sd_mmc_check+0x320>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400bb2:	b014      	add	sp, #80	; 0x50
  400bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bb8:	004002c9 	.word	0x004002c9
  400bbc:	20400904 	.word	0x20400904
  400bc0:	0040b90c 	.word	0x0040b90c
  400bc4:	0040b8cc 	.word	0x0040b8cc
  400bc8:	20400908 	.word	0x20400908
  400bcc:	00400d71 	.word	0x00400d71
  400bd0:	00400e4d 	.word	0x00400e4d
  400bd4:	0040019d 	.word	0x0040019d
  400bd8:	00400d7d 	.word	0x00400d7d
  400bdc:	004051bd 	.word	0x004051bd
  400be0:	80ffff01 	.word	0x80ffff01
  400be4:	00081106 	.word	0x00081106
  400be8:	00400ea9 	.word	0x00400ea9
  400bec:	00400fe5 	.word	0x00400fe5
  400bf0:	00401099 	.word	0x00401099
  400bf4:	00400e71 	.word	0x00400e71
  400bf8:	00400e29 	.word	0x00400e29
  400bfc:	0040032d 	.word	0x0040032d
  400c00:	401f8000 	.word	0x401f8000

00400c04 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c04:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c06:	4b05      	ldr	r3, [pc, #20]	; (400c1c <sd_mmc_get_type+0x18>)
  400c08:	4798      	blx	r3
  400c0a:	b928      	cbnz	r0, 400c18 <sd_mmc_get_type+0x14>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
  400c0c:	4b04      	ldr	r3, [pc, #16]	; (400c20 <sd_mmc_get_type+0x1c>)
  400c0e:	4798      	blx	r3
	return sd_mmc_card->type;
  400c10:	4b04      	ldr	r3, [pc, #16]	; (400c24 <sd_mmc_get_type+0x20>)
  400c12:	681b      	ldr	r3, [r3, #0]
  400c14:	7bd8      	ldrb	r0, [r3, #15]
  400c16:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
  400c18:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c1a:	bd08      	pop	{r3, pc}
  400c1c:	004001c9 	.word	0x004001c9
  400c20:	0040032d 	.word	0x0040032d
  400c24:	20400904 	.word	0x20400904

00400c28 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400c28:	b510      	push	{r4, lr}
  400c2a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400c2c:	4b0f      	ldr	r3, [pc, #60]	; (400c6c <sd_mmc_test_unit_ready+0x44>)
  400c2e:	4798      	blx	r3
  400c30:	2801      	cmp	r0, #1
  400c32:	d016      	beq.n	400c62 <sd_mmc_test_unit_ready+0x3a>
  400c34:	b118      	cbz	r0, 400c3e <sd_mmc_test_unit_ready+0x16>
  400c36:	2802      	cmp	r0, #2
  400c38:	d00e      	beq.n	400c58 <sd_mmc_test_unit_ready+0x30>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400c3a:	2001      	movs	r0, #1
  400c3c:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  400c3e:	4b0c      	ldr	r3, [pc, #48]	; (400c70 <sd_mmc_test_unit_ready+0x48>)
  400c40:	5d1b      	ldrb	r3, [r3, r4]
  400c42:	b983      	cbnz	r3, 400c66 <sd_mmc_test_unit_ready+0x3e>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400c44:	4620      	mov	r0, r4
  400c46:	4b0b      	ldr	r3, [pc, #44]	; (400c74 <sd_mmc_test_unit_ready+0x4c>)
  400c48:	4798      	blx	r3
  400c4a:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  400c4e:	2800      	cmp	r0, #0
  400c50:	bf14      	ite	ne
  400c52:	2000      	movne	r0, #0
  400c54:	2002      	moveq	r0, #2
  400c56:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  400c58:	2200      	movs	r2, #0
  400c5a:	4b05      	ldr	r3, [pc, #20]	; (400c70 <sd_mmc_test_unit_ready+0x48>)
  400c5c:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400c5e:	2002      	movs	r0, #2
  400c60:	bd10      	pop	{r4, pc}
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  400c62:	2003      	movs	r0, #3
  400c64:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
  400c66:	2002      	movs	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
  400c68:	bd10      	pop	{r4, pc}
  400c6a:	bf00      	nop
  400c6c:	00400371 	.word	0x00400371
  400c70:	2040090c 	.word	0x2040090c
  400c74:	00400c05 	.word	0x00400c05

00400c78 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400c78:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c7e:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400c80:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400c82:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400c84:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400c86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400c88:	2680      	movs	r6, #128	; 0x80
  400c8a:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400c8c:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400c8e:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400c90:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400c92:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400c94:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  400c96:	2200      	movs	r2, #0
  400c98:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400c9a:	2205      	movs	r2, #5
  400c9c:	601a      	str	r2, [r3, #0]
}
  400c9e:	bc70      	pop	{r4, r5, r6}
  400ca0:	4770      	bx	lr
  400ca2:	bf00      	nop

00400ca4 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400ca4:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400ca6:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400caa:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400cac:	f411 7f80 	tst.w	r1, #256	; 0x100
  400cb0:	d00c      	beq.n	400ccc <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400cb2:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400cb6:	d002      	beq.n	400cbe <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400cb8:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
  400cbc:	e006      	b.n	400ccc <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
  400cbe:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  400cc2:	bf14      	ite	ne
  400cc4:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  400cc8:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400ccc:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  400cd0:	bf18      	it	ne
  400cd2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  400cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400cda:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  400cdc:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400cde:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  400ce0:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400ce4:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  400ce6:	b132      	cbz	r2, 400cf6 <hsmci_send_cmd_execute+0x52>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400ce8:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400cec:	d00a      	beq.n	400d04 <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  400cee:	4b14      	ldr	r3, [pc, #80]	; (400d40 <hsmci_send_cmd_execute+0x9c>)
  400cf0:	4798      	blx	r3
				return false;
  400cf2:	2000      	movs	r0, #0
  400cf4:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400cf6:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400cfa:	d003      	beq.n	400d04 <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  400cfc:	4b10      	ldr	r3, [pc, #64]	; (400d40 <hsmci_send_cmd_execute+0x9c>)
  400cfe:	4798      	blx	r3
				return false;
  400d00:	2000      	movs	r0, #0
  400d02:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  400d04:	f013 0f01 	tst.w	r3, #1
  400d08:	d0ec      	beq.n	400ce4 <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
  400d0a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400d0e:	d10e      	bne.n	400d2e <hsmci_send_cmd_execute+0x8a>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  400d10:	2001      	movs	r0, #1
  400d12:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  400d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  400d16:	3a01      	subs	r2, #1
  400d18:	d103      	bne.n	400d22 <hsmci_send_cmd_execute+0x7e>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  400d1a:	4b09      	ldr	r3, [pc, #36]	; (400d40 <hsmci_send_cmd_execute+0x9c>)
  400d1c:	4798      	blx	r3
			return false;
  400d1e:	2000      	movs	r0, #0
  400d20:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  400d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400d26:	2b20      	cmp	r3, #32
  400d28:	d1f4      	bne.n	400d14 <hsmci_send_cmd_execute+0x70>
	return true;
  400d2a:	2001      	movs	r0, #1
  400d2c:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  400d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400d34:	f04f 32ff 	mov.w	r2, #4294967295
  400d38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d3c:	e7f1      	b.n	400d22 <hsmci_send_cmd_execute+0x7e>
  400d3e:	bf00      	nop
  400d40:	00400c79 	.word	0x00400c79

00400d44 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  400d44:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  400d46:	2012      	movs	r0, #18
  400d48:	4c08      	ldr	r4, [pc, #32]	; (400d6c <hsmci_init+0x28>)
  400d4a:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  400d4c:	203a      	movs	r0, #58	; 0x3a
  400d4e:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  400d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d54:	2272      	movs	r2, #114	; 0x72
  400d56:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  400d58:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  400d5a:	2211      	movs	r2, #17
  400d5c:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  400d5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400d62:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  400d64:	2205      	movs	r2, #5
  400d66:	601a      	str	r2, [r3, #0]
  400d68:	bd10      	pop	{r4, pc}
  400d6a:	bf00      	nop
  400d6c:	004045fd 	.word	0x004045fd

00400d70 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  400d70:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  400d72:	bf0c      	ite	eq
  400d74:	2004      	moveq	r0, #4
  400d76:	2000      	movne	r0, #0
  400d78:	4770      	bx	lr
  400d7a:	bf00      	nop

00400d7c <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  400d7c:	2001      	movs	r0, #1
  400d7e:	4770      	bx	lr

00400d80 <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  400d80:	b410      	push	{r4}
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  400d82:	b133      	cbz	r3, 400d92 <hsmci_select_device+0x12>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  400d84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400d88:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400d8e:	6543      	str	r3, [r0, #84]	; 0x54
  400d90:	e005      	b.n	400d9e <hsmci_select_device+0x1e>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  400d92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400d96:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400d9c:	6543      	str	r3, [r0, #84]	; 0x54
	uint32_t clkodd = 0;
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
  400d9e:	4b1f      	ldr	r3, [pc, #124]	; (400e1c <hsmci_select_device+0x9c>)
  400da0:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  400da4:	d32d      	bcc.n	400e02 <hsmci_select_device+0x82>
		div = (mck / speed) - 2;
  400da6:	481e      	ldr	r0, [pc, #120]	; (400e20 <hsmci_select_device+0xa0>)
  400da8:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  400dac:	fb01 0113 	mls	r1, r1, r3, r0
  400db0:	b909      	cbnz	r1, 400db6 <hsmci_select_device+0x36>
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
		div = (mck / speed) - 2;
  400db2:	3b02      	subs	r3, #2
  400db4:	e000      	b.n	400db8 <hsmci_select_device+0x38>
		if (mck % speed) {
			// Ensure that the card speed not be higher than expected.
			div++;
  400db6:	3b01      	subs	r3, #1
	} else {
		clkdiv = 0;
		clkodd = 0;
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400db8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400dbc:	6848      	ldr	r0, [r1, #4]
  400dbe:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400dc2:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400dc4:	6848      	ldr	r0, [r1, #4]
  400dc6:	f3c3 0447 	ubfx	r4, r3, #1, #8
  400dca:	4320      	orrs	r0, r4
  400dcc:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  400dce:	f013 0f01 	tst.w	r3, #1
  400dd2:	d004      	beq.n	400dde <hsmci_select_device+0x5e>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  400dd4:	684b      	ldr	r3, [r1, #4]
  400dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400dda:	604b      	str	r3, [r1, #4]
  400ddc:	e005      	b.n	400dea <hsmci_select_device+0x6a>
	}
	else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  400dde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400de2:	684b      	ldr	r3, [r1, #4]
  400de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400de8:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  400dea:	2a04      	cmp	r2, #4
  400dec:	d004      	beq.n	400df8 <hsmci_select_device+0x78>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  400dee:	2a08      	cmp	r2, #8
  400df0:	bf0c      	ite	eq
  400df2:	22c0      	moveq	r2, #192	; 0xc0
  400df4:	2200      	movne	r2, #0
  400df6:	e000      	b.n	400dfa <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  400df8:	2280      	movs	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  400dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400dfe:	60da      	str	r2, [r3, #12]
}
  400e00:	e008      	b.n	400e14 <hsmci_select_device+0x94>
	} else {
		clkdiv = 0;
		clkodd = 0;
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400e02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e06:	6859      	ldr	r1, [r3, #4]
  400e08:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  400e0c:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400e0e:	6859      	ldr	r1, [r3, #4]
  400e10:	6059      	str	r1, [r3, #4]
  400e12:	e7e4      	b.n	400dde <hsmci_select_device+0x5e>

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
}
  400e14:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e18:	4770      	bx	lr
  400e1a:	bf00      	nop
  400e1c:	08f0d17f 	.word	0x08f0d17f
  400e20:	08f0d180 	.word	0x08f0d180

00400e24 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  400e24:	4770      	bx	lr
  400e26:	bf00      	nop

00400e28 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e2c:	685a      	ldr	r2, [r3, #4]
  400e2e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400e32:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  400e34:	2200      	movs	r2, #0
  400e36:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  400e38:	f44f 6210 	mov.w	r2, #2304	; 0x900
  400e3c:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  400e3e:	461a      	mov	r2, r3
  400e40:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400e42:	f013 0f01 	tst.w	r3, #1
  400e46:	d0fb      	beq.n	400e40 <hsmci_send_clock+0x18>
}
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop

00400e4c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  400e4c:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e52:	685a      	ldr	r2, [r3, #4]
  400e54:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400e58:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  400e5a:	2400      	movs	r4, #0
  400e5c:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  400e5e:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  400e60:	460a      	mov	r2, r1
  400e62:	4601      	mov	r1, r0
  400e64:	4620      	mov	r0, r4
  400e66:	4b01      	ldr	r3, [pc, #4]	; (400e6c <hsmci_send_cmd+0x20>)
  400e68:	4798      	blx	r3
}
  400e6a:	bd10      	pop	{r4, pc}
  400e6c:	00400ca5 	.word	0x00400ca5

00400e70 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  400e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e74:	6a18      	ldr	r0, [r3, #32]
}
  400e76:	4770      	bx	lr

00400e78 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  400e78:	b410      	push	{r4}
  400e7a:	1d03      	adds	r3, r0, #4
  400e7c:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  400e7e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400e82:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  400e84:	0e11      	lsrs	r1, r2, #24
  400e86:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  400e8a:	0c11      	lsrs	r1, r2, #16
  400e8c:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  400e90:	0a11      	lsrs	r1, r2, #8
  400e92:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  400e96:	f803 2c01 	strb.w	r2, [r3, #-1]
  400e9a:	3304      	adds	r3, #4

void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  400e9c:	4283      	cmp	r3, r0
  400e9e:	d1f0      	bne.n	400e82 <hsmci_get_response_128+0xa>
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
		response++;
	}
}
  400ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ea4:	4770      	bx	lr
  400ea6:	bf00      	nop

00400ea8 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  400ea8:	b570      	push	{r4, r5, r6, lr}
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  400eaa:	f89d 4010 	ldrb.w	r4, [sp, #16]
  400eae:	b12c      	cbz	r4, 400ebc <hsmci_adtc_start+0x14>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  400eb0:	f44f 7580 	mov.w	r5, #256	; 0x100
  400eb4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400eb8:	6525      	str	r5, [r4, #80]	; 0x50
  400eba:	e003      	b.n	400ec4 <hsmci_adtc_start+0x1c>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
  400ebc:	2500      	movs	r5, #0
  400ebe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400ec2:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  400ec4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400ec8:	686c      	ldr	r4, [r5, #4]
  400eca:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  400ece:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  400ed0:	f012 0f03 	tst.w	r2, #3
  400ed4:	d004      	beq.n	400ee0 <hsmci_adtc_start+0x38>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  400ed6:	686c      	ldr	r4, [r5, #4]
  400ed8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  400edc:	606c      	str	r4, [r5, #4]
  400ede:	e005      	b.n	400eec <hsmci_adtc_start+0x44>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  400ee0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400ee4:	686c      	ldr	r4, [r5, #4]
  400ee6:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  400eea:	606c      	str	r4, [r5, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  400eec:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  400ef0:	2c00      	cmp	r4, #0
  400ef2:	bf14      	ite	ne
  400ef4:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  400ef8:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  400efc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400f00:	d007      	beq.n	400f12 <hsmci_adtc_start+0x6a>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  400f02:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  400f06:	f3c2 0508 	ubfx	r5, r2, #0, #9
  400f0a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400f0e:	61b5      	str	r5, [r6, #24]
  400f10:	e018      	b.n	400f44 <hsmci_adtc_start+0x9c>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  400f12:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  400f16:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400f1a:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  400f1c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  400f20:	d002      	beq.n	400f28 <hsmci_adtc_start+0x80>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  400f22:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  400f26:	e00d      	b.n	400f44 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_STREAM) {
  400f28:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  400f2c:	d002      	beq.n	400f34 <hsmci_adtc_start+0x8c>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  400f2e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  400f32:	e007      	b.n	400f44 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  400f34:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400f38:	d104      	bne.n	400f44 <hsmci_adtc_start+0x9c>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  400f3a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  400f3e:	bf18      	it	ne
  400f40:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  400f44:	2600      	movs	r6, #0
  400f46:	4d06      	ldr	r5, [pc, #24]	; (400f60 <hsmci_adtc_start+0xb8>)
  400f48:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  400f4a:	4d06      	ldr	r5, [pc, #24]	; (400f64 <hsmci_adtc_start+0xbc>)
  400f4c:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  400f4e:	4a06      	ldr	r2, [pc, #24]	; (400f68 <hsmci_adtc_start+0xc0>)
  400f50:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  400f52:	460a      	mov	r2, r1
  400f54:	4601      	mov	r1, r0
  400f56:	4620      	mov	r0, r4
  400f58:	4b04      	ldr	r3, [pc, #16]	; (400f6c <hsmci_adtc_start+0xc4>)
  400f5a:	4798      	blx	r3
}
  400f5c:	bd70      	pop	{r4, r5, r6, pc}
  400f5e:	bf00      	nop
  400f60:	20400914 	.word	0x20400914
  400f64:	2040090e 	.word	0x2040090e
  400f68:	20400910 	.word	0x20400910
  400f6c:	00400ca5 	.word	0x00400ca5

00400f70 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  400f70:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400f72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f76:	4a16      	ldr	r2, [pc, #88]	; (400fd0 <hsmci_read_word+0x60>)

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f7a:	4213      	tst	r3, r2
  400f7c:	d003      	beq.n	400f86 <hsmci_read_word+0x16>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  400f7e:	4b15      	ldr	r3, [pc, #84]	; (400fd4 <hsmci_read_word+0x64>)
  400f80:	4798      	blx	r3
			return false;
  400f82:	2000      	movs	r0, #0
  400f84:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  400f86:	f013 0f02 	tst.w	r3, #2
  400f8a:	d0f5      	beq.n	400f78 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  400f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f92:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  400f94:	4a10      	ldr	r2, [pc, #64]	; (400fd8 <hsmci_read_word+0x68>)
  400f96:	6813      	ldr	r3, [r2, #0]
  400f98:	3304      	adds	r3, #4
  400f9a:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f9c:	4a0f      	ldr	r2, [pc, #60]	; (400fdc <hsmci_read_word+0x6c>)
  400f9e:	8811      	ldrh	r1, [r2, #0]
  400fa0:	4a0f      	ldr	r2, [pc, #60]	; (400fe0 <hsmci_read_word+0x70>)
  400fa2:	8812      	ldrh	r2, [r2, #0]
  400fa4:	fb02 f201 	mul.w	r2, r2, r1
  400fa8:	4293      	cmp	r3, r2
  400faa:	d30e      	bcc.n	400fca <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400fac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400fb0:	4a07      	ldr	r2, [pc, #28]	; (400fd0 <hsmci_read_word+0x60>)
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400fb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400fb4:	4213      	tst	r3, r2
  400fb6:	d003      	beq.n	400fc0 <hsmci_read_word+0x50>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  400fb8:	4b06      	ldr	r3, [pc, #24]	; (400fd4 <hsmci_read_word+0x64>)
  400fba:	4798      	blx	r3
			return false;
  400fbc:	2000      	movs	r0, #0
  400fbe:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400fc0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400fc4:	d0f5      	beq.n	400fb2 <hsmci_read_word+0x42>
	return true;
  400fc6:	2001      	movs	r0, #1
  400fc8:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
  400fca:	2001      	movs	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  400fcc:	bd08      	pop	{r3, pc}
  400fce:	bf00      	nop
  400fd0:	c0600000 	.word	0xc0600000
  400fd4:	00400c79 	.word	0x00400c79
  400fd8:	20400914 	.word	0x20400914
  400fdc:	2040090e 	.word	0x2040090e
  400fe0:	20400910 	.word	0x20400910

00400fe4 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  400fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fe6:	b089      	sub	sp, #36	; 0x24
  400fe8:	4604      	mov	r4, r0
  400fea:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400fec:	2220      	movs	r2, #32
  400fee:	2100      	movs	r1, #0
  400ff0:	4668      	mov	r0, sp
  400ff2:	4b21      	ldr	r3, [pc, #132]	; (401078 <hsmci_start_read_blocks+0x94>)
  400ff4:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400ff6:	4821      	ldr	r0, [pc, #132]	; (40107c <hsmci_start_read_blocks+0x98>)
  400ff8:	2301      	movs	r3, #1
  400ffa:	6203      	str	r3, [r0, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400ffc:	4b20      	ldr	r3, [pc, #128]	; (401080 <hsmci_start_read_blocks+0x9c>)
  400ffe:	881b      	ldrh	r3, [r3, #0]
  401000:	fb05 f503 	mul.w	r5, r5, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401004:	4b1f      	ldr	r3, [pc, #124]	; (401084 <hsmci_start_read_blocks+0xa0>)
  401006:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  401008:	08ab      	lsrs	r3, r5, #2
  40100a:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  40100c:	4b1e      	ldr	r3, [pc, #120]	; (401088 <hsmci_start_read_blocks+0xa4>)
  40100e:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  401010:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401012:	466a      	mov	r2, sp
  401014:	2100      	movs	r1, #0
  401016:	4b1d      	ldr	r3, [pc, #116]	; (40108c <hsmci_start_read_blocks+0xa8>)
  401018:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40101a:	4b1d      	ldr	r3, [pc, #116]	; (401090 <hsmci_start_read_blocks+0xac>)
  40101c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401020:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401024:	f007 0e07 	and.w	lr, r7, #7
  401028:	f10e 0e04 	add.w	lr, lr, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40102c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401030:	fab7 f087 	clz	r0, r7
    wshift  = __CLZ(ways) & 0x1f;
  401034:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401038:	f3bf 8f4f 	dsb	sy

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  40103c:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
  40103e:	463b      	mov	r3, r7
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401040:	fa06 f10e 	lsl.w	r1, r6, lr
  401044:	fa03 f200 	lsl.w	r2, r3, r0
  401048:	430a      	orrs	r2, r1
              SCB->DCCISW = sw;
  40104a:	f8c4 2274 	str.w	r2, [r4, #628]	; 0x274
            } while(tmpways--);
  40104e:	3b01      	subs	r3, #1
  401050:	f1b3 3fff 	cmp.w	r3, #4294967295
  401054:	d1f6      	bne.n	401044 <hsmci_start_read_blocks+0x60>
        } while(sets--);
  401056:	3e01      	subs	r6, #1
  401058:	f1b6 3fff 	cmp.w	r6, #4294967295
  40105c:	d1ef      	bne.n	40103e <hsmci_start_read_blocks+0x5a>
  40105e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401062:	f3bf 8f6f 	isb	sy
	Assert(channel_num < XDMACCHID_NUMBER);
	
	/* Update DCache before DMA transmit */
	SCB_CleanInvalidateDCache();
	
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401066:	2001      	movs	r0, #1
  401068:	4b04      	ldr	r3, [pc, #16]	; (40107c <hsmci_start_read_blocks+0x98>)
  40106a:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  40106c:	4b09      	ldr	r3, [pc, #36]	; (401094 <hsmci_start_read_blocks+0xb0>)
  40106e:	681a      	ldr	r2, [r3, #0]
  401070:	4415      	add	r5, r2
  401072:	601d      	str	r5, [r3, #0]
	return true;
}
  401074:	b009      	add	sp, #36	; 0x24
  401076:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401078:	004051bd 	.word	0x004051bd
  40107c:	40078000 	.word	0x40078000
  401080:	2040090e 	.word	0x2040090e
  401084:	00043001 	.word	0x00043001
  401088:	40000200 	.word	0x40000200
  40108c:	004010f9 	.word	0x004010f9
  401090:	e000ed00 	.word	0xe000ed00
  401094:	20400914 	.word	0x20400914

00401098 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  401098:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40109a:	4b11      	ldr	r3, [pc, #68]	; (4010e0 <hsmci_wait_end_of_read_blocks+0x48>)
  40109c:	881a      	ldrh	r2, [r3, #0]
  40109e:	4b11      	ldr	r3, [pc, #68]	; (4010e4 <hsmci_wait_end_of_read_blocks+0x4c>)
  4010a0:	881b      	ldrh	r3, [r3, #0]
  4010a2:	fb03 f202 	mul.w	r2, r3, r2
  4010a6:	4b10      	ldr	r3, [pc, #64]	; (4010e8 <hsmci_wait_end_of_read_blocks+0x50>)
  4010a8:	681c      	ldr	r4, [r3, #0]
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4010aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4010ae:	490f      	ldr	r1, [pc, #60]	; (4010ec <hsmci_wait_end_of_read_blocks+0x54>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4010b0:	4e0f      	ldr	r6, [pc, #60]	; (4010f0 <hsmci_wait_end_of_read_blocks+0x58>)
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4010b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4010b4:	420b      	tst	r3, r1
  4010b6:	d006      	beq.n	4010c6 <hsmci_wait_end_of_read_blocks+0x2e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  4010b8:	4b0e      	ldr	r3, [pc, #56]	; (4010f4 <hsmci_wait_end_of_read_blocks+0x5c>)
  4010ba:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4010bc:	2201      	movs	r2, #1
  4010be:	4b0c      	ldr	r3, [pc, #48]	; (4010f0 <hsmci_wait_end_of_read_blocks+0x58>)
  4010c0:	621a      	str	r2, [r3, #32]
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
  4010c2:	2000      	movs	r0, #0
  4010c4:	bd70      	pop	{r4, r5, r6, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4010c6:	42a2      	cmp	r2, r4
  4010c8:	d903      	bls.n	4010d2 <hsmci_wait_end_of_read_blocks+0x3a>
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4010ca:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
  4010cc:	f015 0f01 	tst.w	r5, #1
  4010d0:	d104      	bne.n	4010dc <hsmci_wait_end_of_read_blocks+0x44>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4010d2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4010d6:	d0ec      	beq.n	4010b2 <hsmci_wait_end_of_read_blocks+0x1a>
	return true;
  4010d8:	2001      	movs	r0, #1
  4010da:	bd70      	pop	{r4, r5, r6, pc}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
  4010dc:	2001      	movs	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  4010de:	bd70      	pop	{r4, r5, r6, pc}
  4010e0:	2040090e 	.word	0x2040090e
  4010e4:	20400910 	.word	0x20400910
  4010e8:	20400914 	.word	0x20400914
  4010ec:	c0600000 	.word	0xc0600000
  4010f0:	40078000 	.word	0x40078000
  4010f4:	00400c79 	.word	0x00400c79

004010f8 <xdmac_configure_transfer>:
  4010f8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4010fc:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4010fe:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401100:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401102:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401104:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401106:	6813      	ldr	r3, [r2, #0]
  401108:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40110c:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  40110e:	6913      	ldr	r3, [r2, #16]
  401110:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401114:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401116:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401118:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  40111a:	6993      	ldr	r3, [r2, #24]
  40111c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401120:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401124:	69d3      	ldr	r3, [r2, #28]
  401126:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40112a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  40112e:	68d3      	ldr	r3, [r2, #12]
 */
static inline void xdmac_channel_set_config(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401130:	678b      	str	r3, [r1, #120]	; 0x78
  401132:	4770      	bx	lr

00401134 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  401134:	2807      	cmp	r0, #7
  401136:	d80d      	bhi.n	401154 <f_mount+0x20>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
  401138:	4b07      	ldr	r3, [pc, #28]	; (401158 <f_mount+0x24>)
  40113a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (rfs) {
  40113e:	b10b      	cbz	r3, 401144 <f_mount+0x10>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  401140:	2200      	movs	r2, #0
  401142:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  401144:	b109      	cbz	r1, 40114a <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  401146:	2300      	movs	r3, #0
  401148:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  40114a:	4b03      	ldr	r3, [pc, #12]	; (401158 <f_mount+0x24>)
  40114c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

	return FR_OK;
  401150:	2000      	movs	r0, #0
  401152:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
  401154:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  401156:	4770      	bx	lr
  401158:	20400918 	.word	0x20400918

0040115c <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40115c:	2810      	cmp	r0, #16
  40115e:	d108      	bne.n	401172 <chip_isr+0x16>
  401160:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401164:	d105      	bne.n	401172 <chip_isr+0x16>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  401166:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  401168:	4b02      	ldr	r3, [pc, #8]	; (401174 <chip_isr+0x18>)
  40116a:	681b      	ldr	r3, [r3, #0]
  40116c:	b103      	cbz	r3, 401170 <chip_isr+0x14>
			gpfIsr();
  40116e:	4798      	blx	r3
  401170:	bd08      	pop	{r3, pc}
  401172:	4770      	bx	lr
  401174:	20400938 	.word	0x20400938

00401178 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  401178:	b140      	cbz	r0, 40118c <nm_bsp_sleep+0x14>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  40117a:	b570      	push	{r4, r5, r6, lr}
  40117c:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(4);
  40117e:	4e04      	ldr	r6, [pc, #16]	; (401190 <nm_bsp_sleep+0x18>)
  401180:	4d04      	ldr	r5, [pc, #16]	; (401194 <nm_bsp_sleep+0x1c>)
  401182:	4630      	mov	r0, r6
  401184:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  401186:	3c01      	subs	r4, #1
  401188:	d1fb      	bne.n	401182 <nm_bsp_sleep+0xa>
  40118a:	bd70      	pop	{r4, r5, r6, pc}
  40118c:	4770      	bx	lr
  40118e:	bf00      	nop
  401190:	00031635 	.word	0x00031635
  401194:	20400001 	.word	0x20400001

00401198 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  401198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40119c:	4f09      	ldr	r7, [pc, #36]	; (4011c4 <nm_bsp_reset+0x2c>)
  40119e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4011a2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4011a6:	4d08      	ldr	r5, [pc, #32]	; (4011c8 <nm_bsp_reset+0x30>)
  4011a8:	2608      	movs	r6, #8
  4011aa:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	nm_bsp_sleep(100);
  4011ac:	2064      	movs	r0, #100	; 0x64
  4011ae:	4c07      	ldr	r4, [pc, #28]	; (4011cc <nm_bsp_reset+0x34>)
  4011b0:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011b2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4011b6:	2064      	movs	r0, #100	; 0x64
  4011b8:	47a0      	blx	r4
  4011ba:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  4011bc:	2064      	movs	r0, #100	; 0x64
  4011be:	47a0      	blx	r4
  4011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011c4:	400e1200 	.word	0x400e1200
  4011c8:	400e1000 	.word	0x400e1000
  4011cc:	00401179 	.word	0x00401179

004011d0 <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  4011d0:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  4011d2:	2200      	movs	r2, #0
  4011d4:	4b14      	ldr	r3, [pc, #80]	; (401228 <nm_bsp_init+0x58>)
  4011d6:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4011d8:	200a      	movs	r0, #10
  4011da:	4c14      	ldr	r4, [pc, #80]	; (40122c <nm_bsp_init+0x5c>)
  4011dc:	47a0      	blx	r4
  4011de:	200b      	movs	r0, #11
  4011e0:	47a0      	blx	r4
  4011e2:	200c      	movs	r0, #12
  4011e4:	47a0      	blx	r4
  4011e6:	2010      	movs	r0, #16
  4011e8:	47a0      	blx	r4
  4011ea:	2011      	movs	r0, #17
  4011ec:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4011ee:	4b10      	ldr	r3, [pc, #64]	; (401230 <nm_bsp_init+0x60>)
  4011f0:	2208      	movs	r2, #8
  4011f2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011f8:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4011fa:	4a0e      	ldr	r2, [pc, #56]	; (401234 <nm_bsp_init+0x64>)
  4011fc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401200:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401202:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401206:	6311      	str	r1, [r2, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401208:	2204      	movs	r2, #4
  40120a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40120c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401210:	631a      	str	r2, [r3, #48]	; 0x30

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  401212:	4b09      	ldr	r3, [pc, #36]	; (401238 <nm_bsp_init+0x68>)
  401214:	681b      	ldr	r3, [r3, #0]
  401216:	f013 0f01 	tst.w	r3, #1
  40121a:	d001      	beq.n	401220 <nm_bsp_init+0x50>
  40121c:	4b06      	ldr	r3, [pc, #24]	; (401238 <nm_bsp_init+0x68>)
  40121e:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  401220:	4b06      	ldr	r3, [pc, #24]	; (40123c <nm_bsp_init+0x6c>)
  401222:	4798      	blx	r3

	return 0;
}
  401224:	2000      	movs	r0, #0
  401226:	bd10      	pop	{r4, pc}
  401228:	20400938 	.word	0x20400938
  40122c:	004045fd 	.word	0x004045fd
  401230:	400e1000 	.word	0x400e1000
  401234:	400e1200 	.word	0x400e1200
  401238:	e000e010 	.word	0xe000e010
  40123c:	00401199 	.word	0x00401199

00401240 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  401240:	b530      	push	{r4, r5, lr}
  401242:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  401244:	4b14      	ldr	r3, [pc, #80]	; (401298 <nm_bsp_register_isr+0x58>)
  401246:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  401248:	2010      	movs	r0, #16
  40124a:	4b14      	ldr	r3, [pc, #80]	; (40129c <nm_bsp_register_isr+0x5c>)
  40124c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40124e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401252:	207c      	movs	r0, #124	; 0x7c
  401254:	4b12      	ldr	r3, [pc, #72]	; (4012a0 <nm_bsp_register_isr+0x60>)
  401256:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  401258:	4c12      	ldr	r4, [pc, #72]	; (4012a4 <nm_bsp_register_isr+0x64>)
  40125a:	2201      	movs	r2, #1
  40125c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401260:	4620      	mov	r0, r4
  401262:	4b11      	ldr	r3, [pc, #68]	; (4012a8 <nm_bsp_register_isr+0x68>)
  401264:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  401266:	4b11      	ldr	r3, [pc, #68]	; (4012ac <nm_bsp_register_isr+0x6c>)
  401268:	9300      	str	r3, [sp, #0]
  40126a:	2351      	movs	r3, #81	; 0x51
  40126c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401270:	2110      	movs	r1, #16
  401272:	4620      	mov	r0, r4
  401274:	4d0e      	ldr	r5, [pc, #56]	; (4012b0 <nm_bsp_register_isr+0x70>)
  401276:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401278:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40127c:	4620      	mov	r0, r4
  40127e:	4b0d      	ldr	r3, [pc, #52]	; (4012b4 <nm_bsp_register_isr+0x74>)
  401280:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401286:	4b0c      	ldr	r3, [pc, #48]	; (4012b8 <nm_bsp_register_isr+0x78>)
  401288:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  40128a:	2200      	movs	r2, #0
  40128c:	2110      	movs	r1, #16
  40128e:	4620      	mov	r0, r4
  401290:	4b0a      	ldr	r3, [pc, #40]	; (4012bc <nm_bsp_register_isr+0x7c>)
  401292:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  401294:	b003      	add	sp, #12
  401296:	bd30      	pop	{r4, r5, pc}
  401298:	20400938 	.word	0x20400938
  40129c:	004045fd 	.word	0x004045fd
  4012a0:	004041fd 	.word	0x004041fd
  4012a4:	400e1400 	.word	0x400e1400
  4012a8:	004040b9 	.word	0x004040b9
  4012ac:	0040115d 	.word	0x0040115d
  4012b0:	00404381 	.word	0x00404381
  4012b4:	004041ed 	.word	0x004041ed
  4012b8:	e000e100 	.word	0xe000e100
  4012bc:	00404451 	.word	0x00404451

004012c0 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  4012c0:	b508      	push	{r3, lr}
	if (u8Enable) {
  4012c2:	b128      	cbz	r0, 4012d0 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4012c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012c8:	4804      	ldr	r0, [pc, #16]	; (4012dc <nm_bsp_interrupt_ctrl+0x1c>)
  4012ca:	4b05      	ldr	r3, [pc, #20]	; (4012e0 <nm_bsp_interrupt_ctrl+0x20>)
  4012cc:	4798      	blx	r3
  4012ce:	bd08      	pop	{r3, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4012d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012d4:	4801      	ldr	r0, [pc, #4]	; (4012dc <nm_bsp_interrupt_ctrl+0x1c>)
  4012d6:	4b03      	ldr	r3, [pc, #12]	; (4012e4 <nm_bsp_interrupt_ctrl+0x24>)
  4012d8:	4798      	blx	r3
  4012da:	bd08      	pop	{r3, pc}
  4012dc:	400e1400 	.word	0x400e1400
  4012e0:	004041ed 	.word	0x004041ed
  4012e4:	004041f1 	.word	0x004041f1

004012e8 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4012ea:	4c39      	ldr	r4, [pc, #228]	; (4013d0 <nm_bus_init+0xe8>)
  4012ec:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4012f0:	6621      	str	r1, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4012f2:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4012f6:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4012f8:	6261      	str	r1, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4012fa:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4012fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401300:	430b      	orrs	r3, r1
  401302:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401304:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401306:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40130a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40130c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401310:	6622      	str	r2, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401312:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401316:	6562      	str	r2, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401318:	6262      	str	r2, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40131a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40131e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401320:	4313      	orrs	r3, r2
  401322:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401324:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40132a:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40132c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401330:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401332:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401336:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401338:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40133a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40133e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  401340:	4318      	orrs	r0, r3
  401342:	6720      	str	r0, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401344:	6f60      	ldr	r0, [r4, #116]	; 0x74
  401346:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40134a:	6760      	str	r0, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40134c:	6061      	str	r1, [r4, #4]
  40134e:	6062      	str	r2, [r4, #4]
  401350:	6063      	str	r3, [r4, #4]
  401352:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  401356:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  401358:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40135a:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  40135c:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40135e:	4d1d      	ldr	r5, [pc, #116]	; (4013d4 <nm_bus_init+0xec>)
  401360:	4628      	mov	r0, r5
  401362:	4b1d      	ldr	r3, [pc, #116]	; (4013d8 <nm_bus_init+0xf0>)
  401364:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  401366:	2302      	movs	r3, #2
  401368:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  40136a:	2380      	movs	r3, #128	; 0x80
  40136c:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40136e:	686b      	ldr	r3, [r5, #4]
  401370:	f043 0301 	orr.w	r3, r3, #1
  401374:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401376:	686b      	ldr	r3, [r5, #4]
  401378:	f043 0310 	orr.w	r3, r3, #16
  40137c:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  40137e:	2101      	movs	r1, #1
  401380:	4628      	mov	r0, r5
  401382:	4b16      	ldr	r3, [pc, #88]	; (4013dc <nm_bus_init+0xf4>)
  401384:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  401386:	2200      	movs	r2, #0
  401388:	2101      	movs	r1, #1
  40138a:	4628      	mov	r0, r5
  40138c:	4b14      	ldr	r3, [pc, #80]	; (4013e0 <nm_bus_init+0xf8>)
  40138e:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  401390:	2201      	movs	r2, #1
  401392:	4611      	mov	r1, r2
  401394:	4628      	mov	r0, r5
  401396:	4b13      	ldr	r3, [pc, #76]	; (4013e4 <nm_bus_init+0xfc>)
  401398:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  40139a:	2200      	movs	r2, #0
  40139c:	2101      	movs	r1, #1
  40139e:	4628      	mov	r0, r5
  4013a0:	4b11      	ldr	r3, [pc, #68]	; (4013e8 <nm_bus_init+0x100>)
  4013a2:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4013a4:	4911      	ldr	r1, [pc, #68]	; (4013ec <nm_bus_init+0x104>)
  4013a6:	4812      	ldr	r0, [pc, #72]	; (4013f0 <nm_bus_init+0x108>)
  4013a8:	4b12      	ldr	r3, [pc, #72]	; (4013f4 <nm_bus_init+0x10c>)
  4013aa:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4013ac:	b2c2      	uxtb	r2, r0
  4013ae:	2101      	movs	r1, #1
  4013b0:	4628      	mov	r0, r5
  4013b2:	4b11      	ldr	r3, [pc, #68]	; (4013f8 <nm_bus_init+0x110>)
  4013b4:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4013b6:	2300      	movs	r3, #0
  4013b8:	461a      	mov	r2, r3
  4013ba:	2101      	movs	r1, #1
  4013bc:	4628      	mov	r0, r5
  4013be:	4f0f      	ldr	r7, [pc, #60]	; (4013fc <nm_bus_init+0x114>)
  4013c0:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4013c2:	2301      	movs	r3, #1
  4013c4:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  4013c6:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  4013c8:	4b0d      	ldr	r3, [pc, #52]	; (401400 <nm_bus_init+0x118>)
  4013ca:	4798      	blx	r3
#endif
	return result;
}
  4013cc:	2000      	movs	r0, #0
  4013ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4013d0:	400e1400 	.word	0x400e1400
  4013d4:	40008000 	.word	0x40008000
  4013d8:	00404651 	.word	0x00404651
  4013dc:	0040467d 	.word	0x0040467d
  4013e0:	00404701 	.word	0x00404701
  4013e4:	00404721 	.word	0x00404721
  4013e8:	00404741 	.word	0x00404741
  4013ec:	11e1a300 	.word	0x11e1a300
  4013f0:	02dc6c00 	.word	0x02dc6c00
  4013f4:	00404755 	.word	0x00404755
  4013f8:	0040476d 	.word	0x0040476d
  4013fc:	00404799 	.word	0x00404799
  401400:	00401199 	.word	0x00401199

00401404 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  401404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401408:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40140a:	2803      	cmp	r0, #3
  40140c:	d141      	bne.n	401492 <nm_bus_ioctl+0x8e>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40140e:	680e      	ldr	r6, [r1, #0]
  401410:	684d      	ldr	r5, [r1, #4]
  401412:	890c      	ldrh	r4, [r1, #8]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  401414:	2300      	movs	r3, #0
  401416:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
  40141a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  40141e:	b136      	cbz	r6, 40142e <nm_bus_ioctl+0x2a>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
  401420:	2d00      	cmp	r5, #0
  401422:	d133      	bne.n	40148c <nm_bus_ioctl+0x88>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
  401424:	f04f 0801 	mov.w	r8, #1
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  401428:	4699      	mov	r9, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
  40142a:	ad01      	add	r5, sp, #4
  40142c:	e004      	b.n	401438 <nm_bus_ioctl+0x34>
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40142e:	f04f 0800 	mov.w	r8, #0
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
  401432:	f04f 0901 	mov.w	r9, #1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
  401436:	ae01      	add	r6, sp, #4
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
  401438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40143c:	4b1c      	ldr	r3, [pc, #112]	; (4014b0 <nm_bus_ioctl+0xac>)
  40143e:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  401440:	b1f4      	cbz	r4, 401480 <nm_bus_ioctl+0x7c>
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  401442:	4f1c      	ldr	r7, [pc, #112]	; (4014b4 <nm_bus_ioctl+0xb0>)
  401444:	f8df b084 	ldr.w	fp, [pc, #132]	; 4014cc <nm_bus_ioctl+0xc8>
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  401448:	f8df a084 	ldr.w	sl, [pc, #132]	; 4014d0 <nm_bus_ioctl+0xcc>
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40144c:	2300      	movs	r3, #0
  40144e:	461a      	mov	r2, r3
  401450:	7831      	ldrb	r1, [r6, #0]
  401452:	4638      	mov	r0, r7
  401454:	47d8      	blx	fp
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  401456:	f10d 0205 	add.w	r2, sp, #5
  40145a:	f10d 0106 	add.w	r1, sp, #6
  40145e:	4638      	mov	r0, r7
  401460:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  401462:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401466:	702b      	strb	r3, [r5, #0]

		u16Sz--;
  401468:	3c01      	subs	r4, #1
  40146a:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  40146c:	f1b8 0f00 	cmp.w	r8, #0
  401470:	d100      	bne.n	401474 <nm_bus_ioctl+0x70>
			pu8Miso++;
  401472:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  401474:	f1b9 0f00 	cmp.w	r9, #0
  401478:	d100      	bne.n	40147c <nm_bus_ioctl+0x78>
			pu8Mosi++;
  40147a:	3601      	adds	r6, #1
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  40147c:	2c00      	cmp	r4, #0
  40147e:	d1e5      	bne.n	40144c <nm_bus_ioctl+0x48>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  401480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401484:	4b0a      	ldr	r3, [pc, #40]	; (4014b0 <nm_bus_ioctl+0xac>)
  401486:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  401488:	2000      	movs	r0, #0
  40148a:	e00e      	b.n	4014aa <nm_bus_ioctl+0xa6>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
  40148c:	f06f 0005 	mvn.w	r0, #5
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
  401490:	e00b      	b.n	4014aa <nm_bus_ioctl+0xa6>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("Invalid IOCTL command!\n");
  401492:	f240 121f 	movw	r2, #287	; 0x11f
  401496:	4908      	ldr	r1, [pc, #32]	; (4014b8 <nm_bus_ioctl+0xb4>)
  401498:	4808      	ldr	r0, [pc, #32]	; (4014bc <nm_bus_ioctl+0xb8>)
  40149a:	4c09      	ldr	r4, [pc, #36]	; (4014c0 <nm_bus_ioctl+0xbc>)
  40149c:	47a0      	blx	r4
  40149e:	4809      	ldr	r0, [pc, #36]	; (4014c4 <nm_bus_ioctl+0xc0>)
  4014a0:	47a0      	blx	r4
  4014a2:	4809      	ldr	r0, [pc, #36]	; (4014c8 <nm_bus_ioctl+0xc4>)
  4014a4:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  4014a6:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4014aa:	b003      	add	sp, #12
  4014ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014b0:	400e1400 	.word	0x400e1400
  4014b4:	40008000 	.word	0x40008000
  4014b8:	0040b968 	.word	0x0040b968
  4014bc:	0040b978 	.word	0x0040b978
  4014c0:	00405195 	.word	0x00405195
  4014c4:	0040b98c 	.word	0x0040b98c
  4014c8:	0040cacc 	.word	0x0040cacc
  4014cc:	004046c9 	.word	0x004046c9
  4014d0:	00404695 	.word	0x00404695

004014d4 <nm_bus_deinit>:
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4014d4:	2202      	movs	r2, #2
  4014d6:	4b0e      	ldr	r3, [pc, #56]	; (401510 <nm_bus_deinit+0x3c>)
  4014d8:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014da:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  4014de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4014e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4014e6:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4014f0:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4014fa:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401504:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401506:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40150a:	2000      	movs	r0, #0
  40150c:	4770      	bx	lr
  40150e:	bf00      	nop
  401510:	40008000 	.word	0x40008000

00401514 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  401514:	b13a      	cbz	r2, 401526 <m2m_memcpy+0x12>
  401516:	3901      	subs	r1, #1
  401518:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40151a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40151e:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  401522:	4290      	cmp	r0, r2
  401524:	d1f9      	bne.n	40151a <m2m_memcpy+0x6>
  401526:	4770      	bx	lr

00401528 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  401528:	b122      	cbz	r2, 401534 <m2m_memset+0xc>
  40152a:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  40152c:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  401530:	4290      	cmp	r0, r2
  401532:	d1fb      	bne.n	40152c <m2m_memset+0x4>
  401534:	4770      	bx	lr
  401536:	bf00      	nop

00401538 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  401538:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  40153a:	7802      	ldrb	r2, [r0, #0]
  40153c:	b13a      	cbz	r2, 40154e <m2m_strlen+0x16>
  40153e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  401540:	3001      	adds	r0, #1
  401542:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  401544:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  401548:	2a00      	cmp	r2, #0
  40154a:	d1f9      	bne.n	401540 <m2m_strlen+0x8>
  40154c:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  40154e:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  401550:	4770      	bx	lr
  401552:	bf00      	nop

00401554 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  401554:	4a02      	ldr	r2, [pc, #8]	; (401560 <isr+0xc>)
  401556:	7813      	ldrb	r3, [r2, #0]
  401558:	3301      	adds	r3, #1
  40155a:	b2db      	uxtb	r3, r3
  40155c:	7013      	strb	r3, [r2, #0]
  40155e:	4770      	bx	lr
  401560:	20400944 	.word	0x20400944

00401564 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  401564:	4770      	bx	lr
  401566:	bf00      	nop

00401568 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
  401568:	b500      	push	{lr}
  40156a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  40156c:	2001      	movs	r0, #1
  40156e:	4b0b      	ldr	r3, [pc, #44]	; (40159c <hif_set_rx_done+0x34>)
  401570:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  401572:	a901      	add	r1, sp, #4
  401574:	f241 0070 	movw	r0, #4208	; 0x1070
  401578:	4b09      	ldr	r3, [pc, #36]	; (4015a0 <hif_set_rx_done+0x38>)
  40157a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  40157c:	4603      	mov	r3, r0
  40157e:	b940      	cbnz	r0, 401592 <hif_set_rx_done+0x2a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  401580:	9901      	ldr	r1, [sp, #4]
  401582:	f041 0102 	orr.w	r1, r1, #2
  401586:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  401588:	f241 0070 	movw	r0, #4208	; 0x1070
  40158c:	4b05      	ldr	r3, [pc, #20]	; (4015a4 <hif_set_rx_done+0x3c>)
  40158e:	4798      	blx	r3
  401590:	4603      	mov	r3, r0
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
  401592:	4618      	mov	r0, r3
  401594:	b003      	add	sp, #12
  401596:	f85d fb04 	ldr.w	pc, [sp], #4
  40159a:	bf00      	nop
  40159c:	004012c1 	.word	0x004012c1
  4015a0:	00402831 	.word	0x00402831
  4015a4:	0040283d 	.word	0x0040283d

004015a8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4015a8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4015aa:	4b11      	ldr	r3, [pc, #68]	; (4015f0 <hif_chip_wake+0x48>)
  4015ac:	781b      	ldrb	r3, [r3, #0]
  4015ae:	f013 0fff 	tst.w	r3, #255	; 0xff
  4015b2:	d115      	bne.n	4015e0 <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4015b4:	4b0f      	ldr	r3, [pc, #60]	; (4015f4 <hif_chip_wake+0x4c>)
  4015b6:	781b      	ldrb	r3, [r3, #0]
  4015b8:	b2db      	uxtb	r3, r3
  4015ba:	2b03      	cmp	r3, #3
  4015bc:	d004      	beq.n	4015c8 <hif_chip_wake+0x20>
  4015be:	4b0d      	ldr	r3, [pc, #52]	; (4015f4 <hif_chip_wake+0x4c>)
  4015c0:	781b      	ldrb	r3, [r3, #0]
  4015c2:	b2db      	uxtb	r3, r3
  4015c4:	2b04      	cmp	r3, #4
  4015c6:	d10b      	bne.n	4015e0 <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  4015c8:	4b0b      	ldr	r3, [pc, #44]	; (4015f8 <hif_chip_wake+0x50>)
  4015ca:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4015cc:	4603      	mov	r3, r0
  4015ce:	b968      	cbnz	r0, 4015ec <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  4015d0:	f245 6178 	movw	r1, #22136	; 0x5678
  4015d4:	f241 0074 	movw	r0, #4212	; 0x1074
  4015d8:	4b08      	ldr	r3, [pc, #32]	; (4015fc <hif_chip_wake+0x54>)
  4015da:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4015dc:	4603      	mov	r3, r0
  4015de:	b928      	cbnz	r0, 4015ec <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4015e0:	4a03      	ldr	r2, [pc, #12]	; (4015f0 <hif_chip_wake+0x48>)
  4015e2:	7813      	ldrb	r3, [r2, #0]
  4015e4:	3301      	adds	r3, #1
  4015e6:	b2db      	uxtb	r3, r3
  4015e8:	7013      	strb	r3, [r2, #0]
  4015ea:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4015ec:	4618      	mov	r0, r3
  4015ee:	bd08      	pop	{r3, pc}
  4015f0:	20400960 	.word	0x20400960
  4015f4:	20400950 	.word	0x20400950
  4015f8:	004023a1 	.word	0x004023a1
  4015fc:	0040283d 	.word	0x0040283d

00401600 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  401600:	b500      	push	{lr}
  401602:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  401604:	4b1d      	ldr	r3, [pc, #116]	; (40167c <hif_chip_sleep+0x7c>)
  401606:	781b      	ldrb	r3, [r3, #0]
  401608:	f013 0fff 	tst.w	r3, #255	; 0xff
  40160c:	d004      	beq.n	401618 <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  40160e:	4a1b      	ldr	r2, [pc, #108]	; (40167c <hif_chip_sleep+0x7c>)
  401610:	7813      	ldrb	r3, [r2, #0]
  401612:	3b01      	subs	r3, #1
  401614:	b2db      	uxtb	r3, r3
  401616:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  401618:	4b18      	ldr	r3, [pc, #96]	; (40167c <hif_chip_sleep+0x7c>)
  40161a:	781b      	ldrb	r3, [r3, #0]
  40161c:	f013 0fff 	tst.w	r3, #255	; 0xff
  401620:	d125      	bne.n	40166e <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  401622:	4b17      	ldr	r3, [pc, #92]	; (401680 <hif_chip_sleep+0x80>)
  401624:	781b      	ldrb	r3, [r3, #0]
  401626:	b2db      	uxtb	r3, r3
  401628:	2b03      	cmp	r3, #3
  40162a:	d004      	beq.n	401636 <hif_chip_sleep+0x36>
  40162c:	4b14      	ldr	r3, [pc, #80]	; (401680 <hif_chip_sleep+0x80>)
  40162e:	781b      	ldrb	r3, [r3, #0]
  401630:	b2db      	uxtb	r3, r3
  401632:	2b04      	cmp	r3, #4
  401634:	d11d      	bne.n	401672 <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  401636:	2300      	movs	r3, #0
  401638:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40163a:	f244 3121 	movw	r1, #17185	; 0x4321
  40163e:	f241 0074 	movw	r0, #4212	; 0x1074
  401642:	4b10      	ldr	r3, [pc, #64]	; (401684 <hif_chip_sleep+0x84>)
  401644:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  401646:	4603      	mov	r3, r0
  401648:	b9a0      	cbnz	r0, 401674 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  40164a:	a901      	add	r1, sp, #4
  40164c:	2001      	movs	r0, #1
  40164e:	4b0e      	ldr	r3, [pc, #56]	; (401688 <hif_chip_sleep+0x88>)
  401650:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  401652:	4603      	mov	r3, r0
  401654:	b970      	cbnz	r0, 401674 <hif_chip_sleep+0x74>
			if(reg&0x2)
  401656:	9901      	ldr	r1, [sp, #4]
  401658:	f011 0f02 	tst.w	r1, #2
  40165c:	d00a      	beq.n	401674 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  40165e:	f021 0102 	bic.w	r1, r1, #2
  401662:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  401664:	2001      	movs	r0, #1
  401666:	4b07      	ldr	r3, [pc, #28]	; (401684 <hif_chip_sleep+0x84>)
  401668:	4798      	blx	r3
  40166a:	4603      	mov	r3, r0
  40166c:	e002      	b.n	401674 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  40166e:	2300      	movs	r3, #0
  401670:	e000      	b.n	401674 <hif_chip_sleep+0x74>
  401672:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  401674:	4618      	mov	r0, r3
  401676:	b003      	add	sp, #12
  401678:	f85d fb04 	ldr.w	pc, [sp], #4
  40167c:	20400960 	.word	0x20400960
  401680:	20400950 	.word	0x20400950
  401684:	0040283d 	.word	0x0040283d
  401688:	00402831 	.word	0x00402831

0040168c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  40168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401690:	b087      	sub	sp, #28
  401692:	4680      	mov	r8, r0
  401694:	460f      	mov	r7, r1
  401696:	4692      	mov	sl, r2
  401698:	4699      	mov	r9, r3
  40169a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40169c:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4016a0:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4016a4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4016a8:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4016ac:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4016b0:	2308      	movs	r3, #8
  4016b2:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4016b6:	b144      	cbz	r4, 4016ca <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4016b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4016bc:	fa16 f383 	uxtah	r3, r6, r3
  4016c0:	442b      	add	r3, r5
  4016c2:	b29b      	uxth	r3, r3
  4016c4:	f8ad 3016 	strh.w	r3, [sp, #22]
  4016c8:	e006      	b.n	4016d8 <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  4016ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4016ce:	fa19 f383 	uxtah	r3, r9, r3
  4016d2:	b29b      	uxth	r3, r3
  4016d4:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  4016d8:	4b57      	ldr	r3, [pc, #348]	; (401838 <hif_send+0x1ac>)
  4016da:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4016dc:	4683      	mov	fp, r0
  4016de:	2800      	cmp	r0, #0
  4016e0:	f040 8095 	bne.w	40180e <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  4016e4:	2300      	movs	r3, #0
  4016e6:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4016e8:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4016ec:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4016ee:	9b02      	ldr	r3, [sp, #8]
  4016f0:	ea48 0303 	orr.w	r3, r8, r3
  4016f4:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4016f6:	9b02      	ldr	r3, [sp, #8]
  4016f8:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  4016fc:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4016fe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  401702:	9b02      	ldr	r3, [sp, #8]
  401704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401708:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40170a:	9902      	ldr	r1, [sp, #8]
  40170c:	f241 008c 	movw	r0, #4236	; 0x108c
  401710:	4b4a      	ldr	r3, [pc, #296]	; (40183c <hif_send+0x1b0>)
  401712:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  401714:	4683      	mov	fp, r0
  401716:	2800      	cmp	r0, #0
  401718:	f040 808a 	bne.w	401830 <hif_send+0x1a4>


		reg = 0;
  40171c:	2300      	movs	r3, #0
  40171e:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  401720:	9b02      	ldr	r3, [sp, #8]
  401722:	f043 0302 	orr.w	r3, r3, #2
  401726:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  401728:	9902      	ldr	r1, [sp, #8]
  40172a:	f241 0078 	movw	r0, #4216	; 0x1078
  40172e:	4b43      	ldr	r3, [pc, #268]	; (40183c <hif_send+0x1b0>)
  401730:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  401732:	4683      	mov	fp, r0
  401734:	2800      	cmp	r0, #0
  401736:	d17b      	bne.n	401830 <hif_send+0x1a4>
		dma_addr = 0;
  401738:	2300      	movs	r3, #0
  40173a:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  40173c:	f8ad 3006 	strh.w	r3, [sp, #6]
  401740:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401744:	b29b      	uxth	r3, r3
  401746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40174a:	d21e      	bcs.n	40178a <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  40174c:	f241 0878 	movw	r8, #4216	; 0x1078
  401750:	4f3b      	ldr	r7, [pc, #236]	; (401840 <hif_send+0x1b4>)
  401752:	a902      	add	r1, sp, #8
  401754:	4640      	mov	r0, r8
  401756:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  401758:	b9b8      	cbnz	r0, 40178a <hif_send+0xfe>
			if (!(reg & 0x2))
  40175a:	9b02      	ldr	r3, [sp, #8]
  40175c:	f013 0f02 	tst.w	r3, #2
  401760:	d107      	bne.n	401772 <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  401762:	a903      	add	r1, sp, #12
  401764:	4837      	ldr	r0, [pc, #220]	; (401844 <hif_send+0x1b8>)
  401766:	4b36      	ldr	r3, [pc, #216]	; (401840 <hif_send+0x1b4>)
  401768:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40176a:	b170      	cbz	r0, 40178a <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  40176c:	2300      	movs	r3, #0
  40176e:	9303      	str	r3, [sp, #12]
  401770:	e00b      	b.n	40178a <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  401772:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401776:	3301      	adds	r3, #1
  401778:	b29b      	uxth	r3, r3
  40177a:	f8ad 3006 	strh.w	r3, [sp, #6]
  40177e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401782:	b29b      	uxth	r3, r3
  401784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401788:	d3e3      	bcc.n	401752 <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  40178a:	9b03      	ldr	r3, [sp, #12]
  40178c:	2b00      	cmp	r3, #0
  40178e:	d04d      	beq.n	40182c <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  401790:	9b03      	ldr	r3, [sp, #12]
  401792:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  401794:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  401798:	b29b      	uxth	r3, r3
  40179a:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  40179e:	9804      	ldr	r0, [sp, #16]
  4017a0:	2208      	movs	r2, #8
  4017a2:	a905      	add	r1, sp, #20
  4017a4:	4b28      	ldr	r3, [pc, #160]	; (401848 <hif_send+0x1bc>)
  4017a6:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4017a8:	4683      	mov	fp, r0
  4017aa:	2800      	cmp	r0, #0
  4017ac:	d140      	bne.n	401830 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4017ae:	9b04      	ldr	r3, [sp, #16]
  4017b0:	3308      	adds	r3, #8
  4017b2:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4017b4:	f1ba 0f00 	cmp.w	sl, #0
  4017b8:	d00a      	beq.n	4017d0 <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4017ba:	9804      	ldr	r0, [sp, #16]
  4017bc:	464a      	mov	r2, r9
  4017be:	4651      	mov	r1, sl
  4017c0:	4b21      	ldr	r3, [pc, #132]	; (401848 <hif_send+0x1bc>)
  4017c2:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4017c4:	4683      	mov	fp, r0
  4017c6:	2800      	cmp	r0, #0
  4017c8:	d132      	bne.n	401830 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4017ca:	9b04      	ldr	r3, [sp, #16]
  4017cc:	444b      	add	r3, r9
  4017ce:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4017d0:	b174      	cbz	r4, 4017f0 <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4017d2:	9b04      	ldr	r3, [sp, #16]
  4017d4:	ebc9 0505 	rsb	r5, r9, r5
  4017d8:	441d      	add	r5, r3
  4017da:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4017dc:	9804      	ldr	r0, [sp, #16]
  4017de:	4632      	mov	r2, r6
  4017e0:	4621      	mov	r1, r4
  4017e2:	4b19      	ldr	r3, [pc, #100]	; (401848 <hif_send+0x1bc>)
  4017e4:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4017e6:	4683      	mov	fp, r0
  4017e8:	bb10      	cbnz	r0, 401830 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4017ea:	9b04      	ldr	r3, [sp, #16]
  4017ec:	441e      	add	r6, r3
  4017ee:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4017f0:	9b03      	ldr	r3, [sp, #12]
  4017f2:	009b      	lsls	r3, r3, #2
  4017f4:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4017f6:	9b02      	ldr	r3, [sp, #8]
  4017f8:	f043 0302 	orr.w	r3, r3, #2
  4017fc:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4017fe:	9902      	ldr	r1, [sp, #8]
  401800:	f241 006c 	movw	r0, #4204	; 0x106c
  401804:	4b0d      	ldr	r3, [pc, #52]	; (40183c <hif_send+0x1b0>)
  401806:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  401808:	4683      	mov	fp, r0
  40180a:	b988      	cbnz	r0, 401830 <hif_send+0x1a4>
  40180c:	e00a      	b.n	401824 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  40180e:	f240 129f 	movw	r2, #415	; 0x19f
  401812:	490e      	ldr	r1, [pc, #56]	; (40184c <hif_send+0x1c0>)
  401814:	480e      	ldr	r0, [pc, #56]	; (401850 <hif_send+0x1c4>)
  401816:	4c0f      	ldr	r4, [pc, #60]	; (401854 <hif_send+0x1c8>)
  401818:	47a0      	blx	r4
  40181a:	480f      	ldr	r0, [pc, #60]	; (401858 <hif_send+0x1cc>)
  40181c:	47a0      	blx	r4
  40181e:	480f      	ldr	r0, [pc, #60]	; (40185c <hif_send+0x1d0>)
  401820:	47a0      	blx	r4
		goto ERR1;
  401822:	e005      	b.n	401830 <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  401824:	4b0e      	ldr	r3, [pc, #56]	; (401860 <hif_send+0x1d4>)
  401826:	4798      	blx	r3
  401828:	4683      	mov	fp, r0
  40182a:	e001      	b.n	401830 <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  40182c:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  401830:	4658      	mov	r0, fp
  401832:	b007      	add	sp, #28
  401834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401838:	004015a9 	.word	0x004015a9
  40183c:	0040283d 	.word	0x0040283d
  401840:	00402831 	.word	0x00402831
  401844:	00150400 	.word	0x00150400
  401848:	004028a9 	.word	0x004028a9
  40184c:	0040bbfc 	.word	0x0040bbfc
  401850:	0040b978 	.word	0x0040b978
  401854:	00405195 	.word	0x00405195
  401858:	0040b9b8 	.word	0x0040b9b8
  40185c:	0040cacc 	.word	0x0040cacc
  401860:	00401601 	.word	0x00401601

00401864 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  401864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401868:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40186a:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 401b68 <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  40186e:	4fa3      	ldr	r7, [pc, #652]	; (401afc <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  401870:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 401b6c <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  401874:	4ea2      	ldr	r6, [pc, #648]	; (401b00 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  401876:	e17b      	b.n	401b70 <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  401878:	f899 3000 	ldrb.w	r3, [r9]
  40187c:	3b01      	subs	r3, #1
  40187e:	b2db      	uxtb	r3, r3
  401880:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  401884:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  401886:	4604      	mov	r4, r0
  401888:	2800      	cmp	r0, #0
  40188a:	f040 811a 	bne.w	401ac2 <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  40188e:	a903      	add	r1, sp, #12
  401890:	f241 0070 	movw	r0, #4208	; 0x1070
  401894:	4b9b      	ldr	r3, [pc, #620]	; (401b04 <hif_handle_isr+0x2a0>)
  401896:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  401898:	4604      	mov	r4, r0
  40189a:	2800      	cmp	r0, #0
  40189c:	f040 8106 	bne.w	401aac <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  4018a0:	9b03      	ldr	r3, [sp, #12]
  4018a2:	f013 0f01 	tst.w	r3, #1
  4018a6:	f000 80f5 	beq.w	401a94 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  4018aa:	4b97      	ldr	r3, [pc, #604]	; (401b08 <hif_handle_isr+0x2a4>)
  4018ac:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  4018ae:	9903      	ldr	r1, [sp, #12]
  4018b0:	f021 0101 	bic.w	r1, r1, #1
  4018b4:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4018b6:	f241 0070 	movw	r0, #4208	; 0x1070
  4018ba:	4b94      	ldr	r3, [pc, #592]	; (401b0c <hif_handle_isr+0x2a8>)
  4018bc:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  4018be:	4604      	mov	r4, r0
  4018c0:	2800      	cmp	r0, #0
  4018c2:	f040 810e 	bne.w	401ae2 <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  4018c6:	2200      	movs	r2, #0
  4018c8:	4b91      	ldr	r3, [pc, #580]	; (401b10 <hif_handle_isr+0x2ac>)
  4018ca:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  4018cc:	9d03      	ldr	r5, [sp, #12]
  4018ce:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  4018d2:	2d00      	cmp	r5, #0
  4018d4:	f000 80d1 	beq.w	401a7a <hif_handle_isr+0x216>
					uint32 address = 0;
  4018d8:	a906      	add	r1, sp, #24
  4018da:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  4018de:	f241 0084 	movw	r0, #4228	; 0x1084
  4018e2:	4b88      	ldr	r3, [pc, #544]	; (401b04 <hif_handle_isr+0x2a0>)
  4018e4:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  4018e6:	4604      	mov	r4, r0
  4018e8:	b168      	cbz	r0, 401906 <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  4018ea:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  4018ee:	4641      	mov	r1, r8
  4018f0:	4630      	mov	r0, r6
  4018f2:	4d88      	ldr	r5, [pc, #544]	; (401b14 <hif_handle_isr+0x2b0>)
  4018f4:	47a8      	blx	r5
  4018f6:	4888      	ldr	r0, [pc, #544]	; (401b18 <hif_handle_isr+0x2b4>)
  4018f8:	47a8      	blx	r5
  4018fa:	4888      	ldr	r0, [pc, #544]	; (401b1c <hif_handle_isr+0x2b8>)
  4018fc:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4018fe:	2001      	movs	r0, #1
  401900:	4b81      	ldr	r3, [pc, #516]	; (401b08 <hif_handle_isr+0x2a4>)
  401902:	4798      	blx	r3
  401904:	e0eb      	b.n	401ade <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  401906:	2204      	movs	r2, #4
  401908:	a904      	add	r1, sp, #16
  40190a:	9805      	ldr	r0, [sp, #20]
  40190c:	4b84      	ldr	r3, [pc, #528]	; (401b20 <hif_handle_isr+0x2bc>)
  40190e:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  401910:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  401914:	b29b      	uxth	r3, r3
  401916:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  40191a:	4604      	mov	r4, r0
  40191c:	b168      	cbz	r0, 40193a <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  40191e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  401922:	4641      	mov	r1, r8
  401924:	4630      	mov	r0, r6
  401926:	4d7b      	ldr	r5, [pc, #492]	; (401b14 <hif_handle_isr+0x2b0>)
  401928:	47a8      	blx	r5
  40192a:	487e      	ldr	r0, [pc, #504]	; (401b24 <hif_handle_isr+0x2c0>)
  40192c:	47a8      	blx	r5
  40192e:	487b      	ldr	r0, [pc, #492]	; (401b1c <hif_handle_isr+0x2b8>)
  401930:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  401932:	2001      	movs	r0, #1
  401934:	4b74      	ldr	r3, [pc, #464]	; (401b08 <hif_handle_isr+0x2a4>)
  401936:	4798      	blx	r3
  401938:	e0d1      	b.n	401ade <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  40193a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40193e:	b29b      	uxth	r3, r3
  401940:	429d      	cmp	r5, r3
  401942:	d01e      	beq.n	401982 <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  401944:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  401948:	b29b      	uxth	r3, r3
  40194a:	1aeb      	subs	r3, r5, r3
  40194c:	2b04      	cmp	r3, #4
  40194e:	dd18      	ble.n	401982 <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  401950:	f240 12df 	movw	r2, #479	; 0x1df
  401954:	4641      	mov	r1, r8
  401956:	4630      	mov	r0, r6
  401958:	4c6e      	ldr	r4, [pc, #440]	; (401b14 <hif_handle_isr+0x2b0>)
  40195a:	47a0      	blx	r4
  40195c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  401960:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401964:	f89d 1011 	ldrb.w	r1, [sp, #17]
  401968:	9100      	str	r1, [sp, #0]
  40196a:	b292      	uxth	r2, r2
  40196c:	4629      	mov	r1, r5
  40196e:	486e      	ldr	r0, [pc, #440]	; (401b28 <hif_handle_isr+0x2c4>)
  401970:	47a0      	blx	r4
  401972:	486a      	ldr	r0, [pc, #424]	; (401b1c <hif_handle_isr+0x2b8>)
  401974:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  401976:	2001      	movs	r0, #1
  401978:	4b63      	ldr	r3, [pc, #396]	; (401b08 <hif_handle_isr+0x2a4>)
  40197a:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  40197c:	f06f 0405 	mvn.w	r4, #5
  401980:	e0ad      	b.n	401ade <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  401982:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401986:	b2db      	uxtb	r3, r3
  401988:	2b01      	cmp	r3, #1
  40198a:	d10d      	bne.n	4019a8 <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  40198c:	4b67      	ldr	r3, [pc, #412]	; (401b2c <hif_handle_isr+0x2c8>)
  40198e:	681b      	ldr	r3, [r3, #0]
  401990:	2b00      	cmp	r3, #0
  401992:	d060      	beq.n	401a56 <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401994:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401998:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40199c:	3908      	subs	r1, #8
  40199e:	9a05      	ldr	r2, [sp, #20]
  4019a0:	3208      	adds	r2, #8
  4019a2:	b289      	uxth	r1, r1
  4019a4:	4798      	blx	r3
  4019a6:	e056      	b.n	401a56 <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4019a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4019ac:	b2db      	uxtb	r3, r3
  4019ae:	2b02      	cmp	r3, #2
  4019b0:	d10d      	bne.n	4019ce <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  4019b2:	4b5f      	ldr	r3, [pc, #380]	; (401b30 <hif_handle_isr+0x2cc>)
  4019b4:	681b      	ldr	r3, [r3, #0]
  4019b6:	2b00      	cmp	r3, #0
  4019b8:	d04d      	beq.n	401a56 <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4019ba:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4019be:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4019c2:	3908      	subs	r1, #8
  4019c4:	9a05      	ldr	r2, [sp, #20]
  4019c6:	3208      	adds	r2, #8
  4019c8:	b289      	uxth	r1, r1
  4019ca:	4798      	blx	r3
  4019cc:	e043      	b.n	401a56 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4019ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4019d2:	b2db      	uxtb	r3, r3
  4019d4:	2b04      	cmp	r3, #4
  4019d6:	d10d      	bne.n	4019f4 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  4019d8:	4b56      	ldr	r3, [pc, #344]	; (401b34 <hif_handle_isr+0x2d0>)
  4019da:	681b      	ldr	r3, [r3, #0]
  4019dc:	2b00      	cmp	r3, #0
  4019de:	d03a      	beq.n	401a56 <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4019e0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4019e4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4019e8:	3908      	subs	r1, #8
  4019ea:	9a05      	ldr	r2, [sp, #20]
  4019ec:	3208      	adds	r2, #8
  4019ee:	b289      	uxth	r1, r1
  4019f0:	4798      	blx	r3
  4019f2:	e030      	b.n	401a56 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4019f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4019f8:	b2db      	uxtb	r3, r3
  4019fa:	2b06      	cmp	r3, #6
  4019fc:	d10c      	bne.n	401a18 <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  4019fe:	4b4e      	ldr	r3, [pc, #312]	; (401b38 <hif_handle_isr+0x2d4>)
  401a00:	681b      	ldr	r3, [r3, #0]
  401a02:	b343      	cbz	r3, 401a56 <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401a04:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401a08:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  401a0c:	3908      	subs	r1, #8
  401a0e:	9a05      	ldr	r2, [sp, #20]
  401a10:	3208      	adds	r2, #8
  401a12:	b289      	uxth	r1, r1
  401a14:	4798      	blx	r3
  401a16:	e01e      	b.n	401a56 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  401a18:	f89d 3010 	ldrb.w	r3, [sp, #16]
  401a1c:	b2db      	uxtb	r3, r3
  401a1e:	2b07      	cmp	r3, #7
  401a20:	d10c      	bne.n	401a3c <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  401a22:	4b46      	ldr	r3, [pc, #280]	; (401b3c <hif_handle_isr+0x2d8>)
  401a24:	681b      	ldr	r3, [r3, #0]
  401a26:	b1b3      	cbz	r3, 401a56 <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  401a28:	f89d 0011 	ldrb.w	r0, [sp, #17]
  401a2c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  401a30:	3908      	subs	r1, #8
  401a32:	9a05      	ldr	r2, [sp, #20]
  401a34:	3208      	adds	r2, #8
  401a36:	b289      	uxth	r1, r1
  401a38:	4798      	blx	r3
  401a3a:	e00c      	b.n	401a56 <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  401a3c:	f240 2202 	movw	r2, #514	; 0x202
  401a40:	4641      	mov	r1, r8
  401a42:	4630      	mov	r0, r6
  401a44:	4c33      	ldr	r4, [pc, #204]	; (401b14 <hif_handle_isr+0x2b0>)
  401a46:	47a0      	blx	r4
  401a48:	483d      	ldr	r0, [pc, #244]	; (401b40 <hif_handle_isr+0x2dc>)
  401a4a:	47a0      	blx	r4
  401a4c:	4833      	ldr	r0, [pc, #204]	; (401b1c <hif_handle_isr+0x2b8>)
  401a4e:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  401a50:	f06f 0405 	mvn.w	r4, #5
  401a54:	e043      	b.n	401ade <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  401a56:	4b2e      	ldr	r3, [pc, #184]	; (401b10 <hif_handle_isr+0x2ac>)
  401a58:	781b      	ldrb	r3, [r3, #0]
  401a5a:	f013 0fff 	tst.w	r3, #255	; 0xff
  401a5e:	d13b      	bne.n	401ad8 <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  401a60:	f240 2209 	movw	r2, #521	; 0x209
  401a64:	4641      	mov	r1, r8
  401a66:	4630      	mov	r0, r6
  401a68:	4c2a      	ldr	r4, [pc, #168]	; (401b14 <hif_handle_isr+0x2b0>)
  401a6a:	47a0      	blx	r4
  401a6c:	4835      	ldr	r0, [pc, #212]	; (401b44 <hif_handle_isr+0x2e0>)
  401a6e:	47a0      	blx	r4
  401a70:	482a      	ldr	r0, [pc, #168]	; (401b1c <hif_handle_isr+0x2b8>)
  401a72:	47a0      	blx	r4
						ret = hif_set_rx_done();
  401a74:	4b34      	ldr	r3, [pc, #208]	; (401b48 <hif_handle_isr+0x2e4>)
  401a76:	4798      	blx	r3
  401a78:	e02e      	b.n	401ad8 <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  401a7a:	f240 2211 	movw	r2, #529	; 0x211
  401a7e:	4641      	mov	r1, r8
  401a80:	4630      	mov	r0, r6
  401a82:	4c24      	ldr	r4, [pc, #144]	; (401b14 <hif_handle_isr+0x2b0>)
  401a84:	47a0      	blx	r4
  401a86:	4831      	ldr	r0, [pc, #196]	; (401b4c <hif_handle_isr+0x2e8>)
  401a88:	47a0      	blx	r4
  401a8a:	4824      	ldr	r0, [pc, #144]	; (401b1c <hif_handle_isr+0x2b8>)
  401a8c:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  401a8e:	f06f 0401 	mvn.w	r4, #1
  401a92:	e026      	b.n	401ae2 <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  401a94:	f44f 7206 	mov.w	r2, #536	; 0x218
  401a98:	4641      	mov	r1, r8
  401a9a:	4630      	mov	r0, r6
  401a9c:	4c1d      	ldr	r4, [pc, #116]	; (401b14 <hif_handle_isr+0x2b0>)
  401a9e:	47a0      	blx	r4
  401aa0:	9903      	ldr	r1, [sp, #12]
  401aa2:	482b      	ldr	r0, [pc, #172]	; (401b50 <hif_handle_isr+0x2ec>)
  401aa4:	47a0      	blx	r4
  401aa6:	481d      	ldr	r0, [pc, #116]	; (401b1c <hif_handle_isr+0x2b8>)
  401aa8:	47a0      	blx	r4
  401aaa:	e015      	b.n	401ad8 <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  401aac:	f240 221e 	movw	r2, #542	; 0x21e
  401ab0:	4641      	mov	r1, r8
  401ab2:	4630      	mov	r0, r6
  401ab4:	4d17      	ldr	r5, [pc, #92]	; (401b14 <hif_handle_isr+0x2b0>)
  401ab6:	47a8      	blx	r5
  401ab8:	4826      	ldr	r0, [pc, #152]	; (401b54 <hif_handle_isr+0x2f0>)
  401aba:	47a8      	blx	r5
  401abc:	4817      	ldr	r0, [pc, #92]	; (401b1c <hif_handle_isr+0x2b8>)
  401abe:	47a8      	blx	r5
  401ac0:	e00f      	b.n	401ae2 <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  401ac2:	f44f 7209 	mov.w	r2, #548	; 0x224
  401ac6:	4641      	mov	r1, r8
  401ac8:	4630      	mov	r0, r6
  401aca:	4d12      	ldr	r5, [pc, #72]	; (401b14 <hif_handle_isr+0x2b0>)
  401acc:	47a8      	blx	r5
  401ace:	4822      	ldr	r0, [pc, #136]	; (401b58 <hif_handle_isr+0x2f4>)
  401ad0:	47a8      	blx	r5
  401ad2:	4812      	ldr	r0, [pc, #72]	; (401b1c <hif_handle_isr+0x2b8>)
  401ad4:	47a8      	blx	r5
  401ad6:	e004      	b.n	401ae2 <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  401ad8:	4b20      	ldr	r3, [pc, #128]	; (401b5c <hif_handle_isr+0x2f8>)
  401ada:	4798      	blx	r3
  401adc:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  401ade:	2c00      	cmp	r4, #0
  401ae0:	d046      	beq.n	401b70 <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  401ae2:	f240 2243 	movw	r2, #579	; 0x243
  401ae6:	491e      	ldr	r1, [pc, #120]	; (401b60 <hif_handle_isr+0x2fc>)
  401ae8:	4630      	mov	r0, r6
  401aea:	4d0a      	ldr	r5, [pc, #40]	; (401b14 <hif_handle_isr+0x2b0>)
  401aec:	47a8      	blx	r5
  401aee:	4621      	mov	r1, r4
  401af0:	481c      	ldr	r0, [pc, #112]	; (401b64 <hif_handle_isr+0x300>)
  401af2:	47a8      	blx	r5
  401af4:	4809      	ldr	r0, [pc, #36]	; (401b1c <hif_handle_isr+0x2b8>)
  401af6:	47a8      	blx	r5
			}
		}
  401af8:	e6c4      	b.n	401884 <hif_handle_isr+0x20>
  401afa:	bf00      	nop
  401afc:	004015a9 	.word	0x004015a9
  401b00:	0040b978 	.word	0x0040b978
  401b04:	00402831 	.word	0x00402831
  401b08:	004012c1 	.word	0x004012c1
  401b0c:	0040283d 	.word	0x0040283d
  401b10:	20400958 	.word	0x20400958
  401b14:	00405195 	.word	0x00405195
  401b18:	0040b9d8 	.word	0x0040b9d8
  401b1c:	0040cacc 	.word	0x0040cacc
  401b20:	00402849 	.word	0x00402849
  401b24:	0040ba00 	.word	0x0040ba00
  401b28:	0040ba18 	.word	0x0040ba18
  401b2c:	20400940 	.word	0x20400940
  401b30:	20400954 	.word	0x20400954
  401b34:	2040095c 	.word	0x2040095c
  401b38:	2040093c 	.word	0x2040093c
  401b3c:	2040094c 	.word	0x2040094c
  401b40:	0040ba58 	.word	0x0040ba58
  401b44:	0040ba70 	.word	0x0040ba70
  401b48:	00401569 	.word	0x00401569
  401b4c:	0040ba94 	.word	0x0040ba94
  401b50:	0040baa8 	.word	0x0040baa8
  401b54:	0040bac4 	.word	0x0040bac4
  401b58:	0040bae8 	.word	0x0040bae8
  401b5c:	00401601 	.word	0x00401601
  401b60:	0040bc08 	.word	0x0040bc08
  401b64:	0040bb08 	.word	0x0040bb08
  401b68:	20400944 	.word	0x20400944
  401b6c:	0040b9a4 	.word	0x0040b9a4

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  401b70:	f899 3000 	ldrb.w	r3, [r9]
  401b74:	f013 0fff 	tst.w	r3, #255	; 0xff
  401b78:	f47f ae7e 	bne.w	401878 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  401b7c:	2000      	movs	r0, #0
  401b7e:	b007      	add	sp, #28
  401b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00401b84 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  401b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401b88:	b083      	sub	sp, #12
  401b8a:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  401b8c:	2a00      	cmp	r2, #0
  401b8e:	bf18      	it	ne
  401b90:	2900      	cmpne	r1, #0
  401b92:	d003      	beq.n	401b9c <hif_receive+0x18>
  401b94:	4605      	mov	r5, r0
  401b96:	460f      	mov	r7, r1
  401b98:	4616      	mov	r6, r2
  401b9a:	b9a0      	cbnz	r0, 401bc6 <hif_receive+0x42>
	{
		if(isDone)
  401b9c:	b134      	cbz	r4, 401bac <hif_receive+0x28>
		{
			gu8HifSizeDone = 1;
  401b9e:	2201      	movs	r2, #1
  401ba0:	4b31      	ldr	r3, [pc, #196]	; (401c68 <hif_receive+0xe4>)
  401ba2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  401ba4:	4b31      	ldr	r3, [pc, #196]	; (401c6c <hif_receive+0xe8>)
  401ba6:	4798      	blx	r3
  401ba8:	4603      	mov	r3, r0
  401baa:	e058      	b.n	401c5e <hif_receive+0xda>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  401bac:	f240 2269 	movw	r2, #617	; 0x269
  401bb0:	492f      	ldr	r1, [pc, #188]	; (401c70 <hif_receive+0xec>)
  401bb2:	4830      	ldr	r0, [pc, #192]	; (401c74 <hif_receive+0xf0>)
  401bb4:	4c30      	ldr	r4, [pc, #192]	; (401c78 <hif_receive+0xf4>)
  401bb6:	47a0      	blx	r4
  401bb8:	4830      	ldr	r0, [pc, #192]	; (401c7c <hif_receive+0xf8>)
  401bba:	47a0      	blx	r4
  401bbc:	4830      	ldr	r0, [pc, #192]	; (401c80 <hif_receive+0xfc>)
  401bbe:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  401bc0:	f06f 030b 	mvn.w	r3, #11
  401bc4:	e04b      	b.n	401c5e <hif_receive+0xda>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  401bc6:	4669      	mov	r1, sp
  401bc8:	f241 0070 	movw	r0, #4208	; 0x1070
  401bcc:	4b2d      	ldr	r3, [pc, #180]	; (401c84 <hif_receive+0x100>)
  401bce:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401bd0:	4603      	mov	r3, r0
  401bd2:	2800      	cmp	r0, #0
  401bd4:	d143      	bne.n	401c5e <hif_receive+0xda>


	size = (uint16)((reg >> 2) & 0xfff);
  401bd6:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  401bda:	a901      	add	r1, sp, #4
  401bdc:	f241 0084 	movw	r0, #4228	; 0x1084
  401be0:	4b28      	ldr	r3, [pc, #160]	; (401c84 <hif_receive+0x100>)
  401be2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401be4:	4603      	mov	r3, r0
  401be6:	2800      	cmp	r0, #0
  401be8:	d139      	bne.n	401c5e <hif_receive+0xda>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  401bea:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  401bee:	4546      	cmp	r6, r8
  401bf0:	d90e      	bls.n	401c10 <hif_receive+0x8c>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  401bf2:	f240 227a 	movw	r2, #634	; 0x27a
  401bf6:	491e      	ldr	r1, [pc, #120]	; (401c70 <hif_receive+0xec>)
  401bf8:	481e      	ldr	r0, [pc, #120]	; (401c74 <hif_receive+0xf0>)
  401bfa:	4c1f      	ldr	r4, [pc, #124]	; (401c78 <hif_receive+0xf4>)
  401bfc:	47a0      	blx	r4
  401bfe:	4642      	mov	r2, r8
  401c00:	4631      	mov	r1, r6
  401c02:	4821      	ldr	r0, [pc, #132]	; (401c88 <hif_receive+0x104>)
  401c04:	47a0      	blx	r4
  401c06:	481e      	ldr	r0, [pc, #120]	; (401c80 <hif_receive+0xfc>)
  401c08:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  401c0a:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  401c0e:	e026      	b.n	401c5e <hif_receive+0xda>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  401c10:	9b01      	ldr	r3, [sp, #4]
  401c12:	429d      	cmp	r5, r3
  401c14:	d304      	bcc.n	401c20 <hif_receive+0x9c>
  401c16:	eb05 0906 	add.w	r9, r5, r6
  401c1a:	4443      	add	r3, r8
  401c1c:	4599      	cmp	r9, r3
  401c1e:	d90c      	bls.n	401c3a <hif_receive+0xb6>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  401c20:	f44f 7220 	mov.w	r2, #640	; 0x280
  401c24:	4912      	ldr	r1, [pc, #72]	; (401c70 <hif_receive+0xec>)
  401c26:	4813      	ldr	r0, [pc, #76]	; (401c74 <hif_receive+0xf0>)
  401c28:	4c13      	ldr	r4, [pc, #76]	; (401c78 <hif_receive+0xf4>)
  401c2a:	47a0      	blx	r4
  401c2c:	4817      	ldr	r0, [pc, #92]	; (401c8c <hif_receive+0x108>)
  401c2e:	47a0      	blx	r4
  401c30:	4813      	ldr	r0, [pc, #76]	; (401c80 <hif_receive+0xfc>)
  401c32:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  401c34:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  401c38:	e011      	b.n	401c5e <hif_receive+0xda>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  401c3a:	4632      	mov	r2, r6
  401c3c:	4639      	mov	r1, r7
  401c3e:	4628      	mov	r0, r5
  401c40:	4b13      	ldr	r3, [pc, #76]	; (401c90 <hif_receive+0x10c>)
  401c42:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  401c44:	4603      	mov	r3, r0
  401c46:	b950      	cbnz	r0, 401c5e <hif_receive+0xda>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  401c48:	9a01      	ldr	r2, [sp, #4]
  401c4a:	4442      	add	r2, r8
  401c4c:	454a      	cmp	r2, r9
  401c4e:	d000      	beq.n	401c52 <hif_receive+0xce>
  401c50:	b12c      	cbz	r4, 401c5e <hif_receive+0xda>
	{
		gu8HifSizeDone = 1;
  401c52:	2201      	movs	r2, #1
  401c54:	4b04      	ldr	r3, [pc, #16]	; (401c68 <hif_receive+0xe4>)
  401c56:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  401c58:	4b04      	ldr	r3, [pc, #16]	; (401c6c <hif_receive+0xe8>)
  401c5a:	4798      	blx	r3
  401c5c:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  401c5e:	4618      	mov	r0, r3
  401c60:	b003      	add	sp, #12
  401c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401c66:	bf00      	nop
  401c68:	20400958 	.word	0x20400958
  401c6c:	00401569 	.word	0x00401569
  401c70:	0040b9ac 	.word	0x0040b9ac
  401c74:	0040b978 	.word	0x0040b978
  401c78:	00405195 	.word	0x00405195
  401c7c:	0040bb38 	.word	0x0040bb38
  401c80:	0040cacc 	.word	0x0040cacc
  401c84:	00402831 	.word	0x00402831
  401c88:	0040bb58 	.word	0x0040bb58
  401c8c:	0040bb9c 	.word	0x0040bb9c
  401c90:	00402849 	.word	0x00402849

00401c94 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  401c94:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  401c96:	1e43      	subs	r3, r0, #1
  401c98:	2b06      	cmp	r3, #6
  401c9a:	d81d      	bhi.n	401cd8 <hif_register_cb+0x44>
  401c9c:	e8df f003 	tbb	[pc, r3]
  401ca0:	0c100408 	.word	0x0c100408
  401ca4:	141c      	.short	0x141c
  401ca6:	18          	.byte	0x18
  401ca7:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  401ca8:	4b13      	ldr	r3, [pc, #76]	; (401cf8 <hif_register_cb+0x64>)
  401caa:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401cac:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  401cae:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  401cb0:	4b12      	ldr	r3, [pc, #72]	; (401cfc <hif_register_cb+0x68>)
  401cb2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401cb4:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  401cb6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  401cb8:	4b11      	ldr	r3, [pc, #68]	; (401d00 <hif_register_cb+0x6c>)
  401cba:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401cbc:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  401cbe:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  401cc0:	4b10      	ldr	r3, [pc, #64]	; (401d04 <hif_register_cb+0x70>)
  401cc2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401cc4:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  401cc6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  401cc8:	4b0f      	ldr	r3, [pc, #60]	; (401d08 <hif_register_cb+0x74>)
  401cca:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401ccc:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  401cce:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  401cd0:	4b0e      	ldr	r3, [pc, #56]	; (401d0c <hif_register_cb+0x78>)
  401cd2:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  401cd4:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  401cd6:	bd38      	pop	{r3, r4, r5, pc}
  401cd8:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  401cda:	f240 22b9 	movw	r2, #697	; 0x2b9
  401cde:	490c      	ldr	r1, [pc, #48]	; (401d10 <hif_register_cb+0x7c>)
  401ce0:	480c      	ldr	r0, [pc, #48]	; (401d14 <hif_register_cb+0x80>)
  401ce2:	4d0d      	ldr	r5, [pc, #52]	; (401d18 <hif_register_cb+0x84>)
  401ce4:	47a8      	blx	r5
  401ce6:	4621      	mov	r1, r4
  401ce8:	480c      	ldr	r0, [pc, #48]	; (401d1c <hif_register_cb+0x88>)
  401cea:	47a8      	blx	r5
  401cec:	480c      	ldr	r0, [pc, #48]	; (401d20 <hif_register_cb+0x8c>)
  401cee:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  401cf0:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  401cf4:	bd38      	pop	{r3, r4, r5, pc}
  401cf6:	bf00      	nop
  401cf8:	20400954 	.word	0x20400954
  401cfc:	20400940 	.word	0x20400940
  401d00:	2040095c 	.word	0x2040095c
  401d04:	20400948 	.word	0x20400948
  401d08:	2040093c 	.word	0x2040093c
  401d0c:	2040094c 	.word	0x2040094c
  401d10:	0040bbec 	.word	0x0040bbec
  401d14:	0040b978 	.word	0x0040b978
  401d18:	00405195 	.word	0x00405195
  401d1c:	0040bbe0 	.word	0x0040bbe0
  401d20:	0040cacc 	.word	0x0040cacc

00401d24 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  401d24:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  401d26:	2400      	movs	r4, #0
  401d28:	4b09      	ldr	r3, [pc, #36]	; (401d50 <hif_init+0x2c>)
  401d2a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  401d2c:	4b09      	ldr	r3, [pc, #36]	; (401d54 <hif_init+0x30>)
  401d2e:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  401d30:	4b09      	ldr	r3, [pc, #36]	; (401d58 <hif_init+0x34>)
  401d32:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  401d34:	4b09      	ldr	r3, [pc, #36]	; (401d5c <hif_init+0x38>)
  401d36:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  401d38:	4b09      	ldr	r3, [pc, #36]	; (401d60 <hif_init+0x3c>)
  401d3a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  401d3c:	4809      	ldr	r0, [pc, #36]	; (401d64 <hif_init+0x40>)
  401d3e:	4b0a      	ldr	r3, [pc, #40]	; (401d68 <hif_init+0x44>)
  401d40:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  401d42:	490a      	ldr	r1, [pc, #40]	; (401d6c <hif_init+0x48>)
  401d44:	2003      	movs	r0, #3
  401d46:	4b0a      	ldr	r3, [pc, #40]	; (401d70 <hif_init+0x4c>)
  401d48:	4798      	blx	r3

	return M2M_SUCCESS;
}
  401d4a:	4620      	mov	r0, r4
  401d4c:	bd10      	pop	{r4, pc}
  401d4e:	bf00      	nop
  401d50:	20400940 	.word	0x20400940
  401d54:	20400954 	.word	0x20400954
  401d58:	20400960 	.word	0x20400960
  401d5c:	20400950 	.word	0x20400950
  401d60:	20400944 	.word	0x20400944
  401d64:	00401555 	.word	0x00401555
  401d68:	00401241 	.word	0x00401241
  401d6c:	00401565 	.word	0x00401565
  401d70:	00401c95 	.word	0x00401c95

00401d74 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  401d74:	b530      	push	{r4, r5, lr}
  401d76:	b09f      	sub	sp, #124	; 0x7c
  401d78:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  401d7a:	282c      	cmp	r0, #44	; 0x2c
  401d7c:	d111      	bne.n	401da2 <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  401d7e:	2300      	movs	r3, #0
  401d80:	2204      	movs	r2, #4
  401d82:	a903      	add	r1, sp, #12
  401d84:	4628      	mov	r0, r5
  401d86:	4c90      	ldr	r4, [pc, #576]	; (401fc8 <m2m_wifi_cb+0x254>)
  401d88:	47a0      	blx	r4
  401d8a:	2800      	cmp	r0, #0
  401d8c:	f040 8119 	bne.w	401fc2 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401d90:	4b8e      	ldr	r3, [pc, #568]	; (401fcc <m2m_wifi_cb+0x258>)
  401d92:	681b      	ldr	r3, [r3, #0]
  401d94:	2b00      	cmp	r3, #0
  401d96:	f000 8114 	beq.w	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  401d9a:	a903      	add	r1, sp, #12
  401d9c:	202c      	movs	r0, #44	; 0x2c
  401d9e:	4798      	blx	r3
  401da0:	e10f      	b.n	401fc2 <m2m_wifi_cb+0x24e>
  401da2:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  401da4:	281b      	cmp	r0, #27
  401da6:	d111      	bne.n	401dcc <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  401da8:	2300      	movs	r3, #0
  401daa:	2208      	movs	r2, #8
  401dac:	a903      	add	r1, sp, #12
  401dae:	4628      	mov	r0, r5
  401db0:	4c85      	ldr	r4, [pc, #532]	; (401fc8 <m2m_wifi_cb+0x254>)
  401db2:	47a0      	blx	r4
  401db4:	2800      	cmp	r0, #0
  401db6:	f040 8104 	bne.w	401fc2 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401dba:	4b84      	ldr	r3, [pc, #528]	; (401fcc <m2m_wifi_cb+0x258>)
  401dbc:	681b      	ldr	r3, [r3, #0]
  401dbe:	2b00      	cmp	r3, #0
  401dc0:	f000 80ff 	beq.w	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  401dc4:	a903      	add	r1, sp, #12
  401dc6:	201b      	movs	r0, #27
  401dc8:	4798      	blx	r3
  401dca:	e0fa      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  401dcc:	2806      	cmp	r0, #6
  401dce:	d111      	bne.n	401df4 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  401dd0:	2301      	movs	r3, #1
  401dd2:	2230      	movs	r2, #48	; 0x30
  401dd4:	a903      	add	r1, sp, #12
  401dd6:	4628      	mov	r0, r5
  401dd8:	4c7b      	ldr	r4, [pc, #492]	; (401fc8 <m2m_wifi_cb+0x254>)
  401dda:	47a0      	blx	r4
  401ddc:	2800      	cmp	r0, #0
  401dde:	f040 80f0 	bne.w	401fc2 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401de2:	4b7a      	ldr	r3, [pc, #488]	; (401fcc <m2m_wifi_cb+0x258>)
  401de4:	681b      	ldr	r3, [r3, #0]
  401de6:	2b00      	cmp	r3, #0
  401de8:	f000 80eb 	beq.w	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  401dec:	a903      	add	r1, sp, #12
  401dee:	2006      	movs	r0, #6
  401df0:	4798      	blx	r3
  401df2:	e0e6      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  401df4:	280e      	cmp	r0, #14
  401df6:	f000 80e4 	beq.w	401fc2 <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  401dfa:	2832      	cmp	r0, #50	; 0x32
  401dfc:	d111      	bne.n	401e22 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  401dfe:	2300      	movs	r3, #0
  401e00:	2210      	movs	r2, #16
  401e02:	a903      	add	r1, sp, #12
  401e04:	4628      	mov	r0, r5
  401e06:	4c70      	ldr	r4, [pc, #448]	; (401fc8 <m2m_wifi_cb+0x254>)
  401e08:	47a0      	blx	r4
  401e0a:	2800      	cmp	r0, #0
  401e0c:	f040 80d9 	bne.w	401fc2 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401e10:	4b6e      	ldr	r3, [pc, #440]	; (401fcc <m2m_wifi_cb+0x258>)
  401e12:	681b      	ldr	r3, [r3, #0]
  401e14:	2b00      	cmp	r3, #0
  401e16:	f000 80d4 	beq.w	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  401e1a:	a903      	add	r1, sp, #12
  401e1c:	2032      	movs	r0, #50	; 0x32
  401e1e:	4798      	blx	r3
  401e20:	e0cf      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  401e22:	282f      	cmp	r0, #47	; 0x2f
  401e24:	d116      	bne.n	401e54 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  401e26:	2264      	movs	r2, #100	; 0x64
  401e28:	2100      	movs	r1, #0
  401e2a:	a803      	add	r0, sp, #12
  401e2c:	4b68      	ldr	r3, [pc, #416]	; (401fd0 <m2m_wifi_cb+0x25c>)
  401e2e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  401e30:	2300      	movs	r3, #0
  401e32:	2264      	movs	r2, #100	; 0x64
  401e34:	a903      	add	r1, sp, #12
  401e36:	4628      	mov	r0, r5
  401e38:	4c63      	ldr	r4, [pc, #396]	; (401fc8 <m2m_wifi_cb+0x254>)
  401e3a:	47a0      	blx	r4
  401e3c:	2800      	cmp	r0, #0
  401e3e:	f040 80c0 	bne.w	401fc2 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401e42:	4b62      	ldr	r3, [pc, #392]	; (401fcc <m2m_wifi_cb+0x258>)
  401e44:	681b      	ldr	r3, [r3, #0]
  401e46:	2b00      	cmp	r3, #0
  401e48:	f000 80bb 	beq.w	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  401e4c:	a903      	add	r1, sp, #12
  401e4e:	202f      	movs	r0, #47	; 0x2f
  401e50:	4798      	blx	r3
  401e52:	e0b6      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  401e54:	2834      	cmp	r0, #52	; 0x34
  401e56:	d120      	bne.n	401e9a <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  401e58:	2300      	movs	r3, #0
  401e5a:	2204      	movs	r2, #4
  401e5c:	a903      	add	r1, sp, #12
  401e5e:	4628      	mov	r0, r5
  401e60:	4c59      	ldr	r4, [pc, #356]	; (401fc8 <m2m_wifi_cb+0x254>)
  401e62:	47a0      	blx	r4
  401e64:	2800      	cmp	r0, #0
  401e66:	f040 80ac 	bne.w	401fc2 <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  401e6a:	485a      	ldr	r0, [pc, #360]	; (401fd4 <m2m_wifi_cb+0x260>)
  401e6c:	4c5a      	ldr	r4, [pc, #360]	; (401fd8 <m2m_wifi_cb+0x264>)
  401e6e:	47a0      	blx	r4
  401e70:	9903      	ldr	r1, [sp, #12]
  401e72:	0e0b      	lsrs	r3, r1, #24
  401e74:	9300      	str	r3, [sp, #0]
  401e76:	f3c1 4307 	ubfx	r3, r1, #16, #8
  401e7a:	f3c1 2207 	ubfx	r2, r1, #8, #8
  401e7e:	b2c9      	uxtb	r1, r1
  401e80:	4856      	ldr	r0, [pc, #344]	; (401fdc <m2m_wifi_cb+0x268>)
  401e82:	47a0      	blx	r4
  401e84:	4856      	ldr	r0, [pc, #344]	; (401fe0 <m2m_wifi_cb+0x26c>)
  401e86:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  401e88:	4b50      	ldr	r3, [pc, #320]	; (401fcc <m2m_wifi_cb+0x258>)
  401e8a:	681b      	ldr	r3, [r3, #0]
  401e8c:	2b00      	cmp	r3, #0
  401e8e:	f000 8098 	beq.w	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  401e92:	2100      	movs	r1, #0
  401e94:	2034      	movs	r0, #52	; 0x34
  401e96:	4798      	blx	r3
  401e98:	e093      	b.n	401fc2 <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  401e9a:	2811      	cmp	r0, #17
  401e9c:	d116      	bne.n	401ecc <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  401e9e:	2300      	movs	r3, #0
  401ea0:	4a50      	ldr	r2, [pc, #320]	; (401fe4 <m2m_wifi_cb+0x270>)
  401ea2:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  401ea4:	2204      	movs	r2, #4
  401ea6:	a903      	add	r1, sp, #12
  401ea8:	4628      	mov	r0, r5
  401eaa:	4c47      	ldr	r4, [pc, #284]	; (401fc8 <m2m_wifi_cb+0x254>)
  401eac:	47a0      	blx	r4
  401eae:	2800      	cmp	r0, #0
  401eb0:	f040 8087 	bne.w	401fc2 <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  401eb4:	f89d 200c 	ldrb.w	r2, [sp, #12]
  401eb8:	4b4b      	ldr	r3, [pc, #300]	; (401fe8 <m2m_wifi_cb+0x274>)
  401eba:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  401ebc:	4b43      	ldr	r3, [pc, #268]	; (401fcc <m2m_wifi_cb+0x258>)
  401ebe:	681b      	ldr	r3, [r3, #0]
  401ec0:	2b00      	cmp	r3, #0
  401ec2:	d07e      	beq.n	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  401ec4:	a903      	add	r1, sp, #12
  401ec6:	2011      	movs	r0, #17
  401ec8:	4798      	blx	r3
  401eca:	e07a      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  401ecc:	2813      	cmp	r0, #19
  401ece:	d10f      	bne.n	401ef0 <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  401ed0:	2300      	movs	r3, #0
  401ed2:	222c      	movs	r2, #44	; 0x2c
  401ed4:	a903      	add	r1, sp, #12
  401ed6:	4628      	mov	r0, r5
  401ed8:	4c3b      	ldr	r4, [pc, #236]	; (401fc8 <m2m_wifi_cb+0x254>)
  401eda:	47a0      	blx	r4
  401edc:	2800      	cmp	r0, #0
  401ede:	d170      	bne.n	401fc2 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401ee0:	4b3a      	ldr	r3, [pc, #232]	; (401fcc <m2m_wifi_cb+0x258>)
  401ee2:	681b      	ldr	r3, [r3, #0]
  401ee4:	2b00      	cmp	r3, #0
  401ee6:	d06c      	beq.n	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  401ee8:	a903      	add	r1, sp, #12
  401eea:	2013      	movs	r0, #19
  401eec:	4798      	blx	r3
  401eee:	e068      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  401ef0:	2804      	cmp	r0, #4
  401ef2:	d10f      	bne.n	401f14 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401ef4:	2300      	movs	r3, #0
  401ef6:	2204      	movs	r2, #4
  401ef8:	a91c      	add	r1, sp, #112	; 0x70
  401efa:	4628      	mov	r0, r5
  401efc:	4c32      	ldr	r4, [pc, #200]	; (401fc8 <m2m_wifi_cb+0x254>)
  401efe:	47a0      	blx	r4
  401f00:	2800      	cmp	r0, #0
  401f02:	d15e      	bne.n	401fc2 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401f04:	4b31      	ldr	r3, [pc, #196]	; (401fcc <m2m_wifi_cb+0x258>)
  401f06:	681b      	ldr	r3, [r3, #0]
  401f08:	2b00      	cmp	r3, #0
  401f0a:	d05a      	beq.n	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  401f0c:	a91c      	add	r1, sp, #112	; 0x70
  401f0e:	2004      	movs	r0, #4
  401f10:	4798      	blx	r3
  401f12:	e056      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  401f14:	2865      	cmp	r0, #101	; 0x65
  401f16:	d10f      	bne.n	401f38 <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  401f18:	2300      	movs	r3, #0
  401f1a:	2204      	movs	r2, #4
  401f1c:	a91c      	add	r1, sp, #112	; 0x70
  401f1e:	4628      	mov	r0, r5
  401f20:	4c29      	ldr	r4, [pc, #164]	; (401fc8 <m2m_wifi_cb+0x254>)
  401f22:	47a0      	blx	r4
  401f24:	2800      	cmp	r0, #0
  401f26:	d14c      	bne.n	401fc2 <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  401f28:	4b28      	ldr	r3, [pc, #160]	; (401fcc <m2m_wifi_cb+0x258>)
  401f2a:	681b      	ldr	r3, [r3, #0]
  401f2c:	2b00      	cmp	r3, #0
  401f2e:	d048      	beq.n	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  401f30:	a91c      	add	r1, sp, #112	; 0x70
  401f32:	2065      	movs	r0, #101	; 0x65
  401f34:	4798      	blx	r3
  401f36:	e044      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  401f38:	2809      	cmp	r0, #9
  401f3a:	d10f      	bne.n	401f5c <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  401f3c:	2301      	movs	r3, #1
  401f3e:	2264      	movs	r2, #100	; 0x64
  401f40:	a903      	add	r1, sp, #12
  401f42:	4628      	mov	r0, r5
  401f44:	4c20      	ldr	r4, [pc, #128]	; (401fc8 <m2m_wifi_cb+0x254>)
  401f46:	47a0      	blx	r4
  401f48:	2800      	cmp	r0, #0
  401f4a:	d13a      	bne.n	401fc2 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401f4c:	4b1f      	ldr	r3, [pc, #124]	; (401fcc <m2m_wifi_cb+0x258>)
  401f4e:	681b      	ldr	r3, [r3, #0]
  401f50:	2b00      	cmp	r3, #0
  401f52:	d036      	beq.n	401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  401f54:	a903      	add	r1, sp, #12
  401f56:	2009      	movs	r0, #9
  401f58:	4798      	blx	r3
  401f5a:	e032      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  401f5c:	282a      	cmp	r0, #42	; 0x2a
  401f5e:	d10d      	bne.n	401f7c <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  401f60:	2301      	movs	r3, #1
  401f62:	2204      	movs	r2, #4
  401f64:	a903      	add	r1, sp, #12
  401f66:	4628      	mov	r0, r5
  401f68:	4c17      	ldr	r4, [pc, #92]	; (401fc8 <m2m_wifi_cb+0x254>)
  401f6a:	47a0      	blx	r4
  401f6c:	bb48      	cbnz	r0, 401fc2 <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  401f6e:	4b17      	ldr	r3, [pc, #92]	; (401fcc <m2m_wifi_cb+0x258>)
  401f70:	681b      	ldr	r3, [r3, #0]
  401f72:	b333      	cbz	r3, 401fc2 <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  401f74:	a903      	add	r1, sp, #12
  401f76:	202a      	movs	r0, #42	; 0x2a
  401f78:	4798      	blx	r3
  401f7a:	e022      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  401f7c:	2820      	cmp	r0, #32
  401f7e:	d115      	bne.n	401fac <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  401f80:	2300      	movs	r3, #0
  401f82:	2208      	movs	r2, #8
  401f84:	a903      	add	r1, sp, #12
  401f86:	4628      	mov	r0, r5
  401f88:	4c0f      	ldr	r4, [pc, #60]	; (401fc8 <m2m_wifi_cb+0x254>)
  401f8a:	47a0      	blx	r4
  401f8c:	b9c8      	cbnz	r0, 401fc2 <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  401f8e:	2301      	movs	r3, #1
  401f90:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  401f94:	9903      	ldr	r1, [sp, #12]
  401f96:	f105 0008 	add.w	r0, r5, #8
  401f9a:	47a0      	blx	r4
  401f9c:	b988      	cbnz	r0, 401fc2 <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  401f9e:	4b0b      	ldr	r3, [pc, #44]	; (401fcc <m2m_wifi_cb+0x258>)
  401fa0:	681b      	ldr	r3, [r3, #0]
  401fa2:	b173      	cbz	r3, 401fc2 <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  401fa4:	a903      	add	r1, sp, #12
  401fa6:	2020      	movs	r0, #32
  401fa8:	4798      	blx	r3
  401faa:	e00a      	b.n	401fc2 <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  401fac:	f44f 7295 	mov.w	r2, #298	; 0x12a
  401fb0:	490e      	ldr	r1, [pc, #56]	; (401fec <m2m_wifi_cb+0x278>)
  401fb2:	480f      	ldr	r0, [pc, #60]	; (401ff0 <m2m_wifi_cb+0x27c>)
  401fb4:	4d08      	ldr	r5, [pc, #32]	; (401fd8 <m2m_wifi_cb+0x264>)
  401fb6:	47a8      	blx	r5
  401fb8:	4621      	mov	r1, r4
  401fba:	480e      	ldr	r0, [pc, #56]	; (401ff4 <m2m_wifi_cb+0x280>)
  401fbc:	47a8      	blx	r5
  401fbe:	4808      	ldr	r0, [pc, #32]	; (401fe0 <m2m_wifi_cb+0x26c>)
  401fc0:	47a8      	blx	r5
	}
}
  401fc2:	b01f      	add	sp, #124	; 0x7c
  401fc4:	bd30      	pop	{r4, r5, pc}
  401fc6:	bf00      	nop
  401fc8:	00401b85 	.word	0x00401b85
  401fcc:	20400964 	.word	0x20400964
  401fd0:	00401529 	.word	0x00401529
  401fd4:	0040bc38 	.word	0x0040bc38
  401fd8:	00405195 	.word	0x00405195
  401fdc:	0040bc44 	.word	0x0040bc44
  401fe0:	0040cacc 	.word	0x0040cacc
  401fe4:	20400968 	.word	0x20400968
  401fe8:	20400969 	.word	0x20400969
  401fec:	0040bc2c 	.word	0x0040bc2c
  401ff0:	0040b978 	.word	0x0040b978
  401ff4:	0040bc64 	.word	0x0040bc64

00401ff8 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  401ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
  401ffa:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  401ffc:	2301      	movs	r3, #1
  401ffe:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  402002:	2800      	cmp	r0, #0
  402004:	d04e      	beq.n	4020a4 <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  402006:	6802      	ldr	r2, [r0, #0]
  402008:	4b29      	ldr	r3, [pc, #164]	; (4020b0 <m2m_wifi_init+0xb8>)
  40200a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  40200c:	2200      	movs	r2, #0
  40200e:	4b29      	ldr	r3, [pc, #164]	; (4020b4 <m2m_wifi_init+0xbc>)
  402010:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  402012:	f10d 0007 	add.w	r0, sp, #7
  402016:	4b28      	ldr	r3, [pc, #160]	; (4020b8 <m2m_wifi_init+0xc0>)
  402018:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  40201a:	4604      	mov	r4, r0
  40201c:	2800      	cmp	r0, #0
  40201e:	d143      	bne.n	4020a8 <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  402020:	4b26      	ldr	r3, [pc, #152]	; (4020bc <m2m_wifi_init+0xc4>)
  402022:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  402024:	4604      	mov	r4, r0
  402026:	2800      	cmp	r0, #0
  402028:	d138      	bne.n	40209c <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40202a:	4925      	ldr	r1, [pc, #148]	; (4020c0 <m2m_wifi_init+0xc8>)
  40202c:	2001      	movs	r0, #1
  40202e:	4b25      	ldr	r3, [pc, #148]	; (4020c4 <m2m_wifi_init+0xcc>)
  402030:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  402032:	a802      	add	r0, sp, #8
  402034:	4b24      	ldr	r3, [pc, #144]	; (4020c8 <m2m_wifi_init+0xd0>)
  402036:	4798      	blx	r3
  402038:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40203a:	4f24      	ldr	r7, [pc, #144]	; (4020cc <m2m_wifi_init+0xd4>)
  40203c:	4638      	mov	r0, r7
  40203e:	4d24      	ldr	r5, [pc, #144]	; (4020d0 <m2m_wifi_init+0xd8>)
  402040:	47a8      	blx	r5
  402042:	f89d 300e 	ldrb.w	r3, [sp, #14]
  402046:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40204a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40204e:	4821      	ldr	r0, [pc, #132]	; (4020d4 <m2m_wifi_init+0xdc>)
  402050:	47a8      	blx	r5
  402052:	4e21      	ldr	r6, [pc, #132]	; (4020d8 <m2m_wifi_init+0xe0>)
  402054:	4630      	mov	r0, r6
  402056:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  402058:	4638      	mov	r0, r7
  40205a:	47a8      	blx	r5
  40205c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  402060:	f89d 2010 	ldrb.w	r2, [sp, #16]
  402064:	f89d 100f 	ldrb.w	r1, [sp, #15]
  402068:	481c      	ldr	r0, [pc, #112]	; (4020dc <m2m_wifi_init+0xe4>)
  40206a:	47a8      	blx	r5
  40206c:	4630      	mov	r0, r6
  40206e:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  402070:	4638      	mov	r0, r7
  402072:	47a8      	blx	r5
  402074:	2300      	movs	r3, #0
  402076:	2203      	movs	r2, #3
  402078:	2113      	movs	r1, #19
  40207a:	4819      	ldr	r0, [pc, #100]	; (4020e0 <m2m_wifi_init+0xe8>)
  40207c:	47a8      	blx	r5
  40207e:	4630      	mov	r0, r6
  402080:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  402082:	f114 0f0d 	cmn.w	r4, #13
  402086:	d10f      	bne.n	4020a8 <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  402088:	f240 12d5 	movw	r2, #469	; 0x1d5
  40208c:	4915      	ldr	r1, [pc, #84]	; (4020e4 <m2m_wifi_init+0xec>)
  40208e:	4816      	ldr	r0, [pc, #88]	; (4020e8 <m2m_wifi_init+0xf0>)
  402090:	47a8      	blx	r5
  402092:	4816      	ldr	r0, [pc, #88]	; (4020ec <m2m_wifi_init+0xf4>)
  402094:	47a8      	blx	r5
  402096:	4630      	mov	r0, r6
  402098:	47a8      	blx	r5
  40209a:	e005      	b.n	4020a8 <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  40209c:	2000      	movs	r0, #0
  40209e:	4b14      	ldr	r3, [pc, #80]	; (4020f0 <m2m_wifi_init+0xf8>)
  4020a0:	4798      	blx	r3
  4020a2:	e001      	b.n	4020a8 <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  4020a4:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  4020a8:	4620      	mov	r0, r4
  4020aa:	b00b      	add	sp, #44	; 0x2c
  4020ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4020ae:	bf00      	nop
  4020b0:	20400964 	.word	0x20400964
  4020b4:	20400968 	.word	0x20400968
  4020b8:	004029b5 	.word	0x004029b5
  4020bc:	00401d25 	.word	0x00401d25
  4020c0:	00401d75 	.word	0x00401d75
  4020c4:	00401c95 	.word	0x00401c95
  4020c8:	00402909 	.word	0x00402909
  4020cc:	0040bc38 	.word	0x0040bc38
  4020d0:	00405195 	.word	0x00405195
  4020d4:	0040bd1c 	.word	0x0040bd1c
  4020d8:	0040cacc 	.word	0x0040cacc
  4020dc:	0040bd38 	.word	0x0040bd38
  4020e0:	0040bd54 	.word	0x0040bd54
  4020e4:	0040bf60 	.word	0x0040bf60
  4020e8:	0040b978 	.word	0x0040b978
  4020ec:	0040bd70 	.word	0x0040bd70
  4020f0:	00402a7d 	.word	0x00402a7d

004020f4 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  4020f4:	b508      	push	{r3, lr}
	return hif_handle_isr();
  4020f6:	4b01      	ldr	r3, [pc, #4]	; (4020fc <m2m_wifi_handle_events+0x8>)
  4020f8:	4798      	blx	r3
}
  4020fa:	bd08      	pop	{r3, pc}
  4020fc:	00401865 	.word	0x00401865

00402100 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  402100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402104:	b0a0      	sub	sp, #128	; 0x80
  402106:	4680      	mov	r8, r0
  402108:	460d      	mov	r5, r1
  40210a:	4614      	mov	r4, r2
  40210c:	461e      	mov	r6, r3
  40210e:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  402112:	2a01      	cmp	r2, #1
  402114:	d045      	beq.n	4021a2 <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  402116:	b963      	cbnz	r3, 402132 <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  402118:	f240 2203 	movw	r2, #515	; 0x203
  40211c:	497a      	ldr	r1, [pc, #488]	; (402308 <m2m_wifi_connect_sc+0x208>)
  40211e:	487b      	ldr	r0, [pc, #492]	; (40230c <m2m_wifi_connect_sc+0x20c>)
  402120:	4c7b      	ldr	r4, [pc, #492]	; (402310 <m2m_wifi_connect_sc+0x210>)
  402122:	47a0      	blx	r4
  402124:	487b      	ldr	r0, [pc, #492]	; (402314 <m2m_wifi_connect_sc+0x214>)
  402126:	47a0      	blx	r4
  402128:	487b      	ldr	r0, [pc, #492]	; (402318 <m2m_wifi_connect_sc+0x218>)
  40212a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40212c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402130:	e0e7      	b.n	402302 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402132:	2a02      	cmp	r2, #2
  402134:	d135      	bne.n	4021a2 <m2m_wifi_connect_sc+0xa2>
  402136:	4618      	mov	r0, r3
  402138:	4b78      	ldr	r3, [pc, #480]	; (40231c <m2m_wifi_connect_sc+0x21c>)
  40213a:	4798      	blx	r3
  40213c:	2840      	cmp	r0, #64	; 0x40
  40213e:	d130      	bne.n	4021a2 <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  402140:	7833      	ldrb	r3, [r6, #0]
  402142:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402146:	b2d2      	uxtb	r2, r2
  402148:	2a36      	cmp	r2, #54	; 0x36
  40214a:	d81b      	bhi.n	402184 <m2m_wifi_connect_sc+0x84>
  40214c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402150:	b2d2      	uxtb	r2, r2
  402152:	2a06      	cmp	r2, #6
  402154:	d916      	bls.n	402184 <m2m_wifi_connect_sc+0x84>
  402156:	3b47      	subs	r3, #71	; 0x47
  402158:	b2db      	uxtb	r3, r3
  40215a:	2b19      	cmp	r3, #25
  40215c:	d912      	bls.n	402184 <m2m_wifi_connect_sc+0x84>
  40215e:	4631      	mov	r1, r6
  402160:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  402164:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402168:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  40216c:	b2d2      	uxtb	r2, r2
  40216e:	2a06      	cmp	r2, #6
  402170:	d908      	bls.n	402184 <m2m_wifi_connect_sc+0x84>
  402172:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402176:	b2d2      	uxtb	r2, r2
  402178:	2a36      	cmp	r2, #54	; 0x36
  40217a:	d803      	bhi.n	402184 <m2m_wifi_connect_sc+0x84>
  40217c:	3b47      	subs	r3, #71	; 0x47
  40217e:	b2db      	uxtb	r3, r3
  402180:	2b19      	cmp	r3, #25
  402182:	d80c      	bhi.n	40219e <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  402184:	f240 220f 	movw	r2, #527	; 0x20f
  402188:	495f      	ldr	r1, [pc, #380]	; (402308 <m2m_wifi_connect_sc+0x208>)
  40218a:	4860      	ldr	r0, [pc, #384]	; (40230c <m2m_wifi_connect_sc+0x20c>)
  40218c:	4c60      	ldr	r4, [pc, #384]	; (402310 <m2m_wifi_connect_sc+0x210>)
  40218e:	47a0      	blx	r4
  402190:	4863      	ldr	r0, [pc, #396]	; (402320 <m2m_wifi_connect_sc+0x220>)
  402192:	47a0      	blx	r4
  402194:	4860      	ldr	r0, [pc, #384]	; (402318 <m2m_wifi_connect_sc+0x218>)
  402196:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  402198:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  40219c:	e0b1      	b.n	402302 <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  40219e:	4288      	cmp	r0, r1
  4021a0:	d1e0      	bne.n	402164 <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  4021a2:	1e6b      	subs	r3, r5, #1
  4021a4:	b2db      	uxtb	r3, r3
  4021a6:	2b1f      	cmp	r3, #31
  4021a8:	d90c      	bls.n	4021c4 <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  4021aa:	f240 2219 	movw	r2, #537	; 0x219
  4021ae:	4956      	ldr	r1, [pc, #344]	; (402308 <m2m_wifi_connect_sc+0x208>)
  4021b0:	4856      	ldr	r0, [pc, #344]	; (40230c <m2m_wifi_connect_sc+0x20c>)
  4021b2:	4c57      	ldr	r4, [pc, #348]	; (402310 <m2m_wifi_connect_sc+0x210>)
  4021b4:	47a0      	blx	r4
  4021b6:	485b      	ldr	r0, [pc, #364]	; (402324 <m2m_wifi_connect_sc+0x224>)
  4021b8:	47a0      	blx	r4
  4021ba:	4857      	ldr	r0, [pc, #348]	; (402318 <m2m_wifi_connect_sc+0x218>)
  4021bc:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4021be:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4021c2:	e09e      	b.n	402302 <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  4021c4:	2fff      	cmp	r7, #255	; 0xff
  4021c6:	d00e      	beq.n	4021e6 <m2m_wifi_connect_sc+0xe6>
  4021c8:	2f0d      	cmp	r7, #13
  4021ca:	d90c      	bls.n	4021e6 <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  4021cc:	f240 2222 	movw	r2, #546	; 0x222
  4021d0:	494d      	ldr	r1, [pc, #308]	; (402308 <m2m_wifi_connect_sc+0x208>)
  4021d2:	484e      	ldr	r0, [pc, #312]	; (40230c <m2m_wifi_connect_sc+0x20c>)
  4021d4:	4c4e      	ldr	r4, [pc, #312]	; (402310 <m2m_wifi_connect_sc+0x210>)
  4021d6:	47a0      	blx	r4
  4021d8:	4853      	ldr	r0, [pc, #332]	; (402328 <m2m_wifi_connect_sc+0x228>)
  4021da:	47a0      	blx	r4
  4021dc:	484e      	ldr	r0, [pc, #312]	; (402318 <m2m_wifi_connect_sc+0x218>)
  4021de:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4021e0:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4021e4:	e08d      	b.n	402302 <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  4021e6:	462a      	mov	r2, r5
  4021e8:	4641      	mov	r1, r8
  4021ea:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4021ee:	4b4f      	ldr	r3, [pc, #316]	; (40232c <m2m_wifi_connect_sc+0x22c>)
  4021f0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4021f2:	ab20      	add	r3, sp, #128	; 0x80
  4021f4:	441d      	add	r5, r3
  4021f6:	2300      	movs	r3, #0
  4021f8:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4021fc:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  402200:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  402204:	3300      	adds	r3, #0
  402206:	bf18      	it	ne
  402208:	2301      	movne	r3, #1
  40220a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  40220e:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  402212:	2c03      	cmp	r4, #3
  402214:	d138      	bne.n	402288 <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  402216:	7833      	ldrb	r3, [r6, #0]
  402218:	3b01      	subs	r3, #1
  40221a:	b2db      	uxtb	r3, r3
  40221c:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  402220:	2b03      	cmp	r3, #3
  402222:	d90e      	bls.n	402242 <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  402224:	f240 2239 	movw	r2, #569	; 0x239
  402228:	4937      	ldr	r1, [pc, #220]	; (402308 <m2m_wifi_connect_sc+0x208>)
  40222a:	4838      	ldr	r0, [pc, #224]	; (40230c <m2m_wifi_connect_sc+0x20c>)
  40222c:	4c38      	ldr	r4, [pc, #224]	; (402310 <m2m_wifi_connect_sc+0x210>)
  40222e:	47a0      	blx	r4
  402230:	f89d 1014 	ldrb.w	r1, [sp, #20]
  402234:	483e      	ldr	r0, [pc, #248]	; (402330 <m2m_wifi_connect_sc+0x230>)
  402236:	47a0      	blx	r4
  402238:	4837      	ldr	r0, [pc, #220]	; (402318 <m2m_wifi_connect_sc+0x218>)
  40223a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40223c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402240:	e05f      	b.n	402302 <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  402242:	7872      	ldrb	r2, [r6, #1]
  402244:	1e53      	subs	r3, r2, #1
  402246:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  40224a:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  40224e:	2b0b      	cmp	r3, #11
  402250:	d00e      	beq.n	402270 <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  402252:	f44f 7210 	mov.w	r2, #576	; 0x240
  402256:	492c      	ldr	r1, [pc, #176]	; (402308 <m2m_wifi_connect_sc+0x208>)
  402258:	482c      	ldr	r0, [pc, #176]	; (40230c <m2m_wifi_connect_sc+0x20c>)
  40225a:	4c2d      	ldr	r4, [pc, #180]	; (402310 <m2m_wifi_connect_sc+0x210>)
  40225c:	47a0      	blx	r4
  40225e:	f89d 1015 	ldrb.w	r1, [sp, #21]
  402262:	4834      	ldr	r0, [pc, #208]	; (402334 <m2m_wifi_connect_sc+0x234>)
  402264:	47a0      	blx	r4
  402266:	482c      	ldr	r0, [pc, #176]	; (402318 <m2m_wifi_connect_sc+0x218>)
  402268:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40226a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40226e:	e048      	b.n	402302 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  402270:	1cb1      	adds	r1, r6, #2
  402272:	f10d 0016 	add.w	r0, sp, #22
  402276:	4b2d      	ldr	r3, [pc, #180]	; (40232c <m2m_wifi_connect_sc+0x22c>)
  402278:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  40227a:	7873      	ldrb	r3, [r6, #1]
  40227c:	aa20      	add	r2, sp, #128	; 0x80
  40227e:	4413      	add	r3, r2
  402280:	2200      	movs	r2, #0
  402282:	f803 2c6a 	strb.w	r2, [r3, #-106]
  402286:	e032      	b.n	4022ee <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  402288:	2c02      	cmp	r4, #2
  40228a:	d119      	bne.n	4022c0 <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  40228c:	4630      	mov	r0, r6
  40228e:	4b23      	ldr	r3, [pc, #140]	; (40231c <m2m_wifi_connect_sc+0x21c>)
  402290:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  402292:	1e43      	subs	r3, r0, #1
  402294:	b29b      	uxth	r3, r3
  402296:	2b3f      	cmp	r3, #63	; 0x3f
  402298:	d90c      	bls.n	4022b4 <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  40229a:	f240 224f 	movw	r2, #591	; 0x24f
  40229e:	491a      	ldr	r1, [pc, #104]	; (402308 <m2m_wifi_connect_sc+0x208>)
  4022a0:	481a      	ldr	r0, [pc, #104]	; (40230c <m2m_wifi_connect_sc+0x20c>)
  4022a2:	4c1b      	ldr	r4, [pc, #108]	; (402310 <m2m_wifi_connect_sc+0x210>)
  4022a4:	47a0      	blx	r4
  4022a6:	4824      	ldr	r0, [pc, #144]	; (402338 <m2m_wifi_connect_sc+0x238>)
  4022a8:	47a0      	blx	r4
  4022aa:	481b      	ldr	r0, [pc, #108]	; (402318 <m2m_wifi_connect_sc+0x218>)
  4022ac:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4022ae:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4022b2:	e026      	b.n	402302 <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4022b4:	1c42      	adds	r2, r0, #1
  4022b6:	4631      	mov	r1, r6
  4022b8:	a805      	add	r0, sp, #20
  4022ba:	4b1c      	ldr	r3, [pc, #112]	; (40232c <m2m_wifi_connect_sc+0x22c>)
  4022bc:	4798      	blx	r3
  4022be:	e016      	b.n	4022ee <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  4022c0:	2c04      	cmp	r4, #4
  4022c2:	d105      	bne.n	4022d0 <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  4022c4:	223e      	movs	r2, #62	; 0x3e
  4022c6:	4631      	mov	r1, r6
  4022c8:	a805      	add	r0, sp, #20
  4022ca:	4b18      	ldr	r3, [pc, #96]	; (40232c <m2m_wifi_connect_sc+0x22c>)
  4022cc:	4798      	blx	r3
  4022ce:	e00e      	b.n	4022ee <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4022d0:	2c01      	cmp	r4, #1
  4022d2:	d00c      	beq.n	4022ee <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  4022d4:	f240 225f 	movw	r2, #607	; 0x25f
  4022d8:	490b      	ldr	r1, [pc, #44]	; (402308 <m2m_wifi_connect_sc+0x208>)
  4022da:	480c      	ldr	r0, [pc, #48]	; (40230c <m2m_wifi_connect_sc+0x20c>)
  4022dc:	4c0c      	ldr	r4, [pc, #48]	; (402310 <m2m_wifi_connect_sc+0x210>)
  4022de:	47a0      	blx	r4
  4022e0:	4816      	ldr	r0, [pc, #88]	; (40233c <m2m_wifi_connect_sc+0x23c>)
  4022e2:	47a0      	blx	r4
  4022e4:	480c      	ldr	r0, [pc, #48]	; (402318 <m2m_wifi_connect_sc+0x218>)
  4022e6:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4022e8:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4022ec:	e009      	b.n	402302 <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4022ee:	2300      	movs	r3, #0
  4022f0:	9302      	str	r3, [sp, #8]
  4022f2:	9301      	str	r3, [sp, #4]
  4022f4:	9300      	str	r3, [sp, #0]
  4022f6:	236c      	movs	r3, #108	; 0x6c
  4022f8:	aa05      	add	r2, sp, #20
  4022fa:	2128      	movs	r1, #40	; 0x28
  4022fc:	2001      	movs	r0, #1
  4022fe:	4c10      	ldr	r4, [pc, #64]	; (402340 <m2m_wifi_connect_sc+0x240>)
  402300:	47a0      	blx	r4

ERR1:
	return ret;
}
  402302:	b020      	add	sp, #128	; 0x80
  402304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402308:	0040bc18 	.word	0x0040bc18
  40230c:	0040b978 	.word	0x0040b978
  402310:	00405195 	.word	0x00405195
  402314:	0040bd8c 	.word	0x0040bd8c
  402318:	0040cacc 	.word	0x0040cacc
  40231c:	00401539 	.word	0x00401539
  402320:	0040bda0 	.word	0x0040bda0
  402324:	0040bdb0 	.word	0x0040bdb0
  402328:	0040bdc4 	.word	0x0040bdc4
  40232c:	00401515 	.word	0x00401515
  402330:	0040bdd0 	.word	0x0040bdd0
  402334:	0040bdec 	.word	0x0040bdec
  402338:	0040be08 	.word	0x0040be08
  40233c:	0040be24 	.word	0x0040be24
  402340:	0040168d 	.word	0x0040168d

00402344 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  402344:	b510      	push	{r4, lr}
  402346:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  402348:	2400      	movs	r4, #0
  40234a:	9401      	str	r4, [sp, #4]
  40234c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  402350:	9400      	str	r4, [sp, #0]
  402352:	4c02      	ldr	r4, [pc, #8]	; (40235c <m2m_wifi_connect+0x18>)
  402354:	47a0      	blx	r4
}
  402356:	b002      	add	sp, #8
  402358:	bd10      	pop	{r4, pc}
  40235a:	bf00      	nop
  40235c:	00402101 	.word	0x00402101

00402360 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  402360:	2000      	movs	r0, #0
  402362:	4770      	bx	lr

00402364 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  402364:	b5f0      	push	{r4, r5, r6, r7, lr}
  402366:	b083      	sub	sp, #12
  402368:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40236a:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  40236e:	4e0a      	ldr	r6, [pc, #40]	; (402398 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  402370:	4f0a      	ldr	r7, [pc, #40]	; (40239c <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  402372:	4621      	mov	r1, r4
  402374:	4628      	mov	r0, r5
  402376:	47b0      	blx	r6
		if(val32 != 0) {		
  402378:	b154      	cbz	r4, 402390 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  40237a:	a902      	add	r1, sp, #8
  40237c:	2300      	movs	r3, #0
  40237e:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  402382:	4628      	mov	r0, r5
  402384:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  402386:	2800      	cmp	r0, #0
  402388:	d1f3      	bne.n	402372 <chip_apply_conf+0xe>
				if(reg == val32)
  40238a:	9b01      	ldr	r3, [sp, #4]
  40238c:	429c      	cmp	r4, r3
  40238e:	d1f0      	bne.n	402372 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  402390:	2000      	movs	r0, #0
  402392:	b003      	add	sp, #12
  402394:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402396:	bf00      	nop
  402398:	0040283d 	.word	0x0040283d
  40239c:	00402831 	.word	0x00402831

004023a0 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4023a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023a4:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4023a6:	2001      	movs	r0, #1
  4023a8:	4b3d      	ldr	r3, [pc, #244]	; (4024a0 <nm_clkless_wake+0x100>)
  4023aa:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4023ac:	a901      	add	r1, sp, #4
  4023ae:	2001      	movs	r0, #1
  4023b0:	4b3c      	ldr	r3, [pc, #240]	; (4024a4 <nm_clkless_wake+0x104>)
  4023b2:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  4023b4:	4682      	mov	sl, r0
  4023b6:	b148      	cbz	r0, 4023cc <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4023b8:	2272      	movs	r2, #114	; 0x72
  4023ba:	493b      	ldr	r1, [pc, #236]	; (4024a8 <nm_clkless_wake+0x108>)
  4023bc:	483b      	ldr	r0, [pc, #236]	; (4024ac <nm_clkless_wake+0x10c>)
  4023be:	4c3c      	ldr	r4, [pc, #240]	; (4024b0 <nm_clkless_wake+0x110>)
  4023c0:	47a0      	blx	r4
  4023c2:	483c      	ldr	r0, [pc, #240]	; (4024b4 <nm_clkless_wake+0x114>)
  4023c4:	47a0      	blx	r4
  4023c6:	483c      	ldr	r0, [pc, #240]	; (4024b8 <nm_clkless_wake+0x118>)
  4023c8:	47a0      	blx	r4
		goto _WAKE_EXIT;
  4023ca:	e064      	b.n	402496 <nm_clkless_wake+0xf6>
  4023cc:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4023ce:	f04f 0801 	mov.w	r8, #1
  4023d2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 4024cc <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4023d6:	4d32      	ldr	r5, [pc, #200]	; (4024a0 <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4023d8:	4f38      	ldr	r7, [pc, #224]	; (4024bc <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4023da:	9901      	ldr	r1, [sp, #4]
  4023dc:	f041 0102 	orr.w	r1, r1, #2
  4023e0:	4640      	mov	r0, r8
  4023e2:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4023e4:	4640      	mov	r0, r8
  4023e6:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4023e8:	4669      	mov	r1, sp
  4023ea:	4b35      	ldr	r3, [pc, #212]	; (4024c0 <nm_clkless_wake+0x120>)
  4023ec:	6818      	ldr	r0, [r3, #0]
  4023ee:	4b2d      	ldr	r3, [pc, #180]	; (4024a4 <nm_clkless_wake+0x104>)
  4023f0:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4023f2:	b918      	cbnz	r0, 4023fc <nm_clkless_wake+0x5c>
  4023f4:	9b00      	ldr	r3, [sp, #0]
  4023f6:	b10b      	cbz	r3, 4023fc <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4023f8:	4e31      	ldr	r6, [pc, #196]	; (4024c0 <nm_clkless_wake+0x120>)
  4023fa:	e037      	b.n	40246c <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  4023fc:	4e30      	ldr	r6, [pc, #192]	; (4024c0 <nm_clkless_wake+0x120>)
  4023fe:	230e      	movs	r3, #14
  402400:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  402402:	4640      	mov	r0, r8
  402404:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402406:	4669      	mov	r1, sp
  402408:	6830      	ldr	r0, [r6, #0]
  40240a:	4b26      	ldr	r3, [pc, #152]	; (4024a4 <nm_clkless_wake+0x104>)
  40240c:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40240e:	b910      	cbnz	r0, 402416 <nm_clkless_wake+0x76>
  402410:	9b00      	ldr	r3, [sp, #0]
  402412:	2b00      	cmp	r3, #0
  402414:	d1f0      	bne.n	4023f8 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  402416:	4e2a      	ldr	r6, [pc, #168]	; (4024c0 <nm_clkless_wake+0x120>)
  402418:	2313      	movs	r3, #19
  40241a:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  40241c:	4640      	mov	r0, r8
  40241e:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402420:	4669      	mov	r1, sp
  402422:	6830      	ldr	r0, [r6, #0]
  402424:	4b1f      	ldr	r3, [pc, #124]	; (4024a4 <nm_clkless_wake+0x104>)
  402426:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  402428:	4606      	mov	r6, r0
  40242a:	2800      	cmp	r0, #0
  40242c:	d0e4      	beq.n	4023f8 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  40242e:	2296      	movs	r2, #150	; 0x96
  402430:	491d      	ldr	r1, [pc, #116]	; (4024a8 <nm_clkless_wake+0x108>)
  402432:	481e      	ldr	r0, [pc, #120]	; (4024ac <nm_clkless_wake+0x10c>)
  402434:	4c1e      	ldr	r4, [pc, #120]	; (4024b0 <nm_clkless_wake+0x110>)
  402436:	47a0      	blx	r4
  402438:	4822      	ldr	r0, [pc, #136]	; (4024c4 <nm_clkless_wake+0x124>)
  40243a:	47a0      	blx	r4
  40243c:	481e      	ldr	r0, [pc, #120]	; (4024b8 <nm_clkless_wake+0x118>)
  40243e:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402440:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  402442:	e028      	b.n	402496 <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  402444:	2002      	movs	r0, #2
  402446:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  402448:	4669      	mov	r1, sp
  40244a:	6830      	ldr	r0, [r6, #0]
  40244c:	4b15      	ldr	r3, [pc, #84]	; (4024a4 <nm_clkless_wake+0x104>)
  40244e:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  402450:	9b00      	ldr	r3, [sp, #0]
  402452:	f013 0f04 	tst.w	r3, #4
  402456:	d109      	bne.n	40246c <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  402458:	22aa      	movs	r2, #170	; 0xaa
  40245a:	4913      	ldr	r1, [pc, #76]	; (4024a8 <nm_clkless_wake+0x108>)
  40245c:	4813      	ldr	r0, [pc, #76]	; (4024ac <nm_clkless_wake+0x10c>)
  40245e:	f8df b050 	ldr.w	fp, [pc, #80]	; 4024b0 <nm_clkless_wake+0x110>
  402462:	47d8      	blx	fp
  402464:	4818      	ldr	r0, [pc, #96]	; (4024c8 <nm_clkless_wake+0x128>)
  402466:	47d8      	blx	fp
  402468:	4813      	ldr	r0, [pc, #76]	; (4024b8 <nm_clkless_wake+0x118>)
  40246a:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  40246c:	9b00      	ldr	r3, [sp, #0]
  40246e:	f013 0f04 	tst.w	r3, #4
  402472:	d110      	bne.n	402496 <nm_clkless_wake+0xf6>
  402474:	3401      	adds	r4, #1
  402476:	fba7 2304 	umull	r2, r3, r7, r4
  40247a:	085b      	lsrs	r3, r3, #1
  40247c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402480:	429c      	cmp	r4, r3
  402482:	d0df      	beq.n	402444 <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  402484:	9901      	ldr	r1, [sp, #4]
  402486:	f041 0102 	orr.w	r1, r1, #2
  40248a:	4640      	mov	r0, r8
  40248c:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  40248e:	9b00      	ldr	r3, [sp, #0]
  402490:	f013 0f04 	tst.w	r3, #4
  402494:	d0a1      	beq.n	4023da <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  402496:	4650      	mov	r0, sl
  402498:	b003      	add	sp, #12
  40249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40249e:	bf00      	nop
  4024a0:	00401179 	.word	0x00401179
  4024a4:	00402831 	.word	0x00402831
  4024a8:	0040bf7c 	.word	0x0040bf7c
  4024ac:	0040b978 	.word	0x0040b978
  4024b0:	00405195 	.word	0x00405195
  4024b4:	0040bf8c 	.word	0x0040bf8c
  4024b8:	0040cacc 	.word	0x0040cacc
  4024bc:	aaaaaaab 	.word	0xaaaaaaab
  4024c0:	20400034 	.word	0x20400034
  4024c4:	0040bfac 	.word	0x0040bfac
  4024c8:	0040bfcc 	.word	0x0040bfcc
  4024cc:	0040283d 	.word	0x0040283d

004024d0 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4024d0:	b500      	push	{lr}
  4024d2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4024d4:	a901      	add	r1, sp, #4
  4024d6:	f241 4008 	movw	r0, #5128	; 0x1408
  4024da:	4b15      	ldr	r3, [pc, #84]	; (402530 <enable_interrupts+0x60>)
  4024dc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4024de:	b9e0      	cbnz	r0, 40251a <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  4024e0:	9901      	ldr	r1, [sp, #4]
  4024e2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4024e6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  4024e8:	f241 4008 	movw	r0, #5128	; 0x1408
  4024ec:	4b11      	ldr	r3, [pc, #68]	; (402534 <enable_interrupts+0x64>)
  4024ee:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4024f0:	b9b0      	cbnz	r0, 402520 <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  4024f2:	a901      	add	r1, sp, #4
  4024f4:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4024f8:	4b0d      	ldr	r3, [pc, #52]	; (402530 <enable_interrupts+0x60>)
  4024fa:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4024fc:	b998      	cbnz	r0, 402526 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  4024fe:	9901      	ldr	r1, [sp, #4]
  402500:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402504:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  402506:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40250a:	4b0a      	ldr	r3, [pc, #40]	; (402534 <enable_interrupts+0x64>)
  40250c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40250e:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  402510:	bf14      	ite	ne
  402512:	f06f 0005 	mvnne.w	r0, #5
  402516:	2000      	moveq	r0, #0
  402518:	e007      	b.n	40252a <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  40251a:	f06f 0005 	mvn.w	r0, #5
  40251e:	e004      	b.n	40252a <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  402520:	f06f 0005 	mvn.w	r0, #5
  402524:	e001      	b.n	40252a <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  402526:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  40252a:	b003      	add	sp, #12
  40252c:	f85d fb04 	ldr.w	pc, [sp], #4
  402530:	00402831 	.word	0x00402831
  402534:	0040283d 	.word	0x0040283d

00402538 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  402538:	b510      	push	{r4, lr}
  40253a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  40253c:	4b24      	ldr	r3, [pc, #144]	; (4025d0 <nmi_get_chipid+0x98>)
  40253e:	681c      	ldr	r4, [r3, #0]
  402540:	2c00      	cmp	r4, #0
  402542:	d140      	bne.n	4025c6 <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  402544:	4619      	mov	r1, r3
  402546:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40254a:	4b22      	ldr	r3, [pc, #136]	; (4025d4 <nmi_get_chipid+0x9c>)
  40254c:	4798      	blx	r3
  40254e:	b118      	cbz	r0, 402558 <nmi_get_chipid+0x20>
			chipid = 0;
  402550:	2200      	movs	r2, #0
  402552:	4b1f      	ldr	r3, [pc, #124]	; (4025d0 <nmi_get_chipid+0x98>)
  402554:	601a      	str	r2, [r3, #0]
			return 0;
  402556:	e038      	b.n	4025ca <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  402558:	a901      	add	r1, sp, #4
  40255a:	f241 30f4 	movw	r0, #5108	; 0x13f4
  40255e:	4b1d      	ldr	r3, [pc, #116]	; (4025d4 <nmi_get_chipid+0x9c>)
  402560:	4798      	blx	r3
  402562:	b118      	cbz	r0, 40256c <nmi_get_chipid+0x34>
			chipid = 0;
  402564:	2200      	movs	r2, #0
  402566:	4b1a      	ldr	r3, [pc, #104]	; (4025d0 <nmi_get_chipid+0x98>)
  402568:	601a      	str	r2, [r3, #0]
			return 0;
  40256a:	e02e      	b.n	4025ca <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  40256c:	4b18      	ldr	r3, [pc, #96]	; (4025d0 <nmi_get_chipid+0x98>)
  40256e:	681b      	ldr	r3, [r3, #0]
  402570:	4a19      	ldr	r2, [pc, #100]	; (4025d8 <nmi_get_chipid+0xa0>)
  402572:	4293      	cmp	r3, r2
  402574:	d106      	bne.n	402584 <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  402576:	9b01      	ldr	r3, [sp, #4]
  402578:	2b01      	cmp	r3, #1
  40257a:	d01d      	beq.n	4025b8 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  40257c:	3201      	adds	r2, #1
  40257e:	4b14      	ldr	r3, [pc, #80]	; (4025d0 <nmi_get_chipid+0x98>)
  402580:	601a      	str	r2, [r3, #0]
  402582:	e019      	b.n	4025b8 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  402584:	4a15      	ldr	r2, [pc, #84]	; (4025dc <nmi_get_chipid+0xa4>)
  402586:	4293      	cmp	r3, r2
  402588:	d109      	bne.n	40259e <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  40258a:	9b01      	ldr	r3, [sp, #4]
  40258c:	2b03      	cmp	r3, #3
  40258e:	d013      	beq.n	4025b8 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  402590:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  402592:	bf0c      	ite	eq
  402594:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  402596:	4a12      	ldrne	r2, [pc, #72]	; (4025e0 <nmi_get_chipid+0xa8>)
  402598:	4b0d      	ldr	r3, [pc, #52]	; (4025d0 <nmi_get_chipid+0x98>)
  40259a:	601a      	str	r2, [r3, #0]
  40259c:	e00c      	b.n	4025b8 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  40259e:	4a11      	ldr	r2, [pc, #68]	; (4025e4 <nmi_get_chipid+0xac>)
  4025a0:	4293      	cmp	r3, r2
  4025a2:	d109      	bne.n	4025b8 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  4025a4:	490a      	ldr	r1, [pc, #40]	; (4025d0 <nmi_get_chipid+0x98>)
  4025a6:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  4025aa:	4b0a      	ldr	r3, [pc, #40]	; (4025d4 <nmi_get_chipid+0x9c>)
  4025ac:	4798      	blx	r3
  4025ae:	b118      	cbz	r0, 4025b8 <nmi_get_chipid+0x80>
			chipid = 0;
  4025b0:	2200      	movs	r2, #0
  4025b2:	4b07      	ldr	r3, [pc, #28]	; (4025d0 <nmi_get_chipid+0x98>)
  4025b4:	601a      	str	r2, [r3, #0]
			return 0;
  4025b6:	e008      	b.n	4025ca <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  4025b8:	4a05      	ldr	r2, [pc, #20]	; (4025d0 <nmi_get_chipid+0x98>)
  4025ba:	6813      	ldr	r3, [r2, #0]
  4025bc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4025c0:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4025c4:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  4025c6:	4b02      	ldr	r3, [pc, #8]	; (4025d0 <nmi_get_chipid+0x98>)
  4025c8:	681c      	ldr	r4, [r3, #0]
}
  4025ca:	4620      	mov	r0, r4
  4025cc:	b002      	add	sp, #8
  4025ce:	bd10      	pop	{r4, pc}
  4025d0:	2040096c 	.word	0x2040096c
  4025d4:	00402831 	.word	0x00402831
  4025d8:	001002a0 	.word	0x001002a0
  4025dc:	001002b0 	.word	0x001002b0
  4025e0:	001002b2 	.word	0x001002b2
  4025e4:	001000f0 	.word	0x001000f0

004025e8 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  4025e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025ec:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4025ee:	f241 0514 	movw	r5, #4116	; 0x1014
  4025f2:	4c28      	ldr	r4, [pc, #160]	; (402694 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4025f4:	4e28      	ldr	r6, [pc, #160]	; (402698 <wait_for_bootrom+0xb0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4025f6:	4628      	mov	r0, r5
  4025f8:	47a0      	blx	r4
		if (reg & 0x80000000) {
  4025fa:	2800      	cmp	r0, #0
  4025fc:	db02      	blt.n	402604 <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4025fe:	2001      	movs	r0, #1
  402600:	47b0      	blx	r6
	}
  402602:	e7f8      	b.n	4025f6 <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  402604:	4825      	ldr	r0, [pc, #148]	; (40269c <wait_for_bootrom+0xb4>)
  402606:	4b23      	ldr	r3, [pc, #140]	; (402694 <wait_for_bootrom+0xac>)
  402608:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40260a:	f010 0f01 	tst.w	r0, #1
  40260e:	d110      	bne.n	402632 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  402610:	f8df 8084 	ldr.w	r8, [pc, #132]	; 402698 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  402614:	4e1f      	ldr	r6, [pc, #124]	; (402694 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  402616:	4d22      	ldr	r5, [pc, #136]	; (4026a0 <wait_for_bootrom+0xb8>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  402618:	2001      	movs	r0, #1
  40261a:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  40261c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  402620:	47b0      	blx	r6
  402622:	4604      	mov	r4, r0

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  402624:	462a      	mov	r2, r5
  402626:	4601      	mov	r1, r0
  402628:	481e      	ldr	r0, [pc, #120]	; (4026a4 <wait_for_bootrom+0xbc>)
  40262a:	4b1f      	ldr	r3, [pc, #124]	; (4026a8 <wait_for_bootrom+0xc0>)
  40262c:	4798      	blx	r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  40262e:	42ac      	cmp	r4, r5
  402630:	d1f2      	bne.n	402618 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  402632:	2f02      	cmp	r7, #2
  402634:	d10a      	bne.n	40264c <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  402636:	491d      	ldr	r1, [pc, #116]	; (4026ac <wait_for_bootrom+0xc4>)
  402638:	481d      	ldr	r0, [pc, #116]	; (4026b0 <wait_for_bootrom+0xc8>)
  40263a:	4c1e      	ldr	r4, [pc, #120]	; (4026b4 <wait_for_bootrom+0xcc>)
  40263c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  40263e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  402642:	f241 008c 	movw	r0, #4236	; 0x108c
  402646:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  402648:	2400      	movs	r4, #0
  40264a:	e00f      	b.n	40266c <wait_for_bootrom+0x84>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40264c:	2f03      	cmp	r7, #3
  40264e:	d109      	bne.n	402664 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  402650:	4916      	ldr	r1, [pc, #88]	; (4026ac <wait_for_bootrom+0xc4>)
  402652:	4817      	ldr	r0, [pc, #92]	; (4026b0 <wait_for_bootrom+0xc8>)
  402654:	4c17      	ldr	r4, [pc, #92]	; (4026b4 <wait_for_bootrom+0xcc>)
  402656:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  402658:	2100      	movs	r1, #0
  40265a:	f241 008c 	movw	r0, #4236	; 0x108c
  40265e:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  402660:	2400      	movs	r4, #0
  402662:	e003      	b.n	40266c <wait_for_bootrom+0x84>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  402664:	2f04      	cmp	r7, #4
  402666:	bf14      	ite	ne
  402668:	2400      	movne	r4, #0
  40266a:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  40266c:	4b12      	ldr	r3, [pc, #72]	; (4026b8 <wait_for_bootrom+0xd0>)
  40266e:	4798      	blx	r3
  402670:	f3c0 000b 	ubfx	r0, r0, #0, #12
  402674:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  402678:	bf0c      	ite	eq
  40267a:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  40267e:	4620      	movne	r0, r4
  402680:	4b0e      	ldr	r3, [pc, #56]	; (4026bc <wait_for_bootrom+0xd4>)
  402682:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  402684:	490e      	ldr	r1, [pc, #56]	; (4026c0 <wait_for_bootrom+0xd8>)
  402686:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  40268a:	4b0a      	ldr	r3, [pc, #40]	; (4026b4 <wait_for_bootrom+0xcc>)
  40268c:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  40268e:	2000      	movs	r0, #0
  402690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402694:	00402825 	.word	0x00402825
  402698:	00401179 	.word	0x00401179
  40269c:	000207bc 	.word	0x000207bc
  4026a0:	10add09e 	.word	0x10add09e
  4026a4:	0040c018 	.word	0x0040c018
  4026a8:	00405195 	.word	0x00405195
  4026ac:	3c1cd57d 	.word	0x3c1cd57d
  4026b0:	000207ac 	.word	0x000207ac
  4026b4:	0040283d 	.word	0x0040283d
  4026b8:	00402539 	.word	0x00402539
  4026bc:	00402365 	.word	0x00402365
  4026c0:	ef522f61 	.word	0xef522f61

004026c4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  4026c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4026c6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  4026c8:	f241 038c 	movw	r3, #4236	; 0x108c
  4026cc:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4026ce:	4b18      	ldr	r3, [pc, #96]	; (402730 <wait_for_firmware_start+0x6c>)
  4026d0:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4026d2:	3802      	subs	r0, #2
  4026d4:	b2c0      	uxtb	r0, r0
  4026d6:	2801      	cmp	r0, #1
  4026d8:	d810      	bhi.n	4026fc <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  4026da:	4b16      	ldr	r3, [pc, #88]	; (402734 <wait_for_firmware_start+0x70>)
  4026dc:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  4026de:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  4026e2:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  4026e6:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  4026ea:	9300      	str	r3, [sp, #0]
  4026ec:	e006      	b.n	4026fc <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4026ee:	4638      	mov	r0, r7
  4026f0:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4026f2:	9801      	ldr	r0, [sp, #4]
  4026f4:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  4026f6:	3c01      	subs	r4, #1
  4026f8:	d106      	bne.n	402708 <wait_for_firmware_start+0x44>
  4026fa:	e013      	b.n	402724 <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  4026fc:	f04f 34ff 	mov.w	r4, #4294967295
  402700:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  402702:	2702      	movs	r7, #2
  402704:	4e0c      	ldr	r6, [pc, #48]	; (402738 <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  402706:	4d0d      	ldr	r5, [pc, #52]	; (40273c <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  402708:	9b00      	ldr	r3, [sp, #0]
  40270a:	4298      	cmp	r0, r3
  40270c:	d1ef      	bne.n	4026ee <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  40270e:	9a00      	ldr	r2, [sp, #0]
  402710:	4b07      	ldr	r3, [pc, #28]	; (402730 <wait_for_firmware_start+0x6c>)
  402712:	429a      	cmp	r2, r3
  402714:	d109      	bne.n	40272a <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  402716:	2100      	movs	r1, #0
  402718:	f241 008c 	movw	r0, #4236	; 0x108c
  40271c:	4b08      	ldr	r3, [pc, #32]	; (402740 <wait_for_firmware_start+0x7c>)
  40271e:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  402720:	2000      	movs	r0, #0
  402722:	e003      	b.n	40272c <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  402724:	f06f 0004 	mvn.w	r0, #4
  402728:	e000      	b.n	40272c <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  40272a:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  40272c:	b003      	add	sp, #12
  40272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402730:	02532636 	.word	0x02532636
  402734:	000207ac 	.word	0x000207ac
  402738:	00401179 	.word	0x00401179
  40273c:	00402825 	.word	0x00402825
  402740:	0040283d 	.word	0x0040283d

00402744 <chip_deinit>:

sint8 chip_deinit(void)
{
  402744:	b5f0      	push	{r4, r5, r6, r7, lr}
  402746:	b083      	sub	sp, #12
	uint32 reg = 0;
  402748:	a902      	add	r1, sp, #8
  40274a:	2300      	movs	r3, #0
  40274c:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  402750:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  402754:	4b24      	ldr	r3, [pc, #144]	; (4027e8 <chip_deinit+0xa4>)
  402756:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  402758:	b148      	cbz	r0, 40276e <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  40275a:	f240 2231 	movw	r2, #561	; 0x231
  40275e:	4923      	ldr	r1, [pc, #140]	; (4027ec <chip_deinit+0xa8>)
  402760:	4823      	ldr	r0, [pc, #140]	; (4027f0 <chip_deinit+0xac>)
  402762:	4c24      	ldr	r4, [pc, #144]	; (4027f4 <chip_deinit+0xb0>)
  402764:	47a0      	blx	r4
  402766:	4824      	ldr	r0, [pc, #144]	; (4027f8 <chip_deinit+0xb4>)
  402768:	47a0      	blx	r4
  40276a:	4824      	ldr	r0, [pc, #144]	; (4027fc <chip_deinit+0xb8>)
  40276c:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  40276e:	9901      	ldr	r1, [sp, #4]
  402770:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  402774:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  402776:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40277a:	4b21      	ldr	r3, [pc, #132]	; (402800 <chip_deinit+0xbc>)
  40277c:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  40277e:	4605      	mov	r5, r0
  402780:	b158      	cbz	r0, 40279a <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  402782:	f240 2237 	movw	r2, #567	; 0x237
  402786:	4919      	ldr	r1, [pc, #100]	; (4027ec <chip_deinit+0xa8>)
  402788:	4819      	ldr	r0, [pc, #100]	; (4027f0 <chip_deinit+0xac>)
  40278a:	4c1a      	ldr	r4, [pc, #104]	; (4027f4 <chip_deinit+0xb0>)
  40278c:	47a0      	blx	r4
  40278e:	481d      	ldr	r0, [pc, #116]	; (402804 <chip_deinit+0xc0>)
  402790:	47a0      	blx	r4
  402792:	481a      	ldr	r0, [pc, #104]	; (4027fc <chip_deinit+0xb8>)
  402794:	47a0      	blx	r4
		return ret;
  402796:	4628      	mov	r0, r5
  402798:	e024      	b.n	4027e4 <chip_deinit+0xa0>
  40279a:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40279c:	4e12      	ldr	r6, [pc, #72]	; (4027e8 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40279e:	4f18      	ldr	r7, [pc, #96]	; (402800 <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4027a0:	a901      	add	r1, sp, #4
  4027a2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4027a6:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4027a8:	4605      	mov	r5, r0
  4027aa:	b158      	cbz	r0, 4027c4 <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  4027ac:	f240 223e 	movw	r2, #574	; 0x23e
  4027b0:	490e      	ldr	r1, [pc, #56]	; (4027ec <chip_deinit+0xa8>)
  4027b2:	480f      	ldr	r0, [pc, #60]	; (4027f0 <chip_deinit+0xac>)
  4027b4:	4c0f      	ldr	r4, [pc, #60]	; (4027f4 <chip_deinit+0xb0>)
  4027b6:	47a0      	blx	r4
  4027b8:	4813      	ldr	r0, [pc, #76]	; (402808 <chip_deinit+0xc4>)
  4027ba:	47a0      	blx	r4
  4027bc:	480f      	ldr	r0, [pc, #60]	; (4027fc <chip_deinit+0xb8>)
  4027be:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4027c0:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  4027c2:	e00f      	b.n	4027e4 <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  4027c4:	9901      	ldr	r1, [sp, #4]
  4027c6:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4027ca:	d00a      	beq.n	4027e2 <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  4027cc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4027d0:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4027d2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4027d6:	47b8      	blx	r7
  4027d8:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4027da:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4027de:	d1df      	bne.n	4027a0 <chip_deinit+0x5c>
  4027e0:	e000      	b.n	4027e4 <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4027e2:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  4027e4:	b003      	add	sp, #12
  4027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4027e8:	00402831 	.word	0x00402831
  4027ec:	0040bf70 	.word	0x0040bf70
  4027f0:	0040b978 	.word	0x0040b978
  4027f4:	00405195 	.word	0x00405195
  4027f8:	0040c028 	.word	0x0040c028
  4027fc:	0040cacc 	.word	0x0040cacc
  402800:	0040283d 	.word	0x0040283d
  402804:	0040c044 	.word	0x0040c044
  402808:	0040c060 	.word	0x0040c060

0040280c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  40280c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  40280e:	4b01      	ldr	r3, [pc, #4]	; (402814 <nm_bus_iface_init+0x8>)
  402810:	4798      	blx	r3

	return ret;
}
  402812:	bd08      	pop	{r3, pc}
  402814:	004012e9 	.word	0x004012e9

00402818 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  402818:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40281a:	4b01      	ldr	r3, [pc, #4]	; (402820 <nm_bus_iface_deinit+0x8>)
  40281c:	4798      	blx	r3

	return ret;
}
  40281e:	bd08      	pop	{r3, pc}
  402820:	004014d5 	.word	0x004014d5

00402824 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  402824:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  402826:	4b01      	ldr	r3, [pc, #4]	; (40282c <nm_read_reg+0x8>)
  402828:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40282a:	bd08      	pop	{r3, pc}
  40282c:	00403075 	.word	0x00403075

00402830 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  402830:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  402832:	4b01      	ldr	r3, [pc, #4]	; (402838 <nm_read_reg_with_ret+0x8>)
  402834:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  402836:	bd08      	pop	{r3, pc}
  402838:	0040308d 	.word	0x0040308d

0040283c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  40283c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  40283e:	4b01      	ldr	r3, [pc, #4]	; (402844 <nm_write_reg+0x8>)
  402840:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  402842:	bd08      	pop	{r3, pc}
  402844:	004030a5 	.word	0x004030a5

00402848 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  402848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40284c:	4607      	mov	r7, r0
  40284e:	4689      	mov	r9, r1
  402850:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  402852:	4b13      	ldr	r3, [pc, #76]	; (4028a0 <nm_read_block+0x58>)
  402854:	f8b3 8000 	ldrh.w	r8, [r3]
  402858:	f1a8 0808 	sub.w	r8, r8, #8
  40285c:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402860:	4542      	cmp	r2, r8
  402862:	d808      	bhi.n	402876 <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  402864:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  402866:	b2aa      	uxth	r2, r5
  402868:	eb09 0106 	add.w	r1, r9, r6
  40286c:	4638      	mov	r0, r7
  40286e:	4b0d      	ldr	r3, [pc, #52]	; (4028a4 <nm_read_block+0x5c>)
  402870:	4798      	blx	r3
  402872:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  402874:	e010      	b.n	402898 <nm_read_block+0x50>
  402876:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402878:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  40287a:	f8df a028 	ldr.w	sl, [pc, #40]	; 4028a4 <nm_read_block+0x5c>
  40287e:	4642      	mov	r2, r8
  402880:	eb09 0106 	add.w	r1, r9, r6
  402884:	4638      	mov	r0, r7
  402886:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  402888:	4603      	mov	r3, r0
  40288a:	b928      	cbnz	r0, 402898 <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  40288c:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40288e:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  402890:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  402892:	42a5      	cmp	r5, r4
  402894:	d8f3      	bhi.n	40287e <nm_read_block+0x36>
  402896:	e7e6      	b.n	402866 <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  402898:	4618      	mov	r0, r3
  40289a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40289e:	bf00      	nop
  4028a0:	20400030 	.word	0x20400030
  4028a4:	004031c9 	.word	0x004031c9

004028a8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4028a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4028ac:	4607      	mov	r7, r0
  4028ae:	4689      	mov	r9, r1
  4028b0:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4028b2:	4b13      	ldr	r3, [pc, #76]	; (402900 <nm_write_block+0x58>)
  4028b4:	f8b3 8000 	ldrh.w	r8, [r3]
  4028b8:	f1a8 0808 	sub.w	r8, r8, #8
  4028bc:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4028c0:	4542      	cmp	r2, r8
  4028c2:	d808      	bhi.n	4028d6 <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  4028c4:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4028c6:	b2aa      	uxth	r2, r5
  4028c8:	eb09 0106 	add.w	r1, r9, r6
  4028cc:	4638      	mov	r0, r7
  4028ce:	4b0d      	ldr	r3, [pc, #52]	; (402904 <nm_write_block+0x5c>)
  4028d0:	4798      	blx	r3
  4028d2:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  4028d4:	e010      	b.n	4028f8 <nm_write_block+0x50>
  4028d6:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4028d8:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4028da:	f8df a028 	ldr.w	sl, [pc, #40]	; 402904 <nm_write_block+0x5c>
  4028de:	4642      	mov	r2, r8
  4028e0:	eb09 0106 	add.w	r1, r9, r6
  4028e4:	4638      	mov	r0, r7
  4028e6:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4028e8:	4603      	mov	r3, r0
  4028ea:	b928      	cbnz	r0, 4028f8 <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  4028ec:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4028ee:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4028f0:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4028f2:	42a5      	cmp	r5, r4
  4028f4:	d8f3      	bhi.n	4028de <nm_write_block+0x36>
  4028f6:	e7e6      	b.n	4028c6 <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  4028f8:	4618      	mov	r0, r3
  4028fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028fe:	bf00      	nop
  402900:	20400030 	.word	0x20400030
  402904:	00403295 	.word	0x00403295

00402908 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  402908:	b530      	push	{r4, r5, lr}
  40290a:	b083      	sub	sp, #12
  40290c:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40290e:	a902      	add	r1, sp, #8
  402910:	2300      	movs	r3, #0
  402912:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  402916:	4823      	ldr	r0, [pc, #140]	; (4029a4 <nm_get_firmware_info+0x9c>)
  402918:	4b23      	ldr	r3, [pc, #140]	; (4029a8 <nm_get_firmware_info+0xa0>)
  40291a:	4798      	blx	r3
  40291c:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40291e:	9a01      	ldr	r2, [sp, #4]
  402920:	4b22      	ldr	r3, [pc, #136]	; (4029ac <nm_get_firmware_info+0xa4>)
  402922:	429a      	cmp	r2, r3
  402924:	d105      	bne.n	402932 <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  402926:	a901      	add	r1, sp, #4
  402928:	f241 0048 	movw	r0, #4168	; 0x1048
  40292c:	4b1e      	ldr	r3, [pc, #120]	; (4029a8 <nm_get_firmware_info+0xa0>)
  40292e:	4798      	blx	r3
  402930:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  402932:	9b01      	ldr	r3, [sp, #4]
  402934:	0c1a      	lsrs	r2, r3, #16
  402936:	1211      	asrs	r1, r2, #8
  402938:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  40293a:	f3c2 1103 	ubfx	r1, r2, #4, #4
  40293e:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  402940:	f002 020f 	and.w	r2, r2, #15
  402944:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  402946:	121a      	asrs	r2, r3, #8
  402948:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  40294a:	f3c3 1203 	ubfx	r2, r3, #4, #4
  40294e:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  402950:	f003 030f 	and.w	r3, r3, #15
  402954:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  402956:	4b16      	ldr	r3, [pc, #88]	; (4029b0 <nm_get_firmware_info+0xa8>)
  402958:	4798      	blx	r3
  40295a:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  40295c:	7922      	ldrb	r2, [r4, #4]
  40295e:	79a3      	ldrb	r3, [r4, #6]
  402960:	f003 030f 	and.w	r3, r3, #15
  402964:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  402968:	7963      	ldrb	r3, [r4, #5]
  40296a:	011b      	lsls	r3, r3, #4
  40296c:	b2db      	uxtb	r3, r3
  40296e:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  402970:	79e1      	ldrb	r1, [r4, #7]
  402972:	7a62      	ldrb	r2, [r4, #9]
  402974:	f002 020f 	and.w	r2, r2, #15
  402978:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  40297c:	7a22      	ldrb	r2, [r4, #8]
  40297e:	0112      	lsls	r2, r2, #4
  402980:	b2d2      	uxtb	r2, r2
  402982:	430a      	orrs	r2, r1
  402984:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  402988:	428a      	cmp	r2, r1
  40298a:	bf88      	it	hi
  40298c:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  402990:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  402994:	4293      	cmp	r3, r2
	}
	return ret;
}
  402996:	bf8c      	ite	hi
  402998:	4628      	movhi	r0, r5
  40299a:	f06f 000c 	mvnls.w	r0, #12
  40299e:	b003      	add	sp, #12
  4029a0:	bd30      	pop	{r4, r5, pc}
  4029a2:	bf00      	nop
  4029a4:	000207ac 	.word	0x000207ac
  4029a8:	00402831 	.word	0x00402831
  4029ac:	d75dc1c3 	.word	0xd75dc1c3
  4029b0:	00402539 	.word	0x00402539

004029b4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  4029b4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  4029b6:	b130      	cbz	r0, 4029c6 <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  4029b8:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  4029ba:	1e63      	subs	r3, r4, #1
  4029bc:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  4029be:	2b04      	cmp	r3, #4
  4029c0:	bf28      	it	cs
  4029c2:	2401      	movcs	r4, #1
  4029c4:	e000      	b.n	4029c8 <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  4029c6:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  4029c8:	2000      	movs	r0, #0
  4029ca:	4b1d      	ldr	r3, [pc, #116]	; (402a40 <nm_drv_init+0x8c>)
  4029cc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4029ce:	4605      	mov	r5, r0
  4029d0:	b150      	cbz	r0, 4029e8 <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  4029d2:	f44f 7292 	mov.w	r2, #292	; 0x124
  4029d6:	491b      	ldr	r1, [pc, #108]	; (402a44 <nm_drv_init+0x90>)
  4029d8:	481b      	ldr	r0, [pc, #108]	; (402a48 <nm_drv_init+0x94>)
  4029da:	4c1c      	ldr	r4, [pc, #112]	; (402a4c <nm_drv_init+0x98>)
  4029dc:	47a0      	blx	r4
  4029de:	481c      	ldr	r0, [pc, #112]	; (402a50 <nm_drv_init+0x9c>)
  4029e0:	47a0      	blx	r4
  4029e2:	481c      	ldr	r0, [pc, #112]	; (402a54 <nm_drv_init+0xa0>)
  4029e4:	47a0      	blx	r4
		goto ERR1;
  4029e6:	e029      	b.n	402a3c <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  4029e8:	481b      	ldr	r0, [pc, #108]	; (402a58 <nm_drv_init+0xa4>)
  4029ea:	4d18      	ldr	r5, [pc, #96]	; (402a4c <nm_drv_init+0x98>)
  4029ec:	47a8      	blx	r5
  4029ee:	4b1b      	ldr	r3, [pc, #108]	; (402a5c <nm_drv_init+0xa8>)
  4029f0:	4798      	blx	r3
  4029f2:	4601      	mov	r1, r0
  4029f4:	481a      	ldr	r0, [pc, #104]	; (402a60 <nm_drv_init+0xac>)
  4029f6:	47a8      	blx	r5
  4029f8:	4816      	ldr	r0, [pc, #88]	; (402a54 <nm_drv_init+0xa0>)
  4029fa:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  4029fc:	4b19      	ldr	r3, [pc, #100]	; (402a64 <nm_drv_init+0xb0>)
  4029fe:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  402a00:	4620      	mov	r0, r4
  402a02:	4b19      	ldr	r3, [pc, #100]	; (402a68 <nm_drv_init+0xb4>)
  402a04:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a06:	4605      	mov	r5, r0
  402a08:	b9b0      	cbnz	r0, 402a38 <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  402a0a:	4620      	mov	r0, r4
  402a0c:	4b17      	ldr	r3, [pc, #92]	; (402a6c <nm_drv_init+0xb8>)
  402a0e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a10:	4605      	mov	r5, r0
  402a12:	b988      	cbnz	r0, 402a38 <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  402a14:	3c02      	subs	r4, #2
  402a16:	b2e4      	uxtb	r4, r4
  402a18:	2c01      	cmp	r4, #1
  402a1a:	d90f      	bls.n	402a3c <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  402a1c:	4b14      	ldr	r3, [pc, #80]	; (402a70 <nm_drv_init+0xbc>)
  402a1e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a20:	4605      	mov	r5, r0
  402a22:	b158      	cbz	r0, 402a3c <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  402a24:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  402a28:	4906      	ldr	r1, [pc, #24]	; (402a44 <nm_drv_init+0x90>)
  402a2a:	4807      	ldr	r0, [pc, #28]	; (402a48 <nm_drv_init+0x94>)
  402a2c:	4c07      	ldr	r4, [pc, #28]	; (402a4c <nm_drv_init+0x98>)
  402a2e:	47a0      	blx	r4
  402a30:	4810      	ldr	r0, [pc, #64]	; (402a74 <nm_drv_init+0xc0>)
  402a32:	47a0      	blx	r4
  402a34:	4807      	ldr	r0, [pc, #28]	; (402a54 <nm_drv_init+0xa0>)
  402a36:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  402a38:	4b0f      	ldr	r3, [pc, #60]	; (402a78 <nm_drv_init+0xc4>)
  402a3a:	4798      	blx	r3
ERR1:
	return ret;
}
  402a3c:	4628      	mov	r0, r5
  402a3e:	bd38      	pop	{r3, r4, r5, pc}
  402a40:	0040280d 	.word	0x0040280d
  402a44:	0040c168 	.word	0x0040c168
  402a48:	0040b978 	.word	0x0040b978
  402a4c:	00405195 	.word	0x00405195
  402a50:	0040c0bc 	.word	0x0040c0bc
  402a54:	0040cacc 	.word	0x0040cacc
  402a58:	0040bc38 	.word	0x0040bc38
  402a5c:	00402539 	.word	0x00402539
  402a60:	0040c0d8 	.word	0x0040c0d8
  402a64:	004030bd 	.word	0x004030bd
  402a68:	004025e9 	.word	0x004025e9
  402a6c:	004026c5 	.word	0x004026c5
  402a70:	004024d1 	.word	0x004024d1
  402a74:	0040c0e8 	.word	0x0040c0e8
  402a78:	00402819 	.word	0x00402819

00402a7c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  402a7c:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  402a7e:	4b19      	ldr	r3, [pc, #100]	; (402ae4 <nm_drv_deinit+0x68>)
  402a80:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402a82:	b158      	cbz	r0, 402a9c <nm_drv_deinit+0x20>
  402a84:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  402a86:	f44f 72ba 	mov.w	r2, #372	; 0x174
  402a8a:	4917      	ldr	r1, [pc, #92]	; (402ae8 <nm_drv_deinit+0x6c>)
  402a8c:	4817      	ldr	r0, [pc, #92]	; (402aec <nm_drv_deinit+0x70>)
  402a8e:	4d18      	ldr	r5, [pc, #96]	; (402af0 <nm_drv_deinit+0x74>)
  402a90:	47a8      	blx	r5
  402a92:	4818      	ldr	r0, [pc, #96]	; (402af4 <nm_drv_deinit+0x78>)
  402a94:	47a8      	blx	r5
  402a96:	4818      	ldr	r0, [pc, #96]	; (402af8 <nm_drv_deinit+0x7c>)
  402a98:	47a8      	blx	r5
		goto ERR1;
  402a9a:	e020      	b.n	402ade <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  402a9c:	2000      	movs	r0, #0
  402a9e:	4b17      	ldr	r3, [pc, #92]	; (402afc <nm_drv_deinit+0x80>)
  402aa0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402aa2:	4604      	mov	r4, r0
  402aa4:	b150      	cbz	r0, 402abc <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  402aa6:	f240 127b 	movw	r2, #379	; 0x17b
  402aaa:	490f      	ldr	r1, [pc, #60]	; (402ae8 <nm_drv_deinit+0x6c>)
  402aac:	480f      	ldr	r0, [pc, #60]	; (402aec <nm_drv_deinit+0x70>)
  402aae:	4d10      	ldr	r5, [pc, #64]	; (402af0 <nm_drv_deinit+0x74>)
  402ab0:	47a8      	blx	r5
  402ab2:	4813      	ldr	r0, [pc, #76]	; (402b00 <nm_drv_deinit+0x84>)
  402ab4:	47a8      	blx	r5
  402ab6:	4810      	ldr	r0, [pc, #64]	; (402af8 <nm_drv_deinit+0x7c>)
  402ab8:	47a8      	blx	r5
		goto ERR1;
  402aba:	e010      	b.n	402ade <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  402abc:	4b11      	ldr	r3, [pc, #68]	; (402b04 <nm_drv_deinit+0x88>)
  402abe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  402ac0:	4604      	mov	r4, r0
  402ac2:	b150      	cbz	r0, 402ada <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  402ac4:	f240 1281 	movw	r2, #385	; 0x181
  402ac8:	4907      	ldr	r1, [pc, #28]	; (402ae8 <nm_drv_deinit+0x6c>)
  402aca:	4808      	ldr	r0, [pc, #32]	; (402aec <nm_drv_deinit+0x70>)
  402acc:	4d08      	ldr	r5, [pc, #32]	; (402af0 <nm_drv_deinit+0x74>)
  402ace:	47a8      	blx	r5
  402ad0:	480d      	ldr	r0, [pc, #52]	; (402b08 <nm_drv_deinit+0x8c>)
  402ad2:	47a8      	blx	r5
  402ad4:	4808      	ldr	r0, [pc, #32]	; (402af8 <nm_drv_deinit+0x7c>)
  402ad6:	47a8      	blx	r5
		goto ERR1;
  402ad8:	e001      	b.n	402ade <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  402ada:	4b0c      	ldr	r3, [pc, #48]	; (402b0c <nm_drv_deinit+0x90>)
  402adc:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  402ade:	4620      	mov	r0, r4
  402ae0:	bd38      	pop	{r3, r4, r5, pc}
  402ae2:	bf00      	nop
  402ae4:	00402745 	.word	0x00402745
  402ae8:	0040c174 	.word	0x0040c174
  402aec:	0040b978 	.word	0x0040b978
  402af0:	00405195 	.word	0x00405195
  402af4:	0040c108 	.word	0x0040c108
  402af8:	0040cacc 	.word	0x0040cacc
  402afc:	00403b25 	.word	0x00403b25
  402b00:	0040c128 	.word	0x0040c128
  402b04:	00402819 	.word	0x00402819
  402b08:	0040c14c 	.word	0x0040c14c
  402b0c:	00403069 	.word	0x00403069

00402b10 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  402b10:	b500      	push	{lr}
  402b12:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  402b14:	2300      	movs	r3, #0
  402b16:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  402b18:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  402b1a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402b1e:	a901      	add	r1, sp, #4
  402b20:	2003      	movs	r0, #3
  402b22:	4b02      	ldr	r3, [pc, #8]	; (402b2c <nmi_spi_read+0x1c>)
  402b24:	4798      	blx	r3
}
  402b26:	b005      	add	sp, #20
  402b28:	f85d fb04 	ldr.w	pc, [sp], #4
  402b2c:	00401405 	.word	0x00401405

00402b30 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402b30:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b32:	b083      	sub	sp, #12
  402b34:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  402b36:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  402b3a:	b2db      	uxtb	r3, r3
  402b3c:	2b01      	cmp	r3, #1
  402b3e:	d901      	bls.n	402b44 <spi_cmd_rsp+0x14>
  402b40:	28cf      	cmp	r0, #207	; 0xcf
  402b42:	d106      	bne.n	402b52 <spi_cmd_rsp+0x22>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402b44:	2101      	movs	r1, #1
  402b46:	f10d 0007 	add.w	r0, sp, #7
  402b4a:	4b22      	ldr	r3, [pc, #136]	; (402bd4 <spi_cmd_rsp+0xa4>)
  402b4c:	4798      	blx	r3
  402b4e:	2800      	cmp	r0, #0
  402b50:	d13a      	bne.n	402bc8 <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  402b52:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402b54:	2701      	movs	r7, #1
  402b56:	4e1f      	ldr	r6, [pc, #124]	; (402bd4 <spi_cmd_rsp+0xa4>)
  402b58:	4639      	mov	r1, r7
  402b5a:	f10d 0007 	add.w	r0, sp, #7
  402b5e:	47b0      	blx	r6
  402b60:	b158      	cbz	r0, 402b7a <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402b62:	f240 1227 	movw	r2, #295	; 0x127
  402b66:	491c      	ldr	r1, [pc, #112]	; (402bd8 <spi_cmd_rsp+0xa8>)
  402b68:	481c      	ldr	r0, [pc, #112]	; (402bdc <spi_cmd_rsp+0xac>)
  402b6a:	4c1d      	ldr	r4, [pc, #116]	; (402be0 <spi_cmd_rsp+0xb0>)
  402b6c:	47a0      	blx	r4
  402b6e:	481d      	ldr	r0, [pc, #116]	; (402be4 <spi_cmd_rsp+0xb4>)
  402b70:	47a0      	blx	r4
  402b72:	481d      	ldr	r0, [pc, #116]	; (402be8 <spi_cmd_rsp+0xb8>)
  402b74:	47a0      	blx	r4
			result = N_FAIL;
  402b76:	2000      	movs	r0, #0
			goto _fail_;
  402b78:	e029      	b.n	402bce <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  402b7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402b7e:	42ab      	cmp	r3, r5
  402b80:	d005      	beq.n	402b8e <spi_cmd_rsp+0x5e>
  402b82:	1e63      	subs	r3, r4, #1
  402b84:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  402b88:	d1e6      	bne.n	402b58 <spi_cmd_rsp+0x28>
  402b8a:	240b      	movs	r4, #11
  402b8c:	e000      	b.n	402b90 <spi_cmd_rsp+0x60>
  402b8e:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402b90:	2601      	movs	r6, #1
  402b92:	4d10      	ldr	r5, [pc, #64]	; (402bd4 <spi_cmd_rsp+0xa4>)
  402b94:	4631      	mov	r1, r6
  402b96:	f10d 0007 	add.w	r0, sp, #7
  402b9a:	47a8      	blx	r5
  402b9c:	b158      	cbz	r0, 402bb6 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  402b9e:	f240 1235 	movw	r2, #309	; 0x135
  402ba2:	490d      	ldr	r1, [pc, #52]	; (402bd8 <spi_cmd_rsp+0xa8>)
  402ba4:	480d      	ldr	r0, [pc, #52]	; (402bdc <spi_cmd_rsp+0xac>)
  402ba6:	4c0e      	ldr	r4, [pc, #56]	; (402be0 <spi_cmd_rsp+0xb0>)
  402ba8:	47a0      	blx	r4
  402baa:	480e      	ldr	r0, [pc, #56]	; (402be4 <spi_cmd_rsp+0xb4>)
  402bac:	47a0      	blx	r4
  402bae:	480e      	ldr	r0, [pc, #56]	; (402be8 <spi_cmd_rsp+0xb8>)
  402bb0:	47a0      	blx	r4
			result = N_FAIL;
  402bb2:	2000      	movs	r0, #0
			goto _fail_;
  402bb4:	e00b      	b.n	402bce <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  402bb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402bba:	b13b      	cbz	r3, 402bcc <spi_cmd_rsp+0x9c>
  402bbc:	1e63      	subs	r3, r4, #1
  402bbe:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  402bc2:	d1e7      	bne.n	402b94 <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  402bc4:	2001      	movs	r0, #1
  402bc6:	e002      	b.n	402bce <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  402bc8:	2000      	movs	r0, #0
  402bca:	e000      	b.n	402bce <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  402bcc:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  402bce:	b003      	add	sp, #12
  402bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402bd2:	bf00      	nop
  402bd4:	00402b11 	.word	0x00402b11
  402bd8:	0040c798 	.word	0x0040c798
  402bdc:	0040b978 	.word	0x0040b978
  402be0:	00405195 	.word	0x00405195
  402be4:	0040c2bc 	.word	0x0040c2bc
  402be8:	0040cacc 	.word	0x0040cacc

00402bec <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  402bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402bf0:	b083      	sub	sp, #12
  402bf2:	4682      	mov	sl, r0
  402bf4:	4689      	mov	r9, r1
  402bf6:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  402bf8:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402bfc:	4d35      	ldr	r5, [pc, #212]	; (402cd4 <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  402bfe:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  402c02:	bf94      	ite	ls
  402c04:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  402c08:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  402c0c:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  402c0e:	2601      	movs	r6, #1
  402c10:	4631      	mov	r1, r6
  402c12:	f10d 0003 	add.w	r0, sp, #3
  402c16:	47a8      	blx	r5
  402c18:	b158      	cbz	r0, 402c32 <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  402c1a:	f240 1257 	movw	r2, #343	; 0x157
  402c1e:	492e      	ldr	r1, [pc, #184]	; (402cd8 <spi_data_read+0xec>)
  402c20:	482e      	ldr	r0, [pc, #184]	; (402cdc <spi_data_read+0xf0>)
  402c22:	4c2f      	ldr	r4, [pc, #188]	; (402ce0 <spi_data_read+0xf4>)
  402c24:	47a0      	blx	r4
  402c26:	482f      	ldr	r0, [pc, #188]	; (402ce4 <spi_data_read+0xf8>)
  402c28:	47a0      	blx	r4
  402c2a:	482f      	ldr	r0, [pc, #188]	; (402ce8 <spi_data_read+0xfc>)
  402c2c:	47a0      	blx	r4
  402c2e:	2000      	movs	r0, #0
  402c30:	e04d      	b.n	402cce <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  402c32:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402c36:	091b      	lsrs	r3, r3, #4
  402c38:	2b0f      	cmp	r3, #15
  402c3a:	d005      	beq.n	402c48 <spi_data_read+0x5c>
  402c3c:	3c01      	subs	r4, #1
  402c3e:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  402c40:	f1b4 3fff 	cmp.w	r4, #4294967295
  402c44:	d1e4      	bne.n	402c10 <spi_data_read+0x24>
  402c46:	e001      	b.n	402c4c <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  402c48:	2c00      	cmp	r4, #0
  402c4a:	dc0d      	bgt.n	402c68 <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  402c4c:	f240 1263 	movw	r2, #355	; 0x163
  402c50:	4921      	ldr	r1, [pc, #132]	; (402cd8 <spi_data_read+0xec>)
  402c52:	4822      	ldr	r0, [pc, #136]	; (402cdc <spi_data_read+0xf0>)
  402c54:	4c22      	ldr	r4, [pc, #136]	; (402ce0 <spi_data_read+0xf4>)
  402c56:	47a0      	blx	r4
  402c58:	f89d 1003 	ldrb.w	r1, [sp, #3]
  402c5c:	4823      	ldr	r0, [pc, #140]	; (402cec <spi_data_read+0x100>)
  402c5e:	47a0      	blx	r4
  402c60:	4821      	ldr	r0, [pc, #132]	; (402ce8 <spi_data_read+0xfc>)
  402c62:	47a0      	blx	r4
			result = N_FAIL;
  402c64:	2000      	movs	r0, #0
			break;
  402c66:	e032      	b.n	402cce <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  402c68:	b2bf      	uxth	r7, r7
  402c6a:	4639      	mov	r1, r7
  402c6c:	eb0a 0008 	add.w	r0, sl, r8
  402c70:	47a8      	blx	r5
  402c72:	b158      	cbz	r0, 402c8c <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  402c74:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  402c78:	4917      	ldr	r1, [pc, #92]	; (402cd8 <spi_data_read+0xec>)
  402c7a:	4818      	ldr	r0, [pc, #96]	; (402cdc <spi_data_read+0xf0>)
  402c7c:	4c18      	ldr	r4, [pc, #96]	; (402ce0 <spi_data_read+0xf4>)
  402c7e:	47a0      	blx	r4
  402c80:	481b      	ldr	r0, [pc, #108]	; (402cf0 <spi_data_read+0x104>)
  402c82:	47a0      	blx	r4
  402c84:	4818      	ldr	r0, [pc, #96]	; (402ce8 <spi_data_read+0xfc>)
  402c86:	47a0      	blx	r4
			result = N_FAIL;
  402c88:	2000      	movs	r0, #0
			break;
  402c8a:	e020      	b.n	402cce <spi_data_read+0xe2>
		}
		if(!clockless)
  402c8c:	f1bb 0f00 	cmp.w	fp, #0
  402c90:	d112      	bne.n	402cb8 <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  402c92:	4b18      	ldr	r3, [pc, #96]	; (402cf4 <spi_data_read+0x108>)
  402c94:	781b      	ldrb	r3, [r3, #0]
  402c96:	b97b      	cbnz	r3, 402cb8 <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  402c98:	2102      	movs	r1, #2
  402c9a:	a801      	add	r0, sp, #4
  402c9c:	47a8      	blx	r5
  402c9e:	b158      	cbz	r0, 402cb8 <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  402ca0:	f240 1277 	movw	r2, #375	; 0x177
  402ca4:	490c      	ldr	r1, [pc, #48]	; (402cd8 <spi_data_read+0xec>)
  402ca6:	480d      	ldr	r0, [pc, #52]	; (402cdc <spi_data_read+0xf0>)
  402ca8:	4c0d      	ldr	r4, [pc, #52]	; (402ce0 <spi_data_read+0xf4>)
  402caa:	47a0      	blx	r4
  402cac:	4812      	ldr	r0, [pc, #72]	; (402cf8 <spi_data_read+0x10c>)
  402cae:	47a0      	blx	r4
  402cb0:	480d      	ldr	r0, [pc, #52]	; (402ce8 <spi_data_read+0xfc>)
  402cb2:	47a0      	blx	r4
					result = N_FAIL;
  402cb4:	2000      	movs	r0, #0
					break;
  402cb6:	e00a      	b.n	402cce <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  402cb8:	44b8      	add	r8, r7
  402cba:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  402cbe:	ebc7 0709 	rsb	r7, r7, r9
  402cc2:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  402cc6:	f1b9 0f00 	cmp.w	r9, #0
  402cca:	d198      	bne.n	402bfe <spi_data_read+0x12>
  402ccc:	2001      	movs	r0, #1

	return result;
}
  402cce:	b003      	add	sp, #12
  402cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cd4:	00402b11 	.word	0x00402b11
  402cd8:	0040c184 	.word	0x0040c184
  402cdc:	0040b978 	.word	0x0040b978
  402ce0:	00405195 	.word	0x00405195
  402ce4:	0040c2f0 	.word	0x0040c2f0
  402ce8:	0040cacc 	.word	0x0040cacc
  402cec:	0040c324 	.word	0x0040c324
  402cf0:	0040c354 	.word	0x0040c354
  402cf4:	20400970 	.word	0x20400970
  402cf8:	0040c388 	.word	0x0040c388

00402cfc <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  402cfc:	b500      	push	{lr}
  402cfe:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  402d00:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  402d02:	2300      	movs	r3, #0
  402d04:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  402d06:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  402d0a:	a901      	add	r1, sp, #4
  402d0c:	2003      	movs	r0, #3
  402d0e:	4b02      	ldr	r3, [pc, #8]	; (402d18 <nmi_spi_write+0x1c>)
  402d10:	4798      	blx	r3
}
  402d12:	b005      	add	sp, #20
  402d14:	f85d fb04 	ldr.w	pc, [sp], #4
  402d18:	00401405 	.word	0x00401405

00402d1c <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  402d1c:	b570      	push	{r4, r5, r6, lr}
  402d1e:	b084      	sub	sp, #16
  402d20:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  402d24:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  402d28:	38c1      	subs	r0, #193	; 0xc1
  402d2a:	280e      	cmp	r0, #14
  402d2c:	f200 80ae 	bhi.w	402e8c <spi_cmd+0x170>
  402d30:	e8df f000 	tbb	[pc, r0]
  402d34:	125f3e3e 	.word	0x125f3e3e
  402d38:	4d4d2c23 	.word	0x4d4d2c23
  402d3c:	acac0878 	.word	0xacac0878
  402d40:	acac      	.short	0xacac
  402d42:	35          	.byte	0x35
  402d43:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  402d44:	0c0b      	lsrs	r3, r1, #16
  402d46:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402d4a:	0a0b      	lsrs	r3, r1, #8
  402d4c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  402d50:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  402d54:	2105      	movs	r1, #5
		break;
  402d56:	e0a4      	b.n	402ea2 <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  402d58:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  402d5c:	b914      	cbnz	r4, 402d64 <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  402d5e:	f88d 3005 	strb.w	r3, [sp, #5]
  402d62:	e003      	b.n	402d6c <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  402d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402d68:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  402d6c:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  402d70:	2300      	movs	r3, #0
  402d72:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402d76:	2105      	movs	r1, #5
		break;
  402d78:	e093      	b.n	402ea2 <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  402d7a:	2300      	movs	r3, #0
  402d7c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402d80:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  402d84:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402d88:	2105      	movs	r1, #5
		break;
  402d8a:	e08a      	b.n	402ea2 <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  402d8c:	2300      	movs	r3, #0
  402d8e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  402d92:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  402d96:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402d9a:	2105      	movs	r1, #5
		break;
  402d9c:	e081      	b.n	402ea2 <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  402d9e:	23ff      	movs	r3, #255	; 0xff
  402da0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  402da4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  402da8:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  402dac:	2105      	movs	r1, #5
		break;
  402dae:	e078      	b.n	402ea2 <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  402db0:	0c0a      	lsrs	r2, r1, #16
  402db2:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402db6:	0a0a      	lsrs	r2, r1, #8
  402db8:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  402dbc:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  402dc0:	0a1a      	lsrs	r2, r3, #8
  402dc2:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  402dc6:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  402dca:	2107      	movs	r1, #7
		break;
  402dcc:	e069      	b.n	402ea2 <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  402dce:	0c0a      	lsrs	r2, r1, #16
  402dd0:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402dd4:	0a0a      	lsrs	r2, r1, #8
  402dd6:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  402dda:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  402dde:	0c1a      	lsrs	r2, r3, #16
  402de0:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  402de4:	0a1a      	lsrs	r2, r3, #8
  402de6:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  402dea:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  402dee:	2108      	movs	r1, #8
		break;
  402df0:	e057      	b.n	402ea2 <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  402df2:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  402df6:	b914      	cbnz	r4, 402dfe <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  402df8:	f88d 3005 	strb.w	r3, [sp, #5]
  402dfc:	e003      	b.n	402e06 <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  402dfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402e02:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  402e06:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  402e0a:	0e13      	lsrs	r3, r2, #24
  402e0c:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  402e10:	0c13      	lsrs	r3, r2, #16
  402e12:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  402e16:	0a13      	lsrs	r3, r2, #8
  402e18:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  402e1c:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  402e20:	2108      	movs	r1, #8
		break;
  402e22:	e03e      	b.n	402ea2 <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  402e24:	0c0b      	lsrs	r3, r1, #16
  402e26:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  402e2a:	0a0b      	lsrs	r3, r1, #8
  402e2c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  402e30:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  402e34:	0e13      	lsrs	r3, r2, #24
  402e36:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  402e3a:	0c13      	lsrs	r3, r2, #16
  402e3c:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  402e40:	0a13      	lsrs	r3, r2, #8
  402e42:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  402e46:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  402e4a:	2109      	movs	r1, #9
		break;
  402e4c:	e029      	b.n	402ea2 <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  402e4e:	f812 3b01 	ldrb.w	r3, [r2], #1
  402e52:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  402e56:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  402e58:	4295      	cmp	r5, r2
  402e5a:	d1f8      	bne.n	402e4e <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402e5c:	ab04      	add	r3, sp, #16
  402e5e:	441e      	add	r6, r3
  402e60:	0043      	lsls	r3, r0, #1
  402e62:	f806 3c0c 	strb.w	r3, [r6, #-12]
  402e66:	e001      	b.n	402e6c <spi_cmd+0x150>
		else
			len-=1;
  402e68:	3901      	subs	r1, #1
  402e6a:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  402e6c:	a801      	add	r0, sp, #4
  402e6e:	4b10      	ldr	r3, [pc, #64]	; (402eb0 <spi_cmd+0x194>)
  402e70:	4798      	blx	r3
  402e72:	b168      	cbz	r0, 402e90 <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  402e74:	f44f 7284 	mov.w	r2, #264	; 0x108
  402e78:	490e      	ldr	r1, [pc, #56]	; (402eb4 <spi_cmd+0x198>)
  402e7a:	480f      	ldr	r0, [pc, #60]	; (402eb8 <spi_cmd+0x19c>)
  402e7c:	4c0f      	ldr	r4, [pc, #60]	; (402ebc <spi_cmd+0x1a0>)
  402e7e:	47a0      	blx	r4
  402e80:	480f      	ldr	r0, [pc, #60]	; (402ec0 <spi_cmd+0x1a4>)
  402e82:	47a0      	blx	r4
  402e84:	480f      	ldr	r0, [pc, #60]	; (402ec4 <spi_cmd+0x1a8>)
  402e86:	47a0      	blx	r4
			result = N_FAIL;
  402e88:	2000      	movs	r0, #0
  402e8a:	e00f      	b.n	402eac <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  402e8c:	2000      	movs	r0, #0
  402e8e:	e00d      	b.n	402eac <spi_cmd+0x190>
  402e90:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  402e92:	e00b      	b.n	402eac <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  402e94:	1e4e      	subs	r6, r1, #1
  402e96:	ab01      	add	r3, sp, #4
  402e98:	199d      	adds	r5, r3, r6
  402e9a:	207f      	movs	r0, #127	; 0x7f
  402e9c:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  402e9e:	4c0a      	ldr	r4, [pc, #40]	; (402ec8 <spi_cmd+0x1ac>)
  402ea0:	e7d5      	b.n	402e4e <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  402ea2:	4b0a      	ldr	r3, [pc, #40]	; (402ecc <spi_cmd+0x1b0>)
  402ea4:	781b      	ldrb	r3, [r3, #0]
  402ea6:	2b00      	cmp	r3, #0
  402ea8:	d1de      	bne.n	402e68 <spi_cmd+0x14c>
  402eaa:	e7f3      	b.n	402e94 <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  402eac:	b004      	add	sp, #16
  402eae:	bd70      	pop	{r4, r5, r6, pc}
  402eb0:	00402cfd 	.word	0x00402cfd
  402eb4:	0040c780 	.word	0x0040c780
  402eb8:	0040b978 	.word	0x0040b978
  402ebc:	00405195 	.word	0x00405195
  402ec0:	0040c3c0 	.word	0x0040c3c0
  402ec4:	0040cacc 	.word	0x0040cacc
  402ec8:	0040c194 	.word	0x0040c194
  402ecc:	20400970 	.word	0x20400970

00402ed0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  402ed0:	b570      	push	{r4, r5, r6, lr}
  402ed2:	b082      	sub	sp, #8
  402ed4:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  402ed6:	2831      	cmp	r0, #49	; 0x31
  402ed8:	bf35      	itete	cc
  402eda:	2301      	movcc	r3, #1
  402edc:	2300      	movcs	r3, #0
  402ede:	25c3      	movcc	r5, #195	; 0xc3
  402ee0:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  402ee2:	9300      	str	r3, [sp, #0]
  402ee4:	2304      	movs	r3, #4
  402ee6:	460a      	mov	r2, r1
  402ee8:	4601      	mov	r1, r0
  402eea:	4628      	mov	r0, r5
  402eec:	4e16      	ldr	r6, [pc, #88]	; (402f48 <spi_write_reg+0x78>)
  402eee:	47b0      	blx	r6
	if (result != N_OK) {
  402ef0:	2801      	cmp	r0, #1
  402ef2:	d00c      	beq.n	402f0e <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  402ef4:	f240 12eb 	movw	r2, #491	; 0x1eb
  402ef8:	4914      	ldr	r1, [pc, #80]	; (402f4c <spi_write_reg+0x7c>)
  402efa:	4815      	ldr	r0, [pc, #84]	; (402f50 <spi_write_reg+0x80>)
  402efc:	4d15      	ldr	r5, [pc, #84]	; (402f54 <spi_write_reg+0x84>)
  402efe:	47a8      	blx	r5
  402f00:	4621      	mov	r1, r4
  402f02:	4815      	ldr	r0, [pc, #84]	; (402f58 <spi_write_reg+0x88>)
  402f04:	47a8      	blx	r5
  402f06:	4815      	ldr	r0, [pc, #84]	; (402f5c <spi_write_reg+0x8c>)
  402f08:	47a8      	blx	r5
		return N_FAIL;
  402f0a:	2000      	movs	r0, #0
  402f0c:	e01a      	b.n	402f44 <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  402f0e:	4628      	mov	r0, r5
  402f10:	4b13      	ldr	r3, [pc, #76]	; (402f60 <spi_write_reg+0x90>)
  402f12:	4798      	blx	r3
	if (result != N_OK) {
  402f14:	2801      	cmp	r0, #1
  402f16:	d014      	beq.n	402f42 <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  402f18:	f240 12f1 	movw	r2, #497	; 0x1f1
  402f1c:	490b      	ldr	r1, [pc, #44]	; (402f4c <spi_write_reg+0x7c>)
  402f1e:	480c      	ldr	r0, [pc, #48]	; (402f50 <spi_write_reg+0x80>)
  402f20:	4d0c      	ldr	r5, [pc, #48]	; (402f54 <spi_write_reg+0x84>)
  402f22:	47a8      	blx	r5
  402f24:	4621      	mov	r1, r4
  402f26:	480f      	ldr	r0, [pc, #60]	; (402f64 <spi_write_reg+0x94>)
  402f28:	47a8      	blx	r5
  402f2a:	480c      	ldr	r0, [pc, #48]	; (402f5c <spi_write_reg+0x8c>)
  402f2c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402f2e:	2400      	movs	r4, #0
  402f30:	9400      	str	r4, [sp, #0]
  402f32:	4623      	mov	r3, r4
  402f34:	4622      	mov	r2, r4
  402f36:	4621      	mov	r1, r4
  402f38:	20cf      	movs	r0, #207	; 0xcf
  402f3a:	4d03      	ldr	r5, [pc, #12]	; (402f48 <spi_write_reg+0x78>)
  402f3c:	47a8      	blx	r5
		return N_FAIL;
  402f3e:	4620      	mov	r0, r4
  402f40:	e000      	b.n	402f44 <spi_write_reg+0x74>
	}

	return N_OK;
  402f42:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  402f44:	b002      	add	sp, #8
  402f46:	bd70      	pop	{r4, r5, r6, pc}
  402f48:	00402d1d 	.word	0x00402d1d
  402f4c:	0040c770 	.word	0x0040c770
  402f50:	0040b978 	.word	0x0040b978
  402f54:	00405195 	.word	0x00405195
  402f58:	0040c3ec 	.word	0x0040c3ec
  402f5c:	0040cacc 	.word	0x0040cacc
  402f60:	00402b31 	.word	0x00402b31
  402f64:	0040c418 	.word	0x0040c418

00402f68 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  402f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402f6c:	b084      	sub	sp, #16
  402f6e:	4604      	mov	r4, r0
  402f70:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  402f72:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  402f76:	bf35      	itete	cc
  402f78:	2601      	movcc	r6, #1
  402f7a:	2600      	movcs	r6, #0
  402f7c:	25c4      	movcc	r5, #196	; 0xc4
  402f7e:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  402f80:	9600      	str	r6, [sp, #0]
  402f82:	2304      	movs	r3, #4
  402f84:	2200      	movs	r2, #0
  402f86:	4601      	mov	r1, r0
  402f88:	4628      	mov	r0, r5
  402f8a:	4f2d      	ldr	r7, [pc, #180]	; (403040 <spi_read_reg+0xd8>)
  402f8c:	47b8      	blx	r7
	if (result != N_OK) {
  402f8e:	2801      	cmp	r0, #1
  402f90:	d00c      	beq.n	402fac <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  402f92:	f240 2245 	movw	r2, #581	; 0x245
  402f96:	492b      	ldr	r1, [pc, #172]	; (403044 <spi_read_reg+0xdc>)
  402f98:	482b      	ldr	r0, [pc, #172]	; (403048 <spi_read_reg+0xe0>)
  402f9a:	4d2c      	ldr	r5, [pc, #176]	; (40304c <spi_read_reg+0xe4>)
  402f9c:	47a8      	blx	r5
  402f9e:	4621      	mov	r1, r4
  402fa0:	482b      	ldr	r0, [pc, #172]	; (403050 <spi_read_reg+0xe8>)
  402fa2:	47a8      	blx	r5
  402fa4:	482b      	ldr	r0, [pc, #172]	; (403054 <spi_read_reg+0xec>)
  402fa6:	47a8      	blx	r5
		return N_FAIL;
  402fa8:	2000      	movs	r0, #0
  402faa:	e045      	b.n	403038 <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  402fac:	4628      	mov	r0, r5
  402fae:	4b2a      	ldr	r3, [pc, #168]	; (403058 <spi_read_reg+0xf0>)
  402fb0:	4798      	blx	r3
	if (result != N_OK) {
  402fb2:	2801      	cmp	r0, #1
  402fb4:	d014      	beq.n	402fe0 <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  402fb6:	f240 224b 	movw	r2, #587	; 0x24b
  402fba:	4922      	ldr	r1, [pc, #136]	; (403044 <spi_read_reg+0xdc>)
  402fbc:	4822      	ldr	r0, [pc, #136]	; (403048 <spi_read_reg+0xe0>)
  402fbe:	4d23      	ldr	r5, [pc, #140]	; (40304c <spi_read_reg+0xe4>)
  402fc0:	47a8      	blx	r5
  402fc2:	4621      	mov	r1, r4
  402fc4:	4825      	ldr	r0, [pc, #148]	; (40305c <spi_read_reg+0xf4>)
  402fc6:	47a8      	blx	r5
  402fc8:	4822      	ldr	r0, [pc, #136]	; (403054 <spi_read_reg+0xec>)
  402fca:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  402fcc:	2400      	movs	r4, #0
  402fce:	9400      	str	r4, [sp, #0]
  402fd0:	4623      	mov	r3, r4
  402fd2:	4622      	mov	r2, r4
  402fd4:	4621      	mov	r1, r4
  402fd6:	20cf      	movs	r0, #207	; 0xcf
  402fd8:	4d19      	ldr	r5, [pc, #100]	; (403040 <spi_read_reg+0xd8>)
  402fda:	47a8      	blx	r5
		return N_FAIL;
  402fdc:	4620      	mov	r0, r4
  402fde:	e02b      	b.n	403038 <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  402fe0:	4632      	mov	r2, r6
  402fe2:	2104      	movs	r1, #4
  402fe4:	a803      	add	r0, sp, #12
  402fe6:	4b1e      	ldr	r3, [pc, #120]	; (403060 <spi_read_reg+0xf8>)
  402fe8:	4798      	blx	r3
	if (result != N_OK) {
  402fea:	2801      	cmp	r0, #1
  402fec:	d013      	beq.n	403016 <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  402fee:	f240 2253 	movw	r2, #595	; 0x253
  402ff2:	4914      	ldr	r1, [pc, #80]	; (403044 <spi_read_reg+0xdc>)
  402ff4:	4814      	ldr	r0, [pc, #80]	; (403048 <spi_read_reg+0xe0>)
  402ff6:	4c15      	ldr	r4, [pc, #84]	; (40304c <spi_read_reg+0xe4>)
  402ff8:	47a0      	blx	r4
  402ffa:	481a      	ldr	r0, [pc, #104]	; (403064 <spi_read_reg+0xfc>)
  402ffc:	47a0      	blx	r4
  402ffe:	4815      	ldr	r0, [pc, #84]	; (403054 <spi_read_reg+0xec>)
  403000:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403002:	2400      	movs	r4, #0
  403004:	9400      	str	r4, [sp, #0]
  403006:	4623      	mov	r3, r4
  403008:	4622      	mov	r2, r4
  40300a:	4621      	mov	r1, r4
  40300c:	20cf      	movs	r0, #207	; 0xcf
  40300e:	4d0c      	ldr	r5, [pc, #48]	; (403040 <spi_read_reg+0xd8>)
  403010:	47a8      	blx	r5
		return N_FAIL;
  403012:	4620      	mov	r0, r4
  403014:	e010      	b.n	403038 <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  403016:	f89d 100d 	ldrb.w	r1, [sp, #13]
  40301a:	f89d 200e 	ldrb.w	r2, [sp, #14]
  40301e:	0413      	lsls	r3, r2, #16
  403020:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  403024:	f89d 300c 	ldrb.w	r3, [sp, #12]
  403028:	4313      	orrs	r3, r2
  40302a:	f89d 200f 	ldrb.w	r2, [sp, #15]
  40302e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403032:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  403036:	2001      	movs	r0, #1
}
  403038:	b004      	add	sp, #16
  40303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40303e:	bf00      	nop
  403040:	00402d1d 	.word	0x00402d1d
  403044:	0040c7a4 	.word	0x0040c7a4
  403048:	0040b978 	.word	0x0040b978
  40304c:	00405195 	.word	0x00405195
  403050:	0040c450 	.word	0x0040c450
  403054:	0040cacc 	.word	0x0040cacc
  403058:	00402b31 	.word	0x00402b31
  40305c:	0040c47c 	.word	0x0040c47c
  403060:	00402bed 	.word	0x00402bed
  403064:	0040c4b0 	.word	0x0040c4b0

00403068 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  403068:	2000      	movs	r0, #0
  40306a:	4b01      	ldr	r3, [pc, #4]	; (403070 <nm_spi_deinit+0x8>)
  40306c:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  40306e:	4770      	bx	lr
  403070:	20400970 	.word	0x20400970

00403074 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  403074:	b500      	push	{lr}
  403076:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  403078:	a901      	add	r1, sp, #4
  40307a:	4b03      	ldr	r3, [pc, #12]	; (403088 <nm_spi_read_reg+0x14>)
  40307c:	4798      	blx	r3

	return u32Val;
}
  40307e:	9801      	ldr	r0, [sp, #4]
  403080:	b003      	add	sp, #12
  403082:	f85d fb04 	ldr.w	pc, [sp], #4
  403086:	bf00      	nop
  403088:	00402f69 	.word	0x00402f69

0040308c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  40308c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  40308e:	4b04      	ldr	r3, [pc, #16]	; (4030a0 <nm_spi_read_reg_with_ret+0x14>)
  403090:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403092:	2801      	cmp	r0, #1

	return s8Ret;
}
  403094:	bf0c      	ite	eq
  403096:	2000      	moveq	r0, #0
  403098:	f06f 0005 	mvnne.w	r0, #5
  40309c:	bd08      	pop	{r3, pc}
  40309e:	bf00      	nop
  4030a0:	00402f69 	.word	0x00402f69

004030a4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4030a4:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4030a6:	4b04      	ldr	r3, [pc, #16]	; (4030b8 <nm_spi_write_reg+0x14>)
  4030a8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4030aa:	2801      	cmp	r0, #1

	return s8Ret;
}
  4030ac:	bf0c      	ite	eq
  4030ae:	2000      	moveq	r0, #0
  4030b0:	f06f 0005 	mvnne.w	r0, #5
  4030b4:	bd08      	pop	{r3, pc}
  4030b6:	bf00      	nop
  4030b8:	00402ed1 	.word	0x00402ed1

004030bc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  4030bc:	b530      	push	{r4, r5, lr}
  4030be:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  4030c0:	2300      	movs	r3, #0
  4030c2:	a902      	add	r1, sp, #8
  4030c4:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  4030c8:	4a32      	ldr	r2, [pc, #200]	; (403194 <nm_spi_init+0xd8>)
  4030ca:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4030cc:	f64e 0024 	movw	r0, #59428	; 0xe824
  4030d0:	4b31      	ldr	r3, [pc, #196]	; (403198 <nm_spi_init+0xdc>)
  4030d2:	4798      	blx	r3
  4030d4:	b9f0      	cbnz	r0, 403114 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  4030d6:	2201      	movs	r2, #1
  4030d8:	4b2e      	ldr	r3, [pc, #184]	; (403194 <nm_spi_init+0xd8>)
  4030da:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4030dc:	f240 22c5 	movw	r2, #709	; 0x2c5
  4030e0:	492e      	ldr	r1, [pc, #184]	; (40319c <nm_spi_init+0xe0>)
  4030e2:	482f      	ldr	r0, [pc, #188]	; (4031a0 <nm_spi_init+0xe4>)
  4030e4:	4c2f      	ldr	r4, [pc, #188]	; (4031a4 <nm_spi_init+0xe8>)
  4030e6:	47a0      	blx	r4
  4030e8:	482f      	ldr	r0, [pc, #188]	; (4031a8 <nm_spi_init+0xec>)
  4030ea:	47a0      	blx	r4
  4030ec:	482f      	ldr	r0, [pc, #188]	; (4031ac <nm_spi_init+0xf0>)
  4030ee:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  4030f0:	4669      	mov	r1, sp
  4030f2:	f64e 0024 	movw	r0, #59428	; 0xe824
  4030f6:	4b28      	ldr	r3, [pc, #160]	; (403198 <nm_spi_init+0xdc>)
  4030f8:	4798      	blx	r3
  4030fa:	4604      	mov	r4, r0
  4030fc:	b950      	cbnz	r0, 403114 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4030fe:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  403102:	4926      	ldr	r1, [pc, #152]	; (40319c <nm_spi_init+0xe0>)
  403104:	4826      	ldr	r0, [pc, #152]	; (4031a0 <nm_spi_init+0xe4>)
  403106:	4d27      	ldr	r5, [pc, #156]	; (4031a4 <nm_spi_init+0xe8>)
  403108:	47a8      	blx	r5
  40310a:	4829      	ldr	r0, [pc, #164]	; (4031b0 <nm_spi_init+0xf4>)
  40310c:	47a8      	blx	r5
  40310e:	4827      	ldr	r0, [pc, #156]	; (4031ac <nm_spi_init+0xf0>)
  403110:	47a8      	blx	r5
			return 0;
  403112:	e03c      	b.n	40318e <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  403114:	4b1f      	ldr	r3, [pc, #124]	; (403194 <nm_spi_init+0xd8>)
  403116:	781b      	ldrb	r3, [r3, #0]
  403118:	b9cb      	cbnz	r3, 40314e <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  40311a:	9900      	ldr	r1, [sp, #0]
  40311c:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  403120:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403124:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  403126:	f64e 0024 	movw	r0, #59428	; 0xe824
  40312a:	4b22      	ldr	r3, [pc, #136]	; (4031b4 <nm_spi_init+0xf8>)
  40312c:	4798      	blx	r3
  40312e:	4604      	mov	r4, r0
  403130:	b950      	cbnz	r0, 403148 <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  403132:	f240 22d2 	movw	r2, #722	; 0x2d2
  403136:	4919      	ldr	r1, [pc, #100]	; (40319c <nm_spi_init+0xe0>)
  403138:	4819      	ldr	r0, [pc, #100]	; (4031a0 <nm_spi_init+0xe4>)
  40313a:	4d1a      	ldr	r5, [pc, #104]	; (4031a4 <nm_spi_init+0xe8>)
  40313c:	47a8      	blx	r5
  40313e:	481e      	ldr	r0, [pc, #120]	; (4031b8 <nm_spi_init+0xfc>)
  403140:	47a8      	blx	r5
  403142:	481a      	ldr	r0, [pc, #104]	; (4031ac <nm_spi_init+0xf0>)
  403144:	47a8      	blx	r5
			return 0;
  403146:	e022      	b.n	40318e <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  403148:	2201      	movs	r2, #1
  40314a:	4b12      	ldr	r3, [pc, #72]	; (403194 <nm_spi_init+0xd8>)
  40314c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  40314e:	a901      	add	r1, sp, #4
  403150:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403154:	4b10      	ldr	r3, [pc, #64]	; (403198 <nm_spi_init+0xdc>)
  403156:	4798      	blx	r3
  403158:	b960      	cbnz	r0, 403174 <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  40315a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  40315e:	490f      	ldr	r1, [pc, #60]	; (40319c <nm_spi_init+0xe0>)
  403160:	480f      	ldr	r0, [pc, #60]	; (4031a0 <nm_spi_init+0xe4>)
  403162:	4c10      	ldr	r4, [pc, #64]	; (4031a4 <nm_spi_init+0xe8>)
  403164:	47a0      	blx	r4
  403166:	4815      	ldr	r0, [pc, #84]	; (4031bc <nm_spi_init+0x100>)
  403168:	47a0      	blx	r4
  40316a:	4810      	ldr	r0, [pc, #64]	; (4031ac <nm_spi_init+0xf0>)
  40316c:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  40316e:	f06f 0405 	mvn.w	r4, #5
  403172:	e00c      	b.n	40318e <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  403174:	f64e 0024 	movw	r0, #59428	; 0xe824
  403178:	4b11      	ldr	r3, [pc, #68]	; (4031c0 <nm_spi_init+0x104>)
  40317a:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  40317c:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  403180:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403184:	f64e 0024 	movw	r0, #59428	; 0xe824
  403188:	4b0e      	ldr	r3, [pc, #56]	; (4031c4 <nm_spi_init+0x108>)
  40318a:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  40318c:	2400      	movs	r4, #0
}
  40318e:	4620      	mov	r0, r4
  403190:	b003      	add	sp, #12
  403192:	bd30      	pop	{r4, r5, pc}
  403194:	20400970 	.word	0x20400970
  403198:	00402f69 	.word	0x00402f69
  40319c:	0040c294 	.word	0x0040c294
  4031a0:	0040b978 	.word	0x0040b978
  4031a4:	00405195 	.word	0x00405195
  4031a8:	0040c4d0 	.word	0x0040c4d0
  4031ac:	0040cacc 	.word	0x0040cacc
  4031b0:	0040c520 	.word	0x0040c520
  4031b4:	00402ed1 	.word	0x00402ed1
  4031b8:	0040c550 	.word	0x0040c550
  4031bc:	0040c584 	.word	0x0040c584
  4031c0:	00403075 	.word	0x00403075
  4031c4:	004030a5 	.word	0x004030a5

004031c8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4031ca:	b083      	sub	sp, #12
  4031cc:	4604      	mov	r4, r0
  4031ce:	460f      	mov	r7, r1
  4031d0:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4031d2:	2200      	movs	r2, #0
  4031d4:	9200      	str	r2, [sp, #0]
  4031d6:	462b      	mov	r3, r5
  4031d8:	4601      	mov	r1, r0
  4031da:	20c8      	movs	r0, #200	; 0xc8
  4031dc:	4e23      	ldr	r6, [pc, #140]	; (40326c <nm_spi_read_block+0xa4>)
  4031de:	47b0      	blx	r6
	if (result != N_OK) {
  4031e0:	2801      	cmp	r0, #1
  4031e2:	d00b      	beq.n	4031fc <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4031e4:	f44f 721d 	mov.w	r2, #628	; 0x274
  4031e8:	4921      	ldr	r1, [pc, #132]	; (403270 <nm_spi_read_block+0xa8>)
  4031ea:	4822      	ldr	r0, [pc, #136]	; (403274 <nm_spi_read_block+0xac>)
  4031ec:	4d22      	ldr	r5, [pc, #136]	; (403278 <nm_spi_read_block+0xb0>)
  4031ee:	47a8      	blx	r5
  4031f0:	4621      	mov	r1, r4
  4031f2:	4822      	ldr	r0, [pc, #136]	; (40327c <nm_spi_read_block+0xb4>)
  4031f4:	47a8      	blx	r5
  4031f6:	4822      	ldr	r0, [pc, #136]	; (403280 <nm_spi_read_block+0xb8>)
  4031f8:	47a8      	blx	r5
  4031fa:	e032      	b.n	403262 <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  4031fc:	20c8      	movs	r0, #200	; 0xc8
  4031fe:	4b21      	ldr	r3, [pc, #132]	; (403284 <nm_spi_read_block+0xbc>)
  403200:	4798      	blx	r3
	if (result != N_OK) {
  403202:	2801      	cmp	r0, #1
  403204:	d012      	beq.n	40322c <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  403206:	f240 227a 	movw	r2, #634	; 0x27a
  40320a:	4919      	ldr	r1, [pc, #100]	; (403270 <nm_spi_read_block+0xa8>)
  40320c:	4819      	ldr	r0, [pc, #100]	; (403274 <nm_spi_read_block+0xac>)
  40320e:	4d1a      	ldr	r5, [pc, #104]	; (403278 <nm_spi_read_block+0xb0>)
  403210:	47a8      	blx	r5
  403212:	4621      	mov	r1, r4
  403214:	481c      	ldr	r0, [pc, #112]	; (403288 <nm_spi_read_block+0xc0>)
  403216:	47a8      	blx	r5
  403218:	4819      	ldr	r0, [pc, #100]	; (403280 <nm_spi_read_block+0xb8>)
  40321a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40321c:	2100      	movs	r1, #0
  40321e:	9100      	str	r1, [sp, #0]
  403220:	460b      	mov	r3, r1
  403222:	460a      	mov	r2, r1
  403224:	20cf      	movs	r0, #207	; 0xcf
  403226:	4c11      	ldr	r4, [pc, #68]	; (40326c <nm_spi_read_block+0xa4>)
  403228:	47a0      	blx	r4
  40322a:	e01a      	b.n	403262 <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  40322c:	2200      	movs	r2, #0
  40322e:	4629      	mov	r1, r5
  403230:	4638      	mov	r0, r7
  403232:	4b16      	ldr	r3, [pc, #88]	; (40328c <nm_spi_read_block+0xc4>)
  403234:	4798      	blx	r3
	if (result != N_OK) {
  403236:	2801      	cmp	r0, #1
  403238:	d011      	beq.n	40325e <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  40323a:	f44f 7221 	mov.w	r2, #644	; 0x284
  40323e:	490c      	ldr	r1, [pc, #48]	; (403270 <nm_spi_read_block+0xa8>)
  403240:	480c      	ldr	r0, [pc, #48]	; (403274 <nm_spi_read_block+0xac>)
  403242:	4c0d      	ldr	r4, [pc, #52]	; (403278 <nm_spi_read_block+0xb0>)
  403244:	47a0      	blx	r4
  403246:	4812      	ldr	r0, [pc, #72]	; (403290 <nm_spi_read_block+0xc8>)
  403248:	47a0      	blx	r4
  40324a:	480d      	ldr	r0, [pc, #52]	; (403280 <nm_spi_read_block+0xb8>)
  40324c:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40324e:	2100      	movs	r1, #0
  403250:	9100      	str	r1, [sp, #0]
  403252:	460b      	mov	r3, r1
  403254:	460a      	mov	r2, r1
  403256:	20cf      	movs	r0, #207	; 0xcf
  403258:	4c04      	ldr	r4, [pc, #16]	; (40326c <nm_spi_read_block+0xa4>)
  40325a:	47a0      	blx	r4
  40325c:	e001      	b.n	403262 <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40325e:	2000      	movs	r0, #0
  403260:	e001      	b.n	403266 <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  403262:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  403266:	b003      	add	sp, #12
  403268:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40326a:	bf00      	nop
  40326c:	00402d1d 	.word	0x00402d1d
  403270:	0040c2b0 	.word	0x0040c2b0
  403274:	0040b978 	.word	0x0040b978
  403278:	00405195 	.word	0x00405195
  40327c:	0040c5ac 	.word	0x0040c5ac
  403280:	0040cacc 	.word	0x0040cacc
  403284:	00402b31 	.word	0x00402b31
  403288:	0040c5dc 	.word	0x0040c5dc
  40328c:	00402bed 	.word	0x00402bed
  403290:	0040c614 	.word	0x0040c614

00403294 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403298:	b085      	sub	sp, #20
  40329a:	4604      	mov	r4, r0
  40329c:	4688      	mov	r8, r1
  40329e:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  4032a0:	2200      	movs	r2, #0
  4032a2:	9200      	str	r2, [sp, #0]
  4032a4:	462b      	mov	r3, r5
  4032a6:	4601      	mov	r1, r0
  4032a8:	20c7      	movs	r0, #199	; 0xc7
  4032aa:	4e4c      	ldr	r6, [pc, #304]	; (4033dc <nm_spi_write_block+0x148>)
  4032ac:	47b0      	blx	r6
	if (result != N_OK) {
  4032ae:	2801      	cmp	r0, #1
  4032b0:	d00b      	beq.n	4032ca <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  4032b2:	f240 220f 	movw	r2, #527	; 0x20f
  4032b6:	494a      	ldr	r1, [pc, #296]	; (4033e0 <nm_spi_write_block+0x14c>)
  4032b8:	484a      	ldr	r0, [pc, #296]	; (4033e4 <nm_spi_write_block+0x150>)
  4032ba:	4d4b      	ldr	r5, [pc, #300]	; (4033e8 <nm_spi_write_block+0x154>)
  4032bc:	47a8      	blx	r5
  4032be:	4621      	mov	r1, r4
  4032c0:	484a      	ldr	r0, [pc, #296]	; (4033ec <nm_spi_write_block+0x158>)
  4032c2:	47a8      	blx	r5
  4032c4:	484a      	ldr	r0, [pc, #296]	; (4033f0 <nm_spi_write_block+0x15c>)
  4032c6:	47a8      	blx	r5
  4032c8:	e082      	b.n	4033d0 <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  4032ca:	20c7      	movs	r0, #199	; 0xc7
  4032cc:	4b49      	ldr	r3, [pc, #292]	; (4033f4 <nm_spi_write_block+0x160>)
  4032ce:	4798      	blx	r3
	if (result != N_OK) {
  4032d0:	2801      	cmp	r0, #1
  4032d2:	d012      	beq.n	4032fa <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4032d4:	f240 2215 	movw	r2, #533	; 0x215
  4032d8:	4941      	ldr	r1, [pc, #260]	; (4033e0 <nm_spi_write_block+0x14c>)
  4032da:	4842      	ldr	r0, [pc, #264]	; (4033e4 <nm_spi_write_block+0x150>)
  4032dc:	4d42      	ldr	r5, [pc, #264]	; (4033e8 <nm_spi_write_block+0x154>)
  4032de:	47a8      	blx	r5
  4032e0:	4621      	mov	r1, r4
  4032e2:	4845      	ldr	r0, [pc, #276]	; (4033f8 <nm_spi_write_block+0x164>)
  4032e4:	47a8      	blx	r5
  4032e6:	4842      	ldr	r0, [pc, #264]	; (4033f0 <nm_spi_write_block+0x15c>)
  4032e8:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4032ea:	2100      	movs	r1, #0
  4032ec:	9100      	str	r1, [sp, #0]
  4032ee:	460b      	mov	r3, r1
  4032f0:	460a      	mov	r2, r1
  4032f2:	20cf      	movs	r0, #207	; 0xcf
  4032f4:	4c39      	ldr	r4, [pc, #228]	; (4033dc <nm_spi_write_block+0x148>)
  4032f6:	47a0      	blx	r4
  4032f8:	e06a      	b.n	4033d0 <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  4032fa:	2400      	movs	r4, #0
  4032fc:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  403300:	4f3e      	ldr	r7, [pc, #248]	; (4033fc <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  403302:	f8df 9110 	ldr.w	r9, [pc, #272]	; 403414 <nm_spi_write_block+0x180>
  403306:	462e      	mov	r6, r5
  403308:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40330c:	bf28      	it	cs
  40330e:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  403312:	b92c      	cbnz	r4, 403320 <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  403314:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  403318:	bf94      	ite	ls
  40331a:	2303      	movls	r3, #3
  40331c:	2301      	movhi	r3, #1
  40331e:	e004      	b.n	40332a <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  403320:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  403324:	bf94      	ite	ls
  403326:	2303      	movls	r3, #3
  403328:	2302      	movhi	r3, #2
		}
		cmd |= order;
  40332a:	f063 030f 	orn	r3, r3, #15
  40332e:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  403332:	2101      	movs	r1, #1
  403334:	f10d 000b 	add.w	r0, sp, #11
  403338:	47b8      	blx	r7
  40333a:	b150      	cbz	r0, 403352 <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  40333c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  403340:	492f      	ldr	r1, [pc, #188]	; (403400 <nm_spi_write_block+0x16c>)
  403342:	4828      	ldr	r0, [pc, #160]	; (4033e4 <nm_spi_write_block+0x150>)
  403344:	4c28      	ldr	r4, [pc, #160]	; (4033e8 <nm_spi_write_block+0x154>)
  403346:	47a0      	blx	r4
  403348:	482e      	ldr	r0, [pc, #184]	; (403404 <nm_spi_write_block+0x170>)
  40334a:	47a0      	blx	r4
  40334c:	4828      	ldr	r0, [pc, #160]	; (4033f0 <nm_spi_write_block+0x15c>)
  40334e:	47a0      	blx	r4
  403350:	e028      	b.n	4033a4 <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  403352:	4631      	mov	r1, r6
  403354:	eb08 0004 	add.w	r0, r8, r4
  403358:	47b8      	blx	r7
  40335a:	b150      	cbz	r0, 403372 <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  40335c:	f240 12b1 	movw	r2, #433	; 0x1b1
  403360:	4927      	ldr	r1, [pc, #156]	; (403400 <nm_spi_write_block+0x16c>)
  403362:	4820      	ldr	r0, [pc, #128]	; (4033e4 <nm_spi_write_block+0x150>)
  403364:	4c20      	ldr	r4, [pc, #128]	; (4033e8 <nm_spi_write_block+0x154>)
  403366:	47a0      	blx	r4
  403368:	4827      	ldr	r0, [pc, #156]	; (403408 <nm_spi_write_block+0x174>)
  40336a:	47a0      	blx	r4
  40336c:	4820      	ldr	r0, [pc, #128]	; (4033f0 <nm_spi_write_block+0x15c>)
  40336e:	47a0      	blx	r4
  403370:	e018      	b.n	4033a4 <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  403372:	f899 3000 	ldrb.w	r3, [r9]
  403376:	b973      	cbnz	r3, 403396 <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  403378:	2102      	movs	r1, #2
  40337a:	a803      	add	r0, sp, #12
  40337c:	47b8      	blx	r7
  40337e:	b150      	cbz	r0, 403396 <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  403380:	f240 12bb 	movw	r2, #443	; 0x1bb
  403384:	491e      	ldr	r1, [pc, #120]	; (403400 <nm_spi_write_block+0x16c>)
  403386:	4817      	ldr	r0, [pc, #92]	; (4033e4 <nm_spi_write_block+0x150>)
  403388:	4c17      	ldr	r4, [pc, #92]	; (4033e8 <nm_spi_write_block+0x154>)
  40338a:	47a0      	blx	r4
  40338c:	481f      	ldr	r0, [pc, #124]	; (40340c <nm_spi_write_block+0x178>)
  40338e:	47a0      	blx	r4
  403390:	4817      	ldr	r0, [pc, #92]	; (4033f0 <nm_spi_write_block+0x15c>)
  403392:	47a0      	blx	r4
  403394:	e006      	b.n	4033a4 <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  403396:	4434      	add	r4, r6
  403398:	b224      	sxth	r4, r4
		sz -= nbytes;
  40339a:	1bad      	subs	r5, r5, r6
  40339c:	b2ad      	uxth	r5, r5
	} while (sz);
  40339e:	2d00      	cmp	r5, #0
  4033a0:	d1b1      	bne.n	403306 <nm_spi_write_block+0x72>
  4033a2:	e013      	b.n	4033cc <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4033a4:	f240 2226 	movw	r2, #550	; 0x226
  4033a8:	490d      	ldr	r1, [pc, #52]	; (4033e0 <nm_spi_write_block+0x14c>)
  4033aa:	480e      	ldr	r0, [pc, #56]	; (4033e4 <nm_spi_write_block+0x150>)
  4033ac:	4c0e      	ldr	r4, [pc, #56]	; (4033e8 <nm_spi_write_block+0x154>)
  4033ae:	47a0      	blx	r4
  4033b0:	4817      	ldr	r0, [pc, #92]	; (403410 <nm_spi_write_block+0x17c>)
  4033b2:	47a0      	blx	r4
  4033b4:	480e      	ldr	r0, [pc, #56]	; (4033f0 <nm_spi_write_block+0x15c>)
  4033b6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4033b8:	2400      	movs	r4, #0
  4033ba:	9400      	str	r4, [sp, #0]
  4033bc:	4623      	mov	r3, r4
  4033be:	4622      	mov	r2, r4
  4033c0:	4621      	mov	r1, r4
  4033c2:	20cf      	movs	r0, #207	; 0xcf
  4033c4:	4d05      	ldr	r5, [pc, #20]	; (4033dc <nm_spi_write_block+0x148>)
  4033c6:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4033c8:	4620      	mov	r0, r4
  4033ca:	e003      	b.n	4033d4 <nm_spi_write_block+0x140>
  4033cc:	2000      	movs	r0, #0
  4033ce:	e001      	b.n	4033d4 <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  4033d0:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4033d4:	b005      	add	sp, #20
  4033d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4033da:	bf00      	nop
  4033dc:	00402d1d 	.word	0x00402d1d
  4033e0:	0040c788 	.word	0x0040c788
  4033e4:	0040b978 	.word	0x0040b978
  4033e8:	00405195 	.word	0x00405195
  4033ec:	0040c63c 	.word	0x0040c63c
  4033f0:	0040cacc 	.word	0x0040cacc
  4033f4:	00402b31 	.word	0x00402b31
  4033f8:	0040c66c 	.word	0x0040c66c
  4033fc:	00402cfd 	.word	0x00402cfd
  403400:	0040c2a0 	.word	0x0040c2a0
  403404:	0040c6a4 	.word	0x0040c6a4
  403408:	0040c6dc 	.word	0x0040c6dc
  40340c:	0040c710 	.word	0x0040c710
  403410:	0040c748 	.word	0x0040c748
  403414:	20400970 	.word	0x20400970

00403418 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  403418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40341c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  403420:	2c00      	cmp	r4, #0
  403422:	d047      	beq.n	4034b4 <Socket_ReadSocketData+0x9c>
  403424:	4681      	mov	r9, r0
  403426:	460e      	mov	r6, r1
  403428:	4692      	mov	sl, r2
  40342a:	4698      	mov	r8, r3
  40342c:	0103      	lsls	r3, r0, #4
  40342e:	4922      	ldr	r1, [pc, #136]	; (4034b8 <Socket_ReadSocketData+0xa0>)
  403430:	58cb      	ldr	r3, [r1, r3]
  403432:	2b00      	cmp	r3, #0
  403434:	d03e      	beq.n	4034b4 <Socket_ReadSocketData+0x9c>
  403436:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40343a:	889b      	ldrh	r3, [r3, #4]
  40343c:	b29b      	uxth	r3, r3
  40343e:	2b00      	cmp	r3, #0
  403440:	d038      	beq.n	4034b4 <Socket_ReadSocketData+0x9c>
  403442:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  403446:	7a9b      	ldrb	r3, [r3, #10]
  403448:	b2db      	uxtb	r3, r3
  40344a:	2b01      	cmp	r3, #1
  40344c:	d132      	bne.n	4034b4 <Socket_ReadSocketData+0x9c>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  40344e:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  403450:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  403454:	f8df b078 	ldr.w	fp, [pc, #120]	; 4034d0 <Socket_ReadSocketData+0xb8>
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  403458:	88bb      	ldrh	r3, [r7, #4]
			if(s16Diff > 0)
  40345a:	1ae3      	subs	r3, r4, r3
  40345c:	b21b      	sxth	r3, r3
  40345e:	2b00      	cmp	r3, #0
  403460:	dd03      	ble.n	40346a <Socket_ReadSocketData+0x52>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  403462:	88bd      	ldrh	r5, [r7, #4]
  403464:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
  403466:	2300      	movs	r3, #0
  403468:	e001      	b.n	40346e <Socket_ReadSocketData+0x56>
  40346a:	4625      	mov	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
  40346c:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  40346e:	6839      	ldr	r1, [r7, #0]
  403470:	462a      	mov	r2, r5
  403472:	4640      	mov	r0, r8
  403474:	47d8      	blx	fp
  403476:	b9a8      	cbnz	r0, 4034a4 <Socket_ReadSocketData+0x8c>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  403478:	683b      	ldr	r3, [r7, #0]
  40347a:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  40347c:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  40347e:	88f3      	ldrh	r3, [r6, #6]
  403480:	1b5b      	subs	r3, r3, r5
  403482:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
  403484:	4b0d      	ldr	r3, [pc, #52]	; (4034bc <Socket_ReadSocketData+0xa4>)
  403486:	681b      	ldr	r3, [r3, #0]
  403488:	b12b      	cbz	r3, 403496 <Socket_ReadSocketData+0x7e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  40348a:	4b0c      	ldr	r3, [pc, #48]	; (4034bc <Socket_ReadSocketData+0xa4>)
  40348c:	681b      	ldr	r3, [r3, #0]
  40348e:	4632      	mov	r2, r6
  403490:	4651      	mov	r1, sl
  403492:	4648      	mov	r0, r9
  403494:	4798      	blx	r3

				u16ReadCount -= u16Read;
  403496:	1b64      	subs	r4, r4, r5
  403498:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  40349a:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  40349c:	2c00      	cmp	r4, #0
  40349e:	d1db      	bne.n	403458 <Socket_ReadSocketData+0x40>
  4034a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4034a4:	4806      	ldr	r0, [pc, #24]	; (4034c0 <Socket_ReadSocketData+0xa8>)
  4034a6:	4d07      	ldr	r5, [pc, #28]	; (4034c4 <Socket_ReadSocketData+0xac>)
  4034a8:	47a8      	blx	r5
  4034aa:	4621      	mov	r1, r4
  4034ac:	4806      	ldr	r0, [pc, #24]	; (4034c8 <Socket_ReadSocketData+0xb0>)
  4034ae:	47a8      	blx	r5
  4034b0:	4806      	ldr	r0, [pc, #24]	; (4034cc <Socket_ReadSocketData+0xb4>)
  4034b2:	47a8      	blx	r5
  4034b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034b8:	20401598 	.word	0x20401598
  4034bc:	20401648 	.word	0x20401648
  4034c0:	0040bc38 	.word	0x0040bc38
  4034c4:	00405195 	.word	0x00405195
  4034c8:	0040c7b4 	.word	0x0040c7b4
  4034cc:	0040cacc 	.word	0x0040cacc
  4034d0:	00401b85 	.word	0x00401b85

004034d4 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  4034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034d6:	b099      	sub	sp, #100	; 0x64
  4034d8:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  4034da:	2841      	cmp	r0, #65	; 0x41
  4034dc:	d119      	bne.n	403512 <m2m_ip_cb+0x3e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4034de:	2300      	movs	r3, #0
  4034e0:	2204      	movs	r2, #4
  4034e2:	a907      	add	r1, sp, #28
  4034e4:	4620      	mov	r0, r4
  4034e6:	4ca4      	ldr	r4, [pc, #656]	; (403778 <m2m_ip_cb+0x2a4>)
  4034e8:	47a0      	blx	r4
  4034ea:	2800      	cmp	r0, #0
  4034ec:	f040 8141 	bne.w	403772 <m2m_ip_cb+0x29e>
		{
			strBind.status = strBindReply.s8Status;
  4034f0:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4034f4:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4034f8:	4ba0      	ldr	r3, [pc, #640]	; (40377c <m2m_ip_cb+0x2a8>)
  4034fa:	681b      	ldr	r3, [r3, #0]
  4034fc:	2b00      	cmp	r3, #0
  4034fe:	f000 8138 	beq.w	403772 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  403502:	4b9e      	ldr	r3, [pc, #632]	; (40377c <m2m_ip_cb+0x2a8>)
  403504:	681b      	ldr	r3, [r3, #0]
  403506:	aa03      	add	r2, sp, #12
  403508:	2101      	movs	r1, #1
  40350a:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40350e:	4798      	blx	r3
  403510:	e12f      	b.n	403772 <m2m_ip_cb+0x29e>
  403512:	460d      	mov	r5, r1
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  403514:	2842      	cmp	r0, #66	; 0x42
  403516:	d119      	bne.n	40354c <m2m_ip_cb+0x78>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  403518:	2300      	movs	r3, #0
  40351a:	2204      	movs	r2, #4
  40351c:	a907      	add	r1, sp, #28
  40351e:	4620      	mov	r0, r4
  403520:	4c95      	ldr	r4, [pc, #596]	; (403778 <m2m_ip_cb+0x2a4>)
  403522:	47a0      	blx	r4
  403524:	2800      	cmp	r0, #0
  403526:	f040 8124 	bne.w	403772 <m2m_ip_cb+0x29e>
		{
			strListen.status = strListenReply.s8Status;
  40352a:	f89d 301d 	ldrb.w	r3, [sp, #29]
  40352e:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  403532:	4b92      	ldr	r3, [pc, #584]	; (40377c <m2m_ip_cb+0x2a8>)
  403534:	681b      	ldr	r3, [r3, #0]
  403536:	2b00      	cmp	r3, #0
  403538:	f000 811b 	beq.w	403772 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  40353c:	4b8f      	ldr	r3, [pc, #572]	; (40377c <m2m_ip_cb+0x2a8>)
  40353e:	681b      	ldr	r3, [r3, #0]
  403540:	aa03      	add	r2, sp, #12
  403542:	2102      	movs	r1, #2
  403544:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  403548:	4798      	blx	r3
  40354a:	e112      	b.n	403772 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  40354c:	2843      	cmp	r0, #67	; 0x43
  40354e:	d13f      	bne.n	4035d0 <m2m_ip_cb+0xfc>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  403550:	2300      	movs	r3, #0
  403552:	220c      	movs	r2, #12
  403554:	eb0d 0102 	add.w	r1, sp, r2
  403558:	4620      	mov	r0, r4
  40355a:	4c87      	ldr	r4, [pc, #540]	; (403778 <m2m_ip_cb+0x2a4>)
  40355c:	47a0      	blx	r4
  40355e:	2800      	cmp	r0, #0
  403560:	f040 8107 	bne.w	403772 <m2m_ip_cb+0x29e>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  403564:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  403568:	2b00      	cmp	r3, #0
  40356a:	db19      	blt.n	4035a0 <m2m_ip_cb+0xcc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  40356c:	4a84      	ldr	r2, [pc, #528]	; (403780 <m2m_ip_cb+0x2ac>)
  40356e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  403572:	2100      	movs	r1, #0
  403574:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  403576:	2101      	movs	r1, #1
  403578:	7291      	strb	r1, [r2, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  40357a:	4982      	ldr	r1, [pc, #520]	; (403784 <m2m_ip_cb+0x2b0>)
  40357c:	880a      	ldrh	r2, [r1, #0]
  40357e:	3201      	adds	r2, #1
  403580:	b292      	uxth	r2, r2
  403582:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  403584:	880a      	ldrh	r2, [r1, #0]
  403586:	b292      	uxth	r2, r2
  403588:	b91a      	cbnz	r2, 403592 <m2m_ip_cb+0xbe>
					++gu16SessionID;
  40358a:	880a      	ldrh	r2, [r1, #0]
  40358c:	3201      	adds	r2, #1
  40358e:	b292      	uxth	r2, r2
  403590:	800a      	strh	r2, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  403592:	4a7c      	ldr	r2, [pc, #496]	; (403784 <m2m_ip_cb+0x2b0>)
  403594:	8811      	ldrh	r1, [r2, #0]
  403596:	b289      	uxth	r1, r1
  403598:	4a79      	ldr	r2, [pc, #484]	; (403780 <m2m_ip_cb+0x2ac>)
  40359a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  40359e:	80d1      	strh	r1, [r2, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  4035a0:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  4035a4:	2302      	movs	r3, #2
  4035a6:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4035aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4035ae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4035b2:	9b04      	ldr	r3, [sp, #16]
  4035b4:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4035b6:	4b71      	ldr	r3, [pc, #452]	; (40377c <m2m_ip_cb+0x2a8>)
  4035b8:	681b      	ldr	r3, [r3, #0]
  4035ba:	2b00      	cmp	r3, #0
  4035bc:	f000 80d9 	beq.w	403772 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  4035c0:	4b6e      	ldr	r3, [pc, #440]	; (40377c <m2m_ip_cb+0x2a8>)
  4035c2:	681b      	ldr	r3, [r3, #0]
  4035c4:	aa07      	add	r2, sp, #28
  4035c6:	2104      	movs	r1, #4
  4035c8:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4035cc:	4798      	blx	r3
  4035ce:	e0d0      	b.n	403772 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  4035d0:	2844      	cmp	r0, #68	; 0x44
  4035d2:	d001      	beq.n	4035d8 <m2m_ip_cb+0x104>
  4035d4:	284b      	cmp	r0, #75	; 0x4b
  4035d6:	d124      	bne.n	403622 <m2m_ip_cb+0x14e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4035d8:	2300      	movs	r3, #0
  4035da:	2204      	movs	r2, #4
  4035dc:	a907      	add	r1, sp, #28
  4035de:	4620      	mov	r0, r4
  4035e0:	4c65      	ldr	r4, [pc, #404]	; (403778 <m2m_ip_cb+0x2a4>)
  4035e2:	47a0      	blx	r4
  4035e4:	2800      	cmp	r0, #0
  4035e6:	f040 80c4 	bne.w	403772 <m2m_ip_cb+0x29e>
		{
			strConnMsg.sock		= strConnectReply.sock;
  4035ea:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4035ee:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4035f2:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4035f6:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4035fa:	b93b      	cbnz	r3, 40360c <m2m_ip_cb+0x138>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4035fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  403600:	3b08      	subs	r3, #8
  403602:	b29b      	uxth	r3, r3
  403604:	4a5e      	ldr	r2, [pc, #376]	; (403780 <m2m_ip_cb+0x2ac>)
  403606:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40360a:	8113      	strh	r3, [r2, #8]
			}
			if(gpfAppSocketCb)
  40360c:	4b5b      	ldr	r3, [pc, #364]	; (40377c <m2m_ip_cb+0x2a8>)
  40360e:	681b      	ldr	r3, [r3, #0]
  403610:	2b00      	cmp	r3, #0
  403612:	f000 80ae 	beq.w	403772 <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  403616:	4b59      	ldr	r3, [pc, #356]	; (40377c <m2m_ip_cb+0x2a8>)
  403618:	681b      	ldr	r3, [r3, #0]
  40361a:	aa03      	add	r2, sp, #12
  40361c:	2105      	movs	r1, #5
  40361e:	4798      	blx	r3
  403620:	e0a7      	b.n	403772 <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  403622:	284a      	cmp	r0, #74	; 0x4a
  403624:	d113      	bne.n	40364e <m2m_ip_cb+0x17a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  403626:	2300      	movs	r3, #0
  403628:	2244      	movs	r2, #68	; 0x44
  40362a:	a907      	add	r1, sp, #28
  40362c:	4620      	mov	r0, r4
  40362e:	4c52      	ldr	r4, [pc, #328]	; (403778 <m2m_ip_cb+0x2a4>)
  403630:	47a0      	blx	r4
  403632:	2800      	cmp	r0, #0
  403634:	f040 809d 	bne.w	403772 <m2m_ip_cb+0x29e>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
  403638:	4b53      	ldr	r3, [pc, #332]	; (403788 <m2m_ip_cb+0x2b4>)
  40363a:	681b      	ldr	r3, [r3, #0]
  40363c:	2b00      	cmp	r3, #0
  40363e:	f000 8098 	beq.w	403772 <m2m_ip_cb+0x29e>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  403642:	4b51      	ldr	r3, [pc, #324]	; (403788 <m2m_ip_cb+0x2b4>)
  403644:	681b      	ldr	r3, [r3, #0]
  403646:	9917      	ldr	r1, [sp, #92]	; 0x5c
  403648:	a807      	add	r0, sp, #28
  40364a:	4798      	blx	r3
  40364c:	e091      	b.n	403772 <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40364e:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  403652:	b2db      	uxtb	r3, r3
  403654:	2b07      	cmp	r3, #7
  403656:	d84d      	bhi.n	4036f4 <m2m_ip_cb+0x220>
  403658:	2285      	movs	r2, #133	; 0x85
  40365a:	fa22 f303 	lsr.w	r3, r2, r3
  40365e:	f013 0f01 	tst.w	r3, #1
  403662:	d047      	beq.n	4036f4 <m2m_ip_cb+0x220>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  403664:	2848      	cmp	r0, #72	; 0x48
  403666:	bf14      	ite	ne
  403668:	2706      	movne	r7, #6
  40366a:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  40366c:	2300      	movs	r3, #0
  40366e:	2210      	movs	r2, #16
  403670:	a903      	add	r1, sp, #12
  403672:	4620      	mov	r0, r4
  403674:	4e40      	ldr	r6, [pc, #256]	; (403778 <m2m_ip_cb+0x2a4>)
  403676:	47b0      	blx	r6
  403678:	2800      	cmp	r0, #0
  40367a:	d17a      	bne.n	403772 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  40367c:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  403680:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  403684:	4a3e      	ldr	r2, [pc, #248]	; (403780 <m2m_ip_cb+0x2ac>)
  403686:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40368a:	2300      	movs	r3, #0
  40368c:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  40368e:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  403692:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  403696:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  40369a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  40369e:	9e04      	ldr	r6, [sp, #16]
  4036a0:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4036a2:	88d2      	ldrh	r2, [r2, #6]
  4036a4:	b292      	uxth	r2, r2
  4036a6:	4291      	cmp	r1, r2
  4036a8:	d11b      	bne.n	4036e2 <m2m_ip_cb+0x20e>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  4036aa:	f1be 0f00 	cmp.w	lr, #0
  4036ae:	dd0a      	ble.n	4036c6 <m2m_ip_cb+0x1f2>
  4036b0:	45ae      	cmp	lr, r5
  4036b2:	da08      	bge.n	4036c6 <m2m_ip_cb+0x1f2>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  4036b4:	fa1f f28e 	uxth.w	r2, lr
  4036b8:	9200      	str	r2, [sp, #0]
  4036ba:	4423      	add	r3, r4
  4036bc:	463a      	mov	r2, r7
  4036be:	a907      	add	r1, sp, #28
  4036c0:	4c32      	ldr	r4, [pc, #200]	; (40378c <m2m_ip_cb+0x2b8>)
  4036c2:	47a0      	blx	r4
  4036c4:	e055      	b.n	403772 <m2m_ip_cb+0x29e>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  4036c6:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  4036ca:	2300      	movs	r3, #0
  4036cc:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  4036ce:	4b2b      	ldr	r3, [pc, #172]	; (40377c <m2m_ip_cb+0x2a8>)
  4036d0:	681b      	ldr	r3, [r3, #0]
  4036d2:	2b00      	cmp	r3, #0
  4036d4:	d04d      	beq.n	403772 <m2m_ip_cb+0x29e>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  4036d6:	4b29      	ldr	r3, [pc, #164]	; (40377c <m2m_ip_cb+0x2a8>)
  4036d8:	681b      	ldr	r3, [r3, #0]
  4036da:	aa07      	add	r2, sp, #28
  4036dc:	4639      	mov	r1, r7
  4036de:	4798      	blx	r3
  4036e0:	e047      	b.n	403772 <m2m_ip_cb+0x29e>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4036e2:	2d10      	cmp	r5, #16
  4036e4:	d945      	bls.n	403772 <m2m_ip_cb+0x29e>
					hif_receive(0, NULL, 0, 1);
  4036e6:	2301      	movs	r3, #1
  4036e8:	2200      	movs	r2, #0
  4036ea:	4611      	mov	r1, r2
  4036ec:	4610      	mov	r0, r2
  4036ee:	4c22      	ldr	r4, [pc, #136]	; (403778 <m2m_ip_cb+0x2a4>)
  4036f0:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  4036f2:	e03e      	b.n	403772 <m2m_ip_cb+0x29e>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  4036f4:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  4036f8:	2b45      	cmp	r3, #69	; 0x45
  4036fa:	d001      	beq.n	403700 <m2m_ip_cb+0x22c>
  4036fc:	284c      	cmp	r0, #76	; 0x4c
  4036fe:	d123      	bne.n	403748 <m2m_ip_cb+0x274>
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  403700:	2847      	cmp	r0, #71	; 0x47
  403702:	bf14      	ite	ne
  403704:	2507      	movne	r5, #7
  403706:	2508      	moveq	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  403708:	2300      	movs	r3, #0
  40370a:	2208      	movs	r2, #8
  40370c:	a907      	add	r1, sp, #28
  40370e:	4620      	mov	r0, r4
  403710:	4c19      	ldr	r4, [pc, #100]	; (403778 <m2m_ip_cb+0x2a4>)
  403712:	47a0      	blx	r4
  403714:	2800      	cmp	r0, #0
  403716:	d12c      	bne.n	403772 <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
  403718:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  40371c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  403720:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  403724:	f8ad 300c 	strh.w	r3, [sp, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  403728:	4b15      	ldr	r3, [pc, #84]	; (403780 <m2m_ip_cb+0x2ac>)
  40372a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40372e:	88db      	ldrh	r3, [r3, #6]
  403730:	b29b      	uxth	r3, r3
  403732:	429a      	cmp	r2, r3
  403734:	d11d      	bne.n	403772 <m2m_ip_cb+0x29e>
			{
				if(gpfAppSocketCb)
  403736:	4b11      	ldr	r3, [pc, #68]	; (40377c <m2m_ip_cb+0x2a8>)
  403738:	681b      	ldr	r3, [r3, #0]
  40373a:	b1d3      	cbz	r3, 403772 <m2m_ip_cb+0x29e>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  40373c:	4b0f      	ldr	r3, [pc, #60]	; (40377c <m2m_ip_cb+0x2a8>)
  40373e:	681b      	ldr	r3, [r3, #0]
  403740:	aa03      	add	r2, sp, #12
  403742:	4629      	mov	r1, r5
  403744:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  403746:	e014      	b.n	403772 <m2m_ip_cb+0x29e>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  403748:	2852      	cmp	r0, #82	; 0x52
  40374a:	d112      	bne.n	403772 <m2m_ip_cb+0x29e>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40374c:	2301      	movs	r3, #1
  40374e:	2214      	movs	r2, #20
  403750:	a907      	add	r1, sp, #28
  403752:	4620      	mov	r0, r4
  403754:	4c08      	ldr	r4, [pc, #32]	; (403778 <m2m_ip_cb+0x2a4>)
  403756:	47a0      	blx	r4
  403758:	b958      	cbnz	r0, 403772 <m2m_ip_cb+0x29e>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40375a:	4b0d      	ldr	r3, [pc, #52]	; (403790 <m2m_ip_cb+0x2bc>)
  40375c:	9a08      	ldr	r2, [sp, #32]
  40375e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  403760:	681b      	ldr	r3, [r3, #0]
  403762:	b133      	cbz	r3, 403772 <m2m_ip_cb+0x29e>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  403764:	4b0a      	ldr	r3, [pc, #40]	; (403790 <m2m_ip_cb+0x2bc>)
  403766:	681b      	ldr	r3, [r3, #0]
  403768:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  40376c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40376e:	9807      	ldr	r0, [sp, #28]
  403770:	4798      	blx	r3
			}
		}
	}
}
  403772:	b019      	add	sp, #100	; 0x64
  403774:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403776:	bf00      	nop
  403778:	00401b85 	.word	0x00401b85
  40377c:	20401648 	.word	0x20401648
  403780:	20401598 	.word	0x20401598
  403784:	20400972 	.word	0x20400972
  403788:	20401650 	.word	0x20401650
  40378c:	00403419 	.word	0x00403419
  403790:	2040164c 	.word	0x2040164c

00403794 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  403794:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  403796:	4b0a      	ldr	r3, [pc, #40]	; (4037c0 <socketInit+0x2c>)
  403798:	781b      	ldrb	r3, [r3, #0]
  40379a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40379e:	d10e      	bne.n	4037be <socketInit+0x2a>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4037a0:	22b0      	movs	r2, #176	; 0xb0
  4037a2:	2100      	movs	r1, #0
  4037a4:	4807      	ldr	r0, [pc, #28]	; (4037c4 <socketInit+0x30>)
  4037a6:	4b08      	ldr	r3, [pc, #32]	; (4037c8 <socketInit+0x34>)
  4037a8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  4037aa:	4908      	ldr	r1, [pc, #32]	; (4037cc <socketInit+0x38>)
  4037ac:	2002      	movs	r0, #2
  4037ae:	4b08      	ldr	r3, [pc, #32]	; (4037d0 <socketInit+0x3c>)
  4037b0:	4798      	blx	r3
		gbSocketInit=1;
  4037b2:	2201      	movs	r2, #1
  4037b4:	4b02      	ldr	r3, [pc, #8]	; (4037c0 <socketInit+0x2c>)
  4037b6:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  4037b8:	2200      	movs	r2, #0
  4037ba:	4b06      	ldr	r3, [pc, #24]	; (4037d4 <socketInit+0x40>)
  4037bc:	801a      	strh	r2, [r3, #0]
  4037be:	bd08      	pop	{r3, pc}
  4037c0:	20400971 	.word	0x20400971
  4037c4:	20401598 	.word	0x20401598
  4037c8:	00401529 	.word	0x00401529
  4037cc:	004034d5 	.word	0x004034d5
  4037d0:	00401c95 	.word	0x00401c95
  4037d4:	20400972 	.word	0x20400972

004037d8 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  4037d8:	4b02      	ldr	r3, [pc, #8]	; (4037e4 <registerSocketCallback+0xc>)
  4037da:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  4037dc:	4b02      	ldr	r3, [pc, #8]	; (4037e8 <registerSocketCallback+0x10>)
  4037de:	6019      	str	r1, [r3, #0]
  4037e0:	4770      	bx	lr
  4037e2:	bf00      	nop
  4037e4:	20401648 	.word	0x20401648
  4037e8:	20401650 	.word	0x20401650

004037ec <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  4037ec:	b570      	push	{r4, r5, r6, lr}
  4037ee:	b086      	sub	sp, #24
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  4037f0:	2802      	cmp	r0, #2
  4037f2:	d14b      	bne.n	40388c <socket+0xa0>
	{
		if(u8Type == SOCK_STREAM)
  4037f4:	2901      	cmp	r1, #1
  4037f6:	d04c      	beq.n	403892 <socket+0xa6>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  4037f8:	2902      	cmp	r1, #2
  4037fa:	d04d      	beq.n	403898 <socket+0xac>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
  4037fc:	f04f 34ff 	mov.w	r4, #4294967295
  403800:	e058      	b.n	4038b4 <socket+0xc8>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  403802:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  403804:	eb00 1304 	add.w	r3, r0, r4, lsl #4
  403808:	7a9b      	ldrb	r3, [r3, #10]
  40380a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40380e:	d136      	bne.n	40387e <socket+0x92>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  403810:	482a      	ldr	r0, [pc, #168]	; (4038bc <socket+0xd0>)
  403812:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403816:	4616      	mov	r6, r2
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  403818:	2210      	movs	r2, #16
  40381a:	2100      	movs	r1, #0
  40381c:	4b28      	ldr	r3, [pc, #160]	; (4038c0 <socket+0xd4>)
  40381e:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  403820:	4b26      	ldr	r3, [pc, #152]	; (4038bc <socket+0xd0>)
  403822:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  403826:	2201      	movs	r2, #1
  403828:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  40382a:	4a26      	ldr	r2, [pc, #152]	; (4038c4 <socket+0xd8>)
  40382c:	8813      	ldrh	r3, [r2, #0]
  40382e:	3301      	adds	r3, #1
  403830:	b29b      	uxth	r3, r3
  403832:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  403834:	8813      	ldrh	r3, [r2, #0]
  403836:	b29b      	uxth	r3, r3
  403838:	b91b      	cbnz	r3, 403842 <socket+0x56>
					++gu16SessionID;
  40383a:	8813      	ldrh	r3, [r2, #0]
  40383c:	3301      	adds	r3, #1
  40383e:	b29b      	uxth	r3, r3
  403840:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  403842:	4b20      	ldr	r3, [pc, #128]	; (4038c4 <socket+0xd8>)
  403844:	881a      	ldrh	r2, [r3, #0]
  403846:	b292      	uxth	r2, r2
  403848:	4b1c      	ldr	r3, [pc, #112]	; (4038bc <socket+0xd0>)
  40384a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40384e:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  403850:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  403852:	f016 0f01 	tst.w	r6, #1
  403856:	d02d      	beq.n	4038b4 <socket+0xc8>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  403858:	aa06      	add	r2, sp, #24
  40385a:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  40385e:	4b17      	ldr	r3, [pc, #92]	; (4038bc <socket+0xd0>)
  403860:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  403864:	2321      	movs	r3, #33	; 0x21
  403866:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  403868:	2300      	movs	r3, #0
  40386a:	9302      	str	r3, [sp, #8]
  40386c:	9301      	str	r3, [sp, #4]
  40386e:	9300      	str	r3, [sp, #0]
  403870:	2304      	movs	r3, #4
  403872:	2150      	movs	r1, #80	; 0x50
  403874:	2002      	movs	r0, #2
  403876:	4d14      	ldr	r5, [pc, #80]	; (4038c8 <socket+0xdc>)
  403878:	47a8      	blx	r5
  40387a:	e01b      	b.n	4038b4 <socket+0xc8>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
  40387c:	480f      	ldr	r0, [pc, #60]	; (4038bc <socket+0xd0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  40387e:	3401      	adds	r4, #1
  403880:	b2e4      	uxtb	r4, r4
  403882:	428c      	cmp	r4, r1
  403884:	d3bd      	bcc.n	403802 <socket+0x16>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
  403886:	f04f 34ff 	mov.w	r4, #4294967295
  40388a:	e013      	b.n	4038b4 <socket+0xc8>
  40388c:	f04f 34ff 	mov.w	r4, #4294967295
  403890:	e010      	b.n	4038b4 <socket+0xc8>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
  403892:	2107      	movs	r1, #7
			u8Count = 0;
  403894:	2400      	movs	r4, #0
  403896:	e001      	b.n	40389c <socket+0xb0>
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  403898:	210b      	movs	r1, #11
			u8Count = TCP_SOCK_MAX;
  40389a:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  40389c:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  40389e:	4b07      	ldr	r3, [pc, #28]	; (4038bc <socket+0xd0>)
  4038a0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4038a4:	7a9b      	ldrb	r3, [r3, #10]
  4038a6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4038aa:	d1e7      	bne.n	40387c <socket+0x90>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4038ac:	4803      	ldr	r0, [pc, #12]	; (4038bc <socket+0xd0>)
  4038ae:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4038b2:	e7b0      	b.n	403816 <socket+0x2a>
				break;
			}
		}
	}
	return sock;
}
  4038b4:	4620      	mov	r0, r4
  4038b6:	b006      	add	sp, #24
  4038b8:	bd70      	pop	{r4, r5, r6, pc}
  4038ba:	bf00      	nop
  4038bc:	20401598 	.word	0x20401598
  4038c0:	00401529 	.word	0x00401529
  4038c4:	20400972 	.word	0x20400972
  4038c8:	0040168d 	.word	0x0040168d

004038cc <connect>:
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  4038cc:	2800      	cmp	r0, #0
  4038ce:	db38      	blt.n	403942 <connect+0x76>
  4038d0:	2900      	cmp	r1, #0
  4038d2:	d036      	beq.n	403942 <connect+0x76>
  4038d4:	4b1f      	ldr	r3, [pc, #124]	; (403954 <connect+0x88>)
  4038d6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4038da:	7a9b      	ldrb	r3, [r3, #10]
  4038dc:	b2db      	uxtb	r3, r3
  4038de:	2a00      	cmp	r2, #0
  4038e0:	d032      	beq.n	403948 <connect+0x7c>
  4038e2:	2b01      	cmp	r3, #1
  4038e4:	d130      	bne.n	403948 <connect+0x7c>

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  4038e6:	b530      	push	{r4, r5, lr}
  4038e8:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  4038ea:	4b1a      	ldr	r3, [pc, #104]	; (403954 <connect+0x88>)
  4038ec:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4038f0:	7adb      	ldrb	r3, [r3, #11]
  4038f2:	f013 0f01 	tst.w	r3, #1
  4038f6:	d007      	beq.n	403908 <connect+0x3c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  4038f8:	4b16      	ldr	r3, [pc, #88]	; (403954 <connect+0x88>)
  4038fa:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4038fe:	7adb      	ldrb	r3, [r3, #11]
  403900:	f88d 301d 	strb.w	r3, [sp, #29]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  403904:	254b      	movs	r5, #75	; 0x4b
  403906:	e000      	b.n	40390a <connect+0x3e>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  403908:	2544      	movs	r5, #68	; 0x44
  40390a:	4604      	mov	r4, r0
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
  40390c:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  403910:	2208      	movs	r2, #8
  403912:	a805      	add	r0, sp, #20
  403914:	4b10      	ldr	r3, [pc, #64]	; (403958 <connect+0x8c>)
  403916:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  403918:	480e      	ldr	r0, [pc, #56]	; (403954 <connect+0x88>)
  40391a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  40391e:	88c3      	ldrh	r3, [r0, #6]
  403920:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  403924:	2300      	movs	r3, #0
  403926:	9302      	str	r3, [sp, #8]
  403928:	9301      	str	r3, [sp, #4]
  40392a:	9300      	str	r3, [sp, #0]
  40392c:	230c      	movs	r3, #12
  40392e:	aa05      	add	r2, sp, #20
  403930:	4629      	mov	r1, r5
  403932:	2002      	movs	r0, #2
  403934:	4c09      	ldr	r4, [pc, #36]	; (40395c <connect+0x90>)
  403936:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  403938:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  40393a:	bf18      	it	ne
  40393c:	f06f 0008 	mvnne.w	r0, #8
  403940:	e005      	b.n	40394e <connect+0x82>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403942:	f06f 0005 	mvn.w	r0, #5
  403946:	4770      	bx	lr
  403948:	f06f 0005 	mvn.w	r0, #5
  40394c:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  40394e:	b009      	add	sp, #36	; 0x24
  403950:	bd30      	pop	{r4, r5, pc}
  403952:	bf00      	nop
  403954:	20401598 	.word	0x20401598
  403958:	00401515 	.word	0x00401515
  40395c:	0040168d 	.word	0x0040168d

00403960 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  403960:	b530      	push	{r4, r5, lr}
  403962:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  403964:	460c      	mov	r4, r1
  403966:	3100      	adds	r1, #0
  403968:	bf18      	it	ne
  40396a:	2101      	movne	r1, #1
  40396c:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  403970:	bf88      	it	hi
  403972:	2100      	movhi	r1, #0
  403974:	2900      	cmp	r1, #0
  403976:	d036      	beq.n	4039e6 <send+0x86>
  403978:	2800      	cmp	r0, #0
  40397a:	db34      	blt.n	4039e6 <send+0x86>
  40397c:	4b1d      	ldr	r3, [pc, #116]	; (4039f4 <send+0x94>)
  40397e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403982:	7a9b      	ldrb	r3, [r3, #10]
  403984:	b2db      	uxtb	r3, r3
  403986:	2b01      	cmp	r3, #1
  403988:	d130      	bne.n	4039ec <send+0x8c>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  40398a:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  40398e:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  403992:	4b18      	ldr	r3, [pc, #96]	; (4039f4 <send+0x94>)
  403994:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403998:	88db      	ldrh	r3, [r3, #6]
  40399a:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  40399e:	2807      	cmp	r0, #7
  4039a0:	bfb4      	ite	lt
  4039a2:	2550      	movlt	r5, #80	; 0x50
  4039a4:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4039a6:	4b13      	ldr	r3, [pc, #76]	; (4039f4 <send+0x94>)
  4039a8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4039ac:	7adb      	ldrb	r3, [r3, #11]
  4039ae:	f013 0f01 	tst.w	r3, #1
  4039b2:	d006      	beq.n	4039c2 <send+0x62>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  4039b4:	4b0f      	ldr	r3, [pc, #60]	; (4039f4 <send+0x94>)
  4039b6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4039ba:	8905      	ldrh	r5, [r0, #8]
  4039bc:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  4039be:	214c      	movs	r1, #76	; 0x4c
  4039c0:	e000      	b.n	4039c4 <send+0x64>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  4039c2:	2145      	movs	r1, #69	; 0x45
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  4039c4:	9502      	str	r5, [sp, #8]
  4039c6:	9201      	str	r2, [sp, #4]
  4039c8:	9400      	str	r4, [sp, #0]
  4039ca:	2310      	movs	r3, #16
  4039cc:	eb0d 0203 	add.w	r2, sp, r3
  4039d0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4039d4:	2002      	movs	r0, #2
  4039d6:	4c08      	ldr	r4, [pc, #32]	; (4039f8 <send+0x98>)
  4039d8:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  4039da:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  4039dc:	bf0c      	ite	eq
  4039de:	2000      	moveq	r0, #0
  4039e0:	f06f 000d 	mvnne.w	r0, #13
  4039e4:	e004      	b.n	4039f0 <send+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4039e6:	f06f 0005 	mvn.w	r0, #5
  4039ea:	e001      	b.n	4039f0 <send+0x90>
  4039ec:	f06f 0005 	mvn.w	r0, #5
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  4039f0:	b009      	add	sp, #36	; 0x24
  4039f2:	bd30      	pop	{r4, r5, pc}
  4039f4:	20401598 	.word	0x20401598
  4039f8:	0040168d 	.word	0x0040168d

004039fc <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4039fc:	2900      	cmp	r1, #0
  4039fe:	bf18      	it	ne
  403a00:	2a00      	cmpne	r2, #0
  403a02:	d045      	beq.n	403a90 <recv+0x94>

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  403a04:	b570      	push	{r4, r5, r6, lr}
  403a06:	b086      	sub	sp, #24
  403a08:	460e      	mov	r6, r1
  403a0a:	4615      	mov	r5, r2
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  403a0c:	2800      	cmp	r0, #0
  403a0e:	db36      	blt.n	403a7e <recv+0x82>
  403a10:	4a21      	ldr	r2, [pc, #132]	; (403a98 <recv+0x9c>)
  403a12:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  403a16:	7a92      	ldrb	r2, [r2, #10]
  403a18:	b2d2      	uxtb	r2, r2
  403a1a:	2a01      	cmp	r2, #1
  403a1c:	d132      	bne.n	403a84 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  403a1e:	4c1e      	ldr	r4, [pc, #120]	; (403a98 <recv+0x9c>)
  403a20:	0101      	lsls	r1, r0, #4
  403a22:	1862      	adds	r2, r4, r1
  403a24:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  403a26:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  403a28:	7b12      	ldrb	r2, [r2, #12]
  403a2a:	f012 0fff 	tst.w	r2, #255	; 0xff
  403a2e:	d12c      	bne.n	403a8a <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  403a30:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  403a34:	2101      	movs	r1, #1
  403a36:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403a38:	7ad2      	ldrb	r2, [r2, #11]
  403a3a:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  403a3c:	2a00      	cmp	r2, #0
  403a3e:	bf0c      	ite	eq
  403a40:	2146      	moveq	r1, #70	; 0x46
  403a42:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  403a44:	b91b      	cbnz	r3, 403a4e <recv+0x52>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  403a46:	f04f 33ff 	mov.w	r3, #4294967295
  403a4a:	9304      	str	r3, [sp, #16]
  403a4c:	e000      	b.n	403a50 <recv+0x54>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  403a4e:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
  403a50:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  403a54:	4b10      	ldr	r3, [pc, #64]	; (403a98 <recv+0x9c>)
  403a56:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  403a5a:	88c3      	ldrh	r3, [r0, #6]
  403a5c:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  403a60:	2300      	movs	r3, #0
  403a62:	9302      	str	r3, [sp, #8]
  403a64:	9301      	str	r3, [sp, #4]
  403a66:	9300      	str	r3, [sp, #0]
  403a68:	2308      	movs	r3, #8
  403a6a:	aa04      	add	r2, sp, #16
  403a6c:	2002      	movs	r0, #2
  403a6e:	4c0b      	ldr	r4, [pc, #44]	; (403a9c <recv+0xa0>)
  403a70:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  403a72:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  403a74:	bf0c      	ite	eq
  403a76:	2000      	moveq	r0, #0
  403a78:	f06f 000d 	mvnne.w	r0, #13
  403a7c:	e006      	b.n	403a8c <recv+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  403a7e:	f06f 0005 	mvn.w	r0, #5
  403a82:	e003      	b.n	403a8c <recv+0x90>
  403a84:	f06f 0005 	mvn.w	r0, #5
  403a88:	e000      	b.n	403a8c <recv+0x90>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  403a8a:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  403a8c:	b006      	add	sp, #24
  403a8e:	bd70      	pop	{r4, r5, r6, pc}
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  403a90:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  403a94:	4770      	bx	lr
  403a96:	bf00      	nop
  403a98:	20401598 	.word	0x20401598
  403a9c:	0040168d 	.word	0x0040168d

00403aa0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  403aa0:	b530      	push	{r4, r5, lr}
  403aa2:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  403aa4:	2800      	cmp	r0, #0
  403aa6:	db2e      	blt.n	403b06 <close+0x66>
  403aa8:	4b1b      	ldr	r3, [pc, #108]	; (403b18 <close+0x78>)
  403aaa:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403aae:	7a9b      	ldrb	r3, [r3, #10]
  403ab0:	b2db      	uxtb	r3, r3
  403ab2:	2b01      	cmp	r3, #1
  403ab4:	d12a      	bne.n	403b0c <close+0x6c>
  403ab6:	4604      	mov	r4, r0
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  403ab8:	f88d 0014 	strb.w	r0, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  403abc:	4b16      	ldr	r3, [pc, #88]	; (403b18 <close+0x78>)
  403abe:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  403ac2:	88da      	ldrh	r2, [r3, #6]
  403ac4:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  403ac8:	2200      	movs	r2, #0
  403aca:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  403acc:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  403ace:	7adb      	ldrb	r3, [r3, #11]
  403ad0:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  403ad4:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  403ad6:	9202      	str	r2, [sp, #8]
  403ad8:	9201      	str	r2, [sp, #4]
  403ada:	9200      	str	r2, [sp, #0]
  403adc:	f04f 0304 	mov.w	r3, #4
  403ae0:	aa05      	add	r2, sp, #20
  403ae2:	bf0c      	ite	eq
  403ae4:	2149      	moveq	r1, #73	; 0x49
  403ae6:	214e      	movne	r1, #78	; 0x4e
  403ae8:	2002      	movs	r0, #2
  403aea:	4d0c      	ldr	r5, [pc, #48]	; (403b1c <close+0x7c>)
  403aec:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  403aee:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  403af0:	bf18      	it	ne
  403af2:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  403af6:	2210      	movs	r2, #16
  403af8:	2100      	movs	r1, #0
  403afa:	4807      	ldr	r0, [pc, #28]	; (403b18 <close+0x78>)
  403afc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  403b00:	4b07      	ldr	r3, [pc, #28]	; (403b20 <close+0x80>)
  403b02:	4798      	blx	r3
  403b04:	e004      	b.n	403b10 <close+0x70>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  403b06:	f06f 0505 	mvn.w	r5, #5
  403b0a:	e001      	b.n	403b10 <close+0x70>
  403b0c:	f06f 0505 	mvn.w	r5, #5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
  403b10:	4628      	mov	r0, r5
  403b12:	b007      	add	sp, #28
  403b14:	bd30      	pop	{r4, r5, pc}
  403b16:	bf00      	nop
  403b18:	20401598 	.word	0x20401598
  403b1c:	0040168d 	.word	0x0040168d
  403b20:	00401529 	.word	0x00401529

00403b24 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  403b24:	b570      	push	{r4, r5, r6, lr}
  403b26:	b082      	sub	sp, #8
  403b28:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  403b2a:	4b2b      	ldr	r3, [pc, #172]	; (403bd8 <spi_flash_enable+0xb4>)
  403b2c:	4798      	blx	r3
  403b2e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  403b32:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  403b36:	d34a      	bcc.n	403bce <spi_flash_enable+0xaa>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  403b38:	a901      	add	r1, sp, #4
  403b3a:	f241 4010 	movw	r0, #5136	; 0x1410
  403b3e:	4b27      	ldr	r3, [pc, #156]	; (403bdc <spi_flash_enable+0xb8>)
  403b40:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  403b42:	4604      	mov	r4, r0
  403b44:	2800      	cmp	r0, #0
  403b46:	d143      	bne.n	403bd0 <spi_flash_enable+0xac>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  403b48:	4b25      	ldr	r3, [pc, #148]	; (403be0 <spi_flash_enable+0xbc>)
  403b4a:	9a01      	ldr	r2, [sp, #4]
  403b4c:	4013      	ands	r3, r2
  403b4e:	4925      	ldr	r1, [pc, #148]	; (403be4 <spi_flash_enable+0xc0>)
  403b50:	4319      	orrs	r1, r3
  403b52:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  403b54:	f241 4010 	movw	r0, #5136	; 0x1410
  403b58:	4b23      	ldr	r3, [pc, #140]	; (403be8 <spi_flash_enable+0xc4>)
  403b5a:	4798      	blx	r3
		if(enable) {
  403b5c:	b1b5      	cbz	r5, 403b8c <spi_flash_enable+0x68>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  403b5e:	2100      	movs	r1, #0
  403b60:	4822      	ldr	r0, [pc, #136]	; (403bec <spi_flash_enable+0xc8>)
  403b62:	4d21      	ldr	r5, [pc, #132]	; (403be8 <spi_flash_enable+0xc4>)
  403b64:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  403b66:	21ab      	movs	r1, #171	; 0xab
  403b68:	4821      	ldr	r0, [pc, #132]	; (403bf0 <spi_flash_enable+0xcc>)
  403b6a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  403b6c:	2101      	movs	r1, #1
  403b6e:	4821      	ldr	r0, [pc, #132]	; (403bf4 <spi_flash_enable+0xd0>)
  403b70:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  403b72:	2100      	movs	r1, #0
  403b74:	4820      	ldr	r0, [pc, #128]	; (403bf8 <spi_flash_enable+0xd4>)
  403b76:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  403b78:	2181      	movs	r1, #129	; 0x81
  403b7a:	4820      	ldr	r0, [pc, #128]	; (403bfc <spi_flash_enable+0xd8>)
  403b7c:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403b7e:	4e20      	ldr	r6, [pc, #128]	; (403c00 <spi_flash_enable+0xdc>)
  403b80:	4d20      	ldr	r5, [pc, #128]	; (403c04 <spi_flash_enable+0xe0>)
  403b82:	4630      	mov	r0, r6
  403b84:	47a8      	blx	r5
  403b86:	2801      	cmp	r0, #1
  403b88:	d1fb      	bne.n	403b82 <spi_flash_enable+0x5e>
  403b8a:	e015      	b.n	403bb8 <spi_flash_enable+0x94>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  403b8c:	2100      	movs	r1, #0
  403b8e:	4817      	ldr	r0, [pc, #92]	; (403bec <spi_flash_enable+0xc8>)
  403b90:	4d15      	ldr	r5, [pc, #84]	; (403be8 <spi_flash_enable+0xc4>)
  403b92:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  403b94:	21b9      	movs	r1, #185	; 0xb9
  403b96:	4816      	ldr	r0, [pc, #88]	; (403bf0 <spi_flash_enable+0xcc>)
  403b98:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  403b9a:	2101      	movs	r1, #1
  403b9c:	4815      	ldr	r0, [pc, #84]	; (403bf4 <spi_flash_enable+0xd0>)
  403b9e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  403ba0:	2100      	movs	r1, #0
  403ba2:	4815      	ldr	r0, [pc, #84]	; (403bf8 <spi_flash_enable+0xd4>)
  403ba4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  403ba6:	2181      	movs	r1, #129	; 0x81
  403ba8:	4814      	ldr	r0, [pc, #80]	; (403bfc <spi_flash_enable+0xd8>)
  403baa:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  403bac:	4e14      	ldr	r6, [pc, #80]	; (403c00 <spi_flash_enable+0xdc>)
  403bae:	4d15      	ldr	r5, [pc, #84]	; (403c04 <spi_flash_enable+0xe0>)
  403bb0:	4630      	mov	r0, r6
  403bb2:	47a8      	blx	r5
  403bb4:	2801      	cmp	r0, #1
  403bb6:	d1fb      	bne.n	403bb0 <spi_flash_enable+0x8c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  403bb8:	4909      	ldr	r1, [pc, #36]	; (403be0 <spi_flash_enable+0xbc>)
  403bba:	9b01      	ldr	r3, [sp, #4]
  403bbc:	4019      	ands	r1, r3
  403bbe:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403bc2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  403bc4:	f241 4010 	movw	r0, #5136	; 0x1410
  403bc8:	4b07      	ldr	r3, [pc, #28]	; (403be8 <spi_flash_enable+0xc4>)
  403bca:	4798      	blx	r3
  403bcc:	e000      	b.n	403bd0 <spi_flash_enable+0xac>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  403bce:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  403bd0:	4620      	mov	r0, r4
  403bd2:	b002      	add	sp, #8
  403bd4:	bd70      	pop	{r4, r5, r6, pc}
  403bd6:	bf00      	nop
  403bd8:	00402539 	.word	0x00402539
  403bdc:	00402831 	.word	0x00402831
  403be0:	f8888fff 	.word	0xf8888fff
  403be4:	01111000 	.word	0x01111000
  403be8:	0040283d 	.word	0x0040283d
  403bec:	00010208 	.word	0x00010208
  403bf0:	0001020c 	.word	0x0001020c
  403bf4:	00010214 	.word	0x00010214
  403bf8:	0001021c 	.word	0x0001021c
  403bfc:	00010204 	.word	0x00010204
  403c00:	00010218 	.word	0x00010218
  403c04:	00402825 	.word	0x00402825

00403c08 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403c08:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403c0a:	4810      	ldr	r0, [pc, #64]	; (403c4c <sysclk_init+0x44>)
  403c0c:	4b10      	ldr	r3, [pc, #64]	; (403c50 <sysclk_init+0x48>)
  403c0e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403c10:	213e      	movs	r1, #62	; 0x3e
  403c12:	2000      	movs	r0, #0
  403c14:	4b0f      	ldr	r3, [pc, #60]	; (403c54 <sysclk_init+0x4c>)
  403c16:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403c18:	4c0f      	ldr	r4, [pc, #60]	; (403c58 <sysclk_init+0x50>)
  403c1a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  403c1c:	2800      	cmp	r0, #0
  403c1e:	d0fc      	beq.n	403c1a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  403c20:	4b0e      	ldr	r3, [pc, #56]	; (403c5c <sysclk_init+0x54>)
  403c22:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403c24:	4a0e      	ldr	r2, [pc, #56]	; (403c60 <sysclk_init+0x58>)
  403c26:	4b0f      	ldr	r3, [pc, #60]	; (403c64 <sysclk_init+0x5c>)
  403c28:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  403c2a:	4c0f      	ldr	r4, [pc, #60]	; (403c68 <sysclk_init+0x60>)
  403c2c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403c2e:	2800      	cmp	r0, #0
  403c30:	d0fc      	beq.n	403c2c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  403c32:	2002      	movs	r0, #2
  403c34:	4b0d      	ldr	r3, [pc, #52]	; (403c6c <sysclk_init+0x64>)
  403c36:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403c38:	2000      	movs	r0, #0
  403c3a:	4b0d      	ldr	r3, [pc, #52]	; (403c70 <sysclk_init+0x68>)
  403c3c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403c3e:	4b0d      	ldr	r3, [pc, #52]	; (403c74 <sysclk_init+0x6c>)
  403c40:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403c42:	4802      	ldr	r0, [pc, #8]	; (403c4c <sysclk_init+0x44>)
  403c44:	4b02      	ldr	r3, [pc, #8]	; (403c50 <sysclk_init+0x48>)
  403c46:	4798      	blx	r3
  403c48:	bd10      	pop	{r4, pc}
  403c4a:	bf00      	nop
  403c4c:	11e1a300 	.word	0x11e1a300
  403c50:	00404aed 	.word	0x00404aed
  403c54:	00404579 	.word	0x00404579
  403c58:	004045cd 	.word	0x004045cd
  403c5c:	004045dd 	.word	0x004045dd
  403c60:	20183f01 	.word	0x20183f01
  403c64:	400e0600 	.word	0x400e0600
  403c68:	004045ed 	.word	0x004045ed
  403c6c:	004044d5 	.word	0x004044d5
  403c70:	00404511 	.word	0x00404511
  403c74:	004049dd 	.word	0x004049dd

00403c78 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  403c78:	b990      	cbnz	r0, 403ca0 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  403c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c7e:	460c      	mov	r4, r1
  403c80:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  403c82:	2a00      	cmp	r2, #0
  403c84:	dd0f      	ble.n	403ca6 <_read+0x2e>
  403c86:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  403c88:	4e08      	ldr	r6, [pc, #32]	; (403cac <_read+0x34>)
  403c8a:	4d09      	ldr	r5, [pc, #36]	; (403cb0 <_read+0x38>)
  403c8c:	6830      	ldr	r0, [r6, #0]
  403c8e:	4621      	mov	r1, r4
  403c90:	682b      	ldr	r3, [r5, #0]
  403c92:	4798      	blx	r3
		ptr++;
  403c94:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  403c96:	42a7      	cmp	r7, r4
  403c98:	d1f8      	bne.n	403c8c <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  403c9a:	4640      	mov	r0, r8
  403c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  403ca0:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  403ca4:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  403ca6:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  403ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403cac:	2040165c 	.word	0x2040165c
  403cb0:	20401654 	.word	0x20401654

00403cb4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  403cb4:	3801      	subs	r0, #1
  403cb6:	2802      	cmp	r0, #2
  403cb8:	d815      	bhi.n	403ce6 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  403cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403cbe:	460e      	mov	r6, r1
  403cc0:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403cc2:	b19a      	cbz	r2, 403cec <_write+0x38>
  403cc4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  403cc6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 403d00 <_write+0x4c>
  403cca:	4f0c      	ldr	r7, [pc, #48]	; (403cfc <_write+0x48>)
  403ccc:	f8d8 0000 	ldr.w	r0, [r8]
  403cd0:	f815 1b01 	ldrb.w	r1, [r5], #1
  403cd4:	683b      	ldr	r3, [r7, #0]
  403cd6:	4798      	blx	r3
  403cd8:	2800      	cmp	r0, #0
  403cda:	db0a      	blt.n	403cf2 <_write+0x3e>
  403cdc:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403cde:	3c01      	subs	r4, #1
  403ce0:	d1f4      	bne.n	403ccc <_write+0x18>
  403ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  403ce6:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  403cea:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  403cec:	2000      	movs	r0, #0
  403cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  403cf2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  403cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403cfa:	bf00      	nop
  403cfc:	20401658 	.word	0x20401658
  403d00:	2040165c 	.word	0x2040165c

00403d04 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  403d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  403d06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403d0a:	4bb6      	ldr	r3, [pc, #728]	; (403fe4 <board_init+0x2e0>)
  403d0c:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  403d0e:	f3bf 8f5f 	dmb	sy
		MPU_REGION_VALID |
		MPU_DEFAULT_ITCM_REGION;

	dw_region_attr =
		MPU_AP_PRIVILEGED_READ_WRITE |
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  403d12:	4fb5      	ldr	r7, [pc, #724]	; (403fe8 <board_init+0x2e4>)
  403d14:	4638      	mov	r0, r7
  403d16:	4db5      	ldr	r5, [pc, #724]	; (403fec <board_init+0x2e8>)
  403d18:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d1a:	4eb5      	ldr	r6, [pc, #724]	; (403ff0 <board_init+0x2ec>)
  403d1c:	ea40 0106 	orr.w	r1, r0, r6
  403d20:	2011      	movs	r0, #17
  403d22:	4cb4      	ldr	r4, [pc, #720]	; (403ff4 <board_init+0x2f0>)
  403d24:	47a0      	blx	r4
		MPU_DEFAULT_IFLASH_REGION;

	dw_region_attr =
		MPU_AP_READONLY |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  403d26:	48b4      	ldr	r0, [pc, #720]	; (403ff8 <board_init+0x2f4>)
  403d28:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d2a:	49b4      	ldr	r1, [pc, #720]	; (403ffc <board_init+0x2f8>)
  403d2c:	4301      	orrs	r1, r0
  403d2e:	48b4      	ldr	r0, [pc, #720]	; (404000 <board_init+0x2fc>)
  403d30:	47a0      	blx	r4
		MPU_REGION_VALID |
		MPU_DEFAULT_DTCM_REGION;

	dw_region_attr =
		MPU_AP_PRIVILEGED_READ_WRITE |
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  403d32:	4638      	mov	r0, r7
  403d34:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d36:	ea40 0106 	orr.w	r1, r0, r6
  403d3a:	48b2      	ldr	r0, [pc, #712]	; (404004 <board_init+0x300>)
  403d3c:	47a0      	blx	r4
		MPU_DEFAULT_SRAM_REGION_1;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  403d3e:	48b2      	ldr	r0, [pc, #712]	; (404008 <board_init+0x304>)
  403d40:	47a8      	blx	r5
		| MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d42:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  403d46:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
  403d4a:	ea40 0106 	orr.w	r1, r0, r6
  403d4e:	48af      	ldr	r0, [pc, #700]	; (40400c <board_init+0x308>)
  403d50:	47a0      	blx	r4
		MPU_DEFAULT_SRAM_REGION_2;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  403d52:	48af      	ldr	r0, [pc, #700]	; (404010 <board_init+0x30c>)
  403d54:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d56:	ea40 0106 	orr.w	r1, r0, r6
  403d5a:	48ae      	ldr	r0, [pc, #696]	; (404014 <board_init+0x310>)
  403d5c:	47a0      	blx	r4
		MPU_PERIPHERALS_REGION;

	dw_region_attr = MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  403d5e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  403d62:	47a8      	blx	r5
		|MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d64:	4eac      	ldr	r6, [pc, #688]	; (404018 <board_init+0x314>)
  403d66:	ea40 0106 	orr.w	r1, r0, r6
  403d6a:	48ac      	ldr	r0, [pc, #688]	; (40401c <board_init+0x318>)
  403d6c:	47a0      	blx	r4

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		/* External memory Must be defined with 'Device' or 'Strongly Ordered' attribute for write accesses (AXI) */
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  403d6e:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  403d72:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d74:	4faa      	ldr	r7, [pc, #680]	; (404020 <board_init+0x31c>)
  403d76:	ea40 0107 	orr.w	r1, r0, r7
  403d7a:	48aa      	ldr	r0, [pc, #680]	; (404024 <board_init+0x320>)
  403d7c:	47a0      	blx	r4
		MPU_DEFAULT_SDRAM_REGION;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_RWA_TYPE( SHAREABLE ) |
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  403d7e:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  403d82:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d84:	49a8      	ldr	r1, [pc, #672]	; (404028 <board_init+0x324>)
  403d86:	4301      	orrs	r1, r0
  403d88:	48a8      	ldr	r0, [pc, #672]	; (40402c <board_init+0x328>)
  403d8a:	47a0      	blx	r4
		MPU_QSPIMEM_REGION;

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  403d8c:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  403d90:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d92:	ea40 0107 	orr.w	r1, r0, r7
  403d96:	48a6      	ldr	r0, [pc, #664]	; (404030 <board_init+0x32c>)
  403d98:	47a0      	blx	r4

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  403d9a:	48a6      	ldr	r0, [pc, #664]	; (404034 <board_init+0x330>)
  403d9c:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  403d9e:	ea40 0106 	orr.w	r1, r0, r6
  403da2:	48a5      	ldr	r0, [pc, #660]	; (404038 <board_init+0x334>)
  403da4:	47a0      	blx	r4


	/* Enable the memory management fault , Bus Fault, Usage Fault exception */
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  403da6:	4ca5      	ldr	r4, [pc, #660]	; (40403c <board_init+0x338>)
  403da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403daa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  403dae:	6263      	str	r3, [r4, #36]	; 0x24
					| SCB_SHCSR_USGFAULTENA_Msk);

	/* Enable the MPU region */
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  403db0:	2005      	movs	r0, #5
  403db2:	4ba3      	ldr	r3, [pc, #652]	; (404040 <board_init+0x33c>)
  403db4:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403db6:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403dba:	f3bf 8f6f 	isb	sy
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403dbe:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403dc2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  403dc6:	2300      	movs	r3, #0
  403dc8:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403dcc:	6963      	ldr	r3, [r4, #20]
  403dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  403dd2:	6163      	str	r3, [r4, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403dd4:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403dd8:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403ddc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  403de0:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403de4:	f006 0707 	and.w	r7, r6, #7
  403de8:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403dea:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403dee:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  403df2:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403df6:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  403dfa:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  403dfc:	fa05 f107 	lsl.w	r1, r5, r7
  403e00:	fa03 f200 	lsl.w	r2, r3, r0
  403e04:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  403e06:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  403e0a:	3b01      	subs	r3, #1
  403e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
  403e10:	d1f6      	bne.n	403e00 <board_init+0xfc>
        } while(sets--);
  403e12:	3d01      	subs	r5, #1
  403e14:	f1b5 3fff 	cmp.w	r5, #4294967295
  403e18:	d1ef      	bne.n	403dfa <board_init+0xf6>
  403e1a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  403e1e:	4b87      	ldr	r3, [pc, #540]	; (40403c <board_init+0x338>)
  403e20:	695a      	ldr	r2, [r3, #20]
  403e22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  403e26:	615a      	str	r2, [r3, #20]
  403e28:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403e2c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403e30:	4a84      	ldr	r2, [pc, #528]	; (404044 <board_init+0x340>)
  403e32:	4985      	ldr	r1, [pc, #532]	; (404048 <board_init+0x344>)
  403e34:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403e36:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  403e3a:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403e3c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403e40:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  403e44:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  403e48:	f022 0201 	bic.w	r2, r2, #1
  403e4c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  403e50:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  403e54:	f022 0201 	bic.w	r2, r2, #1
  403e58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403e5c:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  403e60:	f3bf 8f6f 	isb	sy
  403e64:	200a      	movs	r0, #10
  403e66:	4c79      	ldr	r4, [pc, #484]	; (40404c <board_init+0x348>)
  403e68:	47a0      	blx	r4
  403e6a:	200b      	movs	r0, #11
  403e6c:	47a0      	blx	r4
  403e6e:	200c      	movs	r0, #12
  403e70:	47a0      	blx	r4
  403e72:	2010      	movs	r0, #16
  403e74:	47a0      	blx	r4
  403e76:	2011      	movs	r0, #17
  403e78:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403e7a:	4a75      	ldr	r2, [pc, #468]	; (404050 <board_init+0x34c>)
  403e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
  403e80:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403e82:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403e86:	6313      	str	r3, [r2, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403e88:	4b72      	ldr	r3, [pc, #456]	; (404054 <board_init+0x350>)
  403e8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403e8e:	6159      	str	r1, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403e90:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  403e94:	6659      	str	r1, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403e96:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403e9a:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  403e9c:	6219      	str	r1, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  403e9e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403ea2:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403ea4:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  403ea8:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403eaa:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403eac:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  403eb0:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  403eb2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  403eb6:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  403eba:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403ebe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  403ec2:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403ec4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403ec8:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403eca:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403ecc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403ed0:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403ed2:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  403ed6:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403ed8:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403eda:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  403ede:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403ee0:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  403ee2:	485d      	ldr	r0, [pc, #372]	; (404058 <board_init+0x354>)
  403ee4:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  403ee8:	f041 0110 	orr.w	r1, r1, #16
  403eec:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403ef0:	495a      	ldr	r1, [pc, #360]	; (40405c <board_init+0x358>)
  403ef2:	2010      	movs	r0, #16
  403ef4:	6608      	str	r0, [r1, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403ef6:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403efa:	6548      	str	r0, [r1, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403efc:	6248      	str	r0, [r1, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403efe:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  403f02:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  403f04:	4304      	orrs	r4, r0
  403f06:	670c      	str	r4, [r1, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f08:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  403f0a:	4304      	orrs	r4, r0
  403f0c:	674c      	str	r4, [r1, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f0e:	6048      	str	r0, [r1, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f10:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403f14:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f16:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403f1a:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403f1c:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f1e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403f22:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f24:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  403f28:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f2a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f2c:	4308      	orrs	r0, r1
  403f2e:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f30:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  403f36:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f38:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403f3c:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403f3e:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f40:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  403f44:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f46:	4308      	orrs	r0, r1
  403f48:	6718      	str	r0, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f4a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f4c:	4308      	orrs	r0, r1
  403f4e:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f50:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403f56:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f58:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403f5c:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403f5e:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f60:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403f64:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f66:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  403f6a:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f6c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f6e:	4308      	orrs	r0, r1
  403f70:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f72:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f74:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403f78:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f7a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403f7e:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403f80:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f82:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403f86:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403f88:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  403f8c:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403f8e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403f90:	4308      	orrs	r0, r1
  403f92:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403f94:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403f96:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403f9a:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403f9c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403fa0:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403fa2:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403fa4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403fa8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403faa:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  403fae:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403fb0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403fb2:	4308      	orrs	r0, r1
  403fb4:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403fb6:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  403fb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403fbc:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403fbe:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403fc2:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403fc4:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403fc6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403fca:	6f18      	ldr	r0, [r3, #112]	; 0x70
  403fcc:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  403fd0:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  403fd2:	6f58      	ldr	r0, [r3, #116]	; 0x74
  403fd4:	4308      	orrs	r0, r1
  403fd6:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403fd8:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  403fde:	6153      	str	r3, [r2, #20]
  403fe0:	e03e      	b.n	404060 <board_init+0x35c>
  403fe2:	bf00      	nop
  403fe4:	400e1850 	.word	0x400e1850
  403fe8:	003fffff 	.word	0x003fffff
  403fec:	0040409d 	.word	0x0040409d
  403ff0:	01000001 	.word	0x01000001
  403ff4:	00404091 	.word	0x00404091
  403ff8:	001fffff 	.word	0x001fffff
  403ffc:	06230001 	.word	0x06230001
  404000:	00400012 	.word	0x00400012
  404004:	20000013 	.word	0x20000013
  404008:	0003ffff 	.word	0x0003ffff
  40400c:	20400014 	.word	0x20400014
  404010:	0001ffff 	.word	0x0001ffff
  404014:	20440015 	.word	0x20440015
  404018:	13010001 	.word	0x13010001
  40401c:	40000016 	.word	0x40000016
  404020:	03000001 	.word	0x03000001
  404024:	60000017 	.word	0x60000017
  404028:	03250001 	.word	0x03250001
  40402c:	70000018 	.word	0x70000018
  404030:	80000019 	.word	0x80000019
  404034:	000fffff 	.word	0x000fffff
  404038:	a010001a 	.word	0xa010001a
  40403c:	e000ed00 	.word	0xe000ed00
  404040:	00404085 	.word	0x00404085
  404044:	400e0c00 	.word	0x400e0c00
  404048:	5a00080c 	.word	0x5a00080c
  40404c:	004045fd 	.word	0x004045fd
  404050:	400e1200 	.word	0x400e1200
  404054:	400e0e00 	.word	0x400e0e00
  404058:	40088000 	.word	0x40088000
  40405c:	400e1000 	.word	0x400e1000
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404060:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  404064:	6653      	str	r3, [r2, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  404066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40406a:	6553      	str	r3, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40406c:	6253      	str	r3, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40406e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  404072:	6f13      	ldr	r3, [r2, #112]	; 0x70
  404074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  404078:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40407a:	6f53      	ldr	r3, [r2, #116]	; 0x74
  40407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  404080:	6753      	str	r3, [r2, #116]	; 0x74
  404082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404084 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  404084:	4b01      	ldr	r3, [pc, #4]	; (40408c <mpu_enable+0x8>)
  404086:	6058      	str	r0, [r3, #4]
  404088:	4770      	bx	lr
  40408a:	bf00      	nop
  40408c:	e000ed90 	.word	0xe000ed90

00404090 <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  404090:	4b01      	ldr	r3, [pc, #4]	; (404098 <mpu_set_region+0x8>)
  404092:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  404094:	6119      	str	r1, [r3, #16]
  404096:	4770      	bx	lr
  404098:	e000ed90 	.word	0xe000ed90

0040409c <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  40409c:	2820      	cmp	r0, #32
  40409e:	d908      	bls.n	4040b2 <mpu_cal_mpu_region_size+0x16>
  4040a0:	2304      	movs	r3, #4
  4040a2:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  4040a4:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  4040a6:	0052      	lsls	r2, r2, #1
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  4040a8:	4290      	cmp	r0, r2
  4040aa:	d903      	bls.n	4040b4 <mpu_cal_mpu_region_size+0x18>
  4040ac:	2b1e      	cmp	r3, #30
  4040ae:	d9f9      	bls.n	4040a4 <mpu_cal_mpu_region_size+0x8>
  4040b0:	e000      	b.n	4040b4 <mpu_cal_mpu_region_size+0x18>
 * \brief Calculate region size for the RASR.
 */
uint32_t mpu_cal_mpu_region_size(uint32_t dw_actual_size_in_bytes)
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;
  4040b2:	2304      	movs	r3, #4
		}
		dwRegionSize <<= 1;
	}

	return ( dwReturnValue << 1 );
}
  4040b4:	0058      	lsls	r0, r3, #1
  4040b6:	4770      	bx	lr

004040b8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4040b8:	b10a      	cbz	r2, 4040be <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4040ba:	6641      	str	r1, [r0, #100]	; 0x64
  4040bc:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4040be:	6601      	str	r1, [r0, #96]	; 0x60
  4040c0:	4770      	bx	lr
  4040c2:	bf00      	nop

004040c4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4040c4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4040c6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4040ca:	d02f      	beq.n	40412c <pio_set_peripheral+0x68>
  4040cc:	d807      	bhi.n	4040de <pio_set_peripheral+0x1a>
  4040ce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4040d2:	d014      	beq.n	4040fe <pio_set_peripheral+0x3a>
  4040d4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4040d8:	d01e      	beq.n	404118 <pio_set_peripheral+0x54>
  4040da:	b939      	cbnz	r1, 4040ec <pio_set_peripheral+0x28>
  4040dc:	4770      	bx	lr
  4040de:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4040e2:	d037      	beq.n	404154 <pio_set_peripheral+0x90>
  4040e4:	d804      	bhi.n	4040f0 <pio_set_peripheral+0x2c>
  4040e6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4040ea:	d029      	beq.n	404140 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4040ec:	6042      	str	r2, [r0, #4]
  4040ee:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4040f0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4040f4:	d02e      	beq.n	404154 <pio_set_peripheral+0x90>
  4040f6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4040fa:	d02b      	beq.n	404154 <pio_set_peripheral+0x90>
  4040fc:	e7f6      	b.n	4040ec <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4040fe:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404100:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404102:	6f01      	ldr	r1, [r0, #112]	; 0x70
  404104:	43d3      	mvns	r3, r2
  404106:	4021      	ands	r1, r4
  404108:	4019      	ands	r1, r3
  40410a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40410c:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40410e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404110:	4021      	ands	r1, r4
  404112:	400b      	ands	r3, r1
  404114:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404116:	e01a      	b.n	40414e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404118:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40411a:	4313      	orrs	r3, r2
  40411c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40411e:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404120:	6f43      	ldr	r3, [r0, #116]	; 0x74
  404122:	400b      	ands	r3, r1
  404124:	ea23 0302 	bic.w	r3, r3, r2
  404128:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40412a:	e7df      	b.n	4040ec <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40412c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40412e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  404130:	400b      	ands	r3, r1
  404132:	ea23 0302 	bic.w	r3, r3, r2
  404136:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404138:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40413a:	4313      	orrs	r3, r2
  40413c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40413e:	e7d5      	b.n	4040ec <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404140:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404142:	4313      	orrs	r3, r2
  404144:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404146:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404148:	4313      	orrs	r3, r2
  40414a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40414c:	e7ce      	b.n	4040ec <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40414e:	6042      	str	r2, [r0, #4]
}
  404150:	f85d 4b04 	ldr.w	r4, [sp], #4
  404154:	4770      	bx	lr
  404156:	bf00      	nop

00404158 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404158:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40415a:	f012 0f01 	tst.w	r2, #1
  40415e:	d001      	beq.n	404164 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  404160:	6641      	str	r1, [r0, #100]	; 0x64
  404162:	e000      	b.n	404166 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404164:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404166:	f012 0f0a 	tst.w	r2, #10
  40416a:	d001      	beq.n	404170 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  40416c:	6201      	str	r1, [r0, #32]
  40416e:	e000      	b.n	404172 <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  404170:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  404172:	f012 0f02 	tst.w	r2, #2
  404176:	d002      	beq.n	40417e <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  404178:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40417c:	e004      	b.n	404188 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40417e:	f012 0f08 	tst.w	r2, #8
  404182:	d001      	beq.n	404188 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  404184:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  404188:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40418a:	6001      	str	r1, [r0, #0]
  40418c:	4770      	bx	lr
  40418e:	bf00      	nop

00404190 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  404190:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404192:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404194:	9c01      	ldr	r4, [sp, #4]
  404196:	b10c      	cbz	r4, 40419c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  404198:	6641      	str	r1, [r0, #100]	; 0x64
  40419a:	e000      	b.n	40419e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40419c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40419e:	b10b      	cbz	r3, 4041a4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4041a0:	6501      	str	r1, [r0, #80]	; 0x50
  4041a2:	e000      	b.n	4041a6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4041a4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4041a6:	b10a      	cbz	r2, 4041ac <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4041a8:	6301      	str	r1, [r0, #48]	; 0x30
  4041aa:	e000      	b.n	4041ae <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4041ac:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4041ae:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4041b0:	6001      	str	r1, [r0, #0]
}
  4041b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4041b6:	4770      	bx	lr

004041b8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4041b8:	f012 0f10 	tst.w	r2, #16
  4041bc:	d012      	beq.n	4041e4 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4041be:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4041c2:	f012 0f20 	tst.w	r2, #32
  4041c6:	d002      	beq.n	4041ce <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4041c8:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  4041cc:	e001      	b.n	4041d2 <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4041ce:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4041d2:	f012 0f40 	tst.w	r2, #64	; 0x40
  4041d6:	d002      	beq.n	4041de <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4041d8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4041dc:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4041de:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4041e2:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4041e4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4041e8:	4770      	bx	lr
  4041ea:	bf00      	nop

004041ec <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  4041ec:	6401      	str	r1, [r0, #64]	; 0x40
  4041ee:	4770      	bx	lr

004041f0 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4041f0:	6441      	str	r1, [r0, #68]	; 0x44
  4041f2:	4770      	bx	lr

004041f4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4041f4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4041f6:	4770      	bx	lr

004041f8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4041f8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4041fa:	4770      	bx	lr

004041fc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4041fc:	b570      	push	{r4, r5, r6, lr}
  4041fe:	b082      	sub	sp, #8
  404200:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404202:	4c47      	ldr	r4, [pc, #284]	; (404320 <pio_configure_pin+0x124>)
  404204:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  404208:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40420a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40420e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404212:	d04d      	beq.n	4042b0 <pio_configure_pin+0xb4>
  404214:	d809      	bhi.n	40422a <pio_configure_pin+0x2e>
  404216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40421a:	d023      	beq.n	404264 <pio_configure_pin+0x68>
  40421c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404220:	d033      	beq.n	40428a <pio_configure_pin+0x8e>
  404222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404226:	d177      	bne.n	404318 <pio_configure_pin+0x11c>
  404228:	e009      	b.n	40423e <pio_configure_pin+0x42>
  40422a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40422e:	d05d      	beq.n	4042ec <pio_configure_pin+0xf0>
  404230:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404234:	d05a      	beq.n	4042ec <pio_configure_pin+0xf0>
  404236:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40423a:	d04c      	beq.n	4042d6 <pio_configure_pin+0xda>
  40423c:	e06c      	b.n	404318 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40423e:	f000 001f 	and.w	r0, r0, #31
  404242:	2601      	movs	r6, #1
  404244:	4086      	lsls	r6, r0
  404246:	4632      	mov	r2, r6
  404248:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40424c:	4620      	mov	r0, r4
  40424e:	4b35      	ldr	r3, [pc, #212]	; (404324 <pio_configure_pin+0x128>)
  404250:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404252:	f015 0f01 	tst.w	r5, #1
  404256:	d002      	beq.n	40425e <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  404258:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  40425a:	2001      	movs	r0, #1
  40425c:	e05d      	b.n	40431a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40425e:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  404260:	2001      	movs	r0, #1
  404262:	e05a      	b.n	40431a <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  404264:	f000 001f 	and.w	r0, r0, #31
  404268:	2601      	movs	r6, #1
  40426a:	4086      	lsls	r6, r0
  40426c:	4632      	mov	r2, r6
  40426e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404272:	4620      	mov	r0, r4
  404274:	4b2b      	ldr	r3, [pc, #172]	; (404324 <pio_configure_pin+0x128>)
  404276:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404278:	f015 0f01 	tst.w	r5, #1
  40427c:	d002      	beq.n	404284 <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  40427e:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  404280:	2001      	movs	r0, #1
  404282:	e04a      	b.n	40431a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404284:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  404286:	2001      	movs	r0, #1
  404288:	e047      	b.n	40431a <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40428a:	f000 001f 	and.w	r0, r0, #31
  40428e:	2601      	movs	r6, #1
  404290:	4086      	lsls	r6, r0
  404292:	4632      	mov	r2, r6
  404294:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404298:	4620      	mov	r0, r4
  40429a:	4b22      	ldr	r3, [pc, #136]	; (404324 <pio_configure_pin+0x128>)
  40429c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40429e:	f015 0f01 	tst.w	r5, #1
  4042a2:	d002      	beq.n	4042aa <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  4042a4:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4042a6:	2001      	movs	r0, #1
  4042a8:	e037      	b.n	40431a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4042aa:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4042ac:	2001      	movs	r0, #1
  4042ae:	e034      	b.n	40431a <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4042b0:	f000 001f 	and.w	r0, r0, #31
  4042b4:	2601      	movs	r6, #1
  4042b6:	4086      	lsls	r6, r0
  4042b8:	4632      	mov	r2, r6
  4042ba:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4042be:	4620      	mov	r0, r4
  4042c0:	4b18      	ldr	r3, [pc, #96]	; (404324 <pio_configure_pin+0x128>)
  4042c2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4042c4:	f015 0f01 	tst.w	r5, #1
  4042c8:	d002      	beq.n	4042d0 <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  4042ca:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4042cc:	2001      	movs	r0, #1
  4042ce:	e024      	b.n	40431a <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4042d0:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4042d2:	2001      	movs	r0, #1
  4042d4:	e021      	b.n	40431a <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4042d6:	f000 011f 	and.w	r1, r0, #31
  4042da:	2601      	movs	r6, #1
  4042dc:	462a      	mov	r2, r5
  4042de:	fa06 f101 	lsl.w	r1, r6, r1
  4042e2:	4620      	mov	r0, r4
  4042e4:	4b10      	ldr	r3, [pc, #64]	; (404328 <pio_configure_pin+0x12c>)
  4042e6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4042e8:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4042ea:	e016      	b.n	40431a <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4042ec:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4042f0:	f000 011f 	and.w	r1, r0, #31
  4042f4:	2601      	movs	r6, #1
  4042f6:	ea05 0306 	and.w	r3, r5, r6
  4042fa:	9300      	str	r3, [sp, #0]
  4042fc:	f3c5 0380 	ubfx	r3, r5, #2, #1
  404300:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  404304:	bf14      	ite	ne
  404306:	2200      	movne	r2, #0
  404308:	2201      	moveq	r2, #1
  40430a:	fa06 f101 	lsl.w	r1, r6, r1
  40430e:	4620      	mov	r0, r4
  404310:	4c06      	ldr	r4, [pc, #24]	; (40432c <pio_configure_pin+0x130>)
  404312:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  404314:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  404316:	e000      	b.n	40431a <pio_configure_pin+0x11e>

	default:
		return 0;
  404318:	2000      	movs	r0, #0
	}

	return 1;
}
  40431a:	b002      	add	sp, #8
  40431c:	bd70      	pop	{r4, r5, r6, pc}
  40431e:	bf00      	nop
  404320:	00200707 	.word	0x00200707
  404324:	004040c5 	.word	0x004040c5
  404328:	00404159 	.word	0x00404159
  40432c:	00404191 	.word	0x00404191

00404330 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404334:	4604      	mov	r4, r0
  404336:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404338:	4b0e      	ldr	r3, [pc, #56]	; (404374 <pio_handler_process+0x44>)
  40433a:	4798      	blx	r3
  40433c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40433e:	4620      	mov	r0, r4
  404340:	4b0d      	ldr	r3, [pc, #52]	; (404378 <pio_handler_process+0x48>)
  404342:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  404344:	4005      	ands	r5, r0
  404346:	d013      	beq.n	404370 <pio_handler_process+0x40>
  404348:	4c0c      	ldr	r4, [pc, #48]	; (40437c <pio_handler_process+0x4c>)
  40434a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40434e:	6823      	ldr	r3, [r4, #0]
  404350:	4543      	cmp	r3, r8
  404352:	d108      	bne.n	404366 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404354:	6861      	ldr	r1, [r4, #4]
  404356:	4229      	tst	r1, r5
  404358:	d005      	beq.n	404366 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40435a:	68e3      	ldr	r3, [r4, #12]
  40435c:	4640      	mov	r0, r8
  40435e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  404360:	6863      	ldr	r3, [r4, #4]
  404362:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  404366:	42b4      	cmp	r4, r6
  404368:	d002      	beq.n	404370 <pio_handler_process+0x40>
  40436a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40436c:	2d00      	cmp	r5, #0
  40436e:	d1ee      	bne.n	40434e <pio_handler_process+0x1e>
  404370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404374:	004041f5 	.word	0x004041f5
  404378:	004041f9 	.word	0x004041f9
  40437c:	20400978 	.word	0x20400978

00404380 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404382:	4c17      	ldr	r4, [pc, #92]	; (4043e0 <pio_handler_set+0x60>)
  404384:	6826      	ldr	r6, [r4, #0]
  404386:	2e06      	cmp	r6, #6
  404388:	d828      	bhi.n	4043dc <pio_handler_set+0x5c>
  40438a:	f04f 0c00 	mov.w	ip, #0
  40438e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404390:	4f14      	ldr	r7, [pc, #80]	; (4043e4 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  404392:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404394:	0125      	lsls	r5, r4, #4
  404396:	597d      	ldr	r5, [r7, r5]
  404398:	428d      	cmp	r5, r1
  40439a:	d104      	bne.n	4043a6 <pio_handler_set+0x26>
  40439c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4043a0:	686d      	ldr	r5, [r5, #4]
  4043a2:	4295      	cmp	r5, r2
  4043a4:	d004      	beq.n	4043b0 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4043a6:	3401      	adds	r4, #1
  4043a8:	b2e4      	uxtb	r4, r4
  4043aa:	46a4      	mov	ip, r4
  4043ac:	42a6      	cmp	r6, r4
  4043ae:	d2f0      	bcs.n	404392 <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4043b0:	4d0c      	ldr	r5, [pc, #48]	; (4043e4 <pio_handler_set+0x64>)
  4043b2:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4043b6:	eb05 040e 	add.w	r4, r5, lr
  4043ba:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4043be:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4043c0:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4043c2:	9906      	ldr	r1, [sp, #24]
  4043c4:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4043c6:	3601      	adds	r6, #1
  4043c8:	4566      	cmp	r6, ip
  4043ca:	d101      	bne.n	4043d0 <pio_handler_set+0x50>
		gs_ul_nb_sources++;
  4043cc:	4904      	ldr	r1, [pc, #16]	; (4043e0 <pio_handler_set+0x60>)
  4043ce:	600e      	str	r6, [r1, #0]
  4043d0:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4043d2:	461a      	mov	r2, r3
  4043d4:	4b04      	ldr	r3, [pc, #16]	; (4043e8 <pio_handler_set+0x68>)
  4043d6:	4798      	blx	r3

	return 0;
  4043d8:	2000      	movs	r0, #0
  4043da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4043dc:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4043de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4043e0:	20400974 	.word	0x20400974
  4043e4:	20400978 	.word	0x20400978
  4043e8:	004041b9 	.word	0x004041b9

004043ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4043ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4043ee:	210a      	movs	r1, #10
  4043f0:	4801      	ldr	r0, [pc, #4]	; (4043f8 <PIOA_Handler+0xc>)
  4043f2:	4b02      	ldr	r3, [pc, #8]	; (4043fc <PIOA_Handler+0x10>)
  4043f4:	4798      	blx	r3
  4043f6:	bd08      	pop	{r3, pc}
  4043f8:	400e0e00 	.word	0x400e0e00
  4043fc:	00404331 	.word	0x00404331

00404400 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404400:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  404402:	210b      	movs	r1, #11
  404404:	4801      	ldr	r0, [pc, #4]	; (40440c <PIOB_Handler+0xc>)
  404406:	4b02      	ldr	r3, [pc, #8]	; (404410 <PIOB_Handler+0x10>)
  404408:	4798      	blx	r3
  40440a:	bd08      	pop	{r3, pc}
  40440c:	400e1000 	.word	0x400e1000
  404410:	00404331 	.word	0x00404331

00404414 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404414:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  404416:	210c      	movs	r1, #12
  404418:	4801      	ldr	r0, [pc, #4]	; (404420 <PIOC_Handler+0xc>)
  40441a:	4b02      	ldr	r3, [pc, #8]	; (404424 <PIOC_Handler+0x10>)
  40441c:	4798      	blx	r3
  40441e:	bd08      	pop	{r3, pc}
  404420:	400e1200 	.word	0x400e1200
  404424:	00404331 	.word	0x00404331

00404428 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  404428:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40442a:	2110      	movs	r1, #16
  40442c:	4801      	ldr	r0, [pc, #4]	; (404434 <PIOD_Handler+0xc>)
  40442e:	4b02      	ldr	r3, [pc, #8]	; (404438 <PIOD_Handler+0x10>)
  404430:	4798      	blx	r3
  404432:	bd08      	pop	{r3, pc}
  404434:	400e1400 	.word	0x400e1400
  404438:	00404331 	.word	0x00404331

0040443c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40443c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40443e:	2111      	movs	r1, #17
  404440:	4801      	ldr	r0, [pc, #4]	; (404448 <PIOE_Handler+0xc>)
  404442:	4b02      	ldr	r3, [pc, #8]	; (40444c <PIOE_Handler+0x10>)
  404444:	4798      	blx	r3
  404446:	bd08      	pop	{r3, pc}
  404448:	400e1600 	.word	0x400e1600
  40444c:	00404331 	.word	0x00404331

00404450 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404452:	4606      	mov	r6, r0
  404454:	460d      	mov	r5, r1
  404456:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  404458:	4b17      	ldr	r3, [pc, #92]	; (4044b8 <pio_handler_set_priority+0x68>)
  40445a:	4798      	blx	r3
  40445c:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40445e:	f04f 31ff 	mov.w	r1, #4294967295
  404462:	4630      	mov	r0, r6
  404464:	4b15      	ldr	r3, [pc, #84]	; (4044bc <pio_handler_set_priority+0x6c>)
  404466:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  404468:	4630      	mov	r0, r6
  40446a:	4b15      	ldr	r3, [pc, #84]	; (4044c0 <pio_handler_set_priority+0x70>)
  40446c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40446e:	fa5f fe85 	uxtb.w	lr, r5
  404472:	f00e 031f 	and.w	r3, lr, #31
  404476:	2201      	movs	r2, #1
  404478:	fa02 f303 	lsl.w	r3, r2, r3
  40447c:	0968      	lsrs	r0, r5, #5
  40447e:	4911      	ldr	r1, [pc, #68]	; (4044c4 <pio_handler_set_priority+0x74>)
  404480:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  404484:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404488:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  40448c:	2d00      	cmp	r5, #0
  40448e:	da07      	bge.n	4044a0 <pio_handler_set_priority+0x50>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404490:	f00e 0e0f 	and.w	lr, lr, #15
  404494:	0164      	lsls	r4, r4, #5
  404496:	b2e4      	uxtb	r4, r4
  404498:	4a0b      	ldr	r2, [pc, #44]	; (4044c8 <pio_handler_set_priority+0x78>)
  40449a:	f802 400e 	strb.w	r4, [r2, lr]
  40449e:	e003      	b.n	4044a8 <pio_handler_set_priority+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4044a0:	0164      	lsls	r4, r4, #5
  4044a2:	b2e4      	uxtb	r4, r4
  4044a4:	4a09      	ldr	r2, [pc, #36]	; (4044cc <pio_handler_set_priority+0x7c>)
  4044a6:	5554      	strb	r4, [r2, r5]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4044a8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4044ac:	4639      	mov	r1, r7
  4044ae:	4630      	mov	r0, r6
  4044b0:	4b07      	ldr	r3, [pc, #28]	; (4044d0 <pio_handler_set_priority+0x80>)
  4044b2:	4798      	blx	r3
  4044b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044b6:	bf00      	nop
  4044b8:	004041f9 	.word	0x004041f9
  4044bc:	004041f1 	.word	0x004041f1
  4044c0:	004041f5 	.word	0x004041f5
  4044c4:	e000e100 	.word	0xe000e100
  4044c8:	e000ed14 	.word	0xe000ed14
  4044cc:	e000e400 	.word	0xe000e400
  4044d0:	004041ed 	.word	0x004041ed

004044d4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4044d4:	2803      	cmp	r0, #3
  4044d6:	d007      	beq.n	4044e8 <pmc_mck_set_division+0x14>
  4044d8:	2804      	cmp	r0, #4
  4044da:	d008      	beq.n	4044ee <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4044dc:	2802      	cmp	r0, #2
  4044de:	bf0c      	ite	eq
  4044e0:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4044e4:	2200      	movne	r2, #0
  4044e6:	e004      	b.n	4044f2 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4044e8:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  4044ec:	e001      	b.n	4044f2 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4044ee:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4044f2:	4906      	ldr	r1, [pc, #24]	; (40450c <pmc_mck_set_division+0x38>)
  4044f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4044f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4044fa:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4044fc:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4044fe:	460a      	mov	r2, r1
  404500:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404502:	f013 0f08 	tst.w	r3, #8
  404506:	d0fb      	beq.n	404500 <pmc_mck_set_division+0x2c>
}
  404508:	4770      	bx	lr
  40450a:	bf00      	nop
  40450c:	400e0600 	.word	0x400e0600

00404510 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404510:	4a18      	ldr	r2, [pc, #96]	; (404574 <pmc_switch_mck_to_pllack+0x64>)
  404512:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  404518:	4318      	orrs	r0, r3
  40451a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40451c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40451e:	f013 0f08 	tst.w	r3, #8
  404522:	d003      	beq.n	40452c <pmc_switch_mck_to_pllack+0x1c>
  404524:	e009      	b.n	40453a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404526:	3b01      	subs	r3, #1
  404528:	d103      	bne.n	404532 <pmc_switch_mck_to_pllack+0x22>
  40452a:	e01e      	b.n	40456a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40452c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404530:	4910      	ldr	r1, [pc, #64]	; (404574 <pmc_switch_mck_to_pllack+0x64>)
  404532:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404534:	f012 0f08 	tst.w	r2, #8
  404538:	d0f5      	beq.n	404526 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40453a:	4a0e      	ldr	r2, [pc, #56]	; (404574 <pmc_switch_mck_to_pllack+0x64>)
  40453c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40453e:	f023 0303 	bic.w	r3, r3, #3
  404542:	f043 0302 	orr.w	r3, r3, #2
  404546:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404548:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40454a:	f010 0008 	ands.w	r0, r0, #8
  40454e:	d004      	beq.n	40455a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  404550:	2000      	movs	r0, #0
  404552:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  404554:	3b01      	subs	r3, #1
  404556:	d103      	bne.n	404560 <pmc_switch_mck_to_pllack+0x50>
  404558:	e009      	b.n	40456e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40455a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40455e:	4905      	ldr	r1, [pc, #20]	; (404574 <pmc_switch_mck_to_pllack+0x64>)
  404560:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404562:	f012 0f08 	tst.w	r2, #8
  404566:	d0f5      	beq.n	404554 <pmc_switch_mck_to_pllack+0x44>
  404568:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40456a:	2001      	movs	r0, #1
  40456c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40456e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404570:	4770      	bx	lr
  404572:	bf00      	nop
  404574:	400e0600 	.word	0x400e0600

00404578 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  404578:	b138      	cbz	r0, 40458a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40457a:	490e      	ldr	r1, [pc, #56]	; (4045b4 <pmc_switch_mainck_to_xtal+0x3c>)
  40457c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40457e:	4a0e      	ldr	r2, [pc, #56]	; (4045b8 <pmc_switch_mainck_to_xtal+0x40>)
  404580:	401a      	ands	r2, r3
  404582:	4b0e      	ldr	r3, [pc, #56]	; (4045bc <pmc_switch_mainck_to_xtal+0x44>)
  404584:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404586:	620b      	str	r3, [r1, #32]
  404588:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40458a:	480a      	ldr	r0, [pc, #40]	; (4045b4 <pmc_switch_mainck_to_xtal+0x3c>)
  40458c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40458e:	0209      	lsls	r1, r1, #8
  404590:	b289      	uxth	r1, r1
  404592:	4a0b      	ldr	r2, [pc, #44]	; (4045c0 <pmc_switch_mainck_to_xtal+0x48>)
  404594:	401a      	ands	r2, r3
  404596:	4b0b      	ldr	r3, [pc, #44]	; (4045c4 <pmc_switch_mainck_to_xtal+0x4c>)
  404598:	4313      	orrs	r3, r2
  40459a:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40459c:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40459e:	4602      	mov	r2, r0
  4045a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4045a2:	f013 0f01 	tst.w	r3, #1
  4045a6:	d0fb      	beq.n	4045a0 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4045a8:	4a02      	ldr	r2, [pc, #8]	; (4045b4 <pmc_switch_mainck_to_xtal+0x3c>)
  4045aa:	6a11      	ldr	r1, [r2, #32]
  4045ac:	4b06      	ldr	r3, [pc, #24]	; (4045c8 <pmc_switch_mainck_to_xtal+0x50>)
  4045ae:	430b      	orrs	r3, r1
  4045b0:	6213      	str	r3, [r2, #32]
  4045b2:	4770      	bx	lr
  4045b4:	400e0600 	.word	0x400e0600
  4045b8:	fec8fffc 	.word	0xfec8fffc
  4045bc:	01370002 	.word	0x01370002
  4045c0:	ffc8fffc 	.word	0xffc8fffc
  4045c4:	00370001 	.word	0x00370001
  4045c8:	01370000 	.word	0x01370000

004045cc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4045cc:	4b02      	ldr	r3, [pc, #8]	; (4045d8 <pmc_osc_is_ready_mainck+0xc>)
  4045ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4045d0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4045d4:	4770      	bx	lr
  4045d6:	bf00      	nop
  4045d8:	400e0600 	.word	0x400e0600

004045dc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4045dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4045e0:	4b01      	ldr	r3, [pc, #4]	; (4045e8 <pmc_disable_pllack+0xc>)
  4045e2:	629a      	str	r2, [r3, #40]	; 0x28
  4045e4:	4770      	bx	lr
  4045e6:	bf00      	nop
  4045e8:	400e0600 	.word	0x400e0600

004045ec <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4045ec:	4b02      	ldr	r3, [pc, #8]	; (4045f8 <pmc_is_locked_pllack+0xc>)
  4045ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4045f0:	f000 0002 	and.w	r0, r0, #2
  4045f4:	4770      	bx	lr
  4045f6:	bf00      	nop
  4045f8:	400e0600 	.word	0x400e0600

004045fc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4045fc:	283f      	cmp	r0, #63	; 0x3f
  4045fe:	d81e      	bhi.n	40463e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  404600:	281f      	cmp	r0, #31
  404602:	d80c      	bhi.n	40461e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404604:	4b11      	ldr	r3, [pc, #68]	; (40464c <pmc_enable_periph_clk+0x50>)
  404606:	699a      	ldr	r2, [r3, #24]
  404608:	2301      	movs	r3, #1
  40460a:	4083      	lsls	r3, r0
  40460c:	4393      	bics	r3, r2
  40460e:	d018      	beq.n	404642 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  404610:	2301      	movs	r3, #1
  404612:	fa03 f000 	lsl.w	r0, r3, r0
  404616:	4b0d      	ldr	r3, [pc, #52]	; (40464c <pmc_enable_periph_clk+0x50>)
  404618:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40461a:	2000      	movs	r0, #0
  40461c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40461e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404620:	4b0a      	ldr	r3, [pc, #40]	; (40464c <pmc_enable_periph_clk+0x50>)
  404622:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404626:	2301      	movs	r3, #1
  404628:	4083      	lsls	r3, r0
  40462a:	4393      	bics	r3, r2
  40462c:	d00b      	beq.n	404646 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40462e:	2301      	movs	r3, #1
  404630:	fa03 f000 	lsl.w	r0, r3, r0
  404634:	4b05      	ldr	r3, [pc, #20]	; (40464c <pmc_enable_periph_clk+0x50>)
  404636:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40463a:	2000      	movs	r0, #0
  40463c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40463e:	2001      	movs	r0, #1
  404640:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  404642:	2000      	movs	r0, #0
  404644:	4770      	bx	lr
  404646:	2000      	movs	r0, #0
}
  404648:	4770      	bx	lr
  40464a:	bf00      	nop
  40464c:	400e0600 	.word	0x400e0600

00404650 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  404650:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  404652:	4b07      	ldr	r3, [pc, #28]	; (404670 <spi_enable_clock+0x20>)
  404654:	4298      	cmp	r0, r3
  404656:	d103      	bne.n	404660 <spi_enable_clock+0x10>
  404658:	2015      	movs	r0, #21
  40465a:	4b06      	ldr	r3, [pc, #24]	; (404674 <spi_enable_clock+0x24>)
  40465c:	4798      	blx	r3
  40465e:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  404660:	4b05      	ldr	r3, [pc, #20]	; (404678 <spi_enable_clock+0x28>)
  404662:	4298      	cmp	r0, r3
  404664:	d102      	bne.n	40466c <spi_enable_clock+0x1c>
  404666:	202a      	movs	r0, #42	; 0x2a
  404668:	4b02      	ldr	r3, [pc, #8]	; (404674 <spi_enable_clock+0x24>)
  40466a:	4798      	blx	r3
  40466c:	bd08      	pop	{r3, pc}
  40466e:	bf00      	nop
  404670:	40008000 	.word	0x40008000
  404674:	004045fd 	.word	0x004045fd
  404678:	40058000 	.word	0x40058000

0040467c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40467c:	6843      	ldr	r3, [r0, #4]
  40467e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  404682:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  404684:	6843      	ldr	r3, [r0, #4]
  404686:	0409      	lsls	r1, r1, #16
  404688:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40468c:	430b      	orrs	r3, r1
  40468e:	6043      	str	r3, [r0, #4]
  404690:	4770      	bx	lr
  404692:	bf00      	nop

00404694 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  404694:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  404696:	f643 2399 	movw	r3, #15001	; 0x3a99
  40469a:	e001      	b.n	4046a0 <spi_read+0xc>
		if (!timeout--) {
  40469c:	3b01      	subs	r3, #1
  40469e:	d00e      	beq.n	4046be <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4046a0:	6904      	ldr	r4, [r0, #16]
  4046a2:	f014 0f01 	tst.w	r4, #1
  4046a6:	d0f9      	beq.n	40469c <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  4046a8:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4046aa:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4046ac:	f010 0f02 	tst.w	r0, #2
  4046b0:	d002      	beq.n	4046b8 <spi_read+0x24>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4046b2:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4046b6:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4046b8:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4046ba:	2000      	movs	r0, #0
  4046bc:	e000      	b.n	4046c0 <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  4046be:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  4046c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4046c4:	4770      	bx	lr
  4046c6:	bf00      	nop

004046c8 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4046c8:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4046ca:	f643 2499 	movw	r4, #15001	; 0x3a99
  4046ce:	e001      	b.n	4046d4 <spi_write+0xc>
		if (!timeout--) {
  4046d0:	3c01      	subs	r4, #1
  4046d2:	d011      	beq.n	4046f8 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4046d4:	6905      	ldr	r5, [r0, #16]
  4046d6:	f015 0f02 	tst.w	r5, #2
  4046da:	d0f9      	beq.n	4046d0 <spi_write+0x8>
  4046dc:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4046de:	f014 0f02 	tst.w	r4, #2
  4046e2:	d006      	beq.n	4046f2 <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4046e4:	0412      	lsls	r2, r2, #16
  4046e6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4046ea:	4311      	orrs	r1, r2
		if (uc_last) {
  4046ec:	b10b      	cbz	r3, 4046f2 <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  4046ee:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4046f2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4046f4:	2000      	movs	r0, #0
  4046f6:	e000      	b.n	4046fa <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  4046f8:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  4046fa:	bc30      	pop	{r4, r5}
  4046fc:	4770      	bx	lr
  4046fe:	bf00      	nop

00404700 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  404700:	b132      	cbz	r2, 404710 <spi_set_clock_polarity+0x10>
  404702:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  404706:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404708:	f043 0301 	orr.w	r3, r3, #1
  40470c:	6303      	str	r3, [r0, #48]	; 0x30
  40470e:	4770      	bx	lr
  404710:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  404714:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404716:	f023 0301 	bic.w	r3, r3, #1
  40471a:	6303      	str	r3, [r0, #48]	; 0x30
  40471c:	4770      	bx	lr
  40471e:	bf00      	nop

00404720 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  404720:	b132      	cbz	r2, 404730 <spi_set_clock_phase+0x10>
  404722:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  404726:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404728:	f043 0302 	orr.w	r3, r3, #2
  40472c:	6303      	str	r3, [r0, #48]	; 0x30
  40472e:	4770      	bx	lr
  404730:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  404734:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404736:	f023 0302 	bic.w	r3, r3, #2
  40473a:	6303      	str	r3, [r0, #48]	; 0x30
  40473c:	4770      	bx	lr
  40473e:	bf00      	nop

00404740 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  404740:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  404744:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40474a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40474c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40474e:	431a      	orrs	r2, r3
  404750:	630a      	str	r2, [r1, #48]	; 0x30
  404752:	4770      	bx	lr

00404754 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  404754:	1e43      	subs	r3, r0, #1
  404756:	4419      	add	r1, r3
  404758:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40475c:	1e43      	subs	r3, r0, #1
  40475e:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  404760:	bf94      	ite	ls
  404762:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  404764:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  404768:	4770      	bx	lr
  40476a:	bf00      	nop

0040476c <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40476c:	b16a      	cbz	r2, 40478a <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  40476e:	b410      	push	{r4}
  404770:	4614      	mov	r4, r2
  404772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  404776:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404778:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40477c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40477e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  404780:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  404784:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  404786:	2000      	movs	r0, #0
  404788:	e002      	b.n	404790 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  40478a:	f04f 30ff 	mov.w	r0, #4294967295
  40478e:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  404790:	f85d 4b04 	ldr.w	r4, [sp], #4
  404794:	4770      	bx	lr
  404796:	bf00      	nop

00404798 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  404798:	b410      	push	{r4}
  40479a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40479e:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4047a0:	b280      	uxth	r0, r0
  4047a2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4047a4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4047a6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4047aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4047ae:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4047b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4047b4:	4770      	bx	lr
  4047b6:	bf00      	nop

004047b8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4047b8:	6943      	ldr	r3, [r0, #20]
  4047ba:	f013 0f02 	tst.w	r3, #2
  4047be:	d002      	beq.n	4047c6 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4047c0:	61c1      	str	r1, [r0, #28]
	return 0;
  4047c2:	2000      	movs	r0, #0
  4047c4:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4047c6:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4047c8:	4770      	bx	lr
  4047ca:	bf00      	nop

004047cc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4047cc:	6943      	ldr	r3, [r0, #20]
  4047ce:	f013 0f01 	tst.w	r3, #1
  4047d2:	d003      	beq.n	4047dc <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4047d4:	6983      	ldr	r3, [r0, #24]
  4047d6:	700b      	strb	r3, [r1, #0]
	return 0;
  4047d8:	2000      	movs	r0, #0
  4047da:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4047dc:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4047de:	4770      	bx	lr

004047e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4047e0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4047e2:	010c      	lsls	r4, r1, #4
  4047e4:	4294      	cmp	r4, r2
  4047e6:	d90f      	bls.n	404808 <usart_set_async_baudrate+0x28>
  4047e8:	e01a      	b.n	404820 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4047ea:	6841      	ldr	r1, [r0, #4]
  4047ec:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4047f0:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4047f2:	0412      	lsls	r2, r2, #16
  4047f4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4047f8:	431a      	orrs	r2, r3
  4047fa:	6202      	str	r2, [r0, #32]

	return 0;
  4047fc:	2000      	movs	r0, #0
  4047fe:	e01c      	b.n	40483a <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  404800:	2001      	movs	r0, #1
  404802:	e01a      	b.n	40483a <usart_set_async_baudrate+0x5a>
  404804:	2001      	movs	r0, #1
  404806:	e018      	b.n	40483a <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  404808:	0863      	lsrs	r3, r4, #1
  40480a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40480e:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  404812:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  404814:	1e5c      	subs	r4, r3, #1
  404816:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40481a:	428c      	cmp	r4, r1
  40481c:	d9e9      	bls.n	4047f2 <usart_set_async_baudrate+0x12>
  40481e:	e7ef      	b.n	404800 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  404820:	00c9      	lsls	r1, r1, #3
  404822:	084b      	lsrs	r3, r1, #1
  404824:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  404828:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40482c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40482e:	1e5c      	subs	r4, r3, #1
  404830:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  404834:	428c      	cmp	r4, r1
  404836:	d8e5      	bhi.n	404804 <usart_set_async_baudrate+0x24>
  404838:	e7d7      	b.n	4047ea <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  40483a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40483e:	4770      	bx	lr

00404840 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  404840:	4b08      	ldr	r3, [pc, #32]	; (404864 <usart_reset+0x24>)
  404842:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  404846:	2300      	movs	r3, #0
  404848:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40484a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40484c:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40484e:	2388      	movs	r3, #136	; 0x88
  404850:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  404852:	2324      	movs	r3, #36	; 0x24
  404854:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  404856:	f44f 7380 	mov.w	r3, #256	; 0x100
  40485a:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  40485c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  404860:	6003      	str	r3, [r0, #0]
  404862:	4770      	bx	lr
  404864:	55534100 	.word	0x55534100

00404868 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  404868:	b570      	push	{r4, r5, r6, lr}
  40486a:	4605      	mov	r5, r0
  40486c:	460c      	mov	r4, r1
  40486e:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  404870:	4b0f      	ldr	r3, [pc, #60]	; (4048b0 <usart_init_rs232+0x48>)
  404872:	4798      	blx	r3

	ul_reg_val = 0;
  404874:	2200      	movs	r2, #0
  404876:	4b0f      	ldr	r3, [pc, #60]	; (4048b4 <usart_init_rs232+0x4c>)
  404878:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40487a:	b19c      	cbz	r4, 4048a4 <usart_init_rs232+0x3c>
  40487c:	4632      	mov	r2, r6
  40487e:	6821      	ldr	r1, [r4, #0]
  404880:	4628      	mov	r0, r5
  404882:	4b0d      	ldr	r3, [pc, #52]	; (4048b8 <usart_init_rs232+0x50>)
  404884:	4798      	blx	r3
  404886:	4602      	mov	r2, r0
  404888:	b970      	cbnz	r0, 4048a8 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40488a:	6861      	ldr	r1, [r4, #4]
  40488c:	68a3      	ldr	r3, [r4, #8]
  40488e:	4319      	orrs	r1, r3
  404890:	6923      	ldr	r3, [r4, #16]
  404892:	4319      	orrs	r1, r3
  404894:	68e3      	ldr	r3, [r4, #12]
  404896:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404898:	4906      	ldr	r1, [pc, #24]	; (4048b4 <usart_init_rs232+0x4c>)
  40489a:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  40489c:	6869      	ldr	r1, [r5, #4]
  40489e:	430b      	orrs	r3, r1
  4048a0:	606b      	str	r3, [r5, #4]

	return 0;
  4048a2:	e002      	b.n	4048aa <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4048a4:	2201      	movs	r2, #1
  4048a6:	e000      	b.n	4048aa <usart_init_rs232+0x42>
  4048a8:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4048aa:	4610      	mov	r0, r2
  4048ac:	bd70      	pop	{r4, r5, r6, pc}
  4048ae:	bf00      	nop
  4048b0:	00404841 	.word	0x00404841
  4048b4:	204009e8 	.word	0x204009e8
  4048b8:	004047e1 	.word	0x004047e1

004048bc <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4048bc:	2340      	movs	r3, #64	; 0x40
  4048be:	6003      	str	r3, [r0, #0]
  4048c0:	4770      	bx	lr
  4048c2:	bf00      	nop

004048c4 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4048c4:	2310      	movs	r3, #16
  4048c6:	6003      	str	r3, [r0, #0]
  4048c8:	4770      	bx	lr
  4048ca:	bf00      	nop

004048cc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4048cc:	6943      	ldr	r3, [r0, #20]
  4048ce:	f013 0f02 	tst.w	r3, #2
  4048d2:	d004      	beq.n	4048de <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4048d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4048d8:	61c1      	str	r1, [r0, #28]
	return 0;
  4048da:	2000      	movs	r0, #0
  4048dc:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4048de:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4048e0:	4770      	bx	lr
  4048e2:	bf00      	nop

004048e4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4048e4:	6943      	ldr	r3, [r0, #20]
  4048e6:	f013 0f01 	tst.w	r3, #1
  4048ea:	d005      	beq.n	4048f8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4048ec:	6983      	ldr	r3, [r0, #24]
  4048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4048f2:	600b      	str	r3, [r1, #0]

	return 0;
  4048f4:	2000      	movs	r0, #0
  4048f6:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4048f8:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4048fa:	4770      	bx	lr

004048fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4048fc:	e7fe      	b.n	4048fc <Dummy_Handler>
  4048fe:	bf00      	nop

00404900 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  404900:	b500      	push	{lr}
  404902:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  404904:	4b27      	ldr	r3, [pc, #156]	; (4049a4 <Reset_Handler+0xa4>)
  404906:	4a28      	ldr	r2, [pc, #160]	; (4049a8 <Reset_Handler+0xa8>)
  404908:	429a      	cmp	r2, r3
  40490a:	d003      	beq.n	404914 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  40490c:	4b27      	ldr	r3, [pc, #156]	; (4049ac <Reset_Handler+0xac>)
  40490e:	4a25      	ldr	r2, [pc, #148]	; (4049a4 <Reset_Handler+0xa4>)
  404910:	429a      	cmp	r2, r3
  404912:	d304      	bcc.n	40491e <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404914:	4b26      	ldr	r3, [pc, #152]	; (4049b0 <Reset_Handler+0xb0>)
  404916:	4a27      	ldr	r2, [pc, #156]	; (4049b4 <Reset_Handler+0xb4>)
  404918:	429a      	cmp	r2, r3
  40491a:	d30f      	bcc.n	40493c <Reset_Handler+0x3c>
  40491c:	e01a      	b.n	404954 <Reset_Handler+0x54>
  40491e:	4921      	ldr	r1, [pc, #132]	; (4049a4 <Reset_Handler+0xa4>)
  404920:	4b25      	ldr	r3, [pc, #148]	; (4049b8 <Reset_Handler+0xb8>)
  404922:	1a5b      	subs	r3, r3, r1
  404924:	f023 0303 	bic.w	r3, r3, #3
  404928:	3304      	adds	r3, #4
  40492a:	4a1f      	ldr	r2, [pc, #124]	; (4049a8 <Reset_Handler+0xa8>)
  40492c:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  40492e:	f852 0b04 	ldr.w	r0, [r2], #4
  404932:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  404936:	429a      	cmp	r2, r3
  404938:	d1f9      	bne.n	40492e <Reset_Handler+0x2e>
  40493a:	e7eb      	b.n	404914 <Reset_Handler+0x14>
  40493c:	4b1f      	ldr	r3, [pc, #124]	; (4049bc <Reset_Handler+0xbc>)
  40493e:	4a20      	ldr	r2, [pc, #128]	; (4049c0 <Reset_Handler+0xc0>)
  404940:	1ad2      	subs	r2, r2, r3
  404942:	f022 0203 	bic.w	r2, r2, #3
  404946:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404948:	3b04      	subs	r3, #4
                *pDest++ = 0;
  40494a:	2100      	movs	r1, #0
  40494c:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404950:	4293      	cmp	r3, r2
  404952:	d1fb      	bne.n	40494c <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404954:	4a1b      	ldr	r2, [pc, #108]	; (4049c4 <Reset_Handler+0xc4>)
  404956:	4b1c      	ldr	r3, [pc, #112]	; (4049c8 <Reset_Handler+0xc8>)
  404958:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40495c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40495e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404962:	fab3 f383 	clz	r3, r3
  404966:	095b      	lsrs	r3, r3, #5
  404968:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40496a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40496c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404970:	2200      	movs	r2, #0
  404972:	4b16      	ldr	r3, [pc, #88]	; (4049cc <Reset_Handler+0xcc>)
  404974:	701a      	strb	r2, [r3, #0]
	return flags;
  404976:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  404978:	4a15      	ldr	r2, [pc, #84]	; (4049d0 <Reset_Handler+0xd0>)
  40497a:	6813      	ldr	r3, [r2, #0]
  40497c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  404980:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404982:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  404986:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40498a:	b129      	cbz	r1, 404998 <Reset_Handler+0x98>
		cpu_irq_enable();
  40498c:	2201      	movs	r2, #1
  40498e:	4b0f      	ldr	r3, [pc, #60]	; (4049cc <Reset_Handler+0xcc>)
  404990:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  404992:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  404996:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  404998:	4b0e      	ldr	r3, [pc, #56]	; (4049d4 <Reset_Handler+0xd4>)
  40499a:	4798      	blx	r3

        /* Branch to main function */
        main();
  40499c:	4b0e      	ldr	r3, [pc, #56]	; (4049d8 <Reset_Handler+0xd8>)
  40499e:	4798      	blx	r3
  4049a0:	e7fe      	b.n	4049a0 <Reset_Handler+0xa0>
  4049a2:	bf00      	nop
  4049a4:	20400000 	.word	0x20400000
  4049a8:	0040cd40 	.word	0x0040cd40
  4049ac:	204008e4 	.word	0x204008e4
  4049b0:	20401664 	.word	0x20401664
  4049b4:	204008e4 	.word	0x204008e4
  4049b8:	204008e3 	.word	0x204008e3
  4049bc:	204008e8 	.word	0x204008e8
  4049c0:	20401667 	.word	0x20401667
  4049c4:	e000ed00 	.word	0xe000ed00
  4049c8:	00400000 	.word	0x00400000
  4049cc:	20400038 	.word	0x20400038
  4049d0:	e000ed88 	.word	0xe000ed88
  4049d4:	00405145 	.word	0x00405145
  4049d8:	00404efd 	.word	0x00404efd

004049dc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4049dc:	4b3c      	ldr	r3, [pc, #240]	; (404ad0 <SystemCoreClockUpdate+0xf4>)
  4049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4049e0:	f003 0303 	and.w	r3, r3, #3
  4049e4:	2b01      	cmp	r3, #1
  4049e6:	d00f      	beq.n	404a08 <SystemCoreClockUpdate+0x2c>
  4049e8:	b113      	cbz	r3, 4049f0 <SystemCoreClockUpdate+0x14>
  4049ea:	2b02      	cmp	r3, #2
  4049ec:	d029      	beq.n	404a42 <SystemCoreClockUpdate+0x66>
  4049ee:	e057      	b.n	404aa0 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4049f0:	4b38      	ldr	r3, [pc, #224]	; (404ad4 <SystemCoreClockUpdate+0xf8>)
  4049f2:	695b      	ldr	r3, [r3, #20]
  4049f4:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4049f8:	bf14      	ite	ne
  4049fa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4049fe:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  404a02:	4b35      	ldr	r3, [pc, #212]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a04:	601a      	str	r2, [r3, #0]
  404a06:	e04b      	b.n	404aa0 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404a08:	4b31      	ldr	r3, [pc, #196]	; (404ad0 <SystemCoreClockUpdate+0xf4>)
  404a0a:	6a1b      	ldr	r3, [r3, #32]
  404a0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404a10:	d003      	beq.n	404a1a <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  404a12:	4a32      	ldr	r2, [pc, #200]	; (404adc <SystemCoreClockUpdate+0x100>)
  404a14:	4b30      	ldr	r3, [pc, #192]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a16:	601a      	str	r2, [r3, #0]
  404a18:	e042      	b.n	404aa0 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404a1a:	4a31      	ldr	r2, [pc, #196]	; (404ae0 <SystemCoreClockUpdate+0x104>)
  404a1c:	4b2e      	ldr	r3, [pc, #184]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a1e:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404a20:	4b2b      	ldr	r3, [pc, #172]	; (404ad0 <SystemCoreClockUpdate+0xf4>)
  404a22:	6a1b      	ldr	r3, [r3, #32]
  404a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404a28:	2b10      	cmp	r3, #16
  404a2a:	d002      	beq.n	404a32 <SystemCoreClockUpdate+0x56>
  404a2c:	2b20      	cmp	r3, #32
  404a2e:	d004      	beq.n	404a3a <SystemCoreClockUpdate+0x5e>
  404a30:	e036      	b.n	404aa0 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  404a32:	4a2c      	ldr	r2, [pc, #176]	; (404ae4 <SystemCoreClockUpdate+0x108>)
  404a34:	4b28      	ldr	r3, [pc, #160]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a36:	601a      	str	r2, [r3, #0]
          break;
  404a38:	e032      	b.n	404aa0 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  404a3a:	4a28      	ldr	r2, [pc, #160]	; (404adc <SystemCoreClockUpdate+0x100>)
  404a3c:	4b26      	ldr	r3, [pc, #152]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a3e:	601a      	str	r2, [r3, #0]
          break;
  404a40:	e02e      	b.n	404aa0 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404a42:	4b23      	ldr	r3, [pc, #140]	; (404ad0 <SystemCoreClockUpdate+0xf4>)
  404a44:	6a1b      	ldr	r3, [r3, #32]
  404a46:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404a4a:	d003      	beq.n	404a54 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  404a4c:	4a23      	ldr	r2, [pc, #140]	; (404adc <SystemCoreClockUpdate+0x100>)
  404a4e:	4b22      	ldr	r3, [pc, #136]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a50:	601a      	str	r2, [r3, #0]
  404a52:	e012      	b.n	404a7a <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404a54:	4a22      	ldr	r2, [pc, #136]	; (404ae0 <SystemCoreClockUpdate+0x104>)
  404a56:	4b20      	ldr	r3, [pc, #128]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a58:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404a5a:	4b1d      	ldr	r3, [pc, #116]	; (404ad0 <SystemCoreClockUpdate+0xf4>)
  404a5c:	6a1b      	ldr	r3, [r3, #32]
  404a5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404a62:	2b10      	cmp	r3, #16
  404a64:	d002      	beq.n	404a6c <SystemCoreClockUpdate+0x90>
  404a66:	2b20      	cmp	r3, #32
  404a68:	d004      	beq.n	404a74 <SystemCoreClockUpdate+0x98>
  404a6a:	e006      	b.n	404a7a <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  404a6c:	4a1d      	ldr	r2, [pc, #116]	; (404ae4 <SystemCoreClockUpdate+0x108>)
  404a6e:	4b1a      	ldr	r3, [pc, #104]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a70:	601a      	str	r2, [r3, #0]
          break;
  404a72:	e002      	b.n	404a7a <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  404a74:	4a19      	ldr	r2, [pc, #100]	; (404adc <SystemCoreClockUpdate+0x100>)
  404a76:	4b18      	ldr	r3, [pc, #96]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a78:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  404a7a:	4b15      	ldr	r3, [pc, #84]	; (404ad0 <SystemCoreClockUpdate+0xf4>)
  404a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404a7e:	f003 0303 	and.w	r3, r3, #3
  404a82:	2b02      	cmp	r3, #2
  404a84:	d10c      	bne.n	404aa0 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  404a86:	4a12      	ldr	r2, [pc, #72]	; (404ad0 <SystemCoreClockUpdate+0xf4>)
  404a88:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  404a8a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  404a8c:	4812      	ldr	r0, [pc, #72]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404a8e:	f3c3 410a 	ubfx	r1, r3, #16, #11
  404a92:	6803      	ldr	r3, [r0, #0]
  404a94:	fb01 3303 	mla	r3, r1, r3, r3
  404a98:	b2d2      	uxtb	r2, r2
  404a9a:	fbb3 f3f2 	udiv	r3, r3, r2
  404a9e:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  404aa0:	4b0b      	ldr	r3, [pc, #44]	; (404ad0 <SystemCoreClockUpdate+0xf4>)
  404aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404aa8:	2b70      	cmp	r3, #112	; 0x70
  404aaa:	d107      	bne.n	404abc <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  404aac:	4a0a      	ldr	r2, [pc, #40]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404aae:	6813      	ldr	r3, [r2, #0]
  404ab0:	490d      	ldr	r1, [pc, #52]	; (404ae8 <SystemCoreClockUpdate+0x10c>)
  404ab2:	fba1 1303 	umull	r1, r3, r1, r3
  404ab6:	085b      	lsrs	r3, r3, #1
  404ab8:	6013      	str	r3, [r2, #0]
  404aba:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404abc:	4b04      	ldr	r3, [pc, #16]	; (404ad0 <SystemCoreClockUpdate+0xf4>)
  404abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404ac0:	4905      	ldr	r1, [pc, #20]	; (404ad8 <SystemCoreClockUpdate+0xfc>)
  404ac2:	f3c3 1202 	ubfx	r2, r3, #4, #3
  404ac6:	680b      	ldr	r3, [r1, #0]
  404ac8:	40d3      	lsrs	r3, r2
  404aca:	600b      	str	r3, [r1, #0]
  404acc:	4770      	bx	lr
  404ace:	bf00      	nop
  404ad0:	400e0600 	.word	0x400e0600
  404ad4:	400e1810 	.word	0x400e1810
  404ad8:	2040003c 	.word	0x2040003c
  404adc:	00b71b00 	.word	0x00b71b00
  404ae0:	003d0900 	.word	0x003d0900
  404ae4:	007a1200 	.word	0x007a1200
  404ae8:	aaaaaaab 	.word	0xaaaaaaab

00404aec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  404aec:	4b12      	ldr	r3, [pc, #72]	; (404b38 <system_init_flash+0x4c>)
  404aee:	4298      	cmp	r0, r3
  404af0:	d804      	bhi.n	404afc <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  404af2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404af6:	4b11      	ldr	r3, [pc, #68]	; (404b3c <system_init_flash+0x50>)
  404af8:	601a      	str	r2, [r3, #0]
  404afa:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  404afc:	4b10      	ldr	r3, [pc, #64]	; (404b40 <system_init_flash+0x54>)
  404afe:	4298      	cmp	r0, r3
  404b00:	d803      	bhi.n	404b0a <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404b02:	4a10      	ldr	r2, [pc, #64]	; (404b44 <system_init_flash+0x58>)
  404b04:	4b0d      	ldr	r3, [pc, #52]	; (404b3c <system_init_flash+0x50>)
  404b06:	601a      	str	r2, [r3, #0]
  404b08:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  404b0a:	4b0f      	ldr	r3, [pc, #60]	; (404b48 <system_init_flash+0x5c>)
  404b0c:	4298      	cmp	r0, r3
  404b0e:	d803      	bhi.n	404b18 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404b10:	4a0e      	ldr	r2, [pc, #56]	; (404b4c <system_init_flash+0x60>)
  404b12:	4b0a      	ldr	r3, [pc, #40]	; (404b3c <system_init_flash+0x50>)
  404b14:	601a      	str	r2, [r3, #0]
  404b16:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  404b18:	4b0d      	ldr	r3, [pc, #52]	; (404b50 <system_init_flash+0x64>)
  404b1a:	4298      	cmp	r0, r3
  404b1c:	d803      	bhi.n	404b26 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404b1e:	4a0d      	ldr	r2, [pc, #52]	; (404b54 <system_init_flash+0x68>)
  404b20:	4b06      	ldr	r3, [pc, #24]	; (404b3c <system_init_flash+0x50>)
  404b22:	601a      	str	r2, [r3, #0]
  404b24:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  404b26:	4b0c      	ldr	r3, [pc, #48]	; (404b58 <system_init_flash+0x6c>)
  404b28:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  404b2a:	bf94      	ite	ls
  404b2c:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  404b30:	4a0a      	ldrhi	r2, [pc, #40]	; (404b5c <system_init_flash+0x70>)
  404b32:	4b02      	ldr	r3, [pc, #8]	; (404b3c <system_init_flash+0x50>)
  404b34:	601a      	str	r2, [r3, #0]
  404b36:	4770      	bx	lr
  404b38:	01312cff 	.word	0x01312cff
  404b3c:	400e0c00 	.word	0x400e0c00
  404b40:	026259ff 	.word	0x026259ff
  404b44:	04000100 	.word	0x04000100
  404b48:	039386ff 	.word	0x039386ff
  404b4c:	04000200 	.word	0x04000200
  404b50:	04c4b3ff 	.word	0x04c4b3ff
  404b54:	04000300 	.word	0x04000300
  404b58:	05f5e0ff 	.word	0x05f5e0ff
  404b5c:	04000500 	.word	0x04000500

00404b60 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  404b60:	4b09      	ldr	r3, [pc, #36]	; (404b88 <_sbrk+0x28>)
  404b62:	681b      	ldr	r3, [r3, #0]
  404b64:	b913      	cbnz	r3, 404b6c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  404b66:	4a09      	ldr	r2, [pc, #36]	; (404b8c <_sbrk+0x2c>)
  404b68:	4b07      	ldr	r3, [pc, #28]	; (404b88 <_sbrk+0x28>)
  404b6a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  404b6c:	4b06      	ldr	r3, [pc, #24]	; (404b88 <_sbrk+0x28>)
  404b6e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  404b70:	181a      	adds	r2, r3, r0
  404b72:	4907      	ldr	r1, [pc, #28]	; (404b90 <_sbrk+0x30>)
  404b74:	4291      	cmp	r1, r2
  404b76:	db04      	blt.n	404b82 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  404b78:	4610      	mov	r0, r2
  404b7a:	4a03      	ldr	r2, [pc, #12]	; (404b88 <_sbrk+0x28>)
  404b7c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  404b7e:	4618      	mov	r0, r3
  404b80:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  404b82:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  404b86:	4770      	bx	lr
  404b88:	204009ec 	.word	0x204009ec
  404b8c:	20403868 	.word	0x20403868
  404b90:	2045fffc 	.word	0x2045fffc

00404b94 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  404b94:	f04f 30ff 	mov.w	r0, #4294967295
  404b98:	4770      	bx	lr
  404b9a:	bf00      	nop

00404b9c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  404b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  404ba0:	604b      	str	r3, [r1, #4]

	return 0;
}
  404ba2:	2000      	movs	r0, #0
  404ba4:	4770      	bx	lr
  404ba6:	bf00      	nop

00404ba8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  404ba8:	2001      	movs	r0, #1
  404baa:	4770      	bx	lr

00404bac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  404bac:	2000      	movs	r0, #0
  404bae:	4770      	bx	lr

00404bb0 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  404bb0:	b570      	push	{r4, r5, r6, lr}
  404bb2:	4614      	mov	r4, r2
	switch (u8Msg) {
  404bb4:	2906      	cmp	r1, #6
  404bb6:	d042      	beq.n	404c3e <socket_cb+0x8e>
  404bb8:	2907      	cmp	r1, #7
  404bba:	d03c      	beq.n	404c36 <socket_cb+0x86>
  404bbc:	2905      	cmp	r1, #5
  404bbe:	d15e      	bne.n	404c7e <socket_cb+0xce>
   
  /* Socket connected */
  case SOCKET_MSG_CONNECT:
  {
    uint16_t rtn;
    memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  404bc0:	4d2f      	ldr	r5, [pc, #188]	; (404c80 <socket_cb+0xd0>)
  404bc2:	f240 52b4 	movw	r2, #1460	; 0x5b4
  404bc6:	2100      	movs	r1, #0
  404bc8:	4628      	mov	r0, r5
  404bca:	4b2e      	ldr	r3, [pc, #184]	; (404c84 <socket_cb+0xd4>)
  404bcc:	4798      	blx	r3
    sprintf((char *)gau8ReceivedBuffer, "%s%s", HOST_MSG, HOST_MSG_SUFFIX);
  404bce:	4b2e      	ldr	r3, [pc, #184]	; (404c88 <socket_cb+0xd8>)
  404bd0:	4a2e      	ldr	r2, [pc, #184]	; (404c8c <socket_cb+0xdc>)
  404bd2:	492f      	ldr	r1, [pc, #188]	; (404c90 <socket_cb+0xe0>)
  404bd4:	4628      	mov	r0, r5
  404bd6:	4d2f      	ldr	r5, [pc, #188]	; (404c94 <socket_cb+0xe4>)
  404bd8:	47a8      	blx	r5
    
    tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    if (pstrConnect && pstrConnect->s8Error >= 0) {
  404bda:	b30c      	cbz	r4, 404c20 <socket_cb+0x70>
  404bdc:	f994 3001 	ldrsb.w	r3, [r4, #1]
  404be0:	2b00      	cmp	r3, #0
  404be2:	db1d      	blt.n	404c20 <socket_cb+0x70>
      printf("socket_cb: connect success!\r\n");
  404be4:	482c      	ldr	r0, [pc, #176]	; (404c98 <socket_cb+0xe8>)
  404be6:	4b2d      	ldr	r3, [pc, #180]	; (404c9c <socket_cb+0xec>)
  404be8:	4798      	blx	r3
      rtn = send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  404bea:	4c25      	ldr	r4, [pc, #148]	; (404c80 <socket_cb+0xd0>)
  404bec:	4620      	mov	r0, r4
  404bee:	4b2c      	ldr	r3, [pc, #176]	; (404ca0 <socket_cb+0xf0>)
  404bf0:	4798      	blx	r3
  404bf2:	4d2c      	ldr	r5, [pc, #176]	; (404ca4 <socket_cb+0xf4>)
  404bf4:	2300      	movs	r3, #0
  404bf6:	b282      	uxth	r2, r0
  404bf8:	4621      	mov	r1, r4
  404bfa:	f995 0000 	ldrsb.w	r0, [r5]
  404bfe:	4e2a      	ldr	r6, [pc, #168]	; (404ca8 <socket_cb+0xf8>)
  404c00:	47b0      	blx	r6
      memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  404c02:	f240 56b4 	movw	r6, #1460	; 0x5b4
  404c06:	4632      	mov	r2, r6
  404c08:	2100      	movs	r1, #0
  404c0a:	4620      	mov	r0, r4
  404c0c:	4b1d      	ldr	r3, [pc, #116]	; (404c84 <socket_cb+0xd4>)
  404c0e:	4798      	blx	r3
      recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);  
  404c10:	2300      	movs	r3, #0
  404c12:	4632      	mov	r2, r6
  404c14:	4925      	ldr	r1, [pc, #148]	; (404cac <socket_cb+0xfc>)
  404c16:	f995 0000 	ldrsb.w	r0, [r5]
  404c1a:	4c25      	ldr	r4, [pc, #148]	; (404cb0 <socket_cb+0x100>)
  404c1c:	47a0      	blx	r4
  404c1e:	bd70      	pop	{r4, r5, r6, pc}
      } else {
      printf("socket_cb: connect error!\r\n");
  404c20:	4824      	ldr	r0, [pc, #144]	; (404cb4 <socket_cb+0x104>)
  404c22:	4b1e      	ldr	r3, [pc, #120]	; (404c9c <socket_cb+0xec>)
  404c24:	4798      	blx	r3
      close(tcp_client_socket);
  404c26:	4c1f      	ldr	r4, [pc, #124]	; (404ca4 <socket_cb+0xf4>)
  404c28:	f994 0000 	ldrsb.w	r0, [r4]
  404c2c:	4b22      	ldr	r3, [pc, #136]	; (404cb8 <socket_cb+0x108>)
  404c2e:	4798      	blx	r3
      tcp_client_socket = -1;
  404c30:	23ff      	movs	r3, #255	; 0xff
  404c32:	7023      	strb	r3, [r4, #0]
  404c34:	bd70      	pop	{r4, r5, r6, pc}
  break;

	/* Message send */
	case SOCKET_MSG_SEND:
	{
		printf("socket_cb: send success!\r\n");
  404c36:	4821      	ldr	r0, [pc, #132]	; (404cbc <socket_cb+0x10c>)
  404c38:	4b18      	ldr	r3, [pc, #96]	; (404c9c <socket_cb+0xec>)
  404c3a:	4798      	blx	r3
	  //printf("TCP Server Test Complete!\r\n");
		//printf("close socket\n");
		//close(tcp_client_socket);
		//close(tcp_server_socket);
	}
	break;
  404c3c:	bd70      	pop	{r4, r5, r6, pc}
    
    uint8_t  messageAck[64];
    uint16_t messageAckSize;
    uint8_t  command;
        
		if (pstrRecv && pstrRecv->s16BufferSize > 0) {     
  404c3e:	b1a2      	cbz	r2, 404c6a <socket_cb+0xba>
  404c40:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  404c44:	2b00      	cmp	r3, #0
  404c46:	dd10      	ble.n	404c6a <socket_cb+0xba>
			printf(" ---------- \n Cnt : %d \n -----------\n", ++g_rxCnt);
  404c48:	4b1d      	ldr	r3, [pc, #116]	; (404cc0 <socket_cb+0x110>)
  404c4a:	6819      	ldr	r1, [r3, #0]
  404c4c:	3101      	adds	r1, #1
  404c4e:	6019      	str	r1, [r3, #0]
  404c50:	481c      	ldr	r0, [pc, #112]	; (404cc4 <socket_cb+0x114>)
  404c52:	4d12      	ldr	r5, [pc, #72]	; (404c9c <socket_cb+0xec>)
  404c54:	47a8      	blx	r5
			   
      // Para debug das mensagens do socket
			printf("%s \r\n", pstrRecv->pu8Buffer);   
  404c56:	6821      	ldr	r1, [r4, #0]
  404c58:	481b      	ldr	r0, [pc, #108]	; (404cc8 <socket_cb+0x118>)
  404c5a:	47a8      	blx	r5
       
      // limpa o buffer de recepcao e tx
      memset(pstrRecv->pu8Buffer, 0, pstrRecv->s16BufferSize); 
  404c5c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  404c60:	2100      	movs	r1, #0
  404c62:	6820      	ldr	r0, [r4, #0]
  404c64:	4b07      	ldr	r3, [pc, #28]	; (404c84 <socket_cb+0xd4>)
  404c66:	4798      	blx	r3
  404c68:	bd70      	pop	{r4, r5, r6, pc}
      
      // Requista novos dados
      //recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
      
 		} else {
			printf("socket_cb: recv error!\r\n");
  404c6a:	4818      	ldr	r0, [pc, #96]	; (404ccc <socket_cb+0x11c>)
  404c6c:	4b0b      	ldr	r3, [pc, #44]	; (404c9c <socket_cb+0xec>)
  404c6e:	4798      	blx	r3
			close(tcp_client_socket);
  404c70:	4c0c      	ldr	r4, [pc, #48]	; (404ca4 <socket_cb+0xf4>)
  404c72:	f994 0000 	ldrsb.w	r0, [r4]
  404c76:	4b10      	ldr	r3, [pc, #64]	; (404cb8 <socket_cb+0x108>)
  404c78:	4798      	blx	r3
			tcp_client_socket = -1;
  404c7a:	23ff      	movs	r3, #255	; 0xff
  404c7c:	7023      	strb	r3, [r4, #0]
  404c7e:	bd70      	pop	{r4, r5, r6, pc}
  404c80:	204009f0 	.word	0x204009f0
  404c84:	004051bd 	.word	0x004051bd
  404c88:	0040c810 	.word	0x0040c810
  404c8c:	0040c82c 	.word	0x0040c82c
  404c90:	0040c840 	.word	0x0040c840
  404c94:	004053b9 	.word	0x004053b9
  404c98:	0040c848 	.word	0x0040c848
  404c9c:	00405195 	.word	0x00405195
  404ca0:	00405441 	.word	0x00405441
  404ca4:	20400040 	.word	0x20400040
  404ca8:	00403961 	.word	0x00403961
  404cac:	20400fa4 	.word	0x20400fa4
  404cb0:	004039fd 	.word	0x004039fd
  404cb4:	0040c868 	.word	0x0040c868
  404cb8:	00403aa1 	.word	0x00403aa1
  404cbc:	0040c884 	.word	0x0040c884
  404cc0:	20401558 	.word	0x20401558
  404cc4:	0040c8a0 	.word	0x0040c8a0
  404cc8:	0040c8c8 	.word	0x0040c8c8
  404ccc:	0040c8d0 	.word	0x0040c8d0

00404cd0 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  404cd0:	b510      	push	{r4, lr}
  404cd2:	b082      	sub	sp, #8
	switch (u8MsgType) {
  404cd4:	282c      	cmp	r0, #44	; 0x2c
  404cd6:	d002      	beq.n	404cde <wifi_cb+0xe>
  404cd8:	2832      	cmp	r0, #50	; 0x32
  404cda:	d019      	beq.n	404d10 <wifi_cb+0x40>
  404cdc:	e024      	b.n	404d28 <wifi_cb+0x58>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  404cde:	780b      	ldrb	r3, [r1, #0]
  404ce0:	2b01      	cmp	r3, #1
  404ce2:	d105      	bne.n	404cf0 <wifi_cb+0x20>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
  404ce4:	4811      	ldr	r0, [pc, #68]	; (404d2c <wifi_cb+0x5c>)
  404ce6:	4b12      	ldr	r3, [pc, #72]	; (404d30 <wifi_cb+0x60>)
  404ce8:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  404cea:	4b12      	ldr	r3, [pc, #72]	; (404d34 <wifi_cb+0x64>)
  404cec:	4798      	blx	r3
  404cee:	e01b      	b.n	404d28 <wifi_cb+0x58>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  404cf0:	b9d3      	cbnz	r3, 404d28 <wifi_cb+0x58>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
  404cf2:	4811      	ldr	r0, [pc, #68]	; (404d38 <wifi_cb+0x68>)
  404cf4:	4b0e      	ldr	r3, [pc, #56]	; (404d30 <wifi_cb+0x60>)
  404cf6:	4798      	blx	r3
			wifi_connected = 0;
  404cf8:	2200      	movs	r2, #0
  404cfa:	4b10      	ldr	r3, [pc, #64]	; (404d3c <wifi_cb+0x6c>)
  404cfc:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  404cfe:	23ff      	movs	r3, #255	; 0xff
  404d00:	9300      	str	r3, [sp, #0]
  404d02:	4b0f      	ldr	r3, [pc, #60]	; (404d40 <wifi_cb+0x70>)
  404d04:	2202      	movs	r2, #2
  404d06:	2105      	movs	r1, #5
  404d08:	480e      	ldr	r0, [pc, #56]	; (404d44 <wifi_cb+0x74>)
  404d0a:	4c0f      	ldr	r4, [pc, #60]	; (404d48 <wifi_cb+0x78>)
  404d0c:	47a0      	blx	r4
  404d0e:	e00b      	b.n	404d28 <wifi_cb+0x58>
	break;

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1;
  404d10:	2201      	movs	r2, #1
  404d12:	4b0a      	ldr	r3, [pc, #40]	; (404d3c <wifi_cb+0x6c>)
  404d14:	701a      	strb	r2, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  404d16:	788b      	ldrb	r3, [r1, #2]
  404d18:	784a      	ldrb	r2, [r1, #1]
  404d1a:	7808      	ldrb	r0, [r1, #0]
  404d1c:	78c9      	ldrb	r1, [r1, #3]
  404d1e:	9100      	str	r1, [sp, #0]
  404d20:	4601      	mov	r1, r0
  404d22:	480a      	ldr	r0, [pc, #40]	; (404d4c <wifi_cb+0x7c>)
  404d24:	4c02      	ldr	r4, [pc, #8]	; (404d30 <wifi_cb+0x60>)
  404d26:	47a0      	blx	r4
	break;

	default:
		break;
	}
}
  404d28:	b002      	add	sp, #8
  404d2a:	bd10      	pop	{r4, pc}
  404d2c:	0040c8ec 	.word	0x0040c8ec
  404d30:	00405195 	.word	0x00405195
  404d34:	00402361 	.word	0x00402361
  404d38:	0040c924 	.word	0x0040c924
  404d3c:	2040155c 	.word	0x2040155c
  404d40:	0040c960 	.word	0x0040c960
  404d44:	0040c96c 	.word	0x0040c96c
  404d48:	00402345 	.word	0x00402345
  404d4c:	0040c974 	.word	0x0040c974

00404d50 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  404d50:	b5f0      	push	{r4, r5, r6, r7, lr}
  404d52:	b083      	sub	sp, #12
  404d54:	4605      	mov	r5, r0
  404d56:	460c      	mov	r4, r1
	uint32_t val = 0;
  404d58:	2300      	movs	r3, #0
  404d5a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404d5c:	4b29      	ldr	r3, [pc, #164]	; (404e04 <usart_serial_getchar+0xb4>)
  404d5e:	4298      	cmp	r0, r3
  404d60:	d107      	bne.n	404d72 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  404d62:	461f      	mov	r7, r3
  404d64:	4e28      	ldr	r6, [pc, #160]	; (404e08 <usart_serial_getchar+0xb8>)
  404d66:	4621      	mov	r1, r4
  404d68:	4638      	mov	r0, r7
  404d6a:	47b0      	blx	r6
  404d6c:	2800      	cmp	r0, #0
  404d6e:	d1fa      	bne.n	404d66 <usart_serial_getchar+0x16>
  404d70:	e015      	b.n	404d9e <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404d72:	4b26      	ldr	r3, [pc, #152]	; (404e0c <usart_serial_getchar+0xbc>)
  404d74:	4298      	cmp	r0, r3
  404d76:	d107      	bne.n	404d88 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  404d78:	461f      	mov	r7, r3
  404d7a:	4e23      	ldr	r6, [pc, #140]	; (404e08 <usart_serial_getchar+0xb8>)
  404d7c:	4621      	mov	r1, r4
  404d7e:	4638      	mov	r0, r7
  404d80:	47b0      	blx	r6
  404d82:	2800      	cmp	r0, #0
  404d84:	d1fa      	bne.n	404d7c <usart_serial_getchar+0x2c>
  404d86:	e015      	b.n	404db4 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  404d88:	4b21      	ldr	r3, [pc, #132]	; (404e10 <usart_serial_getchar+0xc0>)
  404d8a:	4298      	cmp	r0, r3
  404d8c:	d107      	bne.n	404d9e <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  404d8e:	461f      	mov	r7, r3
  404d90:	4e1d      	ldr	r6, [pc, #116]	; (404e08 <usart_serial_getchar+0xb8>)
  404d92:	4621      	mov	r1, r4
  404d94:	4638      	mov	r0, r7
  404d96:	47b0      	blx	r6
  404d98:	2800      	cmp	r0, #0
  404d9a:	d1fa      	bne.n	404d92 <usart_serial_getchar+0x42>
  404d9c:	e017      	b.n	404dce <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  404d9e:	4b1d      	ldr	r3, [pc, #116]	; (404e14 <usart_serial_getchar+0xc4>)
  404da0:	429d      	cmp	r5, r3
  404da2:	d107      	bne.n	404db4 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  404da4:	461f      	mov	r7, r3
  404da6:	4e18      	ldr	r6, [pc, #96]	; (404e08 <usart_serial_getchar+0xb8>)
  404da8:	4621      	mov	r1, r4
  404daa:	4638      	mov	r0, r7
  404dac:	47b0      	blx	r6
  404dae:	2800      	cmp	r0, #0
  404db0:	d1fa      	bne.n	404da8 <usart_serial_getchar+0x58>
  404db2:	e019      	b.n	404de8 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404db4:	4b18      	ldr	r3, [pc, #96]	; (404e18 <usart_serial_getchar+0xc8>)
  404db6:	429d      	cmp	r5, r3
  404db8:	d109      	bne.n	404dce <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  404dba:	461e      	mov	r6, r3
  404dbc:	4d17      	ldr	r5, [pc, #92]	; (404e1c <usart_serial_getchar+0xcc>)
  404dbe:	a901      	add	r1, sp, #4
  404dc0:	4630      	mov	r0, r6
  404dc2:	47a8      	blx	r5
  404dc4:	2800      	cmp	r0, #0
  404dc6:	d1fa      	bne.n	404dbe <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  404dc8:	9b01      	ldr	r3, [sp, #4]
  404dca:	7023      	strb	r3, [r4, #0]
  404dcc:	e018      	b.n	404e00 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  404dce:	4b14      	ldr	r3, [pc, #80]	; (404e20 <usart_serial_getchar+0xd0>)
  404dd0:	429d      	cmp	r5, r3
  404dd2:	d109      	bne.n	404de8 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  404dd4:	461e      	mov	r6, r3
  404dd6:	4d11      	ldr	r5, [pc, #68]	; (404e1c <usart_serial_getchar+0xcc>)
  404dd8:	a901      	add	r1, sp, #4
  404dda:	4630      	mov	r0, r6
  404ddc:	47a8      	blx	r5
  404dde:	2800      	cmp	r0, #0
  404de0:	d1fa      	bne.n	404dd8 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  404de2:	9b01      	ldr	r3, [sp, #4]
  404de4:	7023      	strb	r3, [r4, #0]
  404de6:	e00b      	b.n	404e00 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  404de8:	4b0e      	ldr	r3, [pc, #56]	; (404e24 <usart_serial_getchar+0xd4>)
  404dea:	429d      	cmp	r5, r3
  404dec:	d108      	bne.n	404e00 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  404dee:	461e      	mov	r6, r3
  404df0:	4d0a      	ldr	r5, [pc, #40]	; (404e1c <usart_serial_getchar+0xcc>)
  404df2:	a901      	add	r1, sp, #4
  404df4:	4630      	mov	r0, r6
  404df6:	47a8      	blx	r5
  404df8:	2800      	cmp	r0, #0
  404dfa:	d1fa      	bne.n	404df2 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  404dfc:	9b01      	ldr	r3, [sp, #4]
  404dfe:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  404e00:	b003      	add	sp, #12
  404e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404e04:	400e0800 	.word	0x400e0800
  404e08:	004047cd 	.word	0x004047cd
  404e0c:	400e0a00 	.word	0x400e0a00
  404e10:	400e1a00 	.word	0x400e1a00
  404e14:	400e1c00 	.word	0x400e1c00
  404e18:	40024000 	.word	0x40024000
  404e1c:	004048e5 	.word	0x004048e5
  404e20:	40028000 	.word	0x40028000
  404e24:	4002c000 	.word	0x4002c000

00404e28 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  404e28:	b570      	push	{r4, r5, r6, lr}
  404e2a:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  404e2c:	4b2a      	ldr	r3, [pc, #168]	; (404ed8 <usart_serial_putchar+0xb0>)
  404e2e:	4298      	cmp	r0, r3
  404e30:	d108      	bne.n	404e44 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  404e32:	461e      	mov	r6, r3
  404e34:	4d29      	ldr	r5, [pc, #164]	; (404edc <usart_serial_putchar+0xb4>)
  404e36:	4621      	mov	r1, r4
  404e38:	4630      	mov	r0, r6
  404e3a:	47a8      	blx	r5
  404e3c:	2800      	cmp	r0, #0
  404e3e:	d1fa      	bne.n	404e36 <usart_serial_putchar+0xe>
		return 1;
  404e40:	2001      	movs	r0, #1
  404e42:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  404e44:	4b26      	ldr	r3, [pc, #152]	; (404ee0 <usart_serial_putchar+0xb8>)
  404e46:	4298      	cmp	r0, r3
  404e48:	d108      	bne.n	404e5c <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  404e4a:	461e      	mov	r6, r3
  404e4c:	4d23      	ldr	r5, [pc, #140]	; (404edc <usart_serial_putchar+0xb4>)
  404e4e:	4621      	mov	r1, r4
  404e50:	4630      	mov	r0, r6
  404e52:	47a8      	blx	r5
  404e54:	2800      	cmp	r0, #0
  404e56:	d1fa      	bne.n	404e4e <usart_serial_putchar+0x26>
		return 1;
  404e58:	2001      	movs	r0, #1
  404e5a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  404e5c:	4b21      	ldr	r3, [pc, #132]	; (404ee4 <usart_serial_putchar+0xbc>)
  404e5e:	4298      	cmp	r0, r3
  404e60:	d108      	bne.n	404e74 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  404e62:	461e      	mov	r6, r3
  404e64:	4d1d      	ldr	r5, [pc, #116]	; (404edc <usart_serial_putchar+0xb4>)
  404e66:	4621      	mov	r1, r4
  404e68:	4630      	mov	r0, r6
  404e6a:	47a8      	blx	r5
  404e6c:	2800      	cmp	r0, #0
  404e6e:	d1fa      	bne.n	404e66 <usart_serial_putchar+0x3e>
		return 1;
  404e70:	2001      	movs	r0, #1
  404e72:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  404e74:	4b1c      	ldr	r3, [pc, #112]	; (404ee8 <usart_serial_putchar+0xc0>)
  404e76:	4298      	cmp	r0, r3
  404e78:	d108      	bne.n	404e8c <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  404e7a:	461e      	mov	r6, r3
  404e7c:	4d17      	ldr	r5, [pc, #92]	; (404edc <usart_serial_putchar+0xb4>)
  404e7e:	4621      	mov	r1, r4
  404e80:	4630      	mov	r0, r6
  404e82:	47a8      	blx	r5
  404e84:	2800      	cmp	r0, #0
  404e86:	d1fa      	bne.n	404e7e <usart_serial_putchar+0x56>
		return 1;
  404e88:	2001      	movs	r0, #1
  404e8a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  404e8c:	4b17      	ldr	r3, [pc, #92]	; (404eec <usart_serial_putchar+0xc4>)
  404e8e:	4298      	cmp	r0, r3
  404e90:	d108      	bne.n	404ea4 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  404e92:	461e      	mov	r6, r3
  404e94:	4d16      	ldr	r5, [pc, #88]	; (404ef0 <usart_serial_putchar+0xc8>)
  404e96:	4621      	mov	r1, r4
  404e98:	4630      	mov	r0, r6
  404e9a:	47a8      	blx	r5
  404e9c:	2800      	cmp	r0, #0
  404e9e:	d1fa      	bne.n	404e96 <usart_serial_putchar+0x6e>
		return 1;
  404ea0:	2001      	movs	r0, #1
  404ea2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  404ea4:	4b13      	ldr	r3, [pc, #76]	; (404ef4 <usart_serial_putchar+0xcc>)
  404ea6:	4298      	cmp	r0, r3
  404ea8:	d108      	bne.n	404ebc <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  404eaa:	461e      	mov	r6, r3
  404eac:	4d10      	ldr	r5, [pc, #64]	; (404ef0 <usart_serial_putchar+0xc8>)
  404eae:	4621      	mov	r1, r4
  404eb0:	4630      	mov	r0, r6
  404eb2:	47a8      	blx	r5
  404eb4:	2800      	cmp	r0, #0
  404eb6:	d1fa      	bne.n	404eae <usart_serial_putchar+0x86>
		return 1;
  404eb8:	2001      	movs	r0, #1
  404eba:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  404ebc:	4b0e      	ldr	r3, [pc, #56]	; (404ef8 <usart_serial_putchar+0xd0>)
  404ebe:	4298      	cmp	r0, r3
  404ec0:	d108      	bne.n	404ed4 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  404ec2:	461e      	mov	r6, r3
  404ec4:	4d0a      	ldr	r5, [pc, #40]	; (404ef0 <usart_serial_putchar+0xc8>)
  404ec6:	4621      	mov	r1, r4
  404ec8:	4630      	mov	r0, r6
  404eca:	47a8      	blx	r5
  404ecc:	2800      	cmp	r0, #0
  404ece:	d1fa      	bne.n	404ec6 <usart_serial_putchar+0x9e>
		return 1;
  404ed0:	2001      	movs	r0, #1
  404ed2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  404ed4:	2000      	movs	r0, #0
}
  404ed6:	bd70      	pop	{r4, r5, r6, pc}
  404ed8:	400e0800 	.word	0x400e0800
  404edc:	004047b9 	.word	0x004047b9
  404ee0:	400e0a00 	.word	0x400e0a00
  404ee4:	400e1a00 	.word	0x400e1a00
  404ee8:	400e1c00 	.word	0x400e1c00
  404eec:	40024000 	.word	0x40024000
  404ef0:	004048cd 	.word	0x004048cd
  404ef4:	40028000 	.word	0x40028000
  404ef8:	4002c000 	.word	0x4002c000

00404efc <main>:
 * Initialize system, UART console, network then test function of TCP server.
 *
 * \return program return value.
 */
int main(void)
{
  404efc:	b570      	push	{r4, r5, r6, lr}
  404efe:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
	int8_t ret;
	struct sockaddr_in addr;	
	

	/* Initialize the board. */
	sysclk_init();
  404f02:	4b5e      	ldr	r3, [pc, #376]	; (40507c <main+0x180>)
  404f04:	4798      	blx	r3
	board_init();
  404f06:	4b5e      	ldr	r3, [pc, #376]	; (405080 <main+0x184>)
  404f08:	4798      	blx	r3
  404f0a:	200e      	movs	r0, #14
  404f0c:	4e5d      	ldr	r6, [pc, #372]	; (405084 <main+0x188>)
  404f0e:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404f10:	4d5d      	ldr	r5, [pc, #372]	; (405088 <main+0x18c>)
  404f12:	4b5e      	ldr	r3, [pc, #376]	; (40508c <main+0x190>)
  404f14:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  404f16:	4a5e      	ldr	r2, [pc, #376]	; (405090 <main+0x194>)
  404f18:	4b5e      	ldr	r3, [pc, #376]	; (405094 <main+0x198>)
  404f1a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404f1c:	4a5e      	ldr	r2, [pc, #376]	; (405098 <main+0x19c>)
  404f1e:	4b5f      	ldr	r3, [pc, #380]	; (40509c <main+0x1a0>)
  404f20:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  404f22:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  404f26:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  404f28:	23c0      	movs	r3, #192	; 0xc0
  404f2a:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  404f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404f30:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  404f32:	2400      	movs	r4, #0
  404f34:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404f36:	9406      	str	r4, [sp, #24]
  404f38:	200e      	movs	r0, #14
  404f3a:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404f3c:	4a58      	ldr	r2, [pc, #352]	; (4050a0 <main+0x1a4>)
  404f3e:	a902      	add	r1, sp, #8
  404f40:	4628      	mov	r0, r5
  404f42:	4b58      	ldr	r3, [pc, #352]	; (4050a4 <main+0x1a8>)
  404f44:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  404f46:	4628      	mov	r0, r5
  404f48:	4b57      	ldr	r3, [pc, #348]	; (4050a8 <main+0x1ac>)
  404f4a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404f4c:	4628      	mov	r0, r5
  404f4e:	4b57      	ldr	r3, [pc, #348]	; (4050ac <main+0x1b0>)
  404f50:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404f52:	4e57      	ldr	r6, [pc, #348]	; (4050b0 <main+0x1b4>)
  404f54:	6833      	ldr	r3, [r6, #0]
  404f56:	4621      	mov	r1, r4
  404f58:	6898      	ldr	r0, [r3, #8]
  404f5a:	4d56      	ldr	r5, [pc, #344]	; (4050b4 <main+0x1b8>)
  404f5c:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404f5e:	6833      	ldr	r3, [r6, #0]
  404f60:	4621      	mov	r1, r4
  404f62:	6858      	ldr	r0, [r3, #4]
  404f64:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  404f66:	4854      	ldr	r0, [pc, #336]	; (4050b8 <main+0x1bc>)
  404f68:	4b54      	ldr	r3, [pc, #336]	; (4050bc <main+0x1c0>)
  404f6a:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
  404f6c:	4b54      	ldr	r3, [pc, #336]	; (4050c0 <main+0x1c4>)
  404f6e:	4798      	blx	r3

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  404f70:	2302      	movs	r3, #2
  404f72:	f8ad 3250 	strh.w	r3, [sp, #592]	; 0x250
	addr.sin_port = _htons(MAIN_SERVER_PORT);
  404f76:	f249 131f 	movw	r3, #37151	; 0x911f
  404f7a:	f8ad 3252 	strh.w	r3, [sp, #594]	; 0x252
	addr.sin_addr.s_addr = MAIN_SERVER_IP;
  404f7e:	4b51      	ldr	r3, [pc, #324]	; (4050c4 <main+0x1c8>)
  404f80:	9395      	str	r3, [sp, #596]	; 0x254

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  404f82:	9499      	str	r4, [sp, #612]	; 0x264
  404f84:	949a      	str	r4, [sp, #616]	; 0x268
  404f86:	949b      	str	r4, [sp, #620]	; 0x26c
  404f88:	949c      	str	r4, [sp, #624]	; 0x270
  404f8a:	949d      	str	r4, [sp, #628]	; 0x274

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  404f8c:	4b4e      	ldr	r3, [pc, #312]	; (4050c8 <main+0x1cc>)
  404f8e:	9398      	str	r3, [sp, #608]	; 0x260
	ret = m2m_wifi_init(&param);
  404f90:	a898      	add	r0, sp, #608	; 0x260
  404f92:	4b4e      	ldr	r3, [pc, #312]	; (4050cc <main+0x1d0>)
  404f94:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404f96:	b120      	cbz	r0, 404fa2 <main+0xa6>
  404f98:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  404f9a:	484d      	ldr	r0, [pc, #308]	; (4050d0 <main+0x1d4>)
  404f9c:	4b47      	ldr	r3, [pc, #284]	; (4050bc <main+0x1c0>)
  404f9e:	4798      	blx	r3
  404fa0:	e7fe      	b.n	404fa0 <main+0xa4>
		while (1) {
		}
	}

	/* Initialize socket module */
	socketInit();
  404fa2:	4b4c      	ldr	r3, [pc, #304]	; (4050d4 <main+0x1d8>)
  404fa4:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
  404fa6:	2100      	movs	r1, #0
  404fa8:	484b      	ldr	r0, [pc, #300]	; (4050d8 <main+0x1dc>)
  404faa:	4b4c      	ldr	r3, [pc, #304]	; (4050dc <main+0x1e0>)
  404fac:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  404fae:	23ff      	movs	r3, #255	; 0xff
  404fb0:	9300      	str	r3, [sp, #0]
  404fb2:	4b4b      	ldr	r3, [pc, #300]	; (4050e0 <main+0x1e4>)
  404fb4:	2202      	movs	r2, #2
  404fb6:	2105      	movs	r1, #5
  404fb8:	484a      	ldr	r0, [pc, #296]	; (4050e4 <main+0x1e8>)
  404fba:	4c4b      	ldr	r4, [pc, #300]	; (4050e8 <main+0x1ec>)
  404fbc:	47a0      	blx	r4
  
	
	/** SDCARD */
	irq_initialize_vectors();
	cpu_irq_enable();
  404fbe:	2201      	movs	r2, #1
  404fc0:	4b4a      	ldr	r3, [pc, #296]	; (4050ec <main+0x1f0>)
  404fc2:	701a      	strb	r2, [r3, #0]
  404fc4:	f3bf 8f5f 	dmb	sy
  404fc8:	b662      	cpsie	i
	FRESULT res;
	FATFS fs;
	FIL file_object;
	
	/* Initialize SD MMC stack */
	sd_mmc_init();
  404fca:	4b49      	ldr	r3, [pc, #292]	; (4050f0 <main+0x1f4>)
  404fcc:	4798      	blx	r3
	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  404fce:	4849      	ldr	r0, [pc, #292]	; (4050f4 <main+0x1f8>)
  404fd0:	4c3a      	ldr	r4, [pc, #232]	; (4050bc <main+0x1c0>)
  404fd2:	47a0      	blx	r4
	
	printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  404fd4:	4848      	ldr	r0, [pc, #288]	; (4050f8 <main+0x1fc>)
  404fd6:	47a0      	blx	r4
	/* Wait card present and ready */
	do {
			status = sd_mmc_test_unit_ready(0);
  404fd8:	4e48      	ldr	r6, [pc, #288]	; (4050fc <main+0x200>)
			if (CTRL_FAIL == status) {
				printf("Card install FAIL\n\r");
				printf("Please unplug and re-plug the card.\n\r");
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  404fda:	4d49      	ldr	r5, [pc, #292]	; (405100 <main+0x204>)
	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
	
	printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
	/* Wait card present and ready */
	do {
			status = sd_mmc_test_unit_ready(0);
  404fdc:	2000      	movs	r0, #0
  404fde:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
  404fe0:	2801      	cmp	r0, #1
  404fe2:	d10a      	bne.n	404ffa <main+0xfe>
				printf("Card install FAIL\n\r");
  404fe4:	4847      	ldr	r0, [pc, #284]	; (405104 <main+0x208>)
  404fe6:	4c35      	ldr	r4, [pc, #212]	; (4050bc <main+0x1c0>)
  404fe8:	47a0      	blx	r4
				printf("Please unplug and re-plug the card.\n\r");
  404fea:	4847      	ldr	r0, [pc, #284]	; (405108 <main+0x20c>)
  404fec:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  404fee:	2400      	movs	r4, #0
  404ff0:	4620      	mov	r0, r4
  404ff2:	47a8      	blx	r5
  404ff4:	2802      	cmp	r0, #2
  404ff6:	d1fb      	bne.n	404ff0 <main+0xf4>
  404ff8:	e7f0      	b.n	404fdc <main+0xe0>
				}
			}
	} while (CTRL_GOOD != status);	
  404ffa:	2800      	cmp	r0, #0
  404ffc:	d1ee      	bne.n	404fdc <main+0xe0>
	
	printf("Mount disk (f_mount)...\r\n");
  404ffe:	4843      	ldr	r0, [pc, #268]	; (40510c <main+0x210>)
  405000:	4b2e      	ldr	r3, [pc, #184]	; (4050bc <main+0x1c0>)
  405002:	4798      	blx	r3
	
	memset(&fs, 0, sizeof(FATFS));
  405004:	f44f 720c 	mov.w	r2, #560	; 0x230
  405008:	2100      	movs	r1, #0
  40500a:	a808      	add	r0, sp, #32
  40500c:	4b40      	ldr	r3, [pc, #256]	; (405110 <main+0x214>)
  40500e:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  405010:	a908      	add	r1, sp, #32
  405012:	2000      	movs	r0, #0
  405014:	4b3f      	ldr	r3, [pc, #252]	; (405114 <main+0x218>)
  405016:	4798      	blx	r3
	if (FR_INVALID_DRIVE == res) {
  405018:	280b      	cmp	r0, #11
  40501a:	d103      	bne.n	405024 <main+0x128>
		printf("[FAIL] res %d\r\n", res);
  40501c:	210b      	movs	r1, #11
  40501e:	483e      	ldr	r0, [pc, #248]	; (405118 <main+0x21c>)
  405020:	4b26      	ldr	r3, [pc, #152]	; (4050bc <main+0x1c0>)
  405022:	4798      	blx	r3
		//goto main_end_of_test;
	}
	printf("[OK]\r\n");
  405024:	483d      	ldr	r0, [pc, #244]	; (40511c <main+0x220>)
  405026:	4b25      	ldr	r3, [pc, #148]	; (4050bc <main+0x1c0>)
  405028:	4798      	blx	r3

	
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  40502a:	4d3d      	ldr	r5, [pc, #244]	; (405120 <main+0x224>)

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  40502c:	4c3d      	ldr	r4, [pc, #244]	; (405124 <main+0x228>)
				if (tcp_client_socket < 0) {
  40502e:	4e3e      	ldr	r6, [pc, #248]	; (405128 <main+0x22c>)
	printf("[OK]\r\n");

	
	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  405030:	2000      	movs	r0, #0
  405032:	47a8      	blx	r5

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  405034:	7823      	ldrb	r3, [r4, #0]
  405036:	2b01      	cmp	r3, #1
  405038:	d1fa      	bne.n	405030 <main+0x134>
				if (tcp_client_socket < 0) {
  40503a:	f996 3000 	ldrsb.w	r3, [r6]
  40503e:	2b00      	cmp	r3, #0
  405040:	daf6      	bge.n	405030 <main+0x134>
  				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  405042:	2200      	movs	r2, #0
  405044:	2101      	movs	r1, #1
  405046:	2002      	movs	r0, #2
  405048:	4b38      	ldr	r3, [pc, #224]	; (40512c <main+0x230>)
  40504a:	4798      	blx	r3
  40504c:	7030      	strb	r0, [r6, #0]
  40504e:	2800      	cmp	r0, #0
  405050:	da03      	bge.n	40505a <main+0x15e>
    				printf("main: failed to create TCP client socket error!\r\n");
  405052:	4837      	ldr	r0, [pc, #220]	; (405130 <main+0x234>)
  405054:	4b19      	ldr	r3, [pc, #100]	; (4050bc <main+0x1c0>)
  405056:	4798      	blx	r3
    				continue;
  405058:	e7ea      	b.n	405030 <main+0x134>
  				}
          
          /* Connect TCP client socket. */
          if (connect(tcp_client_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR ) {
  40505a:	2210      	movs	r2, #16
  40505c:	a994      	add	r1, sp, #592	; 0x250
  40505e:	4b35      	ldr	r3, [pc, #212]	; (405134 <main+0x238>)
  405060:	4798      	blx	r3
  405062:	b138      	cbz	r0, 405074 <main+0x178>
            printf("main: failed to connect socket error!\r\n");
  405064:	4834      	ldr	r0, [pc, #208]	; (405138 <main+0x23c>)
  405066:	4b15      	ldr	r3, [pc, #84]	; (4050bc <main+0x1c0>)
  405068:	4798      	blx	r3
            close(tcp_client_socket);
  40506a:	f996 0000 	ldrsb.w	r0, [r6]
  40506e:	4b33      	ldr	r3, [pc, #204]	; (40513c <main+0x240>)
  405070:	4798      	blx	r3
            continue;
  405072:	e7dd      	b.n	405030 <main+0x134>
          }else{
            printf("Conectado ! \n");
  405074:	4832      	ldr	r0, [pc, #200]	; (405140 <main+0x244>)
  405076:	4b11      	ldr	r3, [pc, #68]	; (4050bc <main+0x1c0>)
  405078:	4798      	blx	r3
  40507a:	e7d9      	b.n	405030 <main+0x134>
  40507c:	00403c09 	.word	0x00403c09
  405080:	00403d05 	.word	0x00403d05
  405084:	004045fd 	.word	0x004045fd
  405088:	40028000 	.word	0x40028000
  40508c:	2040165c 	.word	0x2040165c
  405090:	00404e29 	.word	0x00404e29
  405094:	20401658 	.word	0x20401658
  405098:	00404d51 	.word	0x00404d51
  40509c:	20401654 	.word	0x20401654
  4050a0:	08f0d180 	.word	0x08f0d180
  4050a4:	00404869 	.word	0x00404869
  4050a8:	004048bd 	.word	0x004048bd
  4050ac:	004048c5 	.word	0x004048c5
  4050b0:	20400470 	.word	0x20400470
  4050b4:	00405259 	.word	0x00405259
  4050b8:	0040c9ac 	.word	0x0040c9ac
  4050bc:	00405195 	.word	0x00405195
  4050c0:	004011d1 	.word	0x004011d1
  4050c4:	c300a8c0 	.word	0xc300a8c0
  4050c8:	00404cd1 	.word	0x00404cd1
  4050cc:	00401ff9 	.word	0x00401ff9
  4050d0:	0040ca0c 	.word	0x0040ca0c
  4050d4:	00403795 	.word	0x00403795
  4050d8:	00404bb1 	.word	0x00404bb1
  4050dc:	004037d9 	.word	0x004037d9
  4050e0:	0040c960 	.word	0x0040c960
  4050e4:	0040c96c 	.word	0x0040c96c
  4050e8:	00402345 	.word	0x00402345
  4050ec:	20400038 	.word	0x20400038
  4050f0:	00400345 	.word	0x00400345
  4050f4:	0040ca34 	.word	0x0040ca34
  4050f8:	0040ca64 	.word	0x0040ca64
  4050fc:	00400c29 	.word	0x00400c29
  405100:	00400371 	.word	0x00400371
  405104:	0040ca94 	.word	0x0040ca94
  405108:	0040caa8 	.word	0x0040caa8
  40510c:	0040cad0 	.word	0x0040cad0
  405110:	004051bd 	.word	0x004051bd
  405114:	00401135 	.word	0x00401135
  405118:	0040caec 	.word	0x0040caec
  40511c:	0040cafc 	.word	0x0040cafc
  405120:	004020f5 	.word	0x004020f5
  405124:	2040155c 	.word	0x2040155c
  405128:	20400040 	.word	0x20400040
  40512c:	004037ed 	.word	0x004037ed
  405130:	0040cb04 	.word	0x0040cb04
  405134:	004038cd 	.word	0x004038cd
  405138:	0040cb38 	.word	0x0040cb38
  40513c:	00403aa1 	.word	0x00403aa1
  405140:	0040cb60 	.word	0x0040cb60

00405144 <__libc_init_array>:
  405144:	b570      	push	{r4, r5, r6, lr}
  405146:	4e0f      	ldr	r6, [pc, #60]	; (405184 <__libc_init_array+0x40>)
  405148:	4d0f      	ldr	r5, [pc, #60]	; (405188 <__libc_init_array+0x44>)
  40514a:	1b76      	subs	r6, r6, r5
  40514c:	10b6      	asrs	r6, r6, #2
  40514e:	bf18      	it	ne
  405150:	2400      	movne	r4, #0
  405152:	d005      	beq.n	405160 <__libc_init_array+0x1c>
  405154:	3401      	adds	r4, #1
  405156:	f855 3b04 	ldr.w	r3, [r5], #4
  40515a:	4798      	blx	r3
  40515c:	42a6      	cmp	r6, r4
  40515e:	d1f9      	bne.n	405154 <__libc_init_array+0x10>
  405160:	4e0a      	ldr	r6, [pc, #40]	; (40518c <__libc_init_array+0x48>)
  405162:	4d0b      	ldr	r5, [pc, #44]	; (405190 <__libc_init_array+0x4c>)
  405164:	1b76      	subs	r6, r6, r5
  405166:	f007 fdd5 	bl	40cd14 <_init>
  40516a:	10b6      	asrs	r6, r6, #2
  40516c:	bf18      	it	ne
  40516e:	2400      	movne	r4, #0
  405170:	d006      	beq.n	405180 <__libc_init_array+0x3c>
  405172:	3401      	adds	r4, #1
  405174:	f855 3b04 	ldr.w	r3, [r5], #4
  405178:	4798      	blx	r3
  40517a:	42a6      	cmp	r6, r4
  40517c:	d1f9      	bne.n	405172 <__libc_init_array+0x2e>
  40517e:	bd70      	pop	{r4, r5, r6, pc}
  405180:	bd70      	pop	{r4, r5, r6, pc}
  405182:	bf00      	nop
  405184:	0040cd20 	.word	0x0040cd20
  405188:	0040cd20 	.word	0x0040cd20
  40518c:	0040cd28 	.word	0x0040cd28
  405190:	0040cd20 	.word	0x0040cd20

00405194 <iprintf>:
  405194:	b40f      	push	{r0, r1, r2, r3}
  405196:	b500      	push	{lr}
  405198:	4907      	ldr	r1, [pc, #28]	; (4051b8 <iprintf+0x24>)
  40519a:	b083      	sub	sp, #12
  40519c:	ab04      	add	r3, sp, #16
  40519e:	6808      	ldr	r0, [r1, #0]
  4051a0:	f853 2b04 	ldr.w	r2, [r3], #4
  4051a4:	6881      	ldr	r1, [r0, #8]
  4051a6:	9301      	str	r3, [sp, #4]
  4051a8:	f001 fd42 	bl	406c30 <_vfiprintf_r>
  4051ac:	b003      	add	sp, #12
  4051ae:	f85d eb04 	ldr.w	lr, [sp], #4
  4051b2:	b004      	add	sp, #16
  4051b4:	4770      	bx	lr
  4051b6:	bf00      	nop
  4051b8:	20400470 	.word	0x20400470

004051bc <memset>:
  4051bc:	b470      	push	{r4, r5, r6}
  4051be:	0784      	lsls	r4, r0, #30
  4051c0:	d046      	beq.n	405250 <memset+0x94>
  4051c2:	1e54      	subs	r4, r2, #1
  4051c4:	2a00      	cmp	r2, #0
  4051c6:	d041      	beq.n	40524c <memset+0x90>
  4051c8:	b2cd      	uxtb	r5, r1
  4051ca:	4603      	mov	r3, r0
  4051cc:	e002      	b.n	4051d4 <memset+0x18>
  4051ce:	1e62      	subs	r2, r4, #1
  4051d0:	b3e4      	cbz	r4, 40524c <memset+0x90>
  4051d2:	4614      	mov	r4, r2
  4051d4:	f803 5b01 	strb.w	r5, [r3], #1
  4051d8:	079a      	lsls	r2, r3, #30
  4051da:	d1f8      	bne.n	4051ce <memset+0x12>
  4051dc:	2c03      	cmp	r4, #3
  4051de:	d92e      	bls.n	40523e <memset+0x82>
  4051e0:	b2cd      	uxtb	r5, r1
  4051e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4051e6:	2c0f      	cmp	r4, #15
  4051e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4051ec:	d919      	bls.n	405222 <memset+0x66>
  4051ee:	f103 0210 	add.w	r2, r3, #16
  4051f2:	4626      	mov	r6, r4
  4051f4:	3e10      	subs	r6, #16
  4051f6:	2e0f      	cmp	r6, #15
  4051f8:	f842 5c10 	str.w	r5, [r2, #-16]
  4051fc:	f842 5c0c 	str.w	r5, [r2, #-12]
  405200:	f842 5c08 	str.w	r5, [r2, #-8]
  405204:	f842 5c04 	str.w	r5, [r2, #-4]
  405208:	f102 0210 	add.w	r2, r2, #16
  40520c:	d8f2      	bhi.n	4051f4 <memset+0x38>
  40520e:	f1a4 0210 	sub.w	r2, r4, #16
  405212:	f022 020f 	bic.w	r2, r2, #15
  405216:	f004 040f 	and.w	r4, r4, #15
  40521a:	3210      	adds	r2, #16
  40521c:	2c03      	cmp	r4, #3
  40521e:	4413      	add	r3, r2
  405220:	d90d      	bls.n	40523e <memset+0x82>
  405222:	461e      	mov	r6, r3
  405224:	4622      	mov	r2, r4
  405226:	3a04      	subs	r2, #4
  405228:	2a03      	cmp	r2, #3
  40522a:	f846 5b04 	str.w	r5, [r6], #4
  40522e:	d8fa      	bhi.n	405226 <memset+0x6a>
  405230:	1f22      	subs	r2, r4, #4
  405232:	f022 0203 	bic.w	r2, r2, #3
  405236:	3204      	adds	r2, #4
  405238:	4413      	add	r3, r2
  40523a:	f004 0403 	and.w	r4, r4, #3
  40523e:	b12c      	cbz	r4, 40524c <memset+0x90>
  405240:	b2c9      	uxtb	r1, r1
  405242:	441c      	add	r4, r3
  405244:	f803 1b01 	strb.w	r1, [r3], #1
  405248:	42a3      	cmp	r3, r4
  40524a:	d1fb      	bne.n	405244 <memset+0x88>
  40524c:	bc70      	pop	{r4, r5, r6}
  40524e:	4770      	bx	lr
  405250:	4614      	mov	r4, r2
  405252:	4603      	mov	r3, r0
  405254:	e7c2      	b.n	4051dc <memset+0x20>
  405256:	bf00      	nop

00405258 <setbuf>:
  405258:	2900      	cmp	r1, #0
  40525a:	bf0c      	ite	eq
  40525c:	2202      	moveq	r2, #2
  40525e:	2200      	movne	r2, #0
  405260:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405264:	f000 b800 	b.w	405268 <setvbuf>

00405268 <setvbuf>:
  405268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40526c:	4c51      	ldr	r4, [pc, #324]	; (4053b4 <setvbuf+0x14c>)
  40526e:	6825      	ldr	r5, [r4, #0]
  405270:	b083      	sub	sp, #12
  405272:	4604      	mov	r4, r0
  405274:	460f      	mov	r7, r1
  405276:	4690      	mov	r8, r2
  405278:	461e      	mov	r6, r3
  40527a:	b115      	cbz	r5, 405282 <setvbuf+0x1a>
  40527c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40527e:	2b00      	cmp	r3, #0
  405280:	d079      	beq.n	405376 <setvbuf+0x10e>
  405282:	f1b8 0f02 	cmp.w	r8, #2
  405286:	d004      	beq.n	405292 <setvbuf+0x2a>
  405288:	f1b8 0f01 	cmp.w	r8, #1
  40528c:	d87f      	bhi.n	40538e <setvbuf+0x126>
  40528e:	2e00      	cmp	r6, #0
  405290:	db7d      	blt.n	40538e <setvbuf+0x126>
  405292:	4621      	mov	r1, r4
  405294:	4628      	mov	r0, r5
  405296:	f003 fcd7 	bl	408c48 <_fflush_r>
  40529a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40529c:	b141      	cbz	r1, 4052b0 <setvbuf+0x48>
  40529e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4052a2:	4299      	cmp	r1, r3
  4052a4:	d002      	beq.n	4052ac <setvbuf+0x44>
  4052a6:	4628      	mov	r0, r5
  4052a8:	f003 fe2c 	bl	408f04 <_free_r>
  4052ac:	2300      	movs	r3, #0
  4052ae:	6323      	str	r3, [r4, #48]	; 0x30
  4052b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052b4:	2200      	movs	r2, #0
  4052b6:	61a2      	str	r2, [r4, #24]
  4052b8:	6062      	str	r2, [r4, #4]
  4052ba:	061a      	lsls	r2, r3, #24
  4052bc:	d454      	bmi.n	405368 <setvbuf+0x100>
  4052be:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4052c2:	f023 0303 	bic.w	r3, r3, #3
  4052c6:	f1b8 0f02 	cmp.w	r8, #2
  4052ca:	81a3      	strh	r3, [r4, #12]
  4052cc:	d039      	beq.n	405342 <setvbuf+0xda>
  4052ce:	ab01      	add	r3, sp, #4
  4052d0:	466a      	mov	r2, sp
  4052d2:	4621      	mov	r1, r4
  4052d4:	4628      	mov	r0, r5
  4052d6:	f004 f8b7 	bl	409448 <__swhatbuf_r>
  4052da:	89a3      	ldrh	r3, [r4, #12]
  4052dc:	4318      	orrs	r0, r3
  4052de:	81a0      	strh	r0, [r4, #12]
  4052e0:	b326      	cbz	r6, 40532c <setvbuf+0xc4>
  4052e2:	b327      	cbz	r7, 40532e <setvbuf+0xc6>
  4052e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4052e6:	2b00      	cmp	r3, #0
  4052e8:	d04d      	beq.n	405386 <setvbuf+0x11e>
  4052ea:	9b00      	ldr	r3, [sp, #0]
  4052ec:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4052f0:	6027      	str	r7, [r4, #0]
  4052f2:	429e      	cmp	r6, r3
  4052f4:	bf1c      	itt	ne
  4052f6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4052fa:	81a0      	strhne	r0, [r4, #12]
  4052fc:	f1b8 0f01 	cmp.w	r8, #1
  405300:	bf08      	it	eq
  405302:	f040 0001 	orreq.w	r0, r0, #1
  405306:	b283      	uxth	r3, r0
  405308:	bf08      	it	eq
  40530a:	81a0      	strheq	r0, [r4, #12]
  40530c:	f003 0008 	and.w	r0, r3, #8
  405310:	b280      	uxth	r0, r0
  405312:	6127      	str	r7, [r4, #16]
  405314:	6166      	str	r6, [r4, #20]
  405316:	b318      	cbz	r0, 405360 <setvbuf+0xf8>
  405318:	f013 0001 	ands.w	r0, r3, #1
  40531c:	d02f      	beq.n	40537e <setvbuf+0x116>
  40531e:	2000      	movs	r0, #0
  405320:	4276      	negs	r6, r6
  405322:	61a6      	str	r6, [r4, #24]
  405324:	60a0      	str	r0, [r4, #8]
  405326:	b003      	add	sp, #12
  405328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40532c:	9e00      	ldr	r6, [sp, #0]
  40532e:	4630      	mov	r0, r6
  405330:	f004 f8fe 	bl	409530 <malloc>
  405334:	4607      	mov	r7, r0
  405336:	b368      	cbz	r0, 405394 <setvbuf+0x12c>
  405338:	89a3      	ldrh	r3, [r4, #12]
  40533a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40533e:	81a3      	strh	r3, [r4, #12]
  405340:	e7d0      	b.n	4052e4 <setvbuf+0x7c>
  405342:	2000      	movs	r0, #0
  405344:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405348:	f043 0302 	orr.w	r3, r3, #2
  40534c:	2500      	movs	r5, #0
  40534e:	2101      	movs	r1, #1
  405350:	81a3      	strh	r3, [r4, #12]
  405352:	60a5      	str	r5, [r4, #8]
  405354:	6022      	str	r2, [r4, #0]
  405356:	6122      	str	r2, [r4, #16]
  405358:	6161      	str	r1, [r4, #20]
  40535a:	b003      	add	sp, #12
  40535c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405360:	60a0      	str	r0, [r4, #8]
  405362:	b003      	add	sp, #12
  405364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405368:	6921      	ldr	r1, [r4, #16]
  40536a:	4628      	mov	r0, r5
  40536c:	f003 fdca 	bl	408f04 <_free_r>
  405370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405374:	e7a3      	b.n	4052be <setvbuf+0x56>
  405376:	4628      	mov	r0, r5
  405378:	f003 fcfa 	bl	408d70 <__sinit>
  40537c:	e781      	b.n	405282 <setvbuf+0x1a>
  40537e:	60a6      	str	r6, [r4, #8]
  405380:	b003      	add	sp, #12
  405382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405386:	4628      	mov	r0, r5
  405388:	f003 fcf2 	bl	408d70 <__sinit>
  40538c:	e7ad      	b.n	4052ea <setvbuf+0x82>
  40538e:	f04f 30ff 	mov.w	r0, #4294967295
  405392:	e7e2      	b.n	40535a <setvbuf+0xf2>
  405394:	f8dd 9000 	ldr.w	r9, [sp]
  405398:	45b1      	cmp	r9, r6
  40539a:	d006      	beq.n	4053aa <setvbuf+0x142>
  40539c:	4648      	mov	r0, r9
  40539e:	f004 f8c7 	bl	409530 <malloc>
  4053a2:	4607      	mov	r7, r0
  4053a4:	b108      	cbz	r0, 4053aa <setvbuf+0x142>
  4053a6:	464e      	mov	r6, r9
  4053a8:	e7c6      	b.n	405338 <setvbuf+0xd0>
  4053aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4053ae:	f04f 30ff 	mov.w	r0, #4294967295
  4053b2:	e7c7      	b.n	405344 <setvbuf+0xdc>
  4053b4:	20400470 	.word	0x20400470

004053b8 <sprintf>:
  4053b8:	b40e      	push	{r1, r2, r3}
  4053ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  4053bc:	b09c      	sub	sp, #112	; 0x70
  4053be:	ab21      	add	r3, sp, #132	; 0x84
  4053c0:	490f      	ldr	r1, [pc, #60]	; (405400 <sprintf+0x48>)
  4053c2:	f853 2b04 	ldr.w	r2, [r3], #4
  4053c6:	9301      	str	r3, [sp, #4]
  4053c8:	4605      	mov	r5, r0
  4053ca:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4053ce:	6808      	ldr	r0, [r1, #0]
  4053d0:	9502      	str	r5, [sp, #8]
  4053d2:	f44f 7702 	mov.w	r7, #520	; 0x208
  4053d6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4053da:	a902      	add	r1, sp, #8
  4053dc:	9506      	str	r5, [sp, #24]
  4053de:	f8ad 7014 	strh.w	r7, [sp, #20]
  4053e2:	9404      	str	r4, [sp, #16]
  4053e4:	9407      	str	r4, [sp, #28]
  4053e6:	f8ad 6016 	strh.w	r6, [sp, #22]
  4053ea:	f000 f897 	bl	40551c <_svfprintf_r>
  4053ee:	9b02      	ldr	r3, [sp, #8]
  4053f0:	2200      	movs	r2, #0
  4053f2:	701a      	strb	r2, [r3, #0]
  4053f4:	b01c      	add	sp, #112	; 0x70
  4053f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4053fa:	b003      	add	sp, #12
  4053fc:	4770      	bx	lr
  4053fe:	bf00      	nop
  405400:	20400470 	.word	0x20400470
	...

00405440 <strlen>:
  405440:	f890 f000 	pld	[r0]
  405444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405448:	f020 0107 	bic.w	r1, r0, #7
  40544c:	f06f 0c00 	mvn.w	ip, #0
  405450:	f010 0407 	ands.w	r4, r0, #7
  405454:	f891 f020 	pld	[r1, #32]
  405458:	f040 8049 	bne.w	4054ee <strlen+0xae>
  40545c:	f04f 0400 	mov.w	r4, #0
  405460:	f06f 0007 	mvn.w	r0, #7
  405464:	e9d1 2300 	ldrd	r2, r3, [r1]
  405468:	f891 f040 	pld	[r1, #64]	; 0x40
  40546c:	f100 0008 	add.w	r0, r0, #8
  405470:	fa82 f24c 	uadd8	r2, r2, ip
  405474:	faa4 f28c 	sel	r2, r4, ip
  405478:	fa83 f34c 	uadd8	r3, r3, ip
  40547c:	faa2 f38c 	sel	r3, r2, ip
  405480:	bb4b      	cbnz	r3, 4054d6 <strlen+0x96>
  405482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405486:	fa82 f24c 	uadd8	r2, r2, ip
  40548a:	f100 0008 	add.w	r0, r0, #8
  40548e:	faa4 f28c 	sel	r2, r4, ip
  405492:	fa83 f34c 	uadd8	r3, r3, ip
  405496:	faa2 f38c 	sel	r3, r2, ip
  40549a:	b9e3      	cbnz	r3, 4054d6 <strlen+0x96>
  40549c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4054a0:	fa82 f24c 	uadd8	r2, r2, ip
  4054a4:	f100 0008 	add.w	r0, r0, #8
  4054a8:	faa4 f28c 	sel	r2, r4, ip
  4054ac:	fa83 f34c 	uadd8	r3, r3, ip
  4054b0:	faa2 f38c 	sel	r3, r2, ip
  4054b4:	b97b      	cbnz	r3, 4054d6 <strlen+0x96>
  4054b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4054ba:	f101 0120 	add.w	r1, r1, #32
  4054be:	fa82 f24c 	uadd8	r2, r2, ip
  4054c2:	f100 0008 	add.w	r0, r0, #8
  4054c6:	faa4 f28c 	sel	r2, r4, ip
  4054ca:	fa83 f34c 	uadd8	r3, r3, ip
  4054ce:	faa2 f38c 	sel	r3, r2, ip
  4054d2:	2b00      	cmp	r3, #0
  4054d4:	d0c6      	beq.n	405464 <strlen+0x24>
  4054d6:	2a00      	cmp	r2, #0
  4054d8:	bf04      	itt	eq
  4054da:	3004      	addeq	r0, #4
  4054dc:	461a      	moveq	r2, r3
  4054de:	ba12      	rev	r2, r2
  4054e0:	fab2 f282 	clz	r2, r2
  4054e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4054e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4054ec:	4770      	bx	lr
  4054ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4054f2:	f004 0503 	and.w	r5, r4, #3
  4054f6:	f1c4 0000 	rsb	r0, r4, #0
  4054fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4054fe:	f014 0f04 	tst.w	r4, #4
  405502:	f891 f040 	pld	[r1, #64]	; 0x40
  405506:	fa0c f505 	lsl.w	r5, ip, r5
  40550a:	ea62 0205 	orn	r2, r2, r5
  40550e:	bf1c      	itt	ne
  405510:	ea63 0305 	ornne	r3, r3, r5
  405514:	4662      	movne	r2, ip
  405516:	f04f 0400 	mov.w	r4, #0
  40551a:	e7a9      	b.n	405470 <strlen+0x30>

0040551c <_svfprintf_r>:
  40551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405520:	b0c1      	sub	sp, #260	; 0x104
  405522:	460c      	mov	r4, r1
  405524:	9109      	str	r1, [sp, #36]	; 0x24
  405526:	4615      	mov	r5, r2
  405528:	930e      	str	r3, [sp, #56]	; 0x38
  40552a:	900a      	str	r0, [sp, #40]	; 0x28
  40552c:	f003 ff88 	bl	409440 <_localeconv_r>
  405530:	6803      	ldr	r3, [r0, #0]
  405532:	9317      	str	r3, [sp, #92]	; 0x5c
  405534:	4618      	mov	r0, r3
  405536:	f7ff ff83 	bl	405440 <strlen>
  40553a:	89a3      	ldrh	r3, [r4, #12]
  40553c:	9016      	str	r0, [sp, #88]	; 0x58
  40553e:	061e      	lsls	r6, r3, #24
  405540:	d503      	bpl.n	40554a <_svfprintf_r+0x2e>
  405542:	6923      	ldr	r3, [r4, #16]
  405544:	2b00      	cmp	r3, #0
  405546:	f001 8119 	beq.w	40677c <_svfprintf_r+0x1260>
  40554a:	2300      	movs	r3, #0
  40554c:	461a      	mov	r2, r3
  40554e:	9312      	str	r3, [sp, #72]	; 0x48
  405550:	9325      	str	r3, [sp, #148]	; 0x94
  405552:	9324      	str	r3, [sp, #144]	; 0x90
  405554:	9319      	str	r3, [sp, #100]	; 0x64
  405556:	930b      	str	r3, [sp, #44]	; 0x2c
  405558:	f8df a464 	ldr.w	sl, [pc, #1124]	; 4059c0 <_svfprintf_r+0x4a4>
  40555c:	9214      	str	r2, [sp, #80]	; 0x50
  40555e:	ab30      	add	r3, sp, #192	; 0xc0
  405560:	9323      	str	r3, [sp, #140]	; 0x8c
  405562:	4699      	mov	r9, r3
  405564:	9215      	str	r2, [sp, #84]	; 0x54
  405566:	46a8      	mov	r8, r5
  405568:	f898 3000 	ldrb.w	r3, [r8]
  40556c:	4644      	mov	r4, r8
  40556e:	b1eb      	cbz	r3, 4055ac <_svfprintf_r+0x90>
  405570:	2b25      	cmp	r3, #37	; 0x25
  405572:	d102      	bne.n	40557a <_svfprintf_r+0x5e>
  405574:	e01a      	b.n	4055ac <_svfprintf_r+0x90>
  405576:	2b25      	cmp	r3, #37	; 0x25
  405578:	d003      	beq.n	405582 <_svfprintf_r+0x66>
  40557a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40557e:	2b00      	cmp	r3, #0
  405580:	d1f9      	bne.n	405576 <_svfprintf_r+0x5a>
  405582:	ebc8 0504 	rsb	r5, r8, r4
  405586:	b18d      	cbz	r5, 4055ac <_svfprintf_r+0x90>
  405588:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40558a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40558c:	f8c9 8000 	str.w	r8, [r9]
  405590:	3301      	adds	r3, #1
  405592:	442a      	add	r2, r5
  405594:	2b07      	cmp	r3, #7
  405596:	f8c9 5004 	str.w	r5, [r9, #4]
  40559a:	9225      	str	r2, [sp, #148]	; 0x94
  40559c:	9324      	str	r3, [sp, #144]	; 0x90
  40559e:	f300 80a6 	bgt.w	4056ee <_svfprintf_r+0x1d2>
  4055a2:	f109 0908 	add.w	r9, r9, #8
  4055a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4055a8:	442b      	add	r3, r5
  4055aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4055ac:	7823      	ldrb	r3, [r4, #0]
  4055ae:	2b00      	cmp	r3, #0
  4055b0:	f000 80a6 	beq.w	405700 <_svfprintf_r+0x1e4>
  4055b4:	2300      	movs	r3, #0
  4055b6:	461a      	mov	r2, r3
  4055b8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4055bc:	4619      	mov	r1, r3
  4055be:	930c      	str	r3, [sp, #48]	; 0x30
  4055c0:	9307      	str	r3, [sp, #28]
  4055c2:	f04f 3bff 	mov.w	fp, #4294967295
  4055c6:	7863      	ldrb	r3, [r4, #1]
  4055c8:	f104 0801 	add.w	r8, r4, #1
  4055cc:	465d      	mov	r5, fp
  4055ce:	f108 0801 	add.w	r8, r8, #1
  4055d2:	f1a3 0020 	sub.w	r0, r3, #32
  4055d6:	2858      	cmp	r0, #88	; 0x58
  4055d8:	f200 8425 	bhi.w	405e26 <_svfprintf_r+0x90a>
  4055dc:	e8df f010 	tbh	[pc, r0, lsl #1]
  4055e0:	04230388 	.word	0x04230388
  4055e4:	03900423 	.word	0x03900423
  4055e8:	04230423 	.word	0x04230423
  4055ec:	04230423 	.word	0x04230423
  4055f0:	04230423 	.word	0x04230423
  4055f4:	03a50397 	.word	0x03a50397
  4055f8:	005d0423 	.word	0x005d0423
  4055fc:	042300e2 	.word	0x042300e2
  405600:	010500fe 	.word	0x010500fe
  405604:	01050105 	.word	0x01050105
  405608:	01050105 	.word	0x01050105
  40560c:	01050105 	.word	0x01050105
  405610:	01050105 	.word	0x01050105
  405614:	04230423 	.word	0x04230423
  405618:	04230423 	.word	0x04230423
  40561c:	04230423 	.word	0x04230423
  405620:	04230423 	.word	0x04230423
  405624:	04230423 	.word	0x04230423
  405628:	02810115 	.word	0x02810115
  40562c:	02810423 	.word	0x02810423
  405630:	04230423 	.word	0x04230423
  405634:	04230423 	.word	0x04230423
  405638:	042302c6 	.word	0x042302c6
  40563c:	02cd0423 	.word	0x02cd0423
  405640:	04230423 	.word	0x04230423
  405644:	04230423 	.word	0x04230423
  405648:	02f70423 	.word	0x02f70423
  40564c:	04230423 	.word	0x04230423
  405650:	04230325 	.word	0x04230325
  405654:	04230423 	.word	0x04230423
  405658:	04230423 	.word	0x04230423
  40565c:	04230423 	.word	0x04230423
  405660:	04230423 	.word	0x04230423
  405664:	03660423 	.word	0x03660423
  405668:	02810379 	.word	0x02810379
  40566c:	02810281 	.word	0x02810281
  405670:	03790381 	.word	0x03790381
  405674:	04230423 	.word	0x04230423
  405678:	042303d1 	.word	0x042303d1
  40567c:	00a303db 	.word	0x00a303db
  405680:	03ee0064 	.word	0x03ee0064
  405684:	03f50423 	.word	0x03f50423
  405688:	03aa0423 	.word	0x03aa0423
  40568c:	04230423 	.word	0x04230423
  405690:	03bc      	.short	0x03bc
  405692:	980c      	ldr	r0, [sp, #48]	; 0x30
  405694:	930e      	str	r3, [sp, #56]	; 0x38
  405696:	4240      	negs	r0, r0
  405698:	900c      	str	r0, [sp, #48]	; 0x30
  40569a:	9b07      	ldr	r3, [sp, #28]
  40569c:	f043 0304 	orr.w	r3, r3, #4
  4056a0:	9307      	str	r3, [sp, #28]
  4056a2:	f898 3000 	ldrb.w	r3, [r8]
  4056a6:	e792      	b.n	4055ce <_svfprintf_r+0xb2>
  4056a8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4056aa:	46ab      	mov	fp, r5
  4056ac:	2100      	movs	r1, #0
  4056ae:	6804      	ldr	r4, [r0, #0]
  4056b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4056b4:	1d07      	adds	r7, r0, #4
  4056b6:	9807      	ldr	r0, [sp, #28]
  4056b8:	2330      	movs	r3, #48	; 0x30
  4056ba:	2278      	movs	r2, #120	; 0x78
  4056bc:	458b      	cmp	fp, r1
  4056be:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4056c2:	f04f 0500 	mov.w	r5, #0
  4056c6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  4056ca:	f040 0302 	orr.w	r3, r0, #2
  4056ce:	f2c0 83c7 	blt.w	405e60 <_svfprintf_r+0x944>
  4056d2:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  4056d6:	f043 0302 	orr.w	r3, r3, #2
  4056da:	9307      	str	r3, [sp, #28]
  4056dc:	ea54 0305 	orrs.w	r3, r4, r5
  4056e0:	970e      	str	r7, [sp, #56]	; 0x38
  4056e2:	f000 8393 	beq.w	405e0c <_svfprintf_r+0x8f0>
  4056e6:	460f      	mov	r7, r1
  4056e8:	9211      	str	r2, [sp, #68]	; 0x44
  4056ea:	48b3      	ldr	r0, [pc, #716]	; (4059b8 <_svfprintf_r+0x49c>)
  4056ec:	e2ce      	b.n	405c8c <_svfprintf_r+0x770>
  4056ee:	aa23      	add	r2, sp, #140	; 0x8c
  4056f0:	9909      	ldr	r1, [sp, #36]	; 0x24
  4056f2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4056f4:	f005 f882 	bl	40a7fc <__ssprint_r>
  4056f8:	b948      	cbnz	r0, 40570e <_svfprintf_r+0x1f2>
  4056fa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4056fe:	e752      	b.n	4055a6 <_svfprintf_r+0x8a>
  405700:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405702:	b123      	cbz	r3, 40570e <_svfprintf_r+0x1f2>
  405704:	980a      	ldr	r0, [sp, #40]	; 0x28
  405706:	9909      	ldr	r1, [sp, #36]	; 0x24
  405708:	aa23      	add	r2, sp, #140	; 0x8c
  40570a:	f005 f877 	bl	40a7fc <__ssprint_r>
  40570e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405710:	899b      	ldrh	r3, [r3, #12]
  405712:	f013 0f40 	tst.w	r3, #64	; 0x40
  405716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405718:	bf18      	it	ne
  40571a:	f04f 33ff 	movne.w	r3, #4294967295
  40571e:	4618      	mov	r0, r3
  405720:	b041      	add	sp, #260	; 0x104
  405722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405726:	9311      	str	r3, [sp, #68]	; 0x44
  405728:	46ab      	mov	fp, r5
  40572a:	2a00      	cmp	r2, #0
  40572c:	f041 8223 	bne.w	406b76 <_svfprintf_r+0x165a>
  405730:	9a07      	ldr	r2, [sp, #28]
  405732:	f012 0320 	ands.w	r3, r2, #32
  405736:	f000 822e 	beq.w	405b96 <_svfprintf_r+0x67a>
  40573a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40573c:	3707      	adds	r7, #7
  40573e:	f027 0307 	bic.w	r3, r7, #7
  405742:	2700      	movs	r7, #0
  405744:	f103 0108 	add.w	r1, r3, #8
  405748:	45bb      	cmp	fp, r7
  40574a:	910e      	str	r1, [sp, #56]	; 0x38
  40574c:	e9d3 4500 	ldrd	r4, r5, [r3]
  405750:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405754:	f2c0 8752 	blt.w	4065fc <_svfprintf_r+0x10e0>
  405758:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40575c:	9307      	str	r3, [sp, #28]
  40575e:	ea54 0305 	orrs.w	r3, r4, r5
  405762:	f000 8375 	beq.w	405e50 <_svfprintf_r+0x934>
  405766:	ae30      	add	r6, sp, #192	; 0xc0
  405768:	08e2      	lsrs	r2, r4, #3
  40576a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40576e:	08e9      	lsrs	r1, r5, #3
  405770:	f004 0307 	and.w	r3, r4, #7
  405774:	460d      	mov	r5, r1
  405776:	4614      	mov	r4, r2
  405778:	3330      	adds	r3, #48	; 0x30
  40577a:	ea54 0205 	orrs.w	r2, r4, r5
  40577e:	f806 3d01 	strb.w	r3, [r6, #-1]!
  405782:	d1f1      	bne.n	405768 <_svfprintf_r+0x24c>
  405784:	9a07      	ldr	r2, [sp, #28]
  405786:	07d1      	lsls	r1, r2, #31
  405788:	f140 8084 	bpl.w	405894 <_svfprintf_r+0x378>
  40578c:	2b30      	cmp	r3, #48	; 0x30
  40578e:	f000 8081 	beq.w	405894 <_svfprintf_r+0x378>
  405792:	2230      	movs	r2, #48	; 0x30
  405794:	1e73      	subs	r3, r6, #1
  405796:	f806 2c01 	strb.w	r2, [r6, #-1]
  40579a:	aa30      	add	r2, sp, #192	; 0xc0
  40579c:	1ad2      	subs	r2, r2, r3
  40579e:	920d      	str	r2, [sp, #52]	; 0x34
  4057a0:	461e      	mov	r6, r3
  4057a2:	e07a      	b.n	40589a <_svfprintf_r+0x37e>
  4057a4:	f898 3000 	ldrb.w	r3, [r8]
  4057a8:	2b2a      	cmp	r3, #42	; 0x2a
  4057aa:	f108 0401 	add.w	r4, r8, #1
  4057ae:	f001 81b1 	beq.w	406b14 <_svfprintf_r+0x15f8>
  4057b2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4057b6:	2809      	cmp	r0, #9
  4057b8:	bf98      	it	ls
  4057ba:	2500      	movls	r5, #0
  4057bc:	f201 8164 	bhi.w	406a88 <_svfprintf_r+0x156c>
  4057c0:	f814 3b01 	ldrb.w	r3, [r4], #1
  4057c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4057c8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  4057cc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4057d0:	2809      	cmp	r0, #9
  4057d2:	d9f5      	bls.n	4057c0 <_svfprintf_r+0x2a4>
  4057d4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  4057d8:	46a0      	mov	r8, r4
  4057da:	e6fa      	b.n	4055d2 <_svfprintf_r+0xb6>
  4057dc:	9b07      	ldr	r3, [sp, #28]
  4057de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4057e2:	9307      	str	r3, [sp, #28]
  4057e4:	f898 3000 	ldrb.w	r3, [r8]
  4057e8:	e6f1      	b.n	4055ce <_svfprintf_r+0xb2>
  4057ea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4057ee:	2300      	movs	r3, #0
  4057f0:	461c      	mov	r4, r3
  4057f2:	f818 3b01 	ldrb.w	r3, [r8], #1
  4057f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4057fa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4057fe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405802:	2809      	cmp	r0, #9
  405804:	d9f5      	bls.n	4057f2 <_svfprintf_r+0x2d6>
  405806:	940c      	str	r4, [sp, #48]	; 0x30
  405808:	e6e3      	b.n	4055d2 <_svfprintf_r+0xb6>
  40580a:	9311      	str	r3, [sp, #68]	; 0x44
  40580c:	46ab      	mov	fp, r5
  40580e:	2a00      	cmp	r2, #0
  405810:	f041 81c9 	bne.w	406ba6 <_svfprintf_r+0x168a>
  405814:	9b07      	ldr	r3, [sp, #28]
  405816:	f043 0310 	orr.w	r3, r3, #16
  40581a:	9307      	str	r3, [sp, #28]
  40581c:	9b07      	ldr	r3, [sp, #28]
  40581e:	0698      	lsls	r0, r3, #26
  405820:	f140 8530 	bpl.w	406284 <_svfprintf_r+0xd68>
  405824:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  405826:	3707      	adds	r7, #7
  405828:	f027 0707 	bic.w	r7, r7, #7
  40582c:	e9d7 2300 	ldrd	r2, r3, [r7]
  405830:	f107 0108 	add.w	r1, r7, #8
  405834:	910e      	str	r1, [sp, #56]	; 0x38
  405836:	4614      	mov	r4, r2
  405838:	461d      	mov	r5, r3
  40583a:	2a00      	cmp	r2, #0
  40583c:	f173 0300 	sbcs.w	r3, r3, #0
  405840:	f2c0 855b 	blt.w	4062fa <_svfprintf_r+0xdde>
  405844:	f1bb 0f00 	cmp.w	fp, #0
  405848:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40584c:	f2c0 8538 	blt.w	4062c0 <_svfprintf_r+0xda4>
  405850:	9b07      	ldr	r3, [sp, #28]
  405852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405856:	9307      	str	r3, [sp, #28]
  405858:	ea54 0305 	orrs.w	r3, r4, r5
  40585c:	f000 81db 	beq.w	405c16 <_svfprintf_r+0x6fa>
  405860:	2d00      	cmp	r5, #0
  405862:	bf08      	it	eq
  405864:	2c0a      	cmpeq	r4, #10
  405866:	f0c0 81db 	bcc.w	405c20 <_svfprintf_r+0x704>
  40586a:	ae30      	add	r6, sp, #192	; 0xc0
  40586c:	4620      	mov	r0, r4
  40586e:	4629      	mov	r1, r5
  405870:	220a      	movs	r2, #10
  405872:	2300      	movs	r3, #0
  405874:	f005 fe9e 	bl	40b5b4 <__aeabi_uldivmod>
  405878:	3230      	adds	r2, #48	; 0x30
  40587a:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40587e:	4620      	mov	r0, r4
  405880:	4629      	mov	r1, r5
  405882:	2300      	movs	r3, #0
  405884:	220a      	movs	r2, #10
  405886:	f005 fe95 	bl	40b5b4 <__aeabi_uldivmod>
  40588a:	4604      	mov	r4, r0
  40588c:	460d      	mov	r5, r1
  40588e:	ea54 0305 	orrs.w	r3, r4, r5
  405892:	d1eb      	bne.n	40586c <_svfprintf_r+0x350>
  405894:	ab30      	add	r3, sp, #192	; 0xc0
  405896:	1b9b      	subs	r3, r3, r6
  405898:	930d      	str	r3, [sp, #52]	; 0x34
  40589a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40589c:	455b      	cmp	r3, fp
  40589e:	bfb8      	it	lt
  4058a0:	465b      	movlt	r3, fp
  4058a2:	9308      	str	r3, [sp, #32]
  4058a4:	2300      	movs	r3, #0
  4058a6:	9313      	str	r3, [sp, #76]	; 0x4c
  4058a8:	b117      	cbz	r7, 4058b0 <_svfprintf_r+0x394>
  4058aa:	9b08      	ldr	r3, [sp, #32]
  4058ac:	3301      	adds	r3, #1
  4058ae:	9308      	str	r3, [sp, #32]
  4058b0:	9b07      	ldr	r3, [sp, #28]
  4058b2:	f013 0302 	ands.w	r3, r3, #2
  4058b6:	930f      	str	r3, [sp, #60]	; 0x3c
  4058b8:	d002      	beq.n	4058c0 <_svfprintf_r+0x3a4>
  4058ba:	9b08      	ldr	r3, [sp, #32]
  4058bc:	3302      	adds	r3, #2
  4058be:	9308      	str	r3, [sp, #32]
  4058c0:	9b07      	ldr	r3, [sp, #28]
  4058c2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4058c6:	9310      	str	r3, [sp, #64]	; 0x40
  4058c8:	f040 82d7 	bne.w	405e7a <_svfprintf_r+0x95e>
  4058cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4058ce:	9a08      	ldr	r2, [sp, #32]
  4058d0:	1a9d      	subs	r5, r3, r2
  4058d2:	2d00      	cmp	r5, #0
  4058d4:	f340 82d1 	ble.w	405e7a <_svfprintf_r+0x95e>
  4058d8:	2d10      	cmp	r5, #16
  4058da:	9925      	ldr	r1, [sp, #148]	; 0x94
  4058dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4058de:	4f37      	ldr	r7, [pc, #220]	; (4059bc <_svfprintf_r+0x4a0>)
  4058e0:	dd27      	ble.n	405932 <_svfprintf_r+0x416>
  4058e2:	9618      	str	r6, [sp, #96]	; 0x60
  4058e4:	4648      	mov	r0, r9
  4058e6:	2410      	movs	r4, #16
  4058e8:	46b9      	mov	r9, r7
  4058ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4058ec:	462f      	mov	r7, r5
  4058ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4058f0:	e004      	b.n	4058fc <_svfprintf_r+0x3e0>
  4058f2:	3f10      	subs	r7, #16
  4058f4:	2f10      	cmp	r7, #16
  4058f6:	f100 0008 	add.w	r0, r0, #8
  4058fa:	dd16      	ble.n	40592a <_svfprintf_r+0x40e>
  4058fc:	3201      	adds	r2, #1
  4058fe:	4b2f      	ldr	r3, [pc, #188]	; (4059bc <_svfprintf_r+0x4a0>)
  405900:	9224      	str	r2, [sp, #144]	; 0x90
  405902:	3110      	adds	r1, #16
  405904:	2a07      	cmp	r2, #7
  405906:	9125      	str	r1, [sp, #148]	; 0x94
  405908:	e880 0018 	stmia.w	r0, {r3, r4}
  40590c:	ddf1      	ble.n	4058f2 <_svfprintf_r+0x3d6>
  40590e:	aa23      	add	r2, sp, #140	; 0x8c
  405910:	4631      	mov	r1, r6
  405912:	4628      	mov	r0, r5
  405914:	f004 ff72 	bl	40a7fc <__ssprint_r>
  405918:	2800      	cmp	r0, #0
  40591a:	f47f aef8 	bne.w	40570e <_svfprintf_r+0x1f2>
  40591e:	3f10      	subs	r7, #16
  405920:	2f10      	cmp	r7, #16
  405922:	9925      	ldr	r1, [sp, #148]	; 0x94
  405924:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405926:	a830      	add	r0, sp, #192	; 0xc0
  405928:	dce8      	bgt.n	4058fc <_svfprintf_r+0x3e0>
  40592a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40592c:	463d      	mov	r5, r7
  40592e:	464f      	mov	r7, r9
  405930:	4681      	mov	r9, r0
  405932:	3201      	adds	r2, #1
  405934:	186c      	adds	r4, r5, r1
  405936:	2a07      	cmp	r2, #7
  405938:	9425      	str	r4, [sp, #148]	; 0x94
  40593a:	9224      	str	r2, [sp, #144]	; 0x90
  40593c:	f8c9 7000 	str.w	r7, [r9]
  405940:	f8c9 5004 	str.w	r5, [r9, #4]
  405944:	f300 8428 	bgt.w	406198 <_svfprintf_r+0xc7c>
  405948:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40594c:	f109 0908 	add.w	r9, r9, #8
  405950:	b177      	cbz	r7, 405970 <_svfprintf_r+0x454>
  405952:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405954:	3301      	adds	r3, #1
  405956:	3401      	adds	r4, #1
  405958:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40595c:	2201      	movs	r2, #1
  40595e:	2b07      	cmp	r3, #7
  405960:	9425      	str	r4, [sp, #148]	; 0x94
  405962:	9324      	str	r3, [sp, #144]	; 0x90
  405964:	e889 0006 	stmia.w	r9, {r1, r2}
  405968:	f300 83a0 	bgt.w	4060ac <_svfprintf_r+0xb90>
  40596c:	f109 0908 	add.w	r9, r9, #8
  405970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405972:	b16b      	cbz	r3, 405990 <_svfprintf_r+0x474>
  405974:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405976:	3301      	adds	r3, #1
  405978:	3402      	adds	r4, #2
  40597a:	a91c      	add	r1, sp, #112	; 0x70
  40597c:	2202      	movs	r2, #2
  40597e:	2b07      	cmp	r3, #7
  405980:	9425      	str	r4, [sp, #148]	; 0x94
  405982:	9324      	str	r3, [sp, #144]	; 0x90
  405984:	e889 0006 	stmia.w	r9, {r1, r2}
  405988:	f300 839c 	bgt.w	4060c4 <_svfprintf_r+0xba8>
  40598c:	f109 0908 	add.w	r9, r9, #8
  405990:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405992:	2b80      	cmp	r3, #128	; 0x80
  405994:	f000 82d5 	beq.w	405f42 <_svfprintf_r+0xa26>
  405998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40599a:	ebc3 070b 	rsb	r7, r3, fp
  40599e:	2f00      	cmp	r7, #0
  4059a0:	dd39      	ble.n	405a16 <_svfprintf_r+0x4fa>
  4059a2:	4a07      	ldr	r2, [pc, #28]	; (4059c0 <_svfprintf_r+0x4a4>)
  4059a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4059a8:	2f10      	cmp	r7, #16
  4059aa:	dd28      	ble.n	4059fe <_svfprintf_r+0x4e2>
  4059ac:	4622      	mov	r2, r4
  4059ae:	f04f 0b10 	mov.w	fp, #16
  4059b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4059b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4059b6:	e00a      	b.n	4059ce <_svfprintf_r+0x4b2>
  4059b8:	0040cbac 	.word	0x0040cbac
  4059bc:	0040cbcc 	.word	0x0040cbcc
  4059c0:	0040cb78 	.word	0x0040cb78
  4059c4:	3f10      	subs	r7, #16
  4059c6:	2f10      	cmp	r7, #16
  4059c8:	f109 0908 	add.w	r9, r9, #8
  4059cc:	dd16      	ble.n	4059fc <_svfprintf_r+0x4e0>
  4059ce:	3301      	adds	r3, #1
  4059d0:	3210      	adds	r2, #16
  4059d2:	2b07      	cmp	r3, #7
  4059d4:	9225      	str	r2, [sp, #148]	; 0x94
  4059d6:	9324      	str	r3, [sp, #144]	; 0x90
  4059d8:	e889 0c00 	stmia.w	r9, {sl, fp}
  4059dc:	ddf2      	ble.n	4059c4 <_svfprintf_r+0x4a8>
  4059de:	aa23      	add	r2, sp, #140	; 0x8c
  4059e0:	4621      	mov	r1, r4
  4059e2:	4628      	mov	r0, r5
  4059e4:	f004 ff0a 	bl	40a7fc <__ssprint_r>
  4059e8:	2800      	cmp	r0, #0
  4059ea:	f47f ae90 	bne.w	40570e <_svfprintf_r+0x1f2>
  4059ee:	3f10      	subs	r7, #16
  4059f0:	2f10      	cmp	r7, #16
  4059f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4059f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059f6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4059fa:	dce8      	bgt.n	4059ce <_svfprintf_r+0x4b2>
  4059fc:	4614      	mov	r4, r2
  4059fe:	3301      	adds	r3, #1
  405a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405a02:	9324      	str	r3, [sp, #144]	; 0x90
  405a04:	443c      	add	r4, r7
  405a06:	2b07      	cmp	r3, #7
  405a08:	9425      	str	r4, [sp, #148]	; 0x94
  405a0a:	e889 0084 	stmia.w	r9, {r2, r7}
  405a0e:	f300 8341 	bgt.w	406094 <_svfprintf_r+0xb78>
  405a12:	f109 0908 	add.w	r9, r9, #8
  405a16:	9b07      	ldr	r3, [sp, #28]
  405a18:	05da      	lsls	r2, r3, #23
  405a1a:	f100 8230 	bmi.w	405e7e <_svfprintf_r+0x962>
  405a1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405a20:	990d      	ldr	r1, [sp, #52]	; 0x34
  405a22:	f8c9 6000 	str.w	r6, [r9]
  405a26:	3301      	adds	r3, #1
  405a28:	440c      	add	r4, r1
  405a2a:	2b07      	cmp	r3, #7
  405a2c:	9425      	str	r4, [sp, #148]	; 0x94
  405a2e:	f8c9 1004 	str.w	r1, [r9, #4]
  405a32:	9324      	str	r3, [sp, #144]	; 0x90
  405a34:	f300 8318 	bgt.w	406068 <_svfprintf_r+0xb4c>
  405a38:	f109 0908 	add.w	r9, r9, #8
  405a3c:	9b07      	ldr	r3, [sp, #28]
  405a3e:	0759      	lsls	r1, r3, #29
  405a40:	d53f      	bpl.n	405ac2 <_svfprintf_r+0x5a6>
  405a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405a44:	9a08      	ldr	r2, [sp, #32]
  405a46:	1a9d      	subs	r5, r3, r2
  405a48:	2d00      	cmp	r5, #0
  405a4a:	dd3a      	ble.n	405ac2 <_svfprintf_r+0x5a6>
  405a4c:	2d10      	cmp	r5, #16
  405a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405a50:	4fbc      	ldr	r7, [pc, #752]	; (405d44 <_svfprintf_r+0x828>)
  405a52:	dd23      	ble.n	405a9c <_svfprintf_r+0x580>
  405a54:	4622      	mov	r2, r4
  405a56:	2610      	movs	r6, #16
  405a58:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405a5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405a5e:	e004      	b.n	405a6a <_svfprintf_r+0x54e>
  405a60:	3d10      	subs	r5, #16
  405a62:	2d10      	cmp	r5, #16
  405a64:	f109 0908 	add.w	r9, r9, #8
  405a68:	dd17      	ble.n	405a9a <_svfprintf_r+0x57e>
  405a6a:	3301      	adds	r3, #1
  405a6c:	49b5      	ldr	r1, [pc, #724]	; (405d44 <_svfprintf_r+0x828>)
  405a6e:	9324      	str	r3, [sp, #144]	; 0x90
  405a70:	3210      	adds	r2, #16
  405a72:	2b07      	cmp	r3, #7
  405a74:	9225      	str	r2, [sp, #148]	; 0x94
  405a76:	e889 0042 	stmia.w	r9, {r1, r6}
  405a7a:	ddf1      	ble.n	405a60 <_svfprintf_r+0x544>
  405a7c:	aa23      	add	r2, sp, #140	; 0x8c
  405a7e:	4621      	mov	r1, r4
  405a80:	4658      	mov	r0, fp
  405a82:	f004 febb 	bl	40a7fc <__ssprint_r>
  405a86:	2800      	cmp	r0, #0
  405a88:	f47f ae41 	bne.w	40570e <_svfprintf_r+0x1f2>
  405a8c:	3d10      	subs	r5, #16
  405a8e:	2d10      	cmp	r5, #16
  405a90:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405a92:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405a94:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405a98:	dce7      	bgt.n	405a6a <_svfprintf_r+0x54e>
  405a9a:	4614      	mov	r4, r2
  405a9c:	3301      	adds	r3, #1
  405a9e:	442c      	add	r4, r5
  405aa0:	2b07      	cmp	r3, #7
  405aa2:	9425      	str	r4, [sp, #148]	; 0x94
  405aa4:	9324      	str	r3, [sp, #144]	; 0x90
  405aa6:	f8c9 7000 	str.w	r7, [r9]
  405aaa:	f8c9 5004 	str.w	r5, [r9, #4]
  405aae:	dd08      	ble.n	405ac2 <_svfprintf_r+0x5a6>
  405ab0:	aa23      	add	r2, sp, #140	; 0x8c
  405ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
  405ab4:	980a      	ldr	r0, [sp, #40]	; 0x28
  405ab6:	f004 fea1 	bl	40a7fc <__ssprint_r>
  405aba:	2800      	cmp	r0, #0
  405abc:	f47f ae27 	bne.w	40570e <_svfprintf_r+0x1f2>
  405ac0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405ac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405ac6:	9908      	ldr	r1, [sp, #32]
  405ac8:	428a      	cmp	r2, r1
  405aca:	bfac      	ite	ge
  405acc:	189b      	addge	r3, r3, r2
  405ace:	185b      	addlt	r3, r3, r1
  405ad0:	930b      	str	r3, [sp, #44]	; 0x2c
  405ad2:	2c00      	cmp	r4, #0
  405ad4:	f040 82d4 	bne.w	406080 <_svfprintf_r+0xb64>
  405ad8:	2300      	movs	r3, #0
  405ada:	9324      	str	r3, [sp, #144]	; 0x90
  405adc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405ae0:	e542      	b.n	405568 <_svfprintf_r+0x4c>
  405ae2:	9311      	str	r3, [sp, #68]	; 0x44
  405ae4:	46ab      	mov	fp, r5
  405ae6:	2a00      	cmp	r2, #0
  405ae8:	f041 8059 	bne.w	406b9e <_svfprintf_r+0x1682>
  405aec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  405aee:	3707      	adds	r7, #7
  405af0:	f027 0307 	bic.w	r3, r7, #7
  405af4:	f103 0208 	add.w	r2, r3, #8
  405af8:	920e      	str	r2, [sp, #56]	; 0x38
  405afa:	681a      	ldr	r2, [r3, #0]
  405afc:	9214      	str	r2, [sp, #80]	; 0x50
  405afe:	685b      	ldr	r3, [r3, #4]
  405b00:	9315      	str	r3, [sp, #84]	; 0x54
  405b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b04:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405b06:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405b0a:	4628      	mov	r0, r5
  405b0c:	4621      	mov	r1, r4
  405b0e:	f04f 32ff 	mov.w	r2, #4294967295
  405b12:	4b8d      	ldr	r3, [pc, #564]	; (405d48 <_svfprintf_r+0x82c>)
  405b14:	f005 fd10 	bl	40b538 <__aeabi_dcmpun>
  405b18:	2800      	cmp	r0, #0
  405b1a:	f040 84c1 	bne.w	4064a0 <_svfprintf_r+0xf84>
  405b1e:	4628      	mov	r0, r5
  405b20:	4621      	mov	r1, r4
  405b22:	f04f 32ff 	mov.w	r2, #4294967295
  405b26:	4b88      	ldr	r3, [pc, #544]	; (405d48 <_svfprintf_r+0x82c>)
  405b28:	f005 fce8 	bl	40b4fc <__aeabi_dcmple>
  405b2c:	2800      	cmp	r0, #0
  405b2e:	f040 84b7 	bne.w	4064a0 <_svfprintf_r+0xf84>
  405b32:	9814      	ldr	r0, [sp, #80]	; 0x50
  405b34:	9915      	ldr	r1, [sp, #84]	; 0x54
  405b36:	2200      	movs	r2, #0
  405b38:	2300      	movs	r3, #0
  405b3a:	f005 fcd5 	bl	40b4e8 <__aeabi_dcmplt>
  405b3e:	2800      	cmp	r0, #0
  405b40:	f040 874b 	bne.w	4069da <_svfprintf_r+0x14be>
  405b44:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405b48:	4e80      	ldr	r6, [pc, #512]	; (405d4c <_svfprintf_r+0x830>)
  405b4a:	4b81      	ldr	r3, [pc, #516]	; (405d50 <_svfprintf_r+0x834>)
  405b4c:	9907      	ldr	r1, [sp, #28]
  405b4e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  405b52:	9107      	str	r1, [sp, #28]
  405b54:	9911      	ldr	r1, [sp, #68]	; 0x44
  405b56:	2203      	movs	r2, #3
  405b58:	f04f 0b00 	mov.w	fp, #0
  405b5c:	9208      	str	r2, [sp, #32]
  405b5e:	2947      	cmp	r1, #71	; 0x47
  405b60:	bfd8      	it	le
  405b62:	461e      	movle	r6, r3
  405b64:	920d      	str	r2, [sp, #52]	; 0x34
  405b66:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  405b6a:	e69d      	b.n	4058a8 <_svfprintf_r+0x38c>
  405b6c:	9b07      	ldr	r3, [sp, #28]
  405b6e:	f043 0308 	orr.w	r3, r3, #8
  405b72:	9307      	str	r3, [sp, #28]
  405b74:	f898 3000 	ldrb.w	r3, [r8]
  405b78:	e529      	b.n	4055ce <_svfprintf_r+0xb2>
  405b7a:	9311      	str	r3, [sp, #68]	; 0x44
  405b7c:	46ab      	mov	fp, r5
  405b7e:	2a00      	cmp	r2, #0
  405b80:	f041 8009 	bne.w	406b96 <_svfprintf_r+0x167a>
  405b84:	9b07      	ldr	r3, [sp, #28]
  405b86:	f043 0310 	orr.w	r3, r3, #16
  405b8a:	9307      	str	r3, [sp, #28]
  405b8c:	9a07      	ldr	r2, [sp, #28]
  405b8e:	f012 0320 	ands.w	r3, r2, #32
  405b92:	f47f add2 	bne.w	40573a <_svfprintf_r+0x21e>
  405b96:	9907      	ldr	r1, [sp, #28]
  405b98:	f011 0210 	ands.w	r2, r1, #16
  405b9c:	f000 8507 	beq.w	4065ae <_svfprintf_r+0x1092>
  405ba0:	980e      	ldr	r0, [sp, #56]	; 0x38
  405ba2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405ba6:	f1bb 0f00 	cmp.w	fp, #0
  405baa:	6804      	ldr	r4, [r0, #0]
  405bac:	f100 0704 	add.w	r7, r0, #4
  405bb0:	f04f 0500 	mov.w	r5, #0
  405bb4:	f2c0 8521 	blt.w	4065fa <_svfprintf_r+0x10de>
  405bb8:	460a      	mov	r2, r1
  405bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  405bbe:	9207      	str	r2, [sp, #28]
  405bc0:	ea54 0205 	orrs.w	r2, r4, r5
  405bc4:	970e      	str	r7, [sp, #56]	; 0x38
  405bc6:	f000 8143 	beq.w	405e50 <_svfprintf_r+0x934>
  405bca:	461f      	mov	r7, r3
  405bcc:	e5cb      	b.n	405766 <_svfprintf_r+0x24a>
  405bce:	9311      	str	r3, [sp, #68]	; 0x44
  405bd0:	46ab      	mov	fp, r5
  405bd2:	2a00      	cmp	r2, #0
  405bd4:	f040 87d7 	bne.w	406b86 <_svfprintf_r+0x166a>
  405bd8:	9b07      	ldr	r3, [sp, #28]
  405bda:	f043 0310 	orr.w	r3, r3, #16
  405bde:	9307      	str	r3, [sp, #28]
  405be0:	9a07      	ldr	r2, [sp, #28]
  405be2:	f012 0320 	ands.w	r3, r2, #32
  405be6:	f000 8332 	beq.w	40624e <_svfprintf_r+0xd32>
  405bea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  405bec:	3707      	adds	r7, #7
  405bee:	f027 0307 	bic.w	r3, r7, #7
  405bf2:	2700      	movs	r7, #0
  405bf4:	f103 0108 	add.w	r1, r3, #8
  405bf8:	45bb      	cmp	fp, r7
  405bfa:	910e      	str	r1, [sp, #56]	; 0x38
  405bfc:	e9d3 4500 	ldrd	r4, r5, [r3]
  405c00:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405c04:	f2c0 835c 	blt.w	4062c0 <_svfprintf_r+0xda4>
  405c08:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  405c0c:	9307      	str	r3, [sp, #28]
  405c0e:	ea54 0305 	orrs.w	r3, r4, r5
  405c12:	f47f ae25 	bne.w	405860 <_svfprintf_r+0x344>
  405c16:	f1bb 0f00 	cmp.w	fp, #0
  405c1a:	f000 80fe 	beq.w	405e1a <_svfprintf_r+0x8fe>
  405c1e:	2400      	movs	r4, #0
  405c20:	ae40      	add	r6, sp, #256	; 0x100
  405c22:	3430      	adds	r4, #48	; 0x30
  405c24:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405c28:	e634      	b.n	405894 <_svfprintf_r+0x378>
  405c2a:	9311      	str	r3, [sp, #68]	; 0x44
  405c2c:	46ab      	mov	fp, r5
  405c2e:	2a00      	cmp	r2, #0
  405c30:	f040 87a5 	bne.w	406b7e <_svfprintf_r+0x1662>
  405c34:	9b07      	ldr	r3, [sp, #28]
  405c36:	4847      	ldr	r0, [pc, #284]	; (405d54 <_svfprintf_r+0x838>)
  405c38:	069d      	lsls	r5, r3, #26
  405c3a:	f140 8097 	bpl.w	405d6c <_svfprintf_r+0x850>
  405c3e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  405c40:	3707      	adds	r7, #7
  405c42:	f027 0307 	bic.w	r3, r7, #7
  405c46:	e9d3 4500 	ldrd	r4, r5, [r3]
  405c4a:	f103 0208 	add.w	r2, r3, #8
  405c4e:	920e      	str	r2, [sp, #56]	; 0x38
  405c50:	9a07      	ldr	r2, [sp, #28]
  405c52:	f012 0701 	ands.w	r7, r2, #1
  405c56:	f000 8241 	beq.w	4060dc <_svfprintf_r+0xbc0>
  405c5a:	ea54 0305 	orrs.w	r3, r4, r5
  405c5e:	f000 84f5 	beq.w	40664c <_svfprintf_r+0x1130>
  405c62:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  405c66:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  405c6a:	2700      	movs	r7, #0
  405c6c:	9a07      	ldr	r2, [sp, #28]
  405c6e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405c72:	2330      	movs	r3, #48	; 0x30
  405c74:	45bb      	cmp	fp, r7
  405c76:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  405c7a:	f042 0302 	orr.w	r3, r2, #2
  405c7e:	f2c0 86a9 	blt.w	4069d4 <_svfprintf_r+0x14b8>
  405c82:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  405c86:	f043 0302 	orr.w	r3, r3, #2
  405c8a:	9307      	str	r3, [sp, #28]
  405c8c:	ae30      	add	r6, sp, #192	; 0xc0
  405c8e:	0923      	lsrs	r3, r4, #4
  405c90:	f004 010f 	and.w	r1, r4, #15
  405c94:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405c98:	092a      	lsrs	r2, r5, #4
  405c9a:	461c      	mov	r4, r3
  405c9c:	4615      	mov	r5, r2
  405c9e:	5c43      	ldrb	r3, [r0, r1]
  405ca0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  405ca4:	ea54 0305 	orrs.w	r3, r4, r5
  405ca8:	d1f1      	bne.n	405c8e <_svfprintf_r+0x772>
  405caa:	e5f3      	b.n	405894 <_svfprintf_r+0x378>
  405cac:	990e      	ldr	r1, [sp, #56]	; 0x38
  405cae:	9311      	str	r3, [sp, #68]	; 0x44
  405cb0:	680a      	ldr	r2, [r1, #0]
  405cb2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  405cb6:	2300      	movs	r3, #0
  405cb8:	460a      	mov	r2, r1
  405cba:	461f      	mov	r7, r3
  405cbc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405cc0:	3204      	adds	r2, #4
  405cc2:	2301      	movs	r3, #1
  405cc4:	9308      	str	r3, [sp, #32]
  405cc6:	46bb      	mov	fp, r7
  405cc8:	9713      	str	r7, [sp, #76]	; 0x4c
  405cca:	920e      	str	r2, [sp, #56]	; 0x38
  405ccc:	930d      	str	r3, [sp, #52]	; 0x34
  405cce:	ae26      	add	r6, sp, #152	; 0x98
  405cd0:	e5ee      	b.n	4058b0 <_svfprintf_r+0x394>
  405cd2:	9311      	str	r3, [sp, #68]	; 0x44
  405cd4:	46ab      	mov	fp, r5
  405cd6:	2a00      	cmp	r2, #0
  405cd8:	f43f ada0 	beq.w	40581c <_svfprintf_r+0x300>
  405cdc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405ce0:	e59c      	b.n	40581c <_svfprintf_r+0x300>
  405ce2:	9b07      	ldr	r3, [sp, #28]
  405ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ce8:	9307      	str	r3, [sp, #28]
  405cea:	f898 3000 	ldrb.w	r3, [r8]
  405cee:	e46e      	b.n	4055ce <_svfprintf_r+0xb2>
  405cf0:	f898 3000 	ldrb.w	r3, [r8]
  405cf4:	2900      	cmp	r1, #0
  405cf6:	f47f ac6a 	bne.w	4055ce <_svfprintf_r+0xb2>
  405cfa:	2201      	movs	r2, #1
  405cfc:	2120      	movs	r1, #32
  405cfe:	e466      	b.n	4055ce <_svfprintf_r+0xb2>
  405d00:	9b07      	ldr	r3, [sp, #28]
  405d02:	f043 0301 	orr.w	r3, r3, #1
  405d06:	9307      	str	r3, [sp, #28]
  405d08:	f898 3000 	ldrb.w	r3, [r8]
  405d0c:	e45f      	b.n	4055ce <_svfprintf_r+0xb2>
  405d0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  405d10:	6823      	ldr	r3, [r4, #0]
  405d12:	930c      	str	r3, [sp, #48]	; 0x30
  405d14:	4618      	mov	r0, r3
  405d16:	2800      	cmp	r0, #0
  405d18:	4623      	mov	r3, r4
  405d1a:	f103 0304 	add.w	r3, r3, #4
  405d1e:	f6ff acb8 	blt.w	405692 <_svfprintf_r+0x176>
  405d22:	930e      	str	r3, [sp, #56]	; 0x38
  405d24:	f898 3000 	ldrb.w	r3, [r8]
  405d28:	e451      	b.n	4055ce <_svfprintf_r+0xb2>
  405d2a:	f898 3000 	ldrb.w	r3, [r8]
  405d2e:	2201      	movs	r2, #1
  405d30:	212b      	movs	r1, #43	; 0x2b
  405d32:	e44c      	b.n	4055ce <_svfprintf_r+0xb2>
  405d34:	9311      	str	r3, [sp, #68]	; 0x44
  405d36:	46ab      	mov	fp, r5
  405d38:	2a00      	cmp	r2, #0
  405d3a:	f43f af51 	beq.w	405be0 <_svfprintf_r+0x6c4>
  405d3e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405d42:	e74d      	b.n	405be0 <_svfprintf_r+0x6c4>
  405d44:	0040cbcc 	.word	0x0040cbcc
  405d48:	7fefffff 	.word	0x7fefffff
  405d4c:	0040cb8c 	.word	0x0040cb8c
  405d50:	0040cb88 	.word	0x0040cb88
  405d54:	0040cb98 	.word	0x0040cb98
  405d58:	9311      	str	r3, [sp, #68]	; 0x44
  405d5a:	46ab      	mov	fp, r5
  405d5c:	2a00      	cmp	r2, #0
  405d5e:	f040 8703 	bne.w	406b68 <_svfprintf_r+0x164c>
  405d62:	9b07      	ldr	r3, [sp, #28]
  405d64:	4899      	ldr	r0, [pc, #612]	; (405fcc <_svfprintf_r+0xab0>)
  405d66:	069d      	lsls	r5, r3, #26
  405d68:	f53f af69 	bmi.w	405c3e <_svfprintf_r+0x722>
  405d6c:	9b07      	ldr	r3, [sp, #28]
  405d6e:	06dc      	lsls	r4, r3, #27
  405d70:	f140 845e 	bpl.w	406630 <_svfprintf_r+0x1114>
  405d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405d76:	4613      	mov	r3, r2
  405d78:	3304      	adds	r3, #4
  405d7a:	6814      	ldr	r4, [r2, #0]
  405d7c:	930e      	str	r3, [sp, #56]	; 0x38
  405d7e:	2500      	movs	r5, #0
  405d80:	e766      	b.n	405c50 <_svfprintf_r+0x734>
  405d82:	f898 3000 	ldrb.w	r3, [r8]
  405d86:	2b6c      	cmp	r3, #108	; 0x6c
  405d88:	f000 84e1 	beq.w	40674e <_svfprintf_r+0x1232>
  405d8c:	9807      	ldr	r0, [sp, #28]
  405d8e:	f040 0010 	orr.w	r0, r0, #16
  405d92:	9007      	str	r0, [sp, #28]
  405d94:	e41b      	b.n	4055ce <_svfprintf_r+0xb2>
  405d96:	2a00      	cmp	r2, #0
  405d98:	f040 86db 	bne.w	406b52 <_svfprintf_r+0x1636>
  405d9c:	9b07      	ldr	r3, [sp, #28]
  405d9e:	069b      	lsls	r3, r3, #26
  405da0:	f140 842f 	bpl.w	406602 <_svfprintf_r+0x10e6>
  405da4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405da6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405da8:	6813      	ldr	r3, [r2, #0]
  405daa:	17cd      	asrs	r5, r1, #31
  405dac:	4608      	mov	r0, r1
  405dae:	3204      	adds	r2, #4
  405db0:	4629      	mov	r1, r5
  405db2:	920e      	str	r2, [sp, #56]	; 0x38
  405db4:	e9c3 0100 	strd	r0, r1, [r3]
  405db8:	f7ff bbd6 	b.w	405568 <_svfprintf_r+0x4c>
  405dbc:	9b07      	ldr	r3, [sp, #28]
  405dbe:	f043 0320 	orr.w	r3, r3, #32
  405dc2:	9307      	str	r3, [sp, #28]
  405dc4:	f898 3000 	ldrb.w	r3, [r8]
  405dc8:	e401      	b.n	4055ce <_svfprintf_r+0xb2>
  405dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405dcc:	9311      	str	r3, [sp, #68]	; 0x44
  405dce:	6816      	ldr	r6, [r2, #0]
  405dd0:	2400      	movs	r4, #0
  405dd2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  405dd6:	1d17      	adds	r7, r2, #4
  405dd8:	2e00      	cmp	r6, #0
  405dda:	f000 85bd 	beq.w	406958 <_svfprintf_r+0x143c>
  405dde:	2d00      	cmp	r5, #0
  405de0:	f2c0 850f 	blt.w	406802 <_svfprintf_r+0x12e6>
  405de4:	462a      	mov	r2, r5
  405de6:	4621      	mov	r1, r4
  405de8:	4630      	mov	r0, r6
  405dea:	f003 fe61 	bl	409ab0 <memchr>
  405dee:	2800      	cmp	r0, #0
  405df0:	f000 8604 	beq.w	4069fc <_svfprintf_r+0x14e0>
  405df4:	1b83      	subs	r3, r0, r6
  405df6:	930d      	str	r3, [sp, #52]	; 0x34
  405df8:	46a3      	mov	fp, r4
  405dfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405dfe:	970e      	str	r7, [sp, #56]	; 0x38
  405e00:	9308      	str	r3, [sp, #32]
  405e02:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  405e06:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405e0a:	e54d      	b.n	4058a8 <_svfprintf_r+0x38c>
  405e0c:	486f      	ldr	r0, [pc, #444]	; (405fcc <_svfprintf_r+0xab0>)
  405e0e:	9211      	str	r2, [sp, #68]	; 0x44
  405e10:	f1bb 0f00 	cmp.w	fp, #0
  405e14:	f040 8173 	bne.w	4060fe <_svfprintf_r+0xbe2>
  405e18:	465f      	mov	r7, fp
  405e1a:	f04f 0b00 	mov.w	fp, #0
  405e1e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  405e22:	ae30      	add	r6, sp, #192	; 0xc0
  405e24:	e539      	b.n	40589a <_svfprintf_r+0x37e>
  405e26:	9311      	str	r3, [sp, #68]	; 0x44
  405e28:	2a00      	cmp	r2, #0
  405e2a:	f040 86b0 	bne.w	406b8e <_svfprintf_r+0x1672>
  405e2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e30:	2a00      	cmp	r2, #0
  405e32:	f43f ac65 	beq.w	405700 <_svfprintf_r+0x1e4>
  405e36:	2300      	movs	r3, #0
  405e38:	2101      	movs	r1, #1
  405e3a:	461f      	mov	r7, r3
  405e3c:	9108      	str	r1, [sp, #32]
  405e3e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  405e42:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405e46:	469b      	mov	fp, r3
  405e48:	9313      	str	r3, [sp, #76]	; 0x4c
  405e4a:	910d      	str	r1, [sp, #52]	; 0x34
  405e4c:	ae26      	add	r6, sp, #152	; 0x98
  405e4e:	e52f      	b.n	4058b0 <_svfprintf_r+0x394>
  405e50:	f1bb 0f00 	cmp.w	fp, #0
  405e54:	f000 85dd 	beq.w	406a12 <_svfprintf_r+0x14f6>
  405e58:	2700      	movs	r7, #0
  405e5a:	2400      	movs	r4, #0
  405e5c:	2500      	movs	r5, #0
  405e5e:	e482      	b.n	405766 <_svfprintf_r+0x24a>
  405e60:	485a      	ldr	r0, [pc, #360]	; (405fcc <_svfprintf_r+0xab0>)
  405e62:	9307      	str	r3, [sp, #28]
  405e64:	9211      	str	r2, [sp, #68]	; 0x44
  405e66:	ea54 0305 	orrs.w	r3, r4, r5
  405e6a:	970e      	str	r7, [sp, #56]	; 0x38
  405e6c:	f04f 0700 	mov.w	r7, #0
  405e70:	f47f af0c 	bne.w	405c8c <_svfprintf_r+0x770>
  405e74:	2400      	movs	r4, #0
  405e76:	2500      	movs	r5, #0
  405e78:	e708      	b.n	405c8c <_svfprintf_r+0x770>
  405e7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405e7c:	e568      	b.n	405950 <_svfprintf_r+0x434>
  405e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405e80:	2b65      	cmp	r3, #101	; 0x65
  405e82:	f340 80a9 	ble.w	405fd8 <_svfprintf_r+0xabc>
  405e86:	9814      	ldr	r0, [sp, #80]	; 0x50
  405e88:	9915      	ldr	r1, [sp, #84]	; 0x54
  405e8a:	2200      	movs	r2, #0
  405e8c:	2300      	movs	r3, #0
  405e8e:	f005 fb21 	bl	40b4d4 <__aeabi_dcmpeq>
  405e92:	2800      	cmp	r0, #0
  405e94:	f000 8135 	beq.w	406102 <_svfprintf_r+0xbe6>
  405e98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405e9a:	4a4d      	ldr	r2, [pc, #308]	; (405fd0 <_svfprintf_r+0xab4>)
  405e9c:	f8c9 2000 	str.w	r2, [r9]
  405ea0:	3301      	adds	r3, #1
  405ea2:	3401      	adds	r4, #1
  405ea4:	2201      	movs	r2, #1
  405ea6:	2b07      	cmp	r3, #7
  405ea8:	9425      	str	r4, [sp, #148]	; 0x94
  405eaa:	9324      	str	r3, [sp, #144]	; 0x90
  405eac:	f8c9 2004 	str.w	r2, [r9, #4]
  405eb0:	f300 83e6 	bgt.w	406680 <_svfprintf_r+0x1164>
  405eb4:	f109 0908 	add.w	r9, r9, #8
  405eb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405eba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405ebc:	4293      	cmp	r3, r2
  405ebe:	db03      	blt.n	405ec8 <_svfprintf_r+0x9ac>
  405ec0:	9b07      	ldr	r3, [sp, #28]
  405ec2:	07db      	lsls	r3, r3, #31
  405ec4:	f57f adba 	bpl.w	405a3c <_svfprintf_r+0x520>
  405ec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405eca:	9916      	ldr	r1, [sp, #88]	; 0x58
  405ecc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  405ece:	f8c9 2000 	str.w	r2, [r9]
  405ed2:	3301      	adds	r3, #1
  405ed4:	440c      	add	r4, r1
  405ed6:	2b07      	cmp	r3, #7
  405ed8:	9425      	str	r4, [sp, #148]	; 0x94
  405eda:	f8c9 1004 	str.w	r1, [r9, #4]
  405ede:	9324      	str	r3, [sp, #144]	; 0x90
  405ee0:	f300 843f 	bgt.w	406762 <_svfprintf_r+0x1246>
  405ee4:	f109 0908 	add.w	r9, r9, #8
  405ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405eea:	1e5d      	subs	r5, r3, #1
  405eec:	2d00      	cmp	r5, #0
  405eee:	f77f ada5 	ble.w	405a3c <_svfprintf_r+0x520>
  405ef2:	4a38      	ldr	r2, [pc, #224]	; (405fd4 <_svfprintf_r+0xab8>)
  405ef4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ef6:	920f      	str	r2, [sp, #60]	; 0x3c
  405ef8:	2d10      	cmp	r5, #16
  405efa:	f340 81e6 	ble.w	4062ca <_svfprintf_r+0xdae>
  405efe:	2610      	movs	r6, #16
  405f00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405f02:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  405f06:	e005      	b.n	405f14 <_svfprintf_r+0x9f8>
  405f08:	f109 0908 	add.w	r9, r9, #8
  405f0c:	3d10      	subs	r5, #16
  405f0e:	2d10      	cmp	r5, #16
  405f10:	f340 81db 	ble.w	4062ca <_svfprintf_r+0xdae>
  405f14:	3301      	adds	r3, #1
  405f16:	3410      	adds	r4, #16
  405f18:	2b07      	cmp	r3, #7
  405f1a:	9425      	str	r4, [sp, #148]	; 0x94
  405f1c:	9324      	str	r3, [sp, #144]	; 0x90
  405f1e:	f8c9 a000 	str.w	sl, [r9]
  405f22:	f8c9 6004 	str.w	r6, [r9, #4]
  405f26:	ddef      	ble.n	405f08 <_svfprintf_r+0x9ec>
  405f28:	aa23      	add	r2, sp, #140	; 0x8c
  405f2a:	4659      	mov	r1, fp
  405f2c:	4638      	mov	r0, r7
  405f2e:	f004 fc65 	bl	40a7fc <__ssprint_r>
  405f32:	2800      	cmp	r0, #0
  405f34:	f47f abeb 	bne.w	40570e <_svfprintf_r+0x1f2>
  405f38:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405f3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f3c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405f40:	e7e4      	b.n	405f0c <_svfprintf_r+0x9f0>
  405f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f44:	9a08      	ldr	r2, [sp, #32]
  405f46:	1a9f      	subs	r7, r3, r2
  405f48:	2f00      	cmp	r7, #0
  405f4a:	f77f ad25 	ble.w	405998 <_svfprintf_r+0x47c>
  405f4e:	4a21      	ldr	r2, [pc, #132]	; (405fd4 <_svfprintf_r+0xab8>)
  405f50:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f52:	920f      	str	r2, [sp, #60]	; 0x3c
  405f54:	2f10      	cmp	r7, #16
  405f56:	dd2b      	ble.n	405fb0 <_svfprintf_r+0xa94>
  405f58:	464a      	mov	r2, r9
  405f5a:	4621      	mov	r1, r4
  405f5c:	46b9      	mov	r9, r7
  405f5e:	2510      	movs	r5, #16
  405f60:	4637      	mov	r7, r6
  405f62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405f64:	9e09      	ldr	r6, [sp, #36]	; 0x24
  405f66:	e006      	b.n	405f76 <_svfprintf_r+0xa5a>
  405f68:	f1a9 0910 	sub.w	r9, r9, #16
  405f6c:	f1b9 0f10 	cmp.w	r9, #16
  405f70:	f102 0208 	add.w	r2, r2, #8
  405f74:	dd18      	ble.n	405fa8 <_svfprintf_r+0xa8c>
  405f76:	3301      	adds	r3, #1
  405f78:	3110      	adds	r1, #16
  405f7a:	2b07      	cmp	r3, #7
  405f7c:	9125      	str	r1, [sp, #148]	; 0x94
  405f7e:	9324      	str	r3, [sp, #144]	; 0x90
  405f80:	f8c2 a000 	str.w	sl, [r2]
  405f84:	6055      	str	r5, [r2, #4]
  405f86:	ddef      	ble.n	405f68 <_svfprintf_r+0xa4c>
  405f88:	aa23      	add	r2, sp, #140	; 0x8c
  405f8a:	4631      	mov	r1, r6
  405f8c:	4620      	mov	r0, r4
  405f8e:	f004 fc35 	bl	40a7fc <__ssprint_r>
  405f92:	2800      	cmp	r0, #0
  405f94:	f47f abbb 	bne.w	40570e <_svfprintf_r+0x1f2>
  405f98:	f1a9 0910 	sub.w	r9, r9, #16
  405f9c:	f1b9 0f10 	cmp.w	r9, #16
  405fa0:	9925      	ldr	r1, [sp, #148]	; 0x94
  405fa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fa4:	aa30      	add	r2, sp, #192	; 0xc0
  405fa6:	dce6      	bgt.n	405f76 <_svfprintf_r+0xa5a>
  405fa8:	463e      	mov	r6, r7
  405faa:	460c      	mov	r4, r1
  405fac:	464f      	mov	r7, r9
  405fae:	4691      	mov	r9, r2
  405fb0:	3301      	adds	r3, #1
  405fb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405fb4:	9324      	str	r3, [sp, #144]	; 0x90
  405fb6:	443c      	add	r4, r7
  405fb8:	2b07      	cmp	r3, #7
  405fba:	9425      	str	r4, [sp, #148]	; 0x94
  405fbc:	e889 0084 	stmia.w	r9, {r2, r7}
  405fc0:	f300 8245 	bgt.w	40644e <_svfprintf_r+0xf32>
  405fc4:	f109 0908 	add.w	r9, r9, #8
  405fc8:	e4e6      	b.n	405998 <_svfprintf_r+0x47c>
  405fca:	bf00      	nop
  405fcc:	0040cbac 	.word	0x0040cbac
  405fd0:	0040cbc8 	.word	0x0040cbc8
  405fd4:	0040cb78 	.word	0x0040cb78
  405fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405fda:	9d24      	ldr	r5, [sp, #144]	; 0x90
  405fdc:	2b01      	cmp	r3, #1
  405fde:	f340 8208 	ble.w	4063f2 <_svfprintf_r+0xed6>
  405fe2:	3501      	adds	r5, #1
  405fe4:	3401      	adds	r4, #1
  405fe6:	2301      	movs	r3, #1
  405fe8:	2d07      	cmp	r5, #7
  405fea:	9425      	str	r4, [sp, #148]	; 0x94
  405fec:	9524      	str	r5, [sp, #144]	; 0x90
  405fee:	f8c9 6000 	str.w	r6, [r9]
  405ff2:	f8c9 3004 	str.w	r3, [r9, #4]
  405ff6:	f300 820d 	bgt.w	406414 <_svfprintf_r+0xef8>
  405ffa:	f109 0908 	add.w	r9, r9, #8
  405ffe:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406002:	f8c9 3000 	str.w	r3, [r9]
  406006:	3501      	adds	r5, #1
  406008:	4414      	add	r4, r2
  40600a:	2d07      	cmp	r5, #7
  40600c:	9425      	str	r4, [sp, #148]	; 0x94
  40600e:	9524      	str	r5, [sp, #144]	; 0x90
  406010:	f8c9 2004 	str.w	r2, [r9, #4]
  406014:	f300 820e 	bgt.w	406434 <_svfprintf_r+0xf18>
  406018:	f109 0908 	add.w	r9, r9, #8
  40601c:	2300      	movs	r3, #0
  40601e:	9814      	ldr	r0, [sp, #80]	; 0x50
  406020:	9915      	ldr	r1, [sp, #84]	; 0x54
  406022:	2200      	movs	r2, #0
  406024:	f005 fa56 	bl	40b4d4 <__aeabi_dcmpeq>
  406028:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40602a:	2800      	cmp	r0, #0
  40602c:	f040 80c3 	bne.w	4061b6 <_svfprintf_r+0xc9a>
  406030:	3b01      	subs	r3, #1
  406032:	3501      	adds	r5, #1
  406034:	3601      	adds	r6, #1
  406036:	441c      	add	r4, r3
  406038:	2d07      	cmp	r5, #7
  40603a:	9524      	str	r5, [sp, #144]	; 0x90
  40603c:	9425      	str	r4, [sp, #148]	; 0x94
  40603e:	f8c9 6000 	str.w	r6, [r9]
  406042:	f8c9 3004 	str.w	r3, [r9, #4]
  406046:	f300 80f5 	bgt.w	406234 <_svfprintf_r+0xd18>
  40604a:	f109 0908 	add.w	r9, r9, #8
  40604e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406050:	f8c9 2004 	str.w	r2, [r9, #4]
  406054:	3501      	adds	r5, #1
  406056:	4414      	add	r4, r2
  406058:	ab1f      	add	r3, sp, #124	; 0x7c
  40605a:	2d07      	cmp	r5, #7
  40605c:	9425      	str	r4, [sp, #148]	; 0x94
  40605e:	9524      	str	r5, [sp, #144]	; 0x90
  406060:	f8c9 3000 	str.w	r3, [r9]
  406064:	f77f ace8 	ble.w	405a38 <_svfprintf_r+0x51c>
  406068:	aa23      	add	r2, sp, #140	; 0x8c
  40606a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40606c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40606e:	f004 fbc5 	bl	40a7fc <__ssprint_r>
  406072:	2800      	cmp	r0, #0
  406074:	f47f ab4b 	bne.w	40570e <_svfprintf_r+0x1f2>
  406078:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40607a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40607e:	e4dd      	b.n	405a3c <_svfprintf_r+0x520>
  406080:	aa23      	add	r2, sp, #140	; 0x8c
  406082:	9909      	ldr	r1, [sp, #36]	; 0x24
  406084:	980a      	ldr	r0, [sp, #40]	; 0x28
  406086:	f004 fbb9 	bl	40a7fc <__ssprint_r>
  40608a:	2800      	cmp	r0, #0
  40608c:	f43f ad24 	beq.w	405ad8 <_svfprintf_r+0x5bc>
  406090:	f7ff bb3d 	b.w	40570e <_svfprintf_r+0x1f2>
  406094:	aa23      	add	r2, sp, #140	; 0x8c
  406096:	9909      	ldr	r1, [sp, #36]	; 0x24
  406098:	980a      	ldr	r0, [sp, #40]	; 0x28
  40609a:	f004 fbaf 	bl	40a7fc <__ssprint_r>
  40609e:	2800      	cmp	r0, #0
  4060a0:	f47f ab35 	bne.w	40570e <_svfprintf_r+0x1f2>
  4060a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4060a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4060aa:	e4b4      	b.n	405a16 <_svfprintf_r+0x4fa>
  4060ac:	aa23      	add	r2, sp, #140	; 0x8c
  4060ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4060b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4060b2:	f004 fba3 	bl	40a7fc <__ssprint_r>
  4060b6:	2800      	cmp	r0, #0
  4060b8:	f47f ab29 	bne.w	40570e <_svfprintf_r+0x1f2>
  4060bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4060be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4060c2:	e455      	b.n	405970 <_svfprintf_r+0x454>
  4060c4:	aa23      	add	r2, sp, #140	; 0x8c
  4060c6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4060c8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4060ca:	f004 fb97 	bl	40a7fc <__ssprint_r>
  4060ce:	2800      	cmp	r0, #0
  4060d0:	f47f ab1d 	bne.w	40570e <_svfprintf_r+0x1f2>
  4060d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4060d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4060da:	e459      	b.n	405990 <_svfprintf_r+0x474>
  4060dc:	f1bb 0f00 	cmp.w	fp, #0
  4060e0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4060e4:	f2c0 82d8 	blt.w	406698 <_svfprintf_r+0x117c>
  4060e8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4060ec:	9307      	str	r3, [sp, #28]
  4060ee:	ea54 0305 	orrs.w	r3, r4, r5
  4060f2:	f47f adcb 	bne.w	405c8c <_svfprintf_r+0x770>
  4060f6:	f1bb 0f00 	cmp.w	fp, #0
  4060fa:	f43f ae8d 	beq.w	405e18 <_svfprintf_r+0x8fc>
  4060fe:	2700      	movs	r7, #0
  406100:	e6b8      	b.n	405e74 <_svfprintf_r+0x958>
  406102:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  406104:	2d00      	cmp	r5, #0
  406106:	f340 82ca 	ble.w	40669e <_svfprintf_r+0x1182>
  40610a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40610c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40610e:	4293      	cmp	r3, r2
  406110:	bfa8      	it	ge
  406112:	4613      	movge	r3, r2
  406114:	2b00      	cmp	r3, #0
  406116:	461d      	mov	r5, r3
  406118:	dd0d      	ble.n	406136 <_svfprintf_r+0xc1a>
  40611a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40611c:	f8c9 6000 	str.w	r6, [r9]
  406120:	3301      	adds	r3, #1
  406122:	442c      	add	r4, r5
  406124:	2b07      	cmp	r3, #7
  406126:	9425      	str	r4, [sp, #148]	; 0x94
  406128:	f8c9 5004 	str.w	r5, [r9, #4]
  40612c:	9324      	str	r3, [sp, #144]	; 0x90
  40612e:	f300 839c 	bgt.w	40686a <_svfprintf_r+0x134e>
  406132:	f109 0908 	add.w	r9, r9, #8
  406136:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406138:	2d00      	cmp	r5, #0
  40613a:	bfa8      	it	ge
  40613c:	1b5b      	subge	r3, r3, r5
  40613e:	2b00      	cmp	r3, #0
  406140:	461d      	mov	r5, r3
  406142:	f340 80f6 	ble.w	406332 <_svfprintf_r+0xe16>
  406146:	4aba      	ldr	r2, [pc, #744]	; (406430 <_svfprintf_r+0xf14>)
  406148:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40614a:	920f      	str	r2, [sp, #60]	; 0x3c
  40614c:	2d10      	cmp	r5, #16
  40614e:	f340 828a 	ble.w	406666 <_svfprintf_r+0x114a>
  406152:	4622      	mov	r2, r4
  406154:	2710      	movs	r7, #16
  406156:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40615a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40615c:	e005      	b.n	40616a <_svfprintf_r+0xc4e>
  40615e:	f109 0908 	add.w	r9, r9, #8
  406162:	3d10      	subs	r5, #16
  406164:	2d10      	cmp	r5, #16
  406166:	f340 827d 	ble.w	406664 <_svfprintf_r+0x1148>
  40616a:	3301      	adds	r3, #1
  40616c:	3210      	adds	r2, #16
  40616e:	2b07      	cmp	r3, #7
  406170:	9225      	str	r2, [sp, #148]	; 0x94
  406172:	9324      	str	r3, [sp, #144]	; 0x90
  406174:	f8c9 a000 	str.w	sl, [r9]
  406178:	f8c9 7004 	str.w	r7, [r9, #4]
  40617c:	ddef      	ble.n	40615e <_svfprintf_r+0xc42>
  40617e:	aa23      	add	r2, sp, #140	; 0x8c
  406180:	4621      	mov	r1, r4
  406182:	4658      	mov	r0, fp
  406184:	f004 fb3a 	bl	40a7fc <__ssprint_r>
  406188:	2800      	cmp	r0, #0
  40618a:	f47f aac0 	bne.w	40570e <_svfprintf_r+0x1f2>
  40618e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406190:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406192:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406196:	e7e4      	b.n	406162 <_svfprintf_r+0xc46>
  406198:	aa23      	add	r2, sp, #140	; 0x8c
  40619a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40619c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40619e:	f004 fb2d 	bl	40a7fc <__ssprint_r>
  4061a2:	2800      	cmp	r0, #0
  4061a4:	f47f aab3 	bne.w	40570e <_svfprintf_r+0x1f2>
  4061a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4061ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4061ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4061b2:	f7ff bbcd 	b.w	405950 <_svfprintf_r+0x434>
  4061b6:	1e5e      	subs	r6, r3, #1
  4061b8:	2e00      	cmp	r6, #0
  4061ba:	f77f af48 	ble.w	40604e <_svfprintf_r+0xb32>
  4061be:	4b9c      	ldr	r3, [pc, #624]	; (406430 <_svfprintf_r+0xf14>)
  4061c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4061c2:	2e10      	cmp	r6, #16
  4061c4:	dd2c      	ble.n	406220 <_svfprintf_r+0xd04>
  4061c6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  4061ca:	2710      	movs	r7, #16
  4061cc:	46b0      	mov	r8, r6
  4061ce:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4061d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4061d4:	e006      	b.n	4061e4 <_svfprintf_r+0xcc8>
  4061d6:	f1a8 0810 	sub.w	r8, r8, #16
  4061da:	f1b8 0f10 	cmp.w	r8, #16
  4061de:	f109 0908 	add.w	r9, r9, #8
  4061e2:	dd1a      	ble.n	40621a <_svfprintf_r+0xcfe>
  4061e4:	3501      	adds	r5, #1
  4061e6:	3410      	adds	r4, #16
  4061e8:	2d07      	cmp	r5, #7
  4061ea:	9425      	str	r4, [sp, #148]	; 0x94
  4061ec:	9524      	str	r5, [sp, #144]	; 0x90
  4061ee:	f8c9 a000 	str.w	sl, [r9]
  4061f2:	f8c9 7004 	str.w	r7, [r9, #4]
  4061f6:	ddee      	ble.n	4061d6 <_svfprintf_r+0xcba>
  4061f8:	aa23      	add	r2, sp, #140	; 0x8c
  4061fa:	4631      	mov	r1, r6
  4061fc:	4658      	mov	r0, fp
  4061fe:	f004 fafd 	bl	40a7fc <__ssprint_r>
  406202:	2800      	cmp	r0, #0
  406204:	f47f aa83 	bne.w	40570e <_svfprintf_r+0x1f2>
  406208:	f1a8 0810 	sub.w	r8, r8, #16
  40620c:	f1b8 0f10 	cmp.w	r8, #16
  406210:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406212:	9d24      	ldr	r5, [sp, #144]	; 0x90
  406214:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406218:	dce4      	bgt.n	4061e4 <_svfprintf_r+0xcc8>
  40621a:	4646      	mov	r6, r8
  40621c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  406220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406222:	3501      	adds	r5, #1
  406224:	4434      	add	r4, r6
  406226:	2d07      	cmp	r5, #7
  406228:	9425      	str	r4, [sp, #148]	; 0x94
  40622a:	9524      	str	r5, [sp, #144]	; 0x90
  40622c:	e889 0048 	stmia.w	r9, {r3, r6}
  406230:	f77f af0b 	ble.w	40604a <_svfprintf_r+0xb2e>
  406234:	aa23      	add	r2, sp, #140	; 0x8c
  406236:	9909      	ldr	r1, [sp, #36]	; 0x24
  406238:	980a      	ldr	r0, [sp, #40]	; 0x28
  40623a:	f004 fadf 	bl	40a7fc <__ssprint_r>
  40623e:	2800      	cmp	r0, #0
  406240:	f47f aa65 	bne.w	40570e <_svfprintf_r+0x1f2>
  406244:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406246:	9d24      	ldr	r5, [sp, #144]	; 0x90
  406248:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40624c:	e6ff      	b.n	40604e <_svfprintf_r+0xb32>
  40624e:	9907      	ldr	r1, [sp, #28]
  406250:	f011 0210 	ands.w	r2, r1, #16
  406254:	f000 8108 	beq.w	406468 <_svfprintf_r+0xf4c>
  406258:	980e      	ldr	r0, [sp, #56]	; 0x38
  40625a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40625e:	f1bb 0f00 	cmp.w	fp, #0
  406262:	6804      	ldr	r4, [r0, #0]
  406264:	f100 0704 	add.w	r7, r0, #4
  406268:	f04f 0500 	mov.w	r5, #0
  40626c:	db26      	blt.n	4062bc <_svfprintf_r+0xda0>
  40626e:	460a      	mov	r2, r1
  406270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  406274:	9207      	str	r2, [sp, #28]
  406276:	ea54 0205 	orrs.w	r2, r4, r5
  40627a:	970e      	str	r7, [sp, #56]	; 0x38
  40627c:	461f      	mov	r7, r3
  40627e:	f47f aaef 	bne.w	405860 <_svfprintf_r+0x344>
  406282:	e4c8      	b.n	405c16 <_svfprintf_r+0x6fa>
  406284:	9b07      	ldr	r3, [sp, #28]
  406286:	06d9      	lsls	r1, r3, #27
  406288:	d42a      	bmi.n	4062e0 <_svfprintf_r+0xdc4>
  40628a:	9b07      	ldr	r3, [sp, #28]
  40628c:	065a      	lsls	r2, r3, #25
  40628e:	d527      	bpl.n	4062e0 <_svfprintf_r+0xdc4>
  406290:	990e      	ldr	r1, [sp, #56]	; 0x38
  406292:	f9b1 4000 	ldrsh.w	r4, [r1]
  406296:	3104      	adds	r1, #4
  406298:	17e5      	asrs	r5, r4, #31
  40629a:	4622      	mov	r2, r4
  40629c:	462b      	mov	r3, r5
  40629e:	910e      	str	r1, [sp, #56]	; 0x38
  4062a0:	f7ff bacb 	b.w	40583a <_svfprintf_r+0x31e>
  4062a4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4062a6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4062aa:	f1bb 0f00 	cmp.w	fp, #0
  4062ae:	680c      	ldr	r4, [r1, #0]
  4062b0:	f101 0704 	add.w	r7, r1, #4
  4062b4:	f04f 0500 	mov.w	r5, #0
  4062b8:	f280 8247 	bge.w	40674a <_svfprintf_r+0x122e>
  4062bc:	970e      	str	r7, [sp, #56]	; 0x38
  4062be:	461f      	mov	r7, r3
  4062c0:	ea54 0305 	orrs.w	r3, r4, r5
  4062c4:	f47f aacc 	bne.w	405860 <_svfprintf_r+0x344>
  4062c8:	e4aa      	b.n	405c20 <_svfprintf_r+0x704>
  4062ca:	3301      	adds	r3, #1
  4062cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4062ce:	9324      	str	r3, [sp, #144]	; 0x90
  4062d0:	442c      	add	r4, r5
  4062d2:	2b07      	cmp	r3, #7
  4062d4:	9425      	str	r4, [sp, #148]	; 0x94
  4062d6:	e889 0024 	stmia.w	r9, {r2, r5}
  4062da:	f77f abad 	ble.w	405a38 <_svfprintf_r+0x51c>
  4062de:	e6c3      	b.n	406068 <_svfprintf_r+0xb4c>
  4062e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4062e2:	6814      	ldr	r4, [r2, #0]
  4062e4:	4613      	mov	r3, r2
  4062e6:	3304      	adds	r3, #4
  4062e8:	17e5      	asrs	r5, r4, #31
  4062ea:	4622      	mov	r2, r4
  4062ec:	930e      	str	r3, [sp, #56]	; 0x38
  4062ee:	2a00      	cmp	r2, #0
  4062f0:	462b      	mov	r3, r5
  4062f2:	f173 0300 	sbcs.w	r3, r3, #0
  4062f6:	f6bf aaa5 	bge.w	405844 <_svfprintf_r+0x328>
  4062fa:	4264      	negs	r4, r4
  4062fc:	f04f 072d 	mov.w	r7, #45	; 0x2d
  406300:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406304:	f1bb 0f00 	cmp.w	fp, #0
  406308:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40630c:	f6ff aaa8 	blt.w	405860 <_svfprintf_r+0x344>
  406310:	9b07      	ldr	r3, [sp, #28]
  406312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406316:	9307      	str	r3, [sp, #28]
  406318:	f7ff baa2 	b.w	405860 <_svfprintf_r+0x344>
  40631c:	aa23      	add	r2, sp, #140	; 0x8c
  40631e:	9909      	ldr	r1, [sp, #36]	; 0x24
  406320:	980a      	ldr	r0, [sp, #40]	; 0x28
  406322:	f004 fa6b 	bl	40a7fc <__ssprint_r>
  406326:	2800      	cmp	r0, #0
  406328:	f47f a9f1 	bne.w	40570e <_svfprintf_r+0x1f2>
  40632c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40632e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406332:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  406334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406336:	4432      	add	r2, r6
  406338:	4617      	mov	r7, r2
  40633a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40633c:	4293      	cmp	r3, r2
  40633e:	db47      	blt.n	4063d0 <_svfprintf_r+0xeb4>
  406340:	9a07      	ldr	r2, [sp, #28]
  406342:	07d5      	lsls	r5, r2, #31
  406344:	d444      	bmi.n	4063d0 <_svfprintf_r+0xeb4>
  406346:	9912      	ldr	r1, [sp, #72]	; 0x48
  406348:	440e      	add	r6, r1
  40634a:	1bf5      	subs	r5, r6, r7
  40634c:	1acb      	subs	r3, r1, r3
  40634e:	429d      	cmp	r5, r3
  406350:	bfa8      	it	ge
  406352:	461d      	movge	r5, r3
  406354:	2d00      	cmp	r5, #0
  406356:	462e      	mov	r6, r5
  406358:	dd0d      	ble.n	406376 <_svfprintf_r+0xe5a>
  40635a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40635c:	f8c9 7000 	str.w	r7, [r9]
  406360:	3201      	adds	r2, #1
  406362:	442c      	add	r4, r5
  406364:	2a07      	cmp	r2, #7
  406366:	9425      	str	r4, [sp, #148]	; 0x94
  406368:	f8c9 5004 	str.w	r5, [r9, #4]
  40636c:	9224      	str	r2, [sp, #144]	; 0x90
  40636e:	f300 830b 	bgt.w	406988 <_svfprintf_r+0x146c>
  406372:	f109 0908 	add.w	r9, r9, #8
  406376:	2e00      	cmp	r6, #0
  406378:	bfac      	ite	ge
  40637a:	1b9d      	subge	r5, r3, r6
  40637c:	461d      	movlt	r5, r3
  40637e:	2d00      	cmp	r5, #0
  406380:	f77f ab5c 	ble.w	405a3c <_svfprintf_r+0x520>
  406384:	4a2a      	ldr	r2, [pc, #168]	; (406430 <_svfprintf_r+0xf14>)
  406386:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406388:	920f      	str	r2, [sp, #60]	; 0x3c
  40638a:	2d10      	cmp	r5, #16
  40638c:	dd9d      	ble.n	4062ca <_svfprintf_r+0xdae>
  40638e:	2610      	movs	r6, #16
  406390:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406392:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  406396:	e004      	b.n	4063a2 <_svfprintf_r+0xe86>
  406398:	f109 0908 	add.w	r9, r9, #8
  40639c:	3d10      	subs	r5, #16
  40639e:	2d10      	cmp	r5, #16
  4063a0:	dd93      	ble.n	4062ca <_svfprintf_r+0xdae>
  4063a2:	3301      	adds	r3, #1
  4063a4:	3410      	adds	r4, #16
  4063a6:	2b07      	cmp	r3, #7
  4063a8:	9425      	str	r4, [sp, #148]	; 0x94
  4063aa:	9324      	str	r3, [sp, #144]	; 0x90
  4063ac:	f8c9 a000 	str.w	sl, [r9]
  4063b0:	f8c9 6004 	str.w	r6, [r9, #4]
  4063b4:	ddf0      	ble.n	406398 <_svfprintf_r+0xe7c>
  4063b6:	aa23      	add	r2, sp, #140	; 0x8c
  4063b8:	4659      	mov	r1, fp
  4063ba:	4638      	mov	r0, r7
  4063bc:	f004 fa1e 	bl	40a7fc <__ssprint_r>
  4063c0:	2800      	cmp	r0, #0
  4063c2:	f47f a9a4 	bne.w	40570e <_svfprintf_r+0x1f2>
  4063c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4063c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4063ca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4063ce:	e7e5      	b.n	40639c <_svfprintf_r+0xe80>
  4063d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4063d2:	9816      	ldr	r0, [sp, #88]	; 0x58
  4063d4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4063d6:	f8c9 1000 	str.w	r1, [r9]
  4063da:	3201      	adds	r2, #1
  4063dc:	4404      	add	r4, r0
  4063de:	2a07      	cmp	r2, #7
  4063e0:	9425      	str	r4, [sp, #148]	; 0x94
  4063e2:	f8c9 0004 	str.w	r0, [r9, #4]
  4063e6:	9224      	str	r2, [sp, #144]	; 0x90
  4063e8:	f300 82a9 	bgt.w	40693e <_svfprintf_r+0x1422>
  4063ec:	f109 0908 	add.w	r9, r9, #8
  4063f0:	e7a9      	b.n	406346 <_svfprintf_r+0xe2a>
  4063f2:	9b07      	ldr	r3, [sp, #28]
  4063f4:	07d8      	lsls	r0, r3, #31
  4063f6:	f53f adf4 	bmi.w	405fe2 <_svfprintf_r+0xac6>
  4063fa:	3501      	adds	r5, #1
  4063fc:	3401      	adds	r4, #1
  4063fe:	2301      	movs	r3, #1
  406400:	2d07      	cmp	r5, #7
  406402:	9425      	str	r4, [sp, #148]	; 0x94
  406404:	9524      	str	r5, [sp, #144]	; 0x90
  406406:	f8c9 6000 	str.w	r6, [r9]
  40640a:	f8c9 3004 	str.w	r3, [r9, #4]
  40640e:	f77f ae1c 	ble.w	40604a <_svfprintf_r+0xb2e>
  406412:	e70f      	b.n	406234 <_svfprintf_r+0xd18>
  406414:	aa23      	add	r2, sp, #140	; 0x8c
  406416:	9909      	ldr	r1, [sp, #36]	; 0x24
  406418:	980a      	ldr	r0, [sp, #40]	; 0x28
  40641a:	f004 f9ef 	bl	40a7fc <__ssprint_r>
  40641e:	2800      	cmp	r0, #0
  406420:	f47f a975 	bne.w	40570e <_svfprintf_r+0x1f2>
  406424:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406426:	9d24      	ldr	r5, [sp, #144]	; 0x90
  406428:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40642c:	e5e7      	b.n	405ffe <_svfprintf_r+0xae2>
  40642e:	bf00      	nop
  406430:	0040cb78 	.word	0x0040cb78
  406434:	aa23      	add	r2, sp, #140	; 0x8c
  406436:	9909      	ldr	r1, [sp, #36]	; 0x24
  406438:	980a      	ldr	r0, [sp, #40]	; 0x28
  40643a:	f004 f9df 	bl	40a7fc <__ssprint_r>
  40643e:	2800      	cmp	r0, #0
  406440:	f47f a965 	bne.w	40570e <_svfprintf_r+0x1f2>
  406444:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406446:	9d24      	ldr	r5, [sp, #144]	; 0x90
  406448:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40644c:	e5e6      	b.n	40601c <_svfprintf_r+0xb00>
  40644e:	aa23      	add	r2, sp, #140	; 0x8c
  406450:	9909      	ldr	r1, [sp, #36]	; 0x24
  406452:	980a      	ldr	r0, [sp, #40]	; 0x28
  406454:	f004 f9d2 	bl	40a7fc <__ssprint_r>
  406458:	2800      	cmp	r0, #0
  40645a:	f47f a958 	bne.w	40570e <_svfprintf_r+0x1f2>
  40645e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406460:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406464:	f7ff ba98 	b.w	405998 <_svfprintf_r+0x47c>
  406468:	9907      	ldr	r1, [sp, #28]
  40646a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40646e:	f43f af19 	beq.w	4062a4 <_svfprintf_r+0xd88>
  406472:	980e      	ldr	r0, [sp, #56]	; 0x38
  406474:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  406478:	f1bb 0f00 	cmp.w	fp, #0
  40647c:	8804      	ldrh	r4, [r0, #0]
  40647e:	f100 0704 	add.w	r7, r0, #4
  406482:	f04f 0500 	mov.w	r5, #0
  406486:	f2c0 81b9 	blt.w	4067fc <_svfprintf_r+0x12e0>
  40648a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40648e:	9307      	str	r3, [sp, #28]
  406490:	ea54 0305 	orrs.w	r3, r4, r5
  406494:	970e      	str	r7, [sp, #56]	; 0x38
  406496:	4617      	mov	r7, r2
  406498:	f47f a9e2 	bne.w	405860 <_svfprintf_r+0x344>
  40649c:	f7ff bbbb 	b.w	405c16 <_svfprintf_r+0x6fa>
  4064a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4064a2:	4622      	mov	r2, r4
  4064a4:	4620      	mov	r0, r4
  4064a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4064a8:	4623      	mov	r3, r4
  4064aa:	4621      	mov	r1, r4
  4064ac:	f005 f844 	bl	40b538 <__aeabi_dcmpun>
  4064b0:	2800      	cmp	r0, #0
  4064b2:	f040 8317 	bne.w	406ae4 <_svfprintf_r+0x15c8>
  4064b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4064b8:	f1bb 3fff 	cmp.w	fp, #4294967295
  4064bc:	f023 0320 	bic.w	r3, r3, #32
  4064c0:	930d      	str	r3, [sp, #52]	; 0x34
  4064c2:	f000 8270 	beq.w	4069a6 <_svfprintf_r+0x148a>
  4064c6:	2b47      	cmp	r3, #71	; 0x47
  4064c8:	f000 8192 	beq.w	4067f0 <_svfprintf_r+0x12d4>
  4064cc:	9b07      	ldr	r3, [sp, #28]
  4064ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4064d2:	9310      	str	r3, [sp, #64]	; 0x40
  4064d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4064d6:	1e1f      	subs	r7, r3, #0
  4064d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4064da:	9308      	str	r3, [sp, #32]
  4064dc:	bfbb      	ittet	lt
  4064de:	463b      	movlt	r3, r7
  4064e0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4064e4:	2300      	movge	r3, #0
  4064e6:	232d      	movlt	r3, #45	; 0x2d
  4064e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4064ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4064ec:	2b66      	cmp	r3, #102	; 0x66
  4064ee:	f000 825d 	beq.w	4069ac <_svfprintf_r+0x1490>
  4064f2:	2b46      	cmp	r3, #70	; 0x46
  4064f4:	f000 8151 	beq.w	40679a <_svfprintf_r+0x127e>
  4064f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4064fa:	9a08      	ldr	r2, [sp, #32]
  4064fc:	2b45      	cmp	r3, #69	; 0x45
  4064fe:	a821      	add	r0, sp, #132	; 0x84
  406500:	a91e      	add	r1, sp, #120	; 0x78
  406502:	bf0c      	ite	eq
  406504:	f10b 0501 	addeq.w	r5, fp, #1
  406508:	465d      	movne	r5, fp
  40650a:	9004      	str	r0, [sp, #16]
  40650c:	9103      	str	r1, [sp, #12]
  40650e:	a81d      	add	r0, sp, #116	; 0x74
  406510:	2102      	movs	r1, #2
  406512:	463b      	mov	r3, r7
  406514:	9002      	str	r0, [sp, #8]
  406516:	9501      	str	r5, [sp, #4]
  406518:	9100      	str	r1, [sp, #0]
  40651a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40651c:	f001 fbc4 	bl	407ca8 <_dtoa_r>
  406520:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406522:	2b67      	cmp	r3, #103	; 0x67
  406524:	4606      	mov	r6, r0
  406526:	f040 8290 	bne.w	406a4a <_svfprintf_r+0x152e>
  40652a:	9b07      	ldr	r3, [sp, #28]
  40652c:	07da      	lsls	r2, r3, #31
  40652e:	f140 82af 	bpl.w	406a90 <_svfprintf_r+0x1574>
  406532:	1974      	adds	r4, r6, r5
  406534:	9808      	ldr	r0, [sp, #32]
  406536:	4639      	mov	r1, r7
  406538:	2200      	movs	r2, #0
  40653a:	2300      	movs	r3, #0
  40653c:	f004 ffca 	bl	40b4d4 <__aeabi_dcmpeq>
  406540:	2800      	cmp	r0, #0
  406542:	f040 8190 	bne.w	406866 <_svfprintf_r+0x134a>
  406546:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406548:	429c      	cmp	r4, r3
  40654a:	d906      	bls.n	40655a <_svfprintf_r+0x103e>
  40654c:	2130      	movs	r1, #48	; 0x30
  40654e:	1c5a      	adds	r2, r3, #1
  406550:	9221      	str	r2, [sp, #132]	; 0x84
  406552:	7019      	strb	r1, [r3, #0]
  406554:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406556:	429c      	cmp	r4, r3
  406558:	d8f9      	bhi.n	40654e <_svfprintf_r+0x1032>
  40655a:	1b9b      	subs	r3, r3, r6
  40655c:	9312      	str	r3, [sp, #72]	; 0x48
  40655e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406560:	2b47      	cmp	r3, #71	; 0x47
  406562:	f000 8179 	beq.w	406858 <_svfprintf_r+0x133c>
  406566:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406568:	2b65      	cmp	r3, #101	; 0x65
  40656a:	f340 827d 	ble.w	406a68 <_svfprintf_r+0x154c>
  40656e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406570:	2b66      	cmp	r3, #102	; 0x66
  406572:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406574:	9313      	str	r3, [sp, #76]	; 0x4c
  406576:	f000 825b 	beq.w	406a30 <_svfprintf_r+0x1514>
  40657a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40657c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40657e:	428a      	cmp	r2, r1
  406580:	f2c0 8230 	blt.w	4069e4 <_svfprintf_r+0x14c8>
  406584:	9b07      	ldr	r3, [sp, #28]
  406586:	07d9      	lsls	r1, r3, #31
  406588:	f100 8284 	bmi.w	406a94 <_svfprintf_r+0x1578>
  40658c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406590:	920d      	str	r2, [sp, #52]	; 0x34
  406592:	2267      	movs	r2, #103	; 0x67
  406594:	9211      	str	r2, [sp, #68]	; 0x44
  406596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406598:	2a00      	cmp	r2, #0
  40659a:	f040 8153 	bne.w	406844 <_svfprintf_r+0x1328>
  40659e:	9308      	str	r3, [sp, #32]
  4065a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4065a2:	9307      	str	r3, [sp, #28]
  4065a4:	4693      	mov	fp, r2
  4065a6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4065aa:	f7ff b97d 	b.w	4058a8 <_svfprintf_r+0x38c>
  4065ae:	9907      	ldr	r1, [sp, #28]
  4065b0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  4065b4:	d015      	beq.n	4065e2 <_svfprintf_r+0x10c6>
  4065b6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4065b8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4065bc:	f1bb 0f00 	cmp.w	fp, #0
  4065c0:	8804      	ldrh	r4, [r0, #0]
  4065c2:	f100 0704 	add.w	r7, r0, #4
  4065c6:	f04f 0500 	mov.w	r5, #0
  4065ca:	db16      	blt.n	4065fa <_svfprintf_r+0x10de>
  4065cc:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  4065d0:	9307      	str	r3, [sp, #28]
  4065d2:	ea54 0305 	orrs.w	r3, r4, r5
  4065d6:	970e      	str	r7, [sp, #56]	; 0x38
  4065d8:	f43f ac3a 	beq.w	405e50 <_svfprintf_r+0x934>
  4065dc:	4617      	mov	r7, r2
  4065de:	f7ff b8c2 	b.w	405766 <_svfprintf_r+0x24a>
  4065e2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4065e4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4065e8:	f1bb 0f00 	cmp.w	fp, #0
  4065ec:	680c      	ldr	r4, [r1, #0]
  4065ee:	f101 0704 	add.w	r7, r1, #4
  4065f2:	f04f 0500 	mov.w	r5, #0
  4065f6:	f280 80a5 	bge.w	406744 <_svfprintf_r+0x1228>
  4065fa:	970e      	str	r7, [sp, #56]	; 0x38
  4065fc:	2700      	movs	r7, #0
  4065fe:	f7ff b8b2 	b.w	405766 <_svfprintf_r+0x24a>
  406602:	9b07      	ldr	r3, [sp, #28]
  406604:	06df      	lsls	r7, r3, #27
  406606:	d40b      	bmi.n	406620 <_svfprintf_r+0x1104>
  406608:	9b07      	ldr	r3, [sp, #28]
  40660a:	065e      	lsls	r6, r3, #25
  40660c:	d508      	bpl.n	406620 <_svfprintf_r+0x1104>
  40660e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406610:	6813      	ldr	r3, [r2, #0]
  406612:	3204      	adds	r2, #4
  406614:	920e      	str	r2, [sp, #56]	; 0x38
  406616:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40661a:	801a      	strh	r2, [r3, #0]
  40661c:	f7fe bfa4 	b.w	405568 <_svfprintf_r+0x4c>
  406620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406622:	6813      	ldr	r3, [r2, #0]
  406624:	3204      	adds	r2, #4
  406626:	920e      	str	r2, [sp, #56]	; 0x38
  406628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40662a:	601a      	str	r2, [r3, #0]
  40662c:	f7fe bf9c 	b.w	405568 <_svfprintf_r+0x4c>
  406630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406632:	9b07      	ldr	r3, [sp, #28]
  406634:	f013 0f40 	tst.w	r3, #64	; 0x40
  406638:	4613      	mov	r3, r2
  40663a:	f103 0304 	add.w	r3, r3, #4
  40663e:	bf0c      	ite	eq
  406640:	6814      	ldreq	r4, [r2, #0]
  406642:	8814      	ldrhne	r4, [r2, #0]
  406644:	930e      	str	r3, [sp, #56]	; 0x38
  406646:	2500      	movs	r5, #0
  406648:	f7ff bb02 	b.w	405c50 <_svfprintf_r+0x734>
  40664c:	2700      	movs	r7, #0
  40664e:	45bb      	cmp	fp, r7
  406650:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  406654:	f6ff ac0e 	blt.w	405e74 <_svfprintf_r+0x958>
  406658:	9b07      	ldr	r3, [sp, #28]
  40665a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40665e:	9307      	str	r3, [sp, #28]
  406660:	f7ff bbd6 	b.w	405e10 <_svfprintf_r+0x8f4>
  406664:	4614      	mov	r4, r2
  406666:	3301      	adds	r3, #1
  406668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40666a:	9324      	str	r3, [sp, #144]	; 0x90
  40666c:	442c      	add	r4, r5
  40666e:	2b07      	cmp	r3, #7
  406670:	9425      	str	r4, [sp, #148]	; 0x94
  406672:	e889 0024 	stmia.w	r9, {r2, r5}
  406676:	f73f ae51 	bgt.w	40631c <_svfprintf_r+0xe00>
  40667a:	f109 0908 	add.w	r9, r9, #8
  40667e:	e658      	b.n	406332 <_svfprintf_r+0xe16>
  406680:	aa23      	add	r2, sp, #140	; 0x8c
  406682:	9909      	ldr	r1, [sp, #36]	; 0x24
  406684:	980a      	ldr	r0, [sp, #40]	; 0x28
  406686:	f004 f8b9 	bl	40a7fc <__ssprint_r>
  40668a:	2800      	cmp	r0, #0
  40668c:	f47f a83f 	bne.w	40570e <_svfprintf_r+0x1f2>
  406690:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406692:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406696:	e40f      	b.n	405eb8 <_svfprintf_r+0x99c>
  406698:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40669a:	f7ff bbe4 	b.w	405e66 <_svfprintf_r+0x94a>
  40669e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4066a0:	4ab5      	ldr	r2, [pc, #724]	; (406978 <_svfprintf_r+0x145c>)
  4066a2:	f8c9 2000 	str.w	r2, [r9]
  4066a6:	3301      	adds	r3, #1
  4066a8:	3401      	adds	r4, #1
  4066aa:	2201      	movs	r2, #1
  4066ac:	2b07      	cmp	r3, #7
  4066ae:	9425      	str	r4, [sp, #148]	; 0x94
  4066b0:	9324      	str	r3, [sp, #144]	; 0x90
  4066b2:	f8c9 2004 	str.w	r2, [r9, #4]
  4066b6:	f300 808e 	bgt.w	4067d6 <_svfprintf_r+0x12ba>
  4066ba:	f109 0908 	add.w	r9, r9, #8
  4066be:	b92d      	cbnz	r5, 4066cc <_svfprintf_r+0x11b0>
  4066c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4066c2:	b91b      	cbnz	r3, 4066cc <_svfprintf_r+0x11b0>
  4066c4:	9b07      	ldr	r3, [sp, #28]
  4066c6:	07df      	lsls	r7, r3, #31
  4066c8:	f57f a9b8 	bpl.w	405a3c <_svfprintf_r+0x520>
  4066cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4066ce:	9916      	ldr	r1, [sp, #88]	; 0x58
  4066d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4066d2:	f8c9 2000 	str.w	r2, [r9]
  4066d6:	3301      	adds	r3, #1
  4066d8:	440c      	add	r4, r1
  4066da:	2b07      	cmp	r3, #7
  4066dc:	9425      	str	r4, [sp, #148]	; 0x94
  4066de:	f8c9 1004 	str.w	r1, [r9, #4]
  4066e2:	9324      	str	r3, [sp, #144]	; 0x90
  4066e4:	f300 81c2 	bgt.w	406a6c <_svfprintf_r+0x1550>
  4066e8:	f109 0908 	add.w	r9, r9, #8
  4066ec:	426d      	negs	r5, r5
  4066ee:	2d00      	cmp	r5, #0
  4066f0:	f340 809b 	ble.w	40682a <_svfprintf_r+0x130e>
  4066f4:	4aa1      	ldr	r2, [pc, #644]	; (40697c <_svfprintf_r+0x1460>)
  4066f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4066f8:	2d10      	cmp	r5, #16
  4066fa:	f340 80c3 	ble.w	406884 <_svfprintf_r+0x1368>
  4066fe:	4622      	mov	r2, r4
  406700:	2710      	movs	r7, #16
  406702:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406706:	9c09      	ldr	r4, [sp, #36]	; 0x24
  406708:	e005      	b.n	406716 <_svfprintf_r+0x11fa>
  40670a:	f109 0908 	add.w	r9, r9, #8
  40670e:	3d10      	subs	r5, #16
  406710:	2d10      	cmp	r5, #16
  406712:	f340 80b6 	ble.w	406882 <_svfprintf_r+0x1366>
  406716:	3301      	adds	r3, #1
  406718:	3210      	adds	r2, #16
  40671a:	2b07      	cmp	r3, #7
  40671c:	9225      	str	r2, [sp, #148]	; 0x94
  40671e:	9324      	str	r3, [sp, #144]	; 0x90
  406720:	f8c9 a000 	str.w	sl, [r9]
  406724:	f8c9 7004 	str.w	r7, [r9, #4]
  406728:	ddef      	ble.n	40670a <_svfprintf_r+0x11ee>
  40672a:	aa23      	add	r2, sp, #140	; 0x8c
  40672c:	4621      	mov	r1, r4
  40672e:	4658      	mov	r0, fp
  406730:	f004 f864 	bl	40a7fc <__ssprint_r>
  406734:	2800      	cmp	r0, #0
  406736:	f47e afea 	bne.w	40570e <_svfprintf_r+0x1f2>
  40673a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40673c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40673e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406742:	e7e4      	b.n	40670e <_svfprintf_r+0x11f2>
  406744:	9a07      	ldr	r2, [sp, #28]
  406746:	f7ff ba38 	b.w	405bba <_svfprintf_r+0x69e>
  40674a:	9a07      	ldr	r2, [sp, #28]
  40674c:	e590      	b.n	406270 <_svfprintf_r+0xd54>
  40674e:	9b07      	ldr	r3, [sp, #28]
  406750:	f043 0320 	orr.w	r3, r3, #32
  406754:	9307      	str	r3, [sp, #28]
  406756:	f108 0801 	add.w	r8, r8, #1
  40675a:	f898 3000 	ldrb.w	r3, [r8]
  40675e:	f7fe bf36 	b.w	4055ce <_svfprintf_r+0xb2>
  406762:	aa23      	add	r2, sp, #140	; 0x8c
  406764:	9909      	ldr	r1, [sp, #36]	; 0x24
  406766:	980a      	ldr	r0, [sp, #40]	; 0x28
  406768:	f004 f848 	bl	40a7fc <__ssprint_r>
  40676c:	2800      	cmp	r0, #0
  40676e:	f47e afce 	bne.w	40570e <_svfprintf_r+0x1f2>
  406772:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406774:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406778:	f7ff bbb6 	b.w	405ee8 <_svfprintf_r+0x9cc>
  40677c:	2140      	movs	r1, #64	; 0x40
  40677e:	980a      	ldr	r0, [sp, #40]	; 0x28
  406780:	f002 fede 	bl	409540 <_malloc_r>
  406784:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406786:	6010      	str	r0, [r2, #0]
  406788:	6110      	str	r0, [r2, #16]
  40678a:	2800      	cmp	r0, #0
  40678c:	f000 81e5 	beq.w	406b5a <_svfprintf_r+0x163e>
  406790:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406792:	2340      	movs	r3, #64	; 0x40
  406794:	6153      	str	r3, [r2, #20]
  406796:	f7fe bed8 	b.w	40554a <_svfprintf_r+0x2e>
  40679a:	a821      	add	r0, sp, #132	; 0x84
  40679c:	a91e      	add	r1, sp, #120	; 0x78
  40679e:	9004      	str	r0, [sp, #16]
  4067a0:	9103      	str	r1, [sp, #12]
  4067a2:	a81d      	add	r0, sp, #116	; 0x74
  4067a4:	2103      	movs	r1, #3
  4067a6:	9002      	str	r0, [sp, #8]
  4067a8:	9a08      	ldr	r2, [sp, #32]
  4067aa:	f8cd b004 	str.w	fp, [sp, #4]
  4067ae:	463b      	mov	r3, r7
  4067b0:	9100      	str	r1, [sp, #0]
  4067b2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4067b4:	f001 fa78 	bl	407ca8 <_dtoa_r>
  4067b8:	465d      	mov	r5, fp
  4067ba:	4606      	mov	r6, r0
  4067bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4067be:	2b46      	cmp	r3, #70	; 0x46
  4067c0:	eb06 0405 	add.w	r4, r6, r5
  4067c4:	f47f aeb6 	bne.w	406534 <_svfprintf_r+0x1018>
  4067c8:	7833      	ldrb	r3, [r6, #0]
  4067ca:	2b30      	cmp	r3, #48	; 0x30
  4067cc:	f000 817c 	beq.w	406ac8 <_svfprintf_r+0x15ac>
  4067d0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4067d2:	442c      	add	r4, r5
  4067d4:	e6ae      	b.n	406534 <_svfprintf_r+0x1018>
  4067d6:	aa23      	add	r2, sp, #140	; 0x8c
  4067d8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4067da:	980a      	ldr	r0, [sp, #40]	; 0x28
  4067dc:	f004 f80e 	bl	40a7fc <__ssprint_r>
  4067e0:	2800      	cmp	r0, #0
  4067e2:	f47e af94 	bne.w	40570e <_svfprintf_r+0x1f2>
  4067e6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4067e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4067ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4067ee:	e766      	b.n	4066be <_svfprintf_r+0x11a2>
  4067f0:	f1bb 0f00 	cmp.w	fp, #0
  4067f4:	bf08      	it	eq
  4067f6:	f04f 0b01 	moveq.w	fp, #1
  4067fa:	e667      	b.n	4064cc <_svfprintf_r+0xfb0>
  4067fc:	970e      	str	r7, [sp, #56]	; 0x38
  4067fe:	4617      	mov	r7, r2
  406800:	e55e      	b.n	4062c0 <_svfprintf_r+0xda4>
  406802:	4630      	mov	r0, r6
  406804:	f7fe fe1c 	bl	405440 <strlen>
  406808:	46a3      	mov	fp, r4
  40680a:	4603      	mov	r3, r0
  40680c:	900d      	str	r0, [sp, #52]	; 0x34
  40680e:	f7ff baf4 	b.w	405dfa <_svfprintf_r+0x8de>
  406812:	aa23      	add	r2, sp, #140	; 0x8c
  406814:	9909      	ldr	r1, [sp, #36]	; 0x24
  406816:	980a      	ldr	r0, [sp, #40]	; 0x28
  406818:	f003 fff0 	bl	40a7fc <__ssprint_r>
  40681c:	2800      	cmp	r0, #0
  40681e:	f47e af76 	bne.w	40570e <_svfprintf_r+0x1f2>
  406822:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406824:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406826:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40682a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40682c:	f8c9 6000 	str.w	r6, [r9]
  406830:	3301      	adds	r3, #1
  406832:	440c      	add	r4, r1
  406834:	2b07      	cmp	r3, #7
  406836:	9425      	str	r4, [sp, #148]	; 0x94
  406838:	9324      	str	r3, [sp, #144]	; 0x90
  40683a:	f8c9 1004 	str.w	r1, [r9, #4]
  40683e:	f77f a8fb 	ble.w	405a38 <_svfprintf_r+0x51c>
  406842:	e411      	b.n	406068 <_svfprintf_r+0xb4c>
  406844:	272d      	movs	r7, #45	; 0x2d
  406846:	9308      	str	r3, [sp, #32]
  406848:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40684a:	9307      	str	r3, [sp, #28]
  40684c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  406850:	f04f 0b00 	mov.w	fp, #0
  406854:	f7ff b829 	b.w	4058aa <_svfprintf_r+0x38e>
  406858:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40685a:	1cdd      	adds	r5, r3, #3
  40685c:	db1e      	blt.n	40689c <_svfprintf_r+0x1380>
  40685e:	459b      	cmp	fp, r3
  406860:	db1c      	blt.n	40689c <_svfprintf_r+0x1380>
  406862:	9313      	str	r3, [sp, #76]	; 0x4c
  406864:	e689      	b.n	40657a <_svfprintf_r+0x105e>
  406866:	4623      	mov	r3, r4
  406868:	e677      	b.n	40655a <_svfprintf_r+0x103e>
  40686a:	aa23      	add	r2, sp, #140	; 0x8c
  40686c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40686e:	980a      	ldr	r0, [sp, #40]	; 0x28
  406870:	f003 ffc4 	bl	40a7fc <__ssprint_r>
  406874:	2800      	cmp	r0, #0
  406876:	f47e af4a 	bne.w	40570e <_svfprintf_r+0x1f2>
  40687a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40687c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406880:	e459      	b.n	406136 <_svfprintf_r+0xc1a>
  406882:	4614      	mov	r4, r2
  406884:	3301      	adds	r3, #1
  406886:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406888:	9324      	str	r3, [sp, #144]	; 0x90
  40688a:	442c      	add	r4, r5
  40688c:	2b07      	cmp	r3, #7
  40688e:	9425      	str	r4, [sp, #148]	; 0x94
  406890:	e889 0024 	stmia.w	r9, {r2, r5}
  406894:	dcbd      	bgt.n	406812 <_svfprintf_r+0x12f6>
  406896:	f109 0908 	add.w	r9, r9, #8
  40689a:	e7c6      	b.n	40682a <_svfprintf_r+0x130e>
  40689c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40689e:	3a02      	subs	r2, #2
  4068a0:	9211      	str	r2, [sp, #68]	; 0x44
  4068a2:	3b01      	subs	r3, #1
  4068a4:	2b00      	cmp	r3, #0
  4068a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4068aa:	931d      	str	r3, [sp, #116]	; 0x74
  4068ac:	bfb8      	it	lt
  4068ae:	425b      	neglt	r3, r3
  4068b0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  4068b4:	bfb4      	ite	lt
  4068b6:	222d      	movlt	r2, #45	; 0x2d
  4068b8:	222b      	movge	r2, #43	; 0x2b
  4068ba:	2b09      	cmp	r3, #9
  4068bc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4068c0:	f340 80f1 	ble.w	406aa6 <_svfprintf_r+0x158a>
  4068c4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4068c8:	4604      	mov	r4, r0
  4068ca:	4a2d      	ldr	r2, [pc, #180]	; (406980 <_svfprintf_r+0x1464>)
  4068cc:	fb82 2103 	smull	r2, r1, r2, r3
  4068d0:	17da      	asrs	r2, r3, #31
  4068d2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  4068d6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4068da:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  4068de:	f103 0130 	add.w	r1, r3, #48	; 0x30
  4068e2:	2a09      	cmp	r2, #9
  4068e4:	4613      	mov	r3, r2
  4068e6:	f804 1d01 	strb.w	r1, [r4, #-1]!
  4068ea:	dcee      	bgt.n	4068ca <_svfprintf_r+0x13ae>
  4068ec:	4621      	mov	r1, r4
  4068ee:	3330      	adds	r3, #48	; 0x30
  4068f0:	b2da      	uxtb	r2, r3
  4068f2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4068f6:	4288      	cmp	r0, r1
  4068f8:	f240 813a 	bls.w	406b70 <_svfprintf_r+0x1654>
  4068fc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  406900:	4623      	mov	r3, r4
  406902:	e001      	b.n	406908 <_svfprintf_r+0x13ec>
  406904:	f813 2b01 	ldrb.w	r2, [r3], #1
  406908:	f801 2b01 	strb.w	r2, [r1], #1
  40690c:	4298      	cmp	r0, r3
  40690e:	d1f9      	bne.n	406904 <_svfprintf_r+0x13e8>
  406910:	1c43      	adds	r3, r0, #1
  406912:	1b1b      	subs	r3, r3, r4
  406914:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  406918:	4413      	add	r3, r2
  40691a:	aa1f      	add	r2, sp, #124	; 0x7c
  40691c:	1a9b      	subs	r3, r3, r2
  40691e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406920:	9319      	str	r3, [sp, #100]	; 0x64
  406922:	2a01      	cmp	r2, #1
  406924:	4413      	add	r3, r2
  406926:	930d      	str	r3, [sp, #52]	; 0x34
  406928:	f340 80ea 	ble.w	406b00 <_svfprintf_r+0x15e4>
  40692c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40692e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406930:	4413      	add	r3, r2
  406932:	2200      	movs	r2, #0
  406934:	930d      	str	r3, [sp, #52]	; 0x34
  406936:	9213      	str	r2, [sp, #76]	; 0x4c
  406938:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40693c:	e62b      	b.n	406596 <_svfprintf_r+0x107a>
  40693e:	aa23      	add	r2, sp, #140	; 0x8c
  406940:	9909      	ldr	r1, [sp, #36]	; 0x24
  406942:	980a      	ldr	r0, [sp, #40]	; 0x28
  406944:	f003 ff5a 	bl	40a7fc <__ssprint_r>
  406948:	2800      	cmp	r0, #0
  40694a:	f47e aee0 	bne.w	40570e <_svfprintf_r+0x1f2>
  40694e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406950:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406952:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406956:	e4f6      	b.n	406346 <_svfprintf_r+0xe2a>
  406958:	2d06      	cmp	r5, #6
  40695a:	462b      	mov	r3, r5
  40695c:	bf28      	it	cs
  40695e:	2306      	movcs	r3, #6
  406960:	930d      	str	r3, [sp, #52]	; 0x34
  406962:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406966:	46b3      	mov	fp, r6
  406968:	970e      	str	r7, [sp, #56]	; 0x38
  40696a:	9613      	str	r6, [sp, #76]	; 0x4c
  40696c:	4637      	mov	r7, r6
  40696e:	9308      	str	r3, [sp, #32]
  406970:	4e04      	ldr	r6, [pc, #16]	; (406984 <_svfprintf_r+0x1468>)
  406972:	f7fe bf99 	b.w	4058a8 <_svfprintf_r+0x38c>
  406976:	bf00      	nop
  406978:	0040cbc8 	.word	0x0040cbc8
  40697c:	0040cb78 	.word	0x0040cb78
  406980:	66666667 	.word	0x66666667
  406984:	0040cbc0 	.word	0x0040cbc0
  406988:	aa23      	add	r2, sp, #140	; 0x8c
  40698a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40698c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40698e:	f003 ff35 	bl	40a7fc <__ssprint_r>
  406992:	2800      	cmp	r0, #0
  406994:	f47e aebb 	bne.w	40570e <_svfprintf_r+0x1f2>
  406998:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40699a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40699c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40699e:	1ad3      	subs	r3, r2, r3
  4069a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4069a4:	e4e7      	b.n	406376 <_svfprintf_r+0xe5a>
  4069a6:	f04f 0b06 	mov.w	fp, #6
  4069aa:	e58f      	b.n	4064cc <_svfprintf_r+0xfb0>
  4069ac:	a821      	add	r0, sp, #132	; 0x84
  4069ae:	a91e      	add	r1, sp, #120	; 0x78
  4069b0:	9004      	str	r0, [sp, #16]
  4069b2:	9103      	str	r1, [sp, #12]
  4069b4:	a81d      	add	r0, sp, #116	; 0x74
  4069b6:	2103      	movs	r1, #3
  4069b8:	9002      	str	r0, [sp, #8]
  4069ba:	9a08      	ldr	r2, [sp, #32]
  4069bc:	f8cd b004 	str.w	fp, [sp, #4]
  4069c0:	463b      	mov	r3, r7
  4069c2:	9100      	str	r1, [sp, #0]
  4069c4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4069c6:	f001 f96f 	bl	407ca8 <_dtoa_r>
  4069ca:	465d      	mov	r5, fp
  4069cc:	4606      	mov	r6, r0
  4069ce:	eb00 040b 	add.w	r4, r0, fp
  4069d2:	e6f9      	b.n	4067c8 <_svfprintf_r+0x12ac>
  4069d4:	9307      	str	r3, [sp, #28]
  4069d6:	f7ff b959 	b.w	405c8c <_svfprintf_r+0x770>
  4069da:	272d      	movs	r7, #45	; 0x2d
  4069dc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4069e0:	f7ff b8b2 	b.w	405b48 <_svfprintf_r+0x62c>
  4069e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4069e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4069e8:	4413      	add	r3, r2
  4069ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4069ec:	930d      	str	r3, [sp, #52]	; 0x34
  4069ee:	2a00      	cmp	r2, #0
  4069f0:	dd7e      	ble.n	406af0 <_svfprintf_r+0x15d4>
  4069f2:	2267      	movs	r2, #103	; 0x67
  4069f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4069f8:	9211      	str	r2, [sp, #68]	; 0x44
  4069fa:	e5cc      	b.n	406596 <_svfprintf_r+0x107a>
  4069fc:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  406a00:	970e      	str	r7, [sp, #56]	; 0x38
  406a02:	9308      	str	r3, [sp, #32]
  406a04:	950d      	str	r5, [sp, #52]	; 0x34
  406a06:	4683      	mov	fp, r0
  406a08:	9013      	str	r0, [sp, #76]	; 0x4c
  406a0a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406a0e:	f7fe bf4b 	b.w	4058a8 <_svfprintf_r+0x38c>
  406a12:	9b07      	ldr	r3, [sp, #28]
  406a14:	07db      	lsls	r3, r3, #31
  406a16:	465f      	mov	r7, fp
  406a18:	d505      	bpl.n	406a26 <_svfprintf_r+0x150a>
  406a1a:	ae40      	add	r6, sp, #256	; 0x100
  406a1c:	2330      	movs	r3, #48	; 0x30
  406a1e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  406a22:	f7fe bf37 	b.w	405894 <_svfprintf_r+0x378>
  406a26:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  406a2a:	ae30      	add	r6, sp, #192	; 0xc0
  406a2c:	f7fe bf35 	b.w	40589a <_svfprintf_r+0x37e>
  406a30:	2b00      	cmp	r3, #0
  406a32:	dd7d      	ble.n	406b30 <_svfprintf_r+0x1614>
  406a34:	f1bb 0f00 	cmp.w	fp, #0
  406a38:	d13d      	bne.n	406ab6 <_svfprintf_r+0x159a>
  406a3a:	9a07      	ldr	r2, [sp, #28]
  406a3c:	07d4      	lsls	r4, r2, #31
  406a3e:	d43a      	bmi.n	406ab6 <_svfprintf_r+0x159a>
  406a40:	461a      	mov	r2, r3
  406a42:	920d      	str	r2, [sp, #52]	; 0x34
  406a44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406a48:	e5a5      	b.n	406596 <_svfprintf_r+0x107a>
  406a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a4c:	2b47      	cmp	r3, #71	; 0x47
  406a4e:	f47f ad70 	bne.w	406532 <_svfprintf_r+0x1016>
  406a52:	9b07      	ldr	r3, [sp, #28]
  406a54:	07db      	lsls	r3, r3, #31
  406a56:	f53f aeb1 	bmi.w	4067bc <_svfprintf_r+0x12a0>
  406a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406a5c:	1b9b      	subs	r3, r3, r6
  406a5e:	9312      	str	r3, [sp, #72]	; 0x48
  406a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406a62:	2b47      	cmp	r3, #71	; 0x47
  406a64:	f43f aef8 	beq.w	406858 <_svfprintf_r+0x133c>
  406a68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  406a6a:	e71a      	b.n	4068a2 <_svfprintf_r+0x1386>
  406a6c:	aa23      	add	r2, sp, #140	; 0x8c
  406a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
  406a70:	980a      	ldr	r0, [sp, #40]	; 0x28
  406a72:	f003 fec3 	bl	40a7fc <__ssprint_r>
  406a76:	2800      	cmp	r0, #0
  406a78:	f47e ae49 	bne.w	40570e <_svfprintf_r+0x1f2>
  406a7c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  406a7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406a80:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a82:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  406a86:	e631      	b.n	4066ec <_svfprintf_r+0x11d0>
  406a88:	46a0      	mov	r8, r4
  406a8a:	2500      	movs	r5, #0
  406a8c:	f7fe bda1 	b.w	4055d2 <_svfprintf_r+0xb6>
  406a90:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406a92:	e562      	b.n	40655a <_svfprintf_r+0x103e>
  406a94:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406a96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406a98:	4413      	add	r3, r2
  406a9a:	2267      	movs	r2, #103	; 0x67
  406a9c:	930d      	str	r3, [sp, #52]	; 0x34
  406a9e:	9211      	str	r2, [sp, #68]	; 0x44
  406aa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406aa4:	e577      	b.n	406596 <_svfprintf_r+0x107a>
  406aa6:	3330      	adds	r3, #48	; 0x30
  406aa8:	2230      	movs	r2, #48	; 0x30
  406aaa:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  406aae:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  406ab2:	ab20      	add	r3, sp, #128	; 0x80
  406ab4:	e731      	b.n	40691a <_svfprintf_r+0x13fe>
  406ab6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406ab8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406aba:	189d      	adds	r5, r3, r2
  406abc:	eb05 030b 	add.w	r3, r5, fp
  406ac0:	930d      	str	r3, [sp, #52]	; 0x34
  406ac2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406ac6:	e566      	b.n	406596 <_svfprintf_r+0x107a>
  406ac8:	9808      	ldr	r0, [sp, #32]
  406aca:	4639      	mov	r1, r7
  406acc:	2200      	movs	r2, #0
  406ace:	2300      	movs	r3, #0
  406ad0:	f004 fd00 	bl	40b4d4 <__aeabi_dcmpeq>
  406ad4:	2800      	cmp	r0, #0
  406ad6:	f47f ae7b 	bne.w	4067d0 <_svfprintf_r+0x12b4>
  406ada:	f1c5 0501 	rsb	r5, r5, #1
  406ade:	951d      	str	r5, [sp, #116]	; 0x74
  406ae0:	442c      	add	r4, r5
  406ae2:	e527      	b.n	406534 <_svfprintf_r+0x1018>
  406ae4:	4e32      	ldr	r6, [pc, #200]	; (406bb0 <_svfprintf_r+0x1694>)
  406ae6:	4b33      	ldr	r3, [pc, #204]	; (406bb4 <_svfprintf_r+0x1698>)
  406ae8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406aec:	f7ff b82e 	b.w	405b4c <_svfprintf_r+0x630>
  406af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406af4:	f1c3 0301 	rsb	r3, r3, #1
  406af8:	441a      	add	r2, r3
  406afa:	4613      	mov	r3, r2
  406afc:	920d      	str	r2, [sp, #52]	; 0x34
  406afe:	e778      	b.n	4069f2 <_svfprintf_r+0x14d6>
  406b00:	9b07      	ldr	r3, [sp, #28]
  406b02:	f013 0301 	ands.w	r3, r3, #1
  406b06:	f47f af11 	bne.w	40692c <_svfprintf_r+0x1410>
  406b0a:	9313      	str	r3, [sp, #76]	; 0x4c
  406b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406b0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406b12:	e540      	b.n	406596 <_svfprintf_r+0x107a>
  406b14:	980e      	ldr	r0, [sp, #56]	; 0x38
  406b16:	f898 3001 	ldrb.w	r3, [r8, #1]
  406b1a:	6805      	ldr	r5, [r0, #0]
  406b1c:	3004      	adds	r0, #4
  406b1e:	2d00      	cmp	r5, #0
  406b20:	900e      	str	r0, [sp, #56]	; 0x38
  406b22:	46a0      	mov	r8, r4
  406b24:	f6be ad53 	bge.w	4055ce <_svfprintf_r+0xb2>
  406b28:	f04f 35ff 	mov.w	r5, #4294967295
  406b2c:	f7fe bd4f 	b.w	4055ce <_svfprintf_r+0xb2>
  406b30:	f1bb 0f00 	cmp.w	fp, #0
  406b34:	d102      	bne.n	406b3c <_svfprintf_r+0x1620>
  406b36:	9b07      	ldr	r3, [sp, #28]
  406b38:	07d8      	lsls	r0, r3, #31
  406b3a:	d507      	bpl.n	406b4c <_svfprintf_r+0x1630>
  406b3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  406b3e:	1c5d      	adds	r5, r3, #1
  406b40:	eb05 030b 	add.w	r3, r5, fp
  406b44:	930d      	str	r3, [sp, #52]	; 0x34
  406b46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406b4a:	e524      	b.n	406596 <_svfprintf_r+0x107a>
  406b4c:	2301      	movs	r3, #1
  406b4e:	930d      	str	r3, [sp, #52]	; 0x34
  406b50:	e521      	b.n	406596 <_svfprintf_r+0x107a>
  406b52:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406b56:	f7ff b921 	b.w	405d9c <_svfprintf_r+0x880>
  406b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406b5c:	230c      	movs	r3, #12
  406b5e:	6013      	str	r3, [r2, #0]
  406b60:	f04f 30ff 	mov.w	r0, #4294967295
  406b64:	f7fe bddc 	b.w	405720 <_svfprintf_r+0x204>
  406b68:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406b6c:	f7ff b8f9 	b.w	405d62 <_svfprintf_r+0x846>
  406b70:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  406b74:	e6d1      	b.n	40691a <_svfprintf_r+0x13fe>
  406b76:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406b7a:	f7fe bdd9 	b.w	405730 <_svfprintf_r+0x214>
  406b7e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406b82:	f7ff b857 	b.w	405c34 <_svfprintf_r+0x718>
  406b86:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406b8a:	f7ff b825 	b.w	405bd8 <_svfprintf_r+0x6bc>
  406b8e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406b92:	f7ff b94c 	b.w	405e2e <_svfprintf_r+0x912>
  406b96:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406b9a:	f7fe bff3 	b.w	405b84 <_svfprintf_r+0x668>
  406b9e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406ba2:	f7fe bfa3 	b.w	405aec <_svfprintf_r+0x5d0>
  406ba6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406baa:	f7fe be33 	b.w	405814 <_svfprintf_r+0x2f8>
  406bae:	bf00      	nop
  406bb0:	0040cb94 	.word	0x0040cb94
  406bb4:	0040cb90 	.word	0x0040cb90

00406bb8 <__sprint_r.part.0>:
  406bb8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  406bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406bbe:	049c      	lsls	r4, r3, #18
  406bc0:	4692      	mov	sl, r2
  406bc2:	d52c      	bpl.n	406c1e <__sprint_r.part.0+0x66>
  406bc4:	6893      	ldr	r3, [r2, #8]
  406bc6:	6812      	ldr	r2, [r2, #0]
  406bc8:	b33b      	cbz	r3, 406c1a <__sprint_r.part.0+0x62>
  406bca:	460f      	mov	r7, r1
  406bcc:	4680      	mov	r8, r0
  406bce:	f102 0908 	add.w	r9, r2, #8
  406bd2:	e919 0060 	ldmdb	r9, {r5, r6}
  406bd6:	08b6      	lsrs	r6, r6, #2
  406bd8:	d017      	beq.n	406c0a <__sprint_r.part.0+0x52>
  406bda:	3d04      	subs	r5, #4
  406bdc:	2400      	movs	r4, #0
  406bde:	e001      	b.n	406be4 <__sprint_r.part.0+0x2c>
  406be0:	42a6      	cmp	r6, r4
  406be2:	d010      	beq.n	406c06 <__sprint_r.part.0+0x4e>
  406be4:	463a      	mov	r2, r7
  406be6:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406bea:	4640      	mov	r0, r8
  406bec:	f002 f92a 	bl	408e44 <_fputwc_r>
  406bf0:	1c43      	adds	r3, r0, #1
  406bf2:	f104 0401 	add.w	r4, r4, #1
  406bf6:	d1f3      	bne.n	406be0 <__sprint_r.part.0+0x28>
  406bf8:	2300      	movs	r3, #0
  406bfa:	f8ca 3008 	str.w	r3, [sl, #8]
  406bfe:	f8ca 3004 	str.w	r3, [sl, #4]
  406c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c06:	f8da 3008 	ldr.w	r3, [sl, #8]
  406c0a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  406c0e:	f8ca 3008 	str.w	r3, [sl, #8]
  406c12:	f109 0908 	add.w	r9, r9, #8
  406c16:	2b00      	cmp	r3, #0
  406c18:	d1db      	bne.n	406bd2 <__sprint_r.part.0+0x1a>
  406c1a:	2000      	movs	r0, #0
  406c1c:	e7ec      	b.n	406bf8 <__sprint_r.part.0+0x40>
  406c1e:	f002 fa59 	bl	4090d4 <__sfvwrite_r>
  406c22:	2300      	movs	r3, #0
  406c24:	f8ca 3008 	str.w	r3, [sl, #8]
  406c28:	f8ca 3004 	str.w	r3, [sl, #4]
  406c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00406c30 <_vfiprintf_r>:
  406c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c34:	b0ab      	sub	sp, #172	; 0xac
  406c36:	461c      	mov	r4, r3
  406c38:	9100      	str	r1, [sp, #0]
  406c3a:	4690      	mov	r8, r2
  406c3c:	9304      	str	r3, [sp, #16]
  406c3e:	9005      	str	r0, [sp, #20]
  406c40:	b118      	cbz	r0, 406c4a <_vfiprintf_r+0x1a>
  406c42:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406c44:	2b00      	cmp	r3, #0
  406c46:	f000 80de 	beq.w	406e06 <_vfiprintf_r+0x1d6>
  406c4a:	9800      	ldr	r0, [sp, #0]
  406c4c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  406c50:	b28a      	uxth	r2, r1
  406c52:	0495      	lsls	r5, r2, #18
  406c54:	d407      	bmi.n	406c66 <_vfiprintf_r+0x36>
  406c56:	6e43      	ldr	r3, [r0, #100]	; 0x64
  406c58:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  406c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406c60:	8182      	strh	r2, [r0, #12]
  406c62:	6643      	str	r3, [r0, #100]	; 0x64
  406c64:	b292      	uxth	r2, r2
  406c66:	0711      	lsls	r1, r2, #28
  406c68:	f140 80b1 	bpl.w	406dce <_vfiprintf_r+0x19e>
  406c6c:	9b00      	ldr	r3, [sp, #0]
  406c6e:	691b      	ldr	r3, [r3, #16]
  406c70:	2b00      	cmp	r3, #0
  406c72:	f000 80ac 	beq.w	406dce <_vfiprintf_r+0x19e>
  406c76:	f002 021a 	and.w	r2, r2, #26
  406c7a:	2a0a      	cmp	r2, #10
  406c7c:	f000 80b5 	beq.w	406dea <_vfiprintf_r+0x1ba>
  406c80:	2300      	movs	r3, #0
  406c82:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  406c86:	9302      	str	r3, [sp, #8]
  406c88:	930f      	str	r3, [sp, #60]	; 0x3c
  406c8a:	930e      	str	r3, [sp, #56]	; 0x38
  406c8c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  406c90:	46da      	mov	sl, fp
  406c92:	f898 3000 	ldrb.w	r3, [r8]
  406c96:	4644      	mov	r4, r8
  406c98:	b1fb      	cbz	r3, 406cda <_vfiprintf_r+0xaa>
  406c9a:	2b25      	cmp	r3, #37	; 0x25
  406c9c:	d102      	bne.n	406ca4 <_vfiprintf_r+0x74>
  406c9e:	e01c      	b.n	406cda <_vfiprintf_r+0xaa>
  406ca0:	2b25      	cmp	r3, #37	; 0x25
  406ca2:	d003      	beq.n	406cac <_vfiprintf_r+0x7c>
  406ca4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406ca8:	2b00      	cmp	r3, #0
  406caa:	d1f9      	bne.n	406ca0 <_vfiprintf_r+0x70>
  406cac:	ebc8 0504 	rsb	r5, r8, r4
  406cb0:	b19d      	cbz	r5, 406cda <_vfiprintf_r+0xaa>
  406cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406cb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406cb6:	f8ca 8000 	str.w	r8, [sl]
  406cba:	3301      	adds	r3, #1
  406cbc:	442a      	add	r2, r5
  406cbe:	2b07      	cmp	r3, #7
  406cc0:	f8ca 5004 	str.w	r5, [sl, #4]
  406cc4:	920f      	str	r2, [sp, #60]	; 0x3c
  406cc6:	930e      	str	r3, [sp, #56]	; 0x38
  406cc8:	dd7b      	ble.n	406dc2 <_vfiprintf_r+0x192>
  406cca:	2a00      	cmp	r2, #0
  406ccc:	f040 8528 	bne.w	407720 <_vfiprintf_r+0xaf0>
  406cd0:	9b02      	ldr	r3, [sp, #8]
  406cd2:	920e      	str	r2, [sp, #56]	; 0x38
  406cd4:	442b      	add	r3, r5
  406cd6:	46da      	mov	sl, fp
  406cd8:	9302      	str	r3, [sp, #8]
  406cda:	7823      	ldrb	r3, [r4, #0]
  406cdc:	2b00      	cmp	r3, #0
  406cde:	f000 843e 	beq.w	40755e <_vfiprintf_r+0x92e>
  406ce2:	2100      	movs	r1, #0
  406ce4:	f04f 0300 	mov.w	r3, #0
  406ce8:	f04f 32ff 	mov.w	r2, #4294967295
  406cec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406cf0:	f104 0801 	add.w	r8, r4, #1
  406cf4:	7863      	ldrb	r3, [r4, #1]
  406cf6:	9201      	str	r2, [sp, #4]
  406cf8:	4608      	mov	r0, r1
  406cfa:	460e      	mov	r6, r1
  406cfc:	460c      	mov	r4, r1
  406cfe:	f108 0801 	add.w	r8, r8, #1
  406d02:	f1a3 0220 	sub.w	r2, r3, #32
  406d06:	2a58      	cmp	r2, #88	; 0x58
  406d08:	f200 8393 	bhi.w	407432 <_vfiprintf_r+0x802>
  406d0c:	e8df f012 	tbh	[pc, r2, lsl #1]
  406d10:	03910346 	.word	0x03910346
  406d14:	034e0391 	.word	0x034e0391
  406d18:	03910391 	.word	0x03910391
  406d1c:	03910391 	.word	0x03910391
  406d20:	03910391 	.word	0x03910391
  406d24:	02670289 	.word	0x02670289
  406d28:	00800391 	.word	0x00800391
  406d2c:	0391026c 	.word	0x0391026c
  406d30:	025901c6 	.word	0x025901c6
  406d34:	02590259 	.word	0x02590259
  406d38:	02590259 	.word	0x02590259
  406d3c:	02590259 	.word	0x02590259
  406d40:	02590259 	.word	0x02590259
  406d44:	03910391 	.word	0x03910391
  406d48:	03910391 	.word	0x03910391
  406d4c:	03910391 	.word	0x03910391
  406d50:	03910391 	.word	0x03910391
  406d54:	03910391 	.word	0x03910391
  406d58:	039101cb 	.word	0x039101cb
  406d5c:	03910391 	.word	0x03910391
  406d60:	03910391 	.word	0x03910391
  406d64:	03910391 	.word	0x03910391
  406d68:	03910391 	.word	0x03910391
  406d6c:	02140391 	.word	0x02140391
  406d70:	03910391 	.word	0x03910391
  406d74:	03910391 	.word	0x03910391
  406d78:	02ee0391 	.word	0x02ee0391
  406d7c:	03910391 	.word	0x03910391
  406d80:	03910311 	.word	0x03910311
  406d84:	03910391 	.word	0x03910391
  406d88:	03910391 	.word	0x03910391
  406d8c:	03910391 	.word	0x03910391
  406d90:	03910391 	.word	0x03910391
  406d94:	03340391 	.word	0x03340391
  406d98:	0391038a 	.word	0x0391038a
  406d9c:	03910391 	.word	0x03910391
  406da0:	038a0367 	.word	0x038a0367
  406da4:	03910391 	.word	0x03910391
  406da8:	0391036c 	.word	0x0391036c
  406dac:	02950379 	.word	0x02950379
  406db0:	02e90085 	.word	0x02e90085
  406db4:	029b0391 	.word	0x029b0391
  406db8:	02ba0391 	.word	0x02ba0391
  406dbc:	03910391 	.word	0x03910391
  406dc0:	0353      	.short	0x0353
  406dc2:	f10a 0a08 	add.w	sl, sl, #8
  406dc6:	9b02      	ldr	r3, [sp, #8]
  406dc8:	442b      	add	r3, r5
  406dca:	9302      	str	r3, [sp, #8]
  406dcc:	e785      	b.n	406cda <_vfiprintf_r+0xaa>
  406dce:	9900      	ldr	r1, [sp, #0]
  406dd0:	9805      	ldr	r0, [sp, #20]
  406dd2:	f000 fe61 	bl	407a98 <__swsetup_r>
  406dd6:	2800      	cmp	r0, #0
  406dd8:	f040 8558 	bne.w	40788c <_vfiprintf_r+0xc5c>
  406ddc:	9b00      	ldr	r3, [sp, #0]
  406dde:	899a      	ldrh	r2, [r3, #12]
  406de0:	f002 021a 	and.w	r2, r2, #26
  406de4:	2a0a      	cmp	r2, #10
  406de6:	f47f af4b 	bne.w	406c80 <_vfiprintf_r+0x50>
  406dea:	9900      	ldr	r1, [sp, #0]
  406dec:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  406df0:	2b00      	cmp	r3, #0
  406df2:	f6ff af45 	blt.w	406c80 <_vfiprintf_r+0x50>
  406df6:	4623      	mov	r3, r4
  406df8:	4642      	mov	r2, r8
  406dfa:	9805      	ldr	r0, [sp, #20]
  406dfc:	f000 fe16 	bl	407a2c <__sbprintf>
  406e00:	b02b      	add	sp, #172	; 0xac
  406e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e06:	f001 ffb3 	bl	408d70 <__sinit>
  406e0a:	e71e      	b.n	406c4a <_vfiprintf_r+0x1a>
  406e0c:	4264      	negs	r4, r4
  406e0e:	9304      	str	r3, [sp, #16]
  406e10:	f046 0604 	orr.w	r6, r6, #4
  406e14:	f898 3000 	ldrb.w	r3, [r8]
  406e18:	e771      	b.n	406cfe <_vfiprintf_r+0xce>
  406e1a:	2130      	movs	r1, #48	; 0x30
  406e1c:	9804      	ldr	r0, [sp, #16]
  406e1e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  406e22:	9901      	ldr	r1, [sp, #4]
  406e24:	9406      	str	r4, [sp, #24]
  406e26:	f04f 0300 	mov.w	r3, #0
  406e2a:	2278      	movs	r2, #120	; 0x78
  406e2c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  406e30:	2900      	cmp	r1, #0
  406e32:	4603      	mov	r3, r0
  406e34:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  406e38:	6804      	ldr	r4, [r0, #0]
  406e3a:	f103 0304 	add.w	r3, r3, #4
  406e3e:	f04f 0500 	mov.w	r5, #0
  406e42:	f046 0202 	orr.w	r2, r6, #2
  406e46:	f2c0 8525 	blt.w	407894 <_vfiprintf_r+0xc64>
  406e4a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  406e4e:	ea54 0205 	orrs.w	r2, r4, r5
  406e52:	f046 0602 	orr.w	r6, r6, #2
  406e56:	9304      	str	r3, [sp, #16]
  406e58:	f040 84bf 	bne.w	4077da <_vfiprintf_r+0xbaa>
  406e5c:	48b3      	ldr	r0, [pc, #716]	; (40712c <_vfiprintf_r+0x4fc>)
  406e5e:	9b01      	ldr	r3, [sp, #4]
  406e60:	2b00      	cmp	r3, #0
  406e62:	f040 841c 	bne.w	40769e <_vfiprintf_r+0xa6e>
  406e66:	4699      	mov	r9, r3
  406e68:	2300      	movs	r3, #0
  406e6a:	9301      	str	r3, [sp, #4]
  406e6c:	9303      	str	r3, [sp, #12]
  406e6e:	465f      	mov	r7, fp
  406e70:	9b01      	ldr	r3, [sp, #4]
  406e72:	9a03      	ldr	r2, [sp, #12]
  406e74:	4293      	cmp	r3, r2
  406e76:	bfb8      	it	lt
  406e78:	4613      	movlt	r3, r2
  406e7a:	461d      	mov	r5, r3
  406e7c:	f1b9 0f00 	cmp.w	r9, #0
  406e80:	d000      	beq.n	406e84 <_vfiprintf_r+0x254>
  406e82:	3501      	adds	r5, #1
  406e84:	f016 0302 	ands.w	r3, r6, #2
  406e88:	9307      	str	r3, [sp, #28]
  406e8a:	bf18      	it	ne
  406e8c:	3502      	addne	r5, #2
  406e8e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  406e92:	9308      	str	r3, [sp, #32]
  406e94:	f040 82f1 	bne.w	40747a <_vfiprintf_r+0x84a>
  406e98:	9b06      	ldr	r3, [sp, #24]
  406e9a:	1b5c      	subs	r4, r3, r5
  406e9c:	2c00      	cmp	r4, #0
  406e9e:	f340 82ec 	ble.w	40747a <_vfiprintf_r+0x84a>
  406ea2:	2c10      	cmp	r4, #16
  406ea4:	f340 8556 	ble.w	407954 <_vfiprintf_r+0xd24>
  406ea8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 407130 <_vfiprintf_r+0x500>
  406eac:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  406eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406eb2:	46d4      	mov	ip, sl
  406eb4:	2310      	movs	r3, #16
  406eb6:	46c2      	mov	sl, r8
  406eb8:	4670      	mov	r0, lr
  406eba:	46a8      	mov	r8, r5
  406ebc:	464d      	mov	r5, r9
  406ebe:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406ec2:	e007      	b.n	406ed4 <_vfiprintf_r+0x2a4>
  406ec4:	f100 0e02 	add.w	lr, r0, #2
  406ec8:	f10c 0c08 	add.w	ip, ip, #8
  406ecc:	4608      	mov	r0, r1
  406ece:	3c10      	subs	r4, #16
  406ed0:	2c10      	cmp	r4, #16
  406ed2:	dd13      	ble.n	406efc <_vfiprintf_r+0x2cc>
  406ed4:	1c41      	adds	r1, r0, #1
  406ed6:	3210      	adds	r2, #16
  406ed8:	2907      	cmp	r1, #7
  406eda:	920f      	str	r2, [sp, #60]	; 0x3c
  406edc:	f8cc 5000 	str.w	r5, [ip]
  406ee0:	f8cc 3004 	str.w	r3, [ip, #4]
  406ee4:	910e      	str	r1, [sp, #56]	; 0x38
  406ee6:	dded      	ble.n	406ec4 <_vfiprintf_r+0x294>
  406ee8:	2a00      	cmp	r2, #0
  406eea:	f040 82b7 	bne.w	40745c <_vfiprintf_r+0x82c>
  406eee:	3c10      	subs	r4, #16
  406ef0:	2c10      	cmp	r4, #16
  406ef2:	4610      	mov	r0, r2
  406ef4:	f04f 0e01 	mov.w	lr, #1
  406ef8:	46dc      	mov	ip, fp
  406efa:	dceb      	bgt.n	406ed4 <_vfiprintf_r+0x2a4>
  406efc:	46a9      	mov	r9, r5
  406efe:	4670      	mov	r0, lr
  406f00:	4645      	mov	r5, r8
  406f02:	46d0      	mov	r8, sl
  406f04:	46e2      	mov	sl, ip
  406f06:	4422      	add	r2, r4
  406f08:	2807      	cmp	r0, #7
  406f0a:	920f      	str	r2, [sp, #60]	; 0x3c
  406f0c:	f8ca 9000 	str.w	r9, [sl]
  406f10:	f8ca 4004 	str.w	r4, [sl, #4]
  406f14:	900e      	str	r0, [sp, #56]	; 0x38
  406f16:	f300 8375 	bgt.w	407604 <_vfiprintf_r+0x9d4>
  406f1a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  406f1e:	f10a 0a08 	add.w	sl, sl, #8
  406f22:	f100 0e01 	add.w	lr, r0, #1
  406f26:	2b00      	cmp	r3, #0
  406f28:	f040 82b0 	bne.w	40748c <_vfiprintf_r+0x85c>
  406f2c:	9b07      	ldr	r3, [sp, #28]
  406f2e:	2b00      	cmp	r3, #0
  406f30:	f000 82c3 	beq.w	4074ba <_vfiprintf_r+0x88a>
  406f34:	3202      	adds	r2, #2
  406f36:	a90c      	add	r1, sp, #48	; 0x30
  406f38:	2302      	movs	r3, #2
  406f3a:	f1be 0f07 	cmp.w	lr, #7
  406f3e:	920f      	str	r2, [sp, #60]	; 0x3c
  406f40:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  406f44:	e88a 000a 	stmia.w	sl, {r1, r3}
  406f48:	f340 8378 	ble.w	40763c <_vfiprintf_r+0xa0c>
  406f4c:	2a00      	cmp	r2, #0
  406f4e:	f040 840a 	bne.w	407766 <_vfiprintf_r+0xb36>
  406f52:	9b08      	ldr	r3, [sp, #32]
  406f54:	2b80      	cmp	r3, #128	; 0x80
  406f56:	f04f 0e01 	mov.w	lr, #1
  406f5a:	4610      	mov	r0, r2
  406f5c:	46da      	mov	sl, fp
  406f5e:	f040 82b0 	bne.w	4074c2 <_vfiprintf_r+0x892>
  406f62:	9b06      	ldr	r3, [sp, #24]
  406f64:	1b5c      	subs	r4, r3, r5
  406f66:	2c00      	cmp	r4, #0
  406f68:	f340 82ab 	ble.w	4074c2 <_vfiprintf_r+0x892>
  406f6c:	2c10      	cmp	r4, #16
  406f6e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 407134 <_vfiprintf_r+0x504>
  406f72:	f340 850b 	ble.w	40798c <_vfiprintf_r+0xd5c>
  406f76:	46d6      	mov	lr, sl
  406f78:	2310      	movs	r3, #16
  406f7a:	46c2      	mov	sl, r8
  406f7c:	46a8      	mov	r8, r5
  406f7e:	464d      	mov	r5, r9
  406f80:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406f84:	e007      	b.n	406f96 <_vfiprintf_r+0x366>
  406f86:	f100 0c02 	add.w	ip, r0, #2
  406f8a:	f10e 0e08 	add.w	lr, lr, #8
  406f8e:	4608      	mov	r0, r1
  406f90:	3c10      	subs	r4, #16
  406f92:	2c10      	cmp	r4, #16
  406f94:	dd13      	ble.n	406fbe <_vfiprintf_r+0x38e>
  406f96:	1c41      	adds	r1, r0, #1
  406f98:	3210      	adds	r2, #16
  406f9a:	2907      	cmp	r1, #7
  406f9c:	920f      	str	r2, [sp, #60]	; 0x3c
  406f9e:	f8ce 5000 	str.w	r5, [lr]
  406fa2:	f8ce 3004 	str.w	r3, [lr, #4]
  406fa6:	910e      	str	r1, [sp, #56]	; 0x38
  406fa8:	dded      	ble.n	406f86 <_vfiprintf_r+0x356>
  406faa:	2a00      	cmp	r2, #0
  406fac:	f040 8315 	bne.w	4075da <_vfiprintf_r+0x9aa>
  406fb0:	3c10      	subs	r4, #16
  406fb2:	2c10      	cmp	r4, #16
  406fb4:	f04f 0c01 	mov.w	ip, #1
  406fb8:	4610      	mov	r0, r2
  406fba:	46de      	mov	lr, fp
  406fbc:	dceb      	bgt.n	406f96 <_vfiprintf_r+0x366>
  406fbe:	46a9      	mov	r9, r5
  406fc0:	4645      	mov	r5, r8
  406fc2:	46d0      	mov	r8, sl
  406fc4:	46f2      	mov	sl, lr
  406fc6:	4422      	add	r2, r4
  406fc8:	f1bc 0f07 	cmp.w	ip, #7
  406fcc:	920f      	str	r2, [sp, #60]	; 0x3c
  406fce:	f8ca 9000 	str.w	r9, [sl]
  406fd2:	f8ca 4004 	str.w	r4, [sl, #4]
  406fd6:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  406fda:	f300 83d2 	bgt.w	407782 <_vfiprintf_r+0xb52>
  406fde:	9b01      	ldr	r3, [sp, #4]
  406fe0:	9903      	ldr	r1, [sp, #12]
  406fe2:	1a5c      	subs	r4, r3, r1
  406fe4:	2c00      	cmp	r4, #0
  406fe6:	f10a 0a08 	add.w	sl, sl, #8
  406fea:	f10c 0e01 	add.w	lr, ip, #1
  406fee:	4660      	mov	r0, ip
  406ff0:	f300 826d 	bgt.w	4074ce <_vfiprintf_r+0x89e>
  406ff4:	9903      	ldr	r1, [sp, #12]
  406ff6:	f8ca 7000 	str.w	r7, [sl]
  406ffa:	440a      	add	r2, r1
  406ffc:	f1be 0f07 	cmp.w	lr, #7
  407000:	920f      	str	r2, [sp, #60]	; 0x3c
  407002:	f8ca 1004 	str.w	r1, [sl, #4]
  407006:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40700a:	f340 82ce 	ble.w	4075aa <_vfiprintf_r+0x97a>
  40700e:	2a00      	cmp	r2, #0
  407010:	f040 833a 	bne.w	407688 <_vfiprintf_r+0xa58>
  407014:	0770      	lsls	r0, r6, #29
  407016:	920e      	str	r2, [sp, #56]	; 0x38
  407018:	d538      	bpl.n	40708c <_vfiprintf_r+0x45c>
  40701a:	9b06      	ldr	r3, [sp, #24]
  40701c:	1b5c      	subs	r4, r3, r5
  40701e:	2c00      	cmp	r4, #0
  407020:	dd34      	ble.n	40708c <_vfiprintf_r+0x45c>
  407022:	46da      	mov	sl, fp
  407024:	2c10      	cmp	r4, #16
  407026:	f340 84ab 	ble.w	407980 <_vfiprintf_r+0xd50>
  40702a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 407130 <_vfiprintf_r+0x500>
  40702e:	990e      	ldr	r1, [sp, #56]	; 0x38
  407030:	464f      	mov	r7, r9
  407032:	2610      	movs	r6, #16
  407034:	f8dd 9014 	ldr.w	r9, [sp, #20]
  407038:	e006      	b.n	407048 <_vfiprintf_r+0x418>
  40703a:	1c88      	adds	r0, r1, #2
  40703c:	f10a 0a08 	add.w	sl, sl, #8
  407040:	4619      	mov	r1, r3
  407042:	3c10      	subs	r4, #16
  407044:	2c10      	cmp	r4, #16
  407046:	dd13      	ble.n	407070 <_vfiprintf_r+0x440>
  407048:	1c4b      	adds	r3, r1, #1
  40704a:	3210      	adds	r2, #16
  40704c:	2b07      	cmp	r3, #7
  40704e:	920f      	str	r2, [sp, #60]	; 0x3c
  407050:	f8ca 7000 	str.w	r7, [sl]
  407054:	f8ca 6004 	str.w	r6, [sl, #4]
  407058:	930e      	str	r3, [sp, #56]	; 0x38
  40705a:	ddee      	ble.n	40703a <_vfiprintf_r+0x40a>
  40705c:	2a00      	cmp	r2, #0
  40705e:	f040 828e 	bne.w	40757e <_vfiprintf_r+0x94e>
  407062:	3c10      	subs	r4, #16
  407064:	2c10      	cmp	r4, #16
  407066:	f04f 0001 	mov.w	r0, #1
  40706a:	4611      	mov	r1, r2
  40706c:	46da      	mov	sl, fp
  40706e:	dceb      	bgt.n	407048 <_vfiprintf_r+0x418>
  407070:	46b9      	mov	r9, r7
  407072:	4422      	add	r2, r4
  407074:	2807      	cmp	r0, #7
  407076:	920f      	str	r2, [sp, #60]	; 0x3c
  407078:	f8ca 9000 	str.w	r9, [sl]
  40707c:	f8ca 4004 	str.w	r4, [sl, #4]
  407080:	900e      	str	r0, [sp, #56]	; 0x38
  407082:	f340 829b 	ble.w	4075bc <_vfiprintf_r+0x98c>
  407086:	2a00      	cmp	r2, #0
  407088:	f040 8425 	bne.w	4078d6 <_vfiprintf_r+0xca6>
  40708c:	9b02      	ldr	r3, [sp, #8]
  40708e:	9a06      	ldr	r2, [sp, #24]
  407090:	42aa      	cmp	r2, r5
  407092:	bfac      	ite	ge
  407094:	189b      	addge	r3, r3, r2
  407096:	195b      	addlt	r3, r3, r5
  407098:	9302      	str	r3, [sp, #8]
  40709a:	e299      	b.n	4075d0 <_vfiprintf_r+0x9a0>
  40709c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4070a0:	f898 3000 	ldrb.w	r3, [r8]
  4070a4:	e62b      	b.n	406cfe <_vfiprintf_r+0xce>
  4070a6:	9406      	str	r4, [sp, #24]
  4070a8:	2900      	cmp	r1, #0
  4070aa:	f040 84af 	bne.w	407a0c <_vfiprintf_r+0xddc>
  4070ae:	f046 0610 	orr.w	r6, r6, #16
  4070b2:	06b3      	lsls	r3, r6, #26
  4070b4:	f140 8312 	bpl.w	4076dc <_vfiprintf_r+0xaac>
  4070b8:	9904      	ldr	r1, [sp, #16]
  4070ba:	3107      	adds	r1, #7
  4070bc:	f021 0107 	bic.w	r1, r1, #7
  4070c0:	e9d1 2300 	ldrd	r2, r3, [r1]
  4070c4:	3108      	adds	r1, #8
  4070c6:	9104      	str	r1, [sp, #16]
  4070c8:	4614      	mov	r4, r2
  4070ca:	461d      	mov	r5, r3
  4070cc:	2a00      	cmp	r2, #0
  4070ce:	f173 0300 	sbcs.w	r3, r3, #0
  4070d2:	f2c0 8386 	blt.w	4077e2 <_vfiprintf_r+0xbb2>
  4070d6:	9b01      	ldr	r3, [sp, #4]
  4070d8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4070dc:	2b00      	cmp	r3, #0
  4070de:	f2c0 831a 	blt.w	407716 <_vfiprintf_r+0xae6>
  4070e2:	ea54 0305 	orrs.w	r3, r4, r5
  4070e6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4070ea:	f000 80ed 	beq.w	4072c8 <_vfiprintf_r+0x698>
  4070ee:	2d00      	cmp	r5, #0
  4070f0:	bf08      	it	eq
  4070f2:	2c0a      	cmpeq	r4, #10
  4070f4:	f0c0 80ed 	bcc.w	4072d2 <_vfiprintf_r+0x6a2>
  4070f8:	465f      	mov	r7, fp
  4070fa:	4620      	mov	r0, r4
  4070fc:	4629      	mov	r1, r5
  4070fe:	220a      	movs	r2, #10
  407100:	2300      	movs	r3, #0
  407102:	f004 fa57 	bl	40b5b4 <__aeabi_uldivmod>
  407106:	3230      	adds	r2, #48	; 0x30
  407108:	f807 2d01 	strb.w	r2, [r7, #-1]!
  40710c:	4620      	mov	r0, r4
  40710e:	4629      	mov	r1, r5
  407110:	2300      	movs	r3, #0
  407112:	220a      	movs	r2, #10
  407114:	f004 fa4e 	bl	40b5b4 <__aeabi_uldivmod>
  407118:	4604      	mov	r4, r0
  40711a:	460d      	mov	r5, r1
  40711c:	ea54 0305 	orrs.w	r3, r4, r5
  407120:	d1eb      	bne.n	4070fa <_vfiprintf_r+0x4ca>
  407122:	ebc7 030b 	rsb	r3, r7, fp
  407126:	9303      	str	r3, [sp, #12]
  407128:	e6a2      	b.n	406e70 <_vfiprintf_r+0x240>
  40712a:	bf00      	nop
  40712c:	0040cbac 	.word	0x0040cbac
  407130:	0040cbec 	.word	0x0040cbec
  407134:	0040cbdc 	.word	0x0040cbdc
  407138:	9406      	str	r4, [sp, #24]
  40713a:	2900      	cmp	r1, #0
  40713c:	f040 8462 	bne.w	407a04 <_vfiprintf_r+0xdd4>
  407140:	f046 0610 	orr.w	r6, r6, #16
  407144:	f016 0320 	ands.w	r3, r6, #32
  407148:	f000 82ae 	beq.w	4076a8 <_vfiprintf_r+0xa78>
  40714c:	9b04      	ldr	r3, [sp, #16]
  40714e:	3307      	adds	r3, #7
  407150:	f023 0307 	bic.w	r3, r3, #7
  407154:	f04f 0200 	mov.w	r2, #0
  407158:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40715c:	e9d3 4500 	ldrd	r4, r5, [r3]
  407160:	f103 0208 	add.w	r2, r3, #8
  407164:	9b01      	ldr	r3, [sp, #4]
  407166:	9204      	str	r2, [sp, #16]
  407168:	2b00      	cmp	r3, #0
  40716a:	f2c0 8174 	blt.w	407456 <_vfiprintf_r+0x826>
  40716e:	ea54 0305 	orrs.w	r3, r4, r5
  407172:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  407176:	f040 816e 	bne.w	407456 <_vfiprintf_r+0x826>
  40717a:	9b01      	ldr	r3, [sp, #4]
  40717c:	2b00      	cmp	r3, #0
  40717e:	f000 8430 	beq.w	4079e2 <_vfiprintf_r+0xdb2>
  407182:	f04f 0900 	mov.w	r9, #0
  407186:	2400      	movs	r4, #0
  407188:	2500      	movs	r5, #0
  40718a:	465f      	mov	r7, fp
  40718c:	08e2      	lsrs	r2, r4, #3
  40718e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  407192:	08e9      	lsrs	r1, r5, #3
  407194:	f004 0307 	and.w	r3, r4, #7
  407198:	460d      	mov	r5, r1
  40719a:	4614      	mov	r4, r2
  40719c:	3330      	adds	r3, #48	; 0x30
  40719e:	ea54 0205 	orrs.w	r2, r4, r5
  4071a2:	f807 3d01 	strb.w	r3, [r7, #-1]!
  4071a6:	d1f1      	bne.n	40718c <_vfiprintf_r+0x55c>
  4071a8:	07f4      	lsls	r4, r6, #31
  4071aa:	d5ba      	bpl.n	407122 <_vfiprintf_r+0x4f2>
  4071ac:	2b30      	cmp	r3, #48	; 0x30
  4071ae:	d0b8      	beq.n	407122 <_vfiprintf_r+0x4f2>
  4071b0:	2230      	movs	r2, #48	; 0x30
  4071b2:	1e7b      	subs	r3, r7, #1
  4071b4:	f807 2c01 	strb.w	r2, [r7, #-1]
  4071b8:	ebc3 020b 	rsb	r2, r3, fp
  4071bc:	9203      	str	r2, [sp, #12]
  4071be:	461f      	mov	r7, r3
  4071c0:	e656      	b.n	406e70 <_vfiprintf_r+0x240>
  4071c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4071c6:	2400      	movs	r4, #0
  4071c8:	f818 3b01 	ldrb.w	r3, [r8], #1
  4071cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4071d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4071d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4071d8:	2a09      	cmp	r2, #9
  4071da:	d9f5      	bls.n	4071c8 <_vfiprintf_r+0x598>
  4071dc:	e591      	b.n	406d02 <_vfiprintf_r+0xd2>
  4071de:	f898 3000 	ldrb.w	r3, [r8]
  4071e2:	2101      	movs	r1, #1
  4071e4:	202b      	movs	r0, #43	; 0x2b
  4071e6:	e58a      	b.n	406cfe <_vfiprintf_r+0xce>
  4071e8:	f898 3000 	ldrb.w	r3, [r8]
  4071ec:	2b2a      	cmp	r3, #42	; 0x2a
  4071ee:	f108 0501 	add.w	r5, r8, #1
  4071f2:	f000 83dd 	beq.w	4079b0 <_vfiprintf_r+0xd80>
  4071f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4071fa:	2a09      	cmp	r2, #9
  4071fc:	46a8      	mov	r8, r5
  4071fe:	bf98      	it	ls
  407200:	2500      	movls	r5, #0
  407202:	f200 83ce 	bhi.w	4079a2 <_vfiprintf_r+0xd72>
  407206:	f818 3b01 	ldrb.w	r3, [r8], #1
  40720a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40720e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  407212:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  407216:	2a09      	cmp	r2, #9
  407218:	d9f5      	bls.n	407206 <_vfiprintf_r+0x5d6>
  40721a:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  40721e:	9201      	str	r2, [sp, #4]
  407220:	e56f      	b.n	406d02 <_vfiprintf_r+0xd2>
  407222:	9a04      	ldr	r2, [sp, #16]
  407224:	6814      	ldr	r4, [r2, #0]
  407226:	4613      	mov	r3, r2
  407228:	2c00      	cmp	r4, #0
  40722a:	f103 0304 	add.w	r3, r3, #4
  40722e:	f6ff aded 	blt.w	406e0c <_vfiprintf_r+0x1dc>
  407232:	9304      	str	r3, [sp, #16]
  407234:	f898 3000 	ldrb.w	r3, [r8]
  407238:	e561      	b.n	406cfe <_vfiprintf_r+0xce>
  40723a:	9406      	str	r4, [sp, #24]
  40723c:	2900      	cmp	r1, #0
  40723e:	d081      	beq.n	407144 <_vfiprintf_r+0x514>
  407240:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407244:	e77e      	b.n	407144 <_vfiprintf_r+0x514>
  407246:	9a04      	ldr	r2, [sp, #16]
  407248:	9406      	str	r4, [sp, #24]
  40724a:	6817      	ldr	r7, [r2, #0]
  40724c:	f04f 0300 	mov.w	r3, #0
  407250:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  407254:	1d14      	adds	r4, r2, #4
  407256:	9b01      	ldr	r3, [sp, #4]
  407258:	2f00      	cmp	r7, #0
  40725a:	f000 8386 	beq.w	40796a <_vfiprintf_r+0xd3a>
  40725e:	2b00      	cmp	r3, #0
  407260:	f2c0 835f 	blt.w	407922 <_vfiprintf_r+0xcf2>
  407264:	461a      	mov	r2, r3
  407266:	2100      	movs	r1, #0
  407268:	4638      	mov	r0, r7
  40726a:	f002 fc21 	bl	409ab0 <memchr>
  40726e:	2800      	cmp	r0, #0
  407270:	f000 838f 	beq.w	407992 <_vfiprintf_r+0xd62>
  407274:	1bc3      	subs	r3, r0, r7
  407276:	9303      	str	r3, [sp, #12]
  407278:	2300      	movs	r3, #0
  40727a:	9404      	str	r4, [sp, #16]
  40727c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  407280:	9301      	str	r3, [sp, #4]
  407282:	e5f5      	b.n	406e70 <_vfiprintf_r+0x240>
  407284:	9406      	str	r4, [sp, #24]
  407286:	2900      	cmp	r1, #0
  407288:	f040 83b9 	bne.w	4079fe <_vfiprintf_r+0xdce>
  40728c:	f016 0920 	ands.w	r9, r6, #32
  407290:	d135      	bne.n	4072fe <_vfiprintf_r+0x6ce>
  407292:	f016 0310 	ands.w	r3, r6, #16
  407296:	d103      	bne.n	4072a0 <_vfiprintf_r+0x670>
  407298:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40729c:	f040 832a 	bne.w	4078f4 <_vfiprintf_r+0xcc4>
  4072a0:	9a04      	ldr	r2, [sp, #16]
  4072a2:	4613      	mov	r3, r2
  4072a4:	6814      	ldr	r4, [r2, #0]
  4072a6:	9a01      	ldr	r2, [sp, #4]
  4072a8:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4072ac:	2a00      	cmp	r2, #0
  4072ae:	f103 0304 	add.w	r3, r3, #4
  4072b2:	f04f 0500 	mov.w	r5, #0
  4072b6:	f2c0 8332 	blt.w	40791e <_vfiprintf_r+0xcee>
  4072ba:	ea54 0205 	orrs.w	r2, r4, r5
  4072be:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4072c2:	9304      	str	r3, [sp, #16]
  4072c4:	f47f af13 	bne.w	4070ee <_vfiprintf_r+0x4be>
  4072c8:	9b01      	ldr	r3, [sp, #4]
  4072ca:	2b00      	cmp	r3, #0
  4072cc:	f43f adcc 	beq.w	406e68 <_vfiprintf_r+0x238>
  4072d0:	2400      	movs	r4, #0
  4072d2:	af2a      	add	r7, sp, #168	; 0xa8
  4072d4:	3430      	adds	r4, #48	; 0x30
  4072d6:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4072da:	ebc7 030b 	rsb	r3, r7, fp
  4072de:	9303      	str	r3, [sp, #12]
  4072e0:	e5c6      	b.n	406e70 <_vfiprintf_r+0x240>
  4072e2:	f046 0620 	orr.w	r6, r6, #32
  4072e6:	f898 3000 	ldrb.w	r3, [r8]
  4072ea:	e508      	b.n	406cfe <_vfiprintf_r+0xce>
  4072ec:	9406      	str	r4, [sp, #24]
  4072ee:	2900      	cmp	r1, #0
  4072f0:	f040 836e 	bne.w	4079d0 <_vfiprintf_r+0xda0>
  4072f4:	f046 0610 	orr.w	r6, r6, #16
  4072f8:	f016 0920 	ands.w	r9, r6, #32
  4072fc:	d0c9      	beq.n	407292 <_vfiprintf_r+0x662>
  4072fe:	9b04      	ldr	r3, [sp, #16]
  407300:	3307      	adds	r3, #7
  407302:	f023 0307 	bic.w	r3, r3, #7
  407306:	f04f 0200 	mov.w	r2, #0
  40730a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40730e:	e9d3 4500 	ldrd	r4, r5, [r3]
  407312:	f103 0208 	add.w	r2, r3, #8
  407316:	9b01      	ldr	r3, [sp, #4]
  407318:	9204      	str	r2, [sp, #16]
  40731a:	2b00      	cmp	r3, #0
  40731c:	f2c0 81f9 	blt.w	407712 <_vfiprintf_r+0xae2>
  407320:	ea54 0305 	orrs.w	r3, r4, r5
  407324:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  407328:	f04f 0900 	mov.w	r9, #0
  40732c:	f47f aedf 	bne.w	4070ee <_vfiprintf_r+0x4be>
  407330:	e7ca      	b.n	4072c8 <_vfiprintf_r+0x698>
  407332:	9406      	str	r4, [sp, #24]
  407334:	2900      	cmp	r1, #0
  407336:	f040 8351 	bne.w	4079dc <_vfiprintf_r+0xdac>
  40733a:	06b2      	lsls	r2, r6, #26
  40733c:	48ae      	ldr	r0, [pc, #696]	; (4075f8 <_vfiprintf_r+0x9c8>)
  40733e:	d541      	bpl.n	4073c4 <_vfiprintf_r+0x794>
  407340:	9a04      	ldr	r2, [sp, #16]
  407342:	3207      	adds	r2, #7
  407344:	f022 0207 	bic.w	r2, r2, #7
  407348:	e9d2 4500 	ldrd	r4, r5, [r2]
  40734c:	f102 0108 	add.w	r1, r2, #8
  407350:	9104      	str	r1, [sp, #16]
  407352:	f016 0901 	ands.w	r9, r6, #1
  407356:	f000 8177 	beq.w	407648 <_vfiprintf_r+0xa18>
  40735a:	ea54 0205 	orrs.w	r2, r4, r5
  40735e:	f040 8226 	bne.w	4077ae <_vfiprintf_r+0xb7e>
  407362:	f04f 0300 	mov.w	r3, #0
  407366:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40736a:	9b01      	ldr	r3, [sp, #4]
  40736c:	2b00      	cmp	r3, #0
  40736e:	f2c0 8196 	blt.w	40769e <_vfiprintf_r+0xa6e>
  407372:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  407376:	e572      	b.n	406e5e <_vfiprintf_r+0x22e>
  407378:	9a04      	ldr	r2, [sp, #16]
  40737a:	9406      	str	r4, [sp, #24]
  40737c:	6813      	ldr	r3, [r2, #0]
  40737e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  407382:	4613      	mov	r3, r2
  407384:	f04f 0100 	mov.w	r1, #0
  407388:	2501      	movs	r5, #1
  40738a:	3304      	adds	r3, #4
  40738c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  407390:	9304      	str	r3, [sp, #16]
  407392:	9503      	str	r5, [sp, #12]
  407394:	af10      	add	r7, sp, #64	; 0x40
  407396:	2300      	movs	r3, #0
  407398:	9301      	str	r3, [sp, #4]
  40739a:	e573      	b.n	406e84 <_vfiprintf_r+0x254>
  40739c:	f898 3000 	ldrb.w	r3, [r8]
  4073a0:	2800      	cmp	r0, #0
  4073a2:	f47f acac 	bne.w	406cfe <_vfiprintf_r+0xce>
  4073a6:	2101      	movs	r1, #1
  4073a8:	2020      	movs	r0, #32
  4073aa:	e4a8      	b.n	406cfe <_vfiprintf_r+0xce>
  4073ac:	f046 0601 	orr.w	r6, r6, #1
  4073b0:	f898 3000 	ldrb.w	r3, [r8]
  4073b4:	e4a3      	b.n	406cfe <_vfiprintf_r+0xce>
  4073b6:	9406      	str	r4, [sp, #24]
  4073b8:	2900      	cmp	r1, #0
  4073ba:	f040 830c 	bne.w	4079d6 <_vfiprintf_r+0xda6>
  4073be:	06b2      	lsls	r2, r6, #26
  4073c0:	488e      	ldr	r0, [pc, #568]	; (4075fc <_vfiprintf_r+0x9cc>)
  4073c2:	d4bd      	bmi.n	407340 <_vfiprintf_r+0x710>
  4073c4:	9904      	ldr	r1, [sp, #16]
  4073c6:	06f7      	lsls	r7, r6, #27
  4073c8:	460a      	mov	r2, r1
  4073ca:	f100 819d 	bmi.w	407708 <_vfiprintf_r+0xad8>
  4073ce:	0675      	lsls	r5, r6, #25
  4073d0:	f140 819a 	bpl.w	407708 <_vfiprintf_r+0xad8>
  4073d4:	3204      	adds	r2, #4
  4073d6:	880c      	ldrh	r4, [r1, #0]
  4073d8:	9204      	str	r2, [sp, #16]
  4073da:	2500      	movs	r5, #0
  4073dc:	e7b9      	b.n	407352 <_vfiprintf_r+0x722>
  4073de:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4073e2:	f898 3000 	ldrb.w	r3, [r8]
  4073e6:	e48a      	b.n	406cfe <_vfiprintf_r+0xce>
  4073e8:	f898 3000 	ldrb.w	r3, [r8]
  4073ec:	2b6c      	cmp	r3, #108	; 0x6c
  4073ee:	bf03      	ittte	eq
  4073f0:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  4073f4:	f046 0620 	orreq.w	r6, r6, #32
  4073f8:	f108 0801 	addeq.w	r8, r8, #1
  4073fc:	f046 0610 	orrne.w	r6, r6, #16
  407400:	e47d      	b.n	406cfe <_vfiprintf_r+0xce>
  407402:	2900      	cmp	r1, #0
  407404:	f040 8309 	bne.w	407a1a <_vfiprintf_r+0xdea>
  407408:	06b4      	lsls	r4, r6, #26
  40740a:	f140 821c 	bpl.w	407846 <_vfiprintf_r+0xc16>
  40740e:	9a04      	ldr	r2, [sp, #16]
  407410:	9902      	ldr	r1, [sp, #8]
  407412:	6813      	ldr	r3, [r2, #0]
  407414:	17cd      	asrs	r5, r1, #31
  407416:	4608      	mov	r0, r1
  407418:	3204      	adds	r2, #4
  40741a:	4629      	mov	r1, r5
  40741c:	9204      	str	r2, [sp, #16]
  40741e:	e9c3 0100 	strd	r0, r1, [r3]
  407422:	e436      	b.n	406c92 <_vfiprintf_r+0x62>
  407424:	9406      	str	r4, [sp, #24]
  407426:	2900      	cmp	r1, #0
  407428:	f43f ae43 	beq.w	4070b2 <_vfiprintf_r+0x482>
  40742c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407430:	e63f      	b.n	4070b2 <_vfiprintf_r+0x482>
  407432:	9406      	str	r4, [sp, #24]
  407434:	2900      	cmp	r1, #0
  407436:	f040 82ed 	bne.w	407a14 <_vfiprintf_r+0xde4>
  40743a:	2b00      	cmp	r3, #0
  40743c:	f000 808f 	beq.w	40755e <_vfiprintf_r+0x92e>
  407440:	2501      	movs	r5, #1
  407442:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  407446:	f04f 0300 	mov.w	r3, #0
  40744a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40744e:	9503      	str	r5, [sp, #12]
  407450:	af10      	add	r7, sp, #64	; 0x40
  407452:	e7a0      	b.n	407396 <_vfiprintf_r+0x766>
  407454:	9304      	str	r3, [sp, #16]
  407456:	f04f 0900 	mov.w	r9, #0
  40745a:	e696      	b.n	40718a <_vfiprintf_r+0x55a>
  40745c:	aa0d      	add	r2, sp, #52	; 0x34
  40745e:	9900      	ldr	r1, [sp, #0]
  407460:	9309      	str	r3, [sp, #36]	; 0x24
  407462:	4648      	mov	r0, r9
  407464:	f7ff fba8 	bl	406bb8 <__sprint_r.part.0>
  407468:	2800      	cmp	r0, #0
  40746a:	d17f      	bne.n	40756c <_vfiprintf_r+0x93c>
  40746c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40746e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407470:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407472:	f100 0e01 	add.w	lr, r0, #1
  407476:	46dc      	mov	ip, fp
  407478:	e529      	b.n	406ece <_vfiprintf_r+0x29e>
  40747a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40747c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40747e:	f100 0e01 	add.w	lr, r0, #1
  407482:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  407486:	2b00      	cmp	r3, #0
  407488:	f43f ad50 	beq.w	406f2c <_vfiprintf_r+0x2fc>
  40748c:	3201      	adds	r2, #1
  40748e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  407492:	2301      	movs	r3, #1
  407494:	f1be 0f07 	cmp.w	lr, #7
  407498:	920f      	str	r2, [sp, #60]	; 0x3c
  40749a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40749e:	e88a 000a 	stmia.w	sl, {r1, r3}
  4074a2:	f340 80bf 	ble.w	407624 <_vfiprintf_r+0x9f4>
  4074a6:	2a00      	cmp	r2, #0
  4074a8:	f040 814e 	bne.w	407748 <_vfiprintf_r+0xb18>
  4074ac:	9907      	ldr	r1, [sp, #28]
  4074ae:	2900      	cmp	r1, #0
  4074b0:	f040 80be 	bne.w	407630 <_vfiprintf_r+0xa00>
  4074b4:	469e      	mov	lr, r3
  4074b6:	4610      	mov	r0, r2
  4074b8:	46da      	mov	sl, fp
  4074ba:	9b08      	ldr	r3, [sp, #32]
  4074bc:	2b80      	cmp	r3, #128	; 0x80
  4074be:	f43f ad50 	beq.w	406f62 <_vfiprintf_r+0x332>
  4074c2:	9b01      	ldr	r3, [sp, #4]
  4074c4:	9903      	ldr	r1, [sp, #12]
  4074c6:	1a5c      	subs	r4, r3, r1
  4074c8:	2c00      	cmp	r4, #0
  4074ca:	f77f ad93 	ble.w	406ff4 <_vfiprintf_r+0x3c4>
  4074ce:	2c10      	cmp	r4, #16
  4074d0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 407600 <_vfiprintf_r+0x9d0>
  4074d4:	dd25      	ble.n	407522 <_vfiprintf_r+0x8f2>
  4074d6:	46d4      	mov	ip, sl
  4074d8:	2310      	movs	r3, #16
  4074da:	46c2      	mov	sl, r8
  4074dc:	46a8      	mov	r8, r5
  4074de:	464d      	mov	r5, r9
  4074e0:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4074e4:	e007      	b.n	4074f6 <_vfiprintf_r+0x8c6>
  4074e6:	f100 0e02 	add.w	lr, r0, #2
  4074ea:	f10c 0c08 	add.w	ip, ip, #8
  4074ee:	4608      	mov	r0, r1
  4074f0:	3c10      	subs	r4, #16
  4074f2:	2c10      	cmp	r4, #16
  4074f4:	dd11      	ble.n	40751a <_vfiprintf_r+0x8ea>
  4074f6:	1c41      	adds	r1, r0, #1
  4074f8:	3210      	adds	r2, #16
  4074fa:	2907      	cmp	r1, #7
  4074fc:	920f      	str	r2, [sp, #60]	; 0x3c
  4074fe:	f8cc 5000 	str.w	r5, [ip]
  407502:	f8cc 3004 	str.w	r3, [ip, #4]
  407506:	910e      	str	r1, [sp, #56]	; 0x38
  407508:	dded      	ble.n	4074e6 <_vfiprintf_r+0x8b6>
  40750a:	b9d2      	cbnz	r2, 407542 <_vfiprintf_r+0x912>
  40750c:	3c10      	subs	r4, #16
  40750e:	2c10      	cmp	r4, #16
  407510:	f04f 0e01 	mov.w	lr, #1
  407514:	4610      	mov	r0, r2
  407516:	46dc      	mov	ip, fp
  407518:	dced      	bgt.n	4074f6 <_vfiprintf_r+0x8c6>
  40751a:	46a9      	mov	r9, r5
  40751c:	4645      	mov	r5, r8
  40751e:	46d0      	mov	r8, sl
  407520:	46e2      	mov	sl, ip
  407522:	4422      	add	r2, r4
  407524:	f1be 0f07 	cmp.w	lr, #7
  407528:	920f      	str	r2, [sp, #60]	; 0x3c
  40752a:	f8ca 9000 	str.w	r9, [sl]
  40752e:	f8ca 4004 	str.w	r4, [sl, #4]
  407532:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  407536:	dc2e      	bgt.n	407596 <_vfiprintf_r+0x966>
  407538:	f10a 0a08 	add.w	sl, sl, #8
  40753c:	f10e 0e01 	add.w	lr, lr, #1
  407540:	e558      	b.n	406ff4 <_vfiprintf_r+0x3c4>
  407542:	aa0d      	add	r2, sp, #52	; 0x34
  407544:	9900      	ldr	r1, [sp, #0]
  407546:	9301      	str	r3, [sp, #4]
  407548:	4648      	mov	r0, r9
  40754a:	f7ff fb35 	bl	406bb8 <__sprint_r.part.0>
  40754e:	b968      	cbnz	r0, 40756c <_vfiprintf_r+0x93c>
  407550:	980e      	ldr	r0, [sp, #56]	; 0x38
  407552:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407554:	9b01      	ldr	r3, [sp, #4]
  407556:	f100 0e01 	add.w	lr, r0, #1
  40755a:	46dc      	mov	ip, fp
  40755c:	e7c8      	b.n	4074f0 <_vfiprintf_r+0x8c0>
  40755e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407560:	b123      	cbz	r3, 40756c <_vfiprintf_r+0x93c>
  407562:	9805      	ldr	r0, [sp, #20]
  407564:	9900      	ldr	r1, [sp, #0]
  407566:	aa0d      	add	r2, sp, #52	; 0x34
  407568:	f7ff fb26 	bl	406bb8 <__sprint_r.part.0>
  40756c:	9b00      	ldr	r3, [sp, #0]
  40756e:	899b      	ldrh	r3, [r3, #12]
  407570:	065a      	lsls	r2, r3, #25
  407572:	f100 818b 	bmi.w	40788c <_vfiprintf_r+0xc5c>
  407576:	9802      	ldr	r0, [sp, #8]
  407578:	b02b      	add	sp, #172	; 0xac
  40757a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40757e:	aa0d      	add	r2, sp, #52	; 0x34
  407580:	9900      	ldr	r1, [sp, #0]
  407582:	4648      	mov	r0, r9
  407584:	f7ff fb18 	bl	406bb8 <__sprint_r.part.0>
  407588:	2800      	cmp	r0, #0
  40758a:	d1ef      	bne.n	40756c <_vfiprintf_r+0x93c>
  40758c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40758e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407590:	1c48      	adds	r0, r1, #1
  407592:	46da      	mov	sl, fp
  407594:	e555      	b.n	407042 <_vfiprintf_r+0x412>
  407596:	2a00      	cmp	r2, #0
  407598:	f040 80fb 	bne.w	407792 <_vfiprintf_r+0xb62>
  40759c:	9a03      	ldr	r2, [sp, #12]
  40759e:	921b      	str	r2, [sp, #108]	; 0x6c
  4075a0:	2301      	movs	r3, #1
  4075a2:	920f      	str	r2, [sp, #60]	; 0x3c
  4075a4:	971a      	str	r7, [sp, #104]	; 0x68
  4075a6:	930e      	str	r3, [sp, #56]	; 0x38
  4075a8:	46da      	mov	sl, fp
  4075aa:	f10a 0a08 	add.w	sl, sl, #8
  4075ae:	0771      	lsls	r1, r6, #29
  4075b0:	d504      	bpl.n	4075bc <_vfiprintf_r+0x98c>
  4075b2:	9b06      	ldr	r3, [sp, #24]
  4075b4:	1b5c      	subs	r4, r3, r5
  4075b6:	2c00      	cmp	r4, #0
  4075b8:	f73f ad34 	bgt.w	407024 <_vfiprintf_r+0x3f4>
  4075bc:	9b02      	ldr	r3, [sp, #8]
  4075be:	9906      	ldr	r1, [sp, #24]
  4075c0:	42a9      	cmp	r1, r5
  4075c2:	bfac      	ite	ge
  4075c4:	185b      	addge	r3, r3, r1
  4075c6:	195b      	addlt	r3, r3, r5
  4075c8:	9302      	str	r3, [sp, #8]
  4075ca:	2a00      	cmp	r2, #0
  4075cc:	f040 80b3 	bne.w	407736 <_vfiprintf_r+0xb06>
  4075d0:	2300      	movs	r3, #0
  4075d2:	930e      	str	r3, [sp, #56]	; 0x38
  4075d4:	46da      	mov	sl, fp
  4075d6:	f7ff bb5c 	b.w	406c92 <_vfiprintf_r+0x62>
  4075da:	aa0d      	add	r2, sp, #52	; 0x34
  4075dc:	9900      	ldr	r1, [sp, #0]
  4075de:	9307      	str	r3, [sp, #28]
  4075e0:	4648      	mov	r0, r9
  4075e2:	f7ff fae9 	bl	406bb8 <__sprint_r.part.0>
  4075e6:	2800      	cmp	r0, #0
  4075e8:	d1c0      	bne.n	40756c <_vfiprintf_r+0x93c>
  4075ea:	980e      	ldr	r0, [sp, #56]	; 0x38
  4075ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4075ee:	9b07      	ldr	r3, [sp, #28]
  4075f0:	f100 0c01 	add.w	ip, r0, #1
  4075f4:	46de      	mov	lr, fp
  4075f6:	e4cb      	b.n	406f90 <_vfiprintf_r+0x360>
  4075f8:	0040cb98 	.word	0x0040cb98
  4075fc:	0040cbac 	.word	0x0040cbac
  407600:	0040cbdc 	.word	0x0040cbdc
  407604:	2a00      	cmp	r2, #0
  407606:	f040 8133 	bne.w	407870 <_vfiprintf_r+0xc40>
  40760a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40760e:	2b00      	cmp	r3, #0
  407610:	f000 80f5 	beq.w	4077fe <_vfiprintf_r+0xbce>
  407614:	2301      	movs	r3, #1
  407616:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40761a:	461a      	mov	r2, r3
  40761c:	931b      	str	r3, [sp, #108]	; 0x6c
  40761e:	469e      	mov	lr, r3
  407620:	911a      	str	r1, [sp, #104]	; 0x68
  407622:	46da      	mov	sl, fp
  407624:	4670      	mov	r0, lr
  407626:	f10a 0a08 	add.w	sl, sl, #8
  40762a:	f10e 0e01 	add.w	lr, lr, #1
  40762e:	e47d      	b.n	406f2c <_vfiprintf_r+0x2fc>
  407630:	a90c      	add	r1, sp, #48	; 0x30
  407632:	2202      	movs	r2, #2
  407634:	469e      	mov	lr, r3
  407636:	911a      	str	r1, [sp, #104]	; 0x68
  407638:	921b      	str	r2, [sp, #108]	; 0x6c
  40763a:	46da      	mov	sl, fp
  40763c:	4670      	mov	r0, lr
  40763e:	f10a 0a08 	add.w	sl, sl, #8
  407642:	f10e 0e01 	add.w	lr, lr, #1
  407646:	e738      	b.n	4074ba <_vfiprintf_r+0x88a>
  407648:	9b01      	ldr	r3, [sp, #4]
  40764a:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40764e:	2b00      	cmp	r3, #0
  407650:	f2c0 812a 	blt.w	4078a8 <_vfiprintf_r+0xc78>
  407654:	ea54 0305 	orrs.w	r3, r4, r5
  407658:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40765c:	f43f abff 	beq.w	406e5e <_vfiprintf_r+0x22e>
  407660:	465f      	mov	r7, fp
  407662:	0923      	lsrs	r3, r4, #4
  407664:	f004 010f 	and.w	r1, r4, #15
  407668:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40766c:	092a      	lsrs	r2, r5, #4
  40766e:	461c      	mov	r4, r3
  407670:	4615      	mov	r5, r2
  407672:	5c43      	ldrb	r3, [r0, r1]
  407674:	f807 3d01 	strb.w	r3, [r7, #-1]!
  407678:	ea54 0305 	orrs.w	r3, r4, r5
  40767c:	d1f1      	bne.n	407662 <_vfiprintf_r+0xa32>
  40767e:	ebc7 030b 	rsb	r3, r7, fp
  407682:	9303      	str	r3, [sp, #12]
  407684:	f7ff bbf4 	b.w	406e70 <_vfiprintf_r+0x240>
  407688:	aa0d      	add	r2, sp, #52	; 0x34
  40768a:	9900      	ldr	r1, [sp, #0]
  40768c:	9805      	ldr	r0, [sp, #20]
  40768e:	f7ff fa93 	bl	406bb8 <__sprint_r.part.0>
  407692:	2800      	cmp	r0, #0
  407694:	f47f af6a 	bne.w	40756c <_vfiprintf_r+0x93c>
  407698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40769a:	46da      	mov	sl, fp
  40769c:	e787      	b.n	4075ae <_vfiprintf_r+0x97e>
  40769e:	f04f 0900 	mov.w	r9, #0
  4076a2:	2400      	movs	r4, #0
  4076a4:	2500      	movs	r5, #0
  4076a6:	e7db      	b.n	407660 <_vfiprintf_r+0xa30>
  4076a8:	f016 0210 	ands.w	r2, r6, #16
  4076ac:	f000 80b2 	beq.w	407814 <_vfiprintf_r+0xbe4>
  4076b0:	9904      	ldr	r1, [sp, #16]
  4076b2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4076b6:	460a      	mov	r2, r1
  4076b8:	680c      	ldr	r4, [r1, #0]
  4076ba:	9901      	ldr	r1, [sp, #4]
  4076bc:	2900      	cmp	r1, #0
  4076be:	f102 0204 	add.w	r2, r2, #4
  4076c2:	f04f 0500 	mov.w	r5, #0
  4076c6:	f2c0 8159 	blt.w	40797c <_vfiprintf_r+0xd4c>
  4076ca:	ea54 0105 	orrs.w	r1, r4, r5
  4076ce:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4076d2:	9204      	str	r2, [sp, #16]
  4076d4:	f43f ad51 	beq.w	40717a <_vfiprintf_r+0x54a>
  4076d8:	4699      	mov	r9, r3
  4076da:	e556      	b.n	40718a <_vfiprintf_r+0x55a>
  4076dc:	06f7      	lsls	r7, r6, #27
  4076de:	d40a      	bmi.n	4076f6 <_vfiprintf_r+0xac6>
  4076e0:	0675      	lsls	r5, r6, #25
  4076e2:	d508      	bpl.n	4076f6 <_vfiprintf_r+0xac6>
  4076e4:	9904      	ldr	r1, [sp, #16]
  4076e6:	f9b1 4000 	ldrsh.w	r4, [r1]
  4076ea:	3104      	adds	r1, #4
  4076ec:	17e5      	asrs	r5, r4, #31
  4076ee:	4622      	mov	r2, r4
  4076f0:	462b      	mov	r3, r5
  4076f2:	9104      	str	r1, [sp, #16]
  4076f4:	e4ea      	b.n	4070cc <_vfiprintf_r+0x49c>
  4076f6:	9a04      	ldr	r2, [sp, #16]
  4076f8:	6814      	ldr	r4, [r2, #0]
  4076fa:	4613      	mov	r3, r2
  4076fc:	3304      	adds	r3, #4
  4076fe:	17e5      	asrs	r5, r4, #31
  407700:	9304      	str	r3, [sp, #16]
  407702:	4622      	mov	r2, r4
  407704:	462b      	mov	r3, r5
  407706:	e4e1      	b.n	4070cc <_vfiprintf_r+0x49c>
  407708:	6814      	ldr	r4, [r2, #0]
  40770a:	3204      	adds	r2, #4
  40770c:	9204      	str	r2, [sp, #16]
  40770e:	2500      	movs	r5, #0
  407710:	e61f      	b.n	407352 <_vfiprintf_r+0x722>
  407712:	f04f 0900 	mov.w	r9, #0
  407716:	ea54 0305 	orrs.w	r3, r4, r5
  40771a:	f47f ace8 	bne.w	4070ee <_vfiprintf_r+0x4be>
  40771e:	e5d8      	b.n	4072d2 <_vfiprintf_r+0x6a2>
  407720:	aa0d      	add	r2, sp, #52	; 0x34
  407722:	9900      	ldr	r1, [sp, #0]
  407724:	9805      	ldr	r0, [sp, #20]
  407726:	f7ff fa47 	bl	406bb8 <__sprint_r.part.0>
  40772a:	2800      	cmp	r0, #0
  40772c:	f47f af1e 	bne.w	40756c <_vfiprintf_r+0x93c>
  407730:	46da      	mov	sl, fp
  407732:	f7ff bb48 	b.w	406dc6 <_vfiprintf_r+0x196>
  407736:	aa0d      	add	r2, sp, #52	; 0x34
  407738:	9900      	ldr	r1, [sp, #0]
  40773a:	9805      	ldr	r0, [sp, #20]
  40773c:	f7ff fa3c 	bl	406bb8 <__sprint_r.part.0>
  407740:	2800      	cmp	r0, #0
  407742:	f43f af45 	beq.w	4075d0 <_vfiprintf_r+0x9a0>
  407746:	e711      	b.n	40756c <_vfiprintf_r+0x93c>
  407748:	aa0d      	add	r2, sp, #52	; 0x34
  40774a:	9900      	ldr	r1, [sp, #0]
  40774c:	9805      	ldr	r0, [sp, #20]
  40774e:	f7ff fa33 	bl	406bb8 <__sprint_r.part.0>
  407752:	2800      	cmp	r0, #0
  407754:	f47f af0a 	bne.w	40756c <_vfiprintf_r+0x93c>
  407758:	980e      	ldr	r0, [sp, #56]	; 0x38
  40775a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40775c:	f100 0e01 	add.w	lr, r0, #1
  407760:	46da      	mov	sl, fp
  407762:	f7ff bbe3 	b.w	406f2c <_vfiprintf_r+0x2fc>
  407766:	aa0d      	add	r2, sp, #52	; 0x34
  407768:	9900      	ldr	r1, [sp, #0]
  40776a:	9805      	ldr	r0, [sp, #20]
  40776c:	f7ff fa24 	bl	406bb8 <__sprint_r.part.0>
  407770:	2800      	cmp	r0, #0
  407772:	f47f aefb 	bne.w	40756c <_vfiprintf_r+0x93c>
  407776:	980e      	ldr	r0, [sp, #56]	; 0x38
  407778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40777a:	f100 0e01 	add.w	lr, r0, #1
  40777e:	46da      	mov	sl, fp
  407780:	e69b      	b.n	4074ba <_vfiprintf_r+0x88a>
  407782:	2a00      	cmp	r2, #0
  407784:	f040 80d8 	bne.w	407938 <_vfiprintf_r+0xd08>
  407788:	f04f 0e01 	mov.w	lr, #1
  40778c:	4610      	mov	r0, r2
  40778e:	46da      	mov	sl, fp
  407790:	e697      	b.n	4074c2 <_vfiprintf_r+0x892>
  407792:	aa0d      	add	r2, sp, #52	; 0x34
  407794:	9900      	ldr	r1, [sp, #0]
  407796:	9805      	ldr	r0, [sp, #20]
  407798:	f7ff fa0e 	bl	406bb8 <__sprint_r.part.0>
  40779c:	2800      	cmp	r0, #0
  40779e:	f47f aee5 	bne.w	40756c <_vfiprintf_r+0x93c>
  4077a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4077a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4077a6:	f103 0e01 	add.w	lr, r3, #1
  4077aa:	46da      	mov	sl, fp
  4077ac:	e422      	b.n	406ff4 <_vfiprintf_r+0x3c4>
  4077ae:	2230      	movs	r2, #48	; 0x30
  4077b0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  4077b4:	9a01      	ldr	r2, [sp, #4]
  4077b6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4077ba:	2a00      	cmp	r2, #0
  4077bc:	f04f 0300 	mov.w	r3, #0
  4077c0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4077c4:	f046 0302 	orr.w	r3, r6, #2
  4077c8:	f2c0 80cb 	blt.w	407962 <_vfiprintf_r+0xd32>
  4077cc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4077d0:	f046 0602 	orr.w	r6, r6, #2
  4077d4:	f04f 0900 	mov.w	r9, #0
  4077d8:	e742      	b.n	407660 <_vfiprintf_r+0xa30>
  4077da:	f04f 0900 	mov.w	r9, #0
  4077de:	4890      	ldr	r0, [pc, #576]	; (407a20 <_vfiprintf_r+0xdf0>)
  4077e0:	e73e      	b.n	407660 <_vfiprintf_r+0xa30>
  4077e2:	9b01      	ldr	r3, [sp, #4]
  4077e4:	4264      	negs	r4, r4
  4077e6:	f04f 092d 	mov.w	r9, #45	; 0x2d
  4077ea:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4077ee:	2b00      	cmp	r3, #0
  4077f0:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4077f4:	f6ff ac7b 	blt.w	4070ee <_vfiprintf_r+0x4be>
  4077f8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4077fc:	e477      	b.n	4070ee <_vfiprintf_r+0x4be>
  4077fe:	9b07      	ldr	r3, [sp, #28]
  407800:	2b00      	cmp	r3, #0
  407802:	d072      	beq.n	4078ea <_vfiprintf_r+0xcba>
  407804:	ab0c      	add	r3, sp, #48	; 0x30
  407806:	2202      	movs	r2, #2
  407808:	931a      	str	r3, [sp, #104]	; 0x68
  40780a:	921b      	str	r2, [sp, #108]	; 0x6c
  40780c:	f04f 0e01 	mov.w	lr, #1
  407810:	46da      	mov	sl, fp
  407812:	e713      	b.n	40763c <_vfiprintf_r+0xa0c>
  407814:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  407818:	d048      	beq.n	4078ac <_vfiprintf_r+0xc7c>
  40781a:	9904      	ldr	r1, [sp, #16]
  40781c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  407820:	460b      	mov	r3, r1
  407822:	880c      	ldrh	r4, [r1, #0]
  407824:	9901      	ldr	r1, [sp, #4]
  407826:	2900      	cmp	r1, #0
  407828:	f103 0304 	add.w	r3, r3, #4
  40782c:	f04f 0500 	mov.w	r5, #0
  407830:	f6ff ae10 	blt.w	407454 <_vfiprintf_r+0x824>
  407834:	ea54 0105 	orrs.w	r1, r4, r5
  407838:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40783c:	9304      	str	r3, [sp, #16]
  40783e:	f43f ac9c 	beq.w	40717a <_vfiprintf_r+0x54a>
  407842:	4691      	mov	r9, r2
  407844:	e4a1      	b.n	40718a <_vfiprintf_r+0x55a>
  407846:	06f0      	lsls	r0, r6, #27
  407848:	d40a      	bmi.n	407860 <_vfiprintf_r+0xc30>
  40784a:	0671      	lsls	r1, r6, #25
  40784c:	d508      	bpl.n	407860 <_vfiprintf_r+0xc30>
  40784e:	9a04      	ldr	r2, [sp, #16]
  407850:	6813      	ldr	r3, [r2, #0]
  407852:	3204      	adds	r2, #4
  407854:	9204      	str	r2, [sp, #16]
  407856:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40785a:	801a      	strh	r2, [r3, #0]
  40785c:	f7ff ba19 	b.w	406c92 <_vfiprintf_r+0x62>
  407860:	9a04      	ldr	r2, [sp, #16]
  407862:	6813      	ldr	r3, [r2, #0]
  407864:	3204      	adds	r2, #4
  407866:	9204      	str	r2, [sp, #16]
  407868:	9a02      	ldr	r2, [sp, #8]
  40786a:	601a      	str	r2, [r3, #0]
  40786c:	f7ff ba11 	b.w	406c92 <_vfiprintf_r+0x62>
  407870:	aa0d      	add	r2, sp, #52	; 0x34
  407872:	9900      	ldr	r1, [sp, #0]
  407874:	9805      	ldr	r0, [sp, #20]
  407876:	f7ff f99f 	bl	406bb8 <__sprint_r.part.0>
  40787a:	2800      	cmp	r0, #0
  40787c:	f47f ae76 	bne.w	40756c <_vfiprintf_r+0x93c>
  407880:	980e      	ldr	r0, [sp, #56]	; 0x38
  407882:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407884:	f100 0e01 	add.w	lr, r0, #1
  407888:	46da      	mov	sl, fp
  40788a:	e5fa      	b.n	407482 <_vfiprintf_r+0x852>
  40788c:	f04f 30ff 	mov.w	r0, #4294967295
  407890:	f7ff bab6 	b.w	406e00 <_vfiprintf_r+0x1d0>
  407894:	4862      	ldr	r0, [pc, #392]	; (407a20 <_vfiprintf_r+0xdf0>)
  407896:	4616      	mov	r6, r2
  407898:	ea54 0205 	orrs.w	r2, r4, r5
  40789c:	9304      	str	r3, [sp, #16]
  40789e:	f04f 0900 	mov.w	r9, #0
  4078a2:	f47f aedd 	bne.w	407660 <_vfiprintf_r+0xa30>
  4078a6:	e6fc      	b.n	4076a2 <_vfiprintf_r+0xa72>
  4078a8:	9b04      	ldr	r3, [sp, #16]
  4078aa:	e7f5      	b.n	407898 <_vfiprintf_r+0xc68>
  4078ac:	9a04      	ldr	r2, [sp, #16]
  4078ae:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  4078b2:	4613      	mov	r3, r2
  4078b4:	6814      	ldr	r4, [r2, #0]
  4078b6:	9a01      	ldr	r2, [sp, #4]
  4078b8:	2a00      	cmp	r2, #0
  4078ba:	f103 0304 	add.w	r3, r3, #4
  4078be:	f04f 0500 	mov.w	r5, #0
  4078c2:	f6ff adc7 	blt.w	407454 <_vfiprintf_r+0x824>
  4078c6:	ea54 0205 	orrs.w	r2, r4, r5
  4078ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4078ce:	9304      	str	r3, [sp, #16]
  4078d0:	f47f ac5b 	bne.w	40718a <_vfiprintf_r+0x55a>
  4078d4:	e451      	b.n	40717a <_vfiprintf_r+0x54a>
  4078d6:	aa0d      	add	r2, sp, #52	; 0x34
  4078d8:	9900      	ldr	r1, [sp, #0]
  4078da:	9805      	ldr	r0, [sp, #20]
  4078dc:	f7ff f96c 	bl	406bb8 <__sprint_r.part.0>
  4078e0:	2800      	cmp	r0, #0
  4078e2:	f47f ae43 	bne.w	40756c <_vfiprintf_r+0x93c>
  4078e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4078e8:	e668      	b.n	4075bc <_vfiprintf_r+0x98c>
  4078ea:	4610      	mov	r0, r2
  4078ec:	f04f 0e01 	mov.w	lr, #1
  4078f0:	46da      	mov	sl, fp
  4078f2:	e5e6      	b.n	4074c2 <_vfiprintf_r+0x892>
  4078f4:	9904      	ldr	r1, [sp, #16]
  4078f6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4078fa:	460a      	mov	r2, r1
  4078fc:	880c      	ldrh	r4, [r1, #0]
  4078fe:	9901      	ldr	r1, [sp, #4]
  407900:	2900      	cmp	r1, #0
  407902:	f102 0204 	add.w	r2, r2, #4
  407906:	f04f 0500 	mov.w	r5, #0
  40790a:	db4e      	blt.n	4079aa <_vfiprintf_r+0xd7a>
  40790c:	ea54 0105 	orrs.w	r1, r4, r5
  407910:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  407914:	9204      	str	r2, [sp, #16]
  407916:	4699      	mov	r9, r3
  407918:	f47f abe9 	bne.w	4070ee <_vfiprintf_r+0x4be>
  40791c:	e4d4      	b.n	4072c8 <_vfiprintf_r+0x698>
  40791e:	9304      	str	r3, [sp, #16]
  407920:	e6f9      	b.n	407716 <_vfiprintf_r+0xae6>
  407922:	4638      	mov	r0, r7
  407924:	9404      	str	r4, [sp, #16]
  407926:	f7fd fd8b 	bl	405440 <strlen>
  40792a:	2300      	movs	r3, #0
  40792c:	9003      	str	r0, [sp, #12]
  40792e:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  407932:	9301      	str	r3, [sp, #4]
  407934:	f7ff ba9c 	b.w	406e70 <_vfiprintf_r+0x240>
  407938:	aa0d      	add	r2, sp, #52	; 0x34
  40793a:	9900      	ldr	r1, [sp, #0]
  40793c:	9805      	ldr	r0, [sp, #20]
  40793e:	f7ff f93b 	bl	406bb8 <__sprint_r.part.0>
  407942:	2800      	cmp	r0, #0
  407944:	f47f ae12 	bne.w	40756c <_vfiprintf_r+0x93c>
  407948:	980e      	ldr	r0, [sp, #56]	; 0x38
  40794a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40794c:	f100 0e01 	add.w	lr, r0, #1
  407950:	46da      	mov	sl, fp
  407952:	e5b6      	b.n	4074c2 <_vfiprintf_r+0x892>
  407954:	980e      	ldr	r0, [sp, #56]	; 0x38
  407956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407958:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 407a28 <_vfiprintf_r+0xdf8>
  40795c:	3001      	adds	r0, #1
  40795e:	f7ff bad2 	b.w	406f06 <_vfiprintf_r+0x2d6>
  407962:	461e      	mov	r6, r3
  407964:	f04f 0900 	mov.w	r9, #0
  407968:	e67a      	b.n	407660 <_vfiprintf_r+0xa30>
  40796a:	2b06      	cmp	r3, #6
  40796c:	bf28      	it	cs
  40796e:	2306      	movcs	r3, #6
  407970:	9303      	str	r3, [sp, #12]
  407972:	9404      	str	r4, [sp, #16]
  407974:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  407978:	4f2a      	ldr	r7, [pc, #168]	; (407a24 <_vfiprintf_r+0xdf4>)
  40797a:	e50c      	b.n	407396 <_vfiprintf_r+0x766>
  40797c:	9204      	str	r2, [sp, #16]
  40797e:	e56a      	b.n	407456 <_vfiprintf_r+0x826>
  407980:	980e      	ldr	r0, [sp, #56]	; 0x38
  407982:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 407a28 <_vfiprintf_r+0xdf8>
  407986:	3001      	adds	r0, #1
  407988:	f7ff bb73 	b.w	407072 <_vfiprintf_r+0x442>
  40798c:	46f4      	mov	ip, lr
  40798e:	f7ff bb1a 	b.w	406fc6 <_vfiprintf_r+0x396>
  407992:	9b01      	ldr	r3, [sp, #4]
  407994:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  407998:	9303      	str	r3, [sp, #12]
  40799a:	9404      	str	r4, [sp, #16]
  40799c:	9001      	str	r0, [sp, #4]
  40799e:	f7ff ba67 	b.w	406e70 <_vfiprintf_r+0x240>
  4079a2:	2200      	movs	r2, #0
  4079a4:	9201      	str	r2, [sp, #4]
  4079a6:	f7ff b9ac 	b.w	406d02 <_vfiprintf_r+0xd2>
  4079aa:	9204      	str	r2, [sp, #16]
  4079ac:	4699      	mov	r9, r3
  4079ae:	e6b2      	b.n	407716 <_vfiprintf_r+0xae6>
  4079b0:	9a04      	ldr	r2, [sp, #16]
  4079b2:	6813      	ldr	r3, [r2, #0]
  4079b4:	9301      	str	r3, [sp, #4]
  4079b6:	3204      	adds	r2, #4
  4079b8:	2b00      	cmp	r3, #0
  4079ba:	9204      	str	r2, [sp, #16]
  4079bc:	f898 3001 	ldrb.w	r3, [r8, #1]
  4079c0:	46a8      	mov	r8, r5
  4079c2:	f6bf a99c 	bge.w	406cfe <_vfiprintf_r+0xce>
  4079c6:	f04f 32ff 	mov.w	r2, #4294967295
  4079ca:	9201      	str	r2, [sp, #4]
  4079cc:	f7ff b997 	b.w	406cfe <_vfiprintf_r+0xce>
  4079d0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4079d4:	e48e      	b.n	4072f4 <_vfiprintf_r+0x6c4>
  4079d6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4079da:	e4f0      	b.n	4073be <_vfiprintf_r+0x78e>
  4079dc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4079e0:	e4ab      	b.n	40733a <_vfiprintf_r+0x70a>
  4079e2:	4699      	mov	r9, r3
  4079e4:	07f3      	lsls	r3, r6, #31
  4079e6:	d505      	bpl.n	4079f4 <_vfiprintf_r+0xdc4>
  4079e8:	af2a      	add	r7, sp, #168	; 0xa8
  4079ea:	2330      	movs	r3, #48	; 0x30
  4079ec:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4079f0:	f7ff bb97 	b.w	407122 <_vfiprintf_r+0x4f2>
  4079f4:	9b01      	ldr	r3, [sp, #4]
  4079f6:	9303      	str	r3, [sp, #12]
  4079f8:	465f      	mov	r7, fp
  4079fa:	f7ff ba39 	b.w	406e70 <_vfiprintf_r+0x240>
  4079fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407a02:	e443      	b.n	40728c <_vfiprintf_r+0x65c>
  407a04:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407a08:	f7ff bb9a 	b.w	407140 <_vfiprintf_r+0x510>
  407a0c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407a10:	f7ff bb4d 	b.w	4070ae <_vfiprintf_r+0x47e>
  407a14:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407a18:	e50f      	b.n	40743a <_vfiprintf_r+0x80a>
  407a1a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  407a1e:	e4f3      	b.n	407408 <_vfiprintf_r+0x7d8>
  407a20:	0040cbac 	.word	0x0040cbac
  407a24:	0040cbc0 	.word	0x0040cbc0
  407a28:	0040cbec 	.word	0x0040cbec

00407a2c <__sbprintf>:
  407a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a2e:	460c      	mov	r4, r1
  407a30:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  407a34:	8989      	ldrh	r1, [r1, #12]
  407a36:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407a38:	89e5      	ldrh	r5, [r4, #14]
  407a3a:	9619      	str	r6, [sp, #100]	; 0x64
  407a3c:	f021 0102 	bic.w	r1, r1, #2
  407a40:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407a42:	f8ad 500e 	strh.w	r5, [sp, #14]
  407a46:	2500      	movs	r5, #0
  407a48:	69e7      	ldr	r7, [r4, #28]
  407a4a:	f8ad 100c 	strh.w	r1, [sp, #12]
  407a4e:	9609      	str	r6, [sp, #36]	; 0x24
  407a50:	9506      	str	r5, [sp, #24]
  407a52:	ae1a      	add	r6, sp, #104	; 0x68
  407a54:	f44f 6580 	mov.w	r5, #1024	; 0x400
  407a58:	4669      	mov	r1, sp
  407a5a:	9600      	str	r6, [sp, #0]
  407a5c:	9604      	str	r6, [sp, #16]
  407a5e:	9502      	str	r5, [sp, #8]
  407a60:	9505      	str	r5, [sp, #20]
  407a62:	9707      	str	r7, [sp, #28]
  407a64:	4606      	mov	r6, r0
  407a66:	f7ff f8e3 	bl	406c30 <_vfiprintf_r>
  407a6a:	1e05      	subs	r5, r0, #0
  407a6c:	db07      	blt.n	407a7e <__sbprintf+0x52>
  407a6e:	4630      	mov	r0, r6
  407a70:	4669      	mov	r1, sp
  407a72:	f001 f8e9 	bl	408c48 <_fflush_r>
  407a76:	2800      	cmp	r0, #0
  407a78:	bf18      	it	ne
  407a7a:	f04f 35ff 	movne.w	r5, #4294967295
  407a7e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407a82:	065b      	lsls	r3, r3, #25
  407a84:	d503      	bpl.n	407a8e <__sbprintf+0x62>
  407a86:	89a3      	ldrh	r3, [r4, #12]
  407a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a8c:	81a3      	strh	r3, [r4, #12]
  407a8e:	4628      	mov	r0, r5
  407a90:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  407a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a96:	bf00      	nop

00407a98 <__swsetup_r>:
  407a98:	b538      	push	{r3, r4, r5, lr}
  407a9a:	4b30      	ldr	r3, [pc, #192]	; (407b5c <__swsetup_r+0xc4>)
  407a9c:	681b      	ldr	r3, [r3, #0]
  407a9e:	4605      	mov	r5, r0
  407aa0:	460c      	mov	r4, r1
  407aa2:	b113      	cbz	r3, 407aaa <__swsetup_r+0x12>
  407aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407aa6:	2a00      	cmp	r2, #0
  407aa8:	d038      	beq.n	407b1c <__swsetup_r+0x84>
  407aaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407aae:	b293      	uxth	r3, r2
  407ab0:	0718      	lsls	r0, r3, #28
  407ab2:	d50c      	bpl.n	407ace <__swsetup_r+0x36>
  407ab4:	6920      	ldr	r0, [r4, #16]
  407ab6:	b1a8      	cbz	r0, 407ae4 <__swsetup_r+0x4c>
  407ab8:	f013 0201 	ands.w	r2, r3, #1
  407abc:	d01e      	beq.n	407afc <__swsetup_r+0x64>
  407abe:	6963      	ldr	r3, [r4, #20]
  407ac0:	2200      	movs	r2, #0
  407ac2:	425b      	negs	r3, r3
  407ac4:	61a3      	str	r3, [r4, #24]
  407ac6:	60a2      	str	r2, [r4, #8]
  407ac8:	b1f0      	cbz	r0, 407b08 <__swsetup_r+0x70>
  407aca:	2000      	movs	r0, #0
  407acc:	bd38      	pop	{r3, r4, r5, pc}
  407ace:	06d9      	lsls	r1, r3, #27
  407ad0:	d53c      	bpl.n	407b4c <__swsetup_r+0xb4>
  407ad2:	0758      	lsls	r0, r3, #29
  407ad4:	d426      	bmi.n	407b24 <__swsetup_r+0x8c>
  407ad6:	6920      	ldr	r0, [r4, #16]
  407ad8:	f042 0308 	orr.w	r3, r2, #8
  407adc:	81a3      	strh	r3, [r4, #12]
  407ade:	b29b      	uxth	r3, r3
  407ae0:	2800      	cmp	r0, #0
  407ae2:	d1e9      	bne.n	407ab8 <__swsetup_r+0x20>
  407ae4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  407ae8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407aec:	d0e4      	beq.n	407ab8 <__swsetup_r+0x20>
  407aee:	4628      	mov	r0, r5
  407af0:	4621      	mov	r1, r4
  407af2:	f001 fcd9 	bl	4094a8 <__smakebuf_r>
  407af6:	89a3      	ldrh	r3, [r4, #12]
  407af8:	6920      	ldr	r0, [r4, #16]
  407afa:	e7dd      	b.n	407ab8 <__swsetup_r+0x20>
  407afc:	0799      	lsls	r1, r3, #30
  407afe:	bf58      	it	pl
  407b00:	6962      	ldrpl	r2, [r4, #20]
  407b02:	60a2      	str	r2, [r4, #8]
  407b04:	2800      	cmp	r0, #0
  407b06:	d1e0      	bne.n	407aca <__swsetup_r+0x32>
  407b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b0c:	061a      	lsls	r2, r3, #24
  407b0e:	d5dd      	bpl.n	407acc <__swsetup_r+0x34>
  407b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407b14:	81a3      	strh	r3, [r4, #12]
  407b16:	f04f 30ff 	mov.w	r0, #4294967295
  407b1a:	bd38      	pop	{r3, r4, r5, pc}
  407b1c:	4618      	mov	r0, r3
  407b1e:	f001 f927 	bl	408d70 <__sinit>
  407b22:	e7c2      	b.n	407aaa <__swsetup_r+0x12>
  407b24:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407b26:	b151      	cbz	r1, 407b3e <__swsetup_r+0xa6>
  407b28:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407b2c:	4299      	cmp	r1, r3
  407b2e:	d004      	beq.n	407b3a <__swsetup_r+0xa2>
  407b30:	4628      	mov	r0, r5
  407b32:	f001 f9e7 	bl	408f04 <_free_r>
  407b36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407b3a:	2300      	movs	r3, #0
  407b3c:	6323      	str	r3, [r4, #48]	; 0x30
  407b3e:	2300      	movs	r3, #0
  407b40:	6920      	ldr	r0, [r4, #16]
  407b42:	6063      	str	r3, [r4, #4]
  407b44:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407b48:	6020      	str	r0, [r4, #0]
  407b4a:	e7c5      	b.n	407ad8 <__swsetup_r+0x40>
  407b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407b50:	2309      	movs	r3, #9
  407b52:	602b      	str	r3, [r5, #0]
  407b54:	f04f 30ff 	mov.w	r0, #4294967295
  407b58:	81a2      	strh	r2, [r4, #12]
  407b5a:	bd38      	pop	{r3, r4, r5, pc}
  407b5c:	20400470 	.word	0x20400470

00407b60 <register_fini>:
  407b60:	4b02      	ldr	r3, [pc, #8]	; (407b6c <register_fini+0xc>)
  407b62:	b113      	cbz	r3, 407b6a <register_fini+0xa>
  407b64:	4802      	ldr	r0, [pc, #8]	; (407b70 <register_fini+0x10>)
  407b66:	f000 b805 	b.w	407b74 <atexit>
  407b6a:	4770      	bx	lr
  407b6c:	00000000 	.word	0x00000000
  407b70:	00408d85 	.word	0x00408d85

00407b74 <atexit>:
  407b74:	2300      	movs	r3, #0
  407b76:	4601      	mov	r1, r0
  407b78:	461a      	mov	r2, r3
  407b7a:	4618      	mov	r0, r3
  407b7c:	f002 bf62 	b.w	40aa44 <__register_exitproc>

00407b80 <quorem>:
  407b80:	6902      	ldr	r2, [r0, #16]
  407b82:	690b      	ldr	r3, [r1, #16]
  407b84:	4293      	cmp	r3, r2
  407b86:	f300 808d 	bgt.w	407ca4 <quorem+0x124>
  407b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b8e:	f103 38ff 	add.w	r8, r3, #4294967295
  407b92:	f101 0714 	add.w	r7, r1, #20
  407b96:	f100 0b14 	add.w	fp, r0, #20
  407b9a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  407b9e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  407ba2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407ba6:	b083      	sub	sp, #12
  407ba8:	3201      	adds	r2, #1
  407baa:	fbb3 f9f2 	udiv	r9, r3, r2
  407bae:	eb0b 0304 	add.w	r3, fp, r4
  407bb2:	9400      	str	r4, [sp, #0]
  407bb4:	eb07 0a04 	add.w	sl, r7, r4
  407bb8:	9301      	str	r3, [sp, #4]
  407bba:	f1b9 0f00 	cmp.w	r9, #0
  407bbe:	d039      	beq.n	407c34 <quorem+0xb4>
  407bc0:	2500      	movs	r5, #0
  407bc2:	46bc      	mov	ip, r7
  407bc4:	46de      	mov	lr, fp
  407bc6:	462b      	mov	r3, r5
  407bc8:	f85c 6b04 	ldr.w	r6, [ip], #4
  407bcc:	f8de 2000 	ldr.w	r2, [lr]
  407bd0:	b2b4      	uxth	r4, r6
  407bd2:	fb09 5504 	mla	r5, r9, r4, r5
  407bd6:	0c36      	lsrs	r6, r6, #16
  407bd8:	0c2c      	lsrs	r4, r5, #16
  407bda:	fb09 4406 	mla	r4, r9, r6, r4
  407bde:	b2ad      	uxth	r5, r5
  407be0:	1b5b      	subs	r3, r3, r5
  407be2:	b2a6      	uxth	r6, r4
  407be4:	fa13 f382 	uxtah	r3, r3, r2
  407be8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  407bec:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407bf0:	b29b      	uxth	r3, r3
  407bf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  407bf6:	45e2      	cmp	sl, ip
  407bf8:	f84e 3b04 	str.w	r3, [lr], #4
  407bfc:	ea4f 4514 	mov.w	r5, r4, lsr #16
  407c00:	ea4f 4326 	mov.w	r3, r6, asr #16
  407c04:	d2e0      	bcs.n	407bc8 <quorem+0x48>
  407c06:	9b00      	ldr	r3, [sp, #0]
  407c08:	f85b 3003 	ldr.w	r3, [fp, r3]
  407c0c:	b993      	cbnz	r3, 407c34 <quorem+0xb4>
  407c0e:	9c01      	ldr	r4, [sp, #4]
  407c10:	1f23      	subs	r3, r4, #4
  407c12:	459b      	cmp	fp, r3
  407c14:	d20c      	bcs.n	407c30 <quorem+0xb0>
  407c16:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407c1a:	b94b      	cbnz	r3, 407c30 <quorem+0xb0>
  407c1c:	f1a4 0308 	sub.w	r3, r4, #8
  407c20:	e002      	b.n	407c28 <quorem+0xa8>
  407c22:	681a      	ldr	r2, [r3, #0]
  407c24:	3b04      	subs	r3, #4
  407c26:	b91a      	cbnz	r2, 407c30 <quorem+0xb0>
  407c28:	459b      	cmp	fp, r3
  407c2a:	f108 38ff 	add.w	r8, r8, #4294967295
  407c2e:	d3f8      	bcc.n	407c22 <quorem+0xa2>
  407c30:	f8c0 8010 	str.w	r8, [r0, #16]
  407c34:	4604      	mov	r4, r0
  407c36:	f002 fa95 	bl	40a164 <__mcmp>
  407c3a:	2800      	cmp	r0, #0
  407c3c:	db2e      	blt.n	407c9c <quorem+0x11c>
  407c3e:	f109 0901 	add.w	r9, r9, #1
  407c42:	465d      	mov	r5, fp
  407c44:	2300      	movs	r3, #0
  407c46:	f857 1b04 	ldr.w	r1, [r7], #4
  407c4a:	6828      	ldr	r0, [r5, #0]
  407c4c:	b28a      	uxth	r2, r1
  407c4e:	1a9a      	subs	r2, r3, r2
  407c50:	0c09      	lsrs	r1, r1, #16
  407c52:	fa12 f280 	uxtah	r2, r2, r0
  407c56:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  407c5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407c5e:	b291      	uxth	r1, r2
  407c60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  407c64:	45ba      	cmp	sl, r7
  407c66:	f845 1b04 	str.w	r1, [r5], #4
  407c6a:	ea4f 4323 	mov.w	r3, r3, asr #16
  407c6e:	d2ea      	bcs.n	407c46 <quorem+0xc6>
  407c70:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407c74:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407c78:	b982      	cbnz	r2, 407c9c <quorem+0x11c>
  407c7a:	1f1a      	subs	r2, r3, #4
  407c7c:	4593      	cmp	fp, r2
  407c7e:	d20b      	bcs.n	407c98 <quorem+0x118>
  407c80:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407c84:	b942      	cbnz	r2, 407c98 <quorem+0x118>
  407c86:	3b08      	subs	r3, #8
  407c88:	e002      	b.n	407c90 <quorem+0x110>
  407c8a:	681a      	ldr	r2, [r3, #0]
  407c8c:	3b04      	subs	r3, #4
  407c8e:	b91a      	cbnz	r2, 407c98 <quorem+0x118>
  407c90:	459b      	cmp	fp, r3
  407c92:	f108 38ff 	add.w	r8, r8, #4294967295
  407c96:	d3f8      	bcc.n	407c8a <quorem+0x10a>
  407c98:	f8c4 8010 	str.w	r8, [r4, #16]
  407c9c:	4648      	mov	r0, r9
  407c9e:	b003      	add	sp, #12
  407ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ca4:	2000      	movs	r0, #0
  407ca6:	4770      	bx	lr

00407ca8 <_dtoa_r>:
  407ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407cac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  407cae:	b097      	sub	sp, #92	; 0x5c
  407cb0:	4681      	mov	r9, r0
  407cb2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  407cb4:	4692      	mov	sl, r2
  407cb6:	469b      	mov	fp, r3
  407cb8:	b149      	cbz	r1, 407cce <_dtoa_r+0x26>
  407cba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407cbc:	604a      	str	r2, [r1, #4]
  407cbe:	2301      	movs	r3, #1
  407cc0:	4093      	lsls	r3, r2
  407cc2:	608b      	str	r3, [r1, #8]
  407cc4:	f002 f86c 	bl	409da0 <_Bfree>
  407cc8:	2300      	movs	r3, #0
  407cca:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  407cce:	f1bb 0f00 	cmp.w	fp, #0
  407cd2:	46d8      	mov	r8, fp
  407cd4:	db33      	blt.n	407d3e <_dtoa_r+0x96>
  407cd6:	2300      	movs	r3, #0
  407cd8:	6023      	str	r3, [r4, #0]
  407cda:	4ba5      	ldr	r3, [pc, #660]	; (407f70 <_dtoa_r+0x2c8>)
  407cdc:	461a      	mov	r2, r3
  407cde:	ea08 0303 	and.w	r3, r8, r3
  407ce2:	4293      	cmp	r3, r2
  407ce4:	d014      	beq.n	407d10 <_dtoa_r+0x68>
  407ce6:	4650      	mov	r0, sl
  407ce8:	4659      	mov	r1, fp
  407cea:	2200      	movs	r2, #0
  407cec:	2300      	movs	r3, #0
  407cee:	f003 fbf1 	bl	40b4d4 <__aeabi_dcmpeq>
  407cf2:	4605      	mov	r5, r0
  407cf4:	b348      	cbz	r0, 407d4a <_dtoa_r+0xa2>
  407cf6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  407cf8:	2301      	movs	r3, #1
  407cfa:	6013      	str	r3, [r2, #0]
  407cfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407cfe:	2b00      	cmp	r3, #0
  407d00:	f000 80c5 	beq.w	407e8e <_dtoa_r+0x1e6>
  407d04:	489b      	ldr	r0, [pc, #620]	; (407f74 <_dtoa_r+0x2cc>)
  407d06:	6018      	str	r0, [r3, #0]
  407d08:	3801      	subs	r0, #1
  407d0a:	b017      	add	sp, #92	; 0x5c
  407d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d10:	9a22      	ldr	r2, [sp, #136]	; 0x88
  407d12:	f242 730f 	movw	r3, #9999	; 0x270f
  407d16:	6013      	str	r3, [r2, #0]
  407d18:	f1ba 0f00 	cmp.w	sl, #0
  407d1c:	f000 80a2 	beq.w	407e64 <_dtoa_r+0x1bc>
  407d20:	4895      	ldr	r0, [pc, #596]	; (407f78 <_dtoa_r+0x2d0>)
  407d22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407d24:	2b00      	cmp	r3, #0
  407d26:	d0f0      	beq.n	407d0a <_dtoa_r+0x62>
  407d28:	78c3      	ldrb	r3, [r0, #3]
  407d2a:	2b00      	cmp	r3, #0
  407d2c:	f000 80b1 	beq.w	407e92 <_dtoa_r+0x1ea>
  407d30:	f100 0308 	add.w	r3, r0, #8
  407d34:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407d36:	6013      	str	r3, [r2, #0]
  407d38:	b017      	add	sp, #92	; 0x5c
  407d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d3e:	2301      	movs	r3, #1
  407d40:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  407d44:	6023      	str	r3, [r4, #0]
  407d46:	46c3      	mov	fp, r8
  407d48:	e7c7      	b.n	407cda <_dtoa_r+0x32>
  407d4a:	aa14      	add	r2, sp, #80	; 0x50
  407d4c:	ab15      	add	r3, sp, #84	; 0x54
  407d4e:	9201      	str	r2, [sp, #4]
  407d50:	9300      	str	r3, [sp, #0]
  407d52:	4652      	mov	r2, sl
  407d54:	465b      	mov	r3, fp
  407d56:	4648      	mov	r0, r9
  407d58:	f002 faae 	bl	40a2b8 <__d2b>
  407d5c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  407d60:	9008      	str	r0, [sp, #32]
  407d62:	f040 8088 	bne.w	407e76 <_dtoa_r+0x1ce>
  407d66:	9d14      	ldr	r5, [sp, #80]	; 0x50
  407d68:	9c15      	ldr	r4, [sp, #84]	; 0x54
  407d6a:	442c      	add	r4, r5
  407d6c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  407d70:	2b20      	cmp	r3, #32
  407d72:	f340 8291 	ble.w	408298 <_dtoa_r+0x5f0>
  407d76:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407d7a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  407d7e:	fa08 f803 	lsl.w	r8, r8, r3
  407d82:	fa2a f000 	lsr.w	r0, sl, r0
  407d86:	ea40 0008 	orr.w	r0, r0, r8
  407d8a:	f003 f8c5 	bl	40af18 <__aeabi_ui2d>
  407d8e:	2301      	movs	r3, #1
  407d90:	3c01      	subs	r4, #1
  407d92:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  407d96:	9310      	str	r3, [sp, #64]	; 0x40
  407d98:	2200      	movs	r2, #0
  407d9a:	4b78      	ldr	r3, [pc, #480]	; (407f7c <_dtoa_r+0x2d4>)
  407d9c:	f002 ff7e 	bl	40ac9c <__aeabi_dsub>
  407da0:	a36d      	add	r3, pc, #436	; (adr r3, 407f58 <_dtoa_r+0x2b0>)
  407da2:	e9d3 2300 	ldrd	r2, r3, [r3]
  407da6:	f003 f92d 	bl	40b004 <__aeabi_dmul>
  407daa:	a36d      	add	r3, pc, #436	; (adr r3, 407f60 <_dtoa_r+0x2b8>)
  407dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  407db0:	f002 ff76 	bl	40aca0 <__adddf3>
  407db4:	4606      	mov	r6, r0
  407db6:	4620      	mov	r0, r4
  407db8:	460f      	mov	r7, r1
  407dba:	f003 f8bd 	bl	40af38 <__aeabi_i2d>
  407dbe:	a36a      	add	r3, pc, #424	; (adr r3, 407f68 <_dtoa_r+0x2c0>)
  407dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
  407dc4:	f003 f91e 	bl	40b004 <__aeabi_dmul>
  407dc8:	4602      	mov	r2, r0
  407dca:	460b      	mov	r3, r1
  407dcc:	4630      	mov	r0, r6
  407dce:	4639      	mov	r1, r7
  407dd0:	f002 ff66 	bl	40aca0 <__adddf3>
  407dd4:	4606      	mov	r6, r0
  407dd6:	460f      	mov	r7, r1
  407dd8:	f003 fbc4 	bl	40b564 <__aeabi_d2iz>
  407ddc:	2200      	movs	r2, #0
  407dde:	9004      	str	r0, [sp, #16]
  407de0:	2300      	movs	r3, #0
  407de2:	4630      	mov	r0, r6
  407de4:	4639      	mov	r1, r7
  407de6:	f003 fb7f 	bl	40b4e8 <__aeabi_dcmplt>
  407dea:	2800      	cmp	r0, #0
  407dec:	f040 8230 	bne.w	408250 <_dtoa_r+0x5a8>
  407df0:	9e04      	ldr	r6, [sp, #16]
  407df2:	2e16      	cmp	r6, #22
  407df4:	f200 8229 	bhi.w	40824a <_dtoa_r+0x5a2>
  407df8:	4b61      	ldr	r3, [pc, #388]	; (407f80 <_dtoa_r+0x2d8>)
  407dfa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  407dfe:	e9d3 0100 	ldrd	r0, r1, [r3]
  407e02:	4652      	mov	r2, sl
  407e04:	465b      	mov	r3, fp
  407e06:	f003 fb8d 	bl	40b524 <__aeabi_dcmpgt>
  407e0a:	2800      	cmp	r0, #0
  407e0c:	f000 8249 	beq.w	4082a2 <_dtoa_r+0x5fa>
  407e10:	1e73      	subs	r3, r6, #1
  407e12:	9304      	str	r3, [sp, #16]
  407e14:	2300      	movs	r3, #0
  407e16:	930c      	str	r3, [sp, #48]	; 0x30
  407e18:	1b2c      	subs	r4, r5, r4
  407e1a:	1e63      	subs	r3, r4, #1
  407e1c:	9302      	str	r3, [sp, #8]
  407e1e:	f100 8232 	bmi.w	408286 <_dtoa_r+0x5de>
  407e22:	2300      	movs	r3, #0
  407e24:	9305      	str	r3, [sp, #20]
  407e26:	9b04      	ldr	r3, [sp, #16]
  407e28:	2b00      	cmp	r3, #0
  407e2a:	f2c0 8223 	blt.w	408274 <_dtoa_r+0x5cc>
  407e2e:	9a02      	ldr	r2, [sp, #8]
  407e30:	930b      	str	r3, [sp, #44]	; 0x2c
  407e32:	4611      	mov	r1, r2
  407e34:	4419      	add	r1, r3
  407e36:	2300      	movs	r3, #0
  407e38:	9102      	str	r1, [sp, #8]
  407e3a:	930a      	str	r3, [sp, #40]	; 0x28
  407e3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407e3e:	2b09      	cmp	r3, #9
  407e40:	d829      	bhi.n	407e96 <_dtoa_r+0x1ee>
  407e42:	2b05      	cmp	r3, #5
  407e44:	f340 8658 	ble.w	408af8 <_dtoa_r+0xe50>
  407e48:	3b04      	subs	r3, #4
  407e4a:	9320      	str	r3, [sp, #128]	; 0x80
  407e4c:	2500      	movs	r5, #0
  407e4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  407e50:	3b02      	subs	r3, #2
  407e52:	2b03      	cmp	r3, #3
  407e54:	f200 8635 	bhi.w	408ac2 <_dtoa_r+0xe1a>
  407e58:	e8df f013 	tbh	[pc, r3, lsl #1]
  407e5c:	0228032c 	.word	0x0228032c
  407e60:	04590337 	.word	0x04590337
  407e64:	4b44      	ldr	r3, [pc, #272]	; (407f78 <_dtoa_r+0x2d0>)
  407e66:	4a47      	ldr	r2, [pc, #284]	; (407f84 <_dtoa_r+0x2dc>)
  407e68:	f3c8 0013 	ubfx	r0, r8, #0, #20
  407e6c:	2800      	cmp	r0, #0
  407e6e:	bf14      	ite	ne
  407e70:	4618      	movne	r0, r3
  407e72:	4610      	moveq	r0, r2
  407e74:	e755      	b.n	407d22 <_dtoa_r+0x7a>
  407e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407e7a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  407e7e:	9510      	str	r5, [sp, #64]	; 0x40
  407e80:	4650      	mov	r0, sl
  407e82:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  407e86:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407e8a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  407e8c:	e784      	b.n	407d98 <_dtoa_r+0xf0>
  407e8e:	483e      	ldr	r0, [pc, #248]	; (407f88 <_dtoa_r+0x2e0>)
  407e90:	e73b      	b.n	407d0a <_dtoa_r+0x62>
  407e92:	1cc3      	adds	r3, r0, #3
  407e94:	e74e      	b.n	407d34 <_dtoa_r+0x8c>
  407e96:	2100      	movs	r1, #0
  407e98:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  407e9c:	4648      	mov	r0, r9
  407e9e:	9120      	str	r1, [sp, #128]	; 0x80
  407ea0:	f001 ff58 	bl	409d54 <_Balloc>
  407ea4:	f04f 33ff 	mov.w	r3, #4294967295
  407ea8:	9306      	str	r3, [sp, #24]
  407eaa:	9a20      	ldr	r2, [sp, #128]	; 0x80
  407eac:	930d      	str	r3, [sp, #52]	; 0x34
  407eae:	2301      	movs	r3, #1
  407eb0:	9007      	str	r0, [sp, #28]
  407eb2:	9221      	str	r2, [sp, #132]	; 0x84
  407eb4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  407eb8:	9309      	str	r3, [sp, #36]	; 0x24
  407eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407ebc:	2b00      	cmp	r3, #0
  407ebe:	f2c0 80d1 	blt.w	408064 <_dtoa_r+0x3bc>
  407ec2:	9a04      	ldr	r2, [sp, #16]
  407ec4:	2a0e      	cmp	r2, #14
  407ec6:	f300 80cd 	bgt.w	408064 <_dtoa_r+0x3bc>
  407eca:	4b2d      	ldr	r3, [pc, #180]	; (407f80 <_dtoa_r+0x2d8>)
  407ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407ed0:	e9d3 3400 	ldrd	r3, r4, [r3]
  407ed4:	e9cd 3402 	strd	r3, r4, [sp, #8]
  407ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407eda:	2b00      	cmp	r3, #0
  407edc:	f2c0 8300 	blt.w	4084e0 <_dtoa_r+0x838>
  407ee0:	4656      	mov	r6, sl
  407ee2:	465f      	mov	r7, fp
  407ee4:	4650      	mov	r0, sl
  407ee6:	4659      	mov	r1, fp
  407ee8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  407eec:	4652      	mov	r2, sl
  407eee:	465b      	mov	r3, fp
  407ef0:	f003 f9b2 	bl	40b258 <__aeabi_ddiv>
  407ef4:	f003 fb36 	bl	40b564 <__aeabi_d2iz>
  407ef8:	4604      	mov	r4, r0
  407efa:	f003 f81d 	bl	40af38 <__aeabi_i2d>
  407efe:	4652      	mov	r2, sl
  407f00:	465b      	mov	r3, fp
  407f02:	f003 f87f 	bl	40b004 <__aeabi_dmul>
  407f06:	460b      	mov	r3, r1
  407f08:	4602      	mov	r2, r0
  407f0a:	4639      	mov	r1, r7
  407f0c:	4630      	mov	r0, r6
  407f0e:	f002 fec5 	bl	40ac9c <__aeabi_dsub>
  407f12:	9d07      	ldr	r5, [sp, #28]
  407f14:	f104 0330 	add.w	r3, r4, #48	; 0x30
  407f18:	702b      	strb	r3, [r5, #0]
  407f1a:	9b06      	ldr	r3, [sp, #24]
  407f1c:	2b01      	cmp	r3, #1
  407f1e:	4606      	mov	r6, r0
  407f20:	460f      	mov	r7, r1
  407f22:	f105 0501 	add.w	r5, r5, #1
  407f26:	d062      	beq.n	407fee <_dtoa_r+0x346>
  407f28:	2200      	movs	r2, #0
  407f2a:	4b18      	ldr	r3, [pc, #96]	; (407f8c <_dtoa_r+0x2e4>)
  407f2c:	f003 f86a 	bl	40b004 <__aeabi_dmul>
  407f30:	2200      	movs	r2, #0
  407f32:	2300      	movs	r3, #0
  407f34:	4606      	mov	r6, r0
  407f36:	460f      	mov	r7, r1
  407f38:	f003 facc 	bl	40b4d4 <__aeabi_dcmpeq>
  407f3c:	2800      	cmp	r0, #0
  407f3e:	d17e      	bne.n	40803e <_dtoa_r+0x396>
  407f40:	f8cd 9014 	str.w	r9, [sp, #20]
  407f44:	f8dd a018 	ldr.w	sl, [sp, #24]
  407f48:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407f4c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  407f50:	e029      	b.n	407fa6 <_dtoa_r+0x2fe>
  407f52:	bf00      	nop
  407f54:	f3af 8000 	nop.w
  407f58:	636f4361 	.word	0x636f4361
  407f5c:	3fd287a7 	.word	0x3fd287a7
  407f60:	8b60c8b3 	.word	0x8b60c8b3
  407f64:	3fc68a28 	.word	0x3fc68a28
  407f68:	509f79fb 	.word	0x509f79fb
  407f6c:	3fd34413 	.word	0x3fd34413
  407f70:	7ff00000 	.word	0x7ff00000
  407f74:	0040cbc9 	.word	0x0040cbc9
  407f78:	0040cc08 	.word	0x0040cc08
  407f7c:	3ff80000 	.word	0x3ff80000
  407f80:	0040cc18 	.word	0x0040cc18
  407f84:	0040cbfc 	.word	0x0040cbfc
  407f88:	0040cbc8 	.word	0x0040cbc8
  407f8c:	40240000 	.word	0x40240000
  407f90:	f003 f838 	bl	40b004 <__aeabi_dmul>
  407f94:	2200      	movs	r2, #0
  407f96:	2300      	movs	r3, #0
  407f98:	4606      	mov	r6, r0
  407f9a:	460f      	mov	r7, r1
  407f9c:	f003 fa9a 	bl	40b4d4 <__aeabi_dcmpeq>
  407fa0:	2800      	cmp	r0, #0
  407fa2:	f040 83b7 	bne.w	408714 <_dtoa_r+0xa6c>
  407fa6:	4642      	mov	r2, r8
  407fa8:	464b      	mov	r3, r9
  407faa:	4630      	mov	r0, r6
  407fac:	4639      	mov	r1, r7
  407fae:	f003 f953 	bl	40b258 <__aeabi_ddiv>
  407fb2:	f003 fad7 	bl	40b564 <__aeabi_d2iz>
  407fb6:	4604      	mov	r4, r0
  407fb8:	f002 ffbe 	bl	40af38 <__aeabi_i2d>
  407fbc:	4642      	mov	r2, r8
  407fbe:	464b      	mov	r3, r9
  407fc0:	f003 f820 	bl	40b004 <__aeabi_dmul>
  407fc4:	4602      	mov	r2, r0
  407fc6:	460b      	mov	r3, r1
  407fc8:	4630      	mov	r0, r6
  407fca:	4639      	mov	r1, r7
  407fcc:	f002 fe66 	bl	40ac9c <__aeabi_dsub>
  407fd0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  407fd4:	f805 eb01 	strb.w	lr, [r5], #1
  407fd8:	ebcb 0e05 	rsb	lr, fp, r5
  407fdc:	45d6      	cmp	lr, sl
  407fde:	4606      	mov	r6, r0
  407fe0:	460f      	mov	r7, r1
  407fe2:	f04f 0200 	mov.w	r2, #0
  407fe6:	4bb0      	ldr	r3, [pc, #704]	; (4082a8 <_dtoa_r+0x600>)
  407fe8:	d1d2      	bne.n	407f90 <_dtoa_r+0x2e8>
  407fea:	f8dd 9014 	ldr.w	r9, [sp, #20]
  407fee:	4632      	mov	r2, r6
  407ff0:	463b      	mov	r3, r7
  407ff2:	4630      	mov	r0, r6
  407ff4:	4639      	mov	r1, r7
  407ff6:	f002 fe53 	bl	40aca0 <__adddf3>
  407ffa:	4606      	mov	r6, r0
  407ffc:	460f      	mov	r7, r1
  407ffe:	4602      	mov	r2, r0
  408000:	460b      	mov	r3, r1
  408002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408006:	f003 fa6f 	bl	40b4e8 <__aeabi_dcmplt>
  40800a:	b940      	cbnz	r0, 40801e <_dtoa_r+0x376>
  40800c:	4632      	mov	r2, r6
  40800e:	463b      	mov	r3, r7
  408010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408014:	f003 fa5e 	bl	40b4d4 <__aeabi_dcmpeq>
  408018:	b188      	cbz	r0, 40803e <_dtoa_r+0x396>
  40801a:	07e3      	lsls	r3, r4, #31
  40801c:	d50f      	bpl.n	40803e <_dtoa_r+0x396>
  40801e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  408022:	9a07      	ldr	r2, [sp, #28]
  408024:	1e6b      	subs	r3, r5, #1
  408026:	e004      	b.n	408032 <_dtoa_r+0x38a>
  408028:	429a      	cmp	r2, r3
  40802a:	f000 842c 	beq.w	408886 <_dtoa_r+0xbde>
  40802e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408032:	2c39      	cmp	r4, #57	; 0x39
  408034:	f103 0501 	add.w	r5, r3, #1
  408038:	d0f6      	beq.n	408028 <_dtoa_r+0x380>
  40803a:	3401      	adds	r4, #1
  40803c:	701c      	strb	r4, [r3, #0]
  40803e:	9908      	ldr	r1, [sp, #32]
  408040:	4648      	mov	r0, r9
  408042:	f001 fead 	bl	409da0 <_Bfree>
  408046:	2200      	movs	r2, #0
  408048:	9b04      	ldr	r3, [sp, #16]
  40804a:	702a      	strb	r2, [r5, #0]
  40804c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40804e:	3301      	adds	r3, #1
  408050:	6013      	str	r3, [r2, #0]
  408052:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408054:	2b00      	cmp	r3, #0
  408056:	f000 83a7 	beq.w	4087a8 <_dtoa_r+0xb00>
  40805a:	9807      	ldr	r0, [sp, #28]
  40805c:	601d      	str	r5, [r3, #0]
  40805e:	b017      	add	sp, #92	; 0x5c
  408060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408064:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408066:	2a00      	cmp	r2, #0
  408068:	f000 8112 	beq.w	408290 <_dtoa_r+0x5e8>
  40806c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40806e:	2a01      	cmp	r2, #1
  408070:	f340 8258 	ble.w	408524 <_dtoa_r+0x87c>
  408074:	9b06      	ldr	r3, [sp, #24]
  408076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408078:	1e5f      	subs	r7, r3, #1
  40807a:	42ba      	cmp	r2, r7
  40807c:	f2c0 8397 	blt.w	4087ae <_dtoa_r+0xb06>
  408080:	1bd7      	subs	r7, r2, r7
  408082:	9b06      	ldr	r3, [sp, #24]
  408084:	2b00      	cmp	r3, #0
  408086:	f2c0 848a 	blt.w	40899e <_dtoa_r+0xcf6>
  40808a:	9d05      	ldr	r5, [sp, #20]
  40808c:	9b06      	ldr	r3, [sp, #24]
  40808e:	9a05      	ldr	r2, [sp, #20]
  408090:	441a      	add	r2, r3
  408092:	9205      	str	r2, [sp, #20]
  408094:	9a02      	ldr	r2, [sp, #8]
  408096:	2101      	movs	r1, #1
  408098:	441a      	add	r2, r3
  40809a:	4648      	mov	r0, r9
  40809c:	9202      	str	r2, [sp, #8]
  40809e:	f001 ff17 	bl	409ed0 <__i2b>
  4080a2:	4606      	mov	r6, r0
  4080a4:	b165      	cbz	r5, 4080c0 <_dtoa_r+0x418>
  4080a6:	9902      	ldr	r1, [sp, #8]
  4080a8:	2900      	cmp	r1, #0
  4080aa:	460b      	mov	r3, r1
  4080ac:	dd08      	ble.n	4080c0 <_dtoa_r+0x418>
  4080ae:	42a9      	cmp	r1, r5
  4080b0:	9a05      	ldr	r2, [sp, #20]
  4080b2:	bfa8      	it	ge
  4080b4:	462b      	movge	r3, r5
  4080b6:	1ad2      	subs	r2, r2, r3
  4080b8:	1aed      	subs	r5, r5, r3
  4080ba:	1acb      	subs	r3, r1, r3
  4080bc:	9205      	str	r2, [sp, #20]
  4080be:	9302      	str	r3, [sp, #8]
  4080c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4080c2:	2b00      	cmp	r3, #0
  4080c4:	f340 82fc 	ble.w	4086c0 <_dtoa_r+0xa18>
  4080c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4080ca:	2a00      	cmp	r2, #0
  4080cc:	f000 8201 	beq.w	4084d2 <_dtoa_r+0x82a>
  4080d0:	2f00      	cmp	r7, #0
  4080d2:	f000 81fe 	beq.w	4084d2 <_dtoa_r+0x82a>
  4080d6:	4631      	mov	r1, r6
  4080d8:	463a      	mov	r2, r7
  4080da:	4648      	mov	r0, r9
  4080dc:	f001 ff9a 	bl	40a014 <__pow5mult>
  4080e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4080e4:	4601      	mov	r1, r0
  4080e6:	4642      	mov	r2, r8
  4080e8:	4606      	mov	r6, r0
  4080ea:	4648      	mov	r0, r9
  4080ec:	f001 fefa 	bl	409ee4 <__multiply>
  4080f0:	4641      	mov	r1, r8
  4080f2:	4604      	mov	r4, r0
  4080f4:	4648      	mov	r0, r9
  4080f6:	f001 fe53 	bl	409da0 <_Bfree>
  4080fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4080fc:	1bdb      	subs	r3, r3, r7
  4080fe:	930a      	str	r3, [sp, #40]	; 0x28
  408100:	f040 81e6 	bne.w	4084d0 <_dtoa_r+0x828>
  408104:	2101      	movs	r1, #1
  408106:	4648      	mov	r0, r9
  408108:	f001 fee2 	bl	409ed0 <__i2b>
  40810c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40810e:	4680      	mov	r8, r0
  408110:	2b00      	cmp	r3, #0
  408112:	f000 8219 	beq.w	408548 <_dtoa_r+0x8a0>
  408116:	4601      	mov	r1, r0
  408118:	461a      	mov	r2, r3
  40811a:	4648      	mov	r0, r9
  40811c:	f001 ff7a 	bl	40a014 <__pow5mult>
  408120:	9b20      	ldr	r3, [sp, #128]	; 0x80
  408122:	2b01      	cmp	r3, #1
  408124:	4680      	mov	r8, r0
  408126:	f340 82f8 	ble.w	40871a <_dtoa_r+0xa72>
  40812a:	2700      	movs	r7, #0
  40812c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408130:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  408134:	6918      	ldr	r0, [r3, #16]
  408136:	f001 fe7d 	bl	409e34 <__hi0bits>
  40813a:	f1c0 0020 	rsb	r0, r0, #32
  40813e:	9a02      	ldr	r2, [sp, #8]
  408140:	4410      	add	r0, r2
  408142:	f010 001f 	ands.w	r0, r0, #31
  408146:	f000 81f6 	beq.w	408536 <_dtoa_r+0x88e>
  40814a:	f1c0 0320 	rsb	r3, r0, #32
  40814e:	2b04      	cmp	r3, #4
  408150:	f340 84ca 	ble.w	408ae8 <_dtoa_r+0xe40>
  408154:	9b05      	ldr	r3, [sp, #20]
  408156:	f1c0 001c 	rsb	r0, r0, #28
  40815a:	4403      	add	r3, r0
  40815c:	9305      	str	r3, [sp, #20]
  40815e:	4613      	mov	r3, r2
  408160:	4403      	add	r3, r0
  408162:	4405      	add	r5, r0
  408164:	9302      	str	r3, [sp, #8]
  408166:	9b05      	ldr	r3, [sp, #20]
  408168:	2b00      	cmp	r3, #0
  40816a:	dd05      	ble.n	408178 <_dtoa_r+0x4d0>
  40816c:	4621      	mov	r1, r4
  40816e:	461a      	mov	r2, r3
  408170:	4648      	mov	r0, r9
  408172:	f001 ff9f 	bl	40a0b4 <__lshift>
  408176:	4604      	mov	r4, r0
  408178:	9b02      	ldr	r3, [sp, #8]
  40817a:	2b00      	cmp	r3, #0
  40817c:	dd05      	ble.n	40818a <_dtoa_r+0x4e2>
  40817e:	4641      	mov	r1, r8
  408180:	461a      	mov	r2, r3
  408182:	4648      	mov	r0, r9
  408184:	f001 ff96 	bl	40a0b4 <__lshift>
  408188:	4680      	mov	r8, r0
  40818a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40818c:	2b00      	cmp	r3, #0
  40818e:	f040 827c 	bne.w	40868a <_dtoa_r+0x9e2>
  408192:	9b06      	ldr	r3, [sp, #24]
  408194:	2b00      	cmp	r3, #0
  408196:	f340 8295 	ble.w	4086c4 <_dtoa_r+0xa1c>
  40819a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40819c:	2b00      	cmp	r3, #0
  40819e:	f040 81f5 	bne.w	40858c <_dtoa_r+0x8e4>
  4081a2:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4081a6:	9f06      	ldr	r7, [sp, #24]
  4081a8:	465d      	mov	r5, fp
  4081aa:	e002      	b.n	4081b2 <_dtoa_r+0x50a>
  4081ac:	f001 fe02 	bl	409db4 <__multadd>
  4081b0:	4604      	mov	r4, r0
  4081b2:	4641      	mov	r1, r8
  4081b4:	4620      	mov	r0, r4
  4081b6:	f7ff fce3 	bl	407b80 <quorem>
  4081ba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4081be:	f805 ab01 	strb.w	sl, [r5], #1
  4081c2:	ebcb 0305 	rsb	r3, fp, r5
  4081c6:	42bb      	cmp	r3, r7
  4081c8:	f04f 020a 	mov.w	r2, #10
  4081cc:	f04f 0300 	mov.w	r3, #0
  4081d0:	4621      	mov	r1, r4
  4081d2:	4648      	mov	r0, r9
  4081d4:	dbea      	blt.n	4081ac <_dtoa_r+0x504>
  4081d6:	9b07      	ldr	r3, [sp, #28]
  4081d8:	9a06      	ldr	r2, [sp, #24]
  4081da:	2a01      	cmp	r2, #1
  4081dc:	bfac      	ite	ge
  4081de:	189b      	addge	r3, r3, r2
  4081e0:	3301      	addlt	r3, #1
  4081e2:	461d      	mov	r5, r3
  4081e4:	f04f 0b00 	mov.w	fp, #0
  4081e8:	4621      	mov	r1, r4
  4081ea:	2201      	movs	r2, #1
  4081ec:	4648      	mov	r0, r9
  4081ee:	f001 ff61 	bl	40a0b4 <__lshift>
  4081f2:	4641      	mov	r1, r8
  4081f4:	9008      	str	r0, [sp, #32]
  4081f6:	f001 ffb5 	bl	40a164 <__mcmp>
  4081fa:	2800      	cmp	r0, #0
  4081fc:	f340 830d 	ble.w	40881a <_dtoa_r+0xb72>
  408200:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  408204:	9907      	ldr	r1, [sp, #28]
  408206:	1e6b      	subs	r3, r5, #1
  408208:	e004      	b.n	408214 <_dtoa_r+0x56c>
  40820a:	428b      	cmp	r3, r1
  40820c:	f000 8278 	beq.w	408700 <_dtoa_r+0xa58>
  408210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  408214:	2a39      	cmp	r2, #57	; 0x39
  408216:	f103 0501 	add.w	r5, r3, #1
  40821a:	d0f6      	beq.n	40820a <_dtoa_r+0x562>
  40821c:	3201      	adds	r2, #1
  40821e:	701a      	strb	r2, [r3, #0]
  408220:	4641      	mov	r1, r8
  408222:	4648      	mov	r0, r9
  408224:	f001 fdbc 	bl	409da0 <_Bfree>
  408228:	2e00      	cmp	r6, #0
  40822a:	f43f af08 	beq.w	40803e <_dtoa_r+0x396>
  40822e:	f1bb 0f00 	cmp.w	fp, #0
  408232:	d005      	beq.n	408240 <_dtoa_r+0x598>
  408234:	45b3      	cmp	fp, r6
  408236:	d003      	beq.n	408240 <_dtoa_r+0x598>
  408238:	4659      	mov	r1, fp
  40823a:	4648      	mov	r0, r9
  40823c:	f001 fdb0 	bl	409da0 <_Bfree>
  408240:	4631      	mov	r1, r6
  408242:	4648      	mov	r0, r9
  408244:	f001 fdac 	bl	409da0 <_Bfree>
  408248:	e6f9      	b.n	40803e <_dtoa_r+0x396>
  40824a:	2301      	movs	r3, #1
  40824c:	930c      	str	r3, [sp, #48]	; 0x30
  40824e:	e5e3      	b.n	407e18 <_dtoa_r+0x170>
  408250:	f8dd 8010 	ldr.w	r8, [sp, #16]
  408254:	4640      	mov	r0, r8
  408256:	f002 fe6f 	bl	40af38 <__aeabi_i2d>
  40825a:	4602      	mov	r2, r0
  40825c:	460b      	mov	r3, r1
  40825e:	4630      	mov	r0, r6
  408260:	4639      	mov	r1, r7
  408262:	f003 f937 	bl	40b4d4 <__aeabi_dcmpeq>
  408266:	2800      	cmp	r0, #0
  408268:	f47f adc2 	bne.w	407df0 <_dtoa_r+0x148>
  40826c:	f108 33ff 	add.w	r3, r8, #4294967295
  408270:	9304      	str	r3, [sp, #16]
  408272:	e5bd      	b.n	407df0 <_dtoa_r+0x148>
  408274:	9a05      	ldr	r2, [sp, #20]
  408276:	9b04      	ldr	r3, [sp, #16]
  408278:	1ad2      	subs	r2, r2, r3
  40827a:	425b      	negs	r3, r3
  40827c:	930a      	str	r3, [sp, #40]	; 0x28
  40827e:	2300      	movs	r3, #0
  408280:	9205      	str	r2, [sp, #20]
  408282:	930b      	str	r3, [sp, #44]	; 0x2c
  408284:	e5da      	b.n	407e3c <_dtoa_r+0x194>
  408286:	425b      	negs	r3, r3
  408288:	9305      	str	r3, [sp, #20]
  40828a:	2300      	movs	r3, #0
  40828c:	9302      	str	r3, [sp, #8]
  40828e:	e5ca      	b.n	407e26 <_dtoa_r+0x17e>
  408290:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408292:	9d05      	ldr	r5, [sp, #20]
  408294:	9e09      	ldr	r6, [sp, #36]	; 0x24
  408296:	e705      	b.n	4080a4 <_dtoa_r+0x3fc>
  408298:	f1c3 0820 	rsb	r8, r3, #32
  40829c:	fa0a f008 	lsl.w	r0, sl, r8
  4082a0:	e573      	b.n	407d8a <_dtoa_r+0xe2>
  4082a2:	900c      	str	r0, [sp, #48]	; 0x30
  4082a4:	e5b8      	b.n	407e18 <_dtoa_r+0x170>
  4082a6:	bf00      	nop
  4082a8:	40240000 	.word	0x40240000
  4082ac:	2300      	movs	r3, #0
  4082ae:	9309      	str	r3, [sp, #36]	; 0x24
  4082b0:	9b04      	ldr	r3, [sp, #16]
  4082b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
  4082b4:	4413      	add	r3, r2
  4082b6:	930d      	str	r3, [sp, #52]	; 0x34
  4082b8:	3301      	adds	r3, #1
  4082ba:	2b00      	cmp	r3, #0
  4082bc:	9306      	str	r3, [sp, #24]
  4082be:	f340 8283 	ble.w	4087c8 <_dtoa_r+0xb20>
  4082c2:	9c06      	ldr	r4, [sp, #24]
  4082c4:	4626      	mov	r6, r4
  4082c6:	2100      	movs	r1, #0
  4082c8:	2e17      	cmp	r6, #23
  4082ca:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4082ce:	d90b      	bls.n	4082e8 <_dtoa_r+0x640>
  4082d0:	2201      	movs	r2, #1
  4082d2:	2304      	movs	r3, #4
  4082d4:	005b      	lsls	r3, r3, #1
  4082d6:	f103 0014 	add.w	r0, r3, #20
  4082da:	42b0      	cmp	r0, r6
  4082dc:	4611      	mov	r1, r2
  4082de:	f102 0201 	add.w	r2, r2, #1
  4082e2:	d9f7      	bls.n	4082d4 <_dtoa_r+0x62c>
  4082e4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4082e8:	4648      	mov	r0, r9
  4082ea:	f001 fd33 	bl	409d54 <_Balloc>
  4082ee:	2c0e      	cmp	r4, #14
  4082f0:	9007      	str	r0, [sp, #28]
  4082f2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4082f6:	f63f ade0 	bhi.w	407eba <_dtoa_r+0x212>
  4082fa:	2d00      	cmp	r5, #0
  4082fc:	f43f addd 	beq.w	407eba <_dtoa_r+0x212>
  408300:	9904      	ldr	r1, [sp, #16]
  408302:	4657      	mov	r7, sl
  408304:	46d8      	mov	r8, fp
  408306:	2900      	cmp	r1, #0
  408308:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40830c:	f340 8292 	ble.w	408834 <_dtoa_r+0xb8c>
  408310:	4b91      	ldr	r3, [pc, #580]	; (408558 <_dtoa_r+0x8b0>)
  408312:	f001 020f 	and.w	r2, r1, #15
  408316:	110e      	asrs	r6, r1, #4
  408318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40831c:	06f0      	lsls	r0, r6, #27
  40831e:	e9d3 4500 	ldrd	r4, r5, [r3]
  408322:	f140 824c 	bpl.w	4087be <_dtoa_r+0xb16>
  408326:	4b8d      	ldr	r3, [pc, #564]	; (40855c <_dtoa_r+0x8b4>)
  408328:	4650      	mov	r0, sl
  40832a:	4659      	mov	r1, fp
  40832c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  408330:	f002 ff92 	bl	40b258 <__aeabi_ddiv>
  408334:	f006 060f 	and.w	r6, r6, #15
  408338:	4682      	mov	sl, r0
  40833a:	468b      	mov	fp, r1
  40833c:	f04f 0803 	mov.w	r8, #3
  408340:	b186      	cbz	r6, 408364 <_dtoa_r+0x6bc>
  408342:	4f86      	ldr	r7, [pc, #536]	; (40855c <_dtoa_r+0x8b4>)
  408344:	07f1      	lsls	r1, r6, #31
  408346:	d509      	bpl.n	40835c <_dtoa_r+0x6b4>
  408348:	4620      	mov	r0, r4
  40834a:	4629      	mov	r1, r5
  40834c:	e9d7 2300 	ldrd	r2, r3, [r7]
  408350:	f002 fe58 	bl	40b004 <__aeabi_dmul>
  408354:	f108 0801 	add.w	r8, r8, #1
  408358:	4604      	mov	r4, r0
  40835a:	460d      	mov	r5, r1
  40835c:	1076      	asrs	r6, r6, #1
  40835e:	f107 0708 	add.w	r7, r7, #8
  408362:	d1ef      	bne.n	408344 <_dtoa_r+0x69c>
  408364:	4622      	mov	r2, r4
  408366:	462b      	mov	r3, r5
  408368:	4650      	mov	r0, sl
  40836a:	4659      	mov	r1, fp
  40836c:	f002 ff74 	bl	40b258 <__aeabi_ddiv>
  408370:	4606      	mov	r6, r0
  408372:	460f      	mov	r7, r1
  408374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408376:	b143      	cbz	r3, 40838a <_dtoa_r+0x6e2>
  408378:	2200      	movs	r2, #0
  40837a:	4b79      	ldr	r3, [pc, #484]	; (408560 <_dtoa_r+0x8b8>)
  40837c:	4630      	mov	r0, r6
  40837e:	4639      	mov	r1, r7
  408380:	f003 f8b2 	bl	40b4e8 <__aeabi_dcmplt>
  408384:	2800      	cmp	r0, #0
  408386:	f040 8320 	bne.w	4089ca <_dtoa_r+0xd22>
  40838a:	4640      	mov	r0, r8
  40838c:	f002 fdd4 	bl	40af38 <__aeabi_i2d>
  408390:	4632      	mov	r2, r6
  408392:	463b      	mov	r3, r7
  408394:	f002 fe36 	bl	40b004 <__aeabi_dmul>
  408398:	4b72      	ldr	r3, [pc, #456]	; (408564 <_dtoa_r+0x8bc>)
  40839a:	2200      	movs	r2, #0
  40839c:	f002 fc80 	bl	40aca0 <__adddf3>
  4083a0:	9b06      	ldr	r3, [sp, #24]
  4083a2:	4604      	mov	r4, r0
  4083a4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  4083a8:	2b00      	cmp	r3, #0
  4083aa:	f000 81df 	beq.w	40876c <_dtoa_r+0xac4>
  4083ae:	9b04      	ldr	r3, [sp, #16]
  4083b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4083b4:	9311      	str	r3, [sp, #68]	; 0x44
  4083b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4083b8:	2b00      	cmp	r3, #0
  4083ba:	f000 8297 	beq.w	4088ec <_dtoa_r+0xc44>
  4083be:	4b66      	ldr	r3, [pc, #408]	; (408558 <_dtoa_r+0x8b0>)
  4083c0:	4969      	ldr	r1, [pc, #420]	; (408568 <_dtoa_r+0x8c0>)
  4083c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4083c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4083ca:	2000      	movs	r0, #0
  4083cc:	f002 ff44 	bl	40b258 <__aeabi_ddiv>
  4083d0:	4622      	mov	r2, r4
  4083d2:	462b      	mov	r3, r5
  4083d4:	f002 fc62 	bl	40ac9c <__aeabi_dsub>
  4083d8:	4682      	mov	sl, r0
  4083da:	468b      	mov	fp, r1
  4083dc:	4630      	mov	r0, r6
  4083de:	4639      	mov	r1, r7
  4083e0:	f003 f8c0 	bl	40b564 <__aeabi_d2iz>
  4083e4:	4604      	mov	r4, r0
  4083e6:	f002 fda7 	bl	40af38 <__aeabi_i2d>
  4083ea:	4602      	mov	r2, r0
  4083ec:	460b      	mov	r3, r1
  4083ee:	4630      	mov	r0, r6
  4083f0:	4639      	mov	r1, r7
  4083f2:	f002 fc53 	bl	40ac9c <__aeabi_dsub>
  4083f6:	3430      	adds	r4, #48	; 0x30
  4083f8:	9d07      	ldr	r5, [sp, #28]
  4083fa:	b2e4      	uxtb	r4, r4
  4083fc:	4606      	mov	r6, r0
  4083fe:	460f      	mov	r7, r1
  408400:	702c      	strb	r4, [r5, #0]
  408402:	4602      	mov	r2, r0
  408404:	460b      	mov	r3, r1
  408406:	4650      	mov	r0, sl
  408408:	4659      	mov	r1, fp
  40840a:	3501      	adds	r5, #1
  40840c:	f003 f88a 	bl	40b524 <__aeabi_dcmpgt>
  408410:	2800      	cmp	r0, #0
  408412:	d14c      	bne.n	4084ae <_dtoa_r+0x806>
  408414:	4632      	mov	r2, r6
  408416:	463b      	mov	r3, r7
  408418:	2000      	movs	r0, #0
  40841a:	4951      	ldr	r1, [pc, #324]	; (408560 <_dtoa_r+0x8b8>)
  40841c:	f002 fc3e 	bl	40ac9c <__aeabi_dsub>
  408420:	4602      	mov	r2, r0
  408422:	460b      	mov	r3, r1
  408424:	4650      	mov	r0, sl
  408426:	4659      	mov	r1, fp
  408428:	f003 f87c 	bl	40b524 <__aeabi_dcmpgt>
  40842c:	2800      	cmp	r0, #0
  40842e:	f040 830d 	bne.w	408a4c <_dtoa_r+0xda4>
  408432:	f1b8 0f01 	cmp.w	r8, #1
  408436:	f340 81b3 	ble.w	4087a0 <_dtoa_r+0xaf8>
  40843a:	9b07      	ldr	r3, [sp, #28]
  40843c:	4498      	add	r8, r3
  40843e:	e00d      	b.n	40845c <_dtoa_r+0x7b4>
  408440:	2000      	movs	r0, #0
  408442:	4947      	ldr	r1, [pc, #284]	; (408560 <_dtoa_r+0x8b8>)
  408444:	f002 fc2a 	bl	40ac9c <__aeabi_dsub>
  408448:	4652      	mov	r2, sl
  40844a:	465b      	mov	r3, fp
  40844c:	f003 f84c 	bl	40b4e8 <__aeabi_dcmplt>
  408450:	2800      	cmp	r0, #0
  408452:	f040 82fb 	bne.w	408a4c <_dtoa_r+0xda4>
  408456:	4545      	cmp	r5, r8
  408458:	f000 81a2 	beq.w	4087a0 <_dtoa_r+0xaf8>
  40845c:	4650      	mov	r0, sl
  40845e:	4659      	mov	r1, fp
  408460:	2200      	movs	r2, #0
  408462:	4b42      	ldr	r3, [pc, #264]	; (40856c <_dtoa_r+0x8c4>)
  408464:	f002 fdce 	bl	40b004 <__aeabi_dmul>
  408468:	2200      	movs	r2, #0
  40846a:	4b40      	ldr	r3, [pc, #256]	; (40856c <_dtoa_r+0x8c4>)
  40846c:	4682      	mov	sl, r0
  40846e:	468b      	mov	fp, r1
  408470:	4630      	mov	r0, r6
  408472:	4639      	mov	r1, r7
  408474:	f002 fdc6 	bl	40b004 <__aeabi_dmul>
  408478:	460f      	mov	r7, r1
  40847a:	4606      	mov	r6, r0
  40847c:	f003 f872 	bl	40b564 <__aeabi_d2iz>
  408480:	4604      	mov	r4, r0
  408482:	f002 fd59 	bl	40af38 <__aeabi_i2d>
  408486:	4602      	mov	r2, r0
  408488:	460b      	mov	r3, r1
  40848a:	4630      	mov	r0, r6
  40848c:	4639      	mov	r1, r7
  40848e:	f002 fc05 	bl	40ac9c <__aeabi_dsub>
  408492:	3430      	adds	r4, #48	; 0x30
  408494:	b2e4      	uxtb	r4, r4
  408496:	4652      	mov	r2, sl
  408498:	465b      	mov	r3, fp
  40849a:	f805 4b01 	strb.w	r4, [r5], #1
  40849e:	4606      	mov	r6, r0
  4084a0:	460f      	mov	r7, r1
  4084a2:	f003 f821 	bl	40b4e8 <__aeabi_dcmplt>
  4084a6:	4632      	mov	r2, r6
  4084a8:	463b      	mov	r3, r7
  4084aa:	2800      	cmp	r0, #0
  4084ac:	d0c8      	beq.n	408440 <_dtoa_r+0x798>
  4084ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4084b0:	9304      	str	r3, [sp, #16]
  4084b2:	e5c4      	b.n	40803e <_dtoa_r+0x396>
  4084b4:	2300      	movs	r3, #0
  4084b6:	9309      	str	r3, [sp, #36]	; 0x24
  4084b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4084ba:	2b00      	cmp	r3, #0
  4084bc:	f340 8189 	ble.w	4087d2 <_dtoa_r+0xb2a>
  4084c0:	461e      	mov	r6, r3
  4084c2:	461c      	mov	r4, r3
  4084c4:	930d      	str	r3, [sp, #52]	; 0x34
  4084c6:	9306      	str	r3, [sp, #24]
  4084c8:	e6fd      	b.n	4082c6 <_dtoa_r+0x61e>
  4084ca:	2301      	movs	r3, #1
  4084cc:	9309      	str	r3, [sp, #36]	; 0x24
  4084ce:	e7f3      	b.n	4084b8 <_dtoa_r+0x810>
  4084d0:	9408      	str	r4, [sp, #32]
  4084d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4084d4:	9908      	ldr	r1, [sp, #32]
  4084d6:	4648      	mov	r0, r9
  4084d8:	f001 fd9c 	bl	40a014 <__pow5mult>
  4084dc:	4604      	mov	r4, r0
  4084de:	e611      	b.n	408104 <_dtoa_r+0x45c>
  4084e0:	9b06      	ldr	r3, [sp, #24]
  4084e2:	2b00      	cmp	r3, #0
  4084e4:	f73f acfc 	bgt.w	407ee0 <_dtoa_r+0x238>
  4084e8:	f040 82da 	bne.w	408aa0 <_dtoa_r+0xdf8>
  4084ec:	2200      	movs	r2, #0
  4084ee:	4b20      	ldr	r3, [pc, #128]	; (408570 <_dtoa_r+0x8c8>)
  4084f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4084f4:	f002 fd86 	bl	40b004 <__aeabi_dmul>
  4084f8:	4652      	mov	r2, sl
  4084fa:	465b      	mov	r3, fp
  4084fc:	f003 f808 	bl	40b510 <__aeabi_dcmpge>
  408500:	f8dd 8018 	ldr.w	r8, [sp, #24]
  408504:	4646      	mov	r6, r8
  408506:	2800      	cmp	r0, #0
  408508:	f000 80f2 	beq.w	4086f0 <_dtoa_r+0xa48>
  40850c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40850e:	9d07      	ldr	r5, [sp, #28]
  408510:	43db      	mvns	r3, r3
  408512:	9304      	str	r3, [sp, #16]
  408514:	4641      	mov	r1, r8
  408516:	4648      	mov	r0, r9
  408518:	f001 fc42 	bl	409da0 <_Bfree>
  40851c:	2e00      	cmp	r6, #0
  40851e:	f43f ad8e 	beq.w	40803e <_dtoa_r+0x396>
  408522:	e68d      	b.n	408240 <_dtoa_r+0x598>
  408524:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408526:	2a00      	cmp	r2, #0
  408528:	f000 8241 	beq.w	4089ae <_dtoa_r+0xd06>
  40852c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408530:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408532:	9d05      	ldr	r5, [sp, #20]
  408534:	e5ab      	b.n	40808e <_dtoa_r+0x3e6>
  408536:	201c      	movs	r0, #28
  408538:	9b05      	ldr	r3, [sp, #20]
  40853a:	4403      	add	r3, r0
  40853c:	9305      	str	r3, [sp, #20]
  40853e:	9b02      	ldr	r3, [sp, #8]
  408540:	4403      	add	r3, r0
  408542:	4405      	add	r5, r0
  408544:	9302      	str	r3, [sp, #8]
  408546:	e60e      	b.n	408166 <_dtoa_r+0x4be>
  408548:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40854a:	2b01      	cmp	r3, #1
  40854c:	f340 8282 	ble.w	408a54 <_dtoa_r+0xdac>
  408550:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  408552:	2001      	movs	r0, #1
  408554:	e5f3      	b.n	40813e <_dtoa_r+0x496>
  408556:	bf00      	nop
  408558:	0040cc18 	.word	0x0040cc18
  40855c:	0040cce0 	.word	0x0040cce0
  408560:	3ff00000 	.word	0x3ff00000
  408564:	401c0000 	.word	0x401c0000
  408568:	3fe00000 	.word	0x3fe00000
  40856c:	40240000 	.word	0x40240000
  408570:	40140000 	.word	0x40140000
  408574:	4631      	mov	r1, r6
  408576:	2300      	movs	r3, #0
  408578:	220a      	movs	r2, #10
  40857a:	4648      	mov	r0, r9
  40857c:	f001 fc1a 	bl	409db4 <__multadd>
  408580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408582:	2b00      	cmp	r3, #0
  408584:	4606      	mov	r6, r0
  408586:	f340 8297 	ble.w	408ab8 <_dtoa_r+0xe10>
  40858a:	9306      	str	r3, [sp, #24]
  40858c:	2d00      	cmp	r5, #0
  40858e:	dd05      	ble.n	40859c <_dtoa_r+0x8f4>
  408590:	4631      	mov	r1, r6
  408592:	462a      	mov	r2, r5
  408594:	4648      	mov	r0, r9
  408596:	f001 fd8d 	bl	40a0b4 <__lshift>
  40859a:	4606      	mov	r6, r0
  40859c:	2f00      	cmp	r7, #0
  40859e:	f040 817c 	bne.w	40889a <_dtoa_r+0xbf2>
  4085a2:	9605      	str	r6, [sp, #20]
  4085a4:	9b06      	ldr	r3, [sp, #24]
  4085a6:	9a07      	ldr	r2, [sp, #28]
  4085a8:	f8dd b014 	ldr.w	fp, [sp, #20]
  4085ac:	3b01      	subs	r3, #1
  4085ae:	18d3      	adds	r3, r2, r3
  4085b0:	9308      	str	r3, [sp, #32]
  4085b2:	f00a 0301 	and.w	r3, sl, #1
  4085b6:	9309      	str	r3, [sp, #36]	; 0x24
  4085b8:	4617      	mov	r7, r2
  4085ba:	46c2      	mov	sl, r8
  4085bc:	4651      	mov	r1, sl
  4085be:	4620      	mov	r0, r4
  4085c0:	f7ff fade 	bl	407b80 <quorem>
  4085c4:	4631      	mov	r1, r6
  4085c6:	4605      	mov	r5, r0
  4085c8:	4620      	mov	r0, r4
  4085ca:	f001 fdcb 	bl	40a164 <__mcmp>
  4085ce:	465a      	mov	r2, fp
  4085d0:	9002      	str	r0, [sp, #8]
  4085d2:	4651      	mov	r1, sl
  4085d4:	4648      	mov	r0, r9
  4085d6:	f001 fde5 	bl	40a1a4 <__mdiff>
  4085da:	68c2      	ldr	r2, [r0, #12]
  4085dc:	4680      	mov	r8, r0
  4085de:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4085e2:	2a00      	cmp	r2, #0
  4085e4:	d149      	bne.n	40867a <_dtoa_r+0x9d2>
  4085e6:	4601      	mov	r1, r0
  4085e8:	4620      	mov	r0, r4
  4085ea:	9306      	str	r3, [sp, #24]
  4085ec:	f001 fdba 	bl	40a164 <__mcmp>
  4085f0:	4641      	mov	r1, r8
  4085f2:	9005      	str	r0, [sp, #20]
  4085f4:	4648      	mov	r0, r9
  4085f6:	f001 fbd3 	bl	409da0 <_Bfree>
  4085fa:	9a05      	ldr	r2, [sp, #20]
  4085fc:	9b06      	ldr	r3, [sp, #24]
  4085fe:	b92a      	cbnz	r2, 40860c <_dtoa_r+0x964>
  408600:	9920      	ldr	r1, [sp, #128]	; 0x80
  408602:	b919      	cbnz	r1, 40860c <_dtoa_r+0x964>
  408604:	9909      	ldr	r1, [sp, #36]	; 0x24
  408606:	2900      	cmp	r1, #0
  408608:	f000 8236 	beq.w	408a78 <_dtoa_r+0xdd0>
  40860c:	9902      	ldr	r1, [sp, #8]
  40860e:	2900      	cmp	r1, #0
  408610:	f2c0 80e4 	blt.w	4087dc <_dtoa_r+0xb34>
  408614:	d105      	bne.n	408622 <_dtoa_r+0x97a>
  408616:	9920      	ldr	r1, [sp, #128]	; 0x80
  408618:	b919      	cbnz	r1, 408622 <_dtoa_r+0x97a>
  40861a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40861c:	2900      	cmp	r1, #0
  40861e:	f000 80dd 	beq.w	4087dc <_dtoa_r+0xb34>
  408622:	2a00      	cmp	r2, #0
  408624:	f300 814d 	bgt.w	4088c2 <_dtoa_r+0xc1a>
  408628:	9a08      	ldr	r2, [sp, #32]
  40862a:	703b      	strb	r3, [r7, #0]
  40862c:	f107 0801 	add.w	r8, r7, #1
  408630:	4297      	cmp	r7, r2
  408632:	4645      	mov	r5, r8
  408634:	f000 8154 	beq.w	4088e0 <_dtoa_r+0xc38>
  408638:	4621      	mov	r1, r4
  40863a:	2300      	movs	r3, #0
  40863c:	220a      	movs	r2, #10
  40863e:	4648      	mov	r0, r9
  408640:	f001 fbb8 	bl	409db4 <__multadd>
  408644:	455e      	cmp	r6, fp
  408646:	4604      	mov	r4, r0
  408648:	4631      	mov	r1, r6
  40864a:	f04f 0300 	mov.w	r3, #0
  40864e:	f04f 020a 	mov.w	r2, #10
  408652:	4648      	mov	r0, r9
  408654:	d00b      	beq.n	40866e <_dtoa_r+0x9c6>
  408656:	f001 fbad 	bl	409db4 <__multadd>
  40865a:	4659      	mov	r1, fp
  40865c:	4606      	mov	r6, r0
  40865e:	2300      	movs	r3, #0
  408660:	220a      	movs	r2, #10
  408662:	4648      	mov	r0, r9
  408664:	f001 fba6 	bl	409db4 <__multadd>
  408668:	4647      	mov	r7, r8
  40866a:	4683      	mov	fp, r0
  40866c:	e7a6      	b.n	4085bc <_dtoa_r+0x914>
  40866e:	f001 fba1 	bl	409db4 <__multadd>
  408672:	4647      	mov	r7, r8
  408674:	4606      	mov	r6, r0
  408676:	4683      	mov	fp, r0
  408678:	e7a0      	b.n	4085bc <_dtoa_r+0x914>
  40867a:	4601      	mov	r1, r0
  40867c:	4648      	mov	r0, r9
  40867e:	9305      	str	r3, [sp, #20]
  408680:	f001 fb8e 	bl	409da0 <_Bfree>
  408684:	2201      	movs	r2, #1
  408686:	9b05      	ldr	r3, [sp, #20]
  408688:	e7c0      	b.n	40860c <_dtoa_r+0x964>
  40868a:	4641      	mov	r1, r8
  40868c:	4620      	mov	r0, r4
  40868e:	f001 fd69 	bl	40a164 <__mcmp>
  408692:	2800      	cmp	r0, #0
  408694:	f6bf ad7d 	bge.w	408192 <_dtoa_r+0x4ea>
  408698:	4621      	mov	r1, r4
  40869a:	9c04      	ldr	r4, [sp, #16]
  40869c:	2300      	movs	r3, #0
  40869e:	3c01      	subs	r4, #1
  4086a0:	220a      	movs	r2, #10
  4086a2:	4648      	mov	r0, r9
  4086a4:	9404      	str	r4, [sp, #16]
  4086a6:	f001 fb85 	bl	409db4 <__multadd>
  4086aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4086ac:	4604      	mov	r4, r0
  4086ae:	2b00      	cmp	r3, #0
  4086b0:	f47f af60 	bne.w	408574 <_dtoa_r+0x8cc>
  4086b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4086b6:	2b00      	cmp	r3, #0
  4086b8:	f340 81f6 	ble.w	408aa8 <_dtoa_r+0xe00>
  4086bc:	9306      	str	r3, [sp, #24]
  4086be:	e570      	b.n	4081a2 <_dtoa_r+0x4fa>
  4086c0:	9c08      	ldr	r4, [sp, #32]
  4086c2:	e51f      	b.n	408104 <_dtoa_r+0x45c>
  4086c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4086c6:	2b02      	cmp	r3, #2
  4086c8:	f77f ad67 	ble.w	40819a <_dtoa_r+0x4f2>
  4086cc:	9b06      	ldr	r3, [sp, #24]
  4086ce:	2b00      	cmp	r3, #0
  4086d0:	f040 8179 	bne.w	4089c6 <_dtoa_r+0xd1e>
  4086d4:	4641      	mov	r1, r8
  4086d6:	2205      	movs	r2, #5
  4086d8:	4648      	mov	r0, r9
  4086da:	f001 fb6b 	bl	409db4 <__multadd>
  4086de:	4601      	mov	r1, r0
  4086e0:	4680      	mov	r8, r0
  4086e2:	4620      	mov	r0, r4
  4086e4:	f001 fd3e 	bl	40a164 <__mcmp>
  4086e8:	2800      	cmp	r0, #0
  4086ea:	9408      	str	r4, [sp, #32]
  4086ec:	f77f af0e 	ble.w	40850c <_dtoa_r+0x864>
  4086f0:	9a04      	ldr	r2, [sp, #16]
  4086f2:	9907      	ldr	r1, [sp, #28]
  4086f4:	2331      	movs	r3, #49	; 0x31
  4086f6:	3201      	adds	r2, #1
  4086f8:	9204      	str	r2, [sp, #16]
  4086fa:	700b      	strb	r3, [r1, #0]
  4086fc:	1c4d      	adds	r5, r1, #1
  4086fe:	e709      	b.n	408514 <_dtoa_r+0x86c>
  408700:	9a04      	ldr	r2, [sp, #16]
  408702:	3201      	adds	r2, #1
  408704:	9204      	str	r2, [sp, #16]
  408706:	9a07      	ldr	r2, [sp, #28]
  408708:	2331      	movs	r3, #49	; 0x31
  40870a:	7013      	strb	r3, [r2, #0]
  40870c:	e588      	b.n	408220 <_dtoa_r+0x578>
  40870e:	2301      	movs	r3, #1
  408710:	9309      	str	r3, [sp, #36]	; 0x24
  408712:	e5cd      	b.n	4082b0 <_dtoa_r+0x608>
  408714:	f8dd 9014 	ldr.w	r9, [sp, #20]
  408718:	e491      	b.n	40803e <_dtoa_r+0x396>
  40871a:	f1ba 0f00 	cmp.w	sl, #0
  40871e:	f47f ad04 	bne.w	40812a <_dtoa_r+0x482>
  408722:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408726:	2b00      	cmp	r3, #0
  408728:	f040 813f 	bne.w	4089aa <_dtoa_r+0xd02>
  40872c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  408730:	0d3f      	lsrs	r7, r7, #20
  408732:	053f      	lsls	r7, r7, #20
  408734:	b137      	cbz	r7, 408744 <_dtoa_r+0xa9c>
  408736:	9b05      	ldr	r3, [sp, #20]
  408738:	3301      	adds	r3, #1
  40873a:	9305      	str	r3, [sp, #20]
  40873c:	9b02      	ldr	r3, [sp, #8]
  40873e:	3301      	adds	r3, #1
  408740:	9302      	str	r3, [sp, #8]
  408742:	2701      	movs	r7, #1
  408744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408746:	2001      	movs	r0, #1
  408748:	2b00      	cmp	r3, #0
  40874a:	f43f acf8 	beq.w	40813e <_dtoa_r+0x496>
  40874e:	e4ed      	b.n	40812c <_dtoa_r+0x484>
  408750:	4640      	mov	r0, r8
  408752:	f002 fbf1 	bl	40af38 <__aeabi_i2d>
  408756:	4632      	mov	r2, r6
  408758:	463b      	mov	r3, r7
  40875a:	f002 fc53 	bl	40b004 <__aeabi_dmul>
  40875e:	2200      	movs	r2, #0
  408760:	4bbf      	ldr	r3, [pc, #764]	; (408a60 <_dtoa_r+0xdb8>)
  408762:	f002 fa9d 	bl	40aca0 <__adddf3>
  408766:	4604      	mov	r4, r0
  408768:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40876c:	4630      	mov	r0, r6
  40876e:	4639      	mov	r1, r7
  408770:	2200      	movs	r2, #0
  408772:	4bbc      	ldr	r3, [pc, #752]	; (408a64 <_dtoa_r+0xdbc>)
  408774:	f002 fa92 	bl	40ac9c <__aeabi_dsub>
  408778:	4622      	mov	r2, r4
  40877a:	462b      	mov	r3, r5
  40877c:	4606      	mov	r6, r0
  40877e:	460f      	mov	r7, r1
  408780:	f002 fed0 	bl	40b524 <__aeabi_dcmpgt>
  408784:	4680      	mov	r8, r0
  408786:	2800      	cmp	r0, #0
  408788:	f040 8105 	bne.w	408996 <_dtoa_r+0xcee>
  40878c:	4622      	mov	r2, r4
  40878e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  408792:	4630      	mov	r0, r6
  408794:	4639      	mov	r1, r7
  408796:	f002 fea7 	bl	40b4e8 <__aeabi_dcmplt>
  40879a:	b108      	cbz	r0, 4087a0 <_dtoa_r+0xaf8>
  40879c:	4646      	mov	r6, r8
  40879e:	e6b5      	b.n	40850c <_dtoa_r+0x864>
  4087a0:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4087a4:	f7ff bb89 	b.w	407eba <_dtoa_r+0x212>
  4087a8:	9807      	ldr	r0, [sp, #28]
  4087aa:	f7ff baae 	b.w	407d0a <_dtoa_r+0x62>
  4087ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4087b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4087b2:	970a      	str	r7, [sp, #40]	; 0x28
  4087b4:	1afb      	subs	r3, r7, r3
  4087b6:	441a      	add	r2, r3
  4087b8:	920b      	str	r2, [sp, #44]	; 0x2c
  4087ba:	2700      	movs	r7, #0
  4087bc:	e461      	b.n	408082 <_dtoa_r+0x3da>
  4087be:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4087c2:	f04f 0802 	mov.w	r8, #2
  4087c6:	e5bb      	b.n	408340 <_dtoa_r+0x698>
  4087c8:	461c      	mov	r4, r3
  4087ca:	2100      	movs	r1, #0
  4087cc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4087d0:	e58a      	b.n	4082e8 <_dtoa_r+0x640>
  4087d2:	2401      	movs	r4, #1
  4087d4:	9421      	str	r4, [sp, #132]	; 0x84
  4087d6:	940d      	str	r4, [sp, #52]	; 0x34
  4087d8:	9406      	str	r4, [sp, #24]
  4087da:	e7f6      	b.n	4087ca <_dtoa_r+0xb22>
  4087dc:	2a00      	cmp	r2, #0
  4087de:	46d0      	mov	r8, sl
  4087e0:	f8cd b014 	str.w	fp, [sp, #20]
  4087e4:	469a      	mov	sl, r3
  4087e6:	dd11      	ble.n	40880c <_dtoa_r+0xb64>
  4087e8:	4621      	mov	r1, r4
  4087ea:	2201      	movs	r2, #1
  4087ec:	4648      	mov	r0, r9
  4087ee:	f001 fc61 	bl	40a0b4 <__lshift>
  4087f2:	4641      	mov	r1, r8
  4087f4:	4604      	mov	r4, r0
  4087f6:	f001 fcb5 	bl	40a164 <__mcmp>
  4087fa:	2800      	cmp	r0, #0
  4087fc:	f340 8149 	ble.w	408a92 <_dtoa_r+0xdea>
  408800:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  408804:	f000 8106 	beq.w	408a14 <_dtoa_r+0xd6c>
  408808:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40880c:	46b3      	mov	fp, r6
  40880e:	f887 a000 	strb.w	sl, [r7]
  408812:	1c7d      	adds	r5, r7, #1
  408814:	9e05      	ldr	r6, [sp, #20]
  408816:	9408      	str	r4, [sp, #32]
  408818:	e502      	b.n	408220 <_dtoa_r+0x578>
  40881a:	d104      	bne.n	408826 <_dtoa_r+0xb7e>
  40881c:	f01a 0f01 	tst.w	sl, #1
  408820:	d001      	beq.n	408826 <_dtoa_r+0xb7e>
  408822:	e4ed      	b.n	408200 <_dtoa_r+0x558>
  408824:	4615      	mov	r5, r2
  408826:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40882a:	2b30      	cmp	r3, #48	; 0x30
  40882c:	f105 32ff 	add.w	r2, r5, #4294967295
  408830:	d0f8      	beq.n	408824 <_dtoa_r+0xb7c>
  408832:	e4f5      	b.n	408220 <_dtoa_r+0x578>
  408834:	9b04      	ldr	r3, [sp, #16]
  408836:	425c      	negs	r4, r3
  408838:	2c00      	cmp	r4, #0
  40883a:	f000 80bf 	beq.w	4089bc <_dtoa_r+0xd14>
  40883e:	4b8a      	ldr	r3, [pc, #552]	; (408a68 <_dtoa_r+0xdc0>)
  408840:	f004 020f 	and.w	r2, r4, #15
  408844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408848:	e9d3 2300 	ldrd	r2, r3, [r3]
  40884c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  408850:	f002 fbd8 	bl	40b004 <__aeabi_dmul>
  408854:	1124      	asrs	r4, r4, #4
  408856:	4606      	mov	r6, r0
  408858:	460f      	mov	r7, r1
  40885a:	f000 812a 	beq.w	408ab2 <_dtoa_r+0xe0a>
  40885e:	4d83      	ldr	r5, [pc, #524]	; (408a6c <_dtoa_r+0xdc4>)
  408860:	f04f 0802 	mov.w	r8, #2
  408864:	07e2      	lsls	r2, r4, #31
  408866:	d509      	bpl.n	40887c <_dtoa_r+0xbd4>
  408868:	4630      	mov	r0, r6
  40886a:	4639      	mov	r1, r7
  40886c:	e9d5 2300 	ldrd	r2, r3, [r5]
  408870:	f002 fbc8 	bl	40b004 <__aeabi_dmul>
  408874:	f108 0801 	add.w	r8, r8, #1
  408878:	4606      	mov	r6, r0
  40887a:	460f      	mov	r7, r1
  40887c:	1064      	asrs	r4, r4, #1
  40887e:	f105 0508 	add.w	r5, r5, #8
  408882:	d1ef      	bne.n	408864 <_dtoa_r+0xbbc>
  408884:	e576      	b.n	408374 <_dtoa_r+0x6cc>
  408886:	9907      	ldr	r1, [sp, #28]
  408888:	2230      	movs	r2, #48	; 0x30
  40888a:	700a      	strb	r2, [r1, #0]
  40888c:	9a04      	ldr	r2, [sp, #16]
  40888e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  408892:	3201      	adds	r2, #1
  408894:	9204      	str	r2, [sp, #16]
  408896:	f7ff bbd0 	b.w	40803a <_dtoa_r+0x392>
  40889a:	6871      	ldr	r1, [r6, #4]
  40889c:	4648      	mov	r0, r9
  40889e:	f001 fa59 	bl	409d54 <_Balloc>
  4088a2:	6933      	ldr	r3, [r6, #16]
  4088a4:	1c9a      	adds	r2, r3, #2
  4088a6:	4605      	mov	r5, r0
  4088a8:	0092      	lsls	r2, r2, #2
  4088aa:	f106 010c 	add.w	r1, r6, #12
  4088ae:	300c      	adds	r0, #12
  4088b0:	f001 f94e 	bl	409b50 <memcpy>
  4088b4:	4629      	mov	r1, r5
  4088b6:	2201      	movs	r2, #1
  4088b8:	4648      	mov	r0, r9
  4088ba:	f001 fbfb 	bl	40a0b4 <__lshift>
  4088be:	9005      	str	r0, [sp, #20]
  4088c0:	e670      	b.n	4085a4 <_dtoa_r+0x8fc>
  4088c2:	2b39      	cmp	r3, #57	; 0x39
  4088c4:	f8cd b014 	str.w	fp, [sp, #20]
  4088c8:	46d0      	mov	r8, sl
  4088ca:	f000 80a3 	beq.w	408a14 <_dtoa_r+0xd6c>
  4088ce:	f103 0a01 	add.w	sl, r3, #1
  4088d2:	46b3      	mov	fp, r6
  4088d4:	f887 a000 	strb.w	sl, [r7]
  4088d8:	1c7d      	adds	r5, r7, #1
  4088da:	9e05      	ldr	r6, [sp, #20]
  4088dc:	9408      	str	r4, [sp, #32]
  4088de:	e49f      	b.n	408220 <_dtoa_r+0x578>
  4088e0:	465a      	mov	r2, fp
  4088e2:	46d0      	mov	r8, sl
  4088e4:	46b3      	mov	fp, r6
  4088e6:	469a      	mov	sl, r3
  4088e8:	4616      	mov	r6, r2
  4088ea:	e47d      	b.n	4081e8 <_dtoa_r+0x540>
  4088ec:	495e      	ldr	r1, [pc, #376]	; (408a68 <_dtoa_r+0xdc0>)
  4088ee:	f108 3aff 	add.w	sl, r8, #4294967295
  4088f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  4088f6:	4622      	mov	r2, r4
  4088f8:	462b      	mov	r3, r5
  4088fa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4088fe:	f002 fb81 	bl	40b004 <__aeabi_dmul>
  408902:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  408906:	4639      	mov	r1, r7
  408908:	4630      	mov	r0, r6
  40890a:	f002 fe2b 	bl	40b564 <__aeabi_d2iz>
  40890e:	4604      	mov	r4, r0
  408910:	f002 fb12 	bl	40af38 <__aeabi_i2d>
  408914:	4602      	mov	r2, r0
  408916:	460b      	mov	r3, r1
  408918:	4630      	mov	r0, r6
  40891a:	4639      	mov	r1, r7
  40891c:	f002 f9be 	bl	40ac9c <__aeabi_dsub>
  408920:	9a07      	ldr	r2, [sp, #28]
  408922:	3430      	adds	r4, #48	; 0x30
  408924:	f1b8 0f01 	cmp.w	r8, #1
  408928:	4606      	mov	r6, r0
  40892a:	460f      	mov	r7, r1
  40892c:	7014      	strb	r4, [r2, #0]
  40892e:	f102 0501 	add.w	r5, r2, #1
  408932:	d01e      	beq.n	408972 <_dtoa_r+0xcca>
  408934:	9b07      	ldr	r3, [sp, #28]
  408936:	eb03 0b08 	add.w	fp, r3, r8
  40893a:	46a8      	mov	r8, r5
  40893c:	2200      	movs	r2, #0
  40893e:	4b4c      	ldr	r3, [pc, #304]	; (408a70 <_dtoa_r+0xdc8>)
  408940:	4630      	mov	r0, r6
  408942:	4639      	mov	r1, r7
  408944:	f002 fb5e 	bl	40b004 <__aeabi_dmul>
  408948:	460f      	mov	r7, r1
  40894a:	4606      	mov	r6, r0
  40894c:	f002 fe0a 	bl	40b564 <__aeabi_d2iz>
  408950:	4604      	mov	r4, r0
  408952:	f002 faf1 	bl	40af38 <__aeabi_i2d>
  408956:	3430      	adds	r4, #48	; 0x30
  408958:	4602      	mov	r2, r0
  40895a:	460b      	mov	r3, r1
  40895c:	4630      	mov	r0, r6
  40895e:	4639      	mov	r1, r7
  408960:	f002 f99c 	bl	40ac9c <__aeabi_dsub>
  408964:	f808 4b01 	strb.w	r4, [r8], #1
  408968:	45c3      	cmp	fp, r8
  40896a:	4606      	mov	r6, r0
  40896c:	460f      	mov	r7, r1
  40896e:	d1e5      	bne.n	40893c <_dtoa_r+0xc94>
  408970:	4455      	add	r5, sl
  408972:	2200      	movs	r2, #0
  408974:	4b3f      	ldr	r3, [pc, #252]	; (408a74 <_dtoa_r+0xdcc>)
  408976:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40897a:	f002 f991 	bl	40aca0 <__adddf3>
  40897e:	4632      	mov	r2, r6
  408980:	463b      	mov	r3, r7
  408982:	f002 fdb1 	bl	40b4e8 <__aeabi_dcmplt>
  408986:	2800      	cmp	r0, #0
  408988:	d04c      	beq.n	408a24 <_dtoa_r+0xd7c>
  40898a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40898c:	9304      	str	r3, [sp, #16]
  40898e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  408992:	f7ff bb46 	b.w	408022 <_dtoa_r+0x37a>
  408996:	f04f 0800 	mov.w	r8, #0
  40899a:	4646      	mov	r6, r8
  40899c:	e6a8      	b.n	4086f0 <_dtoa_r+0xa48>
  40899e:	9b05      	ldr	r3, [sp, #20]
  4089a0:	9a06      	ldr	r2, [sp, #24]
  4089a2:	1a9d      	subs	r5, r3, r2
  4089a4:	2300      	movs	r3, #0
  4089a6:	f7ff bb72 	b.w	40808e <_dtoa_r+0x3e6>
  4089aa:	2700      	movs	r7, #0
  4089ac:	e6ca      	b.n	408744 <_dtoa_r+0xa9c>
  4089ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4089b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4089b2:	9d05      	ldr	r5, [sp, #20]
  4089b4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4089b8:	f7ff bb69 	b.w	40808e <_dtoa_r+0x3e6>
  4089bc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  4089c0:	f04f 0802 	mov.w	r8, #2
  4089c4:	e4d6      	b.n	408374 <_dtoa_r+0x6cc>
  4089c6:	9408      	str	r4, [sp, #32]
  4089c8:	e5a0      	b.n	40850c <_dtoa_r+0x864>
  4089ca:	9b06      	ldr	r3, [sp, #24]
  4089cc:	2b00      	cmp	r3, #0
  4089ce:	f43f aebf 	beq.w	408750 <_dtoa_r+0xaa8>
  4089d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4089d4:	2b00      	cmp	r3, #0
  4089d6:	f77f aee3 	ble.w	4087a0 <_dtoa_r+0xaf8>
  4089da:	2200      	movs	r2, #0
  4089dc:	4b24      	ldr	r3, [pc, #144]	; (408a70 <_dtoa_r+0xdc8>)
  4089de:	4630      	mov	r0, r6
  4089e0:	4639      	mov	r1, r7
  4089e2:	f002 fb0f 	bl	40b004 <__aeabi_dmul>
  4089e6:	4606      	mov	r6, r0
  4089e8:	460f      	mov	r7, r1
  4089ea:	f108 0001 	add.w	r0, r8, #1
  4089ee:	f002 faa3 	bl	40af38 <__aeabi_i2d>
  4089f2:	4632      	mov	r2, r6
  4089f4:	463b      	mov	r3, r7
  4089f6:	f002 fb05 	bl	40b004 <__aeabi_dmul>
  4089fa:	2200      	movs	r2, #0
  4089fc:	4b18      	ldr	r3, [pc, #96]	; (408a60 <_dtoa_r+0xdb8>)
  4089fe:	f002 f94f 	bl	40aca0 <__adddf3>
  408a02:	9a04      	ldr	r2, [sp, #16]
  408a04:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  408a08:	3a01      	subs	r2, #1
  408a0a:	4604      	mov	r4, r0
  408a0c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  408a10:	9211      	str	r2, [sp, #68]	; 0x44
  408a12:	e4d0      	b.n	4083b6 <_dtoa_r+0x70e>
  408a14:	2239      	movs	r2, #57	; 0x39
  408a16:	46b3      	mov	fp, r6
  408a18:	9408      	str	r4, [sp, #32]
  408a1a:	9e05      	ldr	r6, [sp, #20]
  408a1c:	703a      	strb	r2, [r7, #0]
  408a1e:	1c7d      	adds	r5, r7, #1
  408a20:	f7ff bbf0 	b.w	408204 <_dtoa_r+0x55c>
  408a24:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  408a28:	2000      	movs	r0, #0
  408a2a:	4912      	ldr	r1, [pc, #72]	; (408a74 <_dtoa_r+0xdcc>)
  408a2c:	f002 f936 	bl	40ac9c <__aeabi_dsub>
  408a30:	4632      	mov	r2, r6
  408a32:	463b      	mov	r3, r7
  408a34:	f002 fd76 	bl	40b524 <__aeabi_dcmpgt>
  408a38:	b908      	cbnz	r0, 408a3e <_dtoa_r+0xd96>
  408a3a:	e6b1      	b.n	4087a0 <_dtoa_r+0xaf8>
  408a3c:	4615      	mov	r5, r2
  408a3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408a42:	2b30      	cmp	r3, #48	; 0x30
  408a44:	f105 32ff 	add.w	r2, r5, #4294967295
  408a48:	d0f8      	beq.n	408a3c <_dtoa_r+0xd94>
  408a4a:	e530      	b.n	4084ae <_dtoa_r+0x806>
  408a4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408a4e:	9304      	str	r3, [sp, #16]
  408a50:	f7ff bae7 	b.w	408022 <_dtoa_r+0x37a>
  408a54:	f1ba 0f00 	cmp.w	sl, #0
  408a58:	f47f ad7a 	bne.w	408550 <_dtoa_r+0x8a8>
  408a5c:	e661      	b.n	408722 <_dtoa_r+0xa7a>
  408a5e:	bf00      	nop
  408a60:	401c0000 	.word	0x401c0000
  408a64:	40140000 	.word	0x40140000
  408a68:	0040cc18 	.word	0x0040cc18
  408a6c:	0040cce0 	.word	0x0040cce0
  408a70:	40240000 	.word	0x40240000
  408a74:	3fe00000 	.word	0x3fe00000
  408a78:	2b39      	cmp	r3, #57	; 0x39
  408a7a:	f8cd b014 	str.w	fp, [sp, #20]
  408a7e:	46d0      	mov	r8, sl
  408a80:	f8dd b008 	ldr.w	fp, [sp, #8]
  408a84:	469a      	mov	sl, r3
  408a86:	d0c5      	beq.n	408a14 <_dtoa_r+0xd6c>
  408a88:	f1bb 0f00 	cmp.w	fp, #0
  408a8c:	f73f aebc 	bgt.w	408808 <_dtoa_r+0xb60>
  408a90:	e6bc      	b.n	40880c <_dtoa_r+0xb64>
  408a92:	f47f aebb 	bne.w	40880c <_dtoa_r+0xb64>
  408a96:	f01a 0f01 	tst.w	sl, #1
  408a9a:	f43f aeb7 	beq.w	40880c <_dtoa_r+0xb64>
  408a9e:	e6af      	b.n	408800 <_dtoa_r+0xb58>
  408aa0:	f04f 0800 	mov.w	r8, #0
  408aa4:	4646      	mov	r6, r8
  408aa6:	e531      	b.n	40850c <_dtoa_r+0x864>
  408aa8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  408aaa:	2b02      	cmp	r3, #2
  408aac:	dc21      	bgt.n	408af2 <_dtoa_r+0xe4a>
  408aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408ab0:	e604      	b.n	4086bc <_dtoa_r+0xa14>
  408ab2:	f04f 0802 	mov.w	r8, #2
  408ab6:	e45d      	b.n	408374 <_dtoa_r+0x6cc>
  408ab8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  408aba:	2b02      	cmp	r3, #2
  408abc:	dc19      	bgt.n	408af2 <_dtoa_r+0xe4a>
  408abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408ac0:	e563      	b.n	40858a <_dtoa_r+0x8e2>
  408ac2:	2400      	movs	r4, #0
  408ac4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  408ac8:	4621      	mov	r1, r4
  408aca:	4648      	mov	r0, r9
  408acc:	f001 f942 	bl	409d54 <_Balloc>
  408ad0:	f04f 33ff 	mov.w	r3, #4294967295
  408ad4:	9306      	str	r3, [sp, #24]
  408ad6:	930d      	str	r3, [sp, #52]	; 0x34
  408ad8:	2301      	movs	r3, #1
  408ada:	9007      	str	r0, [sp, #28]
  408adc:	9421      	str	r4, [sp, #132]	; 0x84
  408ade:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  408ae2:	9309      	str	r3, [sp, #36]	; 0x24
  408ae4:	f7ff b9e9 	b.w	407eba <_dtoa_r+0x212>
  408ae8:	f43f ab3d 	beq.w	408166 <_dtoa_r+0x4be>
  408aec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408af0:	e522      	b.n	408538 <_dtoa_r+0x890>
  408af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408af4:	9306      	str	r3, [sp, #24]
  408af6:	e5e9      	b.n	4086cc <_dtoa_r+0xa24>
  408af8:	2501      	movs	r5, #1
  408afa:	f7ff b9a8 	b.w	407e4e <_dtoa_r+0x1a6>
  408afe:	bf00      	nop

00408b00 <__sflush_r>:
  408b00:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  408b04:	b29a      	uxth	r2, r3
  408b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408b0a:	460d      	mov	r5, r1
  408b0c:	0711      	lsls	r1, r2, #28
  408b0e:	4680      	mov	r8, r0
  408b10:	d43c      	bmi.n	408b8c <__sflush_r+0x8c>
  408b12:	686a      	ldr	r2, [r5, #4]
  408b14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408b18:	2a00      	cmp	r2, #0
  408b1a:	81ab      	strh	r3, [r5, #12]
  408b1c:	dd73      	ble.n	408c06 <__sflush_r+0x106>
  408b1e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408b20:	2c00      	cmp	r4, #0
  408b22:	d04b      	beq.n	408bbc <__sflush_r+0xbc>
  408b24:	b29b      	uxth	r3, r3
  408b26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  408b2a:	2100      	movs	r1, #0
  408b2c:	b292      	uxth	r2, r2
  408b2e:	f8d8 6000 	ldr.w	r6, [r8]
  408b32:	f8c8 1000 	str.w	r1, [r8]
  408b36:	2a00      	cmp	r2, #0
  408b38:	d069      	beq.n	408c0e <__sflush_r+0x10e>
  408b3a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  408b3c:	075f      	lsls	r7, r3, #29
  408b3e:	d505      	bpl.n	408b4c <__sflush_r+0x4c>
  408b40:	6869      	ldr	r1, [r5, #4]
  408b42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408b44:	1a52      	subs	r2, r2, r1
  408b46:	b10b      	cbz	r3, 408b4c <__sflush_r+0x4c>
  408b48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408b4a:	1ad2      	subs	r2, r2, r3
  408b4c:	2300      	movs	r3, #0
  408b4e:	69e9      	ldr	r1, [r5, #28]
  408b50:	4640      	mov	r0, r8
  408b52:	47a0      	blx	r4
  408b54:	1c44      	adds	r4, r0, #1
  408b56:	d03c      	beq.n	408bd2 <__sflush_r+0xd2>
  408b58:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408b5c:	692a      	ldr	r2, [r5, #16]
  408b5e:	602a      	str	r2, [r5, #0]
  408b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408b64:	2200      	movs	r2, #0
  408b66:	81ab      	strh	r3, [r5, #12]
  408b68:	04db      	lsls	r3, r3, #19
  408b6a:	606a      	str	r2, [r5, #4]
  408b6c:	d449      	bmi.n	408c02 <__sflush_r+0x102>
  408b6e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408b70:	f8c8 6000 	str.w	r6, [r8]
  408b74:	b311      	cbz	r1, 408bbc <__sflush_r+0xbc>
  408b76:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408b7a:	4299      	cmp	r1, r3
  408b7c:	d002      	beq.n	408b84 <__sflush_r+0x84>
  408b7e:	4640      	mov	r0, r8
  408b80:	f000 f9c0 	bl	408f04 <_free_r>
  408b84:	2000      	movs	r0, #0
  408b86:	6328      	str	r0, [r5, #48]	; 0x30
  408b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408b8c:	692e      	ldr	r6, [r5, #16]
  408b8e:	b1ae      	cbz	r6, 408bbc <__sflush_r+0xbc>
  408b90:	682c      	ldr	r4, [r5, #0]
  408b92:	602e      	str	r6, [r5, #0]
  408b94:	0790      	lsls	r0, r2, #30
  408b96:	bf0c      	ite	eq
  408b98:	696b      	ldreq	r3, [r5, #20]
  408b9a:	2300      	movne	r3, #0
  408b9c:	1ba4      	subs	r4, r4, r6
  408b9e:	60ab      	str	r3, [r5, #8]
  408ba0:	e00a      	b.n	408bb8 <__sflush_r+0xb8>
  408ba2:	4623      	mov	r3, r4
  408ba4:	4632      	mov	r2, r6
  408ba6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408ba8:	69e9      	ldr	r1, [r5, #28]
  408baa:	4640      	mov	r0, r8
  408bac:	47b8      	blx	r7
  408bae:	2800      	cmp	r0, #0
  408bb0:	eba4 0400 	sub.w	r4, r4, r0
  408bb4:	4406      	add	r6, r0
  408bb6:	dd04      	ble.n	408bc2 <__sflush_r+0xc2>
  408bb8:	2c00      	cmp	r4, #0
  408bba:	dcf2      	bgt.n	408ba2 <__sflush_r+0xa2>
  408bbc:	2000      	movs	r0, #0
  408bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408bc2:	89ab      	ldrh	r3, [r5, #12]
  408bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408bc8:	81ab      	strh	r3, [r5, #12]
  408bca:	f04f 30ff 	mov.w	r0, #4294967295
  408bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408bd2:	f8d8 2000 	ldr.w	r2, [r8]
  408bd6:	2a1d      	cmp	r2, #29
  408bd8:	d8f3      	bhi.n	408bc2 <__sflush_r+0xc2>
  408bda:	4b1a      	ldr	r3, [pc, #104]	; (408c44 <__sflush_r+0x144>)
  408bdc:	40d3      	lsrs	r3, r2
  408bde:	f003 0301 	and.w	r3, r3, #1
  408be2:	f083 0401 	eor.w	r4, r3, #1
  408be6:	2b00      	cmp	r3, #0
  408be8:	d0eb      	beq.n	408bc2 <__sflush_r+0xc2>
  408bea:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408bee:	6929      	ldr	r1, [r5, #16]
  408bf0:	6029      	str	r1, [r5, #0]
  408bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408bf6:	04d9      	lsls	r1, r3, #19
  408bf8:	606c      	str	r4, [r5, #4]
  408bfa:	81ab      	strh	r3, [r5, #12]
  408bfc:	d5b7      	bpl.n	408b6e <__sflush_r+0x6e>
  408bfe:	2a00      	cmp	r2, #0
  408c00:	d1b5      	bne.n	408b6e <__sflush_r+0x6e>
  408c02:	6528      	str	r0, [r5, #80]	; 0x50
  408c04:	e7b3      	b.n	408b6e <__sflush_r+0x6e>
  408c06:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  408c08:	2a00      	cmp	r2, #0
  408c0a:	dc88      	bgt.n	408b1e <__sflush_r+0x1e>
  408c0c:	e7d6      	b.n	408bbc <__sflush_r+0xbc>
  408c0e:	2301      	movs	r3, #1
  408c10:	69e9      	ldr	r1, [r5, #28]
  408c12:	4640      	mov	r0, r8
  408c14:	47a0      	blx	r4
  408c16:	1c43      	adds	r3, r0, #1
  408c18:	4602      	mov	r2, r0
  408c1a:	d002      	beq.n	408c22 <__sflush_r+0x122>
  408c1c:	89ab      	ldrh	r3, [r5, #12]
  408c1e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408c20:	e78c      	b.n	408b3c <__sflush_r+0x3c>
  408c22:	f8d8 3000 	ldr.w	r3, [r8]
  408c26:	2b00      	cmp	r3, #0
  408c28:	d0f8      	beq.n	408c1c <__sflush_r+0x11c>
  408c2a:	2b1d      	cmp	r3, #29
  408c2c:	d001      	beq.n	408c32 <__sflush_r+0x132>
  408c2e:	2b16      	cmp	r3, #22
  408c30:	d102      	bne.n	408c38 <__sflush_r+0x138>
  408c32:	f8c8 6000 	str.w	r6, [r8]
  408c36:	e7c1      	b.n	408bbc <__sflush_r+0xbc>
  408c38:	89ab      	ldrh	r3, [r5, #12]
  408c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408c3e:	81ab      	strh	r3, [r5, #12]
  408c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408c44:	20400001 	.word	0x20400001

00408c48 <_fflush_r>:
  408c48:	b510      	push	{r4, lr}
  408c4a:	4604      	mov	r4, r0
  408c4c:	b082      	sub	sp, #8
  408c4e:	b108      	cbz	r0, 408c54 <_fflush_r+0xc>
  408c50:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408c52:	b153      	cbz	r3, 408c6a <_fflush_r+0x22>
  408c54:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  408c58:	b908      	cbnz	r0, 408c5e <_fflush_r+0x16>
  408c5a:	b002      	add	sp, #8
  408c5c:	bd10      	pop	{r4, pc}
  408c5e:	4620      	mov	r0, r4
  408c60:	b002      	add	sp, #8
  408c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408c66:	f7ff bf4b 	b.w	408b00 <__sflush_r>
  408c6a:	9101      	str	r1, [sp, #4]
  408c6c:	f000 f880 	bl	408d70 <__sinit>
  408c70:	9901      	ldr	r1, [sp, #4]
  408c72:	e7ef      	b.n	408c54 <_fflush_r+0xc>

00408c74 <_cleanup_r>:
  408c74:	4901      	ldr	r1, [pc, #4]	; (408c7c <_cleanup_r+0x8>)
  408c76:	f000 bbaf 	b.w	4093d8 <_fwalk_reent>
  408c7a:	bf00      	nop
  408c7c:	0040ab6d 	.word	0x0040ab6d

00408c80 <__sinit.part.1>:
  408c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408c84:	4b35      	ldr	r3, [pc, #212]	; (408d5c <__sinit.part.1+0xdc>)
  408c86:	6845      	ldr	r5, [r0, #4]
  408c88:	63c3      	str	r3, [r0, #60]	; 0x3c
  408c8a:	2400      	movs	r4, #0
  408c8c:	4607      	mov	r7, r0
  408c8e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  408c92:	2304      	movs	r3, #4
  408c94:	2103      	movs	r1, #3
  408c96:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  408c9a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  408c9e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  408ca2:	b083      	sub	sp, #12
  408ca4:	602c      	str	r4, [r5, #0]
  408ca6:	606c      	str	r4, [r5, #4]
  408ca8:	60ac      	str	r4, [r5, #8]
  408caa:	666c      	str	r4, [r5, #100]	; 0x64
  408cac:	81ec      	strh	r4, [r5, #14]
  408cae:	612c      	str	r4, [r5, #16]
  408cb0:	616c      	str	r4, [r5, #20]
  408cb2:	61ac      	str	r4, [r5, #24]
  408cb4:	81ab      	strh	r3, [r5, #12]
  408cb6:	4621      	mov	r1, r4
  408cb8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  408cbc:	2208      	movs	r2, #8
  408cbe:	f7fc fa7d 	bl	4051bc <memset>
  408cc2:	68be      	ldr	r6, [r7, #8]
  408cc4:	f8df b098 	ldr.w	fp, [pc, #152]	; 408d60 <__sinit.part.1+0xe0>
  408cc8:	f8df a098 	ldr.w	sl, [pc, #152]	; 408d64 <__sinit.part.1+0xe4>
  408ccc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 408d68 <__sinit.part.1+0xe8>
  408cd0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 408d6c <__sinit.part.1+0xec>
  408cd4:	f8c5 b020 	str.w	fp, [r5, #32]
  408cd8:	2301      	movs	r3, #1
  408cda:	2209      	movs	r2, #9
  408cdc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  408ce0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  408ce4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  408ce8:	61ed      	str	r5, [r5, #28]
  408cea:	4621      	mov	r1, r4
  408cec:	81f3      	strh	r3, [r6, #14]
  408cee:	81b2      	strh	r2, [r6, #12]
  408cf0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  408cf4:	6034      	str	r4, [r6, #0]
  408cf6:	6074      	str	r4, [r6, #4]
  408cf8:	60b4      	str	r4, [r6, #8]
  408cfa:	6674      	str	r4, [r6, #100]	; 0x64
  408cfc:	6134      	str	r4, [r6, #16]
  408cfe:	6174      	str	r4, [r6, #20]
  408d00:	61b4      	str	r4, [r6, #24]
  408d02:	2208      	movs	r2, #8
  408d04:	9301      	str	r3, [sp, #4]
  408d06:	f7fc fa59 	bl	4051bc <memset>
  408d0a:	68fd      	ldr	r5, [r7, #12]
  408d0c:	61f6      	str	r6, [r6, #28]
  408d0e:	2012      	movs	r0, #18
  408d10:	2202      	movs	r2, #2
  408d12:	f8c6 b020 	str.w	fp, [r6, #32]
  408d16:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  408d1a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  408d1e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  408d22:	4621      	mov	r1, r4
  408d24:	81a8      	strh	r0, [r5, #12]
  408d26:	81ea      	strh	r2, [r5, #14]
  408d28:	602c      	str	r4, [r5, #0]
  408d2a:	606c      	str	r4, [r5, #4]
  408d2c:	60ac      	str	r4, [r5, #8]
  408d2e:	666c      	str	r4, [r5, #100]	; 0x64
  408d30:	612c      	str	r4, [r5, #16]
  408d32:	616c      	str	r4, [r5, #20]
  408d34:	61ac      	str	r4, [r5, #24]
  408d36:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  408d3a:	2208      	movs	r2, #8
  408d3c:	f7fc fa3e 	bl	4051bc <memset>
  408d40:	9b01      	ldr	r3, [sp, #4]
  408d42:	61ed      	str	r5, [r5, #28]
  408d44:	f8c5 b020 	str.w	fp, [r5, #32]
  408d48:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  408d4c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  408d50:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  408d54:	63bb      	str	r3, [r7, #56]	; 0x38
  408d56:	b003      	add	sp, #12
  408d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d5c:	00408c75 	.word	0x00408c75
  408d60:	0040a775 	.word	0x0040a775
  408d64:	0040a799 	.word	0x0040a799
  408d68:	0040a7d5 	.word	0x0040a7d5
  408d6c:	0040a7f5 	.word	0x0040a7f5

00408d70 <__sinit>:
  408d70:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408d72:	b103      	cbz	r3, 408d76 <__sinit+0x6>
  408d74:	4770      	bx	lr
  408d76:	f7ff bf83 	b.w	408c80 <__sinit.part.1>
  408d7a:	bf00      	nop

00408d7c <__sfp_lock_acquire>:
  408d7c:	4770      	bx	lr
  408d7e:	bf00      	nop

00408d80 <__sfp_lock_release>:
  408d80:	4770      	bx	lr
  408d82:	bf00      	nop

00408d84 <__libc_fini_array>:
  408d84:	b538      	push	{r3, r4, r5, lr}
  408d86:	4d07      	ldr	r5, [pc, #28]	; (408da4 <__libc_fini_array+0x20>)
  408d88:	4c07      	ldr	r4, [pc, #28]	; (408da8 <__libc_fini_array+0x24>)
  408d8a:	1b2c      	subs	r4, r5, r4
  408d8c:	10a4      	asrs	r4, r4, #2
  408d8e:	d005      	beq.n	408d9c <__libc_fini_array+0x18>
  408d90:	3c01      	subs	r4, #1
  408d92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  408d96:	4798      	blx	r3
  408d98:	2c00      	cmp	r4, #0
  408d9a:	d1f9      	bne.n	408d90 <__libc_fini_array+0xc>
  408d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408da0:	f003 bfc2 	b.w	40cd28 <_fini>
  408da4:	0040cd38 	.word	0x0040cd38
  408da8:	0040cd34 	.word	0x0040cd34

00408dac <__fputwc>:
  408dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408db0:	b082      	sub	sp, #8
  408db2:	4680      	mov	r8, r0
  408db4:	4689      	mov	r9, r1
  408db6:	4614      	mov	r4, r2
  408db8:	f000 fb3c 	bl	409434 <__locale_mb_cur_max>
  408dbc:	2801      	cmp	r0, #1
  408dbe:	d033      	beq.n	408e28 <__fputwc+0x7c>
  408dc0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408dc4:	464a      	mov	r2, r9
  408dc6:	a901      	add	r1, sp, #4
  408dc8:	4640      	mov	r0, r8
  408dca:	f001 fded 	bl	40a9a8 <_wcrtomb_r>
  408dce:	f1b0 3fff 	cmp.w	r0, #4294967295
  408dd2:	4682      	mov	sl, r0
  408dd4:	d021      	beq.n	408e1a <__fputwc+0x6e>
  408dd6:	b388      	cbz	r0, 408e3c <__fputwc+0x90>
  408dd8:	f89d 6004 	ldrb.w	r6, [sp, #4]
  408ddc:	2500      	movs	r5, #0
  408dde:	e008      	b.n	408df2 <__fputwc+0x46>
  408de0:	6823      	ldr	r3, [r4, #0]
  408de2:	1c5a      	adds	r2, r3, #1
  408de4:	6022      	str	r2, [r4, #0]
  408de6:	701e      	strb	r6, [r3, #0]
  408de8:	3501      	adds	r5, #1
  408dea:	4555      	cmp	r5, sl
  408dec:	d226      	bcs.n	408e3c <__fputwc+0x90>
  408dee:	ab01      	add	r3, sp, #4
  408df0:	5d5e      	ldrb	r6, [r3, r5]
  408df2:	68a3      	ldr	r3, [r4, #8]
  408df4:	3b01      	subs	r3, #1
  408df6:	2b00      	cmp	r3, #0
  408df8:	60a3      	str	r3, [r4, #8]
  408dfa:	daf1      	bge.n	408de0 <__fputwc+0x34>
  408dfc:	69a7      	ldr	r7, [r4, #24]
  408dfe:	42bb      	cmp	r3, r7
  408e00:	4631      	mov	r1, r6
  408e02:	4622      	mov	r2, r4
  408e04:	4640      	mov	r0, r8
  408e06:	db01      	blt.n	408e0c <__fputwc+0x60>
  408e08:	2e0a      	cmp	r6, #10
  408e0a:	d1e9      	bne.n	408de0 <__fputwc+0x34>
  408e0c:	f001 fd76 	bl	40a8fc <__swbuf_r>
  408e10:	1c43      	adds	r3, r0, #1
  408e12:	d1e9      	bne.n	408de8 <__fputwc+0x3c>
  408e14:	b002      	add	sp, #8
  408e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e1a:	89a3      	ldrh	r3, [r4, #12]
  408e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408e20:	81a3      	strh	r3, [r4, #12]
  408e22:	b002      	add	sp, #8
  408e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e28:	f109 33ff 	add.w	r3, r9, #4294967295
  408e2c:	2bfe      	cmp	r3, #254	; 0xfe
  408e2e:	d8c7      	bhi.n	408dc0 <__fputwc+0x14>
  408e30:	fa5f f689 	uxtb.w	r6, r9
  408e34:	4682      	mov	sl, r0
  408e36:	f88d 6004 	strb.w	r6, [sp, #4]
  408e3a:	e7cf      	b.n	408ddc <__fputwc+0x30>
  408e3c:	4648      	mov	r0, r9
  408e3e:	b002      	add	sp, #8
  408e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00408e44 <_fputwc_r>:
  408e44:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408e48:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  408e4c:	d10a      	bne.n	408e64 <_fputwc_r+0x20>
  408e4e:	b410      	push	{r4}
  408e50:	6e54      	ldr	r4, [r2, #100]	; 0x64
  408e52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408e56:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  408e5a:	6654      	str	r4, [r2, #100]	; 0x64
  408e5c:	8193      	strh	r3, [r2, #12]
  408e5e:	bc10      	pop	{r4}
  408e60:	f7ff bfa4 	b.w	408dac <__fputwc>
  408e64:	f7ff bfa2 	b.w	408dac <__fputwc>

00408e68 <_malloc_trim_r>:
  408e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408e6a:	4f23      	ldr	r7, [pc, #140]	; (408ef8 <_malloc_trim_r+0x90>)
  408e6c:	460c      	mov	r4, r1
  408e6e:	4606      	mov	r6, r0
  408e70:	f000 ff6c 	bl	409d4c <__malloc_lock>
  408e74:	68bb      	ldr	r3, [r7, #8]
  408e76:	685d      	ldr	r5, [r3, #4]
  408e78:	f025 0503 	bic.w	r5, r5, #3
  408e7c:	1b29      	subs	r1, r5, r4
  408e7e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  408e82:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408e86:	f021 010f 	bic.w	r1, r1, #15
  408e8a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408e8e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408e92:	db07      	blt.n	408ea4 <_malloc_trim_r+0x3c>
  408e94:	2100      	movs	r1, #0
  408e96:	4630      	mov	r0, r6
  408e98:	f001 fc5a 	bl	40a750 <_sbrk_r>
  408e9c:	68bb      	ldr	r3, [r7, #8]
  408e9e:	442b      	add	r3, r5
  408ea0:	4298      	cmp	r0, r3
  408ea2:	d004      	beq.n	408eae <_malloc_trim_r+0x46>
  408ea4:	4630      	mov	r0, r6
  408ea6:	f000 ff53 	bl	409d50 <__malloc_unlock>
  408eaa:	2000      	movs	r0, #0
  408eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408eae:	4261      	negs	r1, r4
  408eb0:	4630      	mov	r0, r6
  408eb2:	f001 fc4d 	bl	40a750 <_sbrk_r>
  408eb6:	3001      	adds	r0, #1
  408eb8:	d00d      	beq.n	408ed6 <_malloc_trim_r+0x6e>
  408eba:	4b10      	ldr	r3, [pc, #64]	; (408efc <_malloc_trim_r+0x94>)
  408ebc:	68ba      	ldr	r2, [r7, #8]
  408ebe:	6819      	ldr	r1, [r3, #0]
  408ec0:	1b2d      	subs	r5, r5, r4
  408ec2:	f045 0501 	orr.w	r5, r5, #1
  408ec6:	4630      	mov	r0, r6
  408ec8:	1b09      	subs	r1, r1, r4
  408eca:	6055      	str	r5, [r2, #4]
  408ecc:	6019      	str	r1, [r3, #0]
  408ece:	f000 ff3f 	bl	409d50 <__malloc_unlock>
  408ed2:	2001      	movs	r0, #1
  408ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408ed6:	2100      	movs	r1, #0
  408ed8:	4630      	mov	r0, r6
  408eda:	f001 fc39 	bl	40a750 <_sbrk_r>
  408ede:	68ba      	ldr	r2, [r7, #8]
  408ee0:	1a83      	subs	r3, r0, r2
  408ee2:	2b0f      	cmp	r3, #15
  408ee4:	ddde      	ble.n	408ea4 <_malloc_trim_r+0x3c>
  408ee6:	4c06      	ldr	r4, [pc, #24]	; (408f00 <_malloc_trim_r+0x98>)
  408ee8:	4904      	ldr	r1, [pc, #16]	; (408efc <_malloc_trim_r+0x94>)
  408eea:	6824      	ldr	r4, [r4, #0]
  408eec:	f043 0301 	orr.w	r3, r3, #1
  408ef0:	1b00      	subs	r0, r0, r4
  408ef2:	6053      	str	r3, [r2, #4]
  408ef4:	6008      	str	r0, [r1, #0]
  408ef6:	e7d5      	b.n	408ea4 <_malloc_trim_r+0x3c>
  408ef8:	204004d0 	.word	0x204004d0
  408efc:	2040156c 	.word	0x2040156c
  408f00:	204008dc 	.word	0x204008dc

00408f04 <_free_r>:
  408f04:	2900      	cmp	r1, #0
  408f06:	d045      	beq.n	408f94 <_free_r+0x90>
  408f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408f0c:	460d      	mov	r5, r1
  408f0e:	4680      	mov	r8, r0
  408f10:	f000 ff1c 	bl	409d4c <__malloc_lock>
  408f14:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408f18:	496a      	ldr	r1, [pc, #424]	; (4090c4 <_free_r+0x1c0>)
  408f1a:	f027 0301 	bic.w	r3, r7, #1
  408f1e:	f1a5 0408 	sub.w	r4, r5, #8
  408f22:	18e2      	adds	r2, r4, r3
  408f24:	688e      	ldr	r6, [r1, #8]
  408f26:	6850      	ldr	r0, [r2, #4]
  408f28:	42b2      	cmp	r2, r6
  408f2a:	f020 0003 	bic.w	r0, r0, #3
  408f2e:	d062      	beq.n	408ff6 <_free_r+0xf2>
  408f30:	07fe      	lsls	r6, r7, #31
  408f32:	6050      	str	r0, [r2, #4]
  408f34:	d40b      	bmi.n	408f4e <_free_r+0x4a>
  408f36:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408f3a:	1be4      	subs	r4, r4, r7
  408f3c:	f101 0e08 	add.w	lr, r1, #8
  408f40:	68a5      	ldr	r5, [r4, #8]
  408f42:	4575      	cmp	r5, lr
  408f44:	443b      	add	r3, r7
  408f46:	d06f      	beq.n	409028 <_free_r+0x124>
  408f48:	68e7      	ldr	r7, [r4, #12]
  408f4a:	60ef      	str	r7, [r5, #12]
  408f4c:	60bd      	str	r5, [r7, #8]
  408f4e:	1815      	adds	r5, r2, r0
  408f50:	686d      	ldr	r5, [r5, #4]
  408f52:	07ed      	lsls	r5, r5, #31
  408f54:	d542      	bpl.n	408fdc <_free_r+0xd8>
  408f56:	f043 0201 	orr.w	r2, r3, #1
  408f5a:	6062      	str	r2, [r4, #4]
  408f5c:	50e3      	str	r3, [r4, r3]
  408f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408f62:	d218      	bcs.n	408f96 <_free_r+0x92>
  408f64:	08db      	lsrs	r3, r3, #3
  408f66:	1c5a      	adds	r2, r3, #1
  408f68:	684d      	ldr	r5, [r1, #4]
  408f6a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  408f6e:	60a7      	str	r7, [r4, #8]
  408f70:	2001      	movs	r0, #1
  408f72:	109b      	asrs	r3, r3, #2
  408f74:	fa00 f303 	lsl.w	r3, r0, r3
  408f78:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  408f7c:	431d      	orrs	r5, r3
  408f7e:	3808      	subs	r0, #8
  408f80:	60e0      	str	r0, [r4, #12]
  408f82:	604d      	str	r5, [r1, #4]
  408f84:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  408f88:	60fc      	str	r4, [r7, #12]
  408f8a:	4640      	mov	r0, r8
  408f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408f90:	f000 bede 	b.w	409d50 <__malloc_unlock>
  408f94:	4770      	bx	lr
  408f96:	0a5a      	lsrs	r2, r3, #9
  408f98:	2a04      	cmp	r2, #4
  408f9a:	d853      	bhi.n	409044 <_free_r+0x140>
  408f9c:	099a      	lsrs	r2, r3, #6
  408f9e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408fa2:	007f      	lsls	r7, r7, #1
  408fa4:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408fa8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  408fac:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  408fb0:	4944      	ldr	r1, [pc, #272]	; (4090c4 <_free_r+0x1c0>)
  408fb2:	3808      	subs	r0, #8
  408fb4:	4290      	cmp	r0, r2
  408fb6:	d04d      	beq.n	409054 <_free_r+0x150>
  408fb8:	6851      	ldr	r1, [r2, #4]
  408fba:	f021 0103 	bic.w	r1, r1, #3
  408fbe:	428b      	cmp	r3, r1
  408fc0:	d202      	bcs.n	408fc8 <_free_r+0xc4>
  408fc2:	6892      	ldr	r2, [r2, #8]
  408fc4:	4290      	cmp	r0, r2
  408fc6:	d1f7      	bne.n	408fb8 <_free_r+0xb4>
  408fc8:	68d0      	ldr	r0, [r2, #12]
  408fca:	60e0      	str	r0, [r4, #12]
  408fcc:	60a2      	str	r2, [r4, #8]
  408fce:	6084      	str	r4, [r0, #8]
  408fd0:	60d4      	str	r4, [r2, #12]
  408fd2:	4640      	mov	r0, r8
  408fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408fd8:	f000 beba 	b.w	409d50 <__malloc_unlock>
  408fdc:	6895      	ldr	r5, [r2, #8]
  408fde:	4f3a      	ldr	r7, [pc, #232]	; (4090c8 <_free_r+0x1c4>)
  408fe0:	42bd      	cmp	r5, r7
  408fe2:	4403      	add	r3, r0
  408fe4:	d03f      	beq.n	409066 <_free_r+0x162>
  408fe6:	68d0      	ldr	r0, [r2, #12]
  408fe8:	60e8      	str	r0, [r5, #12]
  408fea:	f043 0201 	orr.w	r2, r3, #1
  408fee:	6085      	str	r5, [r0, #8]
  408ff0:	6062      	str	r2, [r4, #4]
  408ff2:	50e3      	str	r3, [r4, r3]
  408ff4:	e7b3      	b.n	408f5e <_free_r+0x5a>
  408ff6:	07ff      	lsls	r7, r7, #31
  408ff8:	4403      	add	r3, r0
  408ffa:	d407      	bmi.n	40900c <_free_r+0x108>
  408ffc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  409000:	1aa4      	subs	r4, r4, r2
  409002:	4413      	add	r3, r2
  409004:	68a0      	ldr	r0, [r4, #8]
  409006:	68e2      	ldr	r2, [r4, #12]
  409008:	60c2      	str	r2, [r0, #12]
  40900a:	6090      	str	r0, [r2, #8]
  40900c:	4a2f      	ldr	r2, [pc, #188]	; (4090cc <_free_r+0x1c8>)
  40900e:	6812      	ldr	r2, [r2, #0]
  409010:	f043 0001 	orr.w	r0, r3, #1
  409014:	4293      	cmp	r3, r2
  409016:	6060      	str	r0, [r4, #4]
  409018:	608c      	str	r4, [r1, #8]
  40901a:	d3b6      	bcc.n	408f8a <_free_r+0x86>
  40901c:	4b2c      	ldr	r3, [pc, #176]	; (4090d0 <_free_r+0x1cc>)
  40901e:	4640      	mov	r0, r8
  409020:	6819      	ldr	r1, [r3, #0]
  409022:	f7ff ff21 	bl	408e68 <_malloc_trim_r>
  409026:	e7b0      	b.n	408f8a <_free_r+0x86>
  409028:	1811      	adds	r1, r2, r0
  40902a:	6849      	ldr	r1, [r1, #4]
  40902c:	07c9      	lsls	r1, r1, #31
  40902e:	d444      	bmi.n	4090ba <_free_r+0x1b6>
  409030:	6891      	ldr	r1, [r2, #8]
  409032:	68d2      	ldr	r2, [r2, #12]
  409034:	60ca      	str	r2, [r1, #12]
  409036:	4403      	add	r3, r0
  409038:	f043 0001 	orr.w	r0, r3, #1
  40903c:	6091      	str	r1, [r2, #8]
  40903e:	6060      	str	r0, [r4, #4]
  409040:	50e3      	str	r3, [r4, r3]
  409042:	e7a2      	b.n	408f8a <_free_r+0x86>
  409044:	2a14      	cmp	r2, #20
  409046:	d817      	bhi.n	409078 <_free_r+0x174>
  409048:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40904c:	007f      	lsls	r7, r7, #1
  40904e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  409052:	e7a9      	b.n	408fa8 <_free_r+0xa4>
  409054:	10aa      	asrs	r2, r5, #2
  409056:	684b      	ldr	r3, [r1, #4]
  409058:	2501      	movs	r5, #1
  40905a:	fa05 f202 	lsl.w	r2, r5, r2
  40905e:	4313      	orrs	r3, r2
  409060:	604b      	str	r3, [r1, #4]
  409062:	4602      	mov	r2, r0
  409064:	e7b1      	b.n	408fca <_free_r+0xc6>
  409066:	f043 0201 	orr.w	r2, r3, #1
  40906a:	614c      	str	r4, [r1, #20]
  40906c:	610c      	str	r4, [r1, #16]
  40906e:	60e5      	str	r5, [r4, #12]
  409070:	60a5      	str	r5, [r4, #8]
  409072:	6062      	str	r2, [r4, #4]
  409074:	50e3      	str	r3, [r4, r3]
  409076:	e788      	b.n	408f8a <_free_r+0x86>
  409078:	2a54      	cmp	r2, #84	; 0x54
  40907a:	d806      	bhi.n	40908a <_free_r+0x186>
  40907c:	0b1a      	lsrs	r2, r3, #12
  40907e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  409082:	007f      	lsls	r7, r7, #1
  409084:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  409088:	e78e      	b.n	408fa8 <_free_r+0xa4>
  40908a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40908e:	d806      	bhi.n	40909e <_free_r+0x19a>
  409090:	0bda      	lsrs	r2, r3, #15
  409092:	f102 0778 	add.w	r7, r2, #120	; 0x78
  409096:	007f      	lsls	r7, r7, #1
  409098:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40909c:	e784      	b.n	408fa8 <_free_r+0xa4>
  40909e:	f240 5054 	movw	r0, #1364	; 0x554
  4090a2:	4282      	cmp	r2, r0
  4090a4:	d806      	bhi.n	4090b4 <_free_r+0x1b0>
  4090a6:	0c9a      	lsrs	r2, r3, #18
  4090a8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4090ac:	007f      	lsls	r7, r7, #1
  4090ae:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4090b2:	e779      	b.n	408fa8 <_free_r+0xa4>
  4090b4:	27fe      	movs	r7, #254	; 0xfe
  4090b6:	257e      	movs	r5, #126	; 0x7e
  4090b8:	e776      	b.n	408fa8 <_free_r+0xa4>
  4090ba:	f043 0201 	orr.w	r2, r3, #1
  4090be:	6062      	str	r2, [r4, #4]
  4090c0:	50e3      	str	r3, [r4, r3]
  4090c2:	e762      	b.n	408f8a <_free_r+0x86>
  4090c4:	204004d0 	.word	0x204004d0
  4090c8:	204004d8 	.word	0x204004d8
  4090cc:	204008d8 	.word	0x204008d8
  4090d0:	20401568 	.word	0x20401568

004090d4 <__sfvwrite_r>:
  4090d4:	6893      	ldr	r3, [r2, #8]
  4090d6:	2b00      	cmp	r3, #0
  4090d8:	d076      	beq.n	4091c8 <__sfvwrite_r+0xf4>
  4090da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4090de:	898b      	ldrh	r3, [r1, #12]
  4090e0:	b085      	sub	sp, #20
  4090e2:	460c      	mov	r4, r1
  4090e4:	0719      	lsls	r1, r3, #28
  4090e6:	9001      	str	r0, [sp, #4]
  4090e8:	4616      	mov	r6, r2
  4090ea:	d529      	bpl.n	409140 <__sfvwrite_r+0x6c>
  4090ec:	6922      	ldr	r2, [r4, #16]
  4090ee:	b33a      	cbz	r2, 409140 <__sfvwrite_r+0x6c>
  4090f0:	f003 0802 	and.w	r8, r3, #2
  4090f4:	fa1f f088 	uxth.w	r0, r8
  4090f8:	6835      	ldr	r5, [r6, #0]
  4090fa:	2800      	cmp	r0, #0
  4090fc:	d02f      	beq.n	40915e <__sfvwrite_r+0x8a>
  4090fe:	f04f 0900 	mov.w	r9, #0
  409102:	4fb4      	ldr	r7, [pc, #720]	; (4093d4 <__sfvwrite_r+0x300>)
  409104:	46c8      	mov	r8, r9
  409106:	46b2      	mov	sl, r6
  409108:	45b8      	cmp	r8, r7
  40910a:	4643      	mov	r3, r8
  40910c:	464a      	mov	r2, r9
  40910e:	bf28      	it	cs
  409110:	463b      	movcs	r3, r7
  409112:	9801      	ldr	r0, [sp, #4]
  409114:	f1b8 0f00 	cmp.w	r8, #0
  409118:	d050      	beq.n	4091bc <__sfvwrite_r+0xe8>
  40911a:	69e1      	ldr	r1, [r4, #28]
  40911c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40911e:	47b0      	blx	r6
  409120:	2800      	cmp	r0, #0
  409122:	dd71      	ble.n	409208 <__sfvwrite_r+0x134>
  409124:	f8da 3008 	ldr.w	r3, [sl, #8]
  409128:	1a1b      	subs	r3, r3, r0
  40912a:	4481      	add	r9, r0
  40912c:	ebc0 0808 	rsb	r8, r0, r8
  409130:	f8ca 3008 	str.w	r3, [sl, #8]
  409134:	2b00      	cmp	r3, #0
  409136:	d1e7      	bne.n	409108 <__sfvwrite_r+0x34>
  409138:	2000      	movs	r0, #0
  40913a:	b005      	add	sp, #20
  40913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409140:	4621      	mov	r1, r4
  409142:	9801      	ldr	r0, [sp, #4]
  409144:	f7fe fca8 	bl	407a98 <__swsetup_r>
  409148:	2800      	cmp	r0, #0
  40914a:	f040 813a 	bne.w	4093c2 <__sfvwrite_r+0x2ee>
  40914e:	89a3      	ldrh	r3, [r4, #12]
  409150:	6835      	ldr	r5, [r6, #0]
  409152:	f003 0802 	and.w	r8, r3, #2
  409156:	fa1f f088 	uxth.w	r0, r8
  40915a:	2800      	cmp	r0, #0
  40915c:	d1cf      	bne.n	4090fe <__sfvwrite_r+0x2a>
  40915e:	f013 0901 	ands.w	r9, r3, #1
  409162:	d15b      	bne.n	40921c <__sfvwrite_r+0x148>
  409164:	464f      	mov	r7, r9
  409166:	9602      	str	r6, [sp, #8]
  409168:	b31f      	cbz	r7, 4091b2 <__sfvwrite_r+0xde>
  40916a:	059a      	lsls	r2, r3, #22
  40916c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  409170:	d52c      	bpl.n	4091cc <__sfvwrite_r+0xf8>
  409172:	4547      	cmp	r7, r8
  409174:	46c2      	mov	sl, r8
  409176:	f0c0 80a4 	bcc.w	4092c2 <__sfvwrite_r+0x1ee>
  40917a:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40917e:	f040 80b1 	bne.w	4092e4 <__sfvwrite_r+0x210>
  409182:	6820      	ldr	r0, [r4, #0]
  409184:	4652      	mov	r2, sl
  409186:	4649      	mov	r1, r9
  409188:	f000 fd7c 	bl	409c84 <memmove>
  40918c:	68a0      	ldr	r0, [r4, #8]
  40918e:	6823      	ldr	r3, [r4, #0]
  409190:	ebc8 0000 	rsb	r0, r8, r0
  409194:	4453      	add	r3, sl
  409196:	60a0      	str	r0, [r4, #8]
  409198:	6023      	str	r3, [r4, #0]
  40919a:	4638      	mov	r0, r7
  40919c:	9a02      	ldr	r2, [sp, #8]
  40919e:	6893      	ldr	r3, [r2, #8]
  4091a0:	1a1b      	subs	r3, r3, r0
  4091a2:	4481      	add	r9, r0
  4091a4:	1a3f      	subs	r7, r7, r0
  4091a6:	6093      	str	r3, [r2, #8]
  4091a8:	2b00      	cmp	r3, #0
  4091aa:	d0c5      	beq.n	409138 <__sfvwrite_r+0x64>
  4091ac:	89a3      	ldrh	r3, [r4, #12]
  4091ae:	2f00      	cmp	r7, #0
  4091b0:	d1db      	bne.n	40916a <__sfvwrite_r+0x96>
  4091b2:	f8d5 9000 	ldr.w	r9, [r5]
  4091b6:	686f      	ldr	r7, [r5, #4]
  4091b8:	3508      	adds	r5, #8
  4091ba:	e7d5      	b.n	409168 <__sfvwrite_r+0x94>
  4091bc:	f8d5 9000 	ldr.w	r9, [r5]
  4091c0:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4091c4:	3508      	adds	r5, #8
  4091c6:	e79f      	b.n	409108 <__sfvwrite_r+0x34>
  4091c8:	2000      	movs	r0, #0
  4091ca:	4770      	bx	lr
  4091cc:	6820      	ldr	r0, [r4, #0]
  4091ce:	6923      	ldr	r3, [r4, #16]
  4091d0:	4298      	cmp	r0, r3
  4091d2:	d803      	bhi.n	4091dc <__sfvwrite_r+0x108>
  4091d4:	6961      	ldr	r1, [r4, #20]
  4091d6:	428f      	cmp	r7, r1
  4091d8:	f080 80b7 	bcs.w	40934a <__sfvwrite_r+0x276>
  4091dc:	45b8      	cmp	r8, r7
  4091de:	bf28      	it	cs
  4091e0:	46b8      	movcs	r8, r7
  4091e2:	4642      	mov	r2, r8
  4091e4:	4649      	mov	r1, r9
  4091e6:	f000 fd4d 	bl	409c84 <memmove>
  4091ea:	68a3      	ldr	r3, [r4, #8]
  4091ec:	6822      	ldr	r2, [r4, #0]
  4091ee:	ebc8 0303 	rsb	r3, r8, r3
  4091f2:	4442      	add	r2, r8
  4091f4:	60a3      	str	r3, [r4, #8]
  4091f6:	6022      	str	r2, [r4, #0]
  4091f8:	2b00      	cmp	r3, #0
  4091fa:	d149      	bne.n	409290 <__sfvwrite_r+0x1bc>
  4091fc:	4621      	mov	r1, r4
  4091fe:	9801      	ldr	r0, [sp, #4]
  409200:	f7ff fd22 	bl	408c48 <_fflush_r>
  409204:	2800      	cmp	r0, #0
  409206:	d043      	beq.n	409290 <__sfvwrite_r+0x1bc>
  409208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40920c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409210:	f04f 30ff 	mov.w	r0, #4294967295
  409214:	81a3      	strh	r3, [r4, #12]
  409216:	b005      	add	sp, #20
  409218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40921c:	4680      	mov	r8, r0
  40921e:	9002      	str	r0, [sp, #8]
  409220:	4682      	mov	sl, r0
  409222:	4681      	mov	r9, r0
  409224:	f1b9 0f00 	cmp.w	r9, #0
  409228:	d02a      	beq.n	409280 <__sfvwrite_r+0x1ac>
  40922a:	9b02      	ldr	r3, [sp, #8]
  40922c:	2b00      	cmp	r3, #0
  40922e:	d04c      	beq.n	4092ca <__sfvwrite_r+0x1f6>
  409230:	6820      	ldr	r0, [r4, #0]
  409232:	6923      	ldr	r3, [r4, #16]
  409234:	6962      	ldr	r2, [r4, #20]
  409236:	45c8      	cmp	r8, r9
  409238:	46c3      	mov	fp, r8
  40923a:	bf28      	it	cs
  40923c:	46cb      	movcs	fp, r9
  40923e:	4298      	cmp	r0, r3
  409240:	465f      	mov	r7, fp
  409242:	d904      	bls.n	40924e <__sfvwrite_r+0x17a>
  409244:	68a3      	ldr	r3, [r4, #8]
  409246:	4413      	add	r3, r2
  409248:	459b      	cmp	fp, r3
  40924a:	f300 8090 	bgt.w	40936e <__sfvwrite_r+0x29a>
  40924e:	4593      	cmp	fp, r2
  409250:	db20      	blt.n	409294 <__sfvwrite_r+0x1c0>
  409252:	4613      	mov	r3, r2
  409254:	6a67      	ldr	r7, [r4, #36]	; 0x24
  409256:	69e1      	ldr	r1, [r4, #28]
  409258:	9801      	ldr	r0, [sp, #4]
  40925a:	4652      	mov	r2, sl
  40925c:	47b8      	blx	r7
  40925e:	1e07      	subs	r7, r0, #0
  409260:	ddd2      	ble.n	409208 <__sfvwrite_r+0x134>
  409262:	ebb8 0807 	subs.w	r8, r8, r7
  409266:	d023      	beq.n	4092b0 <__sfvwrite_r+0x1dc>
  409268:	68b3      	ldr	r3, [r6, #8]
  40926a:	1bdb      	subs	r3, r3, r7
  40926c:	44ba      	add	sl, r7
  40926e:	ebc7 0909 	rsb	r9, r7, r9
  409272:	60b3      	str	r3, [r6, #8]
  409274:	2b00      	cmp	r3, #0
  409276:	f43f af5f 	beq.w	409138 <__sfvwrite_r+0x64>
  40927a:	f1b9 0f00 	cmp.w	r9, #0
  40927e:	d1d4      	bne.n	40922a <__sfvwrite_r+0x156>
  409280:	2300      	movs	r3, #0
  409282:	f8d5 a000 	ldr.w	sl, [r5]
  409286:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40928a:	9302      	str	r3, [sp, #8]
  40928c:	3508      	adds	r5, #8
  40928e:	e7c9      	b.n	409224 <__sfvwrite_r+0x150>
  409290:	4640      	mov	r0, r8
  409292:	e783      	b.n	40919c <__sfvwrite_r+0xc8>
  409294:	465a      	mov	r2, fp
  409296:	4651      	mov	r1, sl
  409298:	f000 fcf4 	bl	409c84 <memmove>
  40929c:	68a2      	ldr	r2, [r4, #8]
  40929e:	6823      	ldr	r3, [r4, #0]
  4092a0:	ebcb 0202 	rsb	r2, fp, r2
  4092a4:	445b      	add	r3, fp
  4092a6:	ebb8 0807 	subs.w	r8, r8, r7
  4092aa:	60a2      	str	r2, [r4, #8]
  4092ac:	6023      	str	r3, [r4, #0]
  4092ae:	d1db      	bne.n	409268 <__sfvwrite_r+0x194>
  4092b0:	4621      	mov	r1, r4
  4092b2:	9801      	ldr	r0, [sp, #4]
  4092b4:	f7ff fcc8 	bl	408c48 <_fflush_r>
  4092b8:	2800      	cmp	r0, #0
  4092ba:	d1a5      	bne.n	409208 <__sfvwrite_r+0x134>
  4092bc:	f8cd 8008 	str.w	r8, [sp, #8]
  4092c0:	e7d2      	b.n	409268 <__sfvwrite_r+0x194>
  4092c2:	6820      	ldr	r0, [r4, #0]
  4092c4:	46b8      	mov	r8, r7
  4092c6:	46ba      	mov	sl, r7
  4092c8:	e75c      	b.n	409184 <__sfvwrite_r+0xb0>
  4092ca:	464a      	mov	r2, r9
  4092cc:	210a      	movs	r1, #10
  4092ce:	4650      	mov	r0, sl
  4092d0:	f000 fbee 	bl	409ab0 <memchr>
  4092d4:	2800      	cmp	r0, #0
  4092d6:	d06f      	beq.n	4093b8 <__sfvwrite_r+0x2e4>
  4092d8:	3001      	adds	r0, #1
  4092da:	2301      	movs	r3, #1
  4092dc:	ebca 0800 	rsb	r8, sl, r0
  4092e0:	9302      	str	r3, [sp, #8]
  4092e2:	e7a5      	b.n	409230 <__sfvwrite_r+0x15c>
  4092e4:	6962      	ldr	r2, [r4, #20]
  4092e6:	6820      	ldr	r0, [r4, #0]
  4092e8:	6921      	ldr	r1, [r4, #16]
  4092ea:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4092ee:	ebc1 0a00 	rsb	sl, r1, r0
  4092f2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4092f6:	f10a 0001 	add.w	r0, sl, #1
  4092fa:	ea4f 0868 	mov.w	r8, r8, asr #1
  4092fe:	4438      	add	r0, r7
  409300:	4540      	cmp	r0, r8
  409302:	4642      	mov	r2, r8
  409304:	bf84      	itt	hi
  409306:	4680      	movhi	r8, r0
  409308:	4642      	movhi	r2, r8
  40930a:	055b      	lsls	r3, r3, #21
  40930c:	d542      	bpl.n	409394 <__sfvwrite_r+0x2c0>
  40930e:	4611      	mov	r1, r2
  409310:	9801      	ldr	r0, [sp, #4]
  409312:	f000 f915 	bl	409540 <_malloc_r>
  409316:	4683      	mov	fp, r0
  409318:	2800      	cmp	r0, #0
  40931a:	d055      	beq.n	4093c8 <__sfvwrite_r+0x2f4>
  40931c:	4652      	mov	r2, sl
  40931e:	6921      	ldr	r1, [r4, #16]
  409320:	f000 fc16 	bl	409b50 <memcpy>
  409324:	89a3      	ldrh	r3, [r4, #12]
  409326:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40932a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40932e:	81a3      	strh	r3, [r4, #12]
  409330:	ebca 0308 	rsb	r3, sl, r8
  409334:	eb0b 000a 	add.w	r0, fp, sl
  409338:	f8c4 8014 	str.w	r8, [r4, #20]
  40933c:	f8c4 b010 	str.w	fp, [r4, #16]
  409340:	6020      	str	r0, [r4, #0]
  409342:	60a3      	str	r3, [r4, #8]
  409344:	46b8      	mov	r8, r7
  409346:	46ba      	mov	sl, r7
  409348:	e71c      	b.n	409184 <__sfvwrite_r+0xb0>
  40934a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40934e:	42bb      	cmp	r3, r7
  409350:	bf28      	it	cs
  409352:	463b      	movcs	r3, r7
  409354:	464a      	mov	r2, r9
  409356:	fb93 f3f1 	sdiv	r3, r3, r1
  40935a:	9801      	ldr	r0, [sp, #4]
  40935c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40935e:	fb01 f303 	mul.w	r3, r1, r3
  409362:	69e1      	ldr	r1, [r4, #28]
  409364:	47b0      	blx	r6
  409366:	2800      	cmp	r0, #0
  409368:	f73f af18 	bgt.w	40919c <__sfvwrite_r+0xc8>
  40936c:	e74c      	b.n	409208 <__sfvwrite_r+0x134>
  40936e:	461a      	mov	r2, r3
  409370:	4651      	mov	r1, sl
  409372:	9303      	str	r3, [sp, #12]
  409374:	f000 fc86 	bl	409c84 <memmove>
  409378:	6822      	ldr	r2, [r4, #0]
  40937a:	9b03      	ldr	r3, [sp, #12]
  40937c:	9801      	ldr	r0, [sp, #4]
  40937e:	441a      	add	r2, r3
  409380:	6022      	str	r2, [r4, #0]
  409382:	4621      	mov	r1, r4
  409384:	f7ff fc60 	bl	408c48 <_fflush_r>
  409388:	9b03      	ldr	r3, [sp, #12]
  40938a:	2800      	cmp	r0, #0
  40938c:	f47f af3c 	bne.w	409208 <__sfvwrite_r+0x134>
  409390:	461f      	mov	r7, r3
  409392:	e766      	b.n	409262 <__sfvwrite_r+0x18e>
  409394:	9801      	ldr	r0, [sp, #4]
  409396:	f000 ffeb 	bl	40a370 <_realloc_r>
  40939a:	4683      	mov	fp, r0
  40939c:	2800      	cmp	r0, #0
  40939e:	d1c7      	bne.n	409330 <__sfvwrite_r+0x25c>
  4093a0:	9d01      	ldr	r5, [sp, #4]
  4093a2:	6921      	ldr	r1, [r4, #16]
  4093a4:	4628      	mov	r0, r5
  4093a6:	f7ff fdad 	bl	408f04 <_free_r>
  4093aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4093ae:	220c      	movs	r2, #12
  4093b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4093b4:	602a      	str	r2, [r5, #0]
  4093b6:	e729      	b.n	40920c <__sfvwrite_r+0x138>
  4093b8:	2301      	movs	r3, #1
  4093ba:	f109 0801 	add.w	r8, r9, #1
  4093be:	9302      	str	r3, [sp, #8]
  4093c0:	e736      	b.n	409230 <__sfvwrite_r+0x15c>
  4093c2:	f04f 30ff 	mov.w	r0, #4294967295
  4093c6:	e6b8      	b.n	40913a <__sfvwrite_r+0x66>
  4093c8:	9a01      	ldr	r2, [sp, #4]
  4093ca:	230c      	movs	r3, #12
  4093cc:	6013      	str	r3, [r2, #0]
  4093ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4093d2:	e71b      	b.n	40920c <__sfvwrite_r+0x138>
  4093d4:	7ffffc00 	.word	0x7ffffc00

004093d8 <_fwalk_reent>:
  4093d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4093dc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4093e0:	d01f      	beq.n	409422 <_fwalk_reent+0x4a>
  4093e2:	4688      	mov	r8, r1
  4093e4:	4606      	mov	r6, r0
  4093e6:	f04f 0900 	mov.w	r9, #0
  4093ea:	687d      	ldr	r5, [r7, #4]
  4093ec:	68bc      	ldr	r4, [r7, #8]
  4093ee:	3d01      	subs	r5, #1
  4093f0:	d411      	bmi.n	409416 <_fwalk_reent+0x3e>
  4093f2:	89a3      	ldrh	r3, [r4, #12]
  4093f4:	2b01      	cmp	r3, #1
  4093f6:	f105 35ff 	add.w	r5, r5, #4294967295
  4093fa:	d908      	bls.n	40940e <_fwalk_reent+0x36>
  4093fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  409400:	3301      	adds	r3, #1
  409402:	4621      	mov	r1, r4
  409404:	4630      	mov	r0, r6
  409406:	d002      	beq.n	40940e <_fwalk_reent+0x36>
  409408:	47c0      	blx	r8
  40940a:	ea49 0900 	orr.w	r9, r9, r0
  40940e:	1c6b      	adds	r3, r5, #1
  409410:	f104 0468 	add.w	r4, r4, #104	; 0x68
  409414:	d1ed      	bne.n	4093f2 <_fwalk_reent+0x1a>
  409416:	683f      	ldr	r7, [r7, #0]
  409418:	2f00      	cmp	r7, #0
  40941a:	d1e6      	bne.n	4093ea <_fwalk_reent+0x12>
  40941c:	4648      	mov	r0, r9
  40941e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409422:	46b9      	mov	r9, r7
  409424:	4648      	mov	r0, r9
  409426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40942a:	bf00      	nop

0040942c <__locale_charset>:
  40942c:	4800      	ldr	r0, [pc, #0]	; (409430 <__locale_charset+0x4>)
  40942e:	4770      	bx	lr
  409430:	204004ac 	.word	0x204004ac

00409434 <__locale_mb_cur_max>:
  409434:	4b01      	ldr	r3, [pc, #4]	; (40943c <__locale_mb_cur_max+0x8>)
  409436:	6818      	ldr	r0, [r3, #0]
  409438:	4770      	bx	lr
  40943a:	bf00      	nop
  40943c:	204004cc 	.word	0x204004cc

00409440 <_localeconv_r>:
  409440:	4800      	ldr	r0, [pc, #0]	; (409444 <_localeconv_r+0x4>)
  409442:	4770      	bx	lr
  409444:	20400474 	.word	0x20400474

00409448 <__swhatbuf_r>:
  409448:	b570      	push	{r4, r5, r6, lr}
  40944a:	460d      	mov	r5, r1
  40944c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409450:	2900      	cmp	r1, #0
  409452:	b090      	sub	sp, #64	; 0x40
  409454:	4614      	mov	r4, r2
  409456:	461e      	mov	r6, r3
  409458:	db14      	blt.n	409484 <__swhatbuf_r+0x3c>
  40945a:	aa01      	add	r2, sp, #4
  40945c:	f001 fbc8 	bl	40abf0 <_fstat_r>
  409460:	2800      	cmp	r0, #0
  409462:	db0f      	blt.n	409484 <__swhatbuf_r+0x3c>
  409464:	9a02      	ldr	r2, [sp, #8]
  409466:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40946a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40946e:	fab2 f282 	clz	r2, r2
  409472:	0952      	lsrs	r2, r2, #5
  409474:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409478:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40947c:	6032      	str	r2, [r6, #0]
  40947e:	6023      	str	r3, [r4, #0]
  409480:	b010      	add	sp, #64	; 0x40
  409482:	bd70      	pop	{r4, r5, r6, pc}
  409484:	89a8      	ldrh	r0, [r5, #12]
  409486:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40948a:	b282      	uxth	r2, r0
  40948c:	2000      	movs	r0, #0
  40948e:	6030      	str	r0, [r6, #0]
  409490:	b11a      	cbz	r2, 40949a <__swhatbuf_r+0x52>
  409492:	2340      	movs	r3, #64	; 0x40
  409494:	6023      	str	r3, [r4, #0]
  409496:	b010      	add	sp, #64	; 0x40
  409498:	bd70      	pop	{r4, r5, r6, pc}
  40949a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40949e:	4610      	mov	r0, r2
  4094a0:	6023      	str	r3, [r4, #0]
  4094a2:	b010      	add	sp, #64	; 0x40
  4094a4:	bd70      	pop	{r4, r5, r6, pc}
  4094a6:	bf00      	nop

004094a8 <__smakebuf_r>:
  4094a8:	898a      	ldrh	r2, [r1, #12]
  4094aa:	0792      	lsls	r2, r2, #30
  4094ac:	460b      	mov	r3, r1
  4094ae:	d506      	bpl.n	4094be <__smakebuf_r+0x16>
  4094b0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4094b4:	2101      	movs	r1, #1
  4094b6:	601a      	str	r2, [r3, #0]
  4094b8:	611a      	str	r2, [r3, #16]
  4094ba:	6159      	str	r1, [r3, #20]
  4094bc:	4770      	bx	lr
  4094be:	b5f0      	push	{r4, r5, r6, r7, lr}
  4094c0:	b083      	sub	sp, #12
  4094c2:	ab01      	add	r3, sp, #4
  4094c4:	466a      	mov	r2, sp
  4094c6:	460c      	mov	r4, r1
  4094c8:	4605      	mov	r5, r0
  4094ca:	f7ff ffbd 	bl	409448 <__swhatbuf_r>
  4094ce:	9900      	ldr	r1, [sp, #0]
  4094d0:	4606      	mov	r6, r0
  4094d2:	4628      	mov	r0, r5
  4094d4:	f000 f834 	bl	409540 <_malloc_r>
  4094d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4094dc:	b1d0      	cbz	r0, 409514 <__smakebuf_r+0x6c>
  4094de:	9a01      	ldr	r2, [sp, #4]
  4094e0:	4f12      	ldr	r7, [pc, #72]	; (40952c <__smakebuf_r+0x84>)
  4094e2:	9900      	ldr	r1, [sp, #0]
  4094e4:	63ef      	str	r7, [r5, #60]	; 0x3c
  4094e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4094ea:	81a3      	strh	r3, [r4, #12]
  4094ec:	6020      	str	r0, [r4, #0]
  4094ee:	6120      	str	r0, [r4, #16]
  4094f0:	6161      	str	r1, [r4, #20]
  4094f2:	b91a      	cbnz	r2, 4094fc <__smakebuf_r+0x54>
  4094f4:	4333      	orrs	r3, r6
  4094f6:	81a3      	strh	r3, [r4, #12]
  4094f8:	b003      	add	sp, #12
  4094fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4094fc:	4628      	mov	r0, r5
  4094fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409502:	f001 fb89 	bl	40ac18 <_isatty_r>
  409506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40950a:	2800      	cmp	r0, #0
  40950c:	d0f2      	beq.n	4094f4 <__smakebuf_r+0x4c>
  40950e:	f043 0301 	orr.w	r3, r3, #1
  409512:	e7ef      	b.n	4094f4 <__smakebuf_r+0x4c>
  409514:	059a      	lsls	r2, r3, #22
  409516:	d4ef      	bmi.n	4094f8 <__smakebuf_r+0x50>
  409518:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40951c:	f043 0302 	orr.w	r3, r3, #2
  409520:	2101      	movs	r1, #1
  409522:	81a3      	strh	r3, [r4, #12]
  409524:	6022      	str	r2, [r4, #0]
  409526:	6122      	str	r2, [r4, #16]
  409528:	6161      	str	r1, [r4, #20]
  40952a:	e7e5      	b.n	4094f8 <__smakebuf_r+0x50>
  40952c:	00408c75 	.word	0x00408c75

00409530 <malloc>:
  409530:	4b02      	ldr	r3, [pc, #8]	; (40953c <malloc+0xc>)
  409532:	4601      	mov	r1, r0
  409534:	6818      	ldr	r0, [r3, #0]
  409536:	f000 b803 	b.w	409540 <_malloc_r>
  40953a:	bf00      	nop
  40953c:	20400470 	.word	0x20400470

00409540 <_malloc_r>:
  409540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409544:	f101 050b 	add.w	r5, r1, #11
  409548:	2d16      	cmp	r5, #22
  40954a:	b083      	sub	sp, #12
  40954c:	4606      	mov	r6, r0
  40954e:	f240 809f 	bls.w	409690 <_malloc_r+0x150>
  409552:	f035 0507 	bics.w	r5, r5, #7
  409556:	f100 80bf 	bmi.w	4096d8 <_malloc_r+0x198>
  40955a:	42a9      	cmp	r1, r5
  40955c:	f200 80bc 	bhi.w	4096d8 <_malloc_r+0x198>
  409560:	f000 fbf4 	bl	409d4c <__malloc_lock>
  409564:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  409568:	f0c0 829c 	bcc.w	409aa4 <_malloc_r+0x564>
  40956c:	0a6b      	lsrs	r3, r5, #9
  40956e:	f000 80ba 	beq.w	4096e6 <_malloc_r+0x1a6>
  409572:	2b04      	cmp	r3, #4
  409574:	f200 8183 	bhi.w	40987e <_malloc_r+0x33e>
  409578:	09a8      	lsrs	r0, r5, #6
  40957a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40957e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  409582:	3038      	adds	r0, #56	; 0x38
  409584:	4fc4      	ldr	r7, [pc, #784]	; (409898 <_malloc_r+0x358>)
  409586:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40958a:	f1a3 0108 	sub.w	r1, r3, #8
  40958e:	685c      	ldr	r4, [r3, #4]
  409590:	42a1      	cmp	r1, r4
  409592:	d107      	bne.n	4095a4 <_malloc_r+0x64>
  409594:	e0ac      	b.n	4096f0 <_malloc_r+0x1b0>
  409596:	2a00      	cmp	r2, #0
  409598:	f280 80ac 	bge.w	4096f4 <_malloc_r+0x1b4>
  40959c:	68e4      	ldr	r4, [r4, #12]
  40959e:	42a1      	cmp	r1, r4
  4095a0:	f000 80a6 	beq.w	4096f0 <_malloc_r+0x1b0>
  4095a4:	6863      	ldr	r3, [r4, #4]
  4095a6:	f023 0303 	bic.w	r3, r3, #3
  4095aa:	1b5a      	subs	r2, r3, r5
  4095ac:	2a0f      	cmp	r2, #15
  4095ae:	ddf2      	ble.n	409596 <_malloc_r+0x56>
  4095b0:	49b9      	ldr	r1, [pc, #740]	; (409898 <_malloc_r+0x358>)
  4095b2:	693c      	ldr	r4, [r7, #16]
  4095b4:	f101 0e08 	add.w	lr, r1, #8
  4095b8:	4574      	cmp	r4, lr
  4095ba:	f000 81b3 	beq.w	409924 <_malloc_r+0x3e4>
  4095be:	6863      	ldr	r3, [r4, #4]
  4095c0:	f023 0303 	bic.w	r3, r3, #3
  4095c4:	1b5a      	subs	r2, r3, r5
  4095c6:	2a0f      	cmp	r2, #15
  4095c8:	f300 8199 	bgt.w	4098fe <_malloc_r+0x3be>
  4095cc:	2a00      	cmp	r2, #0
  4095ce:	f8c1 e014 	str.w	lr, [r1, #20]
  4095d2:	f8c1 e010 	str.w	lr, [r1, #16]
  4095d6:	f280 809e 	bge.w	409716 <_malloc_r+0x1d6>
  4095da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4095de:	f080 8167 	bcs.w	4098b0 <_malloc_r+0x370>
  4095e2:	08db      	lsrs	r3, r3, #3
  4095e4:	f103 0c01 	add.w	ip, r3, #1
  4095e8:	2201      	movs	r2, #1
  4095ea:	109b      	asrs	r3, r3, #2
  4095ec:	fa02 f303 	lsl.w	r3, r2, r3
  4095f0:	684a      	ldr	r2, [r1, #4]
  4095f2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4095f6:	f8c4 8008 	str.w	r8, [r4, #8]
  4095fa:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4095fe:	431a      	orrs	r2, r3
  409600:	f1a9 0308 	sub.w	r3, r9, #8
  409604:	60e3      	str	r3, [r4, #12]
  409606:	604a      	str	r2, [r1, #4]
  409608:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  40960c:	f8c8 400c 	str.w	r4, [r8, #12]
  409610:	1083      	asrs	r3, r0, #2
  409612:	2401      	movs	r4, #1
  409614:	409c      	lsls	r4, r3
  409616:	4294      	cmp	r4, r2
  409618:	f200 808a 	bhi.w	409730 <_malloc_r+0x1f0>
  40961c:	4214      	tst	r4, r2
  40961e:	d106      	bne.n	40962e <_malloc_r+0xee>
  409620:	f020 0003 	bic.w	r0, r0, #3
  409624:	0064      	lsls	r4, r4, #1
  409626:	4214      	tst	r4, r2
  409628:	f100 0004 	add.w	r0, r0, #4
  40962c:	d0fa      	beq.n	409624 <_malloc_r+0xe4>
  40962e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  409632:	46cc      	mov	ip, r9
  409634:	4680      	mov	r8, r0
  409636:	f8dc 100c 	ldr.w	r1, [ip, #12]
  40963a:	458c      	cmp	ip, r1
  40963c:	d107      	bne.n	40964e <_malloc_r+0x10e>
  40963e:	e173      	b.n	409928 <_malloc_r+0x3e8>
  409640:	2a00      	cmp	r2, #0
  409642:	f280 8181 	bge.w	409948 <_malloc_r+0x408>
  409646:	68c9      	ldr	r1, [r1, #12]
  409648:	458c      	cmp	ip, r1
  40964a:	f000 816d 	beq.w	409928 <_malloc_r+0x3e8>
  40964e:	684b      	ldr	r3, [r1, #4]
  409650:	f023 0303 	bic.w	r3, r3, #3
  409654:	1b5a      	subs	r2, r3, r5
  409656:	2a0f      	cmp	r2, #15
  409658:	ddf2      	ble.n	409640 <_malloc_r+0x100>
  40965a:	460c      	mov	r4, r1
  40965c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  409660:	f854 8f08 	ldr.w	r8, [r4, #8]!
  409664:	194b      	adds	r3, r1, r5
  409666:	f045 0501 	orr.w	r5, r5, #1
  40966a:	604d      	str	r5, [r1, #4]
  40966c:	f042 0101 	orr.w	r1, r2, #1
  409670:	f8c8 c00c 	str.w	ip, [r8, #12]
  409674:	4630      	mov	r0, r6
  409676:	f8cc 8008 	str.w	r8, [ip, #8]
  40967a:	617b      	str	r3, [r7, #20]
  40967c:	613b      	str	r3, [r7, #16]
  40967e:	f8c3 e00c 	str.w	lr, [r3, #12]
  409682:	f8c3 e008 	str.w	lr, [r3, #8]
  409686:	6059      	str	r1, [r3, #4]
  409688:	509a      	str	r2, [r3, r2]
  40968a:	f000 fb61 	bl	409d50 <__malloc_unlock>
  40968e:	e01f      	b.n	4096d0 <_malloc_r+0x190>
  409690:	2910      	cmp	r1, #16
  409692:	d821      	bhi.n	4096d8 <_malloc_r+0x198>
  409694:	f000 fb5a 	bl	409d4c <__malloc_lock>
  409698:	2510      	movs	r5, #16
  40969a:	2306      	movs	r3, #6
  40969c:	2002      	movs	r0, #2
  40969e:	4f7e      	ldr	r7, [pc, #504]	; (409898 <_malloc_r+0x358>)
  4096a0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4096a4:	f1a3 0208 	sub.w	r2, r3, #8
  4096a8:	685c      	ldr	r4, [r3, #4]
  4096aa:	4294      	cmp	r4, r2
  4096ac:	f000 8145 	beq.w	40993a <_malloc_r+0x3fa>
  4096b0:	6863      	ldr	r3, [r4, #4]
  4096b2:	68e1      	ldr	r1, [r4, #12]
  4096b4:	68a5      	ldr	r5, [r4, #8]
  4096b6:	f023 0303 	bic.w	r3, r3, #3
  4096ba:	4423      	add	r3, r4
  4096bc:	4630      	mov	r0, r6
  4096be:	685a      	ldr	r2, [r3, #4]
  4096c0:	60e9      	str	r1, [r5, #12]
  4096c2:	f042 0201 	orr.w	r2, r2, #1
  4096c6:	608d      	str	r5, [r1, #8]
  4096c8:	605a      	str	r2, [r3, #4]
  4096ca:	f000 fb41 	bl	409d50 <__malloc_unlock>
  4096ce:	3408      	adds	r4, #8
  4096d0:	4620      	mov	r0, r4
  4096d2:	b003      	add	sp, #12
  4096d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4096d8:	2400      	movs	r4, #0
  4096da:	230c      	movs	r3, #12
  4096dc:	4620      	mov	r0, r4
  4096de:	6033      	str	r3, [r6, #0]
  4096e0:	b003      	add	sp, #12
  4096e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4096e6:	2380      	movs	r3, #128	; 0x80
  4096e8:	f04f 0e40 	mov.w	lr, #64	; 0x40
  4096ec:	203f      	movs	r0, #63	; 0x3f
  4096ee:	e749      	b.n	409584 <_malloc_r+0x44>
  4096f0:	4670      	mov	r0, lr
  4096f2:	e75d      	b.n	4095b0 <_malloc_r+0x70>
  4096f4:	4423      	add	r3, r4
  4096f6:	68e1      	ldr	r1, [r4, #12]
  4096f8:	685a      	ldr	r2, [r3, #4]
  4096fa:	68a5      	ldr	r5, [r4, #8]
  4096fc:	f042 0201 	orr.w	r2, r2, #1
  409700:	60e9      	str	r1, [r5, #12]
  409702:	4630      	mov	r0, r6
  409704:	608d      	str	r5, [r1, #8]
  409706:	605a      	str	r2, [r3, #4]
  409708:	f000 fb22 	bl	409d50 <__malloc_unlock>
  40970c:	3408      	adds	r4, #8
  40970e:	4620      	mov	r0, r4
  409710:	b003      	add	sp, #12
  409712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409716:	4423      	add	r3, r4
  409718:	4630      	mov	r0, r6
  40971a:	685a      	ldr	r2, [r3, #4]
  40971c:	f042 0201 	orr.w	r2, r2, #1
  409720:	605a      	str	r2, [r3, #4]
  409722:	f000 fb15 	bl	409d50 <__malloc_unlock>
  409726:	3408      	adds	r4, #8
  409728:	4620      	mov	r0, r4
  40972a:	b003      	add	sp, #12
  40972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409730:	68bc      	ldr	r4, [r7, #8]
  409732:	6863      	ldr	r3, [r4, #4]
  409734:	f023 0803 	bic.w	r8, r3, #3
  409738:	45a8      	cmp	r8, r5
  40973a:	d304      	bcc.n	409746 <_malloc_r+0x206>
  40973c:	ebc5 0308 	rsb	r3, r5, r8
  409740:	2b0f      	cmp	r3, #15
  409742:	f300 808c 	bgt.w	40985e <_malloc_r+0x31e>
  409746:	4b55      	ldr	r3, [pc, #340]	; (40989c <_malloc_r+0x35c>)
  409748:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4098ac <_malloc_r+0x36c>
  40974c:	681a      	ldr	r2, [r3, #0]
  40974e:	f8d9 3000 	ldr.w	r3, [r9]
  409752:	3301      	adds	r3, #1
  409754:	442a      	add	r2, r5
  409756:	eb04 0a08 	add.w	sl, r4, r8
  40975a:	f000 8160 	beq.w	409a1e <_malloc_r+0x4de>
  40975e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  409762:	320f      	adds	r2, #15
  409764:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  409768:	f022 020f 	bic.w	r2, r2, #15
  40976c:	4611      	mov	r1, r2
  40976e:	4630      	mov	r0, r6
  409770:	9201      	str	r2, [sp, #4]
  409772:	f000 ffed 	bl	40a750 <_sbrk_r>
  409776:	f1b0 3fff 	cmp.w	r0, #4294967295
  40977a:	4683      	mov	fp, r0
  40977c:	9a01      	ldr	r2, [sp, #4]
  40977e:	f000 8158 	beq.w	409a32 <_malloc_r+0x4f2>
  409782:	4582      	cmp	sl, r0
  409784:	f200 80fc 	bhi.w	409980 <_malloc_r+0x440>
  409788:	4b45      	ldr	r3, [pc, #276]	; (4098a0 <_malloc_r+0x360>)
  40978a:	6819      	ldr	r1, [r3, #0]
  40978c:	45da      	cmp	sl, fp
  40978e:	4411      	add	r1, r2
  409790:	6019      	str	r1, [r3, #0]
  409792:	f000 8153 	beq.w	409a3c <_malloc_r+0x4fc>
  409796:	f8d9 0000 	ldr.w	r0, [r9]
  40979a:	f8df e110 	ldr.w	lr, [pc, #272]	; 4098ac <_malloc_r+0x36c>
  40979e:	3001      	adds	r0, #1
  4097a0:	bf1b      	ittet	ne
  4097a2:	ebca 0a0b 	rsbne	sl, sl, fp
  4097a6:	4451      	addne	r1, sl
  4097a8:	f8ce b000 	streq.w	fp, [lr]
  4097ac:	6019      	strne	r1, [r3, #0]
  4097ae:	f01b 0107 	ands.w	r1, fp, #7
  4097b2:	f000 8117 	beq.w	4099e4 <_malloc_r+0x4a4>
  4097b6:	f1c1 0008 	rsb	r0, r1, #8
  4097ba:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4097be:	4483      	add	fp, r0
  4097c0:	3108      	adds	r1, #8
  4097c2:	445a      	add	r2, fp
  4097c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4097c8:	ebc2 0901 	rsb	r9, r2, r1
  4097cc:	4649      	mov	r1, r9
  4097ce:	4630      	mov	r0, r6
  4097d0:	9301      	str	r3, [sp, #4]
  4097d2:	f000 ffbd 	bl	40a750 <_sbrk_r>
  4097d6:	1c43      	adds	r3, r0, #1
  4097d8:	9b01      	ldr	r3, [sp, #4]
  4097da:	f000 813f 	beq.w	409a5c <_malloc_r+0x51c>
  4097de:	ebcb 0200 	rsb	r2, fp, r0
  4097e2:	444a      	add	r2, r9
  4097e4:	f042 0201 	orr.w	r2, r2, #1
  4097e8:	6819      	ldr	r1, [r3, #0]
  4097ea:	f8c7 b008 	str.w	fp, [r7, #8]
  4097ee:	4449      	add	r1, r9
  4097f0:	42bc      	cmp	r4, r7
  4097f2:	f8cb 2004 	str.w	r2, [fp, #4]
  4097f6:	6019      	str	r1, [r3, #0]
  4097f8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4098a0 <_malloc_r+0x360>
  4097fc:	d016      	beq.n	40982c <_malloc_r+0x2ec>
  4097fe:	f1b8 0f0f 	cmp.w	r8, #15
  409802:	f240 80fd 	bls.w	409a00 <_malloc_r+0x4c0>
  409806:	6862      	ldr	r2, [r4, #4]
  409808:	f1a8 030c 	sub.w	r3, r8, #12
  40980c:	f023 0307 	bic.w	r3, r3, #7
  409810:	18e0      	adds	r0, r4, r3
  409812:	f002 0201 	and.w	r2, r2, #1
  409816:	f04f 0e05 	mov.w	lr, #5
  40981a:	431a      	orrs	r2, r3
  40981c:	2b0f      	cmp	r3, #15
  40981e:	6062      	str	r2, [r4, #4]
  409820:	f8c0 e004 	str.w	lr, [r0, #4]
  409824:	f8c0 e008 	str.w	lr, [r0, #8]
  409828:	f200 811c 	bhi.w	409a64 <_malloc_r+0x524>
  40982c:	4b1d      	ldr	r3, [pc, #116]	; (4098a4 <_malloc_r+0x364>)
  40982e:	68bc      	ldr	r4, [r7, #8]
  409830:	681a      	ldr	r2, [r3, #0]
  409832:	4291      	cmp	r1, r2
  409834:	bf88      	it	hi
  409836:	6019      	strhi	r1, [r3, #0]
  409838:	4b1b      	ldr	r3, [pc, #108]	; (4098a8 <_malloc_r+0x368>)
  40983a:	681a      	ldr	r2, [r3, #0]
  40983c:	4291      	cmp	r1, r2
  40983e:	6862      	ldr	r2, [r4, #4]
  409840:	bf88      	it	hi
  409842:	6019      	strhi	r1, [r3, #0]
  409844:	f022 0203 	bic.w	r2, r2, #3
  409848:	4295      	cmp	r5, r2
  40984a:	eba2 0305 	sub.w	r3, r2, r5
  40984e:	d801      	bhi.n	409854 <_malloc_r+0x314>
  409850:	2b0f      	cmp	r3, #15
  409852:	dc04      	bgt.n	40985e <_malloc_r+0x31e>
  409854:	4630      	mov	r0, r6
  409856:	f000 fa7b 	bl	409d50 <__malloc_unlock>
  40985a:	2400      	movs	r4, #0
  40985c:	e738      	b.n	4096d0 <_malloc_r+0x190>
  40985e:	1962      	adds	r2, r4, r5
  409860:	f043 0301 	orr.w	r3, r3, #1
  409864:	f045 0501 	orr.w	r5, r5, #1
  409868:	6065      	str	r5, [r4, #4]
  40986a:	4630      	mov	r0, r6
  40986c:	60ba      	str	r2, [r7, #8]
  40986e:	6053      	str	r3, [r2, #4]
  409870:	f000 fa6e 	bl	409d50 <__malloc_unlock>
  409874:	3408      	adds	r4, #8
  409876:	4620      	mov	r0, r4
  409878:	b003      	add	sp, #12
  40987a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40987e:	2b14      	cmp	r3, #20
  409880:	d971      	bls.n	409966 <_malloc_r+0x426>
  409882:	2b54      	cmp	r3, #84	; 0x54
  409884:	f200 80a4 	bhi.w	4099d0 <_malloc_r+0x490>
  409888:	0b28      	lsrs	r0, r5, #12
  40988a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  40988e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  409892:	306e      	adds	r0, #110	; 0x6e
  409894:	e676      	b.n	409584 <_malloc_r+0x44>
  409896:	bf00      	nop
  409898:	204004d0 	.word	0x204004d0
  40989c:	20401568 	.word	0x20401568
  4098a0:	2040156c 	.word	0x2040156c
  4098a4:	20401564 	.word	0x20401564
  4098a8:	20401560 	.word	0x20401560
  4098ac:	204008dc 	.word	0x204008dc
  4098b0:	0a5a      	lsrs	r2, r3, #9
  4098b2:	2a04      	cmp	r2, #4
  4098b4:	d95e      	bls.n	409974 <_malloc_r+0x434>
  4098b6:	2a14      	cmp	r2, #20
  4098b8:	f200 80b3 	bhi.w	409a22 <_malloc_r+0x4e2>
  4098bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4098c0:	0049      	lsls	r1, r1, #1
  4098c2:	325b      	adds	r2, #91	; 0x5b
  4098c4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  4098c8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  4098cc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 409aac <_malloc_r+0x56c>
  4098d0:	f1ac 0c08 	sub.w	ip, ip, #8
  4098d4:	458c      	cmp	ip, r1
  4098d6:	f000 8088 	beq.w	4099ea <_malloc_r+0x4aa>
  4098da:	684a      	ldr	r2, [r1, #4]
  4098dc:	f022 0203 	bic.w	r2, r2, #3
  4098e0:	4293      	cmp	r3, r2
  4098e2:	d202      	bcs.n	4098ea <_malloc_r+0x3aa>
  4098e4:	6889      	ldr	r1, [r1, #8]
  4098e6:	458c      	cmp	ip, r1
  4098e8:	d1f7      	bne.n	4098da <_malloc_r+0x39a>
  4098ea:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4098ee:	687a      	ldr	r2, [r7, #4]
  4098f0:	f8c4 c00c 	str.w	ip, [r4, #12]
  4098f4:	60a1      	str	r1, [r4, #8]
  4098f6:	f8cc 4008 	str.w	r4, [ip, #8]
  4098fa:	60cc      	str	r4, [r1, #12]
  4098fc:	e688      	b.n	409610 <_malloc_r+0xd0>
  4098fe:	1963      	adds	r3, r4, r5
  409900:	f042 0701 	orr.w	r7, r2, #1
  409904:	f045 0501 	orr.w	r5, r5, #1
  409908:	6065      	str	r5, [r4, #4]
  40990a:	4630      	mov	r0, r6
  40990c:	614b      	str	r3, [r1, #20]
  40990e:	610b      	str	r3, [r1, #16]
  409910:	f8c3 e00c 	str.w	lr, [r3, #12]
  409914:	f8c3 e008 	str.w	lr, [r3, #8]
  409918:	605f      	str	r7, [r3, #4]
  40991a:	509a      	str	r2, [r3, r2]
  40991c:	3408      	adds	r4, #8
  40991e:	f000 fa17 	bl	409d50 <__malloc_unlock>
  409922:	e6d5      	b.n	4096d0 <_malloc_r+0x190>
  409924:	684a      	ldr	r2, [r1, #4]
  409926:	e673      	b.n	409610 <_malloc_r+0xd0>
  409928:	f108 0801 	add.w	r8, r8, #1
  40992c:	f018 0f03 	tst.w	r8, #3
  409930:	f10c 0c08 	add.w	ip, ip, #8
  409934:	f47f ae7f 	bne.w	409636 <_malloc_r+0xf6>
  409938:	e030      	b.n	40999c <_malloc_r+0x45c>
  40993a:	68dc      	ldr	r4, [r3, #12]
  40993c:	42a3      	cmp	r3, r4
  40993e:	bf08      	it	eq
  409940:	3002      	addeq	r0, #2
  409942:	f43f ae35 	beq.w	4095b0 <_malloc_r+0x70>
  409946:	e6b3      	b.n	4096b0 <_malloc_r+0x170>
  409948:	440b      	add	r3, r1
  40994a:	460c      	mov	r4, r1
  40994c:	685a      	ldr	r2, [r3, #4]
  40994e:	68c9      	ldr	r1, [r1, #12]
  409950:	f854 5f08 	ldr.w	r5, [r4, #8]!
  409954:	f042 0201 	orr.w	r2, r2, #1
  409958:	605a      	str	r2, [r3, #4]
  40995a:	4630      	mov	r0, r6
  40995c:	60e9      	str	r1, [r5, #12]
  40995e:	608d      	str	r5, [r1, #8]
  409960:	f000 f9f6 	bl	409d50 <__malloc_unlock>
  409964:	e6b4      	b.n	4096d0 <_malloc_r+0x190>
  409966:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40996a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  40996e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  409972:	e607      	b.n	409584 <_malloc_r+0x44>
  409974:	099a      	lsrs	r2, r3, #6
  409976:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40997a:	0049      	lsls	r1, r1, #1
  40997c:	3238      	adds	r2, #56	; 0x38
  40997e:	e7a1      	b.n	4098c4 <_malloc_r+0x384>
  409980:	42bc      	cmp	r4, r7
  409982:	4b4a      	ldr	r3, [pc, #296]	; (409aac <_malloc_r+0x56c>)
  409984:	f43f af00 	beq.w	409788 <_malloc_r+0x248>
  409988:	689c      	ldr	r4, [r3, #8]
  40998a:	6862      	ldr	r2, [r4, #4]
  40998c:	f022 0203 	bic.w	r2, r2, #3
  409990:	e75a      	b.n	409848 <_malloc_r+0x308>
  409992:	f859 3908 	ldr.w	r3, [r9], #-8
  409996:	4599      	cmp	r9, r3
  409998:	f040 8082 	bne.w	409aa0 <_malloc_r+0x560>
  40999c:	f010 0f03 	tst.w	r0, #3
  4099a0:	f100 30ff 	add.w	r0, r0, #4294967295
  4099a4:	d1f5      	bne.n	409992 <_malloc_r+0x452>
  4099a6:	687b      	ldr	r3, [r7, #4]
  4099a8:	ea23 0304 	bic.w	r3, r3, r4
  4099ac:	607b      	str	r3, [r7, #4]
  4099ae:	0064      	lsls	r4, r4, #1
  4099b0:	429c      	cmp	r4, r3
  4099b2:	f63f aebd 	bhi.w	409730 <_malloc_r+0x1f0>
  4099b6:	2c00      	cmp	r4, #0
  4099b8:	f43f aeba 	beq.w	409730 <_malloc_r+0x1f0>
  4099bc:	421c      	tst	r4, r3
  4099be:	4640      	mov	r0, r8
  4099c0:	f47f ae35 	bne.w	40962e <_malloc_r+0xee>
  4099c4:	0064      	lsls	r4, r4, #1
  4099c6:	421c      	tst	r4, r3
  4099c8:	f100 0004 	add.w	r0, r0, #4
  4099cc:	d0fa      	beq.n	4099c4 <_malloc_r+0x484>
  4099ce:	e62e      	b.n	40962e <_malloc_r+0xee>
  4099d0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4099d4:	d818      	bhi.n	409a08 <_malloc_r+0x4c8>
  4099d6:	0be8      	lsrs	r0, r5, #15
  4099d8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4099dc:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4099e0:	3077      	adds	r0, #119	; 0x77
  4099e2:	e5cf      	b.n	409584 <_malloc_r+0x44>
  4099e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4099e8:	e6eb      	b.n	4097c2 <_malloc_r+0x282>
  4099ea:	2101      	movs	r1, #1
  4099ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4099f0:	1092      	asrs	r2, r2, #2
  4099f2:	fa01 f202 	lsl.w	r2, r1, r2
  4099f6:	431a      	orrs	r2, r3
  4099f8:	f8c8 2004 	str.w	r2, [r8, #4]
  4099fc:	4661      	mov	r1, ip
  4099fe:	e777      	b.n	4098f0 <_malloc_r+0x3b0>
  409a00:	2301      	movs	r3, #1
  409a02:	f8cb 3004 	str.w	r3, [fp, #4]
  409a06:	e725      	b.n	409854 <_malloc_r+0x314>
  409a08:	f240 5254 	movw	r2, #1364	; 0x554
  409a0c:	4293      	cmp	r3, r2
  409a0e:	d820      	bhi.n	409a52 <_malloc_r+0x512>
  409a10:	0ca8      	lsrs	r0, r5, #18
  409a12:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  409a16:	ea4f 034e 	mov.w	r3, lr, lsl #1
  409a1a:	307c      	adds	r0, #124	; 0x7c
  409a1c:	e5b2      	b.n	409584 <_malloc_r+0x44>
  409a1e:	3210      	adds	r2, #16
  409a20:	e6a4      	b.n	40976c <_malloc_r+0x22c>
  409a22:	2a54      	cmp	r2, #84	; 0x54
  409a24:	d826      	bhi.n	409a74 <_malloc_r+0x534>
  409a26:	0b1a      	lsrs	r2, r3, #12
  409a28:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  409a2c:	0049      	lsls	r1, r1, #1
  409a2e:	326e      	adds	r2, #110	; 0x6e
  409a30:	e748      	b.n	4098c4 <_malloc_r+0x384>
  409a32:	68bc      	ldr	r4, [r7, #8]
  409a34:	6862      	ldr	r2, [r4, #4]
  409a36:	f022 0203 	bic.w	r2, r2, #3
  409a3a:	e705      	b.n	409848 <_malloc_r+0x308>
  409a3c:	f3ca 000b 	ubfx	r0, sl, #0, #12
  409a40:	2800      	cmp	r0, #0
  409a42:	f47f aea8 	bne.w	409796 <_malloc_r+0x256>
  409a46:	4442      	add	r2, r8
  409a48:	68bb      	ldr	r3, [r7, #8]
  409a4a:	f042 0201 	orr.w	r2, r2, #1
  409a4e:	605a      	str	r2, [r3, #4]
  409a50:	e6ec      	b.n	40982c <_malloc_r+0x2ec>
  409a52:	23fe      	movs	r3, #254	; 0xfe
  409a54:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  409a58:	207e      	movs	r0, #126	; 0x7e
  409a5a:	e593      	b.n	409584 <_malloc_r+0x44>
  409a5c:	2201      	movs	r2, #1
  409a5e:	f04f 0900 	mov.w	r9, #0
  409a62:	e6c1      	b.n	4097e8 <_malloc_r+0x2a8>
  409a64:	f104 0108 	add.w	r1, r4, #8
  409a68:	4630      	mov	r0, r6
  409a6a:	f7ff fa4b 	bl	408f04 <_free_r>
  409a6e:	f8d9 1000 	ldr.w	r1, [r9]
  409a72:	e6db      	b.n	40982c <_malloc_r+0x2ec>
  409a74:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409a78:	d805      	bhi.n	409a86 <_malloc_r+0x546>
  409a7a:	0bda      	lsrs	r2, r3, #15
  409a7c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  409a80:	0049      	lsls	r1, r1, #1
  409a82:	3277      	adds	r2, #119	; 0x77
  409a84:	e71e      	b.n	4098c4 <_malloc_r+0x384>
  409a86:	f240 5154 	movw	r1, #1364	; 0x554
  409a8a:	428a      	cmp	r2, r1
  409a8c:	d805      	bhi.n	409a9a <_malloc_r+0x55a>
  409a8e:	0c9a      	lsrs	r2, r3, #18
  409a90:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  409a94:	0049      	lsls	r1, r1, #1
  409a96:	327c      	adds	r2, #124	; 0x7c
  409a98:	e714      	b.n	4098c4 <_malloc_r+0x384>
  409a9a:	21fe      	movs	r1, #254	; 0xfe
  409a9c:	227e      	movs	r2, #126	; 0x7e
  409a9e:	e711      	b.n	4098c4 <_malloc_r+0x384>
  409aa0:	687b      	ldr	r3, [r7, #4]
  409aa2:	e784      	b.n	4099ae <_malloc_r+0x46e>
  409aa4:	08e8      	lsrs	r0, r5, #3
  409aa6:	1c43      	adds	r3, r0, #1
  409aa8:	005b      	lsls	r3, r3, #1
  409aaa:	e5f8      	b.n	40969e <_malloc_r+0x15e>
  409aac:	204004d0 	.word	0x204004d0

00409ab0 <memchr>:
  409ab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409ab4:	2a10      	cmp	r2, #16
  409ab6:	db2b      	blt.n	409b10 <memchr+0x60>
  409ab8:	f010 0f07 	tst.w	r0, #7
  409abc:	d008      	beq.n	409ad0 <memchr+0x20>
  409abe:	f810 3b01 	ldrb.w	r3, [r0], #1
  409ac2:	3a01      	subs	r2, #1
  409ac4:	428b      	cmp	r3, r1
  409ac6:	d02d      	beq.n	409b24 <memchr+0x74>
  409ac8:	f010 0f07 	tst.w	r0, #7
  409acc:	b342      	cbz	r2, 409b20 <memchr+0x70>
  409ace:	d1f6      	bne.n	409abe <memchr+0xe>
  409ad0:	b4f0      	push	{r4, r5, r6, r7}
  409ad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409ad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  409ada:	f022 0407 	bic.w	r4, r2, #7
  409ade:	f07f 0700 	mvns.w	r7, #0
  409ae2:	2300      	movs	r3, #0
  409ae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409ae8:	3c08      	subs	r4, #8
  409aea:	ea85 0501 	eor.w	r5, r5, r1
  409aee:	ea86 0601 	eor.w	r6, r6, r1
  409af2:	fa85 f547 	uadd8	r5, r5, r7
  409af6:	faa3 f587 	sel	r5, r3, r7
  409afa:	fa86 f647 	uadd8	r6, r6, r7
  409afe:	faa5 f687 	sel	r6, r5, r7
  409b02:	b98e      	cbnz	r6, 409b28 <memchr+0x78>
  409b04:	d1ee      	bne.n	409ae4 <memchr+0x34>
  409b06:	bcf0      	pop	{r4, r5, r6, r7}
  409b08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409b0c:	f002 0207 	and.w	r2, r2, #7
  409b10:	b132      	cbz	r2, 409b20 <memchr+0x70>
  409b12:	f810 3b01 	ldrb.w	r3, [r0], #1
  409b16:	3a01      	subs	r2, #1
  409b18:	ea83 0301 	eor.w	r3, r3, r1
  409b1c:	b113      	cbz	r3, 409b24 <memchr+0x74>
  409b1e:	d1f8      	bne.n	409b12 <memchr+0x62>
  409b20:	2000      	movs	r0, #0
  409b22:	4770      	bx	lr
  409b24:	3801      	subs	r0, #1
  409b26:	4770      	bx	lr
  409b28:	2d00      	cmp	r5, #0
  409b2a:	bf06      	itte	eq
  409b2c:	4635      	moveq	r5, r6
  409b2e:	3803      	subeq	r0, #3
  409b30:	3807      	subne	r0, #7
  409b32:	f015 0f01 	tst.w	r5, #1
  409b36:	d107      	bne.n	409b48 <memchr+0x98>
  409b38:	3001      	adds	r0, #1
  409b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  409b3e:	bf02      	ittt	eq
  409b40:	3001      	addeq	r0, #1
  409b42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409b46:	3001      	addeq	r0, #1
  409b48:	bcf0      	pop	{r4, r5, r6, r7}
  409b4a:	3801      	subs	r0, #1
  409b4c:	4770      	bx	lr
  409b4e:	bf00      	nop

00409b50 <memcpy>:
  409b50:	4684      	mov	ip, r0
  409b52:	ea41 0300 	orr.w	r3, r1, r0
  409b56:	f013 0303 	ands.w	r3, r3, #3
  409b5a:	d16d      	bne.n	409c38 <memcpy+0xe8>
  409b5c:	3a40      	subs	r2, #64	; 0x40
  409b5e:	d341      	bcc.n	409be4 <memcpy+0x94>
  409b60:	f851 3b04 	ldr.w	r3, [r1], #4
  409b64:	f840 3b04 	str.w	r3, [r0], #4
  409b68:	f851 3b04 	ldr.w	r3, [r1], #4
  409b6c:	f840 3b04 	str.w	r3, [r0], #4
  409b70:	f851 3b04 	ldr.w	r3, [r1], #4
  409b74:	f840 3b04 	str.w	r3, [r0], #4
  409b78:	f851 3b04 	ldr.w	r3, [r1], #4
  409b7c:	f840 3b04 	str.w	r3, [r0], #4
  409b80:	f851 3b04 	ldr.w	r3, [r1], #4
  409b84:	f840 3b04 	str.w	r3, [r0], #4
  409b88:	f851 3b04 	ldr.w	r3, [r1], #4
  409b8c:	f840 3b04 	str.w	r3, [r0], #4
  409b90:	f851 3b04 	ldr.w	r3, [r1], #4
  409b94:	f840 3b04 	str.w	r3, [r0], #4
  409b98:	f851 3b04 	ldr.w	r3, [r1], #4
  409b9c:	f840 3b04 	str.w	r3, [r0], #4
  409ba0:	f851 3b04 	ldr.w	r3, [r1], #4
  409ba4:	f840 3b04 	str.w	r3, [r0], #4
  409ba8:	f851 3b04 	ldr.w	r3, [r1], #4
  409bac:	f840 3b04 	str.w	r3, [r0], #4
  409bb0:	f851 3b04 	ldr.w	r3, [r1], #4
  409bb4:	f840 3b04 	str.w	r3, [r0], #4
  409bb8:	f851 3b04 	ldr.w	r3, [r1], #4
  409bbc:	f840 3b04 	str.w	r3, [r0], #4
  409bc0:	f851 3b04 	ldr.w	r3, [r1], #4
  409bc4:	f840 3b04 	str.w	r3, [r0], #4
  409bc8:	f851 3b04 	ldr.w	r3, [r1], #4
  409bcc:	f840 3b04 	str.w	r3, [r0], #4
  409bd0:	f851 3b04 	ldr.w	r3, [r1], #4
  409bd4:	f840 3b04 	str.w	r3, [r0], #4
  409bd8:	f851 3b04 	ldr.w	r3, [r1], #4
  409bdc:	f840 3b04 	str.w	r3, [r0], #4
  409be0:	3a40      	subs	r2, #64	; 0x40
  409be2:	d2bd      	bcs.n	409b60 <memcpy+0x10>
  409be4:	3230      	adds	r2, #48	; 0x30
  409be6:	d311      	bcc.n	409c0c <memcpy+0xbc>
  409be8:	f851 3b04 	ldr.w	r3, [r1], #4
  409bec:	f840 3b04 	str.w	r3, [r0], #4
  409bf0:	f851 3b04 	ldr.w	r3, [r1], #4
  409bf4:	f840 3b04 	str.w	r3, [r0], #4
  409bf8:	f851 3b04 	ldr.w	r3, [r1], #4
  409bfc:	f840 3b04 	str.w	r3, [r0], #4
  409c00:	f851 3b04 	ldr.w	r3, [r1], #4
  409c04:	f840 3b04 	str.w	r3, [r0], #4
  409c08:	3a10      	subs	r2, #16
  409c0a:	d2ed      	bcs.n	409be8 <memcpy+0x98>
  409c0c:	320c      	adds	r2, #12
  409c0e:	d305      	bcc.n	409c1c <memcpy+0xcc>
  409c10:	f851 3b04 	ldr.w	r3, [r1], #4
  409c14:	f840 3b04 	str.w	r3, [r0], #4
  409c18:	3a04      	subs	r2, #4
  409c1a:	d2f9      	bcs.n	409c10 <memcpy+0xc0>
  409c1c:	3204      	adds	r2, #4
  409c1e:	d008      	beq.n	409c32 <memcpy+0xe2>
  409c20:	07d2      	lsls	r2, r2, #31
  409c22:	bf1c      	itt	ne
  409c24:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409c28:	f800 3b01 	strbne.w	r3, [r0], #1
  409c2c:	d301      	bcc.n	409c32 <memcpy+0xe2>
  409c2e:	880b      	ldrh	r3, [r1, #0]
  409c30:	8003      	strh	r3, [r0, #0]
  409c32:	4660      	mov	r0, ip
  409c34:	4770      	bx	lr
  409c36:	bf00      	nop
  409c38:	2a08      	cmp	r2, #8
  409c3a:	d313      	bcc.n	409c64 <memcpy+0x114>
  409c3c:	078b      	lsls	r3, r1, #30
  409c3e:	d08d      	beq.n	409b5c <memcpy+0xc>
  409c40:	f010 0303 	ands.w	r3, r0, #3
  409c44:	d08a      	beq.n	409b5c <memcpy+0xc>
  409c46:	f1c3 0304 	rsb	r3, r3, #4
  409c4a:	1ad2      	subs	r2, r2, r3
  409c4c:	07db      	lsls	r3, r3, #31
  409c4e:	bf1c      	itt	ne
  409c50:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409c54:	f800 3b01 	strbne.w	r3, [r0], #1
  409c58:	d380      	bcc.n	409b5c <memcpy+0xc>
  409c5a:	f831 3b02 	ldrh.w	r3, [r1], #2
  409c5e:	f820 3b02 	strh.w	r3, [r0], #2
  409c62:	e77b      	b.n	409b5c <memcpy+0xc>
  409c64:	3a04      	subs	r2, #4
  409c66:	d3d9      	bcc.n	409c1c <memcpy+0xcc>
  409c68:	3a01      	subs	r2, #1
  409c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
  409c6e:	f800 3b01 	strb.w	r3, [r0], #1
  409c72:	d2f9      	bcs.n	409c68 <memcpy+0x118>
  409c74:	780b      	ldrb	r3, [r1, #0]
  409c76:	7003      	strb	r3, [r0, #0]
  409c78:	784b      	ldrb	r3, [r1, #1]
  409c7a:	7043      	strb	r3, [r0, #1]
  409c7c:	788b      	ldrb	r3, [r1, #2]
  409c7e:	7083      	strb	r3, [r0, #2]
  409c80:	4660      	mov	r0, ip
  409c82:	4770      	bx	lr

00409c84 <memmove>:
  409c84:	4288      	cmp	r0, r1
  409c86:	b5f0      	push	{r4, r5, r6, r7, lr}
  409c88:	d90d      	bls.n	409ca6 <memmove+0x22>
  409c8a:	188b      	adds	r3, r1, r2
  409c8c:	4298      	cmp	r0, r3
  409c8e:	d20a      	bcs.n	409ca6 <memmove+0x22>
  409c90:	1881      	adds	r1, r0, r2
  409c92:	2a00      	cmp	r2, #0
  409c94:	d051      	beq.n	409d3a <memmove+0xb6>
  409c96:	1a9a      	subs	r2, r3, r2
  409c98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409c9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  409ca0:	4293      	cmp	r3, r2
  409ca2:	d1f9      	bne.n	409c98 <memmove+0x14>
  409ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409ca6:	2a0f      	cmp	r2, #15
  409ca8:	d948      	bls.n	409d3c <memmove+0xb8>
  409caa:	ea41 0300 	orr.w	r3, r1, r0
  409cae:	079b      	lsls	r3, r3, #30
  409cb0:	d146      	bne.n	409d40 <memmove+0xbc>
  409cb2:	f100 0410 	add.w	r4, r0, #16
  409cb6:	f101 0310 	add.w	r3, r1, #16
  409cba:	4615      	mov	r5, r2
  409cbc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  409cc0:	f844 6c10 	str.w	r6, [r4, #-16]
  409cc4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409cc8:	f844 6c0c 	str.w	r6, [r4, #-12]
  409ccc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  409cd0:	f844 6c08 	str.w	r6, [r4, #-8]
  409cd4:	3d10      	subs	r5, #16
  409cd6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409cda:	f844 6c04 	str.w	r6, [r4, #-4]
  409cde:	2d0f      	cmp	r5, #15
  409ce0:	f103 0310 	add.w	r3, r3, #16
  409ce4:	f104 0410 	add.w	r4, r4, #16
  409ce8:	d8e8      	bhi.n	409cbc <memmove+0x38>
  409cea:	f1a2 0310 	sub.w	r3, r2, #16
  409cee:	f023 030f 	bic.w	r3, r3, #15
  409cf2:	f002 0e0f 	and.w	lr, r2, #15
  409cf6:	3310      	adds	r3, #16
  409cf8:	f1be 0f03 	cmp.w	lr, #3
  409cfc:	4419      	add	r1, r3
  409cfe:	4403      	add	r3, r0
  409d00:	d921      	bls.n	409d46 <memmove+0xc2>
  409d02:	1f1e      	subs	r6, r3, #4
  409d04:	460d      	mov	r5, r1
  409d06:	4674      	mov	r4, lr
  409d08:	3c04      	subs	r4, #4
  409d0a:	f855 7b04 	ldr.w	r7, [r5], #4
  409d0e:	f846 7f04 	str.w	r7, [r6, #4]!
  409d12:	2c03      	cmp	r4, #3
  409d14:	d8f8      	bhi.n	409d08 <memmove+0x84>
  409d16:	f1ae 0404 	sub.w	r4, lr, #4
  409d1a:	f024 0403 	bic.w	r4, r4, #3
  409d1e:	3404      	adds	r4, #4
  409d20:	4423      	add	r3, r4
  409d22:	4421      	add	r1, r4
  409d24:	f002 0203 	and.w	r2, r2, #3
  409d28:	b162      	cbz	r2, 409d44 <memmove+0xc0>
  409d2a:	3b01      	subs	r3, #1
  409d2c:	440a      	add	r2, r1
  409d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
  409d32:	f803 4f01 	strb.w	r4, [r3, #1]!
  409d36:	428a      	cmp	r2, r1
  409d38:	d1f9      	bne.n	409d2e <memmove+0xaa>
  409d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d3c:	4603      	mov	r3, r0
  409d3e:	e7f3      	b.n	409d28 <memmove+0xa4>
  409d40:	4603      	mov	r3, r0
  409d42:	e7f2      	b.n	409d2a <memmove+0xa6>
  409d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d46:	4672      	mov	r2, lr
  409d48:	e7ee      	b.n	409d28 <memmove+0xa4>
  409d4a:	bf00      	nop

00409d4c <__malloc_lock>:
  409d4c:	4770      	bx	lr
  409d4e:	bf00      	nop

00409d50 <__malloc_unlock>:
  409d50:	4770      	bx	lr
  409d52:	bf00      	nop

00409d54 <_Balloc>:
  409d54:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409d56:	b570      	push	{r4, r5, r6, lr}
  409d58:	4605      	mov	r5, r0
  409d5a:	460c      	mov	r4, r1
  409d5c:	b14b      	cbz	r3, 409d72 <_Balloc+0x1e>
  409d5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409d62:	b180      	cbz	r0, 409d86 <_Balloc+0x32>
  409d64:	6802      	ldr	r2, [r0, #0]
  409d66:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  409d6a:	2300      	movs	r3, #0
  409d6c:	6103      	str	r3, [r0, #16]
  409d6e:	60c3      	str	r3, [r0, #12]
  409d70:	bd70      	pop	{r4, r5, r6, pc}
  409d72:	2221      	movs	r2, #33	; 0x21
  409d74:	2104      	movs	r1, #4
  409d76:	f000 feb7 	bl	40aae8 <_calloc_r>
  409d7a:	64e8      	str	r0, [r5, #76]	; 0x4c
  409d7c:	4603      	mov	r3, r0
  409d7e:	2800      	cmp	r0, #0
  409d80:	d1ed      	bne.n	409d5e <_Balloc+0xa>
  409d82:	2000      	movs	r0, #0
  409d84:	bd70      	pop	{r4, r5, r6, pc}
  409d86:	2101      	movs	r1, #1
  409d88:	fa01 f604 	lsl.w	r6, r1, r4
  409d8c:	1d72      	adds	r2, r6, #5
  409d8e:	4628      	mov	r0, r5
  409d90:	0092      	lsls	r2, r2, #2
  409d92:	f000 fea9 	bl	40aae8 <_calloc_r>
  409d96:	2800      	cmp	r0, #0
  409d98:	d0f3      	beq.n	409d82 <_Balloc+0x2e>
  409d9a:	6044      	str	r4, [r0, #4]
  409d9c:	6086      	str	r6, [r0, #8]
  409d9e:	e7e4      	b.n	409d6a <_Balloc+0x16>

00409da0 <_Bfree>:
  409da0:	b131      	cbz	r1, 409db0 <_Bfree+0x10>
  409da2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409da4:	684a      	ldr	r2, [r1, #4]
  409da6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  409daa:	6008      	str	r0, [r1, #0]
  409dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409db0:	4770      	bx	lr
  409db2:	bf00      	nop

00409db4 <__multadd>:
  409db4:	b5f0      	push	{r4, r5, r6, r7, lr}
  409db6:	690c      	ldr	r4, [r1, #16]
  409db8:	b083      	sub	sp, #12
  409dba:	460d      	mov	r5, r1
  409dbc:	4606      	mov	r6, r0
  409dbe:	f101 0e14 	add.w	lr, r1, #20
  409dc2:	2700      	movs	r7, #0
  409dc4:	f8de 0000 	ldr.w	r0, [lr]
  409dc8:	b281      	uxth	r1, r0
  409dca:	fb02 3101 	mla	r1, r2, r1, r3
  409dce:	0c0b      	lsrs	r3, r1, #16
  409dd0:	0c00      	lsrs	r0, r0, #16
  409dd2:	fb02 3300 	mla	r3, r2, r0, r3
  409dd6:	b289      	uxth	r1, r1
  409dd8:	3701      	adds	r7, #1
  409dda:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  409dde:	42bc      	cmp	r4, r7
  409de0:	f84e 1b04 	str.w	r1, [lr], #4
  409de4:	ea4f 4313 	mov.w	r3, r3, lsr #16
  409de8:	dcec      	bgt.n	409dc4 <__multadd+0x10>
  409dea:	b13b      	cbz	r3, 409dfc <__multadd+0x48>
  409dec:	68aa      	ldr	r2, [r5, #8]
  409dee:	4294      	cmp	r4, r2
  409df0:	da07      	bge.n	409e02 <__multadd+0x4e>
  409df2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  409df6:	3401      	adds	r4, #1
  409df8:	6153      	str	r3, [r2, #20]
  409dfa:	612c      	str	r4, [r5, #16]
  409dfc:	4628      	mov	r0, r5
  409dfe:	b003      	add	sp, #12
  409e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409e02:	6869      	ldr	r1, [r5, #4]
  409e04:	9301      	str	r3, [sp, #4]
  409e06:	3101      	adds	r1, #1
  409e08:	4630      	mov	r0, r6
  409e0a:	f7ff ffa3 	bl	409d54 <_Balloc>
  409e0e:	692a      	ldr	r2, [r5, #16]
  409e10:	3202      	adds	r2, #2
  409e12:	f105 010c 	add.w	r1, r5, #12
  409e16:	4607      	mov	r7, r0
  409e18:	0092      	lsls	r2, r2, #2
  409e1a:	300c      	adds	r0, #12
  409e1c:	f7ff fe98 	bl	409b50 <memcpy>
  409e20:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409e22:	6869      	ldr	r1, [r5, #4]
  409e24:	9b01      	ldr	r3, [sp, #4]
  409e26:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  409e2a:	6028      	str	r0, [r5, #0]
  409e2c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409e30:	463d      	mov	r5, r7
  409e32:	e7de      	b.n	409df2 <__multadd+0x3e>

00409e34 <__hi0bits>:
  409e34:	0c03      	lsrs	r3, r0, #16
  409e36:	041b      	lsls	r3, r3, #16
  409e38:	b9b3      	cbnz	r3, 409e68 <__hi0bits+0x34>
  409e3a:	0400      	lsls	r0, r0, #16
  409e3c:	2310      	movs	r3, #16
  409e3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  409e42:	bf04      	itt	eq
  409e44:	0200      	lsleq	r0, r0, #8
  409e46:	3308      	addeq	r3, #8
  409e48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  409e4c:	bf04      	itt	eq
  409e4e:	0100      	lsleq	r0, r0, #4
  409e50:	3304      	addeq	r3, #4
  409e52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  409e56:	bf04      	itt	eq
  409e58:	0080      	lsleq	r0, r0, #2
  409e5a:	3302      	addeq	r3, #2
  409e5c:	2800      	cmp	r0, #0
  409e5e:	db07      	blt.n	409e70 <__hi0bits+0x3c>
  409e60:	0042      	lsls	r2, r0, #1
  409e62:	d403      	bmi.n	409e6c <__hi0bits+0x38>
  409e64:	2020      	movs	r0, #32
  409e66:	4770      	bx	lr
  409e68:	2300      	movs	r3, #0
  409e6a:	e7e8      	b.n	409e3e <__hi0bits+0xa>
  409e6c:	1c58      	adds	r0, r3, #1
  409e6e:	4770      	bx	lr
  409e70:	4618      	mov	r0, r3
  409e72:	4770      	bx	lr

00409e74 <__lo0bits>:
  409e74:	6803      	ldr	r3, [r0, #0]
  409e76:	f013 0207 	ands.w	r2, r3, #7
  409e7a:	d007      	beq.n	409e8c <__lo0bits+0x18>
  409e7c:	07d9      	lsls	r1, r3, #31
  409e7e:	d420      	bmi.n	409ec2 <__lo0bits+0x4e>
  409e80:	079a      	lsls	r2, r3, #30
  409e82:	d420      	bmi.n	409ec6 <__lo0bits+0x52>
  409e84:	089b      	lsrs	r3, r3, #2
  409e86:	6003      	str	r3, [r0, #0]
  409e88:	2002      	movs	r0, #2
  409e8a:	4770      	bx	lr
  409e8c:	b299      	uxth	r1, r3
  409e8e:	b909      	cbnz	r1, 409e94 <__lo0bits+0x20>
  409e90:	0c1b      	lsrs	r3, r3, #16
  409e92:	2210      	movs	r2, #16
  409e94:	f013 0fff 	tst.w	r3, #255	; 0xff
  409e98:	bf04      	itt	eq
  409e9a:	0a1b      	lsreq	r3, r3, #8
  409e9c:	3208      	addeq	r2, #8
  409e9e:	0719      	lsls	r1, r3, #28
  409ea0:	bf04      	itt	eq
  409ea2:	091b      	lsreq	r3, r3, #4
  409ea4:	3204      	addeq	r2, #4
  409ea6:	0799      	lsls	r1, r3, #30
  409ea8:	bf04      	itt	eq
  409eaa:	089b      	lsreq	r3, r3, #2
  409eac:	3202      	addeq	r2, #2
  409eae:	07d9      	lsls	r1, r3, #31
  409eb0:	d404      	bmi.n	409ebc <__lo0bits+0x48>
  409eb2:	085b      	lsrs	r3, r3, #1
  409eb4:	d101      	bne.n	409eba <__lo0bits+0x46>
  409eb6:	2020      	movs	r0, #32
  409eb8:	4770      	bx	lr
  409eba:	3201      	adds	r2, #1
  409ebc:	6003      	str	r3, [r0, #0]
  409ebe:	4610      	mov	r0, r2
  409ec0:	4770      	bx	lr
  409ec2:	2000      	movs	r0, #0
  409ec4:	4770      	bx	lr
  409ec6:	085b      	lsrs	r3, r3, #1
  409ec8:	6003      	str	r3, [r0, #0]
  409eca:	2001      	movs	r0, #1
  409ecc:	4770      	bx	lr
  409ece:	bf00      	nop

00409ed0 <__i2b>:
  409ed0:	b510      	push	{r4, lr}
  409ed2:	460c      	mov	r4, r1
  409ed4:	2101      	movs	r1, #1
  409ed6:	f7ff ff3d 	bl	409d54 <_Balloc>
  409eda:	2201      	movs	r2, #1
  409edc:	6144      	str	r4, [r0, #20]
  409ede:	6102      	str	r2, [r0, #16]
  409ee0:	bd10      	pop	{r4, pc}
  409ee2:	bf00      	nop

00409ee4 <__multiply>:
  409ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409ee8:	690d      	ldr	r5, [r1, #16]
  409eea:	6917      	ldr	r7, [r2, #16]
  409eec:	42bd      	cmp	r5, r7
  409eee:	b083      	sub	sp, #12
  409ef0:	460c      	mov	r4, r1
  409ef2:	4616      	mov	r6, r2
  409ef4:	da04      	bge.n	409f00 <__multiply+0x1c>
  409ef6:	462a      	mov	r2, r5
  409ef8:	4634      	mov	r4, r6
  409efa:	463d      	mov	r5, r7
  409efc:	460e      	mov	r6, r1
  409efe:	4617      	mov	r7, r2
  409f00:	68a3      	ldr	r3, [r4, #8]
  409f02:	6861      	ldr	r1, [r4, #4]
  409f04:	eb05 0807 	add.w	r8, r5, r7
  409f08:	4598      	cmp	r8, r3
  409f0a:	bfc8      	it	gt
  409f0c:	3101      	addgt	r1, #1
  409f0e:	f7ff ff21 	bl	409d54 <_Balloc>
  409f12:	f100 0c14 	add.w	ip, r0, #20
  409f16:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  409f1a:	45cc      	cmp	ip, r9
  409f1c:	9000      	str	r0, [sp, #0]
  409f1e:	d205      	bcs.n	409f2c <__multiply+0x48>
  409f20:	4663      	mov	r3, ip
  409f22:	2100      	movs	r1, #0
  409f24:	f843 1b04 	str.w	r1, [r3], #4
  409f28:	4599      	cmp	r9, r3
  409f2a:	d8fb      	bhi.n	409f24 <__multiply+0x40>
  409f2c:	f106 0214 	add.w	r2, r6, #20
  409f30:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  409f34:	f104 0314 	add.w	r3, r4, #20
  409f38:	4552      	cmp	r2, sl
  409f3a:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  409f3e:	d254      	bcs.n	409fea <__multiply+0x106>
  409f40:	f8cd 9004 	str.w	r9, [sp, #4]
  409f44:	4699      	mov	r9, r3
  409f46:	f852 3b04 	ldr.w	r3, [r2], #4
  409f4a:	fa1f fb83 	uxth.w	fp, r3
  409f4e:	f1bb 0f00 	cmp.w	fp, #0
  409f52:	d020      	beq.n	409f96 <__multiply+0xb2>
  409f54:	2000      	movs	r0, #0
  409f56:	464f      	mov	r7, r9
  409f58:	4666      	mov	r6, ip
  409f5a:	4605      	mov	r5, r0
  409f5c:	e000      	b.n	409f60 <__multiply+0x7c>
  409f5e:	461e      	mov	r6, r3
  409f60:	f857 4b04 	ldr.w	r4, [r7], #4
  409f64:	6830      	ldr	r0, [r6, #0]
  409f66:	b2a1      	uxth	r1, r4
  409f68:	b283      	uxth	r3, r0
  409f6a:	fb0b 3101 	mla	r1, fp, r1, r3
  409f6e:	0c24      	lsrs	r4, r4, #16
  409f70:	0c00      	lsrs	r0, r0, #16
  409f72:	194b      	adds	r3, r1, r5
  409f74:	fb0b 0004 	mla	r0, fp, r4, r0
  409f78:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  409f7c:	b299      	uxth	r1, r3
  409f7e:	4633      	mov	r3, r6
  409f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  409f84:	45be      	cmp	lr, r7
  409f86:	ea4f 4510 	mov.w	r5, r0, lsr #16
  409f8a:	f843 1b04 	str.w	r1, [r3], #4
  409f8e:	d8e6      	bhi.n	409f5e <__multiply+0x7a>
  409f90:	6075      	str	r5, [r6, #4]
  409f92:	f852 3c04 	ldr.w	r3, [r2, #-4]
  409f96:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  409f9a:	d020      	beq.n	409fde <__multiply+0xfa>
  409f9c:	f8dc 3000 	ldr.w	r3, [ip]
  409fa0:	4667      	mov	r7, ip
  409fa2:	4618      	mov	r0, r3
  409fa4:	464d      	mov	r5, r9
  409fa6:	2100      	movs	r1, #0
  409fa8:	e000      	b.n	409fac <__multiply+0xc8>
  409faa:	4637      	mov	r7, r6
  409fac:	882c      	ldrh	r4, [r5, #0]
  409fae:	0c00      	lsrs	r0, r0, #16
  409fb0:	fb0b 0004 	mla	r0, fp, r4, r0
  409fb4:	4401      	add	r1, r0
  409fb6:	b29c      	uxth	r4, r3
  409fb8:	463e      	mov	r6, r7
  409fba:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  409fbe:	f846 3b04 	str.w	r3, [r6], #4
  409fc2:	6878      	ldr	r0, [r7, #4]
  409fc4:	f855 4b04 	ldr.w	r4, [r5], #4
  409fc8:	b283      	uxth	r3, r0
  409fca:	0c24      	lsrs	r4, r4, #16
  409fcc:	fb0b 3404 	mla	r4, fp, r4, r3
  409fd0:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  409fd4:	45ae      	cmp	lr, r5
  409fd6:	ea4f 4113 	mov.w	r1, r3, lsr #16
  409fda:	d8e6      	bhi.n	409faa <__multiply+0xc6>
  409fdc:	607b      	str	r3, [r7, #4]
  409fde:	4592      	cmp	sl, r2
  409fe0:	f10c 0c04 	add.w	ip, ip, #4
  409fe4:	d8af      	bhi.n	409f46 <__multiply+0x62>
  409fe6:	f8dd 9004 	ldr.w	r9, [sp, #4]
  409fea:	f1b8 0f00 	cmp.w	r8, #0
  409fee:	dd0b      	ble.n	40a008 <__multiply+0x124>
  409ff0:	f859 3c04 	ldr.w	r3, [r9, #-4]
  409ff4:	f1a9 0904 	sub.w	r9, r9, #4
  409ff8:	b11b      	cbz	r3, 40a002 <__multiply+0x11e>
  409ffa:	e005      	b.n	40a008 <__multiply+0x124>
  409ffc:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40a000:	b913      	cbnz	r3, 40a008 <__multiply+0x124>
  40a002:	f1b8 0801 	subs.w	r8, r8, #1
  40a006:	d1f9      	bne.n	409ffc <__multiply+0x118>
  40a008:	9800      	ldr	r0, [sp, #0]
  40a00a:	f8c0 8010 	str.w	r8, [r0, #16]
  40a00e:	b003      	add	sp, #12
  40a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a014 <__pow5mult>:
  40a014:	f012 0303 	ands.w	r3, r2, #3
  40a018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a01c:	4614      	mov	r4, r2
  40a01e:	4607      	mov	r7, r0
  40a020:	d12e      	bne.n	40a080 <__pow5mult+0x6c>
  40a022:	460e      	mov	r6, r1
  40a024:	10a4      	asrs	r4, r4, #2
  40a026:	d01c      	beq.n	40a062 <__pow5mult+0x4e>
  40a028:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40a02a:	b395      	cbz	r5, 40a092 <__pow5mult+0x7e>
  40a02c:	07e3      	lsls	r3, r4, #31
  40a02e:	f04f 0800 	mov.w	r8, #0
  40a032:	d406      	bmi.n	40a042 <__pow5mult+0x2e>
  40a034:	1064      	asrs	r4, r4, #1
  40a036:	d014      	beq.n	40a062 <__pow5mult+0x4e>
  40a038:	6828      	ldr	r0, [r5, #0]
  40a03a:	b1a8      	cbz	r0, 40a068 <__pow5mult+0x54>
  40a03c:	4605      	mov	r5, r0
  40a03e:	07e3      	lsls	r3, r4, #31
  40a040:	d5f8      	bpl.n	40a034 <__pow5mult+0x20>
  40a042:	462a      	mov	r2, r5
  40a044:	4631      	mov	r1, r6
  40a046:	4638      	mov	r0, r7
  40a048:	f7ff ff4c 	bl	409ee4 <__multiply>
  40a04c:	b1b6      	cbz	r6, 40a07c <__pow5mult+0x68>
  40a04e:	6872      	ldr	r2, [r6, #4]
  40a050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40a052:	1064      	asrs	r4, r4, #1
  40a054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a058:	6031      	str	r1, [r6, #0]
  40a05a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40a05e:	4606      	mov	r6, r0
  40a060:	d1ea      	bne.n	40a038 <__pow5mult+0x24>
  40a062:	4630      	mov	r0, r6
  40a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a068:	462a      	mov	r2, r5
  40a06a:	4629      	mov	r1, r5
  40a06c:	4638      	mov	r0, r7
  40a06e:	f7ff ff39 	bl	409ee4 <__multiply>
  40a072:	6028      	str	r0, [r5, #0]
  40a074:	f8c0 8000 	str.w	r8, [r0]
  40a078:	4605      	mov	r5, r0
  40a07a:	e7e0      	b.n	40a03e <__pow5mult+0x2a>
  40a07c:	4606      	mov	r6, r0
  40a07e:	e7d9      	b.n	40a034 <__pow5mult+0x20>
  40a080:	1e5a      	subs	r2, r3, #1
  40a082:	4d0b      	ldr	r5, [pc, #44]	; (40a0b0 <__pow5mult+0x9c>)
  40a084:	2300      	movs	r3, #0
  40a086:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40a08a:	f7ff fe93 	bl	409db4 <__multadd>
  40a08e:	4606      	mov	r6, r0
  40a090:	e7c8      	b.n	40a024 <__pow5mult+0x10>
  40a092:	2101      	movs	r1, #1
  40a094:	4638      	mov	r0, r7
  40a096:	f7ff fe5d 	bl	409d54 <_Balloc>
  40a09a:	f240 2171 	movw	r1, #625	; 0x271
  40a09e:	2201      	movs	r2, #1
  40a0a0:	2300      	movs	r3, #0
  40a0a2:	6141      	str	r1, [r0, #20]
  40a0a4:	6102      	str	r2, [r0, #16]
  40a0a6:	4605      	mov	r5, r0
  40a0a8:	64b8      	str	r0, [r7, #72]	; 0x48
  40a0aa:	6003      	str	r3, [r0, #0]
  40a0ac:	e7be      	b.n	40a02c <__pow5mult+0x18>
  40a0ae:	bf00      	nop
  40a0b0:	0040cd08 	.word	0x0040cd08

0040a0b4 <__lshift>:
  40a0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a0b8:	4691      	mov	r9, r2
  40a0ba:	690a      	ldr	r2, [r1, #16]
  40a0bc:	688b      	ldr	r3, [r1, #8]
  40a0be:	ea4f 1469 	mov.w	r4, r9, asr #5
  40a0c2:	eb04 0802 	add.w	r8, r4, r2
  40a0c6:	f108 0501 	add.w	r5, r8, #1
  40a0ca:	429d      	cmp	r5, r3
  40a0cc:	460e      	mov	r6, r1
  40a0ce:	4682      	mov	sl, r0
  40a0d0:	6849      	ldr	r1, [r1, #4]
  40a0d2:	dd04      	ble.n	40a0de <__lshift+0x2a>
  40a0d4:	005b      	lsls	r3, r3, #1
  40a0d6:	429d      	cmp	r5, r3
  40a0d8:	f101 0101 	add.w	r1, r1, #1
  40a0dc:	dcfa      	bgt.n	40a0d4 <__lshift+0x20>
  40a0de:	4650      	mov	r0, sl
  40a0e0:	f7ff fe38 	bl	409d54 <_Balloc>
  40a0e4:	2c00      	cmp	r4, #0
  40a0e6:	f100 0214 	add.w	r2, r0, #20
  40a0ea:	dd38      	ble.n	40a15e <__lshift+0xaa>
  40a0ec:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40a0f0:	2100      	movs	r1, #0
  40a0f2:	f842 1b04 	str.w	r1, [r2], #4
  40a0f6:	4293      	cmp	r3, r2
  40a0f8:	d1fb      	bne.n	40a0f2 <__lshift+0x3e>
  40a0fa:	6934      	ldr	r4, [r6, #16]
  40a0fc:	f106 0114 	add.w	r1, r6, #20
  40a100:	f019 091f 	ands.w	r9, r9, #31
  40a104:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40a108:	d021      	beq.n	40a14e <__lshift+0x9a>
  40a10a:	f1c9 0220 	rsb	r2, r9, #32
  40a10e:	2400      	movs	r4, #0
  40a110:	680f      	ldr	r7, [r1, #0]
  40a112:	fa07 fc09 	lsl.w	ip, r7, r9
  40a116:	ea4c 0404 	orr.w	r4, ip, r4
  40a11a:	469c      	mov	ip, r3
  40a11c:	f843 4b04 	str.w	r4, [r3], #4
  40a120:	f851 4b04 	ldr.w	r4, [r1], #4
  40a124:	458e      	cmp	lr, r1
  40a126:	fa24 f402 	lsr.w	r4, r4, r2
  40a12a:	d8f1      	bhi.n	40a110 <__lshift+0x5c>
  40a12c:	f8cc 4004 	str.w	r4, [ip, #4]
  40a130:	b10c      	cbz	r4, 40a136 <__lshift+0x82>
  40a132:	f108 0502 	add.w	r5, r8, #2
  40a136:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  40a13a:	6872      	ldr	r2, [r6, #4]
  40a13c:	3d01      	subs	r5, #1
  40a13e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40a142:	6105      	str	r5, [r0, #16]
  40a144:	6031      	str	r1, [r6, #0]
  40a146:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40a14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a14e:	3b04      	subs	r3, #4
  40a150:	f851 2b04 	ldr.w	r2, [r1], #4
  40a154:	f843 2f04 	str.w	r2, [r3, #4]!
  40a158:	458e      	cmp	lr, r1
  40a15a:	d8f9      	bhi.n	40a150 <__lshift+0x9c>
  40a15c:	e7eb      	b.n	40a136 <__lshift+0x82>
  40a15e:	4613      	mov	r3, r2
  40a160:	e7cb      	b.n	40a0fa <__lshift+0x46>
  40a162:	bf00      	nop

0040a164 <__mcmp>:
  40a164:	6902      	ldr	r2, [r0, #16]
  40a166:	690b      	ldr	r3, [r1, #16]
  40a168:	1ad2      	subs	r2, r2, r3
  40a16a:	d112      	bne.n	40a192 <__mcmp+0x2e>
  40a16c:	009b      	lsls	r3, r3, #2
  40a16e:	3014      	adds	r0, #20
  40a170:	3114      	adds	r1, #20
  40a172:	4419      	add	r1, r3
  40a174:	b410      	push	{r4}
  40a176:	4403      	add	r3, r0
  40a178:	e001      	b.n	40a17e <__mcmp+0x1a>
  40a17a:	4298      	cmp	r0, r3
  40a17c:	d20b      	bcs.n	40a196 <__mcmp+0x32>
  40a17e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40a182:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40a186:	4294      	cmp	r4, r2
  40a188:	d0f7      	beq.n	40a17a <__mcmp+0x16>
  40a18a:	d307      	bcc.n	40a19c <__mcmp+0x38>
  40a18c:	2001      	movs	r0, #1
  40a18e:	bc10      	pop	{r4}
  40a190:	4770      	bx	lr
  40a192:	4610      	mov	r0, r2
  40a194:	4770      	bx	lr
  40a196:	2000      	movs	r0, #0
  40a198:	bc10      	pop	{r4}
  40a19a:	4770      	bx	lr
  40a19c:	f04f 30ff 	mov.w	r0, #4294967295
  40a1a0:	e7f5      	b.n	40a18e <__mcmp+0x2a>
  40a1a2:	bf00      	nop

0040a1a4 <__mdiff>:
  40a1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a1a8:	690b      	ldr	r3, [r1, #16]
  40a1aa:	460f      	mov	r7, r1
  40a1ac:	6911      	ldr	r1, [r2, #16]
  40a1ae:	1a5b      	subs	r3, r3, r1
  40a1b0:	2b00      	cmp	r3, #0
  40a1b2:	4690      	mov	r8, r2
  40a1b4:	d117      	bne.n	40a1e6 <__mdiff+0x42>
  40a1b6:	0089      	lsls	r1, r1, #2
  40a1b8:	f107 0214 	add.w	r2, r7, #20
  40a1bc:	f108 0514 	add.w	r5, r8, #20
  40a1c0:	1853      	adds	r3, r2, r1
  40a1c2:	4429      	add	r1, r5
  40a1c4:	e001      	b.n	40a1ca <__mdiff+0x26>
  40a1c6:	429a      	cmp	r2, r3
  40a1c8:	d25e      	bcs.n	40a288 <__mdiff+0xe4>
  40a1ca:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40a1ce:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40a1d2:	42a6      	cmp	r6, r4
  40a1d4:	d0f7      	beq.n	40a1c6 <__mdiff+0x22>
  40a1d6:	d260      	bcs.n	40a29a <__mdiff+0xf6>
  40a1d8:	463b      	mov	r3, r7
  40a1da:	4614      	mov	r4, r2
  40a1dc:	4647      	mov	r7, r8
  40a1de:	f04f 0901 	mov.w	r9, #1
  40a1e2:	4698      	mov	r8, r3
  40a1e4:	e006      	b.n	40a1f4 <__mdiff+0x50>
  40a1e6:	db5d      	blt.n	40a2a4 <__mdiff+0x100>
  40a1e8:	f107 0514 	add.w	r5, r7, #20
  40a1ec:	f102 0414 	add.w	r4, r2, #20
  40a1f0:	f04f 0900 	mov.w	r9, #0
  40a1f4:	6879      	ldr	r1, [r7, #4]
  40a1f6:	f7ff fdad 	bl	409d54 <_Balloc>
  40a1fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40a1fe:	693e      	ldr	r6, [r7, #16]
  40a200:	f8c0 900c 	str.w	r9, [r0, #12]
  40a204:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40a208:	46a6      	mov	lr, r4
  40a20a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40a20e:	f100 0414 	add.w	r4, r0, #20
  40a212:	2300      	movs	r3, #0
  40a214:	f85e 1b04 	ldr.w	r1, [lr], #4
  40a218:	f855 8b04 	ldr.w	r8, [r5], #4
  40a21c:	b28a      	uxth	r2, r1
  40a21e:	fa13 f388 	uxtah	r3, r3, r8
  40a222:	0c09      	lsrs	r1, r1, #16
  40a224:	1a9a      	subs	r2, r3, r2
  40a226:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40a22a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40a22e:	b292      	uxth	r2, r2
  40a230:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40a234:	45f4      	cmp	ip, lr
  40a236:	f844 2b04 	str.w	r2, [r4], #4
  40a23a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a23e:	d8e9      	bhi.n	40a214 <__mdiff+0x70>
  40a240:	42af      	cmp	r7, r5
  40a242:	d917      	bls.n	40a274 <__mdiff+0xd0>
  40a244:	46a4      	mov	ip, r4
  40a246:	4629      	mov	r1, r5
  40a248:	f851 eb04 	ldr.w	lr, [r1], #4
  40a24c:	fa13 f28e 	uxtah	r2, r3, lr
  40a250:	1413      	asrs	r3, r2, #16
  40a252:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40a256:	b292      	uxth	r2, r2
  40a258:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40a25c:	428f      	cmp	r7, r1
  40a25e:	f84c 2b04 	str.w	r2, [ip], #4
  40a262:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a266:	d8ef      	bhi.n	40a248 <__mdiff+0xa4>
  40a268:	43ed      	mvns	r5, r5
  40a26a:	443d      	add	r5, r7
  40a26c:	f025 0503 	bic.w	r5, r5, #3
  40a270:	3504      	adds	r5, #4
  40a272:	442c      	add	r4, r5
  40a274:	3c04      	subs	r4, #4
  40a276:	b922      	cbnz	r2, 40a282 <__mdiff+0xde>
  40a278:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40a27c:	3e01      	subs	r6, #1
  40a27e:	2b00      	cmp	r3, #0
  40a280:	d0fa      	beq.n	40a278 <__mdiff+0xd4>
  40a282:	6106      	str	r6, [r0, #16]
  40a284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a288:	2100      	movs	r1, #0
  40a28a:	f7ff fd63 	bl	409d54 <_Balloc>
  40a28e:	2201      	movs	r2, #1
  40a290:	2300      	movs	r3, #0
  40a292:	6102      	str	r2, [r0, #16]
  40a294:	6143      	str	r3, [r0, #20]
  40a296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a29a:	462c      	mov	r4, r5
  40a29c:	f04f 0900 	mov.w	r9, #0
  40a2a0:	4615      	mov	r5, r2
  40a2a2:	e7a7      	b.n	40a1f4 <__mdiff+0x50>
  40a2a4:	463b      	mov	r3, r7
  40a2a6:	f107 0414 	add.w	r4, r7, #20
  40a2aa:	f108 0514 	add.w	r5, r8, #20
  40a2ae:	4647      	mov	r7, r8
  40a2b0:	f04f 0901 	mov.w	r9, #1
  40a2b4:	4698      	mov	r8, r3
  40a2b6:	e79d      	b.n	40a1f4 <__mdiff+0x50>

0040a2b8 <__d2b>:
  40a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a2bc:	b082      	sub	sp, #8
  40a2be:	2101      	movs	r1, #1
  40a2c0:	461c      	mov	r4, r3
  40a2c2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40a2c6:	4615      	mov	r5, r2
  40a2c8:	9e08      	ldr	r6, [sp, #32]
  40a2ca:	f7ff fd43 	bl	409d54 <_Balloc>
  40a2ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40a2d2:	4680      	mov	r8, r0
  40a2d4:	b10f      	cbz	r7, 40a2da <__d2b+0x22>
  40a2d6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40a2da:	9401      	str	r4, [sp, #4]
  40a2dc:	b31d      	cbz	r5, 40a326 <__d2b+0x6e>
  40a2de:	a802      	add	r0, sp, #8
  40a2e0:	f840 5d08 	str.w	r5, [r0, #-8]!
  40a2e4:	f7ff fdc6 	bl	409e74 <__lo0bits>
  40a2e8:	2800      	cmp	r0, #0
  40a2ea:	d134      	bne.n	40a356 <__d2b+0x9e>
  40a2ec:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40a2f0:	f8c8 2014 	str.w	r2, [r8, #20]
  40a2f4:	2b00      	cmp	r3, #0
  40a2f6:	bf0c      	ite	eq
  40a2f8:	2101      	moveq	r1, #1
  40a2fa:	2102      	movne	r1, #2
  40a2fc:	f8c8 3018 	str.w	r3, [r8, #24]
  40a300:	f8c8 1010 	str.w	r1, [r8, #16]
  40a304:	b9df      	cbnz	r7, 40a33e <__d2b+0x86>
  40a306:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40a30a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40a30e:	6030      	str	r0, [r6, #0]
  40a310:	6918      	ldr	r0, [r3, #16]
  40a312:	f7ff fd8f 	bl	409e34 <__hi0bits>
  40a316:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a318:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40a31c:	6018      	str	r0, [r3, #0]
  40a31e:	4640      	mov	r0, r8
  40a320:	b002      	add	sp, #8
  40a322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a326:	a801      	add	r0, sp, #4
  40a328:	f7ff fda4 	bl	409e74 <__lo0bits>
  40a32c:	9b01      	ldr	r3, [sp, #4]
  40a32e:	f8c8 3014 	str.w	r3, [r8, #20]
  40a332:	2101      	movs	r1, #1
  40a334:	3020      	adds	r0, #32
  40a336:	f8c8 1010 	str.w	r1, [r8, #16]
  40a33a:	2f00      	cmp	r7, #0
  40a33c:	d0e3      	beq.n	40a306 <__d2b+0x4e>
  40a33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a340:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40a344:	4407      	add	r7, r0
  40a346:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40a34a:	6037      	str	r7, [r6, #0]
  40a34c:	6018      	str	r0, [r3, #0]
  40a34e:	4640      	mov	r0, r8
  40a350:	b002      	add	sp, #8
  40a352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a356:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40a35a:	f1c0 0120 	rsb	r1, r0, #32
  40a35e:	fa03 f101 	lsl.w	r1, r3, r1
  40a362:	430a      	orrs	r2, r1
  40a364:	40c3      	lsrs	r3, r0
  40a366:	9301      	str	r3, [sp, #4]
  40a368:	f8c8 2014 	str.w	r2, [r8, #20]
  40a36c:	e7c2      	b.n	40a2f4 <__d2b+0x3c>
  40a36e:	bf00      	nop

0040a370 <_realloc_r>:
  40a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a374:	4617      	mov	r7, r2
  40a376:	b083      	sub	sp, #12
  40a378:	2900      	cmp	r1, #0
  40a37a:	f000 80c1 	beq.w	40a500 <_realloc_r+0x190>
  40a37e:	460e      	mov	r6, r1
  40a380:	4681      	mov	r9, r0
  40a382:	f107 050b 	add.w	r5, r7, #11
  40a386:	f7ff fce1 	bl	409d4c <__malloc_lock>
  40a38a:	f856 ec04 	ldr.w	lr, [r6, #-4]
  40a38e:	2d16      	cmp	r5, #22
  40a390:	f02e 0403 	bic.w	r4, lr, #3
  40a394:	f1a6 0808 	sub.w	r8, r6, #8
  40a398:	d840      	bhi.n	40a41c <_realloc_r+0xac>
  40a39a:	2210      	movs	r2, #16
  40a39c:	4615      	mov	r5, r2
  40a39e:	42af      	cmp	r7, r5
  40a3a0:	d841      	bhi.n	40a426 <_realloc_r+0xb6>
  40a3a2:	4294      	cmp	r4, r2
  40a3a4:	da75      	bge.n	40a492 <_realloc_r+0x122>
  40a3a6:	4bc9      	ldr	r3, [pc, #804]	; (40a6cc <_realloc_r+0x35c>)
  40a3a8:	6899      	ldr	r1, [r3, #8]
  40a3aa:	eb08 0004 	add.w	r0, r8, r4
  40a3ae:	4288      	cmp	r0, r1
  40a3b0:	6841      	ldr	r1, [r0, #4]
  40a3b2:	f000 80d9 	beq.w	40a568 <_realloc_r+0x1f8>
  40a3b6:	f021 0301 	bic.w	r3, r1, #1
  40a3ba:	4403      	add	r3, r0
  40a3bc:	685b      	ldr	r3, [r3, #4]
  40a3be:	07db      	lsls	r3, r3, #31
  40a3c0:	d57d      	bpl.n	40a4be <_realloc_r+0x14e>
  40a3c2:	f01e 0f01 	tst.w	lr, #1
  40a3c6:	d035      	beq.n	40a434 <_realloc_r+0xc4>
  40a3c8:	4639      	mov	r1, r7
  40a3ca:	4648      	mov	r0, r9
  40a3cc:	f7ff f8b8 	bl	409540 <_malloc_r>
  40a3d0:	4607      	mov	r7, r0
  40a3d2:	b1e0      	cbz	r0, 40a40e <_realloc_r+0x9e>
  40a3d4:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40a3d8:	f023 0301 	bic.w	r3, r3, #1
  40a3dc:	4443      	add	r3, r8
  40a3de:	f1a0 0208 	sub.w	r2, r0, #8
  40a3e2:	429a      	cmp	r2, r3
  40a3e4:	f000 8144 	beq.w	40a670 <_realloc_r+0x300>
  40a3e8:	1f22      	subs	r2, r4, #4
  40a3ea:	2a24      	cmp	r2, #36	; 0x24
  40a3ec:	f200 8131 	bhi.w	40a652 <_realloc_r+0x2e2>
  40a3f0:	2a13      	cmp	r2, #19
  40a3f2:	f200 8104 	bhi.w	40a5fe <_realloc_r+0x28e>
  40a3f6:	4603      	mov	r3, r0
  40a3f8:	4632      	mov	r2, r6
  40a3fa:	6811      	ldr	r1, [r2, #0]
  40a3fc:	6019      	str	r1, [r3, #0]
  40a3fe:	6851      	ldr	r1, [r2, #4]
  40a400:	6059      	str	r1, [r3, #4]
  40a402:	6892      	ldr	r2, [r2, #8]
  40a404:	609a      	str	r2, [r3, #8]
  40a406:	4631      	mov	r1, r6
  40a408:	4648      	mov	r0, r9
  40a40a:	f7fe fd7b 	bl	408f04 <_free_r>
  40a40e:	4648      	mov	r0, r9
  40a410:	f7ff fc9e 	bl	409d50 <__malloc_unlock>
  40a414:	4638      	mov	r0, r7
  40a416:	b003      	add	sp, #12
  40a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a41c:	f025 0507 	bic.w	r5, r5, #7
  40a420:	2d00      	cmp	r5, #0
  40a422:	462a      	mov	r2, r5
  40a424:	dabb      	bge.n	40a39e <_realloc_r+0x2e>
  40a426:	230c      	movs	r3, #12
  40a428:	2000      	movs	r0, #0
  40a42a:	f8c9 3000 	str.w	r3, [r9]
  40a42e:	b003      	add	sp, #12
  40a430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a434:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40a438:	ebc3 0a08 	rsb	sl, r3, r8
  40a43c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a440:	f023 0c03 	bic.w	ip, r3, #3
  40a444:	eb04 030c 	add.w	r3, r4, ip
  40a448:	4293      	cmp	r3, r2
  40a44a:	dbbd      	blt.n	40a3c8 <_realloc_r+0x58>
  40a44c:	4657      	mov	r7, sl
  40a44e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a452:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40a456:	1f22      	subs	r2, r4, #4
  40a458:	2a24      	cmp	r2, #36	; 0x24
  40a45a:	60c1      	str	r1, [r0, #12]
  40a45c:	6088      	str	r0, [r1, #8]
  40a45e:	f200 8117 	bhi.w	40a690 <_realloc_r+0x320>
  40a462:	2a13      	cmp	r2, #19
  40a464:	f240 8112 	bls.w	40a68c <_realloc_r+0x31c>
  40a468:	6831      	ldr	r1, [r6, #0]
  40a46a:	f8ca 1008 	str.w	r1, [sl, #8]
  40a46e:	6871      	ldr	r1, [r6, #4]
  40a470:	f8ca 100c 	str.w	r1, [sl, #12]
  40a474:	2a1b      	cmp	r2, #27
  40a476:	f200 812b 	bhi.w	40a6d0 <_realloc_r+0x360>
  40a47a:	3608      	adds	r6, #8
  40a47c:	f10a 0210 	add.w	r2, sl, #16
  40a480:	6831      	ldr	r1, [r6, #0]
  40a482:	6011      	str	r1, [r2, #0]
  40a484:	6871      	ldr	r1, [r6, #4]
  40a486:	6051      	str	r1, [r2, #4]
  40a488:	68b1      	ldr	r1, [r6, #8]
  40a48a:	6091      	str	r1, [r2, #8]
  40a48c:	463e      	mov	r6, r7
  40a48e:	461c      	mov	r4, r3
  40a490:	46d0      	mov	r8, sl
  40a492:	1b63      	subs	r3, r4, r5
  40a494:	2b0f      	cmp	r3, #15
  40a496:	d81d      	bhi.n	40a4d4 <_realloc_r+0x164>
  40a498:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40a49c:	f003 0301 	and.w	r3, r3, #1
  40a4a0:	4323      	orrs	r3, r4
  40a4a2:	4444      	add	r4, r8
  40a4a4:	f8c8 3004 	str.w	r3, [r8, #4]
  40a4a8:	6863      	ldr	r3, [r4, #4]
  40a4aa:	f043 0301 	orr.w	r3, r3, #1
  40a4ae:	6063      	str	r3, [r4, #4]
  40a4b0:	4648      	mov	r0, r9
  40a4b2:	f7ff fc4d 	bl	409d50 <__malloc_unlock>
  40a4b6:	4630      	mov	r0, r6
  40a4b8:	b003      	add	sp, #12
  40a4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a4be:	f021 0103 	bic.w	r1, r1, #3
  40a4c2:	4421      	add	r1, r4
  40a4c4:	4291      	cmp	r1, r2
  40a4c6:	db21      	blt.n	40a50c <_realloc_r+0x19c>
  40a4c8:	68c3      	ldr	r3, [r0, #12]
  40a4ca:	6882      	ldr	r2, [r0, #8]
  40a4cc:	460c      	mov	r4, r1
  40a4ce:	60d3      	str	r3, [r2, #12]
  40a4d0:	609a      	str	r2, [r3, #8]
  40a4d2:	e7de      	b.n	40a492 <_realloc_r+0x122>
  40a4d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40a4d8:	eb08 0105 	add.w	r1, r8, r5
  40a4dc:	f002 0201 	and.w	r2, r2, #1
  40a4e0:	4315      	orrs	r5, r2
  40a4e2:	f043 0201 	orr.w	r2, r3, #1
  40a4e6:	440b      	add	r3, r1
  40a4e8:	f8c8 5004 	str.w	r5, [r8, #4]
  40a4ec:	604a      	str	r2, [r1, #4]
  40a4ee:	685a      	ldr	r2, [r3, #4]
  40a4f0:	f042 0201 	orr.w	r2, r2, #1
  40a4f4:	3108      	adds	r1, #8
  40a4f6:	605a      	str	r2, [r3, #4]
  40a4f8:	4648      	mov	r0, r9
  40a4fa:	f7fe fd03 	bl	408f04 <_free_r>
  40a4fe:	e7d7      	b.n	40a4b0 <_realloc_r+0x140>
  40a500:	4611      	mov	r1, r2
  40a502:	b003      	add	sp, #12
  40a504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a508:	f7ff b81a 	b.w	409540 <_malloc_r>
  40a50c:	f01e 0f01 	tst.w	lr, #1
  40a510:	f47f af5a 	bne.w	40a3c8 <_realloc_r+0x58>
  40a514:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40a518:	ebc3 0a08 	rsb	sl, r3, r8
  40a51c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a520:	f023 0c03 	bic.w	ip, r3, #3
  40a524:	eb01 0e0c 	add.w	lr, r1, ip
  40a528:	4596      	cmp	lr, r2
  40a52a:	db8b      	blt.n	40a444 <_realloc_r+0xd4>
  40a52c:	68c3      	ldr	r3, [r0, #12]
  40a52e:	6882      	ldr	r2, [r0, #8]
  40a530:	4657      	mov	r7, sl
  40a532:	60d3      	str	r3, [r2, #12]
  40a534:	609a      	str	r2, [r3, #8]
  40a536:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40a53a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40a53e:	60cb      	str	r3, [r1, #12]
  40a540:	1f22      	subs	r2, r4, #4
  40a542:	2a24      	cmp	r2, #36	; 0x24
  40a544:	6099      	str	r1, [r3, #8]
  40a546:	f200 8099 	bhi.w	40a67c <_realloc_r+0x30c>
  40a54a:	2a13      	cmp	r2, #19
  40a54c:	d962      	bls.n	40a614 <_realloc_r+0x2a4>
  40a54e:	6833      	ldr	r3, [r6, #0]
  40a550:	f8ca 3008 	str.w	r3, [sl, #8]
  40a554:	6873      	ldr	r3, [r6, #4]
  40a556:	f8ca 300c 	str.w	r3, [sl, #12]
  40a55a:	2a1b      	cmp	r2, #27
  40a55c:	f200 80a0 	bhi.w	40a6a0 <_realloc_r+0x330>
  40a560:	3608      	adds	r6, #8
  40a562:	f10a 0310 	add.w	r3, sl, #16
  40a566:	e056      	b.n	40a616 <_realloc_r+0x2a6>
  40a568:	f021 0b03 	bic.w	fp, r1, #3
  40a56c:	44a3      	add	fp, r4
  40a56e:	f105 0010 	add.w	r0, r5, #16
  40a572:	4583      	cmp	fp, r0
  40a574:	da59      	bge.n	40a62a <_realloc_r+0x2ba>
  40a576:	f01e 0f01 	tst.w	lr, #1
  40a57a:	f47f af25 	bne.w	40a3c8 <_realloc_r+0x58>
  40a57e:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40a582:	ebc1 0a08 	rsb	sl, r1, r8
  40a586:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a58a:	f021 0c03 	bic.w	ip, r1, #3
  40a58e:	44e3      	add	fp, ip
  40a590:	4558      	cmp	r0, fp
  40a592:	f73f af57 	bgt.w	40a444 <_realloc_r+0xd4>
  40a596:	4657      	mov	r7, sl
  40a598:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a59c:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40a5a0:	1f22      	subs	r2, r4, #4
  40a5a2:	2a24      	cmp	r2, #36	; 0x24
  40a5a4:	60c1      	str	r1, [r0, #12]
  40a5a6:	6088      	str	r0, [r1, #8]
  40a5a8:	f200 80b4 	bhi.w	40a714 <_realloc_r+0x3a4>
  40a5ac:	2a13      	cmp	r2, #19
  40a5ae:	f240 80a5 	bls.w	40a6fc <_realloc_r+0x38c>
  40a5b2:	6831      	ldr	r1, [r6, #0]
  40a5b4:	f8ca 1008 	str.w	r1, [sl, #8]
  40a5b8:	6871      	ldr	r1, [r6, #4]
  40a5ba:	f8ca 100c 	str.w	r1, [sl, #12]
  40a5be:	2a1b      	cmp	r2, #27
  40a5c0:	f200 80af 	bhi.w	40a722 <_realloc_r+0x3b2>
  40a5c4:	3608      	adds	r6, #8
  40a5c6:	f10a 0210 	add.w	r2, sl, #16
  40a5ca:	6831      	ldr	r1, [r6, #0]
  40a5cc:	6011      	str	r1, [r2, #0]
  40a5ce:	6871      	ldr	r1, [r6, #4]
  40a5d0:	6051      	str	r1, [r2, #4]
  40a5d2:	68b1      	ldr	r1, [r6, #8]
  40a5d4:	6091      	str	r1, [r2, #8]
  40a5d6:	eb0a 0105 	add.w	r1, sl, r5
  40a5da:	ebc5 020b 	rsb	r2, r5, fp
  40a5de:	f042 0201 	orr.w	r2, r2, #1
  40a5e2:	6099      	str	r1, [r3, #8]
  40a5e4:	604a      	str	r2, [r1, #4]
  40a5e6:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a5ea:	f003 0301 	and.w	r3, r3, #1
  40a5ee:	431d      	orrs	r5, r3
  40a5f0:	4648      	mov	r0, r9
  40a5f2:	f8ca 5004 	str.w	r5, [sl, #4]
  40a5f6:	f7ff fbab 	bl	409d50 <__malloc_unlock>
  40a5fa:	4638      	mov	r0, r7
  40a5fc:	e75c      	b.n	40a4b8 <_realloc_r+0x148>
  40a5fe:	6833      	ldr	r3, [r6, #0]
  40a600:	6003      	str	r3, [r0, #0]
  40a602:	6873      	ldr	r3, [r6, #4]
  40a604:	6043      	str	r3, [r0, #4]
  40a606:	2a1b      	cmp	r2, #27
  40a608:	d827      	bhi.n	40a65a <_realloc_r+0x2ea>
  40a60a:	f100 0308 	add.w	r3, r0, #8
  40a60e:	f106 0208 	add.w	r2, r6, #8
  40a612:	e6f2      	b.n	40a3fa <_realloc_r+0x8a>
  40a614:	463b      	mov	r3, r7
  40a616:	6832      	ldr	r2, [r6, #0]
  40a618:	601a      	str	r2, [r3, #0]
  40a61a:	6872      	ldr	r2, [r6, #4]
  40a61c:	605a      	str	r2, [r3, #4]
  40a61e:	68b2      	ldr	r2, [r6, #8]
  40a620:	609a      	str	r2, [r3, #8]
  40a622:	463e      	mov	r6, r7
  40a624:	4674      	mov	r4, lr
  40a626:	46d0      	mov	r8, sl
  40a628:	e733      	b.n	40a492 <_realloc_r+0x122>
  40a62a:	eb08 0105 	add.w	r1, r8, r5
  40a62e:	ebc5 0b0b 	rsb	fp, r5, fp
  40a632:	f04b 0201 	orr.w	r2, fp, #1
  40a636:	6099      	str	r1, [r3, #8]
  40a638:	604a      	str	r2, [r1, #4]
  40a63a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40a63e:	f003 0301 	and.w	r3, r3, #1
  40a642:	431d      	orrs	r5, r3
  40a644:	4648      	mov	r0, r9
  40a646:	f846 5c04 	str.w	r5, [r6, #-4]
  40a64a:	f7ff fb81 	bl	409d50 <__malloc_unlock>
  40a64e:	4630      	mov	r0, r6
  40a650:	e732      	b.n	40a4b8 <_realloc_r+0x148>
  40a652:	4631      	mov	r1, r6
  40a654:	f7ff fb16 	bl	409c84 <memmove>
  40a658:	e6d5      	b.n	40a406 <_realloc_r+0x96>
  40a65a:	68b3      	ldr	r3, [r6, #8]
  40a65c:	6083      	str	r3, [r0, #8]
  40a65e:	68f3      	ldr	r3, [r6, #12]
  40a660:	60c3      	str	r3, [r0, #12]
  40a662:	2a24      	cmp	r2, #36	; 0x24
  40a664:	d028      	beq.n	40a6b8 <_realloc_r+0x348>
  40a666:	f100 0310 	add.w	r3, r0, #16
  40a66a:	f106 0210 	add.w	r2, r6, #16
  40a66e:	e6c4      	b.n	40a3fa <_realloc_r+0x8a>
  40a670:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40a674:	f023 0303 	bic.w	r3, r3, #3
  40a678:	441c      	add	r4, r3
  40a67a:	e70a      	b.n	40a492 <_realloc_r+0x122>
  40a67c:	4631      	mov	r1, r6
  40a67e:	4638      	mov	r0, r7
  40a680:	4674      	mov	r4, lr
  40a682:	46d0      	mov	r8, sl
  40a684:	f7ff fafe 	bl	409c84 <memmove>
  40a688:	463e      	mov	r6, r7
  40a68a:	e702      	b.n	40a492 <_realloc_r+0x122>
  40a68c:	463a      	mov	r2, r7
  40a68e:	e6f7      	b.n	40a480 <_realloc_r+0x110>
  40a690:	4631      	mov	r1, r6
  40a692:	4638      	mov	r0, r7
  40a694:	461c      	mov	r4, r3
  40a696:	46d0      	mov	r8, sl
  40a698:	f7ff faf4 	bl	409c84 <memmove>
  40a69c:	463e      	mov	r6, r7
  40a69e:	e6f8      	b.n	40a492 <_realloc_r+0x122>
  40a6a0:	68b3      	ldr	r3, [r6, #8]
  40a6a2:	f8ca 3010 	str.w	r3, [sl, #16]
  40a6a6:	68f3      	ldr	r3, [r6, #12]
  40a6a8:	f8ca 3014 	str.w	r3, [sl, #20]
  40a6ac:	2a24      	cmp	r2, #36	; 0x24
  40a6ae:	d01b      	beq.n	40a6e8 <_realloc_r+0x378>
  40a6b0:	3610      	adds	r6, #16
  40a6b2:	f10a 0318 	add.w	r3, sl, #24
  40a6b6:	e7ae      	b.n	40a616 <_realloc_r+0x2a6>
  40a6b8:	6933      	ldr	r3, [r6, #16]
  40a6ba:	6103      	str	r3, [r0, #16]
  40a6bc:	6973      	ldr	r3, [r6, #20]
  40a6be:	6143      	str	r3, [r0, #20]
  40a6c0:	f106 0218 	add.w	r2, r6, #24
  40a6c4:	f100 0318 	add.w	r3, r0, #24
  40a6c8:	e697      	b.n	40a3fa <_realloc_r+0x8a>
  40a6ca:	bf00      	nop
  40a6cc:	204004d0 	.word	0x204004d0
  40a6d0:	68b1      	ldr	r1, [r6, #8]
  40a6d2:	f8ca 1010 	str.w	r1, [sl, #16]
  40a6d6:	68f1      	ldr	r1, [r6, #12]
  40a6d8:	f8ca 1014 	str.w	r1, [sl, #20]
  40a6dc:	2a24      	cmp	r2, #36	; 0x24
  40a6de:	d00f      	beq.n	40a700 <_realloc_r+0x390>
  40a6e0:	3610      	adds	r6, #16
  40a6e2:	f10a 0218 	add.w	r2, sl, #24
  40a6e6:	e6cb      	b.n	40a480 <_realloc_r+0x110>
  40a6e8:	6933      	ldr	r3, [r6, #16]
  40a6ea:	f8ca 3018 	str.w	r3, [sl, #24]
  40a6ee:	6973      	ldr	r3, [r6, #20]
  40a6f0:	f8ca 301c 	str.w	r3, [sl, #28]
  40a6f4:	3618      	adds	r6, #24
  40a6f6:	f10a 0320 	add.w	r3, sl, #32
  40a6fa:	e78c      	b.n	40a616 <_realloc_r+0x2a6>
  40a6fc:	463a      	mov	r2, r7
  40a6fe:	e764      	b.n	40a5ca <_realloc_r+0x25a>
  40a700:	6932      	ldr	r2, [r6, #16]
  40a702:	f8ca 2018 	str.w	r2, [sl, #24]
  40a706:	6972      	ldr	r2, [r6, #20]
  40a708:	f8ca 201c 	str.w	r2, [sl, #28]
  40a70c:	3618      	adds	r6, #24
  40a70e:	f10a 0220 	add.w	r2, sl, #32
  40a712:	e6b5      	b.n	40a480 <_realloc_r+0x110>
  40a714:	4631      	mov	r1, r6
  40a716:	4638      	mov	r0, r7
  40a718:	9301      	str	r3, [sp, #4]
  40a71a:	f7ff fab3 	bl	409c84 <memmove>
  40a71e:	9b01      	ldr	r3, [sp, #4]
  40a720:	e759      	b.n	40a5d6 <_realloc_r+0x266>
  40a722:	68b1      	ldr	r1, [r6, #8]
  40a724:	f8ca 1010 	str.w	r1, [sl, #16]
  40a728:	68f1      	ldr	r1, [r6, #12]
  40a72a:	f8ca 1014 	str.w	r1, [sl, #20]
  40a72e:	2a24      	cmp	r2, #36	; 0x24
  40a730:	d003      	beq.n	40a73a <_realloc_r+0x3ca>
  40a732:	3610      	adds	r6, #16
  40a734:	f10a 0218 	add.w	r2, sl, #24
  40a738:	e747      	b.n	40a5ca <_realloc_r+0x25a>
  40a73a:	6932      	ldr	r2, [r6, #16]
  40a73c:	f8ca 2018 	str.w	r2, [sl, #24]
  40a740:	6972      	ldr	r2, [r6, #20]
  40a742:	f8ca 201c 	str.w	r2, [sl, #28]
  40a746:	3618      	adds	r6, #24
  40a748:	f10a 0220 	add.w	r2, sl, #32
  40a74c:	e73d      	b.n	40a5ca <_realloc_r+0x25a>
  40a74e:	bf00      	nop

0040a750 <_sbrk_r>:
  40a750:	b538      	push	{r3, r4, r5, lr}
  40a752:	4c07      	ldr	r4, [pc, #28]	; (40a770 <_sbrk_r+0x20>)
  40a754:	2300      	movs	r3, #0
  40a756:	4605      	mov	r5, r0
  40a758:	4608      	mov	r0, r1
  40a75a:	6023      	str	r3, [r4, #0]
  40a75c:	f7fa fa00 	bl	404b60 <_sbrk>
  40a760:	1c43      	adds	r3, r0, #1
  40a762:	d000      	beq.n	40a766 <_sbrk_r+0x16>
  40a764:	bd38      	pop	{r3, r4, r5, pc}
  40a766:	6823      	ldr	r3, [r4, #0]
  40a768:	2b00      	cmp	r3, #0
  40a76a:	d0fb      	beq.n	40a764 <_sbrk_r+0x14>
  40a76c:	602b      	str	r3, [r5, #0]
  40a76e:	bd38      	pop	{r3, r4, r5, pc}
  40a770:	20401660 	.word	0x20401660

0040a774 <__sread>:
  40a774:	b510      	push	{r4, lr}
  40a776:	460c      	mov	r4, r1
  40a778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a77c:	f000 fa74 	bl	40ac68 <_read_r>
  40a780:	2800      	cmp	r0, #0
  40a782:	db03      	blt.n	40a78c <__sread+0x18>
  40a784:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40a786:	4403      	add	r3, r0
  40a788:	6523      	str	r3, [r4, #80]	; 0x50
  40a78a:	bd10      	pop	{r4, pc}
  40a78c:	89a3      	ldrh	r3, [r4, #12]
  40a78e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40a792:	81a3      	strh	r3, [r4, #12]
  40a794:	bd10      	pop	{r4, pc}
  40a796:	bf00      	nop

0040a798 <__swrite>:
  40a798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a79c:	4616      	mov	r6, r2
  40a79e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40a7a2:	461f      	mov	r7, r3
  40a7a4:	05d3      	lsls	r3, r2, #23
  40a7a6:	460c      	mov	r4, r1
  40a7a8:	4605      	mov	r5, r0
  40a7aa:	d507      	bpl.n	40a7bc <__swrite+0x24>
  40a7ac:	2200      	movs	r2, #0
  40a7ae:	2302      	movs	r3, #2
  40a7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a7b4:	f000 fa42 	bl	40ac3c <_lseek_r>
  40a7b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a7bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a7c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40a7c4:	81a2      	strh	r2, [r4, #12]
  40a7c6:	463b      	mov	r3, r7
  40a7c8:	4632      	mov	r2, r6
  40a7ca:	4628      	mov	r0, r5
  40a7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a7d0:	f000 b922 	b.w	40aa18 <_write_r>

0040a7d4 <__sseek>:
  40a7d4:	b510      	push	{r4, lr}
  40a7d6:	460c      	mov	r4, r1
  40a7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a7dc:	f000 fa2e 	bl	40ac3c <_lseek_r>
  40a7e0:	89a3      	ldrh	r3, [r4, #12]
  40a7e2:	1c42      	adds	r2, r0, #1
  40a7e4:	bf0e      	itee	eq
  40a7e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40a7ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40a7ee:	6520      	strne	r0, [r4, #80]	; 0x50
  40a7f0:	81a3      	strh	r3, [r4, #12]
  40a7f2:	bd10      	pop	{r4, pc}

0040a7f4 <__sclose>:
  40a7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a7f8:	f000 b9a6 	b.w	40ab48 <_close_r>

0040a7fc <__ssprint_r>:
  40a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a800:	6893      	ldr	r3, [r2, #8]
  40a802:	b083      	sub	sp, #12
  40a804:	4690      	mov	r8, r2
  40a806:	2b00      	cmp	r3, #0
  40a808:	d072      	beq.n	40a8f0 <__ssprint_r+0xf4>
  40a80a:	4683      	mov	fp, r0
  40a80c:	f04f 0900 	mov.w	r9, #0
  40a810:	6816      	ldr	r6, [r2, #0]
  40a812:	6808      	ldr	r0, [r1, #0]
  40a814:	688b      	ldr	r3, [r1, #8]
  40a816:	460d      	mov	r5, r1
  40a818:	464c      	mov	r4, r9
  40a81a:	2c00      	cmp	r4, #0
  40a81c:	d045      	beq.n	40a8aa <__ssprint_r+0xae>
  40a81e:	429c      	cmp	r4, r3
  40a820:	461f      	mov	r7, r3
  40a822:	469a      	mov	sl, r3
  40a824:	d346      	bcc.n	40a8b4 <__ssprint_r+0xb8>
  40a826:	89ab      	ldrh	r3, [r5, #12]
  40a828:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a82c:	d02d      	beq.n	40a88a <__ssprint_r+0x8e>
  40a82e:	696f      	ldr	r7, [r5, #20]
  40a830:	6929      	ldr	r1, [r5, #16]
  40a832:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40a836:	ebc1 0a00 	rsb	sl, r1, r0
  40a83a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40a83e:	1c60      	adds	r0, r4, #1
  40a840:	107f      	asrs	r7, r7, #1
  40a842:	4450      	add	r0, sl
  40a844:	42b8      	cmp	r0, r7
  40a846:	463a      	mov	r2, r7
  40a848:	bf84      	itt	hi
  40a84a:	4607      	movhi	r7, r0
  40a84c:	463a      	movhi	r2, r7
  40a84e:	055b      	lsls	r3, r3, #21
  40a850:	d533      	bpl.n	40a8ba <__ssprint_r+0xbe>
  40a852:	4611      	mov	r1, r2
  40a854:	4658      	mov	r0, fp
  40a856:	f7fe fe73 	bl	409540 <_malloc_r>
  40a85a:	2800      	cmp	r0, #0
  40a85c:	d037      	beq.n	40a8ce <__ssprint_r+0xd2>
  40a85e:	4652      	mov	r2, sl
  40a860:	6929      	ldr	r1, [r5, #16]
  40a862:	9001      	str	r0, [sp, #4]
  40a864:	f7ff f974 	bl	409b50 <memcpy>
  40a868:	89aa      	ldrh	r2, [r5, #12]
  40a86a:	9b01      	ldr	r3, [sp, #4]
  40a86c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40a870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40a874:	81aa      	strh	r2, [r5, #12]
  40a876:	ebca 0207 	rsb	r2, sl, r7
  40a87a:	eb03 000a 	add.w	r0, r3, sl
  40a87e:	616f      	str	r7, [r5, #20]
  40a880:	612b      	str	r3, [r5, #16]
  40a882:	6028      	str	r0, [r5, #0]
  40a884:	60aa      	str	r2, [r5, #8]
  40a886:	4627      	mov	r7, r4
  40a888:	46a2      	mov	sl, r4
  40a88a:	4652      	mov	r2, sl
  40a88c:	4649      	mov	r1, r9
  40a88e:	f7ff f9f9 	bl	409c84 <memmove>
  40a892:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40a896:	68ab      	ldr	r3, [r5, #8]
  40a898:	6828      	ldr	r0, [r5, #0]
  40a89a:	1bdb      	subs	r3, r3, r7
  40a89c:	4450      	add	r0, sl
  40a89e:	1b14      	subs	r4, r2, r4
  40a8a0:	60ab      	str	r3, [r5, #8]
  40a8a2:	6028      	str	r0, [r5, #0]
  40a8a4:	f8c8 4008 	str.w	r4, [r8, #8]
  40a8a8:	b314      	cbz	r4, 40a8f0 <__ssprint_r+0xf4>
  40a8aa:	f8d6 9000 	ldr.w	r9, [r6]
  40a8ae:	6874      	ldr	r4, [r6, #4]
  40a8b0:	3608      	adds	r6, #8
  40a8b2:	e7b2      	b.n	40a81a <__ssprint_r+0x1e>
  40a8b4:	4627      	mov	r7, r4
  40a8b6:	46a2      	mov	sl, r4
  40a8b8:	e7e7      	b.n	40a88a <__ssprint_r+0x8e>
  40a8ba:	4658      	mov	r0, fp
  40a8bc:	f7ff fd58 	bl	40a370 <_realloc_r>
  40a8c0:	4603      	mov	r3, r0
  40a8c2:	2800      	cmp	r0, #0
  40a8c4:	d1d7      	bne.n	40a876 <__ssprint_r+0x7a>
  40a8c6:	6929      	ldr	r1, [r5, #16]
  40a8c8:	4658      	mov	r0, fp
  40a8ca:	f7fe fb1b 	bl	408f04 <_free_r>
  40a8ce:	230c      	movs	r3, #12
  40a8d0:	f8cb 3000 	str.w	r3, [fp]
  40a8d4:	89ab      	ldrh	r3, [r5, #12]
  40a8d6:	2200      	movs	r2, #0
  40a8d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a8dc:	f04f 30ff 	mov.w	r0, #4294967295
  40a8e0:	81ab      	strh	r3, [r5, #12]
  40a8e2:	f8c8 2008 	str.w	r2, [r8, #8]
  40a8e6:	f8c8 2004 	str.w	r2, [r8, #4]
  40a8ea:	b003      	add	sp, #12
  40a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a8f0:	2000      	movs	r0, #0
  40a8f2:	f8c8 0004 	str.w	r0, [r8, #4]
  40a8f6:	b003      	add	sp, #12
  40a8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a8fc <__swbuf_r>:
  40a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a8fe:	460e      	mov	r6, r1
  40a900:	4614      	mov	r4, r2
  40a902:	4607      	mov	r7, r0
  40a904:	b110      	cbz	r0, 40a90c <__swbuf_r+0x10>
  40a906:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a908:	2b00      	cmp	r3, #0
  40a90a:	d04a      	beq.n	40a9a2 <__swbuf_r+0xa6>
  40a90c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a910:	69a3      	ldr	r3, [r4, #24]
  40a912:	60a3      	str	r3, [r4, #8]
  40a914:	b291      	uxth	r1, r2
  40a916:	0708      	lsls	r0, r1, #28
  40a918:	d538      	bpl.n	40a98c <__swbuf_r+0x90>
  40a91a:	6923      	ldr	r3, [r4, #16]
  40a91c:	2b00      	cmp	r3, #0
  40a91e:	d035      	beq.n	40a98c <__swbuf_r+0x90>
  40a920:	0489      	lsls	r1, r1, #18
  40a922:	b2f5      	uxtb	r5, r6
  40a924:	d515      	bpl.n	40a952 <__swbuf_r+0x56>
  40a926:	6822      	ldr	r2, [r4, #0]
  40a928:	6961      	ldr	r1, [r4, #20]
  40a92a:	1ad3      	subs	r3, r2, r3
  40a92c:	428b      	cmp	r3, r1
  40a92e:	da1c      	bge.n	40a96a <__swbuf_r+0x6e>
  40a930:	3301      	adds	r3, #1
  40a932:	68a1      	ldr	r1, [r4, #8]
  40a934:	1c50      	adds	r0, r2, #1
  40a936:	3901      	subs	r1, #1
  40a938:	60a1      	str	r1, [r4, #8]
  40a93a:	6020      	str	r0, [r4, #0]
  40a93c:	7016      	strb	r6, [r2, #0]
  40a93e:	6962      	ldr	r2, [r4, #20]
  40a940:	429a      	cmp	r2, r3
  40a942:	d01a      	beq.n	40a97a <__swbuf_r+0x7e>
  40a944:	89a3      	ldrh	r3, [r4, #12]
  40a946:	07db      	lsls	r3, r3, #31
  40a948:	d501      	bpl.n	40a94e <__swbuf_r+0x52>
  40a94a:	2d0a      	cmp	r5, #10
  40a94c:	d015      	beq.n	40a97a <__swbuf_r+0x7e>
  40a94e:	4628      	mov	r0, r5
  40a950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a952:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a958:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a95c:	81a2      	strh	r2, [r4, #12]
  40a95e:	6822      	ldr	r2, [r4, #0]
  40a960:	6661      	str	r1, [r4, #100]	; 0x64
  40a962:	6961      	ldr	r1, [r4, #20]
  40a964:	1ad3      	subs	r3, r2, r3
  40a966:	428b      	cmp	r3, r1
  40a968:	dbe2      	blt.n	40a930 <__swbuf_r+0x34>
  40a96a:	4621      	mov	r1, r4
  40a96c:	4638      	mov	r0, r7
  40a96e:	f7fe f96b 	bl	408c48 <_fflush_r>
  40a972:	b940      	cbnz	r0, 40a986 <__swbuf_r+0x8a>
  40a974:	6822      	ldr	r2, [r4, #0]
  40a976:	2301      	movs	r3, #1
  40a978:	e7db      	b.n	40a932 <__swbuf_r+0x36>
  40a97a:	4621      	mov	r1, r4
  40a97c:	4638      	mov	r0, r7
  40a97e:	f7fe f963 	bl	408c48 <_fflush_r>
  40a982:	2800      	cmp	r0, #0
  40a984:	d0e3      	beq.n	40a94e <__swbuf_r+0x52>
  40a986:	f04f 30ff 	mov.w	r0, #4294967295
  40a98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a98c:	4621      	mov	r1, r4
  40a98e:	4638      	mov	r0, r7
  40a990:	f7fd f882 	bl	407a98 <__swsetup_r>
  40a994:	2800      	cmp	r0, #0
  40a996:	d1f6      	bne.n	40a986 <__swbuf_r+0x8a>
  40a998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a99c:	6923      	ldr	r3, [r4, #16]
  40a99e:	b291      	uxth	r1, r2
  40a9a0:	e7be      	b.n	40a920 <__swbuf_r+0x24>
  40a9a2:	f7fe f9e5 	bl	408d70 <__sinit>
  40a9a6:	e7b1      	b.n	40a90c <__swbuf_r+0x10>

0040a9a8 <_wcrtomb_r>:
  40a9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a9ac:	4605      	mov	r5, r0
  40a9ae:	b086      	sub	sp, #24
  40a9b0:	461e      	mov	r6, r3
  40a9b2:	460c      	mov	r4, r1
  40a9b4:	b1a1      	cbz	r1, 40a9e0 <_wcrtomb_r+0x38>
  40a9b6:	4b10      	ldr	r3, [pc, #64]	; (40a9f8 <_wcrtomb_r+0x50>)
  40a9b8:	4617      	mov	r7, r2
  40a9ba:	f8d3 8000 	ldr.w	r8, [r3]
  40a9be:	f7fe fd35 	bl	40942c <__locale_charset>
  40a9c2:	9600      	str	r6, [sp, #0]
  40a9c4:	4603      	mov	r3, r0
  40a9c6:	463a      	mov	r2, r7
  40a9c8:	4621      	mov	r1, r4
  40a9ca:	4628      	mov	r0, r5
  40a9cc:	47c0      	blx	r8
  40a9ce:	1c43      	adds	r3, r0, #1
  40a9d0:	d103      	bne.n	40a9da <_wcrtomb_r+0x32>
  40a9d2:	2200      	movs	r2, #0
  40a9d4:	238a      	movs	r3, #138	; 0x8a
  40a9d6:	6032      	str	r2, [r6, #0]
  40a9d8:	602b      	str	r3, [r5, #0]
  40a9da:	b006      	add	sp, #24
  40a9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a9e0:	4b05      	ldr	r3, [pc, #20]	; (40a9f8 <_wcrtomb_r+0x50>)
  40a9e2:	681f      	ldr	r7, [r3, #0]
  40a9e4:	f7fe fd22 	bl	40942c <__locale_charset>
  40a9e8:	9600      	str	r6, [sp, #0]
  40a9ea:	4603      	mov	r3, r0
  40a9ec:	4622      	mov	r2, r4
  40a9ee:	a903      	add	r1, sp, #12
  40a9f0:	4628      	mov	r0, r5
  40a9f2:	47b8      	blx	r7
  40a9f4:	e7eb      	b.n	40a9ce <_wcrtomb_r+0x26>
  40a9f6:	bf00      	nop
  40a9f8:	204008e0 	.word	0x204008e0

0040a9fc <__ascii_wctomb>:
  40a9fc:	b121      	cbz	r1, 40aa08 <__ascii_wctomb+0xc>
  40a9fe:	2aff      	cmp	r2, #255	; 0xff
  40aa00:	d804      	bhi.n	40aa0c <__ascii_wctomb+0x10>
  40aa02:	700a      	strb	r2, [r1, #0]
  40aa04:	2001      	movs	r0, #1
  40aa06:	4770      	bx	lr
  40aa08:	4608      	mov	r0, r1
  40aa0a:	4770      	bx	lr
  40aa0c:	238a      	movs	r3, #138	; 0x8a
  40aa0e:	6003      	str	r3, [r0, #0]
  40aa10:	f04f 30ff 	mov.w	r0, #4294967295
  40aa14:	4770      	bx	lr
  40aa16:	bf00      	nop

0040aa18 <_write_r>:
  40aa18:	b570      	push	{r4, r5, r6, lr}
  40aa1a:	460d      	mov	r5, r1
  40aa1c:	4c08      	ldr	r4, [pc, #32]	; (40aa40 <_write_r+0x28>)
  40aa1e:	4611      	mov	r1, r2
  40aa20:	4606      	mov	r6, r0
  40aa22:	461a      	mov	r2, r3
  40aa24:	4628      	mov	r0, r5
  40aa26:	2300      	movs	r3, #0
  40aa28:	6023      	str	r3, [r4, #0]
  40aa2a:	f7f9 f943 	bl	403cb4 <_write>
  40aa2e:	1c43      	adds	r3, r0, #1
  40aa30:	d000      	beq.n	40aa34 <_write_r+0x1c>
  40aa32:	bd70      	pop	{r4, r5, r6, pc}
  40aa34:	6823      	ldr	r3, [r4, #0]
  40aa36:	2b00      	cmp	r3, #0
  40aa38:	d0fb      	beq.n	40aa32 <_write_r+0x1a>
  40aa3a:	6033      	str	r3, [r6, #0]
  40aa3c:	bd70      	pop	{r4, r5, r6, pc}
  40aa3e:	bf00      	nop
  40aa40:	20401660 	.word	0x20401660

0040aa44 <__register_exitproc>:
  40aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aa48:	4c25      	ldr	r4, [pc, #148]	; (40aae0 <__register_exitproc+0x9c>)
  40aa4a:	6825      	ldr	r5, [r4, #0]
  40aa4c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40aa50:	4606      	mov	r6, r0
  40aa52:	4688      	mov	r8, r1
  40aa54:	4692      	mov	sl, r2
  40aa56:	4699      	mov	r9, r3
  40aa58:	b3c4      	cbz	r4, 40aacc <__register_exitproc+0x88>
  40aa5a:	6860      	ldr	r0, [r4, #4]
  40aa5c:	281f      	cmp	r0, #31
  40aa5e:	dc17      	bgt.n	40aa90 <__register_exitproc+0x4c>
  40aa60:	1c43      	adds	r3, r0, #1
  40aa62:	b176      	cbz	r6, 40aa82 <__register_exitproc+0x3e>
  40aa64:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40aa68:	2201      	movs	r2, #1
  40aa6a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40aa6e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40aa72:	4082      	lsls	r2, r0
  40aa74:	4311      	orrs	r1, r2
  40aa76:	2e02      	cmp	r6, #2
  40aa78:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40aa7c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40aa80:	d01e      	beq.n	40aac0 <__register_exitproc+0x7c>
  40aa82:	3002      	adds	r0, #2
  40aa84:	6063      	str	r3, [r4, #4]
  40aa86:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40aa8a:	2000      	movs	r0, #0
  40aa8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aa90:	4b14      	ldr	r3, [pc, #80]	; (40aae4 <__register_exitproc+0xa0>)
  40aa92:	b303      	cbz	r3, 40aad6 <__register_exitproc+0x92>
  40aa94:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40aa98:	f7fe fd4a 	bl	409530 <malloc>
  40aa9c:	4604      	mov	r4, r0
  40aa9e:	b1d0      	cbz	r0, 40aad6 <__register_exitproc+0x92>
  40aaa0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40aaa4:	2700      	movs	r7, #0
  40aaa6:	e880 0088 	stmia.w	r0, {r3, r7}
  40aaaa:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40aaae:	4638      	mov	r0, r7
  40aab0:	2301      	movs	r3, #1
  40aab2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40aab6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40aaba:	2e00      	cmp	r6, #0
  40aabc:	d0e1      	beq.n	40aa82 <__register_exitproc+0x3e>
  40aabe:	e7d1      	b.n	40aa64 <__register_exitproc+0x20>
  40aac0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40aac4:	430a      	orrs	r2, r1
  40aac6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40aaca:	e7da      	b.n	40aa82 <__register_exitproc+0x3e>
  40aacc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40aad0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40aad4:	e7c1      	b.n	40aa5a <__register_exitproc+0x16>
  40aad6:	f04f 30ff 	mov.w	r0, #4294967295
  40aada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aade:	bf00      	nop
  40aae0:	0040cb74 	.word	0x0040cb74
  40aae4:	00409531 	.word	0x00409531

0040aae8 <_calloc_r>:
  40aae8:	b510      	push	{r4, lr}
  40aaea:	fb02 f101 	mul.w	r1, r2, r1
  40aaee:	f7fe fd27 	bl	409540 <_malloc_r>
  40aaf2:	4604      	mov	r4, r0
  40aaf4:	b1d8      	cbz	r0, 40ab2e <_calloc_r+0x46>
  40aaf6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40aafa:	f022 0203 	bic.w	r2, r2, #3
  40aafe:	3a04      	subs	r2, #4
  40ab00:	2a24      	cmp	r2, #36	; 0x24
  40ab02:	d818      	bhi.n	40ab36 <_calloc_r+0x4e>
  40ab04:	2a13      	cmp	r2, #19
  40ab06:	d914      	bls.n	40ab32 <_calloc_r+0x4a>
  40ab08:	2300      	movs	r3, #0
  40ab0a:	2a1b      	cmp	r2, #27
  40ab0c:	6003      	str	r3, [r0, #0]
  40ab0e:	6043      	str	r3, [r0, #4]
  40ab10:	d916      	bls.n	40ab40 <_calloc_r+0x58>
  40ab12:	2a24      	cmp	r2, #36	; 0x24
  40ab14:	6083      	str	r3, [r0, #8]
  40ab16:	60c3      	str	r3, [r0, #12]
  40ab18:	bf11      	iteee	ne
  40ab1a:	f100 0210 	addne.w	r2, r0, #16
  40ab1e:	6103      	streq	r3, [r0, #16]
  40ab20:	6143      	streq	r3, [r0, #20]
  40ab22:	f100 0218 	addeq.w	r2, r0, #24
  40ab26:	2300      	movs	r3, #0
  40ab28:	6013      	str	r3, [r2, #0]
  40ab2a:	6053      	str	r3, [r2, #4]
  40ab2c:	6093      	str	r3, [r2, #8]
  40ab2e:	4620      	mov	r0, r4
  40ab30:	bd10      	pop	{r4, pc}
  40ab32:	4602      	mov	r2, r0
  40ab34:	e7f7      	b.n	40ab26 <_calloc_r+0x3e>
  40ab36:	2100      	movs	r1, #0
  40ab38:	f7fa fb40 	bl	4051bc <memset>
  40ab3c:	4620      	mov	r0, r4
  40ab3e:	bd10      	pop	{r4, pc}
  40ab40:	f100 0208 	add.w	r2, r0, #8
  40ab44:	e7ef      	b.n	40ab26 <_calloc_r+0x3e>
  40ab46:	bf00      	nop

0040ab48 <_close_r>:
  40ab48:	b538      	push	{r3, r4, r5, lr}
  40ab4a:	4c07      	ldr	r4, [pc, #28]	; (40ab68 <_close_r+0x20>)
  40ab4c:	2300      	movs	r3, #0
  40ab4e:	4605      	mov	r5, r0
  40ab50:	4608      	mov	r0, r1
  40ab52:	6023      	str	r3, [r4, #0]
  40ab54:	f7fa f81e 	bl	404b94 <_close>
  40ab58:	1c43      	adds	r3, r0, #1
  40ab5a:	d000      	beq.n	40ab5e <_close_r+0x16>
  40ab5c:	bd38      	pop	{r3, r4, r5, pc}
  40ab5e:	6823      	ldr	r3, [r4, #0]
  40ab60:	2b00      	cmp	r3, #0
  40ab62:	d0fb      	beq.n	40ab5c <_close_r+0x14>
  40ab64:	602b      	str	r3, [r5, #0]
  40ab66:	bd38      	pop	{r3, r4, r5, pc}
  40ab68:	20401660 	.word	0x20401660

0040ab6c <_fclose_r>:
  40ab6c:	2900      	cmp	r1, #0
  40ab6e:	d03d      	beq.n	40abec <_fclose_r+0x80>
  40ab70:	b570      	push	{r4, r5, r6, lr}
  40ab72:	4605      	mov	r5, r0
  40ab74:	460c      	mov	r4, r1
  40ab76:	b108      	cbz	r0, 40ab7c <_fclose_r+0x10>
  40ab78:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ab7a:	b37b      	cbz	r3, 40abdc <_fclose_r+0x70>
  40ab7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ab80:	b90b      	cbnz	r3, 40ab86 <_fclose_r+0x1a>
  40ab82:	2000      	movs	r0, #0
  40ab84:	bd70      	pop	{r4, r5, r6, pc}
  40ab86:	4621      	mov	r1, r4
  40ab88:	4628      	mov	r0, r5
  40ab8a:	f7fd ffb9 	bl	408b00 <__sflush_r>
  40ab8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40ab90:	4606      	mov	r6, r0
  40ab92:	b133      	cbz	r3, 40aba2 <_fclose_r+0x36>
  40ab94:	69e1      	ldr	r1, [r4, #28]
  40ab96:	4628      	mov	r0, r5
  40ab98:	4798      	blx	r3
  40ab9a:	2800      	cmp	r0, #0
  40ab9c:	bfb8      	it	lt
  40ab9e:	f04f 36ff 	movlt.w	r6, #4294967295
  40aba2:	89a3      	ldrh	r3, [r4, #12]
  40aba4:	061b      	lsls	r3, r3, #24
  40aba6:	d41c      	bmi.n	40abe2 <_fclose_r+0x76>
  40aba8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40abaa:	b141      	cbz	r1, 40abbe <_fclose_r+0x52>
  40abac:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40abb0:	4299      	cmp	r1, r3
  40abb2:	d002      	beq.n	40abba <_fclose_r+0x4e>
  40abb4:	4628      	mov	r0, r5
  40abb6:	f7fe f9a5 	bl	408f04 <_free_r>
  40abba:	2300      	movs	r3, #0
  40abbc:	6323      	str	r3, [r4, #48]	; 0x30
  40abbe:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40abc0:	b121      	cbz	r1, 40abcc <_fclose_r+0x60>
  40abc2:	4628      	mov	r0, r5
  40abc4:	f7fe f99e 	bl	408f04 <_free_r>
  40abc8:	2300      	movs	r3, #0
  40abca:	6463      	str	r3, [r4, #68]	; 0x44
  40abcc:	f7fe f8d6 	bl	408d7c <__sfp_lock_acquire>
  40abd0:	2300      	movs	r3, #0
  40abd2:	81a3      	strh	r3, [r4, #12]
  40abd4:	f7fe f8d4 	bl	408d80 <__sfp_lock_release>
  40abd8:	4630      	mov	r0, r6
  40abda:	bd70      	pop	{r4, r5, r6, pc}
  40abdc:	f7fe f8c8 	bl	408d70 <__sinit>
  40abe0:	e7cc      	b.n	40ab7c <_fclose_r+0x10>
  40abe2:	6921      	ldr	r1, [r4, #16]
  40abe4:	4628      	mov	r0, r5
  40abe6:	f7fe f98d 	bl	408f04 <_free_r>
  40abea:	e7dd      	b.n	40aba8 <_fclose_r+0x3c>
  40abec:	2000      	movs	r0, #0
  40abee:	4770      	bx	lr

0040abf0 <_fstat_r>:
  40abf0:	b538      	push	{r3, r4, r5, lr}
  40abf2:	460b      	mov	r3, r1
  40abf4:	4c07      	ldr	r4, [pc, #28]	; (40ac14 <_fstat_r+0x24>)
  40abf6:	4605      	mov	r5, r0
  40abf8:	4611      	mov	r1, r2
  40abfa:	4618      	mov	r0, r3
  40abfc:	2300      	movs	r3, #0
  40abfe:	6023      	str	r3, [r4, #0]
  40ac00:	f7f9 ffcc 	bl	404b9c <_fstat>
  40ac04:	1c43      	adds	r3, r0, #1
  40ac06:	d000      	beq.n	40ac0a <_fstat_r+0x1a>
  40ac08:	bd38      	pop	{r3, r4, r5, pc}
  40ac0a:	6823      	ldr	r3, [r4, #0]
  40ac0c:	2b00      	cmp	r3, #0
  40ac0e:	d0fb      	beq.n	40ac08 <_fstat_r+0x18>
  40ac10:	602b      	str	r3, [r5, #0]
  40ac12:	bd38      	pop	{r3, r4, r5, pc}
  40ac14:	20401660 	.word	0x20401660

0040ac18 <_isatty_r>:
  40ac18:	b538      	push	{r3, r4, r5, lr}
  40ac1a:	4c07      	ldr	r4, [pc, #28]	; (40ac38 <_isatty_r+0x20>)
  40ac1c:	2300      	movs	r3, #0
  40ac1e:	4605      	mov	r5, r0
  40ac20:	4608      	mov	r0, r1
  40ac22:	6023      	str	r3, [r4, #0]
  40ac24:	f7f9 ffc0 	bl	404ba8 <_isatty>
  40ac28:	1c43      	adds	r3, r0, #1
  40ac2a:	d000      	beq.n	40ac2e <_isatty_r+0x16>
  40ac2c:	bd38      	pop	{r3, r4, r5, pc}
  40ac2e:	6823      	ldr	r3, [r4, #0]
  40ac30:	2b00      	cmp	r3, #0
  40ac32:	d0fb      	beq.n	40ac2c <_isatty_r+0x14>
  40ac34:	602b      	str	r3, [r5, #0]
  40ac36:	bd38      	pop	{r3, r4, r5, pc}
  40ac38:	20401660 	.word	0x20401660

0040ac3c <_lseek_r>:
  40ac3c:	b570      	push	{r4, r5, r6, lr}
  40ac3e:	460d      	mov	r5, r1
  40ac40:	4c08      	ldr	r4, [pc, #32]	; (40ac64 <_lseek_r+0x28>)
  40ac42:	4611      	mov	r1, r2
  40ac44:	4606      	mov	r6, r0
  40ac46:	461a      	mov	r2, r3
  40ac48:	4628      	mov	r0, r5
  40ac4a:	2300      	movs	r3, #0
  40ac4c:	6023      	str	r3, [r4, #0]
  40ac4e:	f7f9 ffad 	bl	404bac <_lseek>
  40ac52:	1c43      	adds	r3, r0, #1
  40ac54:	d000      	beq.n	40ac58 <_lseek_r+0x1c>
  40ac56:	bd70      	pop	{r4, r5, r6, pc}
  40ac58:	6823      	ldr	r3, [r4, #0]
  40ac5a:	2b00      	cmp	r3, #0
  40ac5c:	d0fb      	beq.n	40ac56 <_lseek_r+0x1a>
  40ac5e:	6033      	str	r3, [r6, #0]
  40ac60:	bd70      	pop	{r4, r5, r6, pc}
  40ac62:	bf00      	nop
  40ac64:	20401660 	.word	0x20401660

0040ac68 <_read_r>:
  40ac68:	b570      	push	{r4, r5, r6, lr}
  40ac6a:	460d      	mov	r5, r1
  40ac6c:	4c08      	ldr	r4, [pc, #32]	; (40ac90 <_read_r+0x28>)
  40ac6e:	4611      	mov	r1, r2
  40ac70:	4606      	mov	r6, r0
  40ac72:	461a      	mov	r2, r3
  40ac74:	4628      	mov	r0, r5
  40ac76:	2300      	movs	r3, #0
  40ac78:	6023      	str	r3, [r4, #0]
  40ac7a:	f7f8 fffd 	bl	403c78 <_read>
  40ac7e:	1c43      	adds	r3, r0, #1
  40ac80:	d000      	beq.n	40ac84 <_read_r+0x1c>
  40ac82:	bd70      	pop	{r4, r5, r6, pc}
  40ac84:	6823      	ldr	r3, [r4, #0]
  40ac86:	2b00      	cmp	r3, #0
  40ac88:	d0fb      	beq.n	40ac82 <_read_r+0x1a>
  40ac8a:	6033      	str	r3, [r6, #0]
  40ac8c:	bd70      	pop	{r4, r5, r6, pc}
  40ac8e:	bf00      	nop
  40ac90:	20401660 	.word	0x20401660

0040ac94 <__aeabi_drsub>:
  40ac94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40ac98:	e002      	b.n	40aca0 <__adddf3>
  40ac9a:	bf00      	nop

0040ac9c <__aeabi_dsub>:
  40ac9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040aca0 <__adddf3>:
  40aca0:	b530      	push	{r4, r5, lr}
  40aca2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40aca6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40acaa:	ea94 0f05 	teq	r4, r5
  40acae:	bf08      	it	eq
  40acb0:	ea90 0f02 	teqeq	r0, r2
  40acb4:	bf1f      	itttt	ne
  40acb6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40acba:	ea55 0c02 	orrsne.w	ip, r5, r2
  40acbe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40acc2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40acc6:	f000 80e2 	beq.w	40ae8e <__adddf3+0x1ee>
  40acca:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40acce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40acd2:	bfb8      	it	lt
  40acd4:	426d      	neglt	r5, r5
  40acd6:	dd0c      	ble.n	40acf2 <__adddf3+0x52>
  40acd8:	442c      	add	r4, r5
  40acda:	ea80 0202 	eor.w	r2, r0, r2
  40acde:	ea81 0303 	eor.w	r3, r1, r3
  40ace2:	ea82 0000 	eor.w	r0, r2, r0
  40ace6:	ea83 0101 	eor.w	r1, r3, r1
  40acea:	ea80 0202 	eor.w	r2, r0, r2
  40acee:	ea81 0303 	eor.w	r3, r1, r3
  40acf2:	2d36      	cmp	r5, #54	; 0x36
  40acf4:	bf88      	it	hi
  40acf6:	bd30      	pophi	{r4, r5, pc}
  40acf8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40acfc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ad00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40ad04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40ad08:	d002      	beq.n	40ad10 <__adddf3+0x70>
  40ad0a:	4240      	negs	r0, r0
  40ad0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ad10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40ad14:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ad18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40ad1c:	d002      	beq.n	40ad24 <__adddf3+0x84>
  40ad1e:	4252      	negs	r2, r2
  40ad20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40ad24:	ea94 0f05 	teq	r4, r5
  40ad28:	f000 80a7 	beq.w	40ae7a <__adddf3+0x1da>
  40ad2c:	f1a4 0401 	sub.w	r4, r4, #1
  40ad30:	f1d5 0e20 	rsbs	lr, r5, #32
  40ad34:	db0d      	blt.n	40ad52 <__adddf3+0xb2>
  40ad36:	fa02 fc0e 	lsl.w	ip, r2, lr
  40ad3a:	fa22 f205 	lsr.w	r2, r2, r5
  40ad3e:	1880      	adds	r0, r0, r2
  40ad40:	f141 0100 	adc.w	r1, r1, #0
  40ad44:	fa03 f20e 	lsl.w	r2, r3, lr
  40ad48:	1880      	adds	r0, r0, r2
  40ad4a:	fa43 f305 	asr.w	r3, r3, r5
  40ad4e:	4159      	adcs	r1, r3
  40ad50:	e00e      	b.n	40ad70 <__adddf3+0xd0>
  40ad52:	f1a5 0520 	sub.w	r5, r5, #32
  40ad56:	f10e 0e20 	add.w	lr, lr, #32
  40ad5a:	2a01      	cmp	r2, #1
  40ad5c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40ad60:	bf28      	it	cs
  40ad62:	f04c 0c02 	orrcs.w	ip, ip, #2
  40ad66:	fa43 f305 	asr.w	r3, r3, r5
  40ad6a:	18c0      	adds	r0, r0, r3
  40ad6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40ad70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ad74:	d507      	bpl.n	40ad86 <__adddf3+0xe6>
  40ad76:	f04f 0e00 	mov.w	lr, #0
  40ad7a:	f1dc 0c00 	rsbs	ip, ip, #0
  40ad7e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40ad82:	eb6e 0101 	sbc.w	r1, lr, r1
  40ad86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40ad8a:	d31b      	bcc.n	40adc4 <__adddf3+0x124>
  40ad8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40ad90:	d30c      	bcc.n	40adac <__adddf3+0x10c>
  40ad92:	0849      	lsrs	r1, r1, #1
  40ad94:	ea5f 0030 	movs.w	r0, r0, rrx
  40ad98:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40ad9c:	f104 0401 	add.w	r4, r4, #1
  40ada0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40ada4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40ada8:	f080 809a 	bcs.w	40aee0 <__adddf3+0x240>
  40adac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40adb0:	bf08      	it	eq
  40adb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40adb6:	f150 0000 	adcs.w	r0, r0, #0
  40adba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40adbe:	ea41 0105 	orr.w	r1, r1, r5
  40adc2:	bd30      	pop	{r4, r5, pc}
  40adc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40adc8:	4140      	adcs	r0, r0
  40adca:	eb41 0101 	adc.w	r1, r1, r1
  40adce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40add2:	f1a4 0401 	sub.w	r4, r4, #1
  40add6:	d1e9      	bne.n	40adac <__adddf3+0x10c>
  40add8:	f091 0f00 	teq	r1, #0
  40addc:	bf04      	itt	eq
  40adde:	4601      	moveq	r1, r0
  40ade0:	2000      	moveq	r0, #0
  40ade2:	fab1 f381 	clz	r3, r1
  40ade6:	bf08      	it	eq
  40ade8:	3320      	addeq	r3, #32
  40adea:	f1a3 030b 	sub.w	r3, r3, #11
  40adee:	f1b3 0220 	subs.w	r2, r3, #32
  40adf2:	da0c      	bge.n	40ae0e <__adddf3+0x16e>
  40adf4:	320c      	adds	r2, #12
  40adf6:	dd08      	ble.n	40ae0a <__adddf3+0x16a>
  40adf8:	f102 0c14 	add.w	ip, r2, #20
  40adfc:	f1c2 020c 	rsb	r2, r2, #12
  40ae00:	fa01 f00c 	lsl.w	r0, r1, ip
  40ae04:	fa21 f102 	lsr.w	r1, r1, r2
  40ae08:	e00c      	b.n	40ae24 <__adddf3+0x184>
  40ae0a:	f102 0214 	add.w	r2, r2, #20
  40ae0e:	bfd8      	it	le
  40ae10:	f1c2 0c20 	rsble	ip, r2, #32
  40ae14:	fa01 f102 	lsl.w	r1, r1, r2
  40ae18:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ae1c:	bfdc      	itt	le
  40ae1e:	ea41 010c 	orrle.w	r1, r1, ip
  40ae22:	4090      	lslle	r0, r2
  40ae24:	1ae4      	subs	r4, r4, r3
  40ae26:	bfa2      	ittt	ge
  40ae28:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40ae2c:	4329      	orrge	r1, r5
  40ae2e:	bd30      	popge	{r4, r5, pc}
  40ae30:	ea6f 0404 	mvn.w	r4, r4
  40ae34:	3c1f      	subs	r4, #31
  40ae36:	da1c      	bge.n	40ae72 <__adddf3+0x1d2>
  40ae38:	340c      	adds	r4, #12
  40ae3a:	dc0e      	bgt.n	40ae5a <__adddf3+0x1ba>
  40ae3c:	f104 0414 	add.w	r4, r4, #20
  40ae40:	f1c4 0220 	rsb	r2, r4, #32
  40ae44:	fa20 f004 	lsr.w	r0, r0, r4
  40ae48:	fa01 f302 	lsl.w	r3, r1, r2
  40ae4c:	ea40 0003 	orr.w	r0, r0, r3
  40ae50:	fa21 f304 	lsr.w	r3, r1, r4
  40ae54:	ea45 0103 	orr.w	r1, r5, r3
  40ae58:	bd30      	pop	{r4, r5, pc}
  40ae5a:	f1c4 040c 	rsb	r4, r4, #12
  40ae5e:	f1c4 0220 	rsb	r2, r4, #32
  40ae62:	fa20 f002 	lsr.w	r0, r0, r2
  40ae66:	fa01 f304 	lsl.w	r3, r1, r4
  40ae6a:	ea40 0003 	orr.w	r0, r0, r3
  40ae6e:	4629      	mov	r1, r5
  40ae70:	bd30      	pop	{r4, r5, pc}
  40ae72:	fa21 f004 	lsr.w	r0, r1, r4
  40ae76:	4629      	mov	r1, r5
  40ae78:	bd30      	pop	{r4, r5, pc}
  40ae7a:	f094 0f00 	teq	r4, #0
  40ae7e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40ae82:	bf06      	itte	eq
  40ae84:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40ae88:	3401      	addeq	r4, #1
  40ae8a:	3d01      	subne	r5, #1
  40ae8c:	e74e      	b.n	40ad2c <__adddf3+0x8c>
  40ae8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ae92:	bf18      	it	ne
  40ae94:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40ae98:	d029      	beq.n	40aeee <__adddf3+0x24e>
  40ae9a:	ea94 0f05 	teq	r4, r5
  40ae9e:	bf08      	it	eq
  40aea0:	ea90 0f02 	teqeq	r0, r2
  40aea4:	d005      	beq.n	40aeb2 <__adddf3+0x212>
  40aea6:	ea54 0c00 	orrs.w	ip, r4, r0
  40aeaa:	bf04      	itt	eq
  40aeac:	4619      	moveq	r1, r3
  40aeae:	4610      	moveq	r0, r2
  40aeb0:	bd30      	pop	{r4, r5, pc}
  40aeb2:	ea91 0f03 	teq	r1, r3
  40aeb6:	bf1e      	ittt	ne
  40aeb8:	2100      	movne	r1, #0
  40aeba:	2000      	movne	r0, #0
  40aebc:	bd30      	popne	{r4, r5, pc}
  40aebe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40aec2:	d105      	bne.n	40aed0 <__adddf3+0x230>
  40aec4:	0040      	lsls	r0, r0, #1
  40aec6:	4149      	adcs	r1, r1
  40aec8:	bf28      	it	cs
  40aeca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40aece:	bd30      	pop	{r4, r5, pc}
  40aed0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40aed4:	bf3c      	itt	cc
  40aed6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40aeda:	bd30      	popcc	{r4, r5, pc}
  40aedc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40aee0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40aee4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40aee8:	f04f 0000 	mov.w	r0, #0
  40aeec:	bd30      	pop	{r4, r5, pc}
  40aeee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40aef2:	bf1a      	itte	ne
  40aef4:	4619      	movne	r1, r3
  40aef6:	4610      	movne	r0, r2
  40aef8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40aefc:	bf1c      	itt	ne
  40aefe:	460b      	movne	r3, r1
  40af00:	4602      	movne	r2, r0
  40af02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40af06:	bf06      	itte	eq
  40af08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40af0c:	ea91 0f03 	teqeq	r1, r3
  40af10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40af14:	bd30      	pop	{r4, r5, pc}
  40af16:	bf00      	nop

0040af18 <__aeabi_ui2d>:
  40af18:	f090 0f00 	teq	r0, #0
  40af1c:	bf04      	itt	eq
  40af1e:	2100      	moveq	r1, #0
  40af20:	4770      	bxeq	lr
  40af22:	b530      	push	{r4, r5, lr}
  40af24:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40af28:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40af2c:	f04f 0500 	mov.w	r5, #0
  40af30:	f04f 0100 	mov.w	r1, #0
  40af34:	e750      	b.n	40add8 <__adddf3+0x138>
  40af36:	bf00      	nop

0040af38 <__aeabi_i2d>:
  40af38:	f090 0f00 	teq	r0, #0
  40af3c:	bf04      	itt	eq
  40af3e:	2100      	moveq	r1, #0
  40af40:	4770      	bxeq	lr
  40af42:	b530      	push	{r4, r5, lr}
  40af44:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40af48:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40af4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40af50:	bf48      	it	mi
  40af52:	4240      	negmi	r0, r0
  40af54:	f04f 0100 	mov.w	r1, #0
  40af58:	e73e      	b.n	40add8 <__adddf3+0x138>
  40af5a:	bf00      	nop

0040af5c <__aeabi_f2d>:
  40af5c:	0042      	lsls	r2, r0, #1
  40af5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40af62:	ea4f 0131 	mov.w	r1, r1, rrx
  40af66:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40af6a:	bf1f      	itttt	ne
  40af6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40af70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40af74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40af78:	4770      	bxne	lr
  40af7a:	f092 0f00 	teq	r2, #0
  40af7e:	bf14      	ite	ne
  40af80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40af84:	4770      	bxeq	lr
  40af86:	b530      	push	{r4, r5, lr}
  40af88:	f44f 7460 	mov.w	r4, #896	; 0x380
  40af8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40af90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40af94:	e720      	b.n	40add8 <__adddf3+0x138>
  40af96:	bf00      	nop

0040af98 <__aeabi_ul2d>:
  40af98:	ea50 0201 	orrs.w	r2, r0, r1
  40af9c:	bf08      	it	eq
  40af9e:	4770      	bxeq	lr
  40afa0:	b530      	push	{r4, r5, lr}
  40afa2:	f04f 0500 	mov.w	r5, #0
  40afa6:	e00a      	b.n	40afbe <__aeabi_l2d+0x16>

0040afa8 <__aeabi_l2d>:
  40afa8:	ea50 0201 	orrs.w	r2, r0, r1
  40afac:	bf08      	it	eq
  40afae:	4770      	bxeq	lr
  40afb0:	b530      	push	{r4, r5, lr}
  40afb2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40afb6:	d502      	bpl.n	40afbe <__aeabi_l2d+0x16>
  40afb8:	4240      	negs	r0, r0
  40afba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40afbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40afc2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40afc6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40afca:	f43f aedc 	beq.w	40ad86 <__adddf3+0xe6>
  40afce:	f04f 0203 	mov.w	r2, #3
  40afd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40afd6:	bf18      	it	ne
  40afd8:	3203      	addne	r2, #3
  40afda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40afde:	bf18      	it	ne
  40afe0:	3203      	addne	r2, #3
  40afe2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40afe6:	f1c2 0320 	rsb	r3, r2, #32
  40afea:	fa00 fc03 	lsl.w	ip, r0, r3
  40afee:	fa20 f002 	lsr.w	r0, r0, r2
  40aff2:	fa01 fe03 	lsl.w	lr, r1, r3
  40aff6:	ea40 000e 	orr.w	r0, r0, lr
  40affa:	fa21 f102 	lsr.w	r1, r1, r2
  40affe:	4414      	add	r4, r2
  40b000:	e6c1      	b.n	40ad86 <__adddf3+0xe6>
  40b002:	bf00      	nop

0040b004 <__aeabi_dmul>:
  40b004:	b570      	push	{r4, r5, r6, lr}
  40b006:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b00a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40b00e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40b012:	bf1d      	ittte	ne
  40b014:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40b018:	ea94 0f0c 	teqne	r4, ip
  40b01c:	ea95 0f0c 	teqne	r5, ip
  40b020:	f000 f8de 	bleq	40b1e0 <__aeabi_dmul+0x1dc>
  40b024:	442c      	add	r4, r5
  40b026:	ea81 0603 	eor.w	r6, r1, r3
  40b02a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40b02e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40b032:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40b036:	bf18      	it	ne
  40b038:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40b03c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40b044:	d038      	beq.n	40b0b8 <__aeabi_dmul+0xb4>
  40b046:	fba0 ce02 	umull	ip, lr, r0, r2
  40b04a:	f04f 0500 	mov.w	r5, #0
  40b04e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40b052:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40b056:	fbe0 e503 	umlal	lr, r5, r0, r3
  40b05a:	f04f 0600 	mov.w	r6, #0
  40b05e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40b062:	f09c 0f00 	teq	ip, #0
  40b066:	bf18      	it	ne
  40b068:	f04e 0e01 	orrne.w	lr, lr, #1
  40b06c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40b070:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40b074:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40b078:	d204      	bcs.n	40b084 <__aeabi_dmul+0x80>
  40b07a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40b07e:	416d      	adcs	r5, r5
  40b080:	eb46 0606 	adc.w	r6, r6, r6
  40b084:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40b088:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40b08c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40b090:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40b094:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40b098:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40b09c:	bf88      	it	hi
  40b09e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40b0a2:	d81e      	bhi.n	40b0e2 <__aeabi_dmul+0xde>
  40b0a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40b0a8:	bf08      	it	eq
  40b0aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40b0ae:	f150 0000 	adcs.w	r0, r0, #0
  40b0b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b0b6:	bd70      	pop	{r4, r5, r6, pc}
  40b0b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40b0bc:	ea46 0101 	orr.w	r1, r6, r1
  40b0c0:	ea40 0002 	orr.w	r0, r0, r2
  40b0c4:	ea81 0103 	eor.w	r1, r1, r3
  40b0c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40b0cc:	bfc2      	ittt	gt
  40b0ce:	ebd4 050c 	rsbsgt	r5, r4, ip
  40b0d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40b0d6:	bd70      	popgt	{r4, r5, r6, pc}
  40b0d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b0dc:	f04f 0e00 	mov.w	lr, #0
  40b0e0:	3c01      	subs	r4, #1
  40b0e2:	f300 80ab 	bgt.w	40b23c <__aeabi_dmul+0x238>
  40b0e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40b0ea:	bfde      	ittt	le
  40b0ec:	2000      	movle	r0, #0
  40b0ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40b0f2:	bd70      	pople	{r4, r5, r6, pc}
  40b0f4:	f1c4 0400 	rsb	r4, r4, #0
  40b0f8:	3c20      	subs	r4, #32
  40b0fa:	da35      	bge.n	40b168 <__aeabi_dmul+0x164>
  40b0fc:	340c      	adds	r4, #12
  40b0fe:	dc1b      	bgt.n	40b138 <__aeabi_dmul+0x134>
  40b100:	f104 0414 	add.w	r4, r4, #20
  40b104:	f1c4 0520 	rsb	r5, r4, #32
  40b108:	fa00 f305 	lsl.w	r3, r0, r5
  40b10c:	fa20 f004 	lsr.w	r0, r0, r4
  40b110:	fa01 f205 	lsl.w	r2, r1, r5
  40b114:	ea40 0002 	orr.w	r0, r0, r2
  40b118:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40b11c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40b120:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40b124:	fa21 f604 	lsr.w	r6, r1, r4
  40b128:	eb42 0106 	adc.w	r1, r2, r6
  40b12c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40b130:	bf08      	it	eq
  40b132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40b136:	bd70      	pop	{r4, r5, r6, pc}
  40b138:	f1c4 040c 	rsb	r4, r4, #12
  40b13c:	f1c4 0520 	rsb	r5, r4, #32
  40b140:	fa00 f304 	lsl.w	r3, r0, r4
  40b144:	fa20 f005 	lsr.w	r0, r0, r5
  40b148:	fa01 f204 	lsl.w	r2, r1, r4
  40b14c:	ea40 0002 	orr.w	r0, r0, r2
  40b150:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b154:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40b158:	f141 0100 	adc.w	r1, r1, #0
  40b15c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40b160:	bf08      	it	eq
  40b162:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40b166:	bd70      	pop	{r4, r5, r6, pc}
  40b168:	f1c4 0520 	rsb	r5, r4, #32
  40b16c:	fa00 f205 	lsl.w	r2, r0, r5
  40b170:	ea4e 0e02 	orr.w	lr, lr, r2
  40b174:	fa20 f304 	lsr.w	r3, r0, r4
  40b178:	fa01 f205 	lsl.w	r2, r1, r5
  40b17c:	ea43 0302 	orr.w	r3, r3, r2
  40b180:	fa21 f004 	lsr.w	r0, r1, r4
  40b184:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b188:	fa21 f204 	lsr.w	r2, r1, r4
  40b18c:	ea20 0002 	bic.w	r0, r0, r2
  40b190:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40b194:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40b198:	bf08      	it	eq
  40b19a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40b19e:	bd70      	pop	{r4, r5, r6, pc}
  40b1a0:	f094 0f00 	teq	r4, #0
  40b1a4:	d10f      	bne.n	40b1c6 <__aeabi_dmul+0x1c2>
  40b1a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40b1aa:	0040      	lsls	r0, r0, #1
  40b1ac:	eb41 0101 	adc.w	r1, r1, r1
  40b1b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b1b4:	bf08      	it	eq
  40b1b6:	3c01      	subeq	r4, #1
  40b1b8:	d0f7      	beq.n	40b1aa <__aeabi_dmul+0x1a6>
  40b1ba:	ea41 0106 	orr.w	r1, r1, r6
  40b1be:	f095 0f00 	teq	r5, #0
  40b1c2:	bf18      	it	ne
  40b1c4:	4770      	bxne	lr
  40b1c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40b1ca:	0052      	lsls	r2, r2, #1
  40b1cc:	eb43 0303 	adc.w	r3, r3, r3
  40b1d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40b1d4:	bf08      	it	eq
  40b1d6:	3d01      	subeq	r5, #1
  40b1d8:	d0f7      	beq.n	40b1ca <__aeabi_dmul+0x1c6>
  40b1da:	ea43 0306 	orr.w	r3, r3, r6
  40b1de:	4770      	bx	lr
  40b1e0:	ea94 0f0c 	teq	r4, ip
  40b1e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40b1e8:	bf18      	it	ne
  40b1ea:	ea95 0f0c 	teqne	r5, ip
  40b1ee:	d00c      	beq.n	40b20a <__aeabi_dmul+0x206>
  40b1f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b1f4:	bf18      	it	ne
  40b1f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b1fa:	d1d1      	bne.n	40b1a0 <__aeabi_dmul+0x19c>
  40b1fc:	ea81 0103 	eor.w	r1, r1, r3
  40b200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b204:	f04f 0000 	mov.w	r0, #0
  40b208:	bd70      	pop	{r4, r5, r6, pc}
  40b20a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b20e:	bf06      	itte	eq
  40b210:	4610      	moveq	r0, r2
  40b212:	4619      	moveq	r1, r3
  40b214:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b218:	d019      	beq.n	40b24e <__aeabi_dmul+0x24a>
  40b21a:	ea94 0f0c 	teq	r4, ip
  40b21e:	d102      	bne.n	40b226 <__aeabi_dmul+0x222>
  40b220:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40b224:	d113      	bne.n	40b24e <__aeabi_dmul+0x24a>
  40b226:	ea95 0f0c 	teq	r5, ip
  40b22a:	d105      	bne.n	40b238 <__aeabi_dmul+0x234>
  40b22c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40b230:	bf1c      	itt	ne
  40b232:	4610      	movne	r0, r2
  40b234:	4619      	movne	r1, r3
  40b236:	d10a      	bne.n	40b24e <__aeabi_dmul+0x24a>
  40b238:	ea81 0103 	eor.w	r1, r1, r3
  40b23c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40b240:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40b244:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40b248:	f04f 0000 	mov.w	r0, #0
  40b24c:	bd70      	pop	{r4, r5, r6, pc}
  40b24e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40b252:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40b256:	bd70      	pop	{r4, r5, r6, pc}

0040b258 <__aeabi_ddiv>:
  40b258:	b570      	push	{r4, r5, r6, lr}
  40b25a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b25e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40b262:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40b266:	bf1d      	ittte	ne
  40b268:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40b26c:	ea94 0f0c 	teqne	r4, ip
  40b270:	ea95 0f0c 	teqne	r5, ip
  40b274:	f000 f8a7 	bleq	40b3c6 <__aeabi_ddiv+0x16e>
  40b278:	eba4 0405 	sub.w	r4, r4, r5
  40b27c:	ea81 0e03 	eor.w	lr, r1, r3
  40b280:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40b284:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40b288:	f000 8088 	beq.w	40b39c <__aeabi_ddiv+0x144>
  40b28c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40b290:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40b294:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40b298:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40b29c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40b2a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40b2a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40b2a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40b2ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40b2b0:	429d      	cmp	r5, r3
  40b2b2:	bf08      	it	eq
  40b2b4:	4296      	cmpeq	r6, r2
  40b2b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40b2ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40b2be:	d202      	bcs.n	40b2c6 <__aeabi_ddiv+0x6e>
  40b2c0:	085b      	lsrs	r3, r3, #1
  40b2c2:	ea4f 0232 	mov.w	r2, r2, rrx
  40b2c6:	1ab6      	subs	r6, r6, r2
  40b2c8:	eb65 0503 	sbc.w	r5, r5, r3
  40b2cc:	085b      	lsrs	r3, r3, #1
  40b2ce:	ea4f 0232 	mov.w	r2, r2, rrx
  40b2d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40b2d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40b2da:	ebb6 0e02 	subs.w	lr, r6, r2
  40b2de:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b2e2:	bf22      	ittt	cs
  40b2e4:	1ab6      	subcs	r6, r6, r2
  40b2e6:	4675      	movcs	r5, lr
  40b2e8:	ea40 000c 	orrcs.w	r0, r0, ip
  40b2ec:	085b      	lsrs	r3, r3, #1
  40b2ee:	ea4f 0232 	mov.w	r2, r2, rrx
  40b2f2:	ebb6 0e02 	subs.w	lr, r6, r2
  40b2f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b2fa:	bf22      	ittt	cs
  40b2fc:	1ab6      	subcs	r6, r6, r2
  40b2fe:	4675      	movcs	r5, lr
  40b300:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40b304:	085b      	lsrs	r3, r3, #1
  40b306:	ea4f 0232 	mov.w	r2, r2, rrx
  40b30a:	ebb6 0e02 	subs.w	lr, r6, r2
  40b30e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b312:	bf22      	ittt	cs
  40b314:	1ab6      	subcs	r6, r6, r2
  40b316:	4675      	movcs	r5, lr
  40b318:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40b31c:	085b      	lsrs	r3, r3, #1
  40b31e:	ea4f 0232 	mov.w	r2, r2, rrx
  40b322:	ebb6 0e02 	subs.w	lr, r6, r2
  40b326:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b32a:	bf22      	ittt	cs
  40b32c:	1ab6      	subcs	r6, r6, r2
  40b32e:	4675      	movcs	r5, lr
  40b330:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40b334:	ea55 0e06 	orrs.w	lr, r5, r6
  40b338:	d018      	beq.n	40b36c <__aeabi_ddiv+0x114>
  40b33a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40b33e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40b342:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40b346:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40b34a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40b34e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40b352:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40b356:	d1c0      	bne.n	40b2da <__aeabi_ddiv+0x82>
  40b358:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b35c:	d10b      	bne.n	40b376 <__aeabi_ddiv+0x11e>
  40b35e:	ea41 0100 	orr.w	r1, r1, r0
  40b362:	f04f 0000 	mov.w	r0, #0
  40b366:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40b36a:	e7b6      	b.n	40b2da <__aeabi_ddiv+0x82>
  40b36c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b370:	bf04      	itt	eq
  40b372:	4301      	orreq	r1, r0
  40b374:	2000      	moveq	r0, #0
  40b376:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40b37a:	bf88      	it	hi
  40b37c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40b380:	f63f aeaf 	bhi.w	40b0e2 <__aeabi_dmul+0xde>
  40b384:	ebb5 0c03 	subs.w	ip, r5, r3
  40b388:	bf04      	itt	eq
  40b38a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40b38e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40b392:	f150 0000 	adcs.w	r0, r0, #0
  40b396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b39a:	bd70      	pop	{r4, r5, r6, pc}
  40b39c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40b3a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40b3a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40b3a8:	bfc2      	ittt	gt
  40b3aa:	ebd4 050c 	rsbsgt	r5, r4, ip
  40b3ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40b3b2:	bd70      	popgt	{r4, r5, r6, pc}
  40b3b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b3b8:	f04f 0e00 	mov.w	lr, #0
  40b3bc:	3c01      	subs	r4, #1
  40b3be:	e690      	b.n	40b0e2 <__aeabi_dmul+0xde>
  40b3c0:	ea45 0e06 	orr.w	lr, r5, r6
  40b3c4:	e68d      	b.n	40b0e2 <__aeabi_dmul+0xde>
  40b3c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40b3ca:	ea94 0f0c 	teq	r4, ip
  40b3ce:	bf08      	it	eq
  40b3d0:	ea95 0f0c 	teqeq	r5, ip
  40b3d4:	f43f af3b 	beq.w	40b24e <__aeabi_dmul+0x24a>
  40b3d8:	ea94 0f0c 	teq	r4, ip
  40b3dc:	d10a      	bne.n	40b3f4 <__aeabi_ddiv+0x19c>
  40b3de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40b3e2:	f47f af34 	bne.w	40b24e <__aeabi_dmul+0x24a>
  40b3e6:	ea95 0f0c 	teq	r5, ip
  40b3ea:	f47f af25 	bne.w	40b238 <__aeabi_dmul+0x234>
  40b3ee:	4610      	mov	r0, r2
  40b3f0:	4619      	mov	r1, r3
  40b3f2:	e72c      	b.n	40b24e <__aeabi_dmul+0x24a>
  40b3f4:	ea95 0f0c 	teq	r5, ip
  40b3f8:	d106      	bne.n	40b408 <__aeabi_ddiv+0x1b0>
  40b3fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40b3fe:	f43f aefd 	beq.w	40b1fc <__aeabi_dmul+0x1f8>
  40b402:	4610      	mov	r0, r2
  40b404:	4619      	mov	r1, r3
  40b406:	e722      	b.n	40b24e <__aeabi_dmul+0x24a>
  40b408:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b40c:	bf18      	it	ne
  40b40e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b412:	f47f aec5 	bne.w	40b1a0 <__aeabi_dmul+0x19c>
  40b416:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40b41a:	f47f af0d 	bne.w	40b238 <__aeabi_dmul+0x234>
  40b41e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40b422:	f47f aeeb 	bne.w	40b1fc <__aeabi_dmul+0x1f8>
  40b426:	e712      	b.n	40b24e <__aeabi_dmul+0x24a>

0040b428 <__gedf2>:
  40b428:	f04f 3cff 	mov.w	ip, #4294967295
  40b42c:	e006      	b.n	40b43c <__cmpdf2+0x4>
  40b42e:	bf00      	nop

0040b430 <__ledf2>:
  40b430:	f04f 0c01 	mov.w	ip, #1
  40b434:	e002      	b.n	40b43c <__cmpdf2+0x4>
  40b436:	bf00      	nop

0040b438 <__cmpdf2>:
  40b438:	f04f 0c01 	mov.w	ip, #1
  40b43c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40b440:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40b444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b448:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40b44c:	bf18      	it	ne
  40b44e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40b452:	d01b      	beq.n	40b48c <__cmpdf2+0x54>
  40b454:	b001      	add	sp, #4
  40b456:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40b45a:	bf0c      	ite	eq
  40b45c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40b460:	ea91 0f03 	teqne	r1, r3
  40b464:	bf02      	ittt	eq
  40b466:	ea90 0f02 	teqeq	r0, r2
  40b46a:	2000      	moveq	r0, #0
  40b46c:	4770      	bxeq	lr
  40b46e:	f110 0f00 	cmn.w	r0, #0
  40b472:	ea91 0f03 	teq	r1, r3
  40b476:	bf58      	it	pl
  40b478:	4299      	cmppl	r1, r3
  40b47a:	bf08      	it	eq
  40b47c:	4290      	cmpeq	r0, r2
  40b47e:	bf2c      	ite	cs
  40b480:	17d8      	asrcs	r0, r3, #31
  40b482:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40b486:	f040 0001 	orr.w	r0, r0, #1
  40b48a:	4770      	bx	lr
  40b48c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40b490:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b494:	d102      	bne.n	40b49c <__cmpdf2+0x64>
  40b496:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40b49a:	d107      	bne.n	40b4ac <__cmpdf2+0x74>
  40b49c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40b4a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b4a4:	d1d6      	bne.n	40b454 <__cmpdf2+0x1c>
  40b4a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40b4aa:	d0d3      	beq.n	40b454 <__cmpdf2+0x1c>
  40b4ac:	f85d 0b04 	ldr.w	r0, [sp], #4
  40b4b0:	4770      	bx	lr
  40b4b2:	bf00      	nop

0040b4b4 <__aeabi_cdrcmple>:
  40b4b4:	4684      	mov	ip, r0
  40b4b6:	4610      	mov	r0, r2
  40b4b8:	4662      	mov	r2, ip
  40b4ba:	468c      	mov	ip, r1
  40b4bc:	4619      	mov	r1, r3
  40b4be:	4663      	mov	r3, ip
  40b4c0:	e000      	b.n	40b4c4 <__aeabi_cdcmpeq>
  40b4c2:	bf00      	nop

0040b4c4 <__aeabi_cdcmpeq>:
  40b4c4:	b501      	push	{r0, lr}
  40b4c6:	f7ff ffb7 	bl	40b438 <__cmpdf2>
  40b4ca:	2800      	cmp	r0, #0
  40b4cc:	bf48      	it	mi
  40b4ce:	f110 0f00 	cmnmi.w	r0, #0
  40b4d2:	bd01      	pop	{r0, pc}

0040b4d4 <__aeabi_dcmpeq>:
  40b4d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b4d8:	f7ff fff4 	bl	40b4c4 <__aeabi_cdcmpeq>
  40b4dc:	bf0c      	ite	eq
  40b4de:	2001      	moveq	r0, #1
  40b4e0:	2000      	movne	r0, #0
  40b4e2:	f85d fb08 	ldr.w	pc, [sp], #8
  40b4e6:	bf00      	nop

0040b4e8 <__aeabi_dcmplt>:
  40b4e8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b4ec:	f7ff ffea 	bl	40b4c4 <__aeabi_cdcmpeq>
  40b4f0:	bf34      	ite	cc
  40b4f2:	2001      	movcc	r0, #1
  40b4f4:	2000      	movcs	r0, #0
  40b4f6:	f85d fb08 	ldr.w	pc, [sp], #8
  40b4fa:	bf00      	nop

0040b4fc <__aeabi_dcmple>:
  40b4fc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b500:	f7ff ffe0 	bl	40b4c4 <__aeabi_cdcmpeq>
  40b504:	bf94      	ite	ls
  40b506:	2001      	movls	r0, #1
  40b508:	2000      	movhi	r0, #0
  40b50a:	f85d fb08 	ldr.w	pc, [sp], #8
  40b50e:	bf00      	nop

0040b510 <__aeabi_dcmpge>:
  40b510:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b514:	f7ff ffce 	bl	40b4b4 <__aeabi_cdrcmple>
  40b518:	bf94      	ite	ls
  40b51a:	2001      	movls	r0, #1
  40b51c:	2000      	movhi	r0, #0
  40b51e:	f85d fb08 	ldr.w	pc, [sp], #8
  40b522:	bf00      	nop

0040b524 <__aeabi_dcmpgt>:
  40b524:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b528:	f7ff ffc4 	bl	40b4b4 <__aeabi_cdrcmple>
  40b52c:	bf34      	ite	cc
  40b52e:	2001      	movcc	r0, #1
  40b530:	2000      	movcs	r0, #0
  40b532:	f85d fb08 	ldr.w	pc, [sp], #8
  40b536:	bf00      	nop

0040b538 <__aeabi_dcmpun>:
  40b538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40b53c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b540:	d102      	bne.n	40b548 <__aeabi_dcmpun+0x10>
  40b542:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40b546:	d10a      	bne.n	40b55e <__aeabi_dcmpun+0x26>
  40b548:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40b54c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b550:	d102      	bne.n	40b558 <__aeabi_dcmpun+0x20>
  40b552:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40b556:	d102      	bne.n	40b55e <__aeabi_dcmpun+0x26>
  40b558:	f04f 0000 	mov.w	r0, #0
  40b55c:	4770      	bx	lr
  40b55e:	f04f 0001 	mov.w	r0, #1
  40b562:	4770      	bx	lr

0040b564 <__aeabi_d2iz>:
  40b564:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b568:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40b56c:	d215      	bcs.n	40b59a <__aeabi_d2iz+0x36>
  40b56e:	d511      	bpl.n	40b594 <__aeabi_d2iz+0x30>
  40b570:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40b574:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40b578:	d912      	bls.n	40b5a0 <__aeabi_d2iz+0x3c>
  40b57a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b57e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b582:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40b586:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b58a:	fa23 f002 	lsr.w	r0, r3, r2
  40b58e:	bf18      	it	ne
  40b590:	4240      	negne	r0, r0
  40b592:	4770      	bx	lr
  40b594:	f04f 0000 	mov.w	r0, #0
  40b598:	4770      	bx	lr
  40b59a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40b59e:	d105      	bne.n	40b5ac <__aeabi_d2iz+0x48>
  40b5a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40b5a4:	bf08      	it	eq
  40b5a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b5aa:	4770      	bx	lr
  40b5ac:	f04f 0000 	mov.w	r0, #0
  40b5b0:	4770      	bx	lr
  40b5b2:	bf00      	nop

0040b5b4 <__aeabi_uldivmod>:
  40b5b4:	b953      	cbnz	r3, 40b5cc <__aeabi_uldivmod+0x18>
  40b5b6:	b94a      	cbnz	r2, 40b5cc <__aeabi_uldivmod+0x18>
  40b5b8:	2900      	cmp	r1, #0
  40b5ba:	bf08      	it	eq
  40b5bc:	2800      	cmpeq	r0, #0
  40b5be:	bf1c      	itt	ne
  40b5c0:	f04f 31ff 	movne.w	r1, #4294967295
  40b5c4:	f04f 30ff 	movne.w	r0, #4294967295
  40b5c8:	f000 b97e 	b.w	40b8c8 <__aeabi_idiv0>
  40b5cc:	f1ad 0c08 	sub.w	ip, sp, #8
  40b5d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40b5d4:	f000 f806 	bl	40b5e4 <__udivmoddi4>
  40b5d8:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b5dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b5e0:	b004      	add	sp, #16
  40b5e2:	4770      	bx	lr

0040b5e4 <__udivmoddi4>:
  40b5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b5e8:	468c      	mov	ip, r1
  40b5ea:	460e      	mov	r6, r1
  40b5ec:	4604      	mov	r4, r0
  40b5ee:	9d08      	ldr	r5, [sp, #32]
  40b5f0:	2b00      	cmp	r3, #0
  40b5f2:	d150      	bne.n	40b696 <__udivmoddi4+0xb2>
  40b5f4:	428a      	cmp	r2, r1
  40b5f6:	4617      	mov	r7, r2
  40b5f8:	d96c      	bls.n	40b6d4 <__udivmoddi4+0xf0>
  40b5fa:	fab2 fe82 	clz	lr, r2
  40b5fe:	f1be 0f00 	cmp.w	lr, #0
  40b602:	d00b      	beq.n	40b61c <__udivmoddi4+0x38>
  40b604:	f1ce 0420 	rsb	r4, lr, #32
  40b608:	fa20 f404 	lsr.w	r4, r0, r4
  40b60c:	fa01 f60e 	lsl.w	r6, r1, lr
  40b610:	ea44 0c06 	orr.w	ip, r4, r6
  40b614:	fa02 f70e 	lsl.w	r7, r2, lr
  40b618:	fa00 f40e 	lsl.w	r4, r0, lr
  40b61c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40b620:	0c22      	lsrs	r2, r4, #16
  40b622:	fbbc f0f9 	udiv	r0, ip, r9
  40b626:	fa1f f887 	uxth.w	r8, r7
  40b62a:	fb09 c610 	mls	r6, r9, r0, ip
  40b62e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40b632:	fb00 f308 	mul.w	r3, r0, r8
  40b636:	42b3      	cmp	r3, r6
  40b638:	d909      	bls.n	40b64e <__udivmoddi4+0x6a>
  40b63a:	19f6      	adds	r6, r6, r7
  40b63c:	f100 32ff 	add.w	r2, r0, #4294967295
  40b640:	f080 8122 	bcs.w	40b888 <__udivmoddi4+0x2a4>
  40b644:	42b3      	cmp	r3, r6
  40b646:	f240 811f 	bls.w	40b888 <__udivmoddi4+0x2a4>
  40b64a:	3802      	subs	r0, #2
  40b64c:	443e      	add	r6, r7
  40b64e:	1af6      	subs	r6, r6, r3
  40b650:	b2a2      	uxth	r2, r4
  40b652:	fbb6 f3f9 	udiv	r3, r6, r9
  40b656:	fb09 6613 	mls	r6, r9, r3, r6
  40b65a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40b65e:	fb03 f808 	mul.w	r8, r3, r8
  40b662:	45a0      	cmp	r8, r4
  40b664:	d909      	bls.n	40b67a <__udivmoddi4+0x96>
  40b666:	19e4      	adds	r4, r4, r7
  40b668:	f103 32ff 	add.w	r2, r3, #4294967295
  40b66c:	f080 810a 	bcs.w	40b884 <__udivmoddi4+0x2a0>
  40b670:	45a0      	cmp	r8, r4
  40b672:	f240 8107 	bls.w	40b884 <__udivmoddi4+0x2a0>
  40b676:	3b02      	subs	r3, #2
  40b678:	443c      	add	r4, r7
  40b67a:	ebc8 0404 	rsb	r4, r8, r4
  40b67e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40b682:	2100      	movs	r1, #0
  40b684:	2d00      	cmp	r5, #0
  40b686:	d062      	beq.n	40b74e <__udivmoddi4+0x16a>
  40b688:	fa24 f40e 	lsr.w	r4, r4, lr
  40b68c:	2300      	movs	r3, #0
  40b68e:	602c      	str	r4, [r5, #0]
  40b690:	606b      	str	r3, [r5, #4]
  40b692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b696:	428b      	cmp	r3, r1
  40b698:	d907      	bls.n	40b6aa <__udivmoddi4+0xc6>
  40b69a:	2d00      	cmp	r5, #0
  40b69c:	d055      	beq.n	40b74a <__udivmoddi4+0x166>
  40b69e:	2100      	movs	r1, #0
  40b6a0:	e885 0041 	stmia.w	r5, {r0, r6}
  40b6a4:	4608      	mov	r0, r1
  40b6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b6aa:	fab3 f183 	clz	r1, r3
  40b6ae:	2900      	cmp	r1, #0
  40b6b0:	f040 8090 	bne.w	40b7d4 <__udivmoddi4+0x1f0>
  40b6b4:	42b3      	cmp	r3, r6
  40b6b6:	d302      	bcc.n	40b6be <__udivmoddi4+0xda>
  40b6b8:	4282      	cmp	r2, r0
  40b6ba:	f200 80f8 	bhi.w	40b8ae <__udivmoddi4+0x2ca>
  40b6be:	1a84      	subs	r4, r0, r2
  40b6c0:	eb66 0603 	sbc.w	r6, r6, r3
  40b6c4:	2001      	movs	r0, #1
  40b6c6:	46b4      	mov	ip, r6
  40b6c8:	2d00      	cmp	r5, #0
  40b6ca:	d040      	beq.n	40b74e <__udivmoddi4+0x16a>
  40b6cc:	e885 1010 	stmia.w	r5, {r4, ip}
  40b6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b6d4:	b912      	cbnz	r2, 40b6dc <__udivmoddi4+0xf8>
  40b6d6:	2701      	movs	r7, #1
  40b6d8:	fbb7 f7f2 	udiv	r7, r7, r2
  40b6dc:	fab7 fe87 	clz	lr, r7
  40b6e0:	f1be 0f00 	cmp.w	lr, #0
  40b6e4:	d135      	bne.n	40b752 <__udivmoddi4+0x16e>
  40b6e6:	1bf3      	subs	r3, r6, r7
  40b6e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40b6ec:	fa1f fc87 	uxth.w	ip, r7
  40b6f0:	2101      	movs	r1, #1
  40b6f2:	fbb3 f0f8 	udiv	r0, r3, r8
  40b6f6:	0c22      	lsrs	r2, r4, #16
  40b6f8:	fb08 3610 	mls	r6, r8, r0, r3
  40b6fc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40b700:	fb0c f300 	mul.w	r3, ip, r0
  40b704:	42b3      	cmp	r3, r6
  40b706:	d907      	bls.n	40b718 <__udivmoddi4+0x134>
  40b708:	19f6      	adds	r6, r6, r7
  40b70a:	f100 32ff 	add.w	r2, r0, #4294967295
  40b70e:	d202      	bcs.n	40b716 <__udivmoddi4+0x132>
  40b710:	42b3      	cmp	r3, r6
  40b712:	f200 80ce 	bhi.w	40b8b2 <__udivmoddi4+0x2ce>
  40b716:	4610      	mov	r0, r2
  40b718:	1af6      	subs	r6, r6, r3
  40b71a:	b2a2      	uxth	r2, r4
  40b71c:	fbb6 f3f8 	udiv	r3, r6, r8
  40b720:	fb08 6613 	mls	r6, r8, r3, r6
  40b724:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40b728:	fb0c fc03 	mul.w	ip, ip, r3
  40b72c:	45a4      	cmp	ip, r4
  40b72e:	d907      	bls.n	40b740 <__udivmoddi4+0x15c>
  40b730:	19e4      	adds	r4, r4, r7
  40b732:	f103 32ff 	add.w	r2, r3, #4294967295
  40b736:	d202      	bcs.n	40b73e <__udivmoddi4+0x15a>
  40b738:	45a4      	cmp	ip, r4
  40b73a:	f200 80b5 	bhi.w	40b8a8 <__udivmoddi4+0x2c4>
  40b73e:	4613      	mov	r3, r2
  40b740:	ebcc 0404 	rsb	r4, ip, r4
  40b744:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40b748:	e79c      	b.n	40b684 <__udivmoddi4+0xa0>
  40b74a:	4629      	mov	r1, r5
  40b74c:	4628      	mov	r0, r5
  40b74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b752:	f1ce 0120 	rsb	r1, lr, #32
  40b756:	fa06 f30e 	lsl.w	r3, r6, lr
  40b75a:	fa07 f70e 	lsl.w	r7, r7, lr
  40b75e:	fa20 f901 	lsr.w	r9, r0, r1
  40b762:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40b766:	40ce      	lsrs	r6, r1
  40b768:	ea49 0903 	orr.w	r9, r9, r3
  40b76c:	fbb6 faf8 	udiv	sl, r6, r8
  40b770:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40b774:	fb08 661a 	mls	r6, r8, sl, r6
  40b778:	fa1f fc87 	uxth.w	ip, r7
  40b77c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40b780:	fb0a f20c 	mul.w	r2, sl, ip
  40b784:	429a      	cmp	r2, r3
  40b786:	fa00 f40e 	lsl.w	r4, r0, lr
  40b78a:	d90a      	bls.n	40b7a2 <__udivmoddi4+0x1be>
  40b78c:	19db      	adds	r3, r3, r7
  40b78e:	f10a 31ff 	add.w	r1, sl, #4294967295
  40b792:	f080 8087 	bcs.w	40b8a4 <__udivmoddi4+0x2c0>
  40b796:	429a      	cmp	r2, r3
  40b798:	f240 8084 	bls.w	40b8a4 <__udivmoddi4+0x2c0>
  40b79c:	f1aa 0a02 	sub.w	sl, sl, #2
  40b7a0:	443b      	add	r3, r7
  40b7a2:	1a9b      	subs	r3, r3, r2
  40b7a4:	fa1f f989 	uxth.w	r9, r9
  40b7a8:	fbb3 f1f8 	udiv	r1, r3, r8
  40b7ac:	fb08 3311 	mls	r3, r8, r1, r3
  40b7b0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40b7b4:	fb01 f60c 	mul.w	r6, r1, ip
  40b7b8:	429e      	cmp	r6, r3
  40b7ba:	d907      	bls.n	40b7cc <__udivmoddi4+0x1e8>
  40b7bc:	19db      	adds	r3, r3, r7
  40b7be:	f101 32ff 	add.w	r2, r1, #4294967295
  40b7c2:	d26b      	bcs.n	40b89c <__udivmoddi4+0x2b8>
  40b7c4:	429e      	cmp	r6, r3
  40b7c6:	d969      	bls.n	40b89c <__udivmoddi4+0x2b8>
  40b7c8:	3902      	subs	r1, #2
  40b7ca:	443b      	add	r3, r7
  40b7cc:	1b9b      	subs	r3, r3, r6
  40b7ce:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40b7d2:	e78e      	b.n	40b6f2 <__udivmoddi4+0x10e>
  40b7d4:	f1c1 0e20 	rsb	lr, r1, #32
  40b7d8:	fa22 f40e 	lsr.w	r4, r2, lr
  40b7dc:	408b      	lsls	r3, r1
  40b7de:	4323      	orrs	r3, r4
  40b7e0:	fa20 f70e 	lsr.w	r7, r0, lr
  40b7e4:	fa06 f401 	lsl.w	r4, r6, r1
  40b7e8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40b7ec:	fa26 f60e 	lsr.w	r6, r6, lr
  40b7f0:	433c      	orrs	r4, r7
  40b7f2:	fbb6 f9fc 	udiv	r9, r6, ip
  40b7f6:	0c27      	lsrs	r7, r4, #16
  40b7f8:	fb0c 6619 	mls	r6, ip, r9, r6
  40b7fc:	fa1f f883 	uxth.w	r8, r3
  40b800:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40b804:	fb09 f708 	mul.w	r7, r9, r8
  40b808:	42b7      	cmp	r7, r6
  40b80a:	fa02 f201 	lsl.w	r2, r2, r1
  40b80e:	fa00 fa01 	lsl.w	sl, r0, r1
  40b812:	d908      	bls.n	40b826 <__udivmoddi4+0x242>
  40b814:	18f6      	adds	r6, r6, r3
  40b816:	f109 30ff 	add.w	r0, r9, #4294967295
  40b81a:	d241      	bcs.n	40b8a0 <__udivmoddi4+0x2bc>
  40b81c:	42b7      	cmp	r7, r6
  40b81e:	d93f      	bls.n	40b8a0 <__udivmoddi4+0x2bc>
  40b820:	f1a9 0902 	sub.w	r9, r9, #2
  40b824:	441e      	add	r6, r3
  40b826:	1bf6      	subs	r6, r6, r7
  40b828:	b2a0      	uxth	r0, r4
  40b82a:	fbb6 f4fc 	udiv	r4, r6, ip
  40b82e:	fb0c 6614 	mls	r6, ip, r4, r6
  40b832:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40b836:	fb04 f808 	mul.w	r8, r4, r8
  40b83a:	45b8      	cmp	r8, r7
  40b83c:	d907      	bls.n	40b84e <__udivmoddi4+0x26a>
  40b83e:	18ff      	adds	r7, r7, r3
  40b840:	f104 30ff 	add.w	r0, r4, #4294967295
  40b844:	d228      	bcs.n	40b898 <__udivmoddi4+0x2b4>
  40b846:	45b8      	cmp	r8, r7
  40b848:	d926      	bls.n	40b898 <__udivmoddi4+0x2b4>
  40b84a:	3c02      	subs	r4, #2
  40b84c:	441f      	add	r7, r3
  40b84e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40b852:	ebc8 0707 	rsb	r7, r8, r7
  40b856:	fba0 8902 	umull	r8, r9, r0, r2
  40b85a:	454f      	cmp	r7, r9
  40b85c:	4644      	mov	r4, r8
  40b85e:	464e      	mov	r6, r9
  40b860:	d314      	bcc.n	40b88c <__udivmoddi4+0x2a8>
  40b862:	d029      	beq.n	40b8b8 <__udivmoddi4+0x2d4>
  40b864:	b365      	cbz	r5, 40b8c0 <__udivmoddi4+0x2dc>
  40b866:	ebba 0304 	subs.w	r3, sl, r4
  40b86a:	eb67 0706 	sbc.w	r7, r7, r6
  40b86e:	fa07 fe0e 	lsl.w	lr, r7, lr
  40b872:	40cb      	lsrs	r3, r1
  40b874:	40cf      	lsrs	r7, r1
  40b876:	ea4e 0303 	orr.w	r3, lr, r3
  40b87a:	e885 0088 	stmia.w	r5, {r3, r7}
  40b87e:	2100      	movs	r1, #0
  40b880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b884:	4613      	mov	r3, r2
  40b886:	e6f8      	b.n	40b67a <__udivmoddi4+0x96>
  40b888:	4610      	mov	r0, r2
  40b88a:	e6e0      	b.n	40b64e <__udivmoddi4+0x6a>
  40b88c:	ebb8 0402 	subs.w	r4, r8, r2
  40b890:	eb69 0603 	sbc.w	r6, r9, r3
  40b894:	3801      	subs	r0, #1
  40b896:	e7e5      	b.n	40b864 <__udivmoddi4+0x280>
  40b898:	4604      	mov	r4, r0
  40b89a:	e7d8      	b.n	40b84e <__udivmoddi4+0x26a>
  40b89c:	4611      	mov	r1, r2
  40b89e:	e795      	b.n	40b7cc <__udivmoddi4+0x1e8>
  40b8a0:	4681      	mov	r9, r0
  40b8a2:	e7c0      	b.n	40b826 <__udivmoddi4+0x242>
  40b8a4:	468a      	mov	sl, r1
  40b8a6:	e77c      	b.n	40b7a2 <__udivmoddi4+0x1be>
  40b8a8:	3b02      	subs	r3, #2
  40b8aa:	443c      	add	r4, r7
  40b8ac:	e748      	b.n	40b740 <__udivmoddi4+0x15c>
  40b8ae:	4608      	mov	r0, r1
  40b8b0:	e70a      	b.n	40b6c8 <__udivmoddi4+0xe4>
  40b8b2:	3802      	subs	r0, #2
  40b8b4:	443e      	add	r6, r7
  40b8b6:	e72f      	b.n	40b718 <__udivmoddi4+0x134>
  40b8b8:	45c2      	cmp	sl, r8
  40b8ba:	d3e7      	bcc.n	40b88c <__udivmoddi4+0x2a8>
  40b8bc:	463e      	mov	r6, r7
  40b8be:	e7d1      	b.n	40b864 <__udivmoddi4+0x280>
  40b8c0:	4629      	mov	r1, r5
  40b8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b8c6:	bf00      	nop

0040b8c8 <__aeabi_idiv0>:
  40b8c8:	4770      	bx	lr
  40b8ca:	bf00      	nop

0040b8cc <sd_trans_multipliers>:
  40b8cc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40b8dc:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  40b8ec:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  40b8fc:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040b90c <sd_mmc_trans_units>:
  40b90c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0040b928 <mmc_trans_multipliers>:
  40b928:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40b938:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  40b948:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  40b958:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040b968 <__FUNCTION__.10333>:
  40b968:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  40b978:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  40b988:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  40b998:	204c 6f63 6d6d 6e61 2164 000a               L command!..

0040b9a4 <__FUNCTION__.8784>:
  40b9a4:	6968 5f66 7369 0072                         hif_isr.

0040b9ac <__FUNCTION__.8805>:
  40b9ac:	6968 5f66 6572 6563 7669 0065 4828 4649     hif_receive.(HIF
  40b9bc:	4629 6961 206c 6f74 7720 6b61 7075 7420     )Fail to wakup t
  40b9cc:	6568 6320 6968 0a70 0000 0000 6828 6669     he chip.....(hif
  40b9dc:	2029 4957 4946 485f 534f 5f54 4352 5f56     ) WIFI_HOST_RCV_
  40b9ec:	5443 4c52 315f 6220 7375 6620 6961 0a6c     CTRL_1 bus fail.
  40b9fc:	0000 0000 6828 6669 2029 6461 7264 7365     ....(hif) addres
  40ba0c:	2073 7562 2073 6166 6c69 000a 6828 6669     s bus fail..(hif
  40ba1c:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
  40ba2c:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
  40ba3c:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
  40ba4c:	3d20 2520 3230 3e58 000a 0000 6828 6669      = %02X>....(hif
  40ba5c:	2029 6e69 6176 696c 2064 7267 756f 2070     ) invalid group 
  40ba6c:	4449 000a 6828 6669 2029 6f68 7473 6120     ID..(hif) host a
  40ba7c:	7070 6420 6469 276e 2074 6573 2074 5852     pp didn't set RX
  40ba8c:	4420 6e6f 0a65 0000 6828 6669 2029 7257      Done...(hif) Wr
  40ba9c:	6e6f 2067 6953 657a 000a 0000 6828 6669     ong Size....(hif
  40baac:	2029 6146 736c 2065 6e69 6574 7272 7075     ) False interrup
  40babc:	2074 6c25 0078 0000 6828 6669 2029 6146     t %lx...(hif) Fa
  40bacc:	6c69 7420 206f 6552 6461 6920 746e 7265     il to Read inter
  40badc:	7572 7470 7220 6765 000a 0000 6828 6669     rupt reg....(hif
  40baec:	2029 4146 4c49 7420 206f 6177 656b 7075     ) FAIL to wakeup
  40bafc:	7420 6568 6320 6968 0a70 0000 4828 4649      the chip...(HIF
  40bb0c:	2029 6146 6c69 7420 206f 6168 646e 656c     ) Fail to handle
  40bb1c:	6920 746e 7265 7572 7470 2520 2064 7274      interrupt %d tr
  40bb2c:	2079 6741 6961 2e6e 0a2e 0000 6820 6669     y Again..... hif
  40bb3c:	725f 6365 6965 6576 203a 6e49 6176 696c     _receive: Invali
  40bb4c:	2064 7261 7567 656d 746e 000a 5041 2050     d argument..APP 
  40bb5c:	6552 7571 7365 6574 2064 6953 657a 6920     Requested Size i
  40bb6c:	2073 616c 6772 7265 7420 6168 206e 6874     s larger than th
  40bb7c:	2065 6572 6963 6576 2064 7562 6666 7265     e recived buffer
  40bb8c:	7320 7a69 2065 253c 3e64 253c 3e64 000a      size <%d><%d>..
  40bb9c:	5041 2050 6552 7571 7365 6574 2064 6441     APP Requested Ad
  40bbac:	7264 7365 2073 6562 6f79 646e 7420 6568     dress beyond the
  40bbbc:	7220 6365 7669 6465 6220 6675 6566 2072      recived buffer 
  40bbcc:	6461 7264 7365 2073 6e61 2064 656c 676e     address and leng
  40bbdc:	6874 000a 5247 2070 203f 6425 000a 0000     th..GRp ? %d....

0040bbec <__FUNCTION__.8820>:
  40bbec:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.

0040bbfc <__FUNCTION__.8774>:
  40bbfc:	6968 5f66 6573 646e 0000 0000               hif_send....

0040bc08 <__FUNCTION__.8790>:
  40bc08:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0040bc18 <__FUNCTION__.8799>:
  40bc18:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  40bc28:	735f 0063                                   _sc.

0040bc2c <__FUNCTION__.8747>:
  40bc2c:	326d 5f6d 6977 6966 635f 0062 4128 5050     m2m_wifi_cb.(APP
  40bc3c:	2829 4e49 4f46 0029 6f43 666e 696c 7463     )(INFO).Conflict
  40bc4c:	6465 4920 2050 2022 7525 252e 2e75 7525     ed IP " %u.%u.%u
  40bc5c:	252e 2075 2022 000a 4552 2051 6f4e 2074     .%u " ..REQ Not 
  40bc6c:	6564 6966 656e 2064 6425 000a 4e49 4156     defined %d..INVA
  40bc7c:	494c 2044 4f50 4e49 4554 0a52 0000 0000     LID POINTER.....
  40bc8c:	4e49 4156 494c 2044 5353 4449 000a 0000     INVALID SSID....
  40bc9c:	4e49 4156 494c 2044 4843 000a 4e49 4156     INVALID CH..INVA
  40bcac:	494c 2044 4844 5043 5320 5245 4556 2052     LID DHCP SERVER 
  40bcbc:	5049 000a 4e49 4156 494c 2044 454b 2059     IP..INVALID KEY 
  40bccc:	4e49 4544 0a58 0000 4e49 4156 494c 2044     INDEX...INVALID 
  40bcdc:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
  40bcec:	494c 2044 4557 2050 454b 0a59 0000 0000     LID WEP KEY.....
  40bcfc:	4e49 4156 494c 2044 5541 4854 4e45 4954     INVALID AUTHENTI
  40bd0c:	4143 4954 4e4f 4d20 444f 0a45 0000 0000     CATION MODE.....
  40bd1c:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
  40bd2c:	2520 2e75 7525 252e 0a75 0000 694d 206e      %u.%u.%u...Min 
  40bd3c:	7264 7669 7265 7620 7265 3a20 2520 2e75     driver ver : %u.
  40bd4c:	7525 252e 0a75 0000 7543 7272 6420 6972     %u.%u...Curr dri
  40bd5c:	6576 2072 6576 3a72 2520 2e75 7525 252e     ver ver: %u.%u.%
  40bd6c:	0a75 0000 694d 6d73 7461 6863 4620 7269     u...Mismatch Fir
  40bd7c:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
  40bd8c:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
  40bd9c:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
  40bdac:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
  40bdbc:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
  40bdcc:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
  40bddc:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
  40bdec:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
  40bdfc:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
  40be0c:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
  40be1c:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
  40be2c:	2064 6573 2063 7974 6570 000a 4e49 4156     d sec type..INVA
  40be3c:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
  40be4c:	6f6c 7374 0a21 0000 4e49 4156 494c 2044     lots!...INVALID 
  40be5c:	6373 6e61 7320 6f6c 2074 6974 656d 0a21     scan slot time!.
  40be6c:	0000 0000 4e49 4156 494c 2044 6f4e 6f20     ....INVALID No o
  40be7c:	2066 7270 626f 2065 6572 7571 7365 7374     f probe requests
  40be8c:	7020 7265 7320 6163 206e 6c73 746f 000a      per scan slot..
  40be9c:	4e49 4156 494c 2044 5352 4953 7420 7268     INVALID RSSI thr
  40beac:	7365 6f68 646c 2520 2064 000a 505f 5f53     eshold %d .._PS_
  40bebc:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
  40becc:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
  40bedc:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
  40beec:	796c 6220 2065 2c31 3620 6f20 2072 3131     ly be 1, 6 or 11
  40befc:	000a 0000 4f50 4557 2052 4153 4556 2520     ....POWER SAVE %
  40bf0c:	0a64 0000 4e49 4156 494c 2044 4f44 414d     d...INVALID DOMA
  40bf1c:	4e49 4e20 4d41 0a45 0000 0000 5250 474e     IN NAME.....PRNG
  40bf2c:	4220 6675 6566 2072 7865 6563 6465 6465      Buffer exceeded
  40bf3c:	6d20 7861 6d69 6d75 7320 7a69 2065 6425      maximum size %d
  40bf4c:	6f20 2072 554e 4c4c 4220 6675 6566 0a72      or NULL Buffer.
  40bf5c:	0000 0000                                   ....

0040bf60 <__FUNCTION__.8771>:
  40bf60:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0040bf70 <__FUNCTION__.8678>:
  40bf70:	6863 7069 645f 6965 696e 0074               chip_deinit.

0040bf7c <__FUNCTION__.8584>:
  40bf7c:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.
  40bf8c:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  40bf9c:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40bfac:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  40bfbc:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40bfcc:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  40bfdc:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  40bfec:	000a 0000 6e5b 696d 7320 6174 7472 3a5d     ....[nmi start]:
  40bffc:	6620 6961 206c 6572 6461 7220 6765 3020      fail read reg 0
  40c00c:	3178 3131 2038 2e2e 0a2e 0000 6572 3a67     x1118 ......reg:
  40c01c:	7825 2f20 2520 2078 000a 0000 6166 6c69     %x / %x ....fail
  40c02c:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  40c03c:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  40c04c:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  40c05c:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  40c06c:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  40c07c:	705b 6c75 756c 5f70 7463 6c72 3a5d 6620     [pullup_ctrl]: f
  40c08c:	6961 656c 2064 6f74 7220 6165 0a64 0000     ailed to read...
  40c09c:	705b 6c75 756c 5f70 7463 6c72 3a5d 6620     [pullup_ctrl]: f
  40c0ac:	6961 656c 2064 6f74 7720 6972 6574 000a     ailed to write..
  40c0bc:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  40c0cc:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  40c0dc:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
  40c0ec:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
  40c0fc:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
  40c10c:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
  40c11c:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
  40c12c:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
  40c13c:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
  40c14c:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
  40c15c:	6920 696e 2074 7562 0a73 0000                init bus...

0040c168 <__FUNCTION__.8665>:
  40c168:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0040c174 <__FUNCTION__.8672>:
  40c174:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

0040c184 <__FUNCTION__.8073>:
  40c184:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0040c194 <crc7_syndrome_table>:
  40c194:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  40c1a4:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  40c1b4:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  40c1c4:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  40c1d4:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  40c1e4:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  40c1f4:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  40c204:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  40c214:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  40c224:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  40c234:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  40c244:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  40c254:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  40c264:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  40c274:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  40c284:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy

0040c294 <__FUNCTION__.8140>:
  40c294:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0040c2a0 <__FUNCTION__.8088>:
  40c2a0:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0040c2b0 <__FUNCTION__.8123>:
  40c2b0:	6d6e 735f 6970 725f 6165 0064 6e5b 696d     nm_spi_read.[nmi
  40c2c0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40c2d0:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
  40c2e0:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  40c2f0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c300:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  40c310:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
  40c320:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40c330:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  40c340:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
  40c350:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
  40c360:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40c370:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
  40c380:	2e2e 0a2e 0000 0000 6e5b 696d 7320 6970     ........[nmi spi
  40c390:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  40c3a0:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
  40c3b0:	7375 6520 7272 726f 2e2e 0a2e 0000 0000     us error........
  40c3c0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c3d0:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
  40c3e0:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  40c3f0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40c400:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
  40c410:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
  40c420:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
  40c430:	7073 6e6f 6573 202c 7277 7469 2065 6572     sponse, write re
  40c440:	2067 2528 3830 2978 2e2e 0a2e 0000 0000     g (%08x)........
  40c450:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c460:	2064 6d63 2c64 7220 6165 2064 6572 2067     d cmd, read reg 
  40c470:	2528 3830 2978 2e2e 0a2e 0000 6e5b 696d     (%08x)......[nmi
  40c480:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40c490:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40c4a0:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  40c4b0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c4c0:	2064 6164 6174 7220 6165 2e64 2e2e 000a     d data read.....
  40c4d0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c4e0:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40c4f0:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  40c500:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  40c510:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  40c520:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c530:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40c540:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  40c550:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c560:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  40c570:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  40c580:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40c590:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  40c5a0:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  40c5b0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40c5c0:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  40c5d0:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  40c5e0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40c5f0:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40c600:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  40c610:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40c620:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  40c630:	7220 6165 2e64 2e2e 000a 0000 6e5b 696d      read.......[nmi
  40c640:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40c650:	2c64 7720 6972 6574 6220 6f6c 6b63 2820     d, write block (
  40c660:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
  40c670:	7320 6970 5d20 203a 6146 6c69 6465 6320      spi ]: Failed c
  40c680:	646d 7220 7365 6f70 736e 2c65 7720 6972     md response, wri
  40c690:	6574 6220 6f6c 6b63 2820 3025 7838 2e29     te block (%08x).
  40c6a0:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40c6b0:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40c6c0:	6320 646d 7720 6972 6574 202c 7562 2073      cmd write, bus 
  40c6d0:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  40c6e0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  40c6f0:	6174 6220 6f6c 6b63 7720 6972 6574 202c     ta block write, 
  40c700:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  40c710:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40c720:	2064 6164 6174 6220 6f6c 6b63 6320 6372     d data block crc
  40c730:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  40c740:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  40c750:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  40c760:	6164 6174 7720 6972 6574 2e2e 0a2e 0000     data write......

0040c770 <__FUNCTION__.8098>:
  40c770:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0040c780 <__FUNCTION__.8049>:
  40c780:	7073 5f69 6d63 0064                         spi_cmd.

0040c788 <__FUNCTION__.8106>:
  40c788:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0040c798 <__FUNCTION__.8057>:
  40c798:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0040c7a4 <__FUNCTION__.8115>:
  40c7a4:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....
  40c7b4:	4528 5252 2952 7543 7272 6e65 2074 253c     (ERRR)Current <%
  40c7c4:	3e64 000a 4e53 2049 7845 6563 6465 2073     d>..SNI Exceeds 
  40c7d4:	614d 2078 654c 676e 6874 000a 6e55 6e6b     Max Length..Unkn
  40c7e4:	776f 206e 5353 204c 6f53 6b63 7465 4f20     own SSL Socket O
  40c7f4:	7470 6f69 206e 6425 000a 0000 6f4e 2074     ption %d....Not 
  40c804:	5353 204c 6f53 6b63 7465 000a 4820 5454     SSL Socket.. HTT
  40c814:	2f50 2e31 0d31 200a 6341 6563 7470 203a     P/1.1.. Accept: 
  40c824:	2f2a 0d2a 0d0a 000a 4547 2054 662f 6c69     */*.....GET /fil
  40c834:	2f65 6574 7473 2e65 7874 0074 7325 7325     e/teste.txt.%s%s
  40c844:	0000 0000 6f73 6b63 7465 635f 3a62 6320     ....socket_cb: c
  40c854:	6e6f 656e 7463 7320 6375 6563 7373 0d21     onnect success!.
  40c864:	000a 0000 6f73 6b63 7465 635f 3a62 6320     ....socket_cb: c
  40c874:	6e6f 656e 7463 6520 7272 726f 0d21 000a     onnect error!...
  40c884:	6f73 6b63 7465 635f 3a62 7320 6e65 2064     socket_cb: send 
  40c894:	7573 6363 7365 2173 0a0d 0000 2d20 2d2d     success!.... ---
  40c8a4:	2d2d 2d2d 2d2d 202d 200a 6e43 2074 203a     ------- . Cnt : 
  40c8b4:	6425 0a20 2d20 2d2d 2d2d 2d2d 2d2d 2d2d     %d . -----------
  40c8c4:	000a 0000 7325 0d20 000a 0000 6f73 6b63     ....%s .....sock
  40c8d4:	7465 635f 3a62 7220 6365 2076 7265 6f72     et_cb: recv erro
  40c8e4:	2172 0a0d 0000 0000 6977 6966 635f 3a62     r!......wifi_cb:
  40c8f4:	4d20 4d32 575f 4649 5f49 4552 5053 435f      M2M_WIFI_RESP_C
  40c904:	4e4f 535f 4154 4554 435f 4148 474e 4445     ON_STATE_CHANGED
  40c914:	203a 4f43 4e4e 4345 4554 0d44 000a 0000     : CONNECTED.....
  40c924:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
  40c934:	5f49 4552 5053 435f 4e4f 535f 4154 4554     I_RESP_CON_STATE
  40c944:	435f 4148 474e 4445 203a 4944 4353 4e4f     _CHANGED: DISCON
  40c954:	454e 5443 4445 0a0d 0000 0000 3231 3433     NECTED......1234
  40c964:	3635 3837 0000 0000 504f 4e45 0000 0000     5678....OPEN....
  40c974:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
  40c984:	5f49 4552 5f51 4844 5043 435f 4e4f 3a46     I_REQ_DHCP_CONF:
  40c994:	4920 2050 7369 2520 2e75 7525 252e 2e75      IP is %u.%u.%u.
  40c9a4:	7525 0a0d 0000 0000 2d2d 5720 4e49 3143     %u......-- WINC1
  40c9b4:	3035 2030 4354 2050 6573 7672 7265 6520     500 TCP server e
  40c9c4:	6178 706d 656c 2d20 0d2d 2d0a 202d 4153     xample --..-- SA
  40c9d4:	454d 3037 582d 4c50 2044 2d2d 0a0d 2d2d     ME70-XPLD --..--
  40c9e4:	4320 6d6f 6970 656c 3a64 4d20 7961 3220      Compiled: May 2
  40c9f4:	2034 3032 3731 3120 3a36 3635 323a 2038     4 2017 16:56:28 
  40ca04:	2d2d 0a0d 0000 0000 616d 6e69 203a 326d     --......main: m2
  40ca14:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
  40ca24:	6520 7272 726f 2821 6425 0d29 000a 0000      error!(%d).....
  40ca34:	0a0c 2d0d 202d 4453 4d2f 434d 532f 4944     ...-- SD/MMC/SDI
  40ca44:	204f 6143 6472 4520 6178 706d 656c 6f20     O Card Example o
  40ca54:	206e 6146 4674 2073 2d2d 0d0a 0000 0000     n FatFs --......
  40ca64:	6c50 6165 6573 7020 756c 2067 6e61 5320     Please plug an S
  40ca74:	2c44 4d20 434d 6f20 2072 4453 4f49 6320     D, MMC or SDIO c
  40ca84:	7261 2064 6e69 7320 6f6c 2e74 0d0a 0000     ard in slot.....
  40ca94:	6143 6472 6920 736e 6174 6c6c 4620 4941     Card install FAI
  40caa4:	0a4c 000d 6c50 6165 6573 7520 706e 756c     L...Please unplu
  40cab4:	2067 6e61 2064 6572 702d 756c 2067 6874     g and re-plug th
  40cac4:	2065 6163 6472 0a2e 000d 0000 6f4d 6e75     e card......Moun
  40cad4:	2074 6964 6b73 2820 5f66 6f6d 6e75 2974     t disk (f_mount)
  40cae4:	2e2e 0d2e 000a 0000 465b 4941 5d4c 7220     ........[FAIL] r
  40caf4:	7365 2520 0d64 000a 4f5b 5d4b 0a0d 0000     es %d...[OK]....
  40cb04:	616d 6e69 203a 6166 6c69 6465 7420 206f     main: failed to 
  40cb14:	7263 6165 6574 5420 5043 6320 696c 6e65     create TCP clien
  40cb24:	2074 6f73 6b63 7465 6520 7272 726f 0d21     t socket error!.
  40cb34:	000a 0000 616d 6e69 203a 6166 6c69 6465     ....main: failed
  40cb44:	7420 206f 6f63 6e6e 6365 2074 6f73 6b63      to connect sock
  40cb54:	7465 6520 7272 726f 0d21 000a 6f43 656e     et error!...Cone
  40cb64:	7463 6461 206f 2021 000a 0000 0043 0000     ctado ! ....C...

0040cb74 <_global_impure_ptr>:
  40cb74:	0048 2040                                   H.@ 

0040cb78 <zeroes.7035>:
  40cb78:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40cb88:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  40cb98:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40cba8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  40cbb8:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  40cbc8:	0030 0000                                   0...

0040cbcc <blanks.7034>:
  40cbcc:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040cbdc <zeroes.6993>:
  40cbdc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040cbec <blanks.6992>:
  40cbec:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40cbfc:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40cc0c:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040cc18 <__mprec_tens>:
  40cc18:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40cc28:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40cc38:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40cc48:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40cc58:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40cc68:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40cc78:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40cc88:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40cc98:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40cca8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40ccb8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40ccc8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40ccd8:	9db4 79d9 7843 44ea                         ...yCx.D

0040cce0 <__mprec_bigtens>:
  40cce0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40ccf0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40cd00:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040cd08 <p05.5373>:
  40cd08:	0005 0000 0019 0000 007d 0000               ........}...

0040cd14 <_init>:
  40cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cd16:	bf00      	nop
  40cd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40cd1a:	bc08      	pop	{r3}
  40cd1c:	469e      	mov	lr, r3
  40cd1e:	4770      	bx	lr

0040cd20 <__init_array_start>:
  40cd20:	00407b61 	.word	0x00407b61

0040cd24 <__frame_dummy_init_array_entry>:
  40cd24:	00400165                                e.@.

0040cd28 <_fini>:
  40cd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cd2a:	bf00      	nop
  40cd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40cd2e:	bc08      	pop	{r3}
  40cd30:	469e      	mov	lr, r3
  40cd32:	4770      	bx	lr

0040cd34 <__fini_array_start>:
  40cd34:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <egstrNmBusCapabilities>:
20400030:	1000 0000                                   ....

20400034 <clk_status_reg_adr>:
20400034:	000f 0000                                   ....

20400038 <g_interrupt_enabled>:
20400038:	0001 0000                                   ....

2040003c <SystemCoreClock>:
2040003c:	0900 003d                                   ..=.

20400040 <tcp_client_socket>:
20400040:	00ff 0000 0000 0000                         ........

20400048 <impure_data>:
20400048:	0000 0000 0334 2040 039c 2040 0404 2040     ....4.@ ..@ ..@ 
	...
2040007c:	cb70 0040 0000 0000 0000 0000 0000 0000     p.@.............
	...
204000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400470 <_impure_ptr>:
20400470:	0048 2040                                   H.@ 

20400474 <lconv>:
20400474:	cc14 0040 c8e8 0040 c8e8 0040 c8e8 0040     ..@...@...@...@.
20400484:	c8e8 0040 c8e8 0040 c8e8 0040 c8e8 0040     ..@...@...@...@.
20400494:	c8e8 0040 c8e8 0040 ffff ffff ffff ffff     ..@...@.........
204004a4:	ffff ffff ffff 0000                         ........

204004ac <lc_ctype_charset>:
204004ac:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

204004cc <__mb_cur_max>:
204004cc:	0001 0000                                   ....

204004d0 <__malloc_av_>:
	...
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 

204008d8 <__malloc_trim_threshold>:
204008d8:	0000 0002                                   ....

204008dc <__malloc_sbrk_base>:
204008dc:	ffff ffff                                   ....

204008e0 <__wctomb>:
204008e0:	a9fd 0040                                   ..@.
