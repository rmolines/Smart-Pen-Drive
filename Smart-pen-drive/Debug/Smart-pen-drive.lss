
Smart-pen-drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f970  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040f970  0040f970  0001f970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008e4  20400000  0040f978  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000026b0  204008e4  0041025c  000208e4  2**2
                  ALLOC
  4 .stack        00002004  20402f94  0041290c  000208e4  2**0
                  ALLOC
  5 .heap         00000200  20404f98  00414910  000208e4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208e4  2**0
                  CONTENTS, READONLY
  7 .comment      000000b2  00000000  00000000  00020912  2**0
                  CONTENTS, READONLY
  8 .debug_info   00027657  00000000  00000000  000209c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005788  00000000  00000000  0004801b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018205  00000000  00000000  0004d7a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001620  00000000  00000000  000659a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017b0  00000000  00000000  00066fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ad53  00000000  00000000  00068778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d976  00000000  00000000  000934cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009aa76  00000000  00000000  000b0e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004bf4  00000000  00000000  0014b8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20404f98 	.word	0x20404f98
  400004:	004068cd 	.word	0x004068cd
  400008:	004068c9 	.word	0x004068c9
  40000c:	004068c9 	.word	0x004068c9
  400010:	004068c9 	.word	0x004068c9
  400014:	004068c9 	.word	0x004068c9
  400018:	004068c9 	.word	0x004068c9
	...
  40002c:	004068c9 	.word	0x004068c9
  400030:	004068c9 	.word	0x004068c9
  400034:	00000000 	.word	0x00000000
  400038:	004068c9 	.word	0x004068c9
  40003c:	004068c9 	.word	0x004068c9
  400040:	004068c9 	.word	0x004068c9
  400044:	004068c9 	.word	0x004068c9
  400048:	004068c9 	.word	0x004068c9
  40004c:	004068c9 	.word	0x004068c9
  400050:	004068c9 	.word	0x004068c9
  400054:	004068c9 	.word	0x004068c9
  400058:	004068c9 	.word	0x004068c9
  40005c:	004068c9 	.word	0x004068c9
  400060:	004068c9 	.word	0x004068c9
  400064:	00000000 	.word	0x00000000
  400068:	004063b9 	.word	0x004063b9
  40006c:	004063cd 	.word	0x004063cd
  400070:	004063e1 	.word	0x004063e1
  400074:	004068c9 	.word	0x004068c9
  400078:	004068c9 	.word	0x004068c9
  40007c:	004068c9 	.word	0x004068c9
  400080:	004063f5 	.word	0x004063f5
  400084:	00406409 	.word	0x00406409
  400088:	004068c9 	.word	0x004068c9
  40008c:	004068c9 	.word	0x004068c9
  400090:	004068c9 	.word	0x004068c9
  400094:	004068c9 	.word	0x004068c9
  400098:	004068c9 	.word	0x004068c9
  40009c:	004068c9 	.word	0x004068c9
  4000a0:	004068c9 	.word	0x004068c9
  4000a4:	004068c9 	.word	0x004068c9
  4000a8:	004068c9 	.word	0x004068c9
  4000ac:	004068c9 	.word	0x004068c9
  4000b0:	004068c9 	.word	0x004068c9
  4000b4:	004068c9 	.word	0x004068c9
  4000b8:	004068c9 	.word	0x004068c9
  4000bc:	004068c9 	.word	0x004068c9
  4000c0:	004068c9 	.word	0x004068c9
  4000c4:	004068c9 	.word	0x004068c9
  4000c8:	004068c9 	.word	0x004068c9
  4000cc:	004068c9 	.word	0x004068c9
  4000d0:	00000000 	.word	0x00000000
  4000d4:	004068c9 	.word	0x004068c9
  4000d8:	00000000 	.word	0x00000000
  4000dc:	004068c9 	.word	0x004068c9
  4000e0:	004068c9 	.word	0x004068c9
  4000e4:	004068c9 	.word	0x004068c9
  4000e8:	004068c9 	.word	0x004068c9
  4000ec:	004068c9 	.word	0x004068c9
  4000f0:	004068c9 	.word	0x004068c9
  4000f4:	004068c9 	.word	0x004068c9
  4000f8:	004068c9 	.word	0x004068c9
  4000fc:	004068c9 	.word	0x004068c9
  400100:	004068c9 	.word	0x004068c9
  400104:	004068c9 	.word	0x004068c9
  400108:	004068c9 	.word	0x004068c9
  40010c:	004068c9 	.word	0x004068c9
  400110:	004068c9 	.word	0x004068c9
	...
  400120:	004068c9 	.word	0x004068c9
  400124:	004068c9 	.word	0x004068c9
  400128:	004068c9 	.word	0x004068c9
  40012c:	004068c9 	.word	0x004068c9
  400130:	004068c9 	.word	0x004068c9
  400134:	00000000 	.word	0x00000000
  400138:	004068c9 	.word	0x004068c9
  40013c:	004068c9 	.word	0x004068c9

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008e4 	.word	0x204008e4
  40015c:	00000000 	.word	0x00000000
  400160:	0040f978 	.word	0x0040f978

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008e8 	.word	0x204008e8
  400190:	0040f978 	.word	0x0040f978
  400194:	0040f978 	.word	0x0040f978
  400198:	00000000 	.word	0x00000000

0040019c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  40019c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40019e:	4b07      	ldr	r3, [pc, #28]	; (4001bc <sd_mmc_configure_slot+0x20>)
  4001a0:	6819      	ldr	r1, [r3, #0]
  4001a2:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  4001a6:	3300      	adds	r3, #0
  4001a8:	bf18      	it	ne
  4001aa:	2301      	movne	r3, #1
  4001ac:	7c4a      	ldrb	r2, [r1, #17]
  4001ae:	6809      	ldr	r1, [r1, #0]
  4001b0:	4803      	ldr	r0, [pc, #12]	; (4001c0 <sd_mmc_configure_slot+0x24>)
  4001b2:	7800      	ldrb	r0, [r0, #0]
  4001b4:	4c03      	ldr	r4, [pc, #12]	; (4001c4 <sd_mmc_configure_slot+0x28>)
  4001b6:	47a0      	blx	r4
  4001b8:	bd10      	pop	{r4, pc}
  4001ba:	bf00      	nop
  4001bc:	20400904 	.word	0x20400904
  4001c0:	2040090a 	.word	0x2040090a
  4001c4:	00401181 	.word	0x00401181

004001c8 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  4001c8:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d154      	bne.n	400278 <sd_mmc_select_slot+0xb0>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  4001ce:	4b33      	ldr	r3, [pc, #204]	; (40029c <sd_mmc_select_slot+0xd4>)
  4001d0:	689a      	ldr	r2, [r3, #8]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4001d2:	4b33      	ldr	r3, [pc, #204]	; (4002a0 <sd_mmc_select_slot+0xd8>)
  4001d4:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  4001d8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4001da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  4001dc:	f002 021f 	and.w	r2, r2, #31
  4001e0:	2301      	movs	r3, #1
  4001e2:	fa03 f202 	lsl.w	r2, r3, r2
  4001e6:	420a      	tst	r2, r1
  4001e8:	d00e      	beq.n	400208 <sd_mmc_select_slot+0x40>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4001ea:	4b2c      	ldr	r3, [pc, #176]	; (40029c <sd_mmc_select_slot+0xd4>)
  4001ec:	7b9b      	ldrb	r3, [r3, #14]
  4001ee:	2b01      	cmp	r3, #1
  4001f0:	d105      	bne.n	4001fe <sd_mmc_select_slot+0x36>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
  4001f2:	4b2c      	ldr	r3, [pc, #176]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  4001f4:	781b      	ldrb	r3, [r3, #0]
  4001f6:	b113      	cbz	r3, 4001fe <sd_mmc_select_slot+0x36>
		SysTick->CTRL = 0;
  4001f8:	2200      	movs	r2, #0
  4001fa:	4b2b      	ldr	r3, [pc, #172]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  4001fc:	601a      	str	r2, [r3, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4001fe:	2204      	movs	r2, #4
  400200:	4b26      	ldr	r3, [pc, #152]	; (40029c <sd_mmc_select_slot+0xd4>)
  400202:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  400204:	2002      	movs	r0, #2
  400206:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  400208:	4b24      	ldr	r3, [pc, #144]	; (40029c <sd_mmc_select_slot+0xd4>)
  40020a:	7b9b      	ldrb	r3, [r3, #14]
  40020c:	2b04      	cmp	r3, #4
  40020e:	d115      	bne.n	40023c <sd_mmc_select_slot+0x74>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400210:	2201      	movs	r2, #1
  400212:	4b22      	ldr	r3, [pc, #136]	; (40029c <sd_mmc_select_slot+0xd4>)
  400214:	739a      	strb	r2, [r3, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
  400216:	4b24      	ldr	r3, [pc, #144]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400218:	681b      	ldr	r3, [r3, #0]
  40021a:	b93b      	cbnz	r3, 40022c <sd_mmc_select_slot+0x64>
		sd_mmc_sam_systick_used = true;
  40021c:	4b21      	ldr	r3, [pc, #132]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  40021e:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  400220:	4b21      	ldr	r3, [pc, #132]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400222:	4922      	ldr	r1, [pc, #136]	; (4002ac <sd_mmc_select_slot+0xe4>)
  400224:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  400226:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400228:	2002      	movs	r0, #2
  40022a:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
  40022c:	2200      	movs	r2, #0
  40022e:	4b1d      	ldr	r3, [pc, #116]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  400230:	701a      	strb	r2, [r3, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  400232:	481f      	ldr	r0, [pc, #124]	; (4002b0 <sd_mmc_select_slot+0xe8>)
  400234:	4b1f      	ldr	r3, [pc, #124]	; (4002b4 <sd_mmc_select_slot+0xec>)
  400236:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  400238:	2002      	movs	r0, #2
  40023a:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  40023c:	2b01      	cmp	r3, #1
  40023e:	d10b      	bne.n	400258 <sd_mmc_select_slot+0x90>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
  400240:	4b18      	ldr	r3, [pc, #96]	; (4002a4 <sd_mmc_select_slot+0xdc>)
  400242:	781b      	ldrb	r3, [r3, #0]
  400244:	b1f3      	cbz	r3, 400284 <sd_mmc_select_slot+0xbc>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400246:	4b18      	ldr	r3, [pc, #96]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400248:	681b      	ldr	r3, [r3, #0]
  40024a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40024e:	d015      	beq.n	40027c <sd_mmc_select_slot+0xb4>
		SysTick->CTRL = 0;
  400250:	2200      	movs	r2, #0
  400252:	4b15      	ldr	r3, [pc, #84]	; (4002a8 <sd_mmc_select_slot+0xe0>)
  400254:	601a      	str	r2, [r3, #0]
  400256:	e015      	b.n	400284 <sd_mmc_select_slot+0xbc>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400258:	2b03      	cmp	r3, #3
  40025a:	d011      	beq.n	400280 <sd_mmc_select_slot+0xb8>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  40025c:	2200      	movs	r2, #0
  40025e:	4b16      	ldr	r3, [pc, #88]	; (4002b8 <sd_mmc_select_slot+0xf0>)
  400260:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  400262:	4c0e      	ldr	r4, [pc, #56]	; (40029c <sd_mmc_select_slot+0xd4>)
  400264:	4b15      	ldr	r3, [pc, #84]	; (4002bc <sd_mmc_select_slot+0xf4>)
  400266:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400268:	4b15      	ldr	r3, [pc, #84]	; (4002c0 <sd_mmc_select_slot+0xf8>)
  40026a:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  40026c:	7ba0      	ldrb	r0, [r4, #14]
  40026e:	2802      	cmp	r0, #2
  400270:	bf14      	ite	ne
  400272:	2000      	movne	r0, #0
  400274:	2001      	moveq	r0, #1
  400276:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
  400278:	2004      	movs	r0, #4
  40027a:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  40027c:	2002      	movs	r0, #2
  40027e:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
  400280:	2003      	movs	r0, #3
  400282:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <sd_mmc_select_slot+0xd4>)
  400286:	2202      	movs	r2, #2
  400288:	739a      	strb	r2, [r3, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40028a:	4a0e      	ldr	r2, [pc, #56]	; (4002c4 <sd_mmc_select_slot+0xfc>)
  40028c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40028e:	2201      	movs	r2, #1
  400290:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  400292:	2200      	movs	r2, #0
  400294:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  400298:	e7e0      	b.n	40025c <sd_mmc_select_slot+0x94>
  40029a:	bf00      	nop
  40029c:	2040000c 	.word	0x2040000c
  4002a0:	00200707 	.word	0x00200707
  4002a4:	20400902 	.word	0x20400902
  4002a8:	e000e010 	.word	0xe000e010
  4002ac:	023c3460 	.word	0x023c3460
  4002b0:	0303af6b 	.word	0x0303af6b
  4002b4:	20400001 	.word	0x20400001
  4002b8:	2040090a 	.word	0x2040090a
  4002bc:	20400904 	.word	0x20400904
  4002c0:	0040019d 	.word	0x0040019d
  4002c4:	00061a80 	.word	0x00061a80

004002c8 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
  4002c8:	b538      	push	{r3, r4, r5, lr}
  4002ca:	9c04      	ldr	r4, [sp, #16]
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002cc:	0252      	lsls	r2, r2, #9
  4002ce:	ea42 63c3 	orr.w	r3, r2, r3, lsl #27
  4002d2:	ea43 7101 	orr.w	r1, r3, r1, lsl #28
  4002d6:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
  4002da:	7821      	ldrb	r1, [r4, #0]
  4002dc:	4301      	orrs	r1, r0
  4002de:	f241 3034 	movw	r0, #4916	; 0x1334
  4002e2:	4b04      	ldr	r3, [pc, #16]	; (4002f4 <sdio_cmd52+0x2c>)
  4002e4:	4798      	blx	r3
  4002e6:	4605      	mov	r5, r0
  4002e8:	b110      	cbz	r0, 4002f0 <sdio_cmd52+0x28>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
  4002ea:	4b03      	ldr	r3, [pc, #12]	; (4002f8 <sdio_cmd52+0x30>)
  4002ec:	4798      	blx	r3
  4002ee:	7020      	strb	r0, [r4, #0]
	return true;
}
  4002f0:	4628      	mov	r0, r5
  4002f2:	bd38      	pop	{r3, r4, r5, pc}
  4002f4:	0040124d 	.word	0x0040124d
  4002f8:	00401271 	.word	0x00401271

004002fc <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  4002fc:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  4002fe:	4b08      	ldr	r3, [pc, #32]	; (400320 <sd_mmc_cmd9_mci+0x24>)
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	8999      	ldrh	r1, [r3, #12]
  400304:	0409      	lsls	r1, r1, #16
  400306:	f641 3009 	movw	r0, #6921	; 0x1b09
  40030a:	4b06      	ldr	r3, [pc, #24]	; (400324 <sd_mmc_cmd9_mci+0x28>)
  40030c:	4798      	blx	r3
  40030e:	4604      	mov	r4, r0
  400310:	b120      	cbz	r0, 40031c <sd_mmc_cmd9_mci+0x20>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
  400312:	4b03      	ldr	r3, [pc, #12]	; (400320 <sd_mmc_cmd9_mci+0x24>)
  400314:	6818      	ldr	r0, [r3, #0]
  400316:	3012      	adds	r0, #18
  400318:	4b03      	ldr	r3, [pc, #12]	; (400328 <sd_mmc_cmd9_mci+0x2c>)
  40031a:	4798      	blx	r3
	return true;
}
  40031c:	4620      	mov	r0, r4
  40031e:	bd10      	pop	{r4, pc}
  400320:	20400904 	.word	0x20400904
  400324:	0040124d 	.word	0x0040124d
  400328:	00401279 	.word	0x00401279

0040032c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  40032c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40032e:	4b03      	ldr	r3, [pc, #12]	; (40033c <sd_mmc_deselect_slot+0x10>)
  400330:	781b      	ldrb	r3, [r3, #0]
  400332:	b913      	cbnz	r3, 40033a <sd_mmc_deselect_slot+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
  400334:	2000      	movs	r0, #0
  400336:	4b02      	ldr	r3, [pc, #8]	; (400340 <sd_mmc_deselect_slot+0x14>)
  400338:	4798      	blx	r3
  40033a:	bd08      	pop	{r3, pc}
  40033c:	2040090a 	.word	0x2040090a
  400340:	00401225 	.word	0x00401225

00400344 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  400344:	b508      	push	{r3, lr}
	//! Enable the PMC clock for the card detect pins
#if (defined SD_MMC_0_CD_GPIO) && (SAM) && (!SAM4L)
# include "pmc.h"
# define SD_MMC_ENABLE_CD_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_CD_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_CD_PIN, ~)
  400346:	2010      	movs	r0, #16
  400348:	4b05      	ldr	r3, [pc, #20]	; (400360 <sd_mmc_init+0x1c>)
  40034a:	4798      	blx	r3
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40034c:	2204      	movs	r2, #4
  40034e:	4b05      	ldr	r3, [pc, #20]	; (400364 <sd_mmc_init+0x20>)
  400350:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400352:	22ff      	movs	r2, #255	; 0xff
  400354:	4b04      	ldr	r3, [pc, #16]	; (400368 <sd_mmc_init+0x24>)
  400356:	701a      	strb	r2, [r3, #0]
	driver_init();
  400358:	4b04      	ldr	r3, [pc, #16]	; (40036c <sd_mmc_init+0x28>)
  40035a:	4798      	blx	r3
  40035c:	bd08      	pop	{r3, pc}
  40035e:	bf00      	nop
  400360:	004065c9 	.word	0x004065c9
  400364:	2040000c 	.word	0x2040000c
  400368:	2040090a 	.word	0x2040090a
  40036c:	00401145 	.word	0x00401145

00400370 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400374:	b094      	sub	sp, #80	; 0x50
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400376:	4ba8      	ldr	r3, [pc, #672]	; (400618 <sd_mmc_check+0x2a8>)
  400378:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  40037a:	2801      	cmp	r0, #1
  40037c:	d005      	beq.n	40038a <sd_mmc_check+0x1a>
  40037e:	4604      	mov	r4, r0
		sd_mmc_deselect_slot();
  400380:	4ba6      	ldr	r3, [pc, #664]	; (40061c <sd_mmc_check+0x2ac>)
  400382:	4798      	blx	r3
		return sd_mmc_err;
  400384:	4620      	mov	r0, r4
  400386:	f000 bc14 	b.w	400bb2 <sd_mmc_check+0x842>
 */
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;
#ifdef SDIO_SUPPORT_ENABLE
	uint8_t data = 0x08;
  40038a:	ad14      	add	r5, sp, #80	; 0x50
  40038c:	2308      	movs	r3, #8
  40038e:	f805 3d45 	strb.w	r3, [r5, #-69]!
#endif

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  400392:	4ba3      	ldr	r3, [pc, #652]	; (400620 <sd_mmc_check+0x2b0>)
  400394:	681b      	ldr	r3, [r3, #0]
  400396:	2601      	movs	r6, #1
  400398:	73de      	strb	r6, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  40039a:	2400      	movs	r4, #0
  40039c:	741c      	strb	r4, [r3, #16]
	sd_mmc_card->rca = 0;
  40039e:	819c      	strh	r4, [r3, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  4003a0:	4ba0      	ldr	r3, [pc, #640]	; (400624 <sd_mmc_check+0x2b4>)
  4003a2:	4798      	blx	r3

#ifdef SDIO_SUPPORT_ENABLE
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003a4:	9500      	str	r5, [sp, #0]
  4003a6:	4623      	mov	r3, r4
  4003a8:	2206      	movs	r2, #6
  4003aa:	4621      	mov	r1, r4
  4003ac:	4630      	mov	r0, r6
  4003ae:	4d9e      	ldr	r5, [pc, #632]	; (400628 <sd_mmc_check+0x2b8>)
  4003b0:	47a8      	blx	r5
#endif

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003b2:	4621      	mov	r1, r4
  4003b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003b8:	4b9c      	ldr	r3, [pc, #624]	; (40062c <sd_mmc_check+0x2bc>)
  4003ba:	4798      	blx	r3
  4003bc:	2800      	cmp	r0, #0
  4003be:	f000 83ab 	beq.w	400b18 <sd_mmc_check+0x7a8>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003c2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003c6:	f245 5008 	movw	r0, #21768	; 0x5508
  4003ca:	4b98      	ldr	r3, [pc, #608]	; (40062c <sd_mmc_check+0x2bc>)
  4003cc:	4798      	blx	r3
  4003ce:	2800      	cmp	r0, #0
  4003d0:	f000 83aa 	beq.w	400b28 <sd_mmc_check+0x7b8>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
  4003d4:	4b96      	ldr	r3, [pc, #600]	; (400630 <sd_mmc_check+0x2c0>)
  4003d6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  4003d8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4003dc:	f000 83a7 	beq.w	400b2e <sd_mmc_check+0x7be>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  4003e0:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4003e4:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  4003e8:	f040 8396 	bne.w	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  4003ec:	46b0      	mov	r8, r6
  4003ee:	e3a0      	b.n	400b32 <sd_mmc_check+0x7c2>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
  4003f0:	4b8f      	ldr	r3, [pc, #572]	; (400630 <sd_mmc_check+0x2c0>)
  4003f2:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  4003f4:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  4003f8:	f000 83a3 	beq.w	400b42 <sd_mmc_check+0x7d2>
  4003fc:	f241 3489 	movw	r4, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400400:	f244 5605 	movw	r6, #17669	; 0x4505
  400404:	4d89      	ldr	r5, [pc, #548]	; (40062c <sd_mmc_check+0x2bc>)
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400406:	4f8a      	ldr	r7, [pc, #552]	; (400630 <sd_mmc_check+0x2c0>)
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400408:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  40040c:	4630      	mov	r0, r6
  40040e:	47a8      	blx	r5
  400410:	2800      	cmp	r0, #0
  400412:	f000 8381 	beq.w	400b18 <sd_mmc_check+0x7a8>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400416:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400418:	2800      	cmp	r0, #0
  40041a:	db02      	blt.n	400422 <sd_mmc_check+0xb2>
			break;
		}
		if (cmd5_retry-- == 0) {
  40041c:	3c01      	subs	r4, #1
  40041e:	d1f3      	bne.n	400408 <sd_mmc_check+0x98>
  400420:	e37a      	b.n	400b18 <sd_mmc_check+0x7a8>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
  400422:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400426:	d004      	beq.n	400432 <sd_mmc_check+0xc2>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  400428:	4b7d      	ldr	r3, [pc, #500]	; (400620 <sd_mmc_check+0x2b0>)
  40042a:	681b      	ldr	r3, [r3, #0]
  40042c:	2205      	movs	r2, #5
  40042e:	73da      	strb	r2, [r3, #15]
  400430:	e38e      	b.n	400b50 <sd_mmc_check+0x7e0>
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400432:	4b7b      	ldr	r3, [pc, #492]	; (400620 <sd_mmc_check+0x2b0>)
  400434:	681b      	ldr	r3, [r3, #0]
  400436:	2204      	movs	r2, #4
  400438:	73da      	strb	r2, [r3, #15]
  40043a:	e161      	b.n	400700 <sd_mmc_check+0x390>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40043c:	4641      	mov	r1, r8
  40043e:	f241 1037 	movw	r0, #4407	; 0x1137
  400442:	47a8      	blx	r5
  400444:	2800      	cmp	r0, #0
  400446:	f000 8390 	beq.w	400b6a <sd_mmc_check+0x7fa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  40044a:	4631      	mov	r1, r6
  40044c:	f244 5029 	movw	r0, #17705	; 0x4529
  400450:	47a8      	blx	r5
  400452:	2800      	cmp	r0, #0
  400454:	f000 8389 	beq.w	400b6a <sd_mmc_check+0x7fa>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400458:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  40045a:	2800      	cmp	r0, #0
  40045c:	da0a      	bge.n	400474 <sd_mmc_check+0x104>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  40045e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400462:	f000 838e 	beq.w	400b82 <sd_mmc_check+0x812>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400466:	4b6e      	ldr	r3, [pc, #440]	; (400620 <sd_mmc_check+0x2b0>)
  400468:	681a      	ldr	r2, [r3, #0]
  40046a:	7bd3      	ldrb	r3, [r2, #15]
  40046c:	f043 0308 	orr.w	r3, r3, #8
  400470:	73d3      	strb	r3, [r2, #15]
  400472:	e386      	b.n	400b82 <sd_mmc_check+0x812>
			}
			break;
		}
		if (retry-- == 0) {
  400474:	3c01      	subs	r4, #1
  400476:	d1e1      	bne.n	40043c <sd_mmc_check+0xcc>
  400478:	e377      	b.n	400b6a <sd_mmc_check+0x7fa>
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40047a:	f241 0469 	movw	r4, #4201	; 0x1069
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  40047e:	4e6d      	ldr	r6, [pc, #436]	; (400634 <sd_mmc_check+0x2c4>)
  400480:	4d6a      	ldr	r5, [pc, #424]	; (40062c <sd_mmc_check+0x2bc>)
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400482:	4f6b      	ldr	r7, [pc, #428]	; (400630 <sd_mmc_check+0x2c0>)
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400484:	4631      	mov	r1, r6
  400486:	f244 5001 	movw	r0, #17665	; 0x4501
  40048a:	47a8      	blx	r5
  40048c:	2800      	cmp	r0, #0
  40048e:	f000 8343 	beq.w	400b18 <sd_mmc_check+0x7a8>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400492:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  400494:	2800      	cmp	r0, #0
  400496:	da0c      	bge.n	4004b2 <sd_mmc_check+0x142>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  400498:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40049c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4004a0:	f040 8377 	bne.w	400b92 <sd_mmc_check+0x822>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  4004a4:	4b5e      	ldr	r3, [pc, #376]	; (400620 <sd_mmc_check+0x2b0>)
  4004a6:	681a      	ldr	r2, [r3, #0]
  4004a8:	7bd3      	ldrb	r3, [r2, #15]
  4004aa:	f043 0308 	orr.w	r3, r3, #8
  4004ae:	73d3      	strb	r3, [r2, #15]
  4004b0:	e36f      	b.n	400b92 <sd_mmc_check+0x822>
			}
			break;
		}
		if (retry-- == 0) {
  4004b2:	3c01      	subs	r4, #1
  4004b4:	d1e6      	bne.n	400484 <sd_mmc_check+0x114>
  4004b6:	e32f      	b.n	400b18 <sd_mmc_check+0x7a8>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  4004b8:	4b59      	ldr	r3, [pc, #356]	; (400620 <sd_mmc_check+0x2b0>)
  4004ba:	681b      	ldr	r3, [r3, #0]
  4004bc:	2201      	movs	r2, #1
  4004be:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4004c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004c4:	f241 1003 	movw	r0, #4355	; 0x1103
  4004c8:	4b58      	ldr	r3, [pc, #352]	; (40062c <sd_mmc_check+0x2bc>)
  4004ca:	4798      	blx	r3
  4004cc:	2800      	cmp	r0, #0
  4004ce:	f000 8323 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  4004d2:	4b59      	ldr	r3, [pc, #356]	; (400638 <sd_mmc_check+0x2c8>)
  4004d4:	4798      	blx	r3
  4004d6:	2800      	cmp	r0, #0
  4004d8:	f000 831e 	beq.w	400b18 <sd_mmc_check+0x7a8>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4004dc:	4b50      	ldr	r3, [pc, #320]	; (400620 <sd_mmc_check+0x2b0>)
  4004de:	6819      	ldr	r1, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004e0:	7c8b      	ldrb	r3, [r1, #18]
  4004e2:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4004e6:	3b01      	subs	r3, #1
  4004e8:	2b03      	cmp	r3, #3
  4004ea:	d803      	bhi.n	4004f4 <sd_mmc_check+0x184>
  4004ec:	e8df f003 	tbb	[pc, r3]
  4004f0:	0e0b0805 	.word	0x0e0b0805
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4004f4:	2312      	movs	r3, #18
  4004f6:	740b      	strb	r3, [r1, #16]
  4004f8:	e00a      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4004fa:	2314      	movs	r3, #20
  4004fc:	740b      	strb	r3, [r1, #16]
  4004fe:	e007      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400500:	2322      	movs	r3, #34	; 0x22
  400502:	740b      	strb	r3, [r1, #16]
  400504:	e004      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  400506:	2330      	movs	r3, #48	; 0x30
  400508:	740b      	strb	r3, [r1, #16]
  40050a:	e001      	b.n	400510 <sd_mmc_check+0x1a0>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  40050c:	2340      	movs	r3, #64	; 0x40
  40050e:	740b      	strb	r3, [r1, #16]
  400510:	7d4b      	ldrb	r3, [r1, #21]
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400512:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400516:	f003 0307 	and.w	r3, r3, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40051a:	4a48      	ldr	r2, [pc, #288]	; (40063c <sd_mmc_check+0x2cc>)
  40051c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400524:	fb03 f302 	mul.w	r3, r3, r2
  400528:	4a45      	ldr	r2, [pc, #276]	; (400640 <sd_mmc_check+0x2d0>)
  40052a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  40052e:	fb03 f302 	mul.w	r3, r3, r2
  400532:	600b      	str	r3, [r1, #0]
  400534:	7e88      	ldrb	r0, [r1, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400536:	7e4b      	ldrb	r3, [r1, #25]
  400538:	7e0a      	ldrb	r2, [r1, #24]
  40053a:	0292      	lsls	r2, r2, #10
  40053c:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  400540:	ea43 13a0 	orr.w	r3, r3, r0, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  400544:	f3c3 030b 	ubfx	r3, r3, #0, #12
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400548:	f640 72ff 	movw	r2, #4095	; 0xfff
  40054c:	4293      	cmp	r3, r2
  40054e:	d00f      	beq.n	400570 <sd_mmc_check+0x200>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400550:	7f08      	ldrb	r0, [r1, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400552:	7eca      	ldrb	r2, [r1, #27]
  400554:	0052      	lsls	r2, r2, #1
  400556:	ea42 12e0 	orr.w	r2, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  40055a:	3301      	adds	r3, #1
  40055c:	f002 0207 	and.w	r2, r2, #7
  400560:	3202      	adds	r2, #2
  400562:	4093      	lsls	r3, r2
  400564:	7dca      	ldrb	r2, [r1, #23]
  400566:	f002 020f 	and.w	r2, r2, #15
  40056a:	4093      	lsls	r3, r2
  40056c:	0a9b      	lsrs	r3, r3, #10
  40056e:	604b      	str	r3, [r1, #4]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400570:	8989      	ldrh	r1, [r1, #12]
  400572:	0409      	lsls	r1, r1, #16
  400574:	f243 1007 	movw	r0, #12551	; 0x3107
  400578:	4b2c      	ldr	r3, [pc, #176]	; (40062c <sd_mmc_check+0x2bc>)
  40057a:	4798      	blx	r3
  40057c:	2800      	cmp	r0, #0
  40057e:	f000 82cb 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400582:	4b27      	ldr	r3, [pc, #156]	; (400620 <sd_mmc_check+0x2b0>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	7c1b      	ldrb	r3, [r3, #16]
  400588:	2b3f      	cmp	r3, #63	; 0x3f
  40058a:	f240 809d 	bls.w	4006c8 <sd_mmc_check+0x358>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  40058e:	2100      	movs	r1, #0
  400590:	9100      	str	r1, [sp, #0]
  400592:	2301      	movs	r3, #1
  400594:	f44f 7200 	mov.w	r2, #512	; 0x200
  400598:	482a      	ldr	r0, [pc, #168]	; (400644 <sd_mmc_check+0x2d4>)
  40059a:	4c2b      	ldr	r4, [pc, #172]	; (400648 <sd_mmc_check+0x2d8>)
  40059c:	47a0      	blx	r4
  40059e:	2800      	cmp	r0, #0
  4005a0:	f000 82ba 	beq.w	400b18 <sd_mmc_check+0x7a8>
  4005a4:	2400      	movs	r4, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
  4005a6:	4d29      	ldr	r5, [pc, #164]	; (40064c <sd_mmc_check+0x2dc>)
  4005a8:	a803      	add	r0, sp, #12
  4005aa:	47a8      	blx	r5
  4005ac:	2800      	cmp	r0, #0
  4005ae:	f000 82b3 	beq.w	400b18 <sd_mmc_check+0x7a8>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4005b2:	3401      	adds	r4, #1
  4005b4:	b2a4      	uxth	r4, r4
  4005b6:	2c32      	cmp	r4, #50	; 0x32
  4005b8:	d1f6      	bne.n	4005a8 <sd_mmc_check+0x238>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  4005ba:	9b03      	ldr	r3, [sp, #12]
  4005bc:	f003 0302 	and.w	r3, r3, #2
  4005c0:	b2dd      	uxtb	r5, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4005c2:	4b17      	ldr	r3, [pc, #92]	; (400620 <sd_mmc_check+0x2b0>)
  4005c4:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005c6:	7e91      	ldrb	r1, [r2, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005c8:	7e53      	ldrb	r3, [r2, #25]
  4005ca:	7e12      	ldrb	r2, [r2, #24]
  4005cc:	0292      	lsls	r2, r2, #10
  4005ce:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  4005d2:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
  4005d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005da:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005de:	4293      	cmp	r3, r2
  4005e0:	d10e      	bne.n	400600 <sd_mmc_check+0x290>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  4005e2:	4e1a      	ldr	r6, [pc, #104]	; (40064c <sd_mmc_check+0x2dc>)
  4005e4:	a804      	add	r0, sp, #16
  4005e6:	47b0      	blx	r6
  4005e8:	2800      	cmp	r0, #0
  4005ea:	f000 8295 	beq.w	400b18 <sd_mmc_check+0x7a8>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4005ee:	3401      	adds	r4, #1
  4005f0:	b2a4      	uxth	r4, r4
  4005f2:	2c35      	cmp	r4, #53	; 0x35
  4005f4:	d9f6      	bls.n	4005e4 <sd_mmc_check+0x274>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  4005f6:	4b0a      	ldr	r3, [pc, #40]	; (400620 <sd_mmc_check+0x2b0>)
  4005f8:	681a      	ldr	r2, [r3, #0]
  4005fa:	9b04      	ldr	r3, [sp, #16]
  4005fc:	085b      	lsrs	r3, r3, #1
  4005fe:	6053      	str	r3, [r2, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
  400600:	4e12      	ldr	r6, [pc, #72]	; (40064c <sd_mmc_check+0x2dc>)
  400602:	e006      	b.n	400612 <sd_mmc_check+0x2a2>
  400604:	a804      	add	r0, sp, #16
  400606:	47b0      	blx	r6
  400608:	2800      	cmp	r0, #0
  40060a:	f000 8285 	beq.w	400b18 <sd_mmc_check+0x7a8>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40060e:	3401      	adds	r4, #1
  400610:	b2a4      	uxth	r4, r4
  400612:	2c7f      	cmp	r4, #127	; 0x7f
  400614:	d9f6      	bls.n	400604 <sd_mmc_check+0x294>
  400616:	e2c4      	b.n	400ba2 <sd_mmc_check+0x832>
  400618:	004001c9 	.word	0x004001c9
  40061c:	0040032d 	.word	0x0040032d
  400620:	20400904 	.word	0x20400904
  400624:	00401229 	.word	0x00401229
  400628:	004002c9 	.word	0x004002c9
  40062c:	0040124d 	.word	0x0040124d
  400630:	00401271 	.word	0x00401271
  400634:	401f8000 	.word	0x401f8000
  400638:	004002fd 	.word	0x004002fd
  40063c:	0040deac 	.word	0x0040deac
  400640:	0040dec8 	.word	0x0040dec8
  400644:	00081108 	.word	0x00081108
  400648:	004012a9 	.word	0x004012a9
  40064c:	00401371 	.word	0x00401371
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  400650:	4ba4      	ldr	r3, [pc, #656]	; (4008e4 <sd_mmc_check+0x574>)
  400652:	7818      	ldrb	r0, [r3, #0]
  400654:	4ba4      	ldr	r3, [pc, #656]	; (4008e8 <sd_mmc_check+0x578>)
  400656:	4798      	blx	r3
  400658:	4604      	mov	r4, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
  40065a:	2804      	cmp	r0, #4
  40065c:	d005      	beq.n	40066a <sd_mmc_check+0x2fa>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40065e:	49a3      	ldr	r1, [pc, #652]	; (4008ec <sd_mmc_check+0x57c>)
  400660:	4ba3      	ldr	r3, [pc, #652]	; (4008f0 <sd_mmc_check+0x580>)
  400662:	2808      	cmp	r0, #8
  400664:	bf08      	it	eq
  400666:	4619      	moveq	r1, r3
  400668:	e000      	b.n	40066c <sd_mmc_check+0x2fc>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40066a:	49a2      	ldr	r1, [pc, #648]	; (4008f4 <sd_mmc_check+0x584>)
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40066c:	f243 1006 	movw	r0, #12550	; 0x3106
  400670:	4ba1      	ldr	r3, [pc, #644]	; (4008f8 <sd_mmc_check+0x588>)
  400672:	4798      	blx	r3
  400674:	2800      	cmp	r0, #0
  400676:	f000 824f 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40067a:	4ba0      	ldr	r3, [pc, #640]	; (4008fc <sd_mmc_check+0x58c>)
  40067c:	4798      	blx	r3
  40067e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400682:	f040 8249 	bne.w	400b18 <sd_mmc_check+0x7a8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
  400686:	4b9e      	ldr	r3, [pc, #632]	; (400900 <sd_mmc_check+0x590>)
  400688:	681b      	ldr	r3, [r3, #0]
  40068a:	745c      	strb	r4, [r3, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  40068c:	4b9d      	ldr	r3, [pc, #628]	; (400904 <sd_mmc_check+0x594>)
  40068e:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400690:	4b9d      	ldr	r3, [pc, #628]	; (400908 <sd_mmc_check+0x598>)
  400692:	4798      	blx	r3
  400694:	b305      	cbz	r5, 4006d8 <sd_mmc_check+0x368>
  400696:	b1f8      	cbz	r0, 4006d8 <sd_mmc_check+0x368>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400698:	499c      	ldr	r1, [pc, #624]	; (40090c <sd_mmc_check+0x59c>)
  40069a:	f243 1006 	movw	r0, #12550	; 0x3106
  40069e:	4b96      	ldr	r3, [pc, #600]	; (4008f8 <sd_mmc_check+0x588>)
  4006a0:	4798      	blx	r3
  4006a2:	2800      	cmp	r0, #0
  4006a4:	f000 8238 	beq.w	400b18 <sd_mmc_check+0x7a8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4006a8:	4b94      	ldr	r3, [pc, #592]	; (4008fc <sd_mmc_check+0x58c>)
  4006aa:	4798      	blx	r3
  4006ac:	f010 0f80 	tst.w	r0, #128	; 0x80
  4006b0:	f040 8232 	bne.w	400b18 <sd_mmc_check+0x7a8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
  4006b4:	4b92      	ldr	r3, [pc, #584]	; (400900 <sd_mmc_check+0x590>)
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	2201      	movs	r2, #1
  4006ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  4006be:	4a94      	ldr	r2, [pc, #592]	; (400910 <sd_mmc_check+0x5a0>)
  4006c0:	601a      	str	r2, [r3, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  4006c2:	4b90      	ldr	r3, [pc, #576]	; (400904 <sd_mmc_check+0x594>)
  4006c4:	4798      	blx	r3
  4006c6:	e007      	b.n	4006d8 <sd_mmc_check+0x368>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  4006c8:	4b8e      	ldr	r3, [pc, #568]	; (400904 <sd_mmc_check+0x594>)
  4006ca:	4798      	blx	r3
  4006cc:	e004      	b.n	4006d8 <sd_mmc_check+0x368>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4006ce:	4639      	mov	r1, r7
  4006d0:	4630      	mov	r0, r6
  4006d2:	47a8      	blx	r5
  4006d4:	b138      	cbz	r0, 4006e6 <sd_mmc_check+0x376>
  4006d6:	e217      	b.n	400b08 <sd_mmc_check+0x798>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006d8:	240a      	movs	r4, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4006da:	f44f 7700 	mov.w	r7, #512	; 0x200
  4006de:	f241 1610 	movw	r6, #4368	; 0x1110
  4006e2:	4d85      	ldr	r5, [pc, #532]	; (4008f8 <sd_mmc_check+0x588>)
  4006e4:	e7f3      	b.n	4006ce <sd_mmc_check+0x35e>
  4006e6:	3c01      	subs	r4, #1
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  4006e8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4006ec:	d1ef      	bne.n	4006ce <sd_mmc_check+0x35e>
  4006ee:	e213      	b.n	400b18 <sd_mmc_check+0x7a8>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4006f0:	2100      	movs	r1, #0
  4006f2:	f645 3002 	movw	r0, #23298	; 0x5b02
  4006f6:	4b80      	ldr	r3, [pc, #512]	; (4008f8 <sd_mmc_check+0x588>)
  4006f8:	4798      	blx	r3
  4006fa:	2800      	cmp	r0, #0
  4006fc:	f000 820c 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400700:	2100      	movs	r1, #0
  400702:	f245 1003 	movw	r0, #20739	; 0x5103
  400706:	4b7c      	ldr	r3, [pc, #496]	; (4008f8 <sd_mmc_check+0x588>)
  400708:	4798      	blx	r3
  40070a:	2800      	cmp	r0, #0
  40070c:	f000 8204 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400710:	4c7b      	ldr	r4, [pc, #492]	; (400900 <sd_mmc_check+0x590>)
  400712:	6825      	ldr	r5, [r4, #0]
  400714:	4b79      	ldr	r3, [pc, #484]	; (4008fc <sd_mmc_check+0x58c>)
  400716:	4798      	blx	r3
  400718:	0c00      	lsrs	r0, r0, #16
  40071a:	81a8      	strh	r0, [r5, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40071c:	6823      	ldr	r3, [r4, #0]
  40071e:	7bdb      	ldrb	r3, [r3, #15]
  400720:	f013 0f01 	tst.w	r3, #1
  400724:	d041      	beq.n	4007aa <sd_mmc_check+0x43a>
		if (!sd_mmc_cmd9_mci()) {
  400726:	4b7b      	ldr	r3, [pc, #492]	; (400914 <sd_mmc_check+0x5a4>)
  400728:	4798      	blx	r3
  40072a:	2800      	cmp	r0, #0
  40072c:	f000 81f4 	beq.w	400b18 <sd_mmc_check+0x7a8>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400730:	6823      	ldr	r3, [r4, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400732:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400734:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400738:	f002 0207 	and.w	r2, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40073c:	4976      	ldr	r1, [pc, #472]	; (400918 <sd_mmc_check+0x5a8>)
  40073e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400746:	fb02 f201 	mul.w	r2, r2, r1
  40074a:	4974      	ldr	r1, [pc, #464]	; (40091c <sd_mmc_check+0x5ac>)
  40074c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400750:	fb02 f201 	mul.w	r2, r2, r1
  400754:	601a      	str	r2, [r3, #0]
  400756:	7c9a      	ldrb	r2, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400758:	0992      	lsrs	r2, r2, #6
  40075a:	d00c      	beq.n	400776 <sd_mmc_check+0x406>
  40075c:	7eda      	ldrb	r2, [r3, #27]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40075e:	7e98      	ldrb	r0, [r3, #26]
  400760:	7e59      	ldrb	r1, [r3, #25]
  400762:	0409      	lsls	r1, r1, #16
  400764:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  400768:	430a      	orrs	r2, r1
		sd_mmc_card->capacity =
  40076a:	f3c2 0215 	ubfx	r2, r2, #0, #22
  40076e:	3201      	adds	r2, #1
  400770:	0252      	lsls	r2, r2, #9
  400772:	605a      	str	r2, [r3, #4]
  400774:	e019      	b.n	4007aa <sd_mmc_check+0x43a>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400776:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400778:	7e5a      	ldrb	r2, [r3, #25]
  40077a:	7e19      	ldrb	r1, [r3, #24]
  40077c:	0289      	lsls	r1, r1, #10
  40077e:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
  400782:	ea42 12a0 	orr.w	r2, r2, r0, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400786:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400788:	7ed9      	ldrb	r1, [r3, #27]
  40078a:	0049      	lsls	r1, r1, #1
  40078c:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400790:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400794:	3201      	adds	r2, #1
  400796:	f001 0107 	and.w	r1, r1, #7
  40079a:	3102      	adds	r1, #2
  40079c:	408a      	lsls	r2, r1
  40079e:	7dd9      	ldrb	r1, [r3, #23]
  4007a0:	f001 010f 	and.w	r1, r1, #15
  4007a4:	408a      	lsls	r2, r1
  4007a6:	0a92      	lsrs	r2, r2, #10
  4007a8:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4007aa:	4b55      	ldr	r3, [pc, #340]	; (400900 <sd_mmc_check+0x590>)
  4007ac:	681b      	ldr	r3, [r3, #0]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4007ae:	8999      	ldrh	r1, [r3, #12]
  4007b0:	0409      	lsls	r1, r1, #16
  4007b2:	f243 1007 	movw	r0, #12551	; 0x3107
  4007b6:	4b50      	ldr	r3, [pc, #320]	; (4008f8 <sd_mmc_check+0x588>)
  4007b8:	4798      	blx	r3
  4007ba:	2800      	cmp	r0, #0
  4007bc:	f000 81ac 	beq.w	400b18 <sd_mmc_check+0x7a8>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4007c0:	4b4f      	ldr	r3, [pc, #316]	; (400900 <sd_mmc_check+0x590>)
  4007c2:	681b      	ldr	r3, [r3, #0]
  4007c4:	7bda      	ldrb	r2, [r3, #15]
  4007c6:	f012 0f01 	tst.w	r2, #1
  4007ca:	d040      	beq.n	40084e <sd_mmc_check+0x4de>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4007cc:	8999      	ldrh	r1, [r3, #12]
  4007ce:	0409      	lsls	r1, r1, #16
  4007d0:	f241 1037 	movw	r0, #4407	; 0x1137
  4007d4:	4b48      	ldr	r3, [pc, #288]	; (4008f8 <sd_mmc_check+0x588>)
  4007d6:	4798      	blx	r3
  4007d8:	2800      	cmp	r0, #0
  4007da:	f000 819d 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4007de:	2301      	movs	r3, #1
  4007e0:	9300      	str	r3, [sp, #0]
  4007e2:	2208      	movs	r2, #8
  4007e4:	2100      	movs	r1, #0
  4007e6:	484e      	ldr	r0, [pc, #312]	; (400920 <sd_mmc_check+0x5b0>)
  4007e8:	4c4e      	ldr	r4, [pc, #312]	; (400924 <sd_mmc_check+0x5b4>)
  4007ea:	47a0      	blx	r4
  4007ec:	2800      	cmp	r0, #0
  4007ee:	f000 8193 	beq.w	400b18 <sd_mmc_check+0x7a8>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
  4007f2:	2101      	movs	r1, #1
  4007f4:	a804      	add	r0, sp, #16
  4007f6:	4b4c      	ldr	r3, [pc, #304]	; (400928 <sd_mmc_check+0x5b8>)
  4007f8:	4798      	blx	r3
  4007fa:	2800      	cmp	r0, #0
  4007fc:	f000 818c 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400800:	4b4a      	ldr	r3, [pc, #296]	; (40092c <sd_mmc_check+0x5bc>)
  400802:	4798      	blx	r3
  400804:	2800      	cmp	r0, #0
  400806:	f000 8187 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  40080a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40080e:	f003 030f 	and.w	r3, r3, #15
  400812:	2b01      	cmp	r3, #1
  400814:	d008      	beq.n	400828 <sd_mmc_check+0x4b8>
  400816:	b113      	cbz	r3, 40081e <sd_mmc_check+0x4ae>
  400818:	2b02      	cmp	r3, #2
  40081a:	d00a      	beq.n	400832 <sd_mmc_check+0x4c2>
  40081c:	e013      	b.n	400846 <sd_mmc_check+0x4d6>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40081e:	4b38      	ldr	r3, [pc, #224]	; (400900 <sd_mmc_check+0x590>)
  400820:	681b      	ldr	r3, [r3, #0]
  400822:	2210      	movs	r2, #16
  400824:	741a      	strb	r2, [r3, #16]
  400826:	e012      	b.n	40084e <sd_mmc_check+0x4de>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400828:	4b35      	ldr	r3, [pc, #212]	; (400900 <sd_mmc_check+0x590>)
  40082a:	681b      	ldr	r3, [r3, #0]
  40082c:	221a      	movs	r2, #26
  40082e:	741a      	strb	r2, [r3, #16]
  400830:	e00d      	b.n	40084e <sd_mmc_check+0x4de>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400832:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400836:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400838:	4b31      	ldr	r3, [pc, #196]	; (400900 <sd_mmc_check+0x590>)
  40083a:	681b      	ldr	r3, [r3, #0]
  40083c:	bf14      	ite	ne
  40083e:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400840:	2220      	moveq	r2, #32
  400842:	741a      	strb	r2, [r3, #16]
  400844:	e003      	b.n	40084e <sd_mmc_check+0x4de>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400846:	4b2e      	ldr	r3, [pc, #184]	; (400900 <sd_mmc_check+0x590>)
  400848:	681b      	ldr	r3, [r3, #0]
  40084a:	2210      	movs	r2, #16
  40084c:	741a      	strb	r2, [r3, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
  40084e:	4b2c      	ldr	r3, [pc, #176]	; (400900 <sd_mmc_check+0x590>)
  400850:	681b      	ldr	r3, [r3, #0]
  400852:	7bdb      	ldrb	r3, [r3, #15]
  400854:	f013 0f04 	tst.w	r3, #4
  400858:	f000 8093 	beq.w	400982 <sd_mmc_check+0x612>
  40085c:	2409      	movs	r4, #9
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
	for(i = 0; i < 4; i++) {
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  40085e:	2600      	movs	r6, #0
  400860:	4d33      	ldr	r5, [pc, #204]	; (400930 <sd_mmc_check+0x5c0>)
  400862:	f1a4 0309 	sub.w	r3, r4, #9
  400866:	aa03      	add	r2, sp, #12
  400868:	4413      	add	r3, r2
  40086a:	9300      	str	r3, [sp, #0]
  40086c:	4633      	mov	r3, r6
  40086e:	4622      	mov	r2, r4
  400870:	4631      	mov	r1, r6
  400872:	4630      	mov	r0, r6
  400874:	47a8      	blx	r5
		addr_old++;
  400876:	3401      	adds	r4, #1
	uint8_t tplfe_max_tran_speed, i;
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
	for(i = 0; i < 4; i++) {
  400878:	2c0d      	cmp	r4, #13
  40087a:	d1f2      	bne.n	400862 <sd_mmc_check+0x4f2>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
		addr_old++;
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  40087c:	f89d 200d 	ldrb.w	r2, [sp, #13]
  400880:	f89d 300c 	ldrb.w	r3, [sp, #12]
  400884:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  400888:	f89d 800e 	ldrb.w	r8, [sp, #14]
  40088c:	eb03 4308 	add.w	r3, r3, r8, lsl #16
  400890:	f89d 800f 	ldrb.w	r8, [sp, #15]
  400894:	eb03 6808 	add.w	r8, r3, r8, lsl #24
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;
  400898:	4645      	mov	r5, r8

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40089a:	4f25      	ldr	r7, [pc, #148]	; (400930 <sd_mmc_check+0x5c0>)
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
		addr_old++;
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;
  40089c:	2400      	movs	r4, #0

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40089e:	4626      	mov	r6, r4
  4008a0:	ab04      	add	r3, sp, #16
  4008a2:	4423      	add	r3, r4
  4008a4:	9300      	str	r3, [sp, #0]
  4008a6:	4633      	mov	r3, r6
  4008a8:	192a      	adds	r2, r5, r4
  4008aa:	4631      	mov	r1, r6
  4008ac:	4630      	mov	r0, r6
  4008ae:	47b8      	blx	r7
  4008b0:	3401      	adds	r4, #1
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
	addr_new = addr_old;

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
  4008b2:	2c03      	cmp	r4, #3
  4008b4:	d1f4      	bne.n	4008a0 <sd_mmc_check+0x530>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
			addr_new++;
		}
		if (buf[0] == SDIO_CISTPL_END) {
  4008b6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008ba:	2bff      	cmp	r3, #255	; 0xff
  4008bc:	f000 812c 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false; /* Tuple error */
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4008c0:	2b22      	cmp	r3, #34	; 0x22
  4008c2:	d102      	bne.n	4008ca <sd_mmc_check+0x55a>
  4008c4:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4008c8:	b3a3      	cbz	r3, 400934 <sd_mmc_check+0x5c4>
			break; /* Fun0 tuple found */
		}
		if (buf[1] == 0) {
  4008ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4008ce:	2b00      	cmp	r3, #0
  4008d0:	f000 8122 	beq.w	400b18 <sd_mmc_check+0x7a8>
			return false; /* Tuple error */
		}
		/* Next address */
		addr_new += buf[1]-1;
  4008d4:	3302      	adds	r3, #2
  4008d6:	441d      	add	r5, r3
		if (addr_new > (addr_old + 256)) {
  4008d8:	f508 7380 	add.w	r3, r8, #256	; 0x100
  4008dc:	429d      	cmp	r5, r3
  4008de:	d9dd      	bls.n	40089c <sd_mmc_check+0x52c>
  4008e0:	e11a      	b.n	400b18 <sd_mmc_check+0x7a8>
  4008e2:	bf00      	nop
  4008e4:	2040090a 	.word	0x2040090a
  4008e8:	00401171 	.word	0x00401171
  4008ec:	01b70000 	.word	0x01b70000
  4008f0:	01b70200 	.word	0x01b70200
  4008f4:	01b70100 	.word	0x01b70100
  4008f8:	0040124d 	.word	0x0040124d
  4008fc:	00401271 	.word	0x00401271
  400900:	20400904 	.word	0x20400904
  400904:	0040019d 	.word	0x0040019d
  400908:	0040117d 	.word	0x0040117d
  40090c:	03b90100 	.word	0x03b90100
  400910:	03197500 	.word	0x03197500
  400914:	004002fd 	.word	0x004002fd
  400918:	0040deac 	.word	0x0040deac
  40091c:	0040de6c 	.word	0x0040de6c
  400920:	00081133 	.word	0x00081133
  400924:	004012a9 	.word	0x004012a9
  400928:	004013e5 	.word	0x004013e5
  40092c:	00401499 	.word	0x00401499
  400930:	004002c9 	.word	0x004002c9
  400934:	ac04      	add	r4, sp, #16
  400936:	f105 0806 	add.w	r8, r5, #6
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
	for(i = 0; i < 6; i++) {
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40093a:	2700      	movs	r7, #0
  40093c:	4e9e      	ldr	r6, [pc, #632]	; (400bb8 <sd_mmc_check+0x848>)
  40093e:	9400      	str	r4, [sp, #0]
  400940:	463b      	mov	r3, r7
  400942:	462a      	mov	r2, r5
  400944:	4639      	mov	r1, r7
  400946:	4638      	mov	r0, r7
  400948:	47b0      	blx	r6
		addr_new++;
  40094a:	3501      	adds	r5, #1
  40094c:	3401      	adds	r4, #1
		}
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
	for(i = 0; i < 6; i++) {
  40094e:	4545      	cmp	r5, r8
  400950:	d1f5      	bne.n	40093e <sd_mmc_check+0x5ce>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
		addr_new++;
	}

	tplfe_max_tran_speed = buf[5];
  400952:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400956:	2b32      	cmp	r3, #50	; 0x32
  400958:	bf28      	it	cs
  40095a:	2332      	movcs	r3, #50	; 0x32
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40095c:	4a97      	ldr	r2, [pc, #604]	; (400bbc <sd_mmc_check+0x84c>)
  40095e:	6812      	ldr	r2, [r2, #0]
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400960:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		 */
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400964:	f003 0307 	and.w	r3, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  400968:	4995      	ldr	r1, [pc, #596]	; (400bc0 <sd_mmc_check+0x850>)
  40096a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400972:	fb03 f301 	mul.w	r3, r3, r1
  400976:	4993      	ldr	r1, [pc, #588]	; (400bc4 <sd_mmc_check+0x854>)
  400978:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40097c:	fb03 f301 	mul.w	r3, r3, r1
  400980:	6013      	str	r3, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400982:	4b91      	ldr	r3, [pc, #580]	; (400bc8 <sd_mmc_check+0x858>)
  400984:	7818      	ldrb	r0, [r3, #0]
  400986:	4b91      	ldr	r3, [pc, #580]	; (400bcc <sd_mmc_check+0x85c>)
  400988:	4798      	blx	r3
  40098a:	2803      	cmp	r0, #3
  40098c:	d942      	bls.n	400a14 <sd_mmc_check+0x6a4>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
  40098e:	4b8b      	ldr	r3, [pc, #556]	; (400bbc <sd_mmc_check+0x84c>)
  400990:	681b      	ldr	r3, [r3, #0]
  400992:	7bdb      	ldrb	r3, [r3, #15]
  400994:	f013 0f04 	tst.w	r3, #4
  400998:	d01f      	beq.n	4009da <sd_mmc_check+0x66a>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  40099a:	ab04      	add	r3, sp, #16
  40099c:	9300      	str	r3, [sp, #0]
  40099e:	2300      	movs	r3, #0
  4009a0:	2208      	movs	r2, #8
  4009a2:	4619      	mov	r1, r3
  4009a4:	4618      	mov	r0, r3
  4009a6:	4c84      	ldr	r4, [pc, #528]	; (400bb8 <sd_mmc_check+0x848>)
  4009a8:	47a0      	blx	r4
  4009aa:	2800      	cmp	r0, #0
  4009ac:	f000 80b4 	beq.w	400b18 <sd_mmc_check+0x7a8>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  4009b0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  4009b4:	2b00      	cmp	r3, #0
  4009b6:	da10      	bge.n	4009da <sd_mmc_check+0x66a>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
  4009b8:	ab14      	add	r3, sp, #80	; 0x50
  4009ba:	2202      	movs	r2, #2
  4009bc:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  4009c0:	9300      	str	r3, [sp, #0]
  4009c2:	2301      	movs	r3, #1
  4009c4:	2207      	movs	r2, #7
  4009c6:	2100      	movs	r1, #0
  4009c8:	4618      	mov	r0, r3
  4009ca:	47a0      	blx	r4
  4009cc:	2800      	cmp	r0, #0
  4009ce:	f000 80a3 	beq.w	400b18 <sd_mmc_check+0x7a8>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
  4009d2:	4b7a      	ldr	r3, [pc, #488]	; (400bbc <sd_mmc_check+0x84c>)
  4009d4:	681b      	ldr	r3, [r3, #0]
  4009d6:	2204      	movs	r2, #4
  4009d8:	745a      	strb	r2, [r3, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4009da:	4b78      	ldr	r3, [pc, #480]	; (400bbc <sd_mmc_check+0x84c>)
  4009dc:	681b      	ldr	r3, [r3, #0]
  4009de:	7bda      	ldrb	r2, [r3, #15]
  4009e0:	f012 0f01 	tst.w	r2, #1
  4009e4:	d014      	beq.n	400a10 <sd_mmc_check+0x6a0>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4009e6:	8999      	ldrh	r1, [r3, #12]
  4009e8:	0409      	lsls	r1, r1, #16
  4009ea:	f241 1037 	movw	r0, #4407	; 0x1137
  4009ee:	4b78      	ldr	r3, [pc, #480]	; (400bd0 <sd_mmc_check+0x860>)
  4009f0:	4798      	blx	r3
  4009f2:	2800      	cmp	r0, #0
  4009f4:	f000 8090 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  4009f8:	2102      	movs	r1, #2
  4009fa:	f241 1006 	movw	r0, #4358	; 0x1106
  4009fe:	4b74      	ldr	r3, [pc, #464]	; (400bd0 <sd_mmc_check+0x860>)
  400a00:	4798      	blx	r3
  400a02:	2800      	cmp	r0, #0
  400a04:	f000 8088 	beq.w	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	sd_mmc_card->bus_width = 4;
  400a08:	4b6c      	ldr	r3, [pc, #432]	; (400bbc <sd_mmc_check+0x84c>)
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	2204      	movs	r2, #4
  400a0e:	745a      	strb	r2, [r3, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  400a10:	4b70      	ldr	r3, [pc, #448]	; (400bd4 <sd_mmc_check+0x864>)
  400a12:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  400a14:	4b70      	ldr	r3, [pc, #448]	; (400bd8 <sd_mmc_check+0x868>)
  400a16:	4798      	blx	r3
  400a18:	2800      	cmp	r0, #0
  400a1a:	d068      	beq.n	400aee <sd_mmc_check+0x77e>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
  400a1c:	4b67      	ldr	r3, [pc, #412]	; (400bbc <sd_mmc_check+0x84c>)
  400a1e:	681b      	ldr	r3, [r3, #0]
  400a20:	7bdb      	ldrb	r3, [r3, #15]
  400a22:	f013 0f04 	tst.w	r3, #4
  400a26:	d022      	beq.n	400a6e <sd_mmc_check+0x6fe>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400a28:	ab04      	add	r3, sp, #16
  400a2a:	9300      	str	r3, [sp, #0]
  400a2c:	2300      	movs	r3, #0
  400a2e:	2213      	movs	r2, #19
  400a30:	4619      	mov	r1, r3
  400a32:	4618      	mov	r0, r3
  400a34:	4c60      	ldr	r4, [pc, #384]	; (400bb8 <sd_mmc_check+0x848>)
  400a36:	47a0      	blx	r4
  400a38:	2800      	cmp	r0, #0
  400a3a:	d06d      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400a3c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a40:	f013 0f01 	tst.w	r3, #1
  400a44:	d013      	beq.n	400a6e <sd_mmc_check+0x6fe>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
  400a46:	ab14      	add	r3, sp, #80	; 0x50
  400a48:	2202      	movs	r2, #2
  400a4a:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400a4e:	9300      	str	r3, [sp, #0]
  400a50:	2301      	movs	r3, #1
  400a52:	2213      	movs	r2, #19
  400a54:	2100      	movs	r1, #0
  400a56:	4618      	mov	r0, r3
  400a58:	47a0      	blx	r4
  400a5a:	2800      	cmp	r0, #0
  400a5c:	d05c      	beq.n	400b18 <sd_mmc_check+0x7a8>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
  400a5e:	4b57      	ldr	r3, [pc, #348]	; (400bbc <sd_mmc_check+0x84c>)
  400a60:	681b      	ldr	r3, [r3, #0]
  400a62:	2201      	movs	r2, #1
  400a64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400a68:	681a      	ldr	r2, [r3, #0]
  400a6a:	0052      	lsls	r2, r2, #1
  400a6c:	601a      	str	r2, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a6e:	4b53      	ldr	r3, [pc, #332]	; (400bbc <sd_mmc_check+0x84c>)
  400a70:	681b      	ldr	r3, [r3, #0]
  400a72:	7bda      	ldrb	r2, [r3, #15]
  400a74:	f012 0f01 	tst.w	r2, #1
  400a78:	d037      	beq.n	400aea <sd_mmc_check+0x77a>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a7a:	7c1b      	ldrb	r3, [r3, #16]
  400a7c:	2b10      	cmp	r3, #16
  400a7e:	d934      	bls.n	400aea <sd_mmc_check+0x77a>
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400a80:	2440      	movs	r4, #64	; 0x40
  400a82:	4622      	mov	r2, r4
  400a84:	2100      	movs	r1, #0
  400a86:	a804      	add	r0, sp, #16
  400a88:	4b54      	ldr	r3, [pc, #336]	; (400bdc <sd_mmc_check+0x86c>)
  400a8a:	4798      	blx	r3

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400a8c:	2301      	movs	r3, #1
  400a8e:	9300      	str	r3, [sp, #0]
  400a90:	4622      	mov	r2, r4
  400a92:	4953      	ldr	r1, [pc, #332]	; (400be0 <sd_mmc_check+0x870>)
  400a94:	4853      	ldr	r0, [pc, #332]	; (400be4 <sd_mmc_check+0x874>)
  400a96:	4c54      	ldr	r4, [pc, #336]	; (400be8 <sd_mmc_check+0x878>)
  400a98:	47a0      	blx	r4
  400a9a:	2800      	cmp	r0, #0
  400a9c:	d03c      	beq.n	400b18 <sd_mmc_check+0x7a8>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  400a9e:	2101      	movs	r1, #1
  400aa0:	a804      	add	r0, sp, #16
  400aa2:	4b52      	ldr	r3, [pc, #328]	; (400bec <sd_mmc_check+0x87c>)
  400aa4:	4798      	blx	r3
  400aa6:	2800      	cmp	r0, #0
  400aa8:	d036      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400aaa:	4b51      	ldr	r3, [pc, #324]	; (400bf0 <sd_mmc_check+0x880>)
  400aac:	4798      	blx	r3
  400aae:	2800      	cmp	r0, #0
  400ab0:	d032      	beq.n	400b18 <sd_mmc_check+0x7a8>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400ab2:	4b50      	ldr	r3, [pc, #320]	; (400bf4 <sd_mmc_check+0x884>)
  400ab4:	4798      	blx	r3
  400ab6:	f010 0f80 	tst.w	r0, #128	; 0x80
  400aba:	d12d      	bne.n	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400abc:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400ac0:	f003 030f 	and.w	r3, r3, #15
  400ac4:	2b0f      	cmp	r3, #15
  400ac6:	d010      	beq.n	400aea <sd_mmc_check+0x77a>
  400ac8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400acc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ad0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400ad4:	d120      	bne.n	400b18 <sd_mmc_check+0x7a8>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  400ad6:	4b48      	ldr	r3, [pc, #288]	; (400bf8 <sd_mmc_check+0x888>)
  400ad8:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400ada:	4b38      	ldr	r3, [pc, #224]	; (400bbc <sd_mmc_check+0x84c>)
  400adc:	681b      	ldr	r3, [r3, #0]
  400ade:	2201      	movs	r2, #1
  400ae0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400ae4:	681a      	ldr	r2, [r3, #0]
  400ae6:	0052      	lsls	r2, r2, #1
  400ae8:	601a      	str	r2, [r3, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  400aea:	4b3a      	ldr	r3, [pc, #232]	; (400bd4 <sd_mmc_check+0x864>)
  400aec:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400aee:	4b33      	ldr	r3, [pc, #204]	; (400bbc <sd_mmc_check+0x84c>)
  400af0:	681b      	ldr	r3, [r3, #0]
  400af2:	7bdb      	ldrb	r3, [r3, #15]
  400af4:	f013 0f01 	tst.w	r3, #1
  400af8:	d006      	beq.n	400b08 <sd_mmc_check+0x798>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400afa:	f44f 7100 	mov.w	r1, #512	; 0x200
  400afe:	f241 1010 	movw	r0, #4368	; 0x1110
  400b02:	4b33      	ldr	r3, [pc, #204]	; (400bd0 <sd_mmc_check+0x860>)
  400b04:	4798      	blx	r3
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400b06:	b138      	cbz	r0, 400b18 <sd_mmc_check+0x7a8>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400b08:	4b2c      	ldr	r3, [pc, #176]	; (400bbc <sd_mmc_check+0x84c>)
  400b0a:	681b      	ldr	r3, [r3, #0]
  400b0c:	2200      	movs	r2, #0
  400b0e:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  400b10:	4b3a      	ldr	r3, [pc, #232]	; (400bfc <sd_mmc_check+0x88c>)
  400b12:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  400b14:	2001      	movs	r0, #1
  400b16:	e04c      	b.n	400bb2 <sd_mmc_check+0x842>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  400b18:	4b28      	ldr	r3, [pc, #160]	; (400bbc <sd_mmc_check+0x84c>)
  400b1a:	681b      	ldr	r3, [r3, #0]
  400b1c:	2403      	movs	r4, #3
  400b1e:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  400b20:	4b36      	ldr	r3, [pc, #216]	; (400bfc <sd_mmc_check+0x88c>)
  400b22:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  400b24:	4620      	mov	r0, r4
  400b26:	e044      	b.n	400bb2 <sd_mmc_check+0x842>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
  400b28:	f04f 0800 	mov.w	r8, #0
  400b2c:	e001      	b.n	400b32 <sd_mmc_check+0x7c2>
  400b2e:	f04f 0800 	mov.w	r8, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400b32:	2100      	movs	r1, #0
  400b34:	f244 5005 	movw	r0, #17669	; 0x4505
  400b38:	4b25      	ldr	r3, [pc, #148]	; (400bd0 <sd_mmc_check+0x860>)
  400b3a:	4798      	blx	r3
  400b3c:	2800      	cmp	r0, #0
  400b3e:	f47f ac57 	bne.w	4003f0 <sd_mmc_check+0x80>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b42:	4b1e      	ldr	r3, [pc, #120]	; (400bbc <sd_mmc_check+0x84c>)
  400b44:	681b      	ldr	r3, [r3, #0]
  400b46:	7bdb      	ldrb	r3, [r3, #15]
  400b48:	f013 0f01 	tst.w	r3, #1
  400b4c:	f43f add8 	beq.w	400700 <sd_mmc_check+0x390>
  400b50:	f1b8 0f00 	cmp.w	r8, #0
  400b54:	4e2a      	ldr	r6, [pc, #168]	; (400c00 <sd_mmc_check+0x890>)
  400b56:	bf08      	it	eq
  400b58:	f44f 16fc 	moveq.w	r6, #2064384	; 0x1f8000
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
	if ((resp & OCR_SDIO_NF) == 0) {
  400b5c:	f640 0435 	movw	r4, #2101	; 0x835
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400b60:	f04f 0800 	mov.w	r8, #0
  400b64:	4d1a      	ldr	r5, [pc, #104]	; (400bd0 <sd_mmc_check+0x860>)
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400b66:	4f23      	ldr	r7, [pc, #140]	; (400bf4 <sd_mmc_check+0x884>)
  400b68:	e468      	b.n	40043c <sd_mmc_check+0xcc>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  400b6a:	4b14      	ldr	r3, [pc, #80]	; (400bbc <sd_mmc_check+0x84c>)
  400b6c:	681b      	ldr	r3, [r3, #0]
  400b6e:	2202      	movs	r2, #2
  400b70:	73da      	strb	r2, [r3, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400b72:	2100      	movs	r1, #0
  400b74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400b78:	4b15      	ldr	r3, [pc, #84]	; (400bd0 <sd_mmc_check+0x860>)
  400b7a:	4798      	blx	r3
  400b7c:	2800      	cmp	r0, #0
  400b7e:	d0cb      	beq.n	400b18 <sd_mmc_check+0x7a8>
  400b80:	e47b      	b.n	40047a <sd_mmc_check+0x10a>
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b82:	4b0e      	ldr	r3, [pc, #56]	; (400bbc <sd_mmc_check+0x84c>)
  400b84:	681b      	ldr	r3, [r3, #0]
  400b86:	7bdb      	ldrb	r3, [r3, #15]
  400b88:	f013 0f01 	tst.w	r3, #1
  400b8c:	f47f adb0 	bne.w	4006f0 <sd_mmc_check+0x380>
  400b90:	e5b6      	b.n	400700 <sd_mmc_check+0x390>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400b92:	2100      	movs	r1, #0
  400b94:	f645 3002 	movw	r0, #23298	; 0x5b02
  400b98:	4b0d      	ldr	r3, [pc, #52]	; (400bd0 <sd_mmc_check+0x860>)
  400b9a:	4798      	blx	r3
  400b9c:	2800      	cmp	r0, #0
  400b9e:	d0bb      	beq.n	400b18 <sd_mmc_check+0x7a8>
  400ba0:	e48a      	b.n	4004b8 <sd_mmc_check+0x148>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  400ba2:	4b09      	ldr	r3, [pc, #36]	; (400bc8 <sd_mmc_check+0x858>)
  400ba4:	7818      	ldrb	r0, [r3, #0]
  400ba6:	4b09      	ldr	r3, [pc, #36]	; (400bcc <sd_mmc_check+0x85c>)
  400ba8:	4798      	blx	r3
  400baa:	2803      	cmp	r0, #3
  400bac:	f63f ad50 	bhi.w	400650 <sd_mmc_check+0x2e0>
  400bb0:	e56e      	b.n	400690 <sd_mmc_check+0x320>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400bb2:	b014      	add	sp, #80	; 0x50
  400bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bb8:	004002c9 	.word	0x004002c9
  400bbc:	20400904 	.word	0x20400904
  400bc0:	0040deac 	.word	0x0040deac
  400bc4:	0040de6c 	.word	0x0040de6c
  400bc8:	2040090a 	.word	0x2040090a
  400bcc:	00401171 	.word	0x00401171
  400bd0:	0040124d 	.word	0x0040124d
  400bd4:	0040019d 	.word	0x0040019d
  400bd8:	0040117d 	.word	0x0040117d
  400bdc:	00407d21 	.word	0x00407d21
  400be0:	80ffff01 	.word	0x80ffff01
  400be4:	00081106 	.word	0x00081106
  400be8:	004012a9 	.word	0x004012a9
  400bec:	004013e5 	.word	0x004013e5
  400bf0:	00401499 	.word	0x00401499
  400bf4:	00401271 	.word	0x00401271
  400bf8:	00401229 	.word	0x00401229
  400bfc:	0040032d 	.word	0x0040032d
  400c00:	401f8000 	.word	0x401f8000

00400c04 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c04:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c06:	4b05      	ldr	r3, [pc, #20]	; (400c1c <sd_mmc_get_type+0x18>)
  400c08:	4798      	blx	r3
  400c0a:	b928      	cbnz	r0, 400c18 <sd_mmc_get_type+0x14>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
  400c0c:	4b04      	ldr	r3, [pc, #16]	; (400c20 <sd_mmc_get_type+0x1c>)
  400c0e:	4798      	blx	r3
	return sd_mmc_card->type;
  400c10:	4b04      	ldr	r3, [pc, #16]	; (400c24 <sd_mmc_get_type+0x20>)
  400c12:	681b      	ldr	r3, [r3, #0]
  400c14:	7bd8      	ldrb	r0, [r3, #15]
  400c16:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
  400c18:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c1a:	bd08      	pop	{r3, pc}
  400c1c:	004001c9 	.word	0x004001c9
  400c20:	0040032d 	.word	0x0040032d
  400c24:	20400904 	.word	0x20400904

00400c28 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400c28:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c2a:	4b05      	ldr	r3, [pc, #20]	; (400c40 <sd_mmc_get_capacity+0x18>)
  400c2c:	4798      	blx	r3
  400c2e:	b928      	cbnz	r0, 400c3c <sd_mmc_get_capacity+0x14>
		return 0;
	}
	sd_mmc_deselect_slot();
  400c30:	4b04      	ldr	r3, [pc, #16]	; (400c44 <sd_mmc_get_capacity+0x1c>)
  400c32:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400c34:	4b04      	ldr	r3, [pc, #16]	; (400c48 <sd_mmc_get_capacity+0x20>)
  400c36:	681b      	ldr	r3, [r3, #0]
  400c38:	6858      	ldr	r0, [r3, #4]
  400c3a:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
  400c3c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400c3e:	bd08      	pop	{r3, pc}
  400c40:	004001c9 	.word	0x004001c9
  400c44:	0040032d 	.word	0x0040032d
  400c48:	20400904 	.word	0x20400904

00400c4c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400c4c:	2000      	movs	r0, #0
  400c4e:	4770      	bx	lr

00400c50 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400c54:	b083      	sub	sp, #12
  400c56:	4689      	mov	r9, r1
  400c58:	4690      	mov	r8, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400c5a:	4b25      	ldr	r3, [pc, #148]	; (400cf0 <sd_mmc_init_read_blocks+0xa0>)
  400c5c:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400c5e:	2800      	cmp	r0, #0
  400c60:	d131      	bne.n	400cc6 <sd_mmc_init_read_blocks+0x76>
  400c62:	4c24      	ldr	r4, [pc, #144]	; (400cf4 <sd_mmc_init_read_blocks+0xa4>)
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c64:	4e24      	ldr	r6, [pc, #144]	; (400cf8 <sd_mmc_init_read_blocks+0xa8>)
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c66:	4d25      	ldr	r5, [pc, #148]	; (400cfc <sd_mmc_init_read_blocks+0xac>)
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c68:	4f25      	ldr	r7, [pc, #148]	; (400d00 <sd_mmc_init_read_blocks+0xb0>)
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c6a:	6833      	ldr	r3, [r6, #0]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c6c:	8999      	ldrh	r1, [r3, #12]
  400c6e:	0409      	lsls	r1, r1, #16
  400c70:	f241 100d 	movw	r0, #4365	; 0x110d
  400c74:	47a8      	blx	r5
  400c76:	b338      	cbz	r0, 400cc8 <sd_mmc_init_read_blocks+0x78>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c78:	47b8      	blx	r7
  400c7a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400c7e:	d127      	bne.n	400cd0 <sd_mmc_init_read_blocks+0x80>
				break;
			}
		}
		if (nec_timeout-- == 0) {
  400c80:	3c01      	subs	r4, #1
  400c82:	d1f2      	bne.n	400c6a <sd_mmc_init_read_blocks+0x1a>
  400c84:	e020      	b.n	400cc8 <sd_mmc_init_read_blocks+0x78>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400c86:	ea4f 2949 	mov.w	r9, r9, lsl #9
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400c8a:	2301      	movs	r3, #1
  400c8c:	9300      	str	r3, [sp, #0]
  400c8e:	4643      	mov	r3, r8
  400c90:	f44f 7200 	mov.w	r2, #512	; 0x200
  400c94:	4649      	mov	r1, r9
  400c96:	4c1b      	ldr	r4, [pc, #108]	; (400d04 <sd_mmc_init_read_blocks+0xb4>)
  400c98:	47a0      	blx	r4
  400c9a:	b918      	cbnz	r0, 400ca4 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
  400c9c:	4b1a      	ldr	r3, [pc, #104]	; (400d08 <sd_mmc_init_read_blocks+0xb8>)
  400c9e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400ca0:	2005      	movs	r0, #5
  400ca2:	e022      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  400ca4:	4b16      	ldr	r3, [pc, #88]	; (400d00 <sd_mmc_init_read_blocks+0xb0>)
  400ca6:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ca8:	4b18      	ldr	r3, [pc, #96]	; (400d0c <sd_mmc_init_read_blocks+0xbc>)
  400caa:	4003      	ands	r3, r0
  400cac:	b11b      	cbz	r3, 400cb6 <sd_mmc_init_read_blocks+0x66>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  400cae:	4b16      	ldr	r3, [pc, #88]	; (400d08 <sd_mmc_init_read_blocks+0xb8>)
  400cb0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400cb2:	2005      	movs	r0, #5
  400cb4:	e019      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400cb6:	4b16      	ldr	r3, [pc, #88]	; (400d10 <sd_mmc_init_read_blocks+0xc0>)
  400cb8:	f8a3 8000 	strh.w	r8, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400cbc:	4b15      	ldr	r3, [pc, #84]	; (400d14 <sd_mmc_init_read_blocks+0xc4>)
  400cbe:	f8a3 8000 	strh.w	r8, [r3]
	return SD_MMC_OK;
  400cc2:	2000      	movs	r0, #0
  400cc4:	e011      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
  400cc6:	e010      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
  400cc8:	4b0f      	ldr	r3, [pc, #60]	; (400d08 <sd_mmc_init_read_blocks+0xb8>)
  400cca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400ccc:	2005      	movs	r0, #5
  400cce:	e00c      	b.n	400cea <sd_mmc_init_read_blocks+0x9a>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400cd0:	4811      	ldr	r0, [pc, #68]	; (400d18 <sd_mmc_init_read_blocks+0xc8>)
  400cd2:	4b12      	ldr	r3, [pc, #72]	; (400d1c <sd_mmc_init_read_blocks+0xcc>)
  400cd4:	f1b8 0f01 	cmp.w	r8, #1
  400cd8:	bf88      	it	hi
  400cda:	4618      	movhi	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400cdc:	4b06      	ldr	r3, [pc, #24]	; (400cf8 <sd_mmc_init_read_blocks+0xa8>)
  400cde:	681b      	ldr	r3, [r3, #0]
  400ce0:	7bdb      	ldrb	r3, [r3, #15]
  400ce2:	f013 0f08 	tst.w	r3, #8
  400ce6:	d1d0      	bne.n	400c8a <sd_mmc_init_read_blocks+0x3a>
  400ce8:	e7cd      	b.n	400c86 <sd_mmc_init_read_blocks+0x36>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400cea:	b003      	add	sp, #12
  400cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400cf0:	004001c9 	.word	0x004001c9
  400cf4:	00030d41 	.word	0x00030d41
  400cf8:	20400904 	.word	0x20400904
  400cfc:	0040124d 	.word	0x0040124d
  400d00:	00401271 	.word	0x00401271
  400d04:	004012a9 	.word	0x004012a9
  400d08:	0040032d 	.word	0x0040032d
  400d0c:	e4580000 	.word	0xe4580000
  400d10:	20400908 	.word	0x20400908
  400d14:	20400900 	.word	0x20400900
  400d18:	00081111 	.word	0x00081111
  400d1c:	00101112 	.word	0x00101112

00400d20 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d20:	b510      	push	{r4, lr}
  400d22:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400d24:	4b06      	ldr	r3, [pc, #24]	; (400d40 <sd_mmc_start_read_blocks+0x20>)
  400d26:	4798      	blx	r3
  400d28:	b920      	cbnz	r0, 400d34 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d2a:	2200      	movs	r2, #0
  400d2c:	4b05      	ldr	r3, [pc, #20]	; (400d44 <sd_mmc_start_read_blocks+0x24>)
  400d2e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d30:	2005      	movs	r0, #5
  400d32:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d34:	4a03      	ldr	r2, [pc, #12]	; (400d44 <sd_mmc_start_read_blocks+0x24>)
  400d36:	8813      	ldrh	r3, [r2, #0]
  400d38:	1b1c      	subs	r4, r3, r4
  400d3a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d3c:	2000      	movs	r0, #0
}
  400d3e:	bd10      	pop	{r4, pc}
  400d40:	004013e5 	.word	0x004013e5
  400d44:	20400908 	.word	0x20400908

00400d48 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400d48:	b510      	push	{r4, lr}
  400d4a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400d4c:	4b12      	ldr	r3, [pc, #72]	; (400d98 <sd_mmc_wait_end_of_read_blocks+0x50>)
  400d4e:	4798      	blx	r3
  400d50:	b1f0      	cbz	r0, 400d90 <sd_mmc_wait_end_of_read_blocks+0x48>
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  400d52:	b11c      	cbz	r4, 400d5c <sd_mmc_wait_end_of_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d54:	2200      	movs	r2, #0
  400d56:	4b11      	ldr	r3, [pc, #68]	; (400d9c <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d58:	801a      	strh	r2, [r3, #0]
  400d5a:	e002      	b.n	400d62 <sd_mmc_wait_end_of_read_blocks+0x1a>
	} else if (sd_mmc_nb_block_remaining) {
  400d5c:	4b0f      	ldr	r3, [pc, #60]	; (400d9c <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d5e:	881b      	ldrh	r3, [r3, #0]
  400d60:	b9c3      	cbnz	r3, 400d94 <sd_mmc_wait_end_of_read_blocks+0x4c>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d62:	4b0f      	ldr	r3, [pc, #60]	; (400da0 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d64:	881b      	ldrh	r3, [r3, #0]
  400d66:	2b01      	cmp	r3, #1
  400d68:	d103      	bne.n	400d72 <sd_mmc_wait_end_of_read_blocks+0x2a>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  400d6a:	4b0e      	ldr	r3, [pc, #56]	; (400da4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d6c:	4798      	blx	r3
		return SD_MMC_OK;
  400d6e:	2000      	movs	r0, #0
  400d70:	bd10      	pop	{r4, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d72:	2100      	movs	r1, #0
  400d74:	f243 100c 	movw	r0, #12556	; 0x310c
  400d78:	4b0b      	ldr	r3, [pc, #44]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d7a:	4798      	blx	r3
  400d7c:	b920      	cbnz	r0, 400d88 <sd_mmc_wait_end_of_read_blocks+0x40>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400d7e:	2100      	movs	r1, #0
  400d80:	f243 100c 	movw	r0, #12556	; 0x310c
  400d84:	4b08      	ldr	r3, [pc, #32]	; (400da8 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d86:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  400d88:	4b06      	ldr	r3, [pc, #24]	; (400da4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d8a:	4798      	blx	r3
	return SD_MMC_OK;
  400d8c:	2000      	movs	r0, #0
  400d8e:	bd10      	pop	{r4, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
  400d90:	2005      	movs	r0, #5
  400d92:	bd10      	pop	{r4, pc}
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  400d94:	2000      	movs	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400d96:	bd10      	pop	{r4, pc}
  400d98:	00401499 	.word	0x00401499
  400d9c:	20400908 	.word	0x20400908
  400da0:	20400900 	.word	0x20400900
  400da4:	0040032d 	.word	0x0040032d
  400da8:	0040124d 	.word	0x0040124d

00400dac <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400dac:	b530      	push	{r4, r5, lr}
  400dae:	b083      	sub	sp, #12
  400db0:	460d      	mov	r5, r1
  400db2:	4614      	mov	r4, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400db4:	4b16      	ldr	r3, [pc, #88]	; (400e10 <sd_mmc_init_write_blocks+0x64>)
  400db6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400db8:	bb38      	cbnz	r0, 400e0a <sd_mmc_init_write_blocks+0x5e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400dba:	4816      	ldr	r0, [pc, #88]	; (400e14 <sd_mmc_init_write_blocks+0x68>)
  400dbc:	4b16      	ldr	r3, [pc, #88]	; (400e18 <sd_mmc_init_write_blocks+0x6c>)
  400dbe:	2c01      	cmp	r4, #1
  400dc0:	bf88      	it	hi
  400dc2:	4618      	movhi	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dc4:	4b15      	ldr	r3, [pc, #84]	; (400e1c <sd_mmc_init_write_blocks+0x70>)
  400dc6:	681b      	ldr	r3, [r3, #0]
  400dc8:	7bdb      	ldrb	r3, [r3, #15]
  400dca:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400dce:	bf08      	it	eq
  400dd0:	026d      	lsleq	r5, r5, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400dd2:	2301      	movs	r3, #1
  400dd4:	9300      	str	r3, [sp, #0]
  400dd6:	4623      	mov	r3, r4
  400dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ddc:	4629      	mov	r1, r5
  400dde:	4d10      	ldr	r5, [pc, #64]	; (400e20 <sd_mmc_init_write_blocks+0x74>)
  400de0:	47a8      	blx	r5
  400de2:	b918      	cbnz	r0, 400dec <sd_mmc_init_write_blocks+0x40>
		sd_mmc_deselect_slot();
  400de4:	4b0f      	ldr	r3, [pc, #60]	; (400e24 <sd_mmc_init_write_blocks+0x78>)
  400de6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400de8:	2005      	movs	r0, #5
  400dea:	e00e      	b.n	400e0a <sd_mmc_init_write_blocks+0x5e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  400dec:	4b0e      	ldr	r3, [pc, #56]	; (400e28 <sd_mmc_init_write_blocks+0x7c>)
  400dee:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400df0:	4b0e      	ldr	r3, [pc, #56]	; (400e2c <sd_mmc_init_write_blocks+0x80>)
  400df2:	4003      	ands	r3, r0
  400df4:	b11b      	cbz	r3, 400dfe <sd_mmc_init_write_blocks+0x52>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  400df6:	4b0b      	ldr	r3, [pc, #44]	; (400e24 <sd_mmc_init_write_blocks+0x78>)
  400df8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400dfa:	2005      	movs	r0, #5
  400dfc:	e005      	b.n	400e0a <sd_mmc_init_write_blocks+0x5e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400dfe:	4b0c      	ldr	r3, [pc, #48]	; (400e30 <sd_mmc_init_write_blocks+0x84>)
  400e00:	801c      	strh	r4, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400e02:	4b0c      	ldr	r3, [pc, #48]	; (400e34 <sd_mmc_init_write_blocks+0x88>)
  400e04:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
  400e06:	2000      	movs	r0, #0
  400e08:	e7ff      	b.n	400e0a <sd_mmc_init_write_blocks+0x5e>
}
  400e0a:	b003      	add	sp, #12
  400e0c:	bd30      	pop	{r4, r5, pc}
  400e0e:	bf00      	nop
  400e10:	004001c9 	.word	0x004001c9
  400e14:	00089118 	.word	0x00089118
  400e18:	00109119 	.word	0x00109119
  400e1c:	20400904 	.word	0x20400904
  400e20:	004012a9 	.word	0x004012a9
  400e24:	0040032d 	.word	0x0040032d
  400e28:	00401271 	.word	0x00401271
  400e2c:	e4580000 	.word	0xe4580000
  400e30:	20400908 	.word	0x20400908
  400e34:	20400900 	.word	0x20400900

00400e38 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e38:	b510      	push	{r4, lr}
  400e3a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400e3c:	4b06      	ldr	r3, [pc, #24]	; (400e58 <sd_mmc_start_write_blocks+0x20>)
  400e3e:	4798      	blx	r3
  400e40:	b920      	cbnz	r0, 400e4c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e42:	2200      	movs	r2, #0
  400e44:	4b05      	ldr	r3, [pc, #20]	; (400e5c <sd_mmc_start_write_blocks+0x24>)
  400e46:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e48:	2005      	movs	r0, #5
  400e4a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e4c:	4a03      	ldr	r2, [pc, #12]	; (400e5c <sd_mmc_start_write_blocks+0x24>)
  400e4e:	8813      	ldrh	r3, [r2, #0]
  400e50:	1b1c      	subs	r4, r3, r4
  400e52:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e54:	2000      	movs	r0, #0
}
  400e56:	bd10      	pop	{r4, pc}
  400e58:	004014f9 	.word	0x004014f9
  400e5c:	20400908 	.word	0x20400908

00400e60 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400e60:	b510      	push	{r4, lr}
  400e62:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400e64:	4b12      	ldr	r3, [pc, #72]	; (400eb0 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400e66:	4798      	blx	r3
  400e68:	b1e8      	cbz	r0, 400ea6 <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  400e6a:	b11c      	cbz	r4, 400e74 <sd_mmc_wait_end_of_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e6c:	2200      	movs	r2, #0
  400e6e:	4b11      	ldr	r3, [pc, #68]	; (400eb4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e70:	801a      	strh	r2, [r3, #0]
  400e72:	e002      	b.n	400e7a <sd_mmc_wait_end_of_write_blocks+0x1a>
	} else if (sd_mmc_nb_block_remaining) {
  400e74:	4b0f      	ldr	r3, [pc, #60]	; (400eb4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e76:	881b      	ldrh	r3, [r3, #0]
  400e78:	b9bb      	cbnz	r3, 400eaa <sd_mmc_wait_end_of_write_blocks+0x4a>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e7a:	4b0f      	ldr	r3, [pc, #60]	; (400eb8 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400e7c:	881b      	ldrh	r3, [r3, #0]
  400e7e:	2b01      	cmp	r3, #1
  400e80:	d103      	bne.n	400e8a <sd_mmc_wait_end_of_write_blocks+0x2a>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  400e82:	4b0e      	ldr	r3, [pc, #56]	; (400ebc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e84:	4798      	blx	r3
		return SD_MMC_OK;
  400e86:	2000      	movs	r0, #0
  400e88:	bd10      	pop	{r4, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e8a:	2100      	movs	r1, #0
  400e8c:	f243 100c 	movw	r0, #12556	; 0x310c
  400e90:	4b0b      	ldr	r3, [pc, #44]	; (400ec0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e92:	4798      	blx	r3
  400e94:	b918      	cbnz	r0, 400e9e <sd_mmc_wait_end_of_write_blocks+0x3e>
			sd_mmc_deselect_slot();
  400e96:	4b09      	ldr	r3, [pc, #36]	; (400ebc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e98:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e9a:	2005      	movs	r0, #5
  400e9c:	bd10      	pop	{r4, pc}
		}
	}
	sd_mmc_deselect_slot();
  400e9e:	4b07      	ldr	r3, [pc, #28]	; (400ebc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400ea0:	4798      	blx	r3
	return SD_MMC_OK;
  400ea2:	2000      	movs	r0, #0
  400ea4:	bd10      	pop	{r4, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
  400ea6:	2005      	movs	r0, #5
  400ea8:	bd10      	pop	{r4, pc}
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  400eaa:	2000      	movs	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400eac:	bd10      	pop	{r4, pc}
  400eae:	bf00      	nop
  400eb0:	004015ad 	.word	0x004015ad
  400eb4:	20400908 	.word	0x20400908
  400eb8:	20400900 	.word	0x20400900
  400ebc:	0040032d 	.word	0x0040032d
  400ec0:	0040124d 	.word	0x0040124d

00400ec4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400ec4:	b510      	push	{r4, lr}
  400ec6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400ec8:	4b0f      	ldr	r3, [pc, #60]	; (400f08 <sd_mmc_test_unit_ready+0x44>)
  400eca:	4798      	blx	r3
  400ecc:	2801      	cmp	r0, #1
  400ece:	d016      	beq.n	400efe <sd_mmc_test_unit_ready+0x3a>
  400ed0:	b118      	cbz	r0, 400eda <sd_mmc_test_unit_ready+0x16>
  400ed2:	2802      	cmp	r0, #2
  400ed4:	d00e      	beq.n	400ef4 <sd_mmc_test_unit_ready+0x30>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ed6:	2001      	movs	r0, #1
  400ed8:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  400eda:	4b0c      	ldr	r3, [pc, #48]	; (400f0c <sd_mmc_test_unit_ready+0x48>)
  400edc:	5d1b      	ldrb	r3, [r3, r4]
  400ede:	b983      	cbnz	r3, 400f02 <sd_mmc_test_unit_ready+0x3e>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400ee0:	4620      	mov	r0, r4
  400ee2:	4b0b      	ldr	r3, [pc, #44]	; (400f10 <sd_mmc_test_unit_ready+0x4c>)
  400ee4:	4798      	blx	r3
  400ee6:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  400eea:	2800      	cmp	r0, #0
  400eec:	bf14      	ite	ne
  400eee:	2000      	movne	r0, #0
  400ef0:	2002      	moveq	r0, #2
  400ef2:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  400ef4:	2200      	movs	r2, #0
  400ef6:	4b05      	ldr	r3, [pc, #20]	; (400f0c <sd_mmc_test_unit_ready+0x48>)
  400ef8:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400efa:	2002      	movs	r0, #2
  400efc:	bd10      	pop	{r4, pc}
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  400efe:	2003      	movs	r0, #3
  400f00:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
  400f02:	2002      	movs	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
  400f04:	bd10      	pop	{r4, pc}
  400f06:	bf00      	nop
  400f08:	00400371 	.word	0x00400371
  400f0c:	2040090c 	.word	0x2040090c
  400f10:	00400c05 	.word	0x00400c05

00400f14 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400f14:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400f16:	2000      	movs	r0, #0
  400f18:	4b01      	ldr	r3, [pc, #4]	; (400f20 <sd_mmc_test_unit_ready_0+0xc>)
  400f1a:	4798      	blx	r3
}
  400f1c:	bd08      	pop	{r3, pc}
  400f1e:	bf00      	nop
  400f20:	00400ec5 	.word	0x00400ec5

00400f24 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400f24:	b538      	push	{r3, r4, r5, lr}
  400f26:	4604      	mov	r4, r0
  400f28:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400f2a:	4b04      	ldr	r3, [pc, #16]	; (400f3c <sd_mmc_read_capacity+0x18>)
  400f2c:	4798      	blx	r3
  400f2e:	0040      	lsls	r0, r0, #1
  400f30:	3801      	subs	r0, #1
  400f32:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400f34:	4620      	mov	r0, r4
  400f36:	4b02      	ldr	r3, [pc, #8]	; (400f40 <sd_mmc_read_capacity+0x1c>)
  400f38:	4798      	blx	r3
}
  400f3a:	bd38      	pop	{r3, r4, r5, pc}
  400f3c:	00400c29 	.word	0x00400c29
  400f40:	00400ec5 	.word	0x00400ec5

00400f44 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400f44:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400f46:	4601      	mov	r1, r0
  400f48:	2000      	movs	r0, #0
  400f4a:	4b01      	ldr	r3, [pc, #4]	; (400f50 <sd_mmc_read_capacity_0+0xc>)
  400f4c:	4798      	blx	r3
}
  400f4e:	bd08      	pop	{r3, pc}
  400f50:	00400f25 	.word	0x00400f25

00400f54 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400f54:	b508      	push	{r3, lr}
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
	return sd_mmc_is_write_protected(slot);
  400f56:	2000      	movs	r0, #0
  400f58:	4b01      	ldr	r3, [pc, #4]	; (400f60 <sd_mmc_wr_protect_0+0xc>)
  400f5a:	4798      	blx	r3
}

bool sd_mmc_wr_protect_0(void)
{
	return sd_mmc_wr_protect(0);
}
  400f5c:	bd08      	pop	{r3, pc}
  400f5e:	bf00      	nop
  400f60:	00400c4d 	.word	0x00400c4d

00400f64 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400f64:	b510      	push	{r4, lr}
  400f66:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400f68:	2201      	movs	r2, #1
  400f6a:	4b0a      	ldr	r3, [pc, #40]	; (400f94 <sd_mmc_mem_2_ram+0x30>)
  400f6c:	4798      	blx	r3
  400f6e:	b120      	cbz	r0, 400f7a <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400f70:	2802      	cmp	r0, #2
  400f72:	bf0c      	ite	eq
  400f74:	2002      	moveq	r0, #2
  400f76:	2001      	movne	r0, #1
  400f78:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400f7a:	2101      	movs	r1, #1
  400f7c:	4620      	mov	r0, r4
  400f7e:	4b06      	ldr	r3, [pc, #24]	; (400f98 <sd_mmc_mem_2_ram+0x34>)
  400f80:	4798      	blx	r3
  400f82:	b928      	cbnz	r0, 400f90 <sd_mmc_mem_2_ram+0x2c>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400f84:	4b05      	ldr	r3, [pc, #20]	; (400f9c <sd_mmc_mem_2_ram+0x38>)
  400f86:	4798      	blx	r3
{
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  400f88:	3000      	adds	r0, #0
  400f8a:	bf18      	it	ne
  400f8c:	2001      	movne	r0, #1
  400f8e:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
		return CTRL_FAIL;
  400f90:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400f92:	bd10      	pop	{r4, pc}
  400f94:	00400c51 	.word	0x00400c51
  400f98:	00400d21 	.word	0x00400d21
  400f9c:	00400d49 	.word	0x00400d49

00400fa0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400fa0:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400fa2:	460a      	mov	r2, r1
  400fa4:	4601      	mov	r1, r0
  400fa6:	2000      	movs	r0, #0
  400fa8:	4b01      	ldr	r3, [pc, #4]	; (400fb0 <sd_mmc_mem_2_ram_0+0x10>)
  400faa:	4798      	blx	r3
}
  400fac:	bd08      	pop	{r3, pc}
  400fae:	bf00      	nop
  400fb0:	00400f65 	.word	0x00400f65

00400fb4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400fb4:	b510      	push	{r4, lr}
  400fb6:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400fb8:	2201      	movs	r2, #1
  400fba:	4b0a      	ldr	r3, [pc, #40]	; (400fe4 <sd_mmc_ram_2_mem+0x30>)
  400fbc:	4798      	blx	r3
  400fbe:	b120      	cbz	r0, 400fca <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400fc0:	2802      	cmp	r0, #2
  400fc2:	bf0c      	ite	eq
  400fc4:	2002      	moveq	r0, #2
  400fc6:	2001      	movne	r0, #1
  400fc8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400fca:	2101      	movs	r1, #1
  400fcc:	4620      	mov	r0, r4
  400fce:	4b06      	ldr	r3, [pc, #24]	; (400fe8 <sd_mmc_ram_2_mem+0x34>)
  400fd0:	4798      	blx	r3
  400fd2:	b928      	cbnz	r0, 400fe0 <sd_mmc_ram_2_mem+0x2c>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400fd4:	4b05      	ldr	r3, [pc, #20]	; (400fec <sd_mmc_ram_2_mem+0x38>)
  400fd6:	4798      	blx	r3
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  400fd8:	3000      	adds	r0, #0
  400fda:	bf18      	it	ne
  400fdc:	2001      	movne	r0, #1
  400fde:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
		return CTRL_FAIL;
  400fe0:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400fe2:	bd10      	pop	{r4, pc}
  400fe4:	00400dad 	.word	0x00400dad
  400fe8:	00400e39 	.word	0x00400e39
  400fec:	00400e61 	.word	0x00400e61

00400ff0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  400ff0:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  400ff2:	460a      	mov	r2, r1
  400ff4:	4601      	mov	r1, r0
  400ff6:	2000      	movs	r0, #0
  400ff8:	4b01      	ldr	r3, [pc, #4]	; (401000 <sd_mmc_ram_2_mem_0+0x10>)
  400ffa:	4798      	blx	r3
}
  400ffc:	bd08      	pop	{r3, pc}
  400ffe:	bf00      	nop
  401000:	00400fb5 	.word	0x00400fb5

00401004 <mem_test_unit_ready>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401004:	b918      	cbnz	r0, 40100e <mem_test_unit_ready+0xa>
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  401006:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401008:	4b02      	ldr	r3, [pc, #8]	; (401014 <mem_test_unit_ready+0x10>)
  40100a:	4798      	blx	r3
  40100c:	bd08      	pop	{r3, pc}
  40100e:	2001      	movs	r0, #1
  401010:	4770      	bx	lr
  401012:	bf00      	nop
  401014:	00400f15 	.word	0x00400f15

00401018 <mem_read_capacity>:
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  401018:	b920      	cbnz	r0, 401024 <mem_read_capacity+0xc>
  return status;
}


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  40101a:	b508      	push	{r3, lr}
  40101c:	4608      	mov	r0, r1
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  40101e:	4b02      	ldr	r3, [pc, #8]	; (401028 <mem_read_capacity+0x10>)
  401020:	4798      	blx	r3
  401022:	bd08      	pop	{r3, pc}
  401024:	2001      	movs	r0, #1
  401026:	4770      	bx	lr
  401028:	00400f45 	.word	0x00400f45

0040102c <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  40102c:	fab0 f080 	clz	r0, r0
  401030:	0940      	lsrs	r0, r0, #5
  401032:	4770      	bx	lr

00401034 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401034:	b918      	cbnz	r0, 40103e <mem_wr_protect+0xa>

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
  401036:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  401038:	4b02      	ldr	r3, [pc, #8]	; (401044 <mem_wr_protect+0x10>)
  40103a:	4798      	blx	r3
  40103c:	bd08      	pop	{r3, pc}
  40103e:	2001      	movs	r0, #1
  401040:	4770      	bx	lr
  401042:	bf00      	nop
  401044:	00400f55 	.word	0x00400f55

00401048 <memory_2_ram>:
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  401048:	b928      	cbnz	r0, 401056 <memory_2_ram+0xe>
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  40104a:	b508      	push	{r3, lr}
  40104c:	4608      	mov	r0, r1
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  40104e:	4611      	mov	r1, r2
  401050:	4b02      	ldr	r3, [pc, #8]	; (40105c <memory_2_ram+0x14>)
  401052:	4798      	blx	r3
  401054:	bd08      	pop	{r3, pc}
  401056:	2001      	movs	r0, #1
  401058:	4770      	bx	lr
  40105a:	bf00      	nop
  40105c:	00400fa1 	.word	0x00400fa1

00401060 <ram_2_memory>:
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  401060:	b928      	cbnz	r0, 40106e <ram_2_memory+0xe>
  return status;
}


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  401062:	b508      	push	{r3, lr}
  401064:	4608      	mov	r0, r1
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  401066:	4611      	mov	r1, r2
  401068:	4b02      	ldr	r3, [pc, #8]	; (401074 <ram_2_memory+0x14>)
  40106a:	4798      	blx	r3
  40106c:	bd08      	pop	{r3, pc}
  40106e:	2001      	movs	r0, #1
  401070:	4770      	bx	lr
  401072:	bf00      	nop
  401074:	00400ff1 	.word	0x00400ff1

00401078 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  401078:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  40107a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40107e:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401080:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401082:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401084:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401086:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401088:	2680      	movs	r6, #128	; 0x80
  40108a:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  40108c:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  40108e:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401090:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401092:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401094:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  401096:	2200      	movs	r2, #0
  401098:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  40109a:	2205      	movs	r2, #5
  40109c:	601a      	str	r2, [r3, #0]
}
  40109e:	bc70      	pop	{r4, r5, r6}
  4010a0:	4770      	bx	lr
  4010a2:	bf00      	nop

004010a4 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  4010a4:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  4010a6:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  4010aa:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  4010ac:	f411 7f80 	tst.w	r1, #256	; 0x100
  4010b0:	d00c      	beq.n	4010cc <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  4010b2:	f411 6f00 	tst.w	r1, #2048	; 0x800
  4010b6:	d002      	beq.n	4010be <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  4010b8:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
  4010bc:	e006      	b.n	4010cc <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
  4010be:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  4010c2:	bf14      	ite	ne
  4010c4:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4010c8:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  4010cc:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  4010d0:	bf18      	it	ne
  4010d2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  4010d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4010da:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  4010dc:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4010de:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  4010e0:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4010e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  4010e6:	b132      	cbz	r2, 4010f6 <hsmci_send_cmd_execute+0x52>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4010e8:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  4010ec:	d00a      	beq.n	401104 <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  4010ee:	4b14      	ldr	r3, [pc, #80]	; (401140 <hsmci_send_cmd_execute+0x9c>)
  4010f0:	4798      	blx	r3
				return false;
  4010f2:	2000      	movs	r0, #0
  4010f4:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4010f6:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4010fa:	d003      	beq.n	401104 <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  4010fc:	4b10      	ldr	r3, [pc, #64]	; (401140 <hsmci_send_cmd_execute+0x9c>)
  4010fe:	4798      	blx	r3
				return false;
  401100:	2000      	movs	r0, #0
  401102:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  401104:	f013 0f01 	tst.w	r3, #1
  401108:	d0ec      	beq.n	4010e4 <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
  40110a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  40110e:	d10e      	bne.n	40112e <hsmci_send_cmd_execute+0x8a>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  401110:	2001      	movs	r0, #1
  401112:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  401114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401116:	3a01      	subs	r2, #1
  401118:	d103      	bne.n	401122 <hsmci_send_cmd_execute+0x7e>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  40111a:	4b09      	ldr	r3, [pc, #36]	; (401140 <hsmci_send_cmd_execute+0x9c>)
  40111c:	4798      	blx	r3
			return false;
  40111e:	2000      	movs	r0, #0
  401120:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  401122:	f003 0330 	and.w	r3, r3, #48	; 0x30
  401126:	2b20      	cmp	r3, #32
  401128:	d1f4      	bne.n	401114 <hsmci_send_cmd_execute+0x70>
	return true;
  40112a:	2001      	movs	r0, #1
  40112c:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  40112e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401134:	f04f 32ff 	mov.w	r2, #4294967295
  401138:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40113c:	e7f1      	b.n	401122 <hsmci_send_cmd_execute+0x7e>
  40113e:	bf00      	nop
  401140:	00401079 	.word	0x00401079

00401144 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401144:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  401146:	2012      	movs	r0, #18
  401148:	4c08      	ldr	r4, [pc, #32]	; (40116c <hsmci_init+0x28>)
  40114a:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  40114c:	203a      	movs	r0, #58	; 0x3a
  40114e:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401154:	2272      	movs	r2, #114	; 0x72
  401156:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401158:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40115a:	2211      	movs	r2, #17
  40115c:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  40115e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401162:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401164:	2205      	movs	r2, #5
  401166:	601a      	str	r2, [r3, #0]
  401168:	bd10      	pop	{r4, pc}
  40116a:	bf00      	nop
  40116c:	004065c9 	.word	0x004065c9

00401170 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401170:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401172:	bf0c      	ite	eq
  401174:	2004      	moveq	r0, #4
  401176:	2000      	movne	r0, #0
  401178:	4770      	bx	lr
  40117a:	bf00      	nop

0040117c <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  40117c:	2001      	movs	r0, #1
  40117e:	4770      	bx	lr

00401180 <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  401180:	b410      	push	{r4}
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401182:	b133      	cbz	r3, 401192 <hsmci_select_device+0x12>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401184:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401188:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40118a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40118e:	6543      	str	r3, [r0, #84]	; 0x54
  401190:	e005      	b.n	40119e <hsmci_select_device+0x1e>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  401192:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401196:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40119c:	6543      	str	r3, [r0, #84]	; 0x54
	uint32_t clkodd = 0;
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
  40119e:	4b1f      	ldr	r3, [pc, #124]	; (40121c <hsmci_select_device+0x9c>)
  4011a0:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  4011a4:	d32d      	bcc.n	401202 <hsmci_select_device+0x82>
		div = (mck / speed) - 2;
  4011a6:	481e      	ldr	r0, [pc, #120]	; (401220 <hsmci_select_device+0xa0>)
  4011a8:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  4011ac:	fb01 0113 	mls	r1, r1, r3, r0
  4011b0:	b909      	cbnz	r1, 4011b6 <hsmci_select_device+0x36>
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
		div = (mck / speed) - 2;
  4011b2:	3b02      	subs	r3, #2
  4011b4:	e000      	b.n	4011b8 <hsmci_select_device+0x38>
		if (mck % speed) {
			// Ensure that the card speed not be higher than expected.
			div++;
  4011b6:	3b01      	subs	r3, #1
	} else {
		clkdiv = 0;
		clkodd = 0;
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4011b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4011bc:	6848      	ldr	r0, [r1, #4]
  4011be:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  4011c2:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4011c4:	6848      	ldr	r0, [r1, #4]
  4011c6:	f3c3 0447 	ubfx	r4, r3, #1, #8
  4011ca:	4320      	orrs	r0, r4
  4011cc:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  4011ce:	f013 0f01 	tst.w	r3, #1
  4011d2:	d004      	beq.n	4011de <hsmci_select_device+0x5e>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  4011d4:	684b      	ldr	r3, [r1, #4]
  4011d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4011da:	604b      	str	r3, [r1, #4]
  4011dc:	e005      	b.n	4011ea <hsmci_select_device+0x6a>
	}
	else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4011de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4011e2:	684b      	ldr	r3, [r1, #4]
  4011e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4011e8:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4011ea:	2a04      	cmp	r2, #4
  4011ec:	d004      	beq.n	4011f8 <hsmci_select_device+0x78>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4011ee:	2a08      	cmp	r2, #8
  4011f0:	bf0c      	ite	eq
  4011f2:	22c0      	moveq	r2, #192	; 0xc0
  4011f4:	2200      	movne	r2, #0
  4011f6:	e000      	b.n	4011fa <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4011f8:	2280      	movs	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4011fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4011fe:	60da      	str	r2, [r3, #12]
}
  401200:	e008      	b.n	401214 <hsmci_select_device+0x94>
	} else {
		clkdiv = 0;
		clkodd = 0;
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401206:	6859      	ldr	r1, [r3, #4]
  401208:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  40120c:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40120e:	6859      	ldr	r1, [r3, #4]
  401210:	6059      	str	r1, [r3, #4]
  401212:	e7e4      	b.n	4011de <hsmci_select_device+0x5e>

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
}
  401214:	f85d 4b04 	ldr.w	r4, [sp], #4
  401218:	4770      	bx	lr
  40121a:	bf00      	nop
  40121c:	08f0d17f 	.word	0x08f0d17f
  401220:	08f0d180 	.word	0x08f0d180

00401224 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  401224:	4770      	bx	lr
  401226:	bf00      	nop

00401228 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40122c:	685a      	ldr	r2, [r3, #4]
  40122e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401232:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401234:	2200      	movs	r2, #0
  401236:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  401238:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40123c:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  40123e:	461a      	mov	r2, r3
  401240:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401242:	f013 0f01 	tst.w	r3, #1
  401246:	d0fb      	beq.n	401240 <hsmci_send_clock+0x18>
}
  401248:	4770      	bx	lr
  40124a:	bf00      	nop

0040124c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  40124c:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40124e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401252:	685a      	ldr	r2, [r3, #4]
  401254:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401258:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  40125a:	2400      	movs	r4, #0
  40125c:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  40125e:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  401260:	460a      	mov	r2, r1
  401262:	4601      	mov	r1, r0
  401264:	4620      	mov	r0, r4
  401266:	4b01      	ldr	r3, [pc, #4]	; (40126c <hsmci_send_cmd+0x20>)
  401268:	4798      	blx	r3
}
  40126a:	bd10      	pop	{r4, pc}
  40126c:	004010a5 	.word	0x004010a5

00401270 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  401270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401274:	6a18      	ldr	r0, [r3, #32]
}
  401276:	4770      	bx	lr

00401278 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  401278:	b410      	push	{r4}
  40127a:	1d03      	adds	r3, r0, #4
  40127c:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  40127e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  401282:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  401284:	0e11      	lsrs	r1, r2, #24
  401286:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40128a:	0c11      	lsrs	r1, r2, #16
  40128c:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  401290:	0a11      	lsrs	r1, r2, #8
  401292:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  401296:	f803 2c01 	strb.w	r2, [r3, #-1]
  40129a:	3304      	adds	r3, #4

void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  40129c:	4283      	cmp	r3, r0
  40129e:	d1f0      	bne.n	401282 <hsmci_get_response_128+0xa>
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
		response++;
	}
}
  4012a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop

004012a8 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4012a8:	b570      	push	{r4, r5, r6, lr}
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  4012aa:	f89d 4010 	ldrb.w	r4, [sp, #16]
  4012ae:	b12c      	cbz	r4, 4012bc <hsmci_adtc_start+0x14>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  4012b0:	f44f 7580 	mov.w	r5, #256	; 0x100
  4012b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4012b8:	6525      	str	r5, [r4, #80]	; 0x50
  4012ba:	e003      	b.n	4012c4 <hsmci_adtc_start+0x1c>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
  4012bc:	2500      	movs	r5, #0
  4012be:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4012c2:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4012c4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4012c8:	686c      	ldr	r4, [r5, #4]
  4012ca:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  4012ce:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4012d0:	f012 0f03 	tst.w	r2, #3
  4012d4:	d004      	beq.n	4012e0 <hsmci_adtc_start+0x38>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4012d6:	686c      	ldr	r4, [r5, #4]
  4012d8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4012dc:	606c      	str	r4, [r5, #4]
  4012de:	e005      	b.n	4012ec <hsmci_adtc_start+0x44>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4012e0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4012e4:	686c      	ldr	r4, [r5, #4]
  4012e6:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  4012ea:	606c      	str	r4, [r5, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  4012ec:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  4012f0:	2c00      	cmp	r4, #0
  4012f2:	bf14      	ite	ne
  4012f4:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  4012f8:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  4012fc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  401300:	d007      	beq.n	401312 <hsmci_adtc_start+0x6a>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  401302:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  401306:	f3c2 0508 	ubfx	r5, r2, #0, #9
  40130a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  40130e:	61b5      	str	r5, [r6, #24]
  401310:	e018      	b.n	401344 <hsmci_adtc_start+0x9c>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  401312:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  401316:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  40131a:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  40131c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  401320:	d002      	beq.n	401328 <hsmci_adtc_start+0x80>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  401322:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  401326:	e00d      	b.n	401344 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_STREAM) {
  401328:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  40132c:	d002      	beq.n	401334 <hsmci_adtc_start+0x8c>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  40132e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  401332:	e007      	b.n	401344 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  401334:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  401338:	d104      	bne.n	401344 <hsmci_adtc_start+0x9c>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  40133a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  40133e:	bf18      	it	ne
  401340:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401344:	2600      	movs	r6, #0
  401346:	4d06      	ldr	r5, [pc, #24]	; (401360 <hsmci_adtc_start+0xb8>)
  401348:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  40134a:	4d06      	ldr	r5, [pc, #24]	; (401364 <hsmci_adtc_start+0xbc>)
  40134c:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  40134e:	4a06      	ldr	r2, [pc, #24]	; (401368 <hsmci_adtc_start+0xc0>)
  401350:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401352:	460a      	mov	r2, r1
  401354:	4601      	mov	r1, r0
  401356:	4620      	mov	r0, r4
  401358:	4b04      	ldr	r3, [pc, #16]	; (40136c <hsmci_adtc_start+0xc4>)
  40135a:	4798      	blx	r3
}
  40135c:	bd70      	pop	{r4, r5, r6, pc}
  40135e:	bf00      	nop
  401360:	20400914 	.word	0x20400914
  401364:	2040090e 	.word	0x2040090e
  401368:	20400910 	.word	0x20400910
  40136c:	004010a5 	.word	0x004010a5

00401370 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  401370:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  401372:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401376:	4a16      	ldr	r2, [pc, #88]	; (4013d0 <hsmci_read_word+0x60>)

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  401378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40137a:	4213      	tst	r3, r2
  40137c:	d003      	beq.n	401386 <hsmci_read_word+0x16>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  40137e:	4b15      	ldr	r3, [pc, #84]	; (4013d4 <hsmci_read_word+0x64>)
  401380:	4798      	blx	r3
			return false;
  401382:	2000      	movs	r0, #0
  401384:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  401386:	f013 0f02 	tst.w	r3, #2
  40138a:	d0f5      	beq.n	401378 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  40138c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401392:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  401394:	4a10      	ldr	r2, [pc, #64]	; (4013d8 <hsmci_read_word+0x68>)
  401396:	6813      	ldr	r3, [r2, #0]
  401398:	3304      	adds	r3, #4
  40139a:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40139c:	4a0f      	ldr	r2, [pc, #60]	; (4013dc <hsmci_read_word+0x6c>)
  40139e:	8811      	ldrh	r1, [r2, #0]
  4013a0:	4a0f      	ldr	r2, [pc, #60]	; (4013e0 <hsmci_read_word+0x70>)
  4013a2:	8812      	ldrh	r2, [r2, #0]
  4013a4:	fb02 f201 	mul.w	r2, r2, r1
  4013a8:	4293      	cmp	r3, r2
  4013aa:	d30e      	bcc.n	4013ca <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4013ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013b0:	4a07      	ldr	r2, [pc, #28]	; (4013d0 <hsmci_read_word+0x60>)
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4013b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4013b4:	4213      	tst	r3, r2
  4013b6:	d003      	beq.n	4013c0 <hsmci_read_word+0x50>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  4013b8:	4b06      	ldr	r3, [pc, #24]	; (4013d4 <hsmci_read_word+0x64>)
  4013ba:	4798      	blx	r3
			return false;
  4013bc:	2000      	movs	r0, #0
  4013be:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4013c0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4013c4:	d0f5      	beq.n	4013b2 <hsmci_read_word+0x42>
	return true;
  4013c6:	2001      	movs	r0, #1
  4013c8:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
  4013ca:	2001      	movs	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  4013cc:	bd08      	pop	{r3, pc}
  4013ce:	bf00      	nop
  4013d0:	c0600000 	.word	0xc0600000
  4013d4:	00401079 	.word	0x00401079
  4013d8:	20400914 	.word	0x20400914
  4013dc:	2040090e 	.word	0x2040090e
  4013e0:	20400910 	.word	0x20400910

004013e4 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  4013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4013e6:	b089      	sub	sp, #36	; 0x24
  4013e8:	4604      	mov	r4, r0
  4013ea:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  4013ec:	2220      	movs	r2, #32
  4013ee:	2100      	movs	r1, #0
  4013f0:	4668      	mov	r0, sp
  4013f2:	4b21      	ldr	r3, [pc, #132]	; (401478 <hsmci_start_read_blocks+0x94>)
  4013f4:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4013f6:	4821      	ldr	r0, [pc, #132]	; (40147c <hsmci_start_read_blocks+0x98>)
  4013f8:	2301      	movs	r3, #1
  4013fa:	6203      	str	r3, [r0, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  4013fc:	4b20      	ldr	r3, [pc, #128]	; (401480 <hsmci_start_read_blocks+0x9c>)
  4013fe:	881b      	ldrh	r3, [r3, #0]
  401400:	fb05 f503 	mul.w	r5, r5, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401404:	4b1f      	ldr	r3, [pc, #124]	; (401484 <hsmci_start_read_blocks+0xa0>)
  401406:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  401408:	08ab      	lsrs	r3, r5, #2
  40140a:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  40140c:	4b1e      	ldr	r3, [pc, #120]	; (401488 <hsmci_start_read_blocks+0xa4>)
  40140e:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  401410:	9402      	str	r4, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401412:	466a      	mov	r2, sp
  401414:	2100      	movs	r1, #0
  401416:	4b1d      	ldr	r3, [pc, #116]	; (40148c <hsmci_start_read_blocks+0xa8>)
  401418:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40141a:	4b1d      	ldr	r3, [pc, #116]	; (401490 <hsmci_start_read_blocks+0xac>)
  40141c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401420:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401424:	f007 0e07 	and.w	lr, r7, #7
  401428:	f10e 0e04 	add.w	lr, lr, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40142c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401430:	fab7 f087 	clz	r0, r7
    wshift  = __CLZ(ways) & 0x1f;
  401434:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401438:	f3bf 8f4f 	dsb	sy

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  40143c:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
  40143e:	463b      	mov	r3, r7
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401440:	fa06 f10e 	lsl.w	r1, r6, lr
  401444:	fa03 f200 	lsl.w	r2, r3, r0
  401448:	430a      	orrs	r2, r1
              SCB->DCCISW = sw;
  40144a:	f8c4 2274 	str.w	r2, [r4, #628]	; 0x274
            } while(tmpways--);
  40144e:	3b01      	subs	r3, #1
  401450:	f1b3 3fff 	cmp.w	r3, #4294967295
  401454:	d1f6      	bne.n	401444 <hsmci_start_read_blocks+0x60>
        } while(sets--);
  401456:	3e01      	subs	r6, #1
  401458:	f1b6 3fff 	cmp.w	r6, #4294967295
  40145c:	d1ef      	bne.n	40143e <hsmci_start_read_blocks+0x5a>
  40145e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401462:	f3bf 8f6f 	isb	sy
	Assert(channel_num < XDMACCHID_NUMBER);
	
	/* Update DCache before DMA transmit */
	SCB_CleanInvalidateDCache();
	
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  401466:	2001      	movs	r0, #1
  401468:	4b04      	ldr	r3, [pc, #16]	; (40147c <hsmci_start_read_blocks+0x98>)
  40146a:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  40146c:	4b09      	ldr	r3, [pc, #36]	; (401494 <hsmci_start_read_blocks+0xb0>)
  40146e:	681a      	ldr	r2, [r3, #0]
  401470:	4415      	add	r5, r2
  401472:	601d      	str	r5, [r3, #0]
	return true;
}
  401474:	b009      	add	sp, #36	; 0x24
  401476:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401478:	00407d21 	.word	0x00407d21
  40147c:	40078000 	.word	0x40078000
  401480:	2040090e 	.word	0x2040090e
  401484:	00043001 	.word	0x00043001
  401488:	40000200 	.word	0x40000200
  40148c:	004016dd 	.word	0x004016dd
  401490:	e000ed00 	.word	0xe000ed00
  401494:	20400914 	.word	0x20400914

00401498 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  401498:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40149a:	4b11      	ldr	r3, [pc, #68]	; (4014e0 <hsmci_wait_end_of_read_blocks+0x48>)
  40149c:	881a      	ldrh	r2, [r3, #0]
  40149e:	4b11      	ldr	r3, [pc, #68]	; (4014e4 <hsmci_wait_end_of_read_blocks+0x4c>)
  4014a0:	881b      	ldrh	r3, [r3, #0]
  4014a2:	fb03 f202 	mul.w	r2, r3, r2
  4014a6:	4b10      	ldr	r3, [pc, #64]	; (4014e8 <hsmci_wait_end_of_read_blocks+0x50>)
  4014a8:	681c      	ldr	r4, [r3, #0]
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4014aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4014ae:	490f      	ldr	r1, [pc, #60]	; (4014ec <hsmci_wait_end_of_read_blocks+0x54>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4014b0:	4e0f      	ldr	r6, [pc, #60]	; (4014f0 <hsmci_wait_end_of_read_blocks+0x58>)
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4014b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4014b4:	420b      	tst	r3, r1
  4014b6:	d006      	beq.n	4014c6 <hsmci_wait_end_of_read_blocks+0x2e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  4014b8:	4b0e      	ldr	r3, [pc, #56]	; (4014f4 <hsmci_wait_end_of_read_blocks+0x5c>)
  4014ba:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4014bc:	2201      	movs	r2, #1
  4014be:	4b0c      	ldr	r3, [pc, #48]	; (4014f0 <hsmci_wait_end_of_read_blocks+0x58>)
  4014c0:	621a      	str	r2, [r3, #32]
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
  4014c2:	2000      	movs	r0, #0
  4014c4:	bd70      	pop	{r4, r5, r6, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4014c6:	42a2      	cmp	r2, r4
  4014c8:	d903      	bls.n	4014d2 <hsmci_wait_end_of_read_blocks+0x3a>
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4014ca:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
  4014cc:	f015 0f01 	tst.w	r5, #1
  4014d0:	d104      	bne.n	4014dc <hsmci_wait_end_of_read_blocks+0x44>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4014d2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4014d6:	d0ec      	beq.n	4014b2 <hsmci_wait_end_of_read_blocks+0x1a>
	return true;
  4014d8:	2001      	movs	r0, #1
  4014da:	bd70      	pop	{r4, r5, r6, pc}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
  4014dc:	2001      	movs	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  4014de:	bd70      	pop	{r4, r5, r6, pc}
  4014e0:	2040090e 	.word	0x2040090e
  4014e4:	20400910 	.word	0x20400910
  4014e8:	20400914 	.word	0x20400914
  4014ec:	c0600000 	.word	0xc0600000
  4014f0:	40078000 	.word	0x40078000
  4014f4:	00401079 	.word	0x00401079

004014f8 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  4014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4014fa:	b089      	sub	sp, #36	; 0x24
  4014fc:	4604      	mov	r4, r0
  4014fe:	460d      	mov	r5, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  401500:	2220      	movs	r2, #32
  401502:	2100      	movs	r1, #0
  401504:	4668      	mov	r0, sp
  401506:	4b21      	ldr	r3, [pc, #132]	; (40158c <hsmci_start_write_blocks+0x94>)
  401508:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40150a:	4821      	ldr	r0, [pc, #132]	; (401590 <hsmci_start_write_blocks+0x98>)
  40150c:	2301      	movs	r3, #1
  40150e:	6203      	str	r3, [r0, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  401510:	4b20      	ldr	r3, [pc, #128]	; (401594 <hsmci_start_write_blocks+0x9c>)
  401512:	881b      	ldrh	r3, [r3, #0]
  401514:	fb05 f503 	mul.w	r5, r5, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  401518:	4b1f      	ldr	r3, [pc, #124]	; (401598 <hsmci_start_write_blocks+0xa0>)
  40151a:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF0
					| XDMAC_CC_DIF_AHB_IF1
					| XDMAC_CC_SAM_INCREMENTED_AM
					| XDMAC_CC_DAM_FIXED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  40151c:	08ab      	lsrs	r3, r5, #2
  40151e:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)src;
  401520:	9401      	str	r4, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  401522:	4b1e      	ldr	r3, [pc, #120]	; (40159c <hsmci_start_write_blocks+0xa4>)
  401524:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  401526:	466a      	mov	r2, sp
  401528:	2100      	movs	r1, #0
  40152a:	4b1d      	ldr	r3, [pc, #116]	; (4015a0 <hsmci_start_write_blocks+0xa8>)
  40152c:	4798      	blx	r3
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40152e:	4b1d      	ldr	r3, [pc, #116]	; (4015a4 <hsmci_start_write_blocks+0xac>)
  401530:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401534:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401538:	f007 0e07 	and.w	lr, r7, #7
  40153c:	f10e 0e04 	add.w	lr, lr, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401540:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401544:	fab7 f087 	clz	r0, r7
    wshift  = __CLZ(ways) & 0x1f;
  401548:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40154c:	f3bf 8f4f 	dsb	sy

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCCISW = sw;
  401550:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // clean & invalidate D-Cache
         int32_t tmpways = ways;
  401552:	463b      	mov	r3, r7
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401554:	fa06 f10e 	lsl.w	r1, r6, lr
  401558:	fa03 f200 	lsl.w	r2, r3, r0
  40155c:	430a      	orrs	r2, r1
              SCB->DCCISW = sw;
  40155e:	f8c4 2274 	str.w	r2, [r4, #628]	; 0x274
            } while(tmpways--);
  401562:	3b01      	subs	r3, #1
  401564:	f1b3 3fff 	cmp.w	r3, #4294967295
  401568:	d1f6      	bne.n	401558 <hsmci_start_write_blocks+0x60>
        } while(sets--);
  40156a:	3e01      	subs	r6, #1
  40156c:	f1b6 3fff 	cmp.w	r6, #4294967295
  401570:	d1ef      	bne.n	401552 <hsmci_start_write_blocks+0x5a>
  401572:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  401576:	f3bf 8f6f 	isb	sy
	Assert(channel_num < XDMACCHID_NUMBER);
	
	/* Update DCache before DMA transmit */
	SCB_CleanInvalidateDCache();
	
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  40157a:	2001      	movs	r0, #1
  40157c:	4b04      	ldr	r3, [pc, #16]	; (401590 <hsmci_start_write_blocks+0x98>)
  40157e:	61d8      	str	r0, [r3, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  401580:	4b09      	ldr	r3, [pc, #36]	; (4015a8 <hsmci_start_write_blocks+0xb0>)
  401582:	681a      	ldr	r2, [r3, #0]
  401584:	4415      	add	r5, r2
  401586:	601d      	str	r5, [r3, #0]
	return true;
}
  401588:	b009      	add	sp, #36	; 0x24
  40158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40158c:	00407d21 	.word	0x00407d21
  401590:	40078000 	.word	0x40078000
  401594:	2040090e 	.word	0x2040090e
  401598:	00015011 	.word	0x00015011
  40159c:	40000200 	.word	0x40000200
  4015a0:	004016dd 	.word	0x004016dd
  4015a4:	e000ed00 	.word	0xe000ed00
  4015a8:	20400914 	.word	0x20400914

004015ac <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  4015ac:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4015ae:	4b11      	ldr	r3, [pc, #68]	; (4015f4 <hsmci_wait_end_of_write_blocks+0x48>)
  4015b0:	881a      	ldrh	r2, [r3, #0]
  4015b2:	4b11      	ldr	r3, [pc, #68]	; (4015f8 <hsmci_wait_end_of_write_blocks+0x4c>)
  4015b4:	881b      	ldrh	r3, [r3, #0]
  4015b6:	fb03 f202 	mul.w	r2, r3, r2
  4015ba:	4b10      	ldr	r3, [pc, #64]	; (4015fc <hsmci_wait_end_of_write_blocks+0x50>)
  4015bc:	681c      	ldr	r4, [r3, #0]
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4015be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4015c2:	490f      	ldr	r1, [pc, #60]	; (401600 <hsmci_wait_end_of_write_blocks+0x54>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4015c4:	4e0f      	ldr	r6, [pc, #60]	; (401604 <hsmci_wait_end_of_write_blocks+0x58>)
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4015c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4015c8:	420b      	tst	r3, r1
  4015ca:	d006      	beq.n	4015da <hsmci_wait_end_of_write_blocks+0x2e>
		HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
			__func__, sr);
			hsmci_reset();
  4015cc:	4b0e      	ldr	r3, [pc, #56]	; (401608 <hsmci_wait_end_of_write_blocks+0x5c>)
  4015ce:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  4015d0:	2201      	movs	r2, #1
  4015d2:	4b0c      	ldr	r3, [pc, #48]	; (401604 <hsmci_wait_end_of_write_blocks+0x58>)
  4015d4:	621a      	str	r2, [r3, #32]
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
  4015d6:	2000      	movs	r0, #0
  4015d8:	bd70      	pop	{r4, r5, r6, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4015da:	42a2      	cmp	r2, r4
  4015dc:	d903      	bls.n	4015e6 <hsmci_wait_end_of_write_blocks+0x3a>
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  4015de:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
  4015e0:	f015 0f01 	tst.w	r5, #1
  4015e4:	d104      	bne.n	4015f0 <hsmci_wait_end_of_write_blocks+0x44>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4015e6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4015ea:	d0ec      	beq.n	4015c6 <hsmci_wait_end_of_write_blocks+0x1a>

	return true;
  4015ec:	2001      	movs	r0, #1
  4015ee:	bd70      	pop	{r4, r5, r6, pc}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
  4015f0:	2001      	movs	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));

	return true;
}
  4015f2:	bd70      	pop	{r4, r5, r6, pc}
  4015f4:	2040090e 	.word	0x2040090e
  4015f8:	20400910 	.word	0x20400910
  4015fc:	20400914 	.word	0x20400914
  401600:	c0600000 	.word	0xc0600000
  401604:	40078000 	.word	0x40078000
  401608:	00401079 	.word	0x00401079

0040160c <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  40160c:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  40160e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401610:	6884      	ldr	r4, [r0, #8]
  401612:	42a5      	cmp	r5, r4
  401614:	d003      	beq.n	40161e <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  401616:	6884      	ldr	r4, [r0, #8]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  401618:	6885      	ldr	r5, [r0, #8]
  40161a:	42a5      	cmp	r5, r4
  40161c:	d1fb      	bne.n	401616 <rtc_get_time+0xa>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  40161e:	b161      	cbz	r1, 40163a <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401620:	f3c4 5001 	ubfx	r0, r4, #20, #2
  401624:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401628:	f3c4 4003 	ubfx	r0, r4, #16, #4
  40162c:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401630:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  401634:	bf18      	it	ne
  401636:	300c      	addne	r0, #12
  401638:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40163a:	b142      	cbz	r2, 40164e <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  40163c:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401640:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401644:	f3c4 2003 	ubfx	r0, r4, #8, #4
  401648:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40164c:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  40164e:	b143      	cbz	r3, 401662 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401650:	f3c4 1202 	ubfx	r2, r4, #4, #3
  401654:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401658:	f004 040f 	and.w	r4, r4, #15
  40165c:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  401660:	601c      	str	r4, [r3, #0]
	}
}
  401662:	bc30      	pop	{r4, r5}
  401664:	4770      	bx	lr
  401666:	bf00      	nop

00401668 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  401668:	b4f0      	push	{r4, r5, r6, r7}
  40166a:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  40166c:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40166e:	68c4      	ldr	r4, [r0, #12]
  401670:	42a5      	cmp	r5, r4
  401672:	d003      	beq.n	40167c <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  401674:	68c4      	ldr	r4, [r0, #12]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  401676:	68c5      	ldr	r5, [r0, #12]
  401678:	42a5      	cmp	r5, r4
  40167a:	d1fb      	bne.n	401674 <rtc_get_date+0xc>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  40167c:	b199      	cbz	r1, 4016a6 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40167e:	f3c4 1002 	ubfx	r0, r4, #4, #3
  401682:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401686:	f004 000f 	and.w	r0, r4, #15
  40168a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  40168e:	f3c4 3003 	ubfx	r0, r4, #12, #4
  401692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401696:	f3c4 2703 	ubfx	r7, r4, #8, #4
  40169a:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  40169e:	2764      	movs	r7, #100	; 0x64
  4016a0:	fb07 0005 	mla	r0, r7, r5, r0
  4016a4:	6008      	str	r0, [r1, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  4016a6:	b142      	cbz	r2, 4016ba <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4016a8:	f3c4 5100 	ubfx	r1, r4, #20, #1
  4016ac:	0088      	lsls	r0, r1, #2
  4016ae:	4401      	add	r1, r0
  4016b0:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4016b4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4016b8:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  4016ba:	b143      	cbz	r3, 4016ce <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4016bc:	f3c4 7201 	ubfx	r2, r4, #28, #2
  4016c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4016c4:	f3c4 6103 	ubfx	r1, r4, #24, #4
  4016c8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4016cc:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4016ce:	b116      	cbz	r6, 4016d6 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4016d0:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4016d4:	6034      	str	r4, [r6, #0]
	}
}
  4016d6:	bcf0      	pop	{r4, r5, r6, r7}
  4016d8:	4770      	bx	lr
  4016da:	bf00      	nop

004016dc <xdmac_configure_transfer>:
  4016dc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4016e0:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4016e2:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4016e4:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4016e6:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4016e8:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4016ea:	6813      	ldr	r3, [r2, #0]
  4016ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4016f0:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4016f2:	6913      	ldr	r3, [r2, #16]
  4016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4016f8:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4016fa:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4016fc:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4016fe:	6993      	ldr	r3, [r2, #24]
  401700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401704:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401708:	69d3      	ldr	r3, [r2, #28]
  40170a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40170e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401712:	68d3      	ldr	r3, [r2, #12]
 */
static inline void xdmac_channel_set_config(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401714:	678b      	str	r3, [r1, #120]	; 0x78
  401716:	4770      	bx	lr

00401718 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  401718:	2801      	cmp	r0, #1
  40171a:	d813      	bhi.n	401744 <disk_initialize+0x2c>
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  40171c:	b510      	push	{r4, lr}
  40171e:	4604      	mov	r4, r0
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  401720:	4b0b      	ldr	r3, [pc, #44]	; (401750 <disk_initialize+0x38>)
  401722:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401724:	2803      	cmp	r0, #3
  401726:	d104      	bne.n	401732 <disk_initialize+0x1a>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  401728:	4620      	mov	r0, r4
  40172a:	4b09      	ldr	r3, [pc, #36]	; (401750 <disk_initialize+0x38>)
  40172c:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  40172e:	2803      	cmp	r0, #3
  401730:	d00a      	beq.n	401748 <disk_initialize+0x30>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
  401732:	b958      	cbnz	r0, 40174c <disk_initialize+0x34>
		return STA_NOINIT;
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  401734:	4620      	mov	r0, r4
  401736:	4b07      	ldr	r3, [pc, #28]	; (401754 <disk_initialize+0x3c>)
  401738:	4798      	blx	r3
  40173a:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  40173c:	bf14      	ite	ne
  40173e:	2004      	movne	r0, #4
  401740:	2000      	moveq	r0, #0
  401742:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  401744:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
  401746:	4770      	bx	lr
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  401748:	2001      	movs	r0, #1
  40174a:	bd10      	pop	{r4, pc}
  40174c:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
  40174e:	bd10      	pop	{r4, pc}
  401750:	00401005 	.word	0x00401005
  401754:	00401035 	.word	0x00401035

00401758 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  401758:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  40175a:	4b05      	ldr	r3, [pc, #20]	; (401770 <disk_status+0x18>)
  40175c:	4798      	blx	r3
  40175e:	b120      	cbz	r0, 40176a <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  401760:	2802      	cmp	r0, #2
  401762:	bf0c      	ite	eq
  401764:	2003      	moveq	r0, #3
  401766:	2001      	movne	r0, #1
  401768:	bd08      	pop	{r3, pc}
 */
DSTATUS disk_status(BYTE drv)
{
	switch (mem_test_unit_ready(drv)) {
	case CTRL_GOOD:
		return 0;
  40176a:	2000      	movs	r0, #0
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
	}
}
  40176c:	bd08      	pop	{r3, pc}
  40176e:	bf00      	nop
  401770:	00401005 	.word	0x00401005

00401774 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  401774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401778:	b083      	sub	sp, #12
  40177a:	4683      	mov	fp, r0
  40177c:	460d      	mov	r5, r1
  40177e:	4614      	mov	r4, r2
  401780:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  401782:	4b16      	ldr	r3, [pc, #88]	; (4017dc <disk_read+0x68>)
  401784:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  401786:	b1f0      	cbz	r0, 4017c6 <disk_read+0x52>
  401788:	4606      	mov	r6, r0
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  40178a:	a901      	add	r1, sp, #4
  40178c:	4658      	mov	r0, fp
  40178e:	4b14      	ldr	r3, [pc, #80]	; (4017e0 <disk_read+0x6c>)
  401790:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  401792:	46b0      	mov	r8, r6
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  401794:	fb06 4207 	mla	r2, r6, r7, r4
  401798:	9b01      	ldr	r3, [sp, #4]
  40179a:	fb03 6306 	mla	r3, r3, r6, r6
  40179e:	429a      	cmp	r2, r3
  4017a0:	d813      	bhi.n	4017ca <disk_read+0x56>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  4017a2:	46b9      	mov	r9, r7
  4017a4:	b19f      	cbz	r7, 4017ce <disk_read+0x5a>
  4017a6:	0276      	lsls	r6, r6, #9
  4017a8:	f04f 0a00 	mov.w	sl, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4017ac:	4f0d      	ldr	r7, [pc, #52]	; (4017e4 <disk_read+0x70>)
  4017ae:	462a      	mov	r2, r5
  4017b0:	4621      	mov	r1, r4
  4017b2:	4658      	mov	r0, fp
  4017b4:	47b8      	blx	r7
  4017b6:	b960      	cbnz	r0, 4017d2 <disk_read+0x5e>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  4017b8:	f10a 0a01 	add.w	sl, sl, #1
  4017bc:	4444      	add	r4, r8
  4017be:	4435      	add	r5, r6
  4017c0:	45ca      	cmp	sl, r9
  4017c2:	d1f4      	bne.n	4017ae <disk_read+0x3a>
  4017c4:	e006      	b.n	4017d4 <disk_read+0x60>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
  4017c6:	2001      	movs	r0, #1
  4017c8:	e004      	b.n	4017d4 <disk_read+0x60>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  4017ca:	2004      	movs	r0, #4
  4017cc:	e002      	b.n	4017d4 <disk_read+0x60>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  4017ce:	2000      	movs	r0, #0
  4017d0:	e000      	b.n	4017d4 <disk_read+0x60>
	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  4017d2:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4017d4:	b003      	add	sp, #12
  4017d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017da:	bf00      	nop
  4017dc:	0040102d 	.word	0x0040102d
  4017e0:	00401019 	.word	0x00401019
  4017e4:	00401049 	.word	0x00401049

004017e8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  4017e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017ec:	b083      	sub	sp, #12
  4017ee:	4683      	mov	fp, r0
  4017f0:	460d      	mov	r5, r1
  4017f2:	4614      	mov	r4, r2
  4017f4:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4017f6:	4b16      	ldr	r3, [pc, #88]	; (401850 <disk_write+0x68>)
  4017f8:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4017fa:	b1f0      	cbz	r0, 40183a <disk_write+0x52>
  4017fc:	4606      	mov	r6, r0
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  4017fe:	a901      	add	r1, sp, #4
  401800:	4658      	mov	r0, fp
  401802:	4b14      	ldr	r3, [pc, #80]	; (401854 <disk_write+0x6c>)
  401804:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  401806:	46b0      	mov	r8, r6
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  401808:	fb06 4207 	mla	r2, r6, r7, r4
  40180c:	9b01      	ldr	r3, [sp, #4]
  40180e:	fb03 6306 	mla	r3, r3, r6, r6
  401812:	429a      	cmp	r2, r3
  401814:	d813      	bhi.n	40183e <disk_write+0x56>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  401816:	46b9      	mov	r9, r7
  401818:	b19f      	cbz	r7, 401842 <disk_write+0x5a>
  40181a:	0276      	lsls	r6, r6, #9
  40181c:	f04f 0a00 	mov.w	sl, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  401820:	4f0d      	ldr	r7, [pc, #52]	; (401858 <disk_write+0x70>)
  401822:	462a      	mov	r2, r5
  401824:	4621      	mov	r1, r4
  401826:	4658      	mov	r0, fp
  401828:	47b8      	blx	r7
  40182a:	b960      	cbnz	r0, 401846 <disk_write+0x5e>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  40182c:	f10a 0a01 	add.w	sl, sl, #1
  401830:	4444      	add	r4, r8
  401832:	4435      	add	r5, r6
  401834:	45ca      	cmp	sl, r9
  401836:	d1f4      	bne.n	401822 <disk_write+0x3a>
  401838:	e006      	b.n	401848 <disk_write+0x60>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
  40183a:	2001      	movs	r0, #1
  40183c:	e004      	b.n	401848 <disk_write+0x60>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  40183e:	2004      	movs	r0, #4
  401840:	e002      	b.n	401848 <disk_write+0x60>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  401842:	2000      	movs	r0, #0
  401844:	e000      	b.n	401848 <disk_write+0x60>
	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  401846:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  401848:	b003      	add	sp, #12
  40184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40184e:	bf00      	nop
  401850:	0040102d 	.word	0x0040102d
  401854:	00401019 	.word	0x00401019
  401858:	00401061 	.word	0x00401061

0040185c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  40185c:	b510      	push	{r4, lr}
  40185e:	b082      	sub	sp, #8
  401860:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  401862:	2903      	cmp	r1, #3
  401864:	d824      	bhi.n	4018b0 <disk_ioctl+0x54>
  401866:	e8df f001 	tbb	[pc, r1]
  40186a:	061c      	.short	0x061c
  40186c:	020e      	.short	0x020e
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  40186e:	2301      	movs	r3, #1
  401870:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  401872:	2000      	movs	r0, #0
		break;
  401874:	e021      	b.n	4018ba <disk_ioctl+0x5e>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
  401876:	a901      	add	r1, sp, #4
  401878:	4b11      	ldr	r3, [pc, #68]	; (4018c0 <disk_ioctl+0x64>)
  40187a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
  40187c:	9b01      	ldr	r3, [sp, #4]
  40187e:	3301      	adds	r3, #1
  401880:	6023      	str	r3, [r4, #0]

		res = RES_OK;
  401882:	2000      	movs	r0, #0
	}
	break;
  401884:	e019      	b.n	4018ba <disk_ioctl+0x5e>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
  401886:	4b0f      	ldr	r3, [pc, #60]	; (4018c4 <disk_ioctl+0x68>)
  401888:	4798      	blx	r3

		if ((uc_sector_size != SECTOR_SIZE_512) &&
  40188a:	2808      	cmp	r0, #8
  40188c:	d812      	bhi.n	4018b4 <disk_ioctl+0x58>
				(uc_sector_size != SECTOR_SIZE_1024) &&
				(uc_sector_size != SECTOR_SIZE_2048) &&
  40188e:	f44f 738b 	mov.w	r3, #278	; 0x116
  401892:	fa23 f000 	lsr.w	r0, r3, r0
  401896:	f010 0f01 	tst.w	r0, #1
  40189a:	d00d      	beq.n	4018b8 <disk_ioctl+0x5c>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  40189c:	2000      	movs	r0, #0
  40189e:	7020      	strb	r0, [r4, #0]

		res = RES_OK;
	}
	break;
  4018a0:	e00b      	b.n	4018ba <disk_ioctl+0x5e>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  4018a2:	4b09      	ldr	r3, [pc, #36]	; (4018c8 <disk_ioctl+0x6c>)
  4018a4:	4798      	blx	r3
  4018a6:	2800      	cmp	r0, #0
			res = RES_OK;
		} else {
			res = RES_NOTRDY;
  4018a8:	bf0c      	ite	eq
  4018aa:	2000      	moveq	r0, #0
  4018ac:	2003      	movne	r0, #3
  4018ae:	e004      	b.n	4018ba <disk_ioctl+0x5e>
		}
		break;

	default:
		res = RES_PARERR;
  4018b0:	2004      	movs	r0, #4
  4018b2:	e002      	b.n	4018ba <disk_ioctl+0x5e>
		if ((uc_sector_size != SECTOR_SIZE_512) &&
				(uc_sector_size != SECTOR_SIZE_1024) &&
				(uc_sector_size != SECTOR_SIZE_2048) &&
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
  4018b4:	2001      	movs	r0, #1
  4018b6:	e000      	b.n	4018ba <disk_ioctl+0x5e>
  4018b8:	2001      	movs	r0, #1
	default:
		res = RES_PARERR;
	}

	return res;
}
  4018ba:	b002      	add	sp, #8
  4018bc:	bd10      	pop	{r4, pc}
  4018be:	bf00      	nop
  4018c0:	00401019 	.word	0x00401019
  4018c4:	0040102d 	.word	0x0040102d
  4018c8:	00401005 	.word	0x00401005

004018cc <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  4018cc:	b530      	push	{r4, r5, lr}
  4018ce:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  4018d0:	4c11      	ldr	r4, [pc, #68]	; (401918 <get_fattime+0x4c>)
  4018d2:	ab07      	add	r3, sp, #28
  4018d4:	aa08      	add	r2, sp, #32
  4018d6:	a909      	add	r1, sp, #36	; 0x24
  4018d8:	4620      	mov	r0, r4
  4018da:	4d10      	ldr	r5, [pc, #64]	; (40191c <get_fattime+0x50>)
  4018dc:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  4018de:	ab03      	add	r3, sp, #12
  4018e0:	9300      	str	r3, [sp, #0]
  4018e2:	ab04      	add	r3, sp, #16
  4018e4:	aa05      	add	r2, sp, #20
  4018e6:	a906      	add	r1, sp, #24
  4018e8:	4620      	mov	r0, r4
  4018ea:	4c0d      	ldr	r4, [pc, #52]	; (401920 <get_fattime+0x54>)
  4018ec:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
  4018ee:	9b04      	ldr	r3, [sp, #16]
  4018f0:	041b      	lsls	r3, r3, #16
  4018f2:	9805      	ldr	r0, [sp, #20]
  4018f4:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  4018f8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4018fa:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  4018fe:	9808      	ldr	r0, [sp, #32]
  401900:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  401904:	9807      	ldr	r0, [sp, #28]
  401906:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  40190a:	9806      	ldr	r0, [sp, #24]
  40190c:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  401910:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  401914:	b00b      	add	sp, #44	; 0x2c
  401916:	bd30      	pop	{r4, r5, pc}
  401918:	400e1860 	.word	0x400e1860
  40191c:	0040160d 	.word	0x0040160d
  401920:	00401669 	.word	0x00401669

00401924 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  401924:	b13a      	cbz	r2, 401936 <mem_cpy+0x12>
  401926:	3801      	subs	r0, #1
  401928:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  40192a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40192e:	f800 3f01 	strb.w	r3, [r0, #1]!
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  401932:	4291      	cmp	r1, r2
  401934:	d1f9      	bne.n	40192a <mem_cpy+0x6>
  401936:	4770      	bx	lr

00401938 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  401938:	b122      	cbz	r2, 401944 <mem_set+0xc>
  40193a:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  40193c:	f800 1b01 	strb.w	r1, [r0], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  401940:	4282      	cmp	r2, r0
  401942:	d1fb      	bne.n	40193c <mem_set+0x4>
  401944:	4770      	bx	lr
  401946:	bf00      	nop

00401948 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  401948:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  40194a:	6983      	ldr	r3, [r0, #24]
  40194c:	3b02      	subs	r3, #2
  40194e:	4299      	cmp	r1, r3
  401950:	d204      	bcs.n	40195c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
  401952:	7883      	ldrb	r3, [r0, #2]
  401954:	6a80      	ldr	r0, [r0, #40]	; 0x28
  401956:	fb01 0003 	mla	r0, r1, r3, r0
  40195a:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  40195c:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
  40195e:	4770      	bx	lr

00401960 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  401960:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  401964:	2300      	movs	r3, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  401966:	01da      	lsls	r2, r3, #7
  401968:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  40196c:	f810 2b01 	ldrb.w	r2, [r0], #1
  401970:	fa52 f383 	uxtab	r3, r2, r3
  401974:	b2db      	uxtb	r3, r3
  401976:	4288      	cmp	r0, r1
  401978:	d1f5      	bne.n	401966 <sum_sfn+0x6>
	return sum;
}
  40197a:	4618      	mov	r0, r3
  40197c:	4770      	bx	lr
  40197e:	bf00      	nop

00401980 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  401980:	b178      	cbz	r0, 4019a2 <validate+0x22>
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  401982:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  401984:	7802      	ldrb	r2, [r0, #0]
  401986:	b172      	cbz	r2, 4019a6 <validate+0x26>
  401988:	88c2      	ldrh	r2, [r0, #6]
  40198a:	428a      	cmp	r2, r1
  40198c:	d10d      	bne.n	4019aa <validate+0x2a>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  40198e:	7840      	ldrb	r0, [r0, #1]
  401990:	4b07      	ldr	r3, [pc, #28]	; (4019b0 <validate+0x30>)
  401992:	4798      	blx	r3
  401994:	f000 0001 	and.w	r0, r0, #1
		return FR_NOT_READY;

	return FR_OK;
  401998:	2800      	cmp	r0, #0
  40199a:	bf14      	ite	ne
  40199c:	2003      	movne	r0, #3
  40199e:	2000      	moveq	r0, #0
  4019a0:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
  4019a2:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  4019a4:	4770      	bx	lr
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
  4019a6:	2009      	movs	r0, #9
  4019a8:	bd08      	pop	{r3, pc}
  4019aa:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  4019ac:	bd08      	pop	{r3, pc}
  4019ae:	bf00      	nop
  4019b0:	00401759 	.word	0x00401759

004019b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  4019b4:	b538      	push	{r3, r4, r5, lr}
  4019b6:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  4019b8:	2301      	movs	r3, #1
  4019ba:	460a      	mov	r2, r1
  4019bc:	f100 0130 	add.w	r1, r0, #48	; 0x30
  4019c0:	7840      	ldrb	r0, [r0, #1]
  4019c2:	4d1d      	ldr	r5, [pc, #116]	; (401a38 <check_fs+0x84>)
  4019c4:	47a8      	blx	r5
  4019c6:	bb80      	cbnz	r0, 401a2a <check_fs+0x76>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  4019c8:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  4019cc:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  4019d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4019d4:	b21b      	sxth	r3, r3
  4019d6:	4a19      	ldr	r2, [pc, #100]	; (401a3c <check_fs+0x88>)
  4019d8:	4293      	cmp	r3, r2
  4019da:	d128      	bne.n	401a2e <check_fs+0x7a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  4019dc:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
  4019e0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
  4019e4:	0413      	lsls	r3, r2, #16
  4019e6:	ea43 6201 	orr.w	r2, r3, r1, lsl #24
  4019ea:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
  4019ee:	4313      	orrs	r3, r2
  4019f0:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  4019f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4019f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4019fc:	4a10      	ldr	r2, [pc, #64]	; (401a40 <check_fs+0x8c>)
  4019fe:	4293      	cmp	r3, r2
  401a00:	d017      	beq.n	401a32 <check_fs+0x7e>
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
  401a02:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
  401a06:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
  401a0a:	041b      	lsls	r3, r3, #16
  401a0c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  401a10:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  401a14:	4303      	orrs	r3, r0
  401a16:	f894 0083 	ldrb.w	r0, [r4, #131]	; 0x83
  401a1a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401a1e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
  401a22:	1a98      	subs	r0, r3, r2
  401a24:	bf18      	it	ne
  401a26:	2001      	movne	r0, #1
  401a28:	bd38      	pop	{r3, r4, r5, pc}
  401a2a:	2003      	movs	r0, #3
  401a2c:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
  401a2e:	2002      	movs	r0, #2
  401a30:	bd38      	pop	{r3, r4, r5, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
  401a32:	2000      	movs	r0, #0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
  401a34:	bd38      	pop	{r3, r4, r5, pc}
  401a36:	bf00      	nop
  401a38:	00401775 	.word	0x00401775
  401a3c:	ffffaa55 	.word	0xffffaa55
  401a40:	00544146 	.word	0x00544146

00401a44 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  401a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  401a46:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  401a48:	781c      	ldrb	r4, [r3, #0]
  401a4a:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  401a4c:	2c09      	cmp	r4, #9
  401a4e:	d808      	bhi.n	401a62 <chk_mounted+0x1e>
  401a50:	785d      	ldrb	r5, [r3, #1]
  401a52:	2d3a      	cmp	r5, #58	; 0x3a
  401a54:	d107      	bne.n	401a66 <chk_mounted+0x22>
		p += 2; *path = p;				/* Return pointer to the path name */
  401a56:	3302      	adds	r3, #2
  401a58:	6003      	str	r3, [r0, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  401a5a:	2c07      	cmp	r4, #7
  401a5c:	f200 814a 	bhi.w	401cf4 <chk_mounted+0x2b0>
  401a60:	e002      	b.n	401a68 <chk_mounted+0x24>
  401a62:	2400      	movs	r4, #0
  401a64:	e000      	b.n	401a68 <chk_mounted+0x24>
  401a66:	2400      	movs	r4, #0
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  401a68:	4bc1      	ldr	r3, [pc, #772]	; (401d70 <chk_mounted+0x32c>)
  401a6a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  401a6e:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401a70:	2d00      	cmp	r5, #0
  401a72:	f000 8141 	beq.w	401cf8 <chk_mounted+0x2b4>
  401a76:	4616      	mov	r6, r2

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  401a78:	782b      	ldrb	r3, [r5, #0]
  401a7a:	b183      	cbz	r3, 401a9e <chk_mounted+0x5a>
		stat = disk_status(fs->drv);
  401a7c:	7868      	ldrb	r0, [r5, #1]
  401a7e:	4bbd      	ldr	r3, [pc, #756]	; (401d74 <chk_mounted+0x330>)
  401a80:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  401a82:	f010 0f01 	tst.w	r0, #1
  401a86:	d10a      	bne.n	401a9e <chk_mounted+0x5a>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  401a88:	2e00      	cmp	r6, #0
  401a8a:	f000 8137 	beq.w	401cfc <chk_mounted+0x2b8>
  401a8e:	f000 0004 	and.w	r0, r0, #4
  401a92:	b2c0      	uxtb	r0, r0
				return FR_WRITE_PROTECTED;
  401a94:	2800      	cmp	r0, #0
  401a96:	bf0c      	ite	eq
  401a98:	2000      	moveq	r0, #0
  401a9a:	200a      	movne	r0, #10
  401a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  401a9e:	2300      	movs	r3, #0
  401aa0:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  401aa2:	b2e0      	uxtb	r0, r4
  401aa4:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  401aa6:	4bb4      	ldr	r3, [pc, #720]	; (401d78 <chk_mounted+0x334>)
  401aa8:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  401aaa:	f010 0f01 	tst.w	r0, #1
  401aae:	f040 8127 	bne.w	401d00 <chk_mounted+0x2bc>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  401ab2:	b11e      	cbz	r6, 401abc <chk_mounted+0x78>
  401ab4:	f010 0f04 	tst.w	r0, #4
  401ab8:	f040 8124 	bne.w	401d04 <chk_mounted+0x2c0>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401abc:	2100      	movs	r1, #0
  401abe:	4628      	mov	r0, r5
  401ac0:	4bae      	ldr	r3, [pc, #696]	; (401d7c <chk_mounted+0x338>)
  401ac2:	4798      	blx	r3
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  401ac4:	2801      	cmp	r0, #1
  401ac6:	d117      	bne.n	401af8 <chk_mounted+0xb4>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
  401ac8:	f895 31f2 	ldrb.w	r3, [r5, #498]	; 0x1f2
  401acc:	2b00      	cmp	r3, #0
  401ace:	f000 811b 	beq.w	401d08 <chk_mounted+0x2c4>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  401ad2:	f895 21f9 	ldrb.w	r2, [r5, #505]	; 0x1f9
  401ad6:	f895 31f8 	ldrb.w	r3, [r5, #504]	; 0x1f8
  401ada:	041b      	lsls	r3, r3, #16
  401adc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401ae0:	f895 41f6 	ldrb.w	r4, [r5, #502]	; 0x1f6
  401ae4:	4323      	orrs	r3, r4
  401ae6:	f895 41f7 	ldrb.w	r4, [r5, #503]	; 0x1f7
  401aea:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  401aee:	4621      	mov	r1, r4
  401af0:	4628      	mov	r0, r5
  401af2:	4ba2      	ldr	r3, [pc, #648]	; (401d7c <chk_mounted+0x338>)
  401af4:	4798      	blx	r3
  401af6:	e000      	b.n	401afa <chk_mounted+0xb6>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401af8:	2400      	movs	r4, #0
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  401afa:	2803      	cmp	r0, #3
  401afc:	f000 8106 	beq.w	401d0c <chk_mounted+0x2c8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401b00:	2800      	cmp	r0, #0
  401b02:	f040 8105 	bne.w	401d10 <chk_mounted+0x2cc>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  401b06:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  401b0a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  401b0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401b12:	b21b      	sxth	r3, r3
  401b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401b18:	f040 80fc 	bne.w	401d14 <chk_mounted+0x2d0>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  401b1c:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
  401b20:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  401b24:	ea53 2101 	orrs.w	r1, r3, r1, lsl #8
  401b28:	d10d      	bne.n	401b46 <chk_mounted+0x102>
  401b2a:	f895 2057 	ldrb.w	r2, [r5, #87]	; 0x57
  401b2e:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
  401b32:	041b      	lsls	r3, r3, #16
  401b34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401b38:	f895 1054 	ldrb.w	r1, [r5, #84]	; 0x54
  401b3c:	430b      	orrs	r3, r1
  401b3e:	f895 1055 	ldrb.w	r1, [r5, #85]	; 0x55
  401b42:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	fs->fsize = fasize;
  401b46:	61e9      	str	r1, [r5, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  401b48:	f895 e040 	ldrb.w	lr, [r5, #64]	; 0x40
  401b4c:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  401b50:	f10e 33ff 	add.w	r3, lr, #4294967295
  401b54:	b2db      	uxtb	r3, r3
  401b56:	2b01      	cmp	r3, #1
  401b58:	f200 80de 	bhi.w	401d18 <chk_mounted+0x2d4>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  401b5c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  401b60:	70ab      	strb	r3, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401b62:	2b00      	cmp	r3, #0
  401b64:	f000 80da 	beq.w	401d1c <chk_mounted+0x2d8>
  401b68:	1e5a      	subs	r2, r3, #1
  401b6a:	421a      	tst	r2, r3
  401b6c:	f040 80d8 	bne.w	401d20 <chk_mounted+0x2dc>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  401b70:	f895 7042 	ldrb.w	r7, [r5, #66]	; 0x42
  401b74:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
  401b78:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  401b7c:	812f      	strh	r7, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401b7e:	f017 0f0f 	tst.w	r7, #15
  401b82:	f040 80cf 	bne.w	401d24 <chk_mounted+0x2e0>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  401b86:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
  401b8a:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  401b8e:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
  401b92:	d10d      	bne.n	401bb0 <chk_mounted+0x16c>
  401b94:	f895 6053 	ldrb.w	r6, [r5, #83]	; 0x53
  401b98:	f895 2052 	ldrb.w	r2, [r5, #82]	; 0x52
  401b9c:	0412      	lsls	r2, r2, #16
  401b9e:	ea42 6606 	orr.w	r6, r2, r6, lsl #24
  401ba2:	f895 2050 	ldrb.w	r2, [r5, #80]	; 0x50
  401ba6:	4332      	orrs	r2, r6
  401ba8:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
  401bac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  401bb0:	f895 603f 	ldrb.w	r6, [r5, #63]	; 0x3f
  401bb4:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401bb8:	ea50 2006 	orrs.w	r0, r0, r6, lsl #8
  401bbc:	f000 80b4 	beq.w	401d28 <chk_mounted+0x2e4>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
  401bc0:	fb01 fe0e 	mul.w	lr, r1, lr

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  401bc4:	eb00 1617 	add.w	r6, r0, r7, lsr #4
  401bc8:	4476      	add	r6, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401bca:	42b2      	cmp	r2, r6
  401bcc:	f0c0 80ae 	bcc.w	401d2c <chk_mounted+0x2e8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  401bd0:	1b92      	subs	r2, r2, r6
  401bd2:	fbb2 f3f3 	udiv	r3, r2, r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401bd6:	2b00      	cmp	r3, #0
  401bd8:	f000 80aa 	beq.w	401d30 <chk_mounted+0x2ec>
	fmt = FS_FAT12;
  401bdc:	f640 72f5 	movw	r2, #4085	; 0xff5
  401be0:	4293      	cmp	r3, r2
  401be2:	bf8c      	ite	hi
  401be4:	2202      	movhi	r2, #2
  401be6:	2201      	movls	r2, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  401be8:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  401bec:	4563      	cmp	r3, ip
  401bee:	f200 80a9 	bhi.w	401d44 <chk_mounted+0x300>
  401bf2:	e0e6      	b.n	401dc2 <chk_mounted+0x37e>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  401bf4:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  401bf8:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
  401bfc:	0412      	lsls	r2, r2, #16
  401bfe:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
  401c02:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
  401c06:	4302      	orrs	r2, r0
  401c08:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  401c0c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  401c10:	626a      	str	r2, [r5, #36]	; 0x24
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401c12:	009b      	lsls	r3, r3, #2
  401c14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401c18:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
  401c1c:	f0c0 808a 	bcc.w	401d34 <chk_mounted+0x2f0>
  401c20:	e0b6      	b.n	401d90 <chk_mounted+0x34c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  401c22:	4470      	add	r0, lr
  401c24:	6268      	str	r0, [r5, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  401c26:	2a02      	cmp	r2, #2
  401c28:	d101      	bne.n	401c2e <chk_mounted+0x1ea>
  401c2a:	005b      	lsls	r3, r3, #1
  401c2c:	e099      	b.n	401d62 <chk_mounted+0x31e>
  401c2e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401c32:	f003 0301 	and.w	r3, r3, #1
  401c36:	eb03 0350 	add.w	r3, r3, r0, lsr #1
  401c3a:	e092      	b.n	401d62 <chk_mounted+0x31e>

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401c3c:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
  401c40:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
  401c44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401c48:	b21b      	sxth	r3, r3
  401c4a:	4a4d      	ldr	r2, [pc, #308]	; (401d80 <chk_mounted+0x33c>)
  401c4c:	4293      	cmp	r3, r2
  401c4e:	d141      	bne.n	401cd4 <chk_mounted+0x290>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401c50:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  401c54:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  401c58:	041b      	lsls	r3, r3, #16
  401c5a:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  401c5e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  401c62:	4313      	orrs	r3, r2
  401c64:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
  401c68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401c6c:	4a45      	ldr	r2, [pc, #276]	; (401d84 <chk_mounted+0x340>)
  401c6e:	4293      	cmp	r3, r2
  401c70:	d132      	bne.n	401cd8 <chk_mounted+0x294>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401c72:	f895 2217 	ldrb.w	r2, [r5, #535]	; 0x217
  401c76:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  401c7a:	041b      	lsls	r3, r3, #16
  401c7c:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  401c80:	f895 3214 	ldrb.w	r3, [r5, #532]	; 0x214
  401c84:	4313      	orrs	r3, r2
  401c86:	f895 2215 	ldrb.w	r2, [r5, #533]	; 0x215
  401c8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401c8e:	4a3e      	ldr	r2, [pc, #248]	; (401d88 <chk_mounted+0x344>)
  401c90:	4293      	cmp	r3, r2
  401c92:	d123      	bne.n	401cdc <chk_mounted+0x298>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  401c94:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  401c98:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  401c9c:	041b      	lsls	r3, r3, #16
  401c9e:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  401ca2:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
  401ca6:	4313      	orrs	r3, r2
  401ca8:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  401cac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401cb0:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  401cb2:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  401cb6:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  401cba:	041b      	lsls	r3, r3, #16
  401cbc:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
  401cc0:	f895 3218 	ldrb.w	r3, [r5, #536]	; 0x218
  401cc4:	4313      	orrs	r3, r2
  401cc6:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  401cca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401cce:	612b      	str	r3, [r5, #16]
  401cd0:	2203      	movs	r2, #3
  401cd2:	e004      	b.n	401cde <chk_mounted+0x29a>
  401cd4:	2203      	movs	r2, #3
  401cd6:	e002      	b.n	401cde <chk_mounted+0x29a>
  401cd8:	2203      	movs	r2, #3
  401cda:	e000      	b.n	401cde <chk_mounted+0x29a>
  401cdc:	2203      	movs	r2, #3
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  401cde:	702a      	strb	r2, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  401ce0:	4a2a      	ldr	r2, [pc, #168]	; (401d8c <chk_mounted+0x348>)
  401ce2:	8813      	ldrh	r3, [r2, #0]
  401ce4:	3301      	adds	r3, #1
  401ce6:	b29b      	uxth	r3, r3
  401ce8:	8013      	strh	r3, [r2, #0]
  401cea:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  401cec:	2000      	movs	r0, #0
  401cee:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  401cf0:	7128      	strb	r0, [r5, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
  401cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
  401cf4:	200b      	movs	r0, #11
  401cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401cf8:	200c      	movs	r0, #12
  401cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
  401cfc:	2000      	movs	r0, #0
  401cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  401d00:	2003      	movs	r0, #3
  401d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
  401d04:	200a      	movs	r0, #10
  401d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401d08:	200d      	movs	r0, #13
  401d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  401d0c:	2001      	movs	r0, #1
  401d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401d10:	200d      	movs	r0, #13
  401d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
  401d14:	200d      	movs	r0, #13
  401d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  401d18:	200d      	movs	r0, #13
  401d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401d1c:	200d      	movs	r0, #13
  401d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d20:	200d      	movs	r0, #13
  401d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401d24:	200d      	movs	r0, #13
  401d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401d28:	200d      	movs	r0, #13
  401d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401d2c:	200d      	movs	r0, #13
  401d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401d30:	200d      	movs	r0, #13
  401d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
  401d34:	200d      	movs	r0, #13
  401d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401d38:	200d      	movs	r0, #13
  401d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
  401d3c:	200d      	movs	r0, #13
  401d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401d40:	200d      	movs	r0, #13
  401d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401d44:	3302      	adds	r3, #2
  401d46:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401d48:	4426      	add	r6, r4
  401d4a:	62ae      	str	r6, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401d4c:	4420      	add	r0, r4
  401d4e:	6228      	str	r0, [r5, #32]
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401d50:	2f00      	cmp	r7, #0
  401d52:	d1f1      	bne.n	401d38 <chk_mounted+0x2f4>
  401d54:	e74e      	b.n	401bf4 <chk_mounted+0x1b0>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  401d56:	f04f 33ff 	mov.w	r3, #4294967295
  401d5a:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  401d5c:	2300      	movs	r3, #0
  401d5e:	60eb      	str	r3, [r5, #12]
  401d60:	e7bd      	b.n	401cde <chk_mounted+0x29a>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401d62:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401d66:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
  401d6a:	d3e7      	bcc.n	401d3c <chk_mounted+0x2f8>
  401d6c:	e7f3      	b.n	401d56 <chk_mounted+0x312>
  401d6e:	bf00      	nop
  401d70:	2040091c 	.word	0x2040091c
  401d74:	00401759 	.word	0x00401759
  401d78:	00401719 	.word	0x00401719
  401d7c:	004019b5 	.word	0x004019b5
  401d80:	ffffaa55 	.word	0xffffaa55
  401d84:	41615252 	.word	0x41615252
  401d88:	61417272 	.word	0x61417272
  401d8c:	20400918 	.word	0x20400918
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  401d90:	f04f 33ff 	mov.w	r3, #4294967295
  401d94:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  401d96:	2300      	movs	r3, #0
  401d98:	60eb      	str	r3, [r5, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
  401d9a:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  401d9c:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
  401da0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
  401da4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  401da8:	4422      	add	r2, r4
  401daa:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401dac:	2301      	movs	r3, #1
  401dae:	f105 0130 	add.w	r1, r5, #48	; 0x30
  401db2:	7868      	ldrb	r0, [r5, #1]
  401db4:	4c07      	ldr	r4, [pc, #28]	; (401dd4 <chk_mounted+0x390>)
  401db6:	47a0      	blx	r4
  401db8:	2800      	cmp	r0, #0
  401dba:	f43f af3f 	beq.w	401c3c <chk_mounted+0x1f8>
  401dbe:	2203      	movs	r2, #3
  401dc0:	e78d      	b.n	401cde <chk_mounted+0x29a>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401dc2:	3302      	adds	r3, #2
  401dc4:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401dc6:	4426      	add	r6, r4
  401dc8:	62ae      	str	r6, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401dca:	4420      	add	r0, r4
  401dcc:	6228      	str	r0, [r5, #32]
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401dce:	2f00      	cmp	r7, #0
  401dd0:	d0b6      	beq.n	401d40 <chk_mounted+0x2fc>
  401dd2:	e726      	b.n	401c22 <chk_mounted+0x1de>
  401dd4:	00401775 	.word	0x00401775

00401dd8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  401dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DWORD wsect;


	wsect = fs->winsect;
  401ddc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  401dde:	428f      	cmp	r7, r1
  401de0:	d031      	beq.n	401e46 <move_window+0x6e>
  401de2:	460e      	mov	r6, r1
  401de4:	4604      	mov	r4, r0
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  401de6:	7903      	ldrb	r3, [r0, #4]
  401de8:	b30b      	cbz	r3, 401e2e <move_window+0x56>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  401dea:	f100 0830 	add.w	r8, r0, #48	; 0x30
  401dee:	2301      	movs	r3, #1
  401df0:	463a      	mov	r2, r7
  401df2:	4641      	mov	r1, r8
  401df4:	7840      	ldrb	r0, [r0, #1]
  401df6:	4d1a      	ldr	r5, [pc, #104]	; (401e60 <move_window+0x88>)
  401df8:	47a8      	blx	r5
  401dfa:	bb38      	cbnz	r0, 401e4c <move_window+0x74>
				return FR_DISK_ERR;
			fs->wflag = 0;
  401dfc:	2300      	movs	r3, #0
  401dfe:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  401e00:	6a22      	ldr	r2, [r4, #32]
  401e02:	69e3      	ldr	r3, [r4, #28]
  401e04:	4413      	add	r3, r2
  401e06:	429f      	cmp	r7, r3
  401e08:	d211      	bcs.n	401e2e <move_window+0x56>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  401e0a:	78e5      	ldrb	r5, [r4, #3]
  401e0c:	2d01      	cmp	r5, #1
  401e0e:	d90e      	bls.n	401e2e <move_window+0x56>
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
  401e10:	f04f 0a01 	mov.w	sl, #1
  401e14:	f8df 9048 	ldr.w	r9, [pc, #72]	; 401e60 <move_window+0x88>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
  401e18:	69e3      	ldr	r3, [r4, #28]
  401e1a:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  401e1c:	4653      	mov	r3, sl
  401e1e:	463a      	mov	r2, r7
  401e20:	4641      	mov	r1, r8
  401e22:	7860      	ldrb	r0, [r4, #1]
  401e24:	47c8      	blx	r9
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  401e26:	3d01      	subs	r5, #1
  401e28:	b2ed      	uxtb	r5, r5
  401e2a:	2d01      	cmp	r5, #1
  401e2c:	d1f4      	bne.n	401e18 <move_window+0x40>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
  401e2e:	b186      	cbz	r6, 401e52 <move_window+0x7a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  401e30:	2301      	movs	r3, #1
  401e32:	4632      	mov	r2, r6
  401e34:	f104 0130 	add.w	r1, r4, #48	; 0x30
  401e38:	7860      	ldrb	r0, [r4, #1]
  401e3a:	4d0a      	ldr	r5, [pc, #40]	; (401e64 <move_window+0x8c>)
  401e3c:	47a8      	blx	r5
  401e3e:	b958      	cbnz	r0, 401e58 <move_window+0x80>
				return FR_DISK_ERR;
			fs->winsect = sector;
  401e40:	62e6      	str	r6, [r4, #44]	; 0x2c
  401e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
	}

	return FR_OK;
  401e46:	2000      	movs	r0, #0
  401e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
  401e4c:	2001      	movs	r0, #1
  401e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
  401e52:	2000      	movs	r0, #0
  401e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
  401e58:	2001      	movs	r0, #1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
  401e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e5e:	bf00      	nop
  401e60:	004017e9 	.word	0x004017e9
  401e64:	00401775 	.word	0x00401775

00401e68 <get_fat>:
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  401e68:	2901      	cmp	r1, #1
  401e6a:	d95d      	bls.n	401f28 <get_fat+0xc0>

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
  401e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  401e6e:	6983      	ldr	r3, [r0, #24]
  401e70:	4299      	cmp	r1, r3
  401e72:	d25b      	bcs.n	401f2c <get_fat+0xc4>
  401e74:	460c      	mov	r4, r1
  401e76:	4605      	mov	r5, r0
		return 1;

	switch (fs->fs_type) {
  401e78:	7803      	ldrb	r3, [r0, #0]
  401e7a:	2b02      	cmp	r3, #2
  401e7c:	d028      	beq.n	401ed0 <get_fat+0x68>
  401e7e:	2b03      	cmp	r3, #3
  401e80:	d037      	beq.n	401ef2 <get_fat+0x8a>
  401e82:	2b01      	cmp	r3, #1
  401e84:	d154      	bne.n	401f30 <get_fat+0xc8>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  401e86:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  401e8a:	6a01      	ldr	r1, [r0, #32]
  401e8c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  401e90:	4b2f      	ldr	r3, [pc, #188]	; (401f50 <get_fat+0xe8>)
  401e92:	4798      	blx	r3
  401e94:	2800      	cmp	r0, #0
  401e96:	d14e      	bne.n	401f36 <get_fat+0xce>
		wc = fs->win[bc % SS(fs)]; bc++;
  401e98:	f3c7 0308 	ubfx	r3, r7, #0, #9
  401e9c:	442b      	add	r3, r5
  401e9e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
  401ea2:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  401ea4:	6a29      	ldr	r1, [r5, #32]
  401ea6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  401eaa:	4628      	mov	r0, r5
  401eac:	4b28      	ldr	r3, [pc, #160]	; (401f50 <get_fat+0xe8>)
  401eae:	4798      	blx	r3
  401eb0:	2800      	cmp	r0, #0
  401eb2:	d143      	bne.n	401f3c <get_fat+0xd4>
		wc |= fs->win[bc % SS(fs)] << 8;
  401eb4:	f3c7 0708 	ubfx	r7, r7, #0, #9
  401eb8:	19e8      	adds	r0, r5, r7
  401eba:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  401ebe:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  401ec2:	f014 0f01 	tst.w	r4, #1
  401ec6:	bf14      	ite	ne
  401ec8:	0900      	lsrne	r0, r0, #4
  401eca:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  401ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  401ed0:	6a01      	ldr	r1, [r0, #32]
  401ed2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  401ed6:	4b1e      	ldr	r3, [pc, #120]	; (401f50 <get_fat+0xe8>)
  401ed8:	4798      	blx	r3
  401eda:	bb90      	cbnz	r0, 401f42 <get_fat+0xda>
		p = &fs->win[clst * 2 % SS(fs)];
  401edc:	0061      	lsls	r1, r4, #1
  401ede:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
		return LD_WORD(p);
  401ee2:	186b      	adds	r3, r5, r1
  401ee4:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
  401ee8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  401eec:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  401ef2:	6a01      	ldr	r1, [r0, #32]
  401ef4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  401ef8:	4b15      	ldr	r3, [pc, #84]	; (401f50 <get_fat+0xe8>)
  401efa:	4798      	blx	r3
  401efc:	bb20      	cbnz	r0, 401f48 <get_fat+0xe0>
		p = &fs->win[clst * 4 % SS(fs)];
  401efe:	00a1      	lsls	r1, r4, #2
  401f00:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  401f04:	f101 0230 	add.w	r2, r1, #48	; 0x30
  401f08:	442a      	add	r2, r5
		return LD_DWORD(p) & 0x0FFFFFFF;
  401f0a:	78d0      	ldrb	r0, [r2, #3]
  401f0c:	7893      	ldrb	r3, [r2, #2]
  401f0e:	041b      	lsls	r3, r3, #16
  401f10:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401f14:	7850      	ldrb	r0, [r2, #1]
  401f16:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  401f1a:	440d      	add	r5, r1
  401f1c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  401f20:	4318      	orrs	r0, r3
  401f22:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  401f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
  401f28:	2001      	movs	r0, #1
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
  401f2a:	4770      	bx	lr
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
  401f2c:	2001      	movs	r0, #1
  401f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  401f30:	f04f 30ff 	mov.w	r0, #4294967295
  401f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f36:	f04f 30ff 	mov.w	r0, #4294967295
  401f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f3c:	f04f 30ff 	mov.w	r0, #4294967295
  401f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f42:	f04f 30ff 	mov.w	r0, #4294967295
  401f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f48:	f04f 30ff 	mov.w	r0, #4294967295
}
  401f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f4e:	bf00      	nop
  401f50:	00401dd9 	.word	0x00401dd9

00401f54 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  401f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f56:	4605      	mov	r5, r0
  401f58:	460c      	mov	r4, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
  401f5a:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  401f5c:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  401f5e:	2901      	cmp	r1, #1
  401f60:	d038      	beq.n	401fd4 <dir_sdi+0x80>
  401f62:	6803      	ldr	r3, [r0, #0]
  401f64:	699a      	ldr	r2, [r3, #24]
  401f66:	4291      	cmp	r1, r2
  401f68:	d236      	bcs.n	401fd8 <dir_sdi+0x84>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  401f6a:	b971      	cbnz	r1, 401f8a <dir_sdi+0x36>
  401f6c:	781a      	ldrb	r2, [r3, #0]
  401f6e:	2a03      	cmp	r2, #3
  401f70:	d101      	bne.n	401f76 <dir_sdi+0x22>
		clst = dj->fs->dirbase;
  401f72:	6a59      	ldr	r1, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  401f74:	b949      	cbnz	r1, 401f8a <dir_sdi+0x36>
		dj->clust = clst;
  401f76:	2200      	movs	r2, #0
  401f78:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  401f7a:	891a      	ldrh	r2, [r3, #8]
  401f7c:	42a2      	cmp	r2, r4
  401f7e:	d92d      	bls.n	401fdc <dir_sdi+0x88>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  401f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401f82:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  401f86:	612b      	str	r3, [r5, #16]
  401f88:	e01b      	b.n	401fc2 <dir_sdi+0x6e>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  401f8a:	789e      	ldrb	r6, [r3, #2]
  401f8c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  401f8e:	42b4      	cmp	r4, r6
  401f90:	d310      	bcc.n	401fb4 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  401f92:	4f16      	ldr	r7, [pc, #88]	; (401fec <dir_sdi+0x98>)
  401f94:	6828      	ldr	r0, [r5, #0]
  401f96:	47b8      	blx	r7
  401f98:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  401f9a:	f1b0 3fff 	cmp.w	r0, #4294967295
  401f9e:	d01f      	beq.n	401fe0 <dir_sdi+0x8c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  401fa0:	2801      	cmp	r0, #1
  401fa2:	d91f      	bls.n	401fe4 <dir_sdi+0x90>
  401fa4:	682b      	ldr	r3, [r5, #0]
  401fa6:	699b      	ldr	r3, [r3, #24]
  401fa8:	4298      	cmp	r0, r3
  401faa:	d21d      	bcs.n	401fe8 <dir_sdi+0x94>
				return FR_INT_ERR;
			idx -= ic;
  401fac:	1ba4      	subs	r4, r4, r6
  401fae:	b2a4      	uxth	r4, r4
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
  401fb0:	42a6      	cmp	r6, r4
  401fb2:	d9ef      	bls.n	401f94 <dir_sdi+0x40>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
  401fb4:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  401fb6:	6828      	ldr	r0, [r5, #0]
  401fb8:	4b0d      	ldr	r3, [pc, #52]	; (401ff0 <dir_sdi+0x9c>)
  401fba:	4798      	blx	r3
  401fbc:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  401fc0:	6128      	str	r0, [r5, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  401fc2:	682b      	ldr	r3, [r5, #0]
  401fc4:	3330      	adds	r3, #48	; 0x30
  401fc6:	f004 040f 	and.w	r4, r4, #15
  401fca:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  401fce:	616c      	str	r4, [r5, #20]

	return FR_OK;	/* Seek succeeded */
  401fd0:	2000      	movs	r0, #0
  401fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
  401fd4:	2002      	movs	r0, #2
  401fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401fd8:	2002      	movs	r0, #2
  401fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
  401fdc:	2002      	movs	r0, #2
  401fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  401fe0:	2001      	movs	r0, #1
  401fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
  401fe4:	2002      	movs	r0, #2
  401fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401fe8:	2002      	movs	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
  401fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401fec:	00401e69 	.word	0x00401e69
  401ff0:	00401949 	.word	0x00401949

00401ff4 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
  401ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  401ff8:	2901      	cmp	r1, #1
  401ffa:	d979      	bls.n	4020f0 <put_fat+0xfc>
  401ffc:	6983      	ldr	r3, [r0, #24]
  401ffe:	4299      	cmp	r1, r3
  402000:	d278      	bcs.n	4020f4 <put_fat+0x100>
  402002:	4615      	mov	r5, r2
  402004:	460c      	mov	r4, r1
  402006:	4606      	mov	r6, r0
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
  402008:	7803      	ldrb	r3, [r0, #0]
  40200a:	2b02      	cmp	r3, #2
  40200c:	d03b      	beq.n	402086 <put_fat+0x92>
  40200e:	2b03      	cmp	r3, #3
  402010:	d04a      	beq.n	4020a8 <put_fat+0xb4>
  402012:	2b01      	cmp	r3, #1
  402014:	d164      	bne.n	4020e0 <put_fat+0xec>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  402016:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40201a:	6a01      	ldr	r1, [r0, #32]
  40201c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402020:	4b3f      	ldr	r3, [pc, #252]	; (402120 <put_fat+0x12c>)
  402022:	4798      	blx	r3
			if (res != FR_OK) break;
  402024:	4607      	mov	r7, r0
  402026:	2800      	cmp	r0, #0
  402028:	d15f      	bne.n	4020ea <put_fat+0xf6>
			p = &fs->win[bc % SS(fs)];
  40202a:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  40202e:	f014 0f01 	tst.w	r4, #1
  402032:	d015      	beq.n	402060 <put_fat+0x6c>
  402034:	4433      	add	r3, r6
  402036:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  40203a:	f002 020f 	and.w	r2, r2, #15
  40203e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  402042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  402046:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  40204a:	2301      	movs	r3, #1
  40204c:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40204e:	6a31      	ldr	r1, [r6, #32]
  402050:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402054:	4630      	mov	r0, r6
  402056:	4b32      	ldr	r3, [pc, #200]	; (402120 <put_fat+0x12c>)
  402058:	4798      	blx	r3
			if (res != FR_OK) break;
  40205a:	2800      	cmp	r0, #0
  40205c:	d142      	bne.n	4020e4 <put_fat+0xf0>
  40205e:	e04b      	b.n	4020f8 <put_fat+0x104>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402060:	4433      	add	r3, r6
  402062:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  402066:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  40206a:	2301      	movs	r3, #1
  40206c:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40206e:	6a31      	ldr	r1, [r6, #32]
  402070:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402074:	4630      	mov	r0, r6
  402076:	4b2a      	ldr	r3, [pc, #168]	; (402120 <put_fat+0x12c>)
  402078:	4798      	blx	r3
			if (res != FR_OK) break;
  40207a:	bba8      	cbnz	r0, 4020e8 <put_fat+0xf4>
  40207c:	e041      	b.n	402102 <put_fat+0x10e>
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40207e:	44b0      	add	r8, r6
  402080:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  402084:	e031      	b.n	4020ea <put_fat+0xf6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  402086:	6a01      	ldr	r1, [r0, #32]
  402088:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  40208c:	4b24      	ldr	r3, [pc, #144]	; (402120 <put_fat+0x12c>)
  40208e:	4798      	blx	r3
			if (res != FR_OK) break;
  402090:	4607      	mov	r7, r0
  402092:	bb50      	cbnz	r0, 4020ea <put_fat+0xf6>
			p = &fs->win[clst * 2 % SS(fs)];
  402094:	0061      	lsls	r1, r4, #1
  402096:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  40209a:	1873      	adds	r3, r6, r1
  40209c:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  4020a0:	122a      	asrs	r2, r5, #8
  4020a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  4020a6:	e020      	b.n	4020ea <put_fat+0xf6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  4020a8:	6a01      	ldr	r1, [r0, #32]
  4020aa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  4020ae:	4b1c      	ldr	r3, [pc, #112]	; (402120 <put_fat+0x12c>)
  4020b0:	4798      	blx	r3
			if (res != FR_OK) break;
  4020b2:	4607      	mov	r7, r0
  4020b4:	b9c8      	cbnz	r0, 4020ea <put_fat+0xf6>
			p = &fs->win[clst * 4 % SS(fs)];
  4020b6:	00a1      	lsls	r1, r4, #2
  4020b8:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  4020bc:	f101 0330 	add.w	r3, r1, #48	; 0x30
  4020c0:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  4020c2:	78da      	ldrb	r2, [r3, #3]
  4020c4:	0612      	lsls	r2, r2, #24
  4020c6:	4431      	add	r1, r6
  4020c8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  4020cc:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  4020ce:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  4020d2:	1211      	asrs	r1, r2, #8
  4020d4:	7059      	strb	r1, [r3, #1]
  4020d6:	0c11      	lsrs	r1, r2, #16
  4020d8:	7099      	strb	r1, [r3, #2]
  4020da:	0e12      	lsrs	r2, r2, #24
  4020dc:	70da      	strb	r2, [r3, #3]
			break;
  4020de:	e004      	b.n	4020ea <put_fat+0xf6>

		default :
			res = FR_INT_ERR;
  4020e0:	2702      	movs	r7, #2
  4020e2:	e002      	b.n	4020ea <put_fat+0xf6>
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4020e4:	4607      	mov	r7, r0
  4020e6:	e000      	b.n	4020ea <put_fat+0xf6>
  4020e8:	4607      	mov	r7, r0
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
  4020ea:	2301      	movs	r3, #1
  4020ec:	7133      	strb	r3, [r6, #4]
  4020ee:	e014      	b.n	40211a <put_fat+0x126>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
  4020f0:	2702      	movs	r7, #2
  4020f2:	e012      	b.n	40211a <put_fat+0x126>
  4020f4:	2702      	movs	r7, #2
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
	}

	return res;
  4020f6:	e010      	b.n	40211a <put_fat+0x126>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
  4020f8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4020fc:	f3c5 1207 	ubfx	r2, r5, #4, #8
  402100:	e7bd      	b.n	40207e <put_fat+0x8a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
  402102:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402106:	eb06 0308 	add.w	r3, r6, r8
  40210a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40210e:	f023 030f 	bic.w	r3, r3, #15
  402112:	f3c5 2203 	ubfx	r2, r5, #8, #4
  402116:	431a      	orrs	r2, r3
  402118:	e7b1      	b.n	40207e <put_fat+0x8a>
		}
		fs->wflag = 1;
	}

	return res;
}
  40211a:	4638      	mov	r0, r7
  40211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402120:	00401dd9 	.word	0x00401dd9

00402124 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  402124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402128:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  40212a:	4688      	mov	r8, r1
  40212c:	b931      	cbnz	r1, 40213c <create_chain+0x18>
		scl = fs->last_clust;			/* Get suggested start point */
  40212e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402130:	b16e      	cbz	r6, 40214e <create_chain+0x2a>
  402132:	6983      	ldr	r3, [r0, #24]
  402134:	429e      	cmp	r6, r3
  402136:	bf28      	it	cs
  402138:	2601      	movcs	r6, #1
  40213a:	e009      	b.n	402150 <create_chain+0x2c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
  40213c:	4b29      	ldr	r3, [pc, #164]	; (4021e4 <create_chain+0xc0>)
  40213e:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402140:	2801      	cmp	r0, #1
  402142:	d940      	bls.n	4021c6 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  402144:	69ab      	ldr	r3, [r5, #24]
  402146:	4298      	cmp	r0, r3
  402148:	d34a      	bcc.n	4021e0 <create_chain+0xbc>
		scl = clst;
  40214a:	4646      	mov	r6, r8
  40214c:	e000      	b.n	402150 <create_chain+0x2c>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
  40214e:	2601      	movs	r6, #1
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
  402150:	4634      	mov	r4, r6
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402152:	4f24      	ldr	r7, [pc, #144]	; (4021e4 <create_chain+0xc0>)
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
  402154:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  402156:	69ab      	ldr	r3, [r5, #24]
  402158:	429c      	cmp	r4, r3
  40215a:	d302      	bcc.n	402162 <create_chain+0x3e>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  40215c:	2e01      	cmp	r6, #1
  40215e:	d935      	bls.n	4021cc <create_chain+0xa8>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
  402160:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402162:	4621      	mov	r1, r4
  402164:	4628      	mov	r0, r5
  402166:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  402168:	4603      	mov	r3, r0
  40216a:	b138      	cbz	r0, 40217c <create_chain+0x58>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  40216c:	f1b0 3fff 	cmp.w	r0, #4294967295
  402170:	d02f      	beq.n	4021d2 <create_chain+0xae>
  402172:	2801      	cmp	r0, #1
  402174:	d02d      	beq.n	4021d2 <create_chain+0xae>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
  402176:	42b4      	cmp	r4, r6
  402178:	d1ec      	bne.n	402154 <create_chain+0x30>
  40217a:	e02d      	b.n	4021d8 <create_chain+0xb4>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  40217c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  402180:	4621      	mov	r1, r4
  402182:	4628      	mov	r0, r5
  402184:	4b18      	ldr	r3, [pc, #96]	; (4021e8 <create_chain+0xc4>)
  402186:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  402188:	4603      	mov	r3, r0
  40218a:	b940      	cbnz	r0, 40219e <create_chain+0x7a>
  40218c:	f1b8 0f00 	cmp.w	r8, #0
  402190:	d005      	beq.n	40219e <create_chain+0x7a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  402192:	4622      	mov	r2, r4
  402194:	4641      	mov	r1, r8
  402196:	4628      	mov	r0, r5
  402198:	4b13      	ldr	r3, [pc, #76]	; (4021e8 <create_chain+0xc4>)
  40219a:	4798      	blx	r3
  40219c:	4603      	mov	r3, r0
	}
	if (res == FR_OK) {
  40219e:	b95b      	cbnz	r3, 4021b8 <create_chain+0x94>
		fs->last_clust = ncl;			/* Update FSINFO */
  4021a0:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  4021a2:	692b      	ldr	r3, [r5, #16]
  4021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4021a8:	d019      	beq.n	4021de <create_chain+0xba>
			fs->free_clust--;
  4021aa:	3b01      	subs	r3, #1
  4021ac:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  4021ae:	2301      	movs	r3, #1
  4021b0:	716b      	strb	r3, [r5, #5]
  4021b2:	4620      	mov	r0, r4
  4021b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  4021b8:	2b01      	cmp	r3, #1
  4021ba:	bf0c      	ite	eq
  4021bc:	f04f 30ff 	moveq.w	r0, #4294967295
  4021c0:	2001      	movne	r0, #1
  4021c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4021c6:	2001      	movs	r0, #1
  4021c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  4021cc:	2000      	movs	r0, #0
  4021ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4021d2:	4618      	mov	r0, r3
  4021d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
  4021d8:	2000      	movs	r0, #0
  4021da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021de:	4620      	mov	r0, r4
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
  4021e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021e4:	00401e69 	.word	0x00401e69
  4021e8:	00401ff5 	.word	0x00401ff5

004021ec <remove_chain>:
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4021ec:	2901      	cmp	r1, #1
  4021ee:	d928      	bls.n	402242 <remove_chain+0x56>
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
  4021f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4021f4:	4604      	mov	r4, r0
  4021f6:	460e      	mov	r6, r1
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4021f8:	6983      	ldr	r3, [r0, #24]
  4021fa:	4299      	cmp	r1, r3
  4021fc:	d224      	bcs.n	402248 <remove_chain+0x5c>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
  4021fe:	4f17      	ldr	r7, [pc, #92]	; (40225c <remove_chain+0x70>)
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402200:	f04f 0900 	mov.w	r9, #0
  402204:	f8df 8058 	ldr.w	r8, [pc, #88]	; 402260 <remove_chain+0x74>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402208:	4631      	mov	r1, r6
  40220a:	4620      	mov	r0, r4
  40220c:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  40220e:	4605      	mov	r5, r0
  402210:	b1e0      	cbz	r0, 40224c <remove_chain+0x60>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402212:	2801      	cmp	r0, #1
  402214:	d01c      	beq.n	402250 <remove_chain+0x64>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402216:	f1b0 3fff 	cmp.w	r0, #4294967295
  40221a:	d01b      	beq.n	402254 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40221c:	464a      	mov	r2, r9
  40221e:	4631      	mov	r1, r6
  402220:	4620      	mov	r0, r4
  402222:	47c0      	blx	r8
			if (res != FR_OK) break;
  402224:	4602      	mov	r2, r0
  402226:	b9b0      	cbnz	r0, 402256 <remove_chain+0x6a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  402228:	6923      	ldr	r3, [r4, #16]
  40222a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40222e:	d003      	beq.n	402238 <remove_chain+0x4c>
				fs->free_clust++;
  402230:	3301      	adds	r3, #1
  402232:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  402234:	2301      	movs	r3, #1
  402236:	7163      	strb	r3, [r4, #5]
  402238:	462e      	mov	r6, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
  40223a:	69a3      	ldr	r3, [r4, #24]
  40223c:	42ab      	cmp	r3, r5
  40223e:	d8e3      	bhi.n	402208 <remove_chain+0x1c>
  402240:	e009      	b.n	402256 <remove_chain+0x6a>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
  402242:	2202      	movs	r2, #2
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
  402244:	4610      	mov	r0, r2
  402246:	4770      	bx	lr
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
  402248:	2202      	movs	r2, #2
  40224a:	e004      	b.n	402256 <remove_chain+0x6a>
  40224c:	2200      	movs	r2, #0
  40224e:	e002      	b.n	402256 <remove_chain+0x6a>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402250:	2202      	movs	r2, #2
  402252:	e000      	b.n	402256 <remove_chain+0x6a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402254:	2201      	movs	r2, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
  402256:	4610      	mov	r0, r2
  402258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40225c:	00401e69 	.word	0x00401e69
  402260:	00401ff5 	.word	0x00401ff5

00402264 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  402264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  402268:	88c4      	ldrh	r4, [r0, #6]
  40226a:	3401      	adds	r4, #1
  40226c:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  40226e:	2c00      	cmp	r4, #0
  402270:	d06e      	beq.n	402350 <dir_next+0xec>
  402272:	6903      	ldr	r3, [r0, #16]
  402274:	2b00      	cmp	r3, #0
  402276:	d06e      	beq.n	402356 <dir_next+0xf2>
  402278:	460e      	mov	r6, r1
  40227a:	4605      	mov	r5, r0
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  40227c:	f014 070f 	ands.w	r7, r4, #15
  402280:	d15d      	bne.n	40233e <dir_next+0xda>
		dj->sect++;					/* Next sector */
  402282:	3301      	adds	r3, #1
  402284:	6103      	str	r3, [r0, #16]

		if (dj->clust == 0) {	/* Static table */
  402286:	68c1      	ldr	r1, [r0, #12]
  402288:	b921      	cbnz	r1, 402294 <dir_next+0x30>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  40228a:	6803      	ldr	r3, [r0, #0]
  40228c:	891b      	ldrh	r3, [r3, #8]
  40228e:	42a3      	cmp	r3, r4
  402290:	d964      	bls.n	40235c <dir_next+0xf8>
  402292:	e054      	b.n	40233e <dir_next+0xda>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  402294:	6800      	ldr	r0, [r0, #0]
  402296:	7883      	ldrb	r3, [r0, #2]
  402298:	3b01      	subs	r3, #1
  40229a:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  40229e:	d14e      	bne.n	40233e <dir_next+0xda>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  4022a0:	4b3c      	ldr	r3, [pc, #240]	; (402394 <dir_next+0x130>)
  4022a2:	4798      	blx	r3
  4022a4:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  4022a6:	2801      	cmp	r0, #1
  4022a8:	d95b      	bls.n	402362 <dir_next+0xfe>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4022aa:	f1b0 3fff 	cmp.w	r0, #4294967295
  4022ae:	d05b      	beq.n	402368 <dir_next+0x104>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  4022b0:	6828      	ldr	r0, [r5, #0]
  4022b2:	6983      	ldr	r3, [r0, #24]
  4022b4:	4598      	cmp	r8, r3
  4022b6:	d33b      	bcc.n	402330 <dir_next+0xcc>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  4022b8:	2e00      	cmp	r6, #0
  4022ba:	d058      	beq.n	40236e <dir_next+0x10a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  4022bc:	68e9      	ldr	r1, [r5, #12]
  4022be:	4b36      	ldr	r3, [pc, #216]	; (402398 <dir_next+0x134>)
  4022c0:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  4022c2:	4680      	mov	r8, r0
  4022c4:	2800      	cmp	r0, #0
  4022c6:	d055      	beq.n	402374 <dir_next+0x110>
					if (clst == 1) return FR_INT_ERR;
  4022c8:	2801      	cmp	r0, #1
  4022ca:	d056      	beq.n	40237a <dir_next+0x116>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4022cc:	f1b0 3fff 	cmp.w	r0, #4294967295
  4022d0:	d056      	beq.n	402380 <dir_next+0x11c>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4022d2:	2100      	movs	r1, #0
  4022d4:	6828      	ldr	r0, [r5, #0]
  4022d6:	4b31      	ldr	r3, [pc, #196]	; (40239c <dir_next+0x138>)
  4022d8:	4798      	blx	r3
  4022da:	2800      	cmp	r0, #0
  4022dc:	d153      	bne.n	402386 <dir_next+0x122>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  4022de:	6828      	ldr	r0, [r5, #0]
  4022e0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4022e4:	2100      	movs	r1, #0
  4022e6:	3030      	adds	r0, #48	; 0x30
  4022e8:	4b2d      	ldr	r3, [pc, #180]	; (4023a0 <dir_next+0x13c>)
  4022ea:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  4022ec:	682e      	ldr	r6, [r5, #0]
  4022ee:	4641      	mov	r1, r8
  4022f0:	4630      	mov	r0, r6
  4022f2:	4b2c      	ldr	r3, [pc, #176]	; (4023a4 <dir_next+0x140>)
  4022f4:	4798      	blx	r3
  4022f6:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  4022f8:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  4022fa:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4022fe:	46b2      	mov	sl, r6
  402300:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40239c <dir_next+0x138>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402304:	e00b      	b.n	40231e <dir_next+0xba>
						dj->fs->wflag = 1;
  402306:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40230a:	4651      	mov	r1, sl
  40230c:	6828      	ldr	r0, [r5, #0]
  40230e:	47c8      	blx	r9
  402310:	3601      	adds	r6, #1
  402312:	2800      	cmp	r0, #0
  402314:	d13a      	bne.n	40238c <dir_next+0x128>
						dj->fs->winsect++;
  402316:	682a      	ldr	r2, [r5, #0]
  402318:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  40231a:	3301      	adds	r3, #1
  40231c:	62d3      	str	r3, [r2, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40231e:	682b      	ldr	r3, [r5, #0]
  402320:	7899      	ldrb	r1, [r3, #2]
  402322:	b2f2      	uxtb	r2, r6
  402324:	4291      	cmp	r1, r2
  402326:	d8ee      	bhi.n	402306 <dir_next+0xa2>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  402328:	4616      	mov	r6, r2
  40232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40232c:	1b96      	subs	r6, r2, r6
  40232e:	62de      	str	r6, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  402330:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  402334:	4641      	mov	r1, r8
  402336:	6828      	ldr	r0, [r5, #0]
  402338:	4b1a      	ldr	r3, [pc, #104]	; (4023a4 <dir_next+0x140>)
  40233a:	4798      	blx	r3
  40233c:	6128      	str	r0, [r5, #16]
			}
		}
	}

	dj->index = i;
  40233e:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  402340:	682b      	ldr	r3, [r5, #0]
  402342:	3330      	adds	r3, #48	; 0x30
  402344:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  402348:	616b      	str	r3, [r5, #20]

	return FR_OK;
  40234a:	2000      	movs	r0, #0
  40234c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
  402350:	2004      	movs	r0, #4
  402352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402356:	2004      	movs	r0, #4
  402358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
  40235c:	2004      	movs	r0, #4
  40235e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
  402362:	2002      	movs	r0, #2
  402364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402368:	2001      	movs	r0, #1
  40236a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  40236e:	2004      	movs	r0, #4
  402370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402374:	2007      	movs	r0, #7
  402376:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  40237a:	2002      	movs	r0, #2
  40237c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402380:	2001      	movs	r0, #1
  402382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402386:	2001      	movs	r0, #1
  402388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40238c:	2001      	movs	r0, #1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
  40238e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402392:	bf00      	nop
  402394:	00401e69 	.word	0x00401e69
  402398:	00402125 	.word	0x00402125
  40239c:	00401dd9 	.word	0x00401dd9
  4023a0:	00401939 	.word	0x00401939
  4023a4:	00401949 	.word	0x00401949

004023a8 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
  4023a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023ac:	b085      	sub	sp, #20
  4023ae:	4605      	mov	r5, r0
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  4023b0:	2100      	movs	r1, #0
  4023b2:	4b64      	ldr	r3, [pc, #400]	; (402544 <dir_find+0x19c>)
  4023b4:	4798      	blx	r3
	if (res != FR_OK) return res;
  4023b6:	2800      	cmp	r0, #0
  4023b8:	f040 80a4 	bne.w	402504 <dir_find+0x15c>
  4023bc:	f04f 0bff 	mov.w	fp, #255	; 0xff
  4023c0:	46d9      	mov	r9, fp

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  4023c2:	4f61      	ldr	r7, [pc, #388]	; (402548 <dir_find+0x1a0>)
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4023c4:	46da      	mov	sl, fp

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  4023c6:	6929      	ldr	r1, [r5, #16]
  4023c8:	6828      	ldr	r0, [r5, #0]
  4023ca:	47b8      	blx	r7
		if (res != FR_OK) break;
  4023cc:	2800      	cmp	r0, #0
  4023ce:	f040 809a 	bne.w	402506 <dir_find+0x15e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  4023d2:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  4023d4:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4023d6:	2e00      	cmp	r6, #0
  4023d8:	f000 8096 	beq.w	402508 <dir_find+0x160>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  4023dc:	7ae3      	ldrb	r3, [r4, #11]
  4023de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  4023e2:	2ee5      	cmp	r6, #229	; 0xe5
  4023e4:	d078      	beq.n	4024d8 <dir_find+0x130>
  4023e6:	f013 0f08 	tst.w	r3, #8
  4023ea:	d001      	beq.n	4023f0 <dir_find+0x48>
  4023ec:	2a0f      	cmp	r2, #15
  4023ee:	d176      	bne.n	4024de <dir_find+0x136>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  4023f0:	2a0f      	cmp	r2, #15
  4023f2:	d153      	bne.n	40249c <dir_find+0xf4>
				if (dj->lfn) {
  4023f4:	f8d5 801c 	ldr.w	r8, [r5, #28]
  4023f8:	f1b8 0f00 	cmp.w	r8, #0
  4023fc:	d07a      	beq.n	4024f4 <dir_find+0x14c>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  4023fe:	f016 0f40 	tst.w	r6, #64	; 0x40
  402402:	d006      	beq.n	402412 <dir_find+0x6a>
						sum = dir[LDIR_Chksum];
  402404:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  402408:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  40240c:	88eb      	ldrh	r3, [r5, #6]
  40240e:	842b      	strh	r3, [r5, #32]
  402410:	e001      	b.n	402416 <dir_find+0x6e>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402412:	45b1      	cmp	r9, r6
  402414:	d166      	bne.n	4024e4 <dir_find+0x13c>
  402416:	f894 b00d 	ldrb.w	fp, [r4, #13]
  40241a:	45d3      	cmp	fp, sl
  40241c:	d165      	bne.n	4024ea <dir_find+0x142>
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  40241e:	7823      	ldrb	r3, [r4, #0]
  402420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  402424:	3b01      	subs	r3, #1
  402426:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
  40242a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  40242e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 402558 <dir_find+0x1b0>
  402432:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  402436:	2001      	movs	r0, #1
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402438:	9603      	str	r6, [sp, #12]
  40243a:	f8cd b004 	str.w	fp, [sp, #4]
  40243e:	461e      	mov	r6, r3
  402440:	9502      	str	r5, [sp, #8]


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  402442:	f819 2b01 	ldrb.w	r2, [r9], #1
  402446:	18a3      	adds	r3, r4, r2
  402448:	7859      	ldrb	r1, [r3, #1]
  40244a:	5ca3      	ldrb	r3, [r4, r2]
  40244c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  402450:	b170      	cbz	r0, 402470 <dir_find+0xc8>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402452:	4618      	mov	r0, r3
  402454:	4b3d      	ldr	r3, [pc, #244]	; (40254c <dir_find+0x1a4>)
  402456:	4798      	blx	r3
  402458:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  40245a:	2efe      	cmp	r6, #254	; 0xfe
  40245c:	d85f      	bhi.n	40251e <dir_find+0x176>
  40245e:	1c75      	adds	r5, r6, #1
  402460:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  402464:	4b39      	ldr	r3, [pc, #228]	; (40254c <dir_find+0x1a4>)
  402466:	4798      	blx	r3
  402468:	4583      	cmp	fp, r0
  40246a:	d15c      	bne.n	402526 <dir_find+0x17e>
  40246c:	462e      	mov	r6, r5
  40246e:	e003      	b.n	402478 <dir_find+0xd0>
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402470:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402474:	4293      	cmp	r3, r2
  402476:	d15a      	bne.n	40252e <dir_find+0x186>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  402478:	45d1      	cmp	r9, sl
  40247a:	d1e2      	bne.n	402442 <dir_find+0x9a>
  40247c:	f8dd b004 	ldr.w	fp, [sp, #4]
  402480:	4632      	mov	r2, r6
  402482:	9e03      	ldr	r6, [sp, #12]
  402484:	9d02      	ldr	r5, [sp, #8]

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  402486:	7823      	ldrb	r3, [r4, #0]
  402488:	f013 0f40 	tst.w	r3, #64	; 0x40
  40248c:	d042      	beq.n	402514 <dir_find+0x16c>
  40248e:	2800      	cmp	r0, #0
  402490:	d040      	beq.n	402514 <dir_find+0x16c>
  402492:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  402496:	2b00      	cmp	r3, #0
  402498:	d03c      	beq.n	402514 <dir_find+0x16c>
  40249a:	e04b      	b.n	402534 <dir_find+0x18c>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  40249c:	f1b9 0f00 	cmp.w	r9, #0
  4024a0:	d104      	bne.n	4024ac <dir_find+0x104>
  4024a2:	4620      	mov	r0, r4
  4024a4:	4b2a      	ldr	r3, [pc, #168]	; (402550 <dir_find+0x1a8>)
  4024a6:	4798      	blx	r3
  4024a8:	4582      	cmp	sl, r0
  4024aa:	d02f      	beq.n	40250c <dir_find+0x164>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4024ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4024b0:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  4024b2:	69ab      	ldr	r3, [r5, #24]
  4024b4:	7ada      	ldrb	r2, [r3, #11]
  4024b6:	f012 0f01 	tst.w	r2, #1
  4024ba:	d119      	bne.n	4024f0 <dir_find+0x148>
  4024bc:	f104 000b 	add.w	r0, r4, #11
  4024c0:	e001      	b.n	4024c6 <dir_find+0x11e>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  4024c2:	42a0      	cmp	r0, r4
  4024c4:	d024      	beq.n	402510 <dir_find+0x168>
  4024c6:	f814 1b01 	ldrb.w	r1, [r4], #1
  4024ca:	f813 2b01 	ldrb.w	r2, [r3], #1
  4024ce:	4291      	cmp	r1, r2
  4024d0:	d0f7      	beq.n	4024c2 <dir_find+0x11a>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4024d2:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4024d6:	e00d      	b.n	4024f4 <dir_find+0x14c>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
  4024d8:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4024dc:	e00a      	b.n	4024f4 <dir_find+0x14c>
  4024de:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4024e2:	e007      	b.n	4024f4 <dir_find+0x14c>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4024e4:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4024e8:	e004      	b.n	4024f4 <dir_find+0x14c>
  4024ea:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4024ee:	e001      	b.n	4024f4 <dir_find+0x14c>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4024f0:	f04f 09ff 	mov.w	r9, #255	; 0xff
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  4024f4:	2100      	movs	r1, #0
  4024f6:	4628      	mov	r0, r5
  4024f8:	4b16      	ldr	r3, [pc, #88]	; (402554 <dir_find+0x1ac>)
  4024fa:	4798      	blx	r3
	} while (res == FR_OK);
  4024fc:	2800      	cmp	r0, #0
  4024fe:	f43f af62 	beq.w	4023c6 <dir_find+0x1e>
  402502:	e01b      	b.n	40253c <dir_find+0x194>
  402504:	e01a      	b.n	40253c <dir_find+0x194>
  402506:	e019      	b.n	40253c <dir_find+0x194>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402508:	2004      	movs	r0, #4
  40250a:	e017      	b.n	40253c <dir_find+0x194>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  40250c:	2000      	movs	r0, #0
  40250e:	e015      	b.n	40253c <dir_find+0x194>
  402510:	2000      	movs	r0, #0
  402512:	e013      	b.n	40253c <dir_find+0x194>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402514:	3e01      	subs	r6, #1
  402516:	fa5f f986 	uxtb.w	r9, r6
  40251a:	46da      	mov	sl, fp
  40251c:	e7ea      	b.n	4024f4 <dir_find+0x14c>
  40251e:	f8dd b004 	ldr.w	fp, [sp, #4]
  402522:	9d02      	ldr	r5, [sp, #8]
  402524:	e006      	b.n	402534 <dir_find+0x18c>
  402526:	f8dd b004 	ldr.w	fp, [sp, #4]
  40252a:	9d02      	ldr	r5, [sp, #8]
  40252c:	e002      	b.n	402534 <dir_find+0x18c>
  40252e:	f8dd b004 	ldr.w	fp, [sp, #4]
  402532:	9d02      	ldr	r5, [sp, #8]
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402534:	46da      	mov	sl, fp
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402536:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40253a:	e7db      	b.n	4024f4 <dir_find+0x14c>
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
  40253c:	b005      	add	sp, #20
  40253e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402542:	bf00      	nop
  402544:	00401f55 	.word	0x00401f55
  402548:	00401dd9 	.word	0x00401dd9
  40254c:	004030f9 	.word	0x004030f9
  402550:	00401961 	.word	0x00401961
  402554:	00402265 	.word	0x00402265
  402558:	0040dfd0 	.word	0x0040dfd0

0040255c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  40255c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402560:	b089      	sub	sp, #36	; 0x24
  402562:	4604      	mov	r4, r0
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  402564:	6987      	ldr	r7, [r0, #24]
  402566:	f8d0 a01c 	ldr.w	sl, [r0, #28]
	mem_cpy(sn, fn, 12);
  40256a:	220c      	movs	r2, #12
  40256c:	4639      	mov	r1, r7
  40256e:	a805      	add	r0, sp, #20
  402570:	4ba6      	ldr	r3, [pc, #664]	; (40280c <dir_register+0x2b0>)
  402572:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  402574:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402578:	f013 0f01 	tst.w	r3, #1
  40257c:	d06f      	beq.n	40265e <dir_register+0x102>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  40257e:	2300      	movs	r3, #0
  402580:	72fb      	strb	r3, [r7, #11]
  402582:	61e3      	str	r3, [r4, #28]
{
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  402584:	220b      	movs	r2, #11
  402586:	a905      	add	r1, sp, #20
  402588:	4638      	mov	r0, r7
  40258a:	4ba0      	ldr	r3, [pc, #640]	; (40280c <dir_register+0x2b0>)
  40258c:	4798      	blx	r3
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  40258e:	2501      	movs	r5, #1
  402590:	462b      	mov	r3, r5
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402592:	2620      	movs	r6, #32

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402594:	f8df 8294 	ldr.w	r8, [pc, #660]	; 40282c <dir_register+0x2d0>
{
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  402598:	f8df 9270 	ldr.w	r9, [pc, #624]	; 40280c <dir_register+0x2b0>
  40259c:	e014      	b.n	4025c8 <dir_register+0x6c>
  40259e:	220b      	movs	r2, #11
  4025a0:	a905      	add	r1, sp, #20
  4025a2:	4638      	mov	r0, r7
  4025a4:	47c8      	blx	r9

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  4025a6:	2d05      	cmp	r5, #5
  4025a8:	d90d      	bls.n	4025c6 <dir_register+0x6a>
  4025aa:	462b      	mov	r3, r5
  4025ac:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  4025ae:	03da      	lsls	r2, r3, #15
  4025b0:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  4025b4:	f831 2b02 	ldrh.w	r2, [r1], #2
  4025b8:	fa12 f383 	uxtah	r3, r2, r3
  4025bc:	b29b      	uxth	r3, r3
  4025be:	880a      	ldrh	r2, [r1, #0]
  4025c0:	2a00      	cmp	r2, #0
  4025c2:	d1f4      	bne.n	4025ae <dir_register+0x52>
  4025c4:	e000      	b.n	4025c8 <dir_register+0x6c>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  4025c6:	462b      	mov	r3, r5
  4025c8:	f10d 0e14 	add.w	lr, sp, #20
  4025cc:	2207      	movs	r2, #7
	}

	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
  4025ce:	f003 000f 	and.w	r0, r3, #15
  4025d2:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  4025d6:	2939      	cmp	r1, #57	; 0x39
  4025d8:	bf88      	it	hi
  4025da:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  4025de:	3a01      	subs	r2, #1
  4025e0:	f80e 1d01 	strb.w	r1, [lr, #-1]!
		seq /= 16;
  4025e4:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  4025e8:	2b00      	cmp	r3, #0
  4025ea:	d1f0      	bne.n	4025ce <dir_register+0x72>
	ns[i] = '~';
  4025ec:	217e      	movs	r1, #126	; 0x7e
  4025ee:	ab08      	add	r3, sp, #32
  4025f0:	4413      	add	r3, r2
  4025f2:	f803 1c14 	strb.w	r1, [r3, #-20]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4025f6:	b162      	cbz	r2, 402612 <dir_register+0xb6>
  4025f8:	783b      	ldrb	r3, [r7, #0]
  4025fa:	2b20      	cmp	r3, #32
  4025fc:	d00b      	beq.n	402616 <dir_register+0xba>
  4025fe:	4639      	mov	r1, r7
  402600:	2300      	movs	r3, #0
  402602:	3301      	adds	r3, #1
  402604:	429a      	cmp	r2, r3
  402606:	d007      	beq.n	402618 <dir_register+0xbc>
  402608:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40260c:	2820      	cmp	r0, #32
  40260e:	d1f8      	bne.n	402602 <dir_register+0xa6>
  402610:	e002      	b.n	402618 <dir_register+0xbc>
  402612:	2300      	movs	r3, #0
  402614:	e000      	b.n	402618 <dir_register+0xbc>
  402616:	2300      	movs	r3, #0
  402618:	18f9      	adds	r1, r7, r3
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40261a:	3301      	adds	r3, #1
  40261c:	2a07      	cmp	r2, #7
  40261e:	d805      	bhi.n	40262c <dir_register+0xd0>
  402620:	a808      	add	r0, sp, #32
  402622:	4410      	add	r0, r2
  402624:	f810 0c14 	ldrb.w	r0, [r0, #-20]
  402628:	3201      	adds	r2, #1
  40262a:	e000      	b.n	40262e <dir_register+0xd2>
  40262c:	4630      	mov	r0, r6
  40262e:	f801 0b01 	strb.w	r0, [r1], #1
	} while (j < 8);
  402632:	2b07      	cmp	r3, #7
  402634:	d9f1      	bls.n	40261a <dir_register+0xbe>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402636:	4620      	mov	r0, r4
  402638:	47c0      	blx	r8
			if (res != FR_OK) break;
  40263a:	b928      	cbnz	r0, 402648 <dir_register+0xec>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  40263c:	3501      	adds	r5, #1
  40263e:	b2ad      	uxth	r5, r5
  402640:	2d64      	cmp	r5, #100	; 0x64
  402642:	d1ac      	bne.n	40259e <dir_register+0x42>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  402644:	2007      	movs	r0, #7
  402646:	e0dd      	b.n	402804 <dir_register+0x2a8>
  402648:	2d64      	cmp	r5, #100	; 0x64
  40264a:	f000 80c7 	beq.w	4027dc <dir_register+0x280>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  40264e:	2804      	cmp	r0, #4
  402650:	f040 80c6 	bne.w	4027e0 <dir_register+0x284>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  402654:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402658:	72fb      	strb	r3, [r7, #11]
  40265a:	f8c4 a01c 	str.w	sl, [r4, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  40265e:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402662:	f013 0f02 	tst.w	r3, #2
  402666:	d014      	beq.n	402692 <dir_register+0x136>
		for (ne = 0; lfn[ne]; ne++) ;
  402668:	f8ba 3000 	ldrh.w	r3, [sl]
  40266c:	b13b      	cbz	r3, 40267e <dir_register+0x122>
  40266e:	2300      	movs	r3, #0
  402670:	3301      	adds	r3, #1
  402672:	b29b      	uxth	r3, r3
  402674:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
  402678:	2a00      	cmp	r2, #0
  40267a:	d1f9      	bne.n	402670 <dir_register+0x114>
  40267c:	e000      	b.n	402680 <dir_register+0x124>
  40267e:	2300      	movs	r3, #0
		ne = (ne + 25) / 13;
  402680:	3319      	adds	r3, #25
  402682:	4e63      	ldr	r6, [pc, #396]	; (402810 <dir_register+0x2b4>)
  402684:	fb86 2603 	smull	r2, r6, r6, r3
  402688:	17db      	asrs	r3, r3, #31
  40268a:	ebc3 06a6 	rsb	r6, r3, r6, asr #2
  40268e:	b2b6      	uxth	r6, r6
  402690:	e000      	b.n	402694 <dir_register+0x138>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
  402692:	2601      	movs	r6, #1
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
  402694:	2100      	movs	r1, #0
  402696:	4620      	mov	r0, r4
  402698:	4b5e      	ldr	r3, [pc, #376]	; (402814 <dir_register+0x2b8>)
  40269a:	4798      	blx	r3
	if (res != FR_OK) return res;
  40269c:	2800      	cmp	r0, #0
  40269e:	f040 80a0 	bne.w	4027e2 <dir_register+0x286>
  4026a2:	f04f 0900 	mov.w	r9, #0
  4026a6:	464d      	mov	r5, r9
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
  4026a8:	4f5b      	ldr	r7, [pc, #364]	; (402818 <dir_register+0x2bc>)
		c = *dj->dir;				/* Check the entry status */
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
			if (++n == ne) break;	/* A contiguous entry that required count is found */
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  4026aa:	46ca      	mov	sl, r9
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4026ac:	f8df 8174 	ldr.w	r8, [pc, #372]	; 402824 <dir_register+0x2c8>
	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
	if (res != FR_OK) return res;
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
  4026b0:	6921      	ldr	r1, [r4, #16]
  4026b2:	6820      	ldr	r0, [r4, #0]
  4026b4:	47b8      	blx	r7
		if (res != FR_OK) break;
  4026b6:	4603      	mov	r3, r0
  4026b8:	2800      	cmp	r0, #0
  4026ba:	f040 80a2 	bne.w	402802 <dir_register+0x2a6>
		c = *dj->dir;				/* Check the entry status */
  4026be:	6963      	ldr	r3, [r4, #20]
  4026c0:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  4026c2:	2be5      	cmp	r3, #229	; 0xe5
  4026c4:	d000      	beq.n	4026c8 <dir_register+0x16c>
  4026c6:	b93b      	cbnz	r3, 4026d8 <dir_register+0x17c>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  4026c8:	b90d      	cbnz	r5, 4026ce <dir_register+0x172>
  4026ca:	f8b4 9006 	ldrh.w	r9, [r4, #6]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  4026ce:	3501      	adds	r5, #1
  4026d0:	b2ad      	uxth	r5, r5
  4026d2:	42ae      	cmp	r6, r5
  4026d4:	d101      	bne.n	4026da <dir_register+0x17e>
  4026d6:	e086      	b.n	4027e6 <dir_register+0x28a>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  4026d8:	4655      	mov	r5, sl
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4026da:	2101      	movs	r1, #1
  4026dc:	4620      	mov	r0, r4
  4026de:	47c0      	blx	r8
	} while (res == FR_OK);
  4026e0:	4603      	mov	r3, r0
  4026e2:	2800      	cmp	r0, #0
  4026e4:	d0e4      	beq.n	4026b0 <dir_register+0x154>
  4026e6:	e08c      	b.n	402802 <dir_register+0x2a6>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_sdi(dj, is);
  4026e8:	4649      	mov	r1, r9
  4026ea:	4620      	mov	r0, r4
  4026ec:	4b49      	ldr	r3, [pc, #292]	; (402814 <dir_register+0x2b8>)
  4026ee:	4798      	blx	r3
		if (res == FR_OK) {
  4026f0:	4603      	mov	r3, r0
  4026f2:	2800      	cmp	r0, #0
  4026f4:	f040 8083 	bne.w	4027fe <dir_register+0x2a2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  4026f8:	69a0      	ldr	r0, [r4, #24]
  4026fa:	4b48      	ldr	r3, [pc, #288]	; (40281c <dir_register+0x2c0>)
  4026fc:	4798      	blx	r3
  4026fe:	9000      	str	r0, [sp, #0]
			ne--;
  402700:	1e75      	subs	r5, r6, #1
  402702:	b2ad      	uxth	r5, r5
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
	dir[LDIR_Type] = 0;
  402704:	2700      	movs	r7, #0
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
  402706:	9701      	str	r7, [sp, #4]
		res = dir_sdi(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
  402708:	6921      	ldr	r1, [r4, #16]
  40270a:	6820      	ldr	r0, [r4, #0]
  40270c:	4b42      	ldr	r3, [pc, #264]	; (402818 <dir_register+0x2bc>)
  40270e:	4798      	blx	r3
				if (res != FR_OK) break;
  402710:	4603      	mov	r3, r0
  402712:	2800      	cmp	r0, #0
  402714:	d173      	bne.n	4027fe <dir_register+0x2a2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  402716:	f8d4 901c 	ldr.w	r9, [r4, #28]
  40271a:	6960      	ldr	r0, [r4, #20]
  40271c:	fa5f fb85 	uxtb.w	fp, r5
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  402720:	f89d 3000 	ldrb.w	r3, [sp]
  402724:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  402726:	230f      	movs	r3, #15
  402728:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  40272a:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  40272c:	7687      	strb	r7, [r0, #26]
  40272e:	76c7      	strb	r7, [r0, #27]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  402730:	f10b 33ff 	add.w	r3, fp, #4294967295
  402734:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402738:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40273c:	4a38      	ldr	r2, [pc, #224]	; (402820 <dir_register+0x2c4>)
  40273e:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  402742:	9b01      	ldr	r3, [sp, #4]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402744:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402748:	f04f 0aff 	mov.w	sl, #255	; 0xff
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40274c:	42b3      	cmp	r3, r6
  40274e:	d04e      	beq.n	4027ee <dir_register+0x292>
  402750:	f101 0e01 	add.w	lr, r1, #1
  402754:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402758:	7811      	ldrb	r1, [r2, #0]
  40275a:	5443      	strb	r3, [r0, r1]
  40275c:	4401      	add	r1, r0
  40275e:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  402762:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  402766:	b913      	cbnz	r3, 40276e <dir_register+0x212>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402768:	4671      	mov	r1, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  40276a:	4633      	mov	r3, r6
  40276c:	e000      	b.n	402770 <dir_register+0x214>
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40276e:	4671      	mov	r1, lr
  402770:	3201      	adds	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
	} while (++s < 13);
  402772:	4542      	cmp	r2, r8
  402774:	d1ea      	bne.n	40274c <dir_register+0x1f0>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  402776:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40277a:	4293      	cmp	r3, r2
  40277c:	d002      	beq.n	402784 <dir_register+0x228>
  40277e:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  402782:	b90b      	cbnz	r3, 402788 <dir_register+0x22c>
  402784:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  402788:	f880 b000 	strb.w	fp, [r0]
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
  40278c:	6823      	ldr	r3, [r4, #0]
  40278e:	2201      	movs	r2, #1
  402790:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  402792:	4639      	mov	r1, r7
  402794:	4620      	mov	r0, r4
  402796:	4b23      	ldr	r3, [pc, #140]	; (402824 <dir_register+0x2c8>)
  402798:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  40279a:	4603      	mov	r3, r0
  40279c:	bb78      	cbnz	r0, 4027fe <dir_register+0x2a2>
  40279e:	3d01      	subs	r5, #1
  4027a0:	b2ad      	uxth	r5, r5
  4027a2:	2d00      	cmp	r5, #0
  4027a4:	d1b0      	bne.n	402708 <dir_register+0x1ac>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
  4027a6:	6921      	ldr	r1, [r4, #16]
  4027a8:	6820      	ldr	r0, [r4, #0]
  4027aa:	4b1b      	ldr	r3, [pc, #108]	; (402818 <dir_register+0x2bc>)
  4027ac:	4798      	blx	r3
		if (res == FR_OK) {
  4027ae:	4605      	mov	r5, r0
  4027b0:	b9c0      	cbnz	r0, 4027e4 <dir_register+0x288>
			dir = dj->dir;
  4027b2:	6966      	ldr	r6, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  4027b4:	2220      	movs	r2, #32
  4027b6:	2100      	movs	r1, #0
  4027b8:	4630      	mov	r0, r6
  4027ba:	4b1b      	ldr	r3, [pc, #108]	; (402828 <dir_register+0x2cc>)
  4027bc:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  4027be:	220b      	movs	r2, #11
  4027c0:	69a1      	ldr	r1, [r4, #24]
  4027c2:	4630      	mov	r0, r6
  4027c4:	4b11      	ldr	r3, [pc, #68]	; (40280c <dir_register+0x2b0>)
  4027c6:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  4027c8:	69a3      	ldr	r3, [r4, #24]
  4027ca:	7adb      	ldrb	r3, [r3, #11]
  4027cc:	f003 0318 	and.w	r3, r3, #24
  4027d0:	7333      	strb	r3, [r6, #12]
#endif
			dj->fs->wflag = 1;
  4027d2:	6823      	ldr	r3, [r4, #0]
  4027d4:	2201      	movs	r2, #1
  4027d6:	711a      	strb	r2, [r3, #4]
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
  4027d8:	4628      	mov	r0, r5
  4027da:	e013      	b.n	402804 <dir_register+0x2a8>
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4027dc:	2007      	movs	r0, #7
  4027de:	e011      	b.n	402804 <dir_register+0x2a8>
  4027e0:	e010      	b.n	402804 <dir_register+0x2a8>
  4027e2:	e00f      	b.n	402804 <dir_register+0x2a8>
  4027e4:	e00e      	b.n	402804 <dir_register+0x2a8>
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
	} while (res == FR_OK);

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  4027e6:	2e01      	cmp	r6, #1
  4027e8:	f63f af7e 	bhi.w	4026e8 <dir_register+0x18c>
  4027ec:	e7db      	b.n	4027a6 <dir_register+0x24a>

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4027ee:	f892 e000 	ldrb.w	lr, [r2]
  4027f2:	f800 a00e 	strb.w	sl, [r0, lr]
  4027f6:	4486      	add	lr, r0
  4027f8:	f88e a001 	strb.w	sl, [lr, #1]
  4027fc:	e7b8      	b.n	402770 <dir_register+0x214>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
  4027fe:	4618      	mov	r0, r3
  402800:	e000      	b.n	402804 <dir_register+0x2a8>
		ne = 1;
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
	if (res != FR_OK) return res;
  402802:	4618      	mov	r0, r3
			dj->fs->wflag = 1;
		}
	}

	return res;
}
  402804:	b009      	add	sp, #36	; 0x24
  402806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40280a:	bf00      	nop
  40280c:	00401925 	.word	0x00401925
  402810:	4ec4ec4f 	.word	0x4ec4ec4f
  402814:	00401f55 	.word	0x00401f55
  402818:	00401dd9 	.word	0x00401dd9
  40281c:	00401961 	.word	0x00401961
  402820:	0040dfd0 	.word	0x0040dfd0
  402824:	00402265 	.word	0x00402265
  402828:	00401939 	.word	0x00401939
  40282c:	004023a9 	.word	0x004023a9

00402830 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  402830:	b570      	push	{r4, r5, r6, lr}
  402832:	4604      	mov	r4, r0
	FRESULT res;


	res = move_window(fs, 0);
  402834:	2100      	movs	r1, #0
  402836:	4b2c      	ldr	r3, [pc, #176]	; (4028e8 <sync+0xb8>)
  402838:	4798      	blx	r3
	if (res == FR_OK) {
  40283a:	4603      	mov	r3, r0
  40283c:	2800      	cmp	r0, #0
  40283e:	d150      	bne.n	4028e2 <sync+0xb2>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  402840:	7823      	ldrb	r3, [r4, #0]
  402842:	2b03      	cmp	r3, #3
  402844:	d145      	bne.n	4028d2 <sync+0xa2>
  402846:	7963      	ldrb	r3, [r4, #5]
  402848:	2b00      	cmp	r3, #0
  40284a:	d042      	beq.n	4028d2 <sync+0xa2>
			fs->winsect = 0;
  40284c:	2600      	movs	r6, #0
  40284e:	62e6      	str	r6, [r4, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
  402850:	f104 0530 	add.w	r5, r4, #48	; 0x30
  402854:	f44f 7200 	mov.w	r2, #512	; 0x200
  402858:	4631      	mov	r1, r6
  40285a:	4628      	mov	r0, r5
  40285c:	4b23      	ldr	r3, [pc, #140]	; (4028ec <sync+0xbc>)
  40285e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  402860:	2355      	movs	r3, #85	; 0x55
  402862:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  402866:	23aa      	movs	r3, #170	; 0xaa
  402868:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40286c:	2352      	movs	r3, #82	; 0x52
  40286e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  402872:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  402876:	2361      	movs	r3, #97	; 0x61
  402878:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  40287c:	2241      	movs	r2, #65	; 0x41
  40287e:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  402882:	2172      	movs	r1, #114	; 0x72
  402884:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
  402888:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
  40288c:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  402890:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  402894:	6923      	ldr	r3, [r4, #16]
  402896:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  40289a:	121a      	asrs	r2, r3, #8
  40289c:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  4028a0:	0c1a      	lsrs	r2, r3, #16
  4028a2:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  4028a6:	0e1b      	lsrs	r3, r3, #24
  4028a8:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  4028ac:	68e3      	ldr	r3, [r4, #12]
  4028ae:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  4028b2:	121a      	asrs	r2, r3, #8
  4028b4:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  4028b8:	0c1a      	lsrs	r2, r3, #16
  4028ba:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  4028be:	0e1b      	lsrs	r3, r3, #24
  4028c0:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  4028c4:	2301      	movs	r3, #1
  4028c6:	6962      	ldr	r2, [r4, #20]
  4028c8:	4629      	mov	r1, r5
  4028ca:	7860      	ldrb	r0, [r4, #1]
  4028cc:	4d08      	ldr	r5, [pc, #32]	; (4028f0 <sync+0xc0>)
  4028ce:	47a8      	blx	r5
			fs->fsi_flag = 0;
  4028d0:	7166      	strb	r6, [r4, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  4028d2:	2200      	movs	r2, #0
  4028d4:	4611      	mov	r1, r2
  4028d6:	7860      	ldrb	r0, [r4, #1]
  4028d8:	4b06      	ldr	r3, [pc, #24]	; (4028f4 <sync+0xc4>)
  4028da:	4798      	blx	r3
)
{
	FRESULT res;


	res = move_window(fs, 0);
  4028dc:	1c03      	adds	r3, r0, #0
  4028de:	bf18      	it	ne
  4028e0:	2301      	movne	r3, #1
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
			res = FR_DISK_ERR;
	}

	return res;
}
  4028e2:	4618      	mov	r0, r3
  4028e4:	bd70      	pop	{r4, r5, r6, pc}
  4028e6:	bf00      	nop
  4028e8:	00401dd9 	.word	0x00401dd9
  4028ec:	00401939 	.word	0x00401939
  4028f0:	004017e9 	.word	0x004017e9
  4028f4:	0040185d 	.word	0x0040185d

004028f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  4028f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028fc:	b083      	sub	sp, #12
  4028fe:	4683      	mov	fp, r0
  402900:	460d      	mov	r5, r1
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  402902:	780b      	ldrb	r3, [r1, #0]
  402904:	2b2f      	cmp	r3, #47	; 0x2f
  402906:	d001      	beq.n	40290c <follow_path+0x14>
  402908:	2b5c      	cmp	r3, #92	; 0x5c
  40290a:	d100      	bne.n	40290e <follow_path+0x16>
		path++;
  40290c:	3501      	adds	r5, #1
	dj->sclust = 0;						/* Start from the root dir */
  40290e:	2300      	movs	r3, #0
  402910:	f8cb 3008 	str.w	r3, [fp, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  402914:	782b      	ldrb	r3, [r5, #0]
  402916:	2b1f      	cmp	r3, #31
  402918:	d808      	bhi.n	40292c <follow_path+0x34>
		res = dir_sdi(dj, 0);
  40291a:	2100      	movs	r1, #0
  40291c:	4658      	mov	r0, fp
  40291e:	4bb9      	ldr	r3, [pc, #740]	; (402c04 <follow_path+0x30c>)
  402920:	4798      	blx	r3
  402922:	4603      	mov	r3, r0
		dj->dir = 0;
  402924:	2200      	movs	r2, #0
  402926:	f8cb 2014 	str.w	r2, [fp, #20]
  40292a:	e166      	b.n	402bfa <follow_path+0x302>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40292c:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 402c1c <follow_path+0x324>
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  402930:	782b      	ldrb	r3, [r5, #0]
  402932:	2b2f      	cmp	r3, #47	; 0x2f
  402934:	d001      	beq.n	40293a <follow_path+0x42>
  402936:	2b5c      	cmp	r3, #92	; 0x5c
  402938:	d105      	bne.n	402946 <follow_path+0x4e>
  40293a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40293e:	2b2f      	cmp	r3, #47	; 0x2f
  402940:	d0fb      	beq.n	40293a <follow_path+0x42>
  402942:	2b5c      	cmp	r3, #92	; 0x5c
  402944:	d0f9      	beq.n	40293a <follow_path+0x42>
	lfn = dj->lfn;
  402946:	f8db 601c 	ldr.w	r6, [fp, #28]
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  40294a:	7828      	ldrb	r0, [r5, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  40294c:	282f      	cmp	r0, #47	; 0x2f
  40294e:	bf18      	it	ne
  402950:	281f      	cmpne	r0, #31
  402952:	f240 8149 	bls.w	402be8 <follow_path+0x2f0>
  402956:	285c      	cmp	r0, #92	; 0x5c
  402958:	f000 8146 	beq.w	402be8 <follow_path+0x2f0>
  40295c:	f1a6 0802 	sub.w	r8, r6, #2
  402960:	462f      	mov	r7, r5
  402962:	2401      	movs	r4, #1
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402964:	46a1      	mov	r9, r4
  402966:	e004      	b.n	402972 <follow_path+0x7a>
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
		if (di >= _MAX_LFN)				/* Reject too long name */
  402968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40296c:	f000 813a 	beq.w	402be4 <follow_path+0x2ec>
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  402970:	461c      	mov	r4, r3
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402972:	4649      	mov	r1, r9
  402974:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  402976:	4601      	mov	r1, r0
  402978:	2800      	cmp	r0, #0
  40297a:	f000 8133 	beq.w	402be4 <follow_path+0x2ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40297e:	287f      	cmp	r0, #127	; 0x7f
  402980:	d809      	bhi.n	402996 <follow_path+0x9e>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
  402982:	2822      	cmp	r0, #34	; 0x22
  402984:	f000 80ed 	beq.w	402b62 <follow_path+0x26a>
  402988:	4a9f      	ldr	r2, [pc, #636]	; (402c08 <follow_path+0x310>)
  40298a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40298e:	b113      	cbz	r3, 402996 <follow_path+0x9e>
  402990:	4298      	cmp	r0, r3
  402992:	d1fa      	bne.n	40298a <follow_path+0x92>
  402994:	e0e5      	b.n	402b62 <follow_path+0x26a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
  402996:	f828 1f02 	strh.w	r1, [r8, #2]!
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  40299a:	1c63      	adds	r3, r4, #1
  40299c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4029a0:	282f      	cmp	r0, #47	; 0x2f
  4029a2:	bf18      	it	ne
  4029a4:	281f      	cmpne	r0, #31
  4029a6:	d901      	bls.n	4029ac <follow_path+0xb4>
  4029a8:	285c      	cmp	r0, #92	; 0x5c
  4029aa:	d1dd      	bne.n	402968 <follow_path+0x70>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  4029ac:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4029ae:	2820      	cmp	r0, #32
  4029b0:	bf34      	ite	cc
  4029b2:	2704      	movcc	r7, #4
  4029b4:	2700      	movcs	r7, #0
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  4029b6:	2c00      	cmp	r4, #0
  4029b8:	f000 80d3 	beq.w	402b62 <follow_path+0x26a>
		w = lfn[di-1];
  4029bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4029c0:	4423      	add	r3, r4
  4029c2:	eb06 0243 	add.w	r2, r6, r3, lsl #1
  4029c6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
		if (w != ' ' && w != '.') break;
  4029ca:	2b20      	cmp	r3, #32
  4029cc:	d00a      	beq.n	4029e4 <follow_path+0xec>
  4029ce:	2b2e      	cmp	r3, #46	; 0x2e
  4029d0:	f040 80eb 	bne.w	402baa <follow_path+0x2b2>
  4029d4:	e006      	b.n	4029e4 <follow_path+0xec>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
  4029d6:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  4029da:	2b20      	cmp	r3, #32
  4029dc:	d002      	beq.n	4029e4 <follow_path+0xec>
  4029de:	2b2e      	cmp	r3, #46	; 0x2e
  4029e0:	f040 80e3 	bne.w	402baa <follow_path+0x2b2>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  4029e4:	3c01      	subs	r4, #1
  4029e6:	d1f6      	bne.n	4029d6 <follow_path+0xde>
  4029e8:	e0bb      	b.n	402b62 <follow_path+0x26a>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  4029ea:	3301      	adds	r3, #1
  4029ec:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  4029f0:	2a20      	cmp	r2, #32
  4029f2:	d0fa      	beq.n	4029ea <follow_path+0xf2>
  4029f4:	2a2e      	cmp	r2, #46	; 0x2e
  4029f6:	d0f8      	beq.n	4029ea <follow_path+0xf2>
	if (si) cf |= NS_LOSS | NS_LFN;
  4029f8:	b11b      	cbz	r3, 402a02 <follow_path+0x10a>
  4029fa:	f047 0703 	orr.w	r7, r7, #3
  4029fe:	e000      	b.n	402a02 <follow_path+0x10a>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  402a00:	2300      	movs	r3, #0
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  402a02:	f1a8 0802 	sub.w	r8, r8, #2
  402a06:	eb06 0208 	add.w	r2, r6, r8
  402a0a:	f836 1008 	ldrh.w	r1, [r6, r8]
  402a0e:	292e      	cmp	r1, #46	; 0x2e
  402a10:	d001      	beq.n	402a16 <follow_path+0x11e>
  402a12:	3c01      	subs	r4, #1
  402a14:	d106      	bne.n	402a24 <follow_path+0x12c>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  402a16:	2208      	movs	r2, #8
  402a18:	9200      	str	r2, [sp, #0]
  402a1a:	f04f 0900 	mov.w	r9, #0
  402a1e:	f8cd 9004 	str.w	r9, [sp, #4]
  402a22:	e004      	b.n	402a2e <follow_path+0x136>

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  402a24:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  402a28:	292e      	cmp	r1, #46	; 0x2e
  402a2a:	d1f2      	bne.n	402a12 <follow_path+0x11a>
  402a2c:	e7f3      	b.n	402a16 <follow_path+0x11e>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  402a2e:	f103 0801 	add.w	r8, r3, #1
  402a32:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  402a36:	2800      	cmp	r0, #0
  402a38:	d060      	beq.n	402afc <follow_path+0x204>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  402a3a:	2820      	cmp	r0, #32
  402a3c:	d003      	beq.n	402a46 <follow_path+0x14e>
  402a3e:	282e      	cmp	r0, #46	; 0x2e
  402a40:	d105      	bne.n	402a4e <follow_path+0x156>
  402a42:	45a0      	cmp	r8, r4
  402a44:	d003      	beq.n	402a4e <follow_path+0x156>
			cf |= NS_LOSS | NS_LFN; continue;
  402a46:	f047 0703 	orr.w	r7, r7, #3
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  402a4a:	4643      	mov	r3, r8
  402a4c:	e7ef      	b.n	402a2e <follow_path+0x136>
		if (!w) break;					/* Break on end of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  402a4e:	9b00      	ldr	r3, [sp, #0]
  402a50:	4599      	cmp	r9, r3
  402a52:	d201      	bcs.n	402a58 <follow_path+0x160>
  402a54:	45a0      	cmp	r8, r4
  402a56:	d11a      	bne.n	402a8e <follow_path+0x196>
			if (ni == 11) {				/* Long extension */
  402a58:	9b00      	ldr	r3, [sp, #0]
  402a5a:	2b0b      	cmp	r3, #11
  402a5c:	d107      	bne.n	402a6e <follow_path+0x176>
				cf |= NS_LOSS | NS_LFN; break;
  402a5e:	f047 0703 	orr.w	r7, r7, #3
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402a62:	f8db 3018 	ldr.w	r3, [fp, #24]
  402a66:	781a      	ldrb	r2, [r3, #0]
  402a68:	2ae5      	cmp	r2, #229	; 0xe5
  402a6a:	d155      	bne.n	402b18 <follow_path+0x220>
  402a6c:	e04b      	b.n	402b06 <follow_path+0x20e>

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  402a6e:	45a0      	cmp	r8, r4
  402a70:	bf18      	it	ne
  402a72:	f047 0703 	orrne.w	r7, r7, #3
			if (si > di) break;			/* No extension */
  402a76:	45a0      	cmp	r8, r4
  402a78:	d840      	bhi.n	402afc <follow_path+0x204>
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
  402a7a:	9b01      	ldr	r3, [sp, #4]
  402a7c:	009b      	lsls	r3, r3, #2
  402a7e:	b2db      	uxtb	r3, r3
  402a80:	9301      	str	r3, [sp, #4]
  402a82:	4623      	mov	r3, r4
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
  402a84:	220b      	movs	r2, #11
  402a86:	9200      	str	r2, [sp, #0]
  402a88:	f04f 0908 	mov.w	r9, #8
  402a8c:	e7cf      	b.n	402a2e <follow_path+0x136>
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
  402a8e:	287f      	cmp	r0, #127	; 0x7f
  402a90:	f240 809f 	bls.w	402bd2 <follow_path+0x2da>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  402a94:	2100      	movs	r1, #0
  402a96:	47d0      	blx	sl
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  402a98:	4603      	mov	r3, r0
  402a9a:	2800      	cmp	r0, #0
  402a9c:	f000 80aa 	beq.w	402bf4 <follow_path+0x2fc>
  402aa0:	4a5a      	ldr	r2, [pc, #360]	; (402c0c <follow_path+0x314>)
  402aa2:	4413      	add	r3, r2
  402aa4:	f813 1c80 	ldrb.w	r1, [r3, #-128]
  402aa8:	b288      	uxth	r0, r1
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  402aaa:	f047 0702 	orr.w	r7, r7, #2
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402aae:	b148      	cbz	r0, 402ac4 <follow_path+0x1cc>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
  402ab0:	292b      	cmp	r1, #43	; 0x2b
  402ab2:	d007      	beq.n	402ac4 <follow_path+0x1cc>
  402ab4:	4a56      	ldr	r2, [pc, #344]	; (402c10 <follow_path+0x318>)
  402ab6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  402aba:	2b00      	cmp	r3, #0
  402abc:	f000 808b 	beq.w	402bd6 <follow_path+0x2de>
  402ac0:	428b      	cmp	r3, r1
  402ac2:	d1f8      	bne.n	402ab6 <follow_path+0x1be>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  402ac4:	f047 0703 	orr.w	r7, r7, #3
  402ac8:	205f      	movs	r0, #95	; 0x5f
  402aca:	e00f      	b.n	402aec <follow_path+0x1f4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
					b |= 2;
  402acc:	9b01      	ldr	r3, [sp, #4]
  402ace:	f043 0302 	orr.w	r3, r3, #2
  402ad2:	9301      	str	r3, [sp, #4]
  402ad4:	e00a      	b.n	402aec <follow_path+0x1f4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  402ad6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  402ada:	b29b      	uxth	r3, r3
  402adc:	2b19      	cmp	r3, #25
  402ade:	d805      	bhi.n	402aec <follow_path+0x1f4>
						b |= 1; w -= 0x20;
  402ae0:	9b01      	ldr	r3, [sp, #4]
  402ae2:	f043 0301 	orr.w	r3, r3, #1
  402ae6:	9301      	str	r3, [sp, #4]
  402ae8:	3820      	subs	r0, #32
  402aea:	b280      	uxth	r0, r0
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  402aec:	f8db 3018 	ldr.w	r3, [fp, #24]
  402af0:	f803 0009 	strb.w	r0, [r3, r9]
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  402af4:	4643      	mov	r3, r8
						b |= 1; w -= 0x20;
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  402af6:	f109 0901 	add.w	r9, r9, #1
  402afa:	e798      	b.n	402a2e <follow_path+0x136>
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402afc:	f8db 3018 	ldr.w	r3, [fp, #24]
  402b00:	781a      	ldrb	r2, [r3, #0]
  402b02:	2ae5      	cmp	r2, #229	; 0xe5
  402b04:	d101      	bne.n	402b0a <follow_path+0x212>
  402b06:	2205      	movs	r2, #5
  402b08:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
  402b0a:	9b00      	ldr	r3, [sp, #0]
  402b0c:	2b08      	cmp	r3, #8
  402b0e:	d103      	bne.n	402b18 <follow_path+0x220>
  402b10:	9b01      	ldr	r3, [sp, #4]
  402b12:	009b      	lsls	r3, r3, #2
  402b14:	b2db      	uxtb	r3, r3
  402b16:	9301      	str	r3, [sp, #4]
  402b18:	9901      	ldr	r1, [sp, #4]
  402b1a:	f001 020c 	and.w	r2, r1, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  402b1e:	2a0c      	cmp	r2, #12
  402b20:	d003      	beq.n	402b2a <follow_path+0x232>
  402b22:	f001 0303 	and.w	r3, r1, #3
  402b26:	2b03      	cmp	r3, #3
  402b28:	d101      	bne.n	402b2e <follow_path+0x236>
		cf |= NS_LFN;
  402b2a:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  402b2e:	f017 0f02 	tst.w	r7, #2
  402b32:	d10a      	bne.n	402b4a <follow_path+0x252>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  402b34:	9b01      	ldr	r3, [sp, #4]
  402b36:	f003 0303 	and.w	r3, r3, #3
  402b3a:	2b01      	cmp	r3, #1
  402b3c:	bf08      	it	eq
  402b3e:	f047 0710 	orreq.w	r7, r7, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  402b42:	2a04      	cmp	r2, #4
  402b44:	bf08      	it	eq
  402b46:	f047 0708 	orreq.w	r7, r7, #8
	}

	dj->fn[NS] = cf;	/* SFN is created */
  402b4a:	f8db 3018 	ldr.w	r3, [fp, #24]
  402b4e:	72df      	strb	r7, [r3, #11]

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
  402b50:	4658      	mov	r0, fp
  402b52:	4b30      	ldr	r3, [pc, #192]	; (402c14 <follow_path+0x31c>)
  402b54:	4798      	blx	r3
			ns = *(dj->fn+NS);
  402b56:	f8db 3018 	ldr.w	r3, [fp, #24]
  402b5a:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  402b5c:	4603      	mov	r3, r0
  402b5e:	b160      	cbz	r0, 402b7a <follow_path+0x282>
  402b60:	e001      	b.n	402b66 <follow_path+0x26e>
  402b62:	2306      	movs	r3, #6
  402b64:	e049      	b.n	402bfa <follow_path+0x302>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  402b66:	2804      	cmp	r0, #4
  402b68:	d147      	bne.n	402bfa <follow_path+0x302>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402b6a:	f002 0204 	and.w	r2, r2, #4
  402b6e:	b2d2      	uxtb	r2, r2
  402b70:	2a00      	cmp	r2, #0
  402b72:	bf14      	ite	ne
  402b74:	4603      	movne	r3, r0
  402b76:	2305      	moveq	r3, #5
  402b78:	e03f      	b.n	402bfa <follow_path+0x302>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  402b7a:	f012 0f04 	tst.w	r2, #4
  402b7e:	d13c      	bne.n	402bfa <follow_path+0x302>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  402b80:	f8db 3014 	ldr.w	r3, [fp, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  402b84:	7ada      	ldrb	r2, [r3, #11]
  402b86:	f012 0f10 	tst.w	r2, #16
  402b8a:	d00c      	beq.n	402ba6 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
  402b8c:	7d59      	ldrb	r1, [r3, #21]
  402b8e:	7d1a      	ldrb	r2, [r3, #20]
  402b90:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  402b94:	7ed8      	ldrb	r0, [r3, #27]
  402b96:	7e9a      	ldrb	r2, [r3, #26]
  402b98:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
  402b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  402ba0:	f8cb 3008 	str.w	r3, [fp, #8]
		}
  402ba4:	e6c4      	b.n	402930 <follow_path+0x38>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
  402ba6:	2305      	movs	r3, #5
  402ba8:	e027      	b.n	402bfa <follow_path+0x302>
		if (w != ' ' && w != '.') break;
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */

	lfn[di] = 0;						/* LFN is created */
  402baa:	ea4f 0844 	mov.w	r8, r4, lsl #1
  402bae:	2300      	movs	r3, #0
  402bb0:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  402bb4:	220b      	movs	r2, #11
  402bb6:	2120      	movs	r1, #32
  402bb8:	f8db 0018 	ldr.w	r0, [fp, #24]
  402bbc:	4b16      	ldr	r3, [pc, #88]	; (402c18 <follow_path+0x320>)
  402bbe:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  402bc0:	8833      	ldrh	r3, [r6, #0]
  402bc2:	2b20      	cmp	r3, #32
  402bc4:	d002      	beq.n	402bcc <follow_path+0x2d4>
  402bc6:	2b2e      	cmp	r3, #46	; 0x2e
  402bc8:	f47f af1a 	bne.w	402a00 <follow_path+0x108>
  402bcc:	4631      	mov	r1, r6
  402bce:	2300      	movs	r3, #0
  402bd0:	e70b      	b.n	4029ea <follow_path+0xf2>
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402bd2:	4601      	mov	r1, r0
  402bd4:	e76c      	b.n	402ab0 <follow_path+0x1b8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  402bd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  402bda:	b29b      	uxth	r3, r3
  402bdc:	2b19      	cmp	r3, #25
  402bde:	f67f af75 	bls.w	402acc <follow_path+0x1d4>
  402be2:	e778      	b.n	402ad6 <follow_path+0x1de>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402be4:	2306      	movs	r3, #6
			}
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
  402be6:	e008      	b.n	402bfa <follow_path+0x302>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  402be8:	3501      	adds	r5, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402bea:	281f      	cmp	r0, #31
  402bec:	d9b9      	bls.n	402b62 <follow_path+0x26a>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  402bee:	2400      	movs	r4, #0
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402bf0:	4627      	mov	r7, r4
  402bf2:	e6e0      	b.n	4029b6 <follow_path+0xbe>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  402bf4:	f047 0702 	orr.w	r7, r7, #2
  402bf8:	e764      	b.n	402ac4 <follow_path+0x1cc>
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
  402bfa:	4618      	mov	r0, r3
  402bfc:	b003      	add	sp, #12
  402bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c02:	bf00      	nop
  402c04:	00401f55 	.word	0x00401f55
  402c08:	0040df88 	.word	0x0040df88
  402c0c:	0040df08 	.word	0x0040df08
  402c10:	0040df94 	.word	0x0040df94
  402c14:	004023a9 	.word	0x004023a9
  402c18:	00401939 	.word	0x00401939
  402c1c:	004030b9 	.word	0x004030b9

00402c20 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  402c20:	2807      	cmp	r0, #7
  402c22:	d80d      	bhi.n	402c40 <f_mount+0x20>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
  402c24:	4b07      	ldr	r3, [pc, #28]	; (402c44 <f_mount+0x24>)
  402c26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (rfs) {
  402c2a:	b10b      	cbz	r3, 402c30 <f_mount+0x10>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  402c2c:	2200      	movs	r2, #0
  402c2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  402c30:	b109      	cbz	r1, 402c36 <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  402c32:	2300      	movs	r3, #0
  402c34:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  402c36:	4b03      	ldr	r3, [pc, #12]	; (402c44 <f_mount+0x24>)
  402c38:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

	return FR_OK;
  402c3c:	2000      	movs	r0, #0
  402c3e:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
  402c40:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  402c42:	4770      	bx	lr
  402c44:	2040091c 	.word	0x2040091c

00402c48 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  402c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c4c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  402c50:	4605      	mov	r5, r0
  402c52:	9101      	str	r1, [sp, #4]
  402c54:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  402c56:	2300      	movs	r3, #0
  402c58:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  402c5a:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  402c5e:	f002 021e 	and.w	r2, r2, #30
  402c62:	a985      	add	r1, sp, #532	; 0x214
  402c64:	a801      	add	r0, sp, #4
  402c66:	4b58      	ldr	r3, [pc, #352]	; (402dc8 <f_open+0x180>)
  402c68:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  402c6a:	ab82      	add	r3, sp, #520	; 0x208
  402c6c:	938b      	str	r3, [sp, #556]	; 0x22c
  402c6e:	ab02      	add	r3, sp, #8
  402c70:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  402c72:	2800      	cmp	r0, #0
  402c74:	f040 808a 	bne.w	402d8c <f_open+0x144>
		res = follow_path(&dj, path);	/* Follow the file path */
  402c78:	9901      	ldr	r1, [sp, #4]
  402c7a:	a885      	add	r0, sp, #532	; 0x214
  402c7c:	4b53      	ldr	r3, [pc, #332]	; (402dcc <f_open+0x184>)
  402c7e:	4798      	blx	r3
  402c80:	4603      	mov	r3, r0
	dir = dj.dir;
  402c82:	9c8a      	ldr	r4, [sp, #552]	; 0x228

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
		if (!dir)	/* Current dir itself */
  402c84:	b914      	cbnz	r4, 402c8c <f_open+0x44>
  402c86:	2800      	cmp	r0, #0
  402c88:	f000 8086 	beq.w	402d98 <f_open+0x150>
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402c8c:	f016 0f1c 	tst.w	r6, #28
  402c90:	d048      	beq.n	402d24 <f_open+0xdc>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
  402c92:	b15b      	cbz	r3, 402cac <f_open+0x64>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  402c94:	2b04      	cmp	r3, #4
  402c96:	f040 8087 	bne.w	402da8 <f_open+0x160>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
  402c9a:	a885      	add	r0, sp, #532	; 0x214
  402c9c:	4b4c      	ldr	r3, [pc, #304]	; (402dd0 <f_open+0x188>)
  402c9e:	4798      	blx	r3
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  402ca0:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  402ca4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402ca6:	4603      	mov	r3, r0
  402ca8:	b138      	cbz	r0, 402cba <f_open+0x72>
  402caa:	e088      	b.n	402dbe <f_open+0x176>
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  402cac:	7ae3      	ldrb	r3, [r4, #11]
  402cae:	f013 0f11 	tst.w	r3, #17
  402cb2:	d17d      	bne.n	402db0 <f_open+0x168>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  402cb4:	f016 0f04 	tst.w	r6, #4
  402cb8:	d17c      	bne.n	402db4 <f_open+0x16c>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402cba:	f017 0f08 	tst.w	r7, #8
  402cbe:	d042      	beq.n	402d46 <f_open+0xfe>
			dw = get_fattime();					/* Created time */
  402cc0:	4b44      	ldr	r3, [pc, #272]	; (402dd4 <f_open+0x18c>)
  402cc2:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  402cc4:	73a0      	strb	r0, [r4, #14]
  402cc6:	1203      	asrs	r3, r0, #8
  402cc8:	73e3      	strb	r3, [r4, #15]
  402cca:	0c03      	lsrs	r3, r0, #16
  402ccc:	7423      	strb	r3, [r4, #16]
  402cce:	0e00      	lsrs	r0, r0, #24
  402cd0:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  402cd2:	2300      	movs	r3, #0
  402cd4:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  402cd6:	7723      	strb	r3, [r4, #28]
  402cd8:	7763      	strb	r3, [r4, #29]
  402cda:	77a3      	strb	r3, [r4, #30]
  402cdc:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  402cde:	7d66      	ldrb	r6, [r4, #21]
  402ce0:	7d22      	ldrb	r2, [r4, #20]
  402ce2:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  402ce6:	7ee2      	ldrb	r2, [r4, #27]
  402ce8:	7ea1      	ldrb	r1, [r4, #26]
  402cea:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  402cee:	76a3      	strb	r3, [r4, #26]
  402cf0:	76e3      	strb	r3, [r4, #27]
  402cf2:	7523      	strb	r3, [r4, #20]
  402cf4:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  402cf6:	9885      	ldr	r0, [sp, #532]	; 0x214
  402cf8:	2301      	movs	r3, #1
  402cfa:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  402cfc:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  402d00:	d01f      	beq.n	402d42 <f_open+0xfa>
				dw = dj.fs->winsect;
  402d02:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  402d06:	4631      	mov	r1, r6
  402d08:	4b33      	ldr	r3, [pc, #204]	; (402dd8 <f_open+0x190>)
  402d0a:	4798      	blx	r3
				if (res == FR_OK) {
  402d0c:	4603      	mov	r3, r0
  402d0e:	2800      	cmp	r0, #0
  402d10:	d155      	bne.n	402dbe <f_open+0x176>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  402d12:	9885      	ldr	r0, [sp, #532]	; 0x214
  402d14:	1e72      	subs	r2, r6, #1
  402d16:	60c2      	str	r2, [r0, #12]
					res = move_window(dj.fs, dw);
  402d18:	4641      	mov	r1, r8
  402d1a:	4b30      	ldr	r3, [pc, #192]	; (402ddc <f_open+0x194>)
  402d1c:	4798      	blx	r3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  402d1e:	4603      	mov	r3, r0
  402d20:	b178      	cbz	r0, 402d42 <f_open+0xfa>
  402d22:	e04c      	b.n	402dbe <f_open+0x176>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  402d24:	2b00      	cmp	r3, #0
  402d26:	d14a      	bne.n	402dbe <f_open+0x176>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  402d28:	7ae3      	ldrb	r3, [r4, #11]
  402d2a:	f013 0f10 	tst.w	r3, #16
  402d2e:	d143      	bne.n	402db8 <f_open+0x170>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  402d30:	f016 0f02 	tst.w	r6, #2
  402d34:	d002      	beq.n	402d3c <f_open+0xf4>
  402d36:	f013 0f01 	tst.w	r3, #1
  402d3a:	d13f      	bne.n	402dbc <f_open+0x174>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  402d3c:	f016 0f08 	tst.w	r6, #8
  402d40:	d001      	beq.n	402d46 <f_open+0xfe>
			mode |= FA__WRITTEN;
  402d42:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  402d46:	9b85      	ldr	r3, [sp, #532]	; 0x214
  402d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402d4a:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  402d4c:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
  402d4e:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  402d50:	7d61      	ldrb	r1, [r4, #21]
  402d52:	7d23      	ldrb	r3, [r4, #20]
  402d54:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  402d58:	7ee3      	ldrb	r3, [r4, #27]
  402d5a:	7ea2      	ldrb	r2, [r4, #26]
  402d5c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  402d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  402d64:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  402d66:	7fe2      	ldrb	r2, [r4, #31]
  402d68:	7fa3      	ldrb	r3, [r4, #30]
  402d6a:	041b      	lsls	r3, r3, #16
  402d6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402d70:	7f22      	ldrb	r2, [r4, #28]
  402d72:	4313      	orrs	r3, r2
  402d74:	7f62      	ldrb	r2, [r4, #29]
  402d76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402d7a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  402d7c:	2300      	movs	r3, #0
  402d7e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  402d80:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  402d82:	9a85      	ldr	r2, [sp, #532]	; 0x214
  402d84:	602a      	str	r2, [r5, #0]
  402d86:	88d2      	ldrh	r2, [r2, #6]
  402d88:	80aa      	strh	r2, [r5, #4]
  402d8a:	e018      	b.n	402dbe <f_open+0x176>
  402d8c:	4603      	mov	r3, r0
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  402d8e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402d90:	f016 0f1c 	tst.w	r6, #28
  402d94:	d0c6      	beq.n	402d24 <f_open+0xdc>
  402d96:	e77d      	b.n	402c94 <f_open+0x4c>
  402d98:	f016 0f1c 	tst.w	r6, #28
  402d9c:	d103      	bne.n	402da6 <f_open+0x15e>
	dir = dj.dir;

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
  402d9e:	2306      	movs	r3, #6
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  402da0:	2b00      	cmp	r3, #0
  402da2:	d0d4      	beq.n	402d4e <f_open+0x106>
  402da4:	e00b      	b.n	402dbe <f_open+0x176>
	dir = dj.dir;

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
  402da6:	2306      	movs	r3, #6
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  402da8:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  402dac:	9c8a      	ldr	r4, [sp, #552]	; 0x228
  402dae:	e7f7      	b.n	402da0 <f_open+0x158>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
				res = FR_DENIED;
  402db0:	2307      	movs	r3, #7
  402db2:	e004      	b.n	402dbe <f_open+0x176>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
  402db4:	2308      	movs	r3, #8
  402db6:	e002      	b.n	402dbe <f_open+0x176>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
  402db8:	2304      	movs	r3, #4
  402dba:	e000      	b.n	402dbe <f_open+0x176>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
  402dbc:	2307      	movs	r3, #7
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
  402dbe:	4618      	mov	r0, r3
  402dc0:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  402dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402dc8:	00401a45 	.word	0x00401a45
  402dcc:	004028f9 	.word	0x004028f9
  402dd0:	0040255d 	.word	0x0040255d
  402dd4:	004018cd 	.word	0x004018cd
  402dd8:	004021ed 	.word	0x004021ed
  402ddc:	00401dd9 	.word	0x00401dd9

00402de0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  402de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402de4:	4604      	mov	r4, r0
  402de6:	4689      	mov	r9, r1
  402de8:	4616      	mov	r6, r2
  402dea:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  402dec:	2300      	movs	r3, #0
  402dee:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  402df2:	8881      	ldrh	r1, [r0, #4]
  402df4:	6800      	ldr	r0, [r0, #0]
  402df6:	4b74      	ldr	r3, [pc, #464]	; (402fc8 <f_write+0x1e8>)
  402df8:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  402dfa:	2800      	cmp	r0, #0
  402dfc:	f040 80db 	bne.w	402fb6 <f_write+0x1d6>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  402e00:	79a3      	ldrb	r3, [r4, #6]
  402e02:	f013 0f80 	tst.w	r3, #128	; 0x80
  402e06:	f040 80d8 	bne.w	402fba <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  402e0a:	f013 0f02 	tst.w	r3, #2
  402e0e:	f000 80d7 	beq.w	402fc0 <f_write+0x1e0>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  402e12:	68e3      	ldr	r3, [r4, #12]
  402e14:	42f3      	cmn	r3, r6
  402e16:	f080 80c2 	bcs.w	402f9e <f_write+0x1be>

	for ( ;  btw;							/* Repeat until all data written */
  402e1a:	2e00      	cmp	r6, #0
  402e1c:	f000 80bf 	beq.w	402f9e <f_write+0x1be>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  402e20:	68a2      	ldr	r2, [r4, #8]
  402e22:	f3c2 0308 	ubfx	r3, r2, #0, #9
  402e26:	2b00      	cmp	r3, #0
  402e28:	f040 808c 	bne.w	402f44 <f_write+0x164>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  402e2c:	6820      	ldr	r0, [r4, #0]
  402e2e:	7883      	ldrb	r3, [r0, #2]
  402e30:	3b01      	subs	r3, #1
  402e32:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  402e36:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  402e3a:	d123      	bne.n	402e84 <f_write+0xa4>
				if (fp->fptr == 0) {		/* On the top of the file? */
  402e3c:	b93a      	cbnz	r2, 402e4e <f_write+0x6e>
					clst = fp->sclust;		/* Follow from the origin */
  402e3e:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  402e40:	b963      	cbnz	r3, 402e5c <f_write+0x7c>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  402e42:	2100      	movs	r1, #0
  402e44:	4b61      	ldr	r3, [pc, #388]	; (402fcc <f_write+0x1ec>)
  402e46:	4798      	blx	r3
  402e48:	4603      	mov	r3, r0
  402e4a:	6120      	str	r0, [r4, #16]
  402e4c:	e003      	b.n	402e56 <f_write+0x76>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  402e4e:	6961      	ldr	r1, [r4, #20]
  402e50:	4b5e      	ldr	r3, [pc, #376]	; (402fcc <f_write+0x1ec>)
  402e52:	4798      	blx	r3
  402e54:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  402e56:	2b00      	cmp	r3, #0
  402e58:	f000 80a1 	beq.w	402f9e <f_write+0x1be>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  402e5c:	2b01      	cmp	r3, #1
  402e5e:	d106      	bne.n	402e6e <f_write+0x8e>
  402e60:	79a3      	ldrb	r3, [r4, #6]
  402e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402e66:	71a3      	strb	r3, [r4, #6]
  402e68:	2002      	movs	r0, #2
  402e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  402e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402e72:	d106      	bne.n	402e82 <f_write+0xa2>
  402e74:	79a3      	ldrb	r3, [r4, #6]
  402e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402e7a:	71a3      	strb	r3, [r4, #6]
  402e7c:	2001      	movs	r0, #1
  402e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fp->clust = clst;			/* Update current cluster */
  402e82:	6163      	str	r3, [r4, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  402e84:	6820      	ldr	r0, [r4, #0]
  402e86:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402e88:	69a3      	ldr	r3, [r4, #24]
  402e8a:	429a      	cmp	r2, r3
  402e8c:	d10a      	bne.n	402ea4 <f_write+0xc4>
  402e8e:	2100      	movs	r1, #0
  402e90:	4b4f      	ldr	r3, [pc, #316]	; (402fd0 <f_write+0x1f0>)
  402e92:	4798      	blx	r3
  402e94:	b130      	cbz	r0, 402ea4 <f_write+0xc4>
				ABORT(fp->fs, FR_DISK_ERR);
  402e96:	79a3      	ldrb	r3, [r4, #6]
  402e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402e9c:	71a3      	strb	r3, [r4, #6]
  402e9e:	2001      	movs	r0, #1
  402ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  402ea4:	f8d4 a000 	ldr.w	sl, [r4]
  402ea8:	6961      	ldr	r1, [r4, #20]
  402eaa:	4650      	mov	r0, sl
  402eac:	4b49      	ldr	r3, [pc, #292]	; (402fd4 <f_write+0x1f4>)
  402eae:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  402eb0:	4605      	mov	r5, r0
  402eb2:	b930      	cbnz	r0, 402ec2 <f_write+0xe2>
  402eb4:	79a3      	ldrb	r3, [r4, #6]
  402eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402eba:	71a3      	strb	r3, [r4, #6]
  402ebc:	2002      	movs	r0, #2
  402ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sect += csect;
  402ec2:	443d      	add	r5, r7
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
  402ec4:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  402ec8:	d029      	beq.n	402f1e <f_write+0x13e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  402eca:	f89a 3002 	ldrb.w	r3, [sl, #2]
  402ece:	eb07 020b 	add.w	r2, r7, fp
  402ed2:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  402ed4:	bf88      	it	hi
  402ed6:	ebc7 0b03 	rsbhi	fp, r7, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  402eda:	fa5f f38b 	uxtb.w	r3, fp
  402ede:	462a      	mov	r2, r5
  402ee0:	4649      	mov	r1, r9
  402ee2:	f89a 0001 	ldrb.w	r0, [sl, #1]
  402ee6:	4f3c      	ldr	r7, [pc, #240]	; (402fd8 <f_write+0x1f8>)
  402ee8:	47b8      	blx	r7
  402eea:	b130      	cbz	r0, 402efa <f_write+0x11a>
					ABORT(fp->fs, FR_DISK_ERR);
  402eec:	79a3      	ldrb	r3, [r4, #6]
  402eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402ef2:	71a3      	strb	r3, [r4, #6]
  402ef4:	2001      	movs	r0, #1
  402ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  402efa:	6820      	ldr	r0, [r4, #0]
  402efc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  402efe:	1b49      	subs	r1, r1, r5
  402f00:	458b      	cmp	fp, r1
  402f02:	d909      	bls.n	402f18 <f_write+0x138>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  402f04:	f44f 7200 	mov.w	r2, #512	; 0x200
  402f08:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  402f0c:	3030      	adds	r0, #48	; 0x30
  402f0e:	4b33      	ldr	r3, [pc, #204]	; (402fdc <f_write+0x1fc>)
  402f10:	4798      	blx	r3
					fp->fs->wflag = 0;
  402f12:	6823      	ldr	r3, [r4, #0]
  402f14:	2200      	movs	r2, #0
  402f16:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  402f18:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  402f1c:	e033      	b.n	402f86 <f_write+0x1a6>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  402f1e:	68a2      	ldr	r2, [r4, #8]
  402f20:	68e3      	ldr	r3, [r4, #12]
  402f22:	429a      	cmp	r2, r3
  402f24:	d30d      	bcc.n	402f42 <f_write+0x162>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  402f26:	2100      	movs	r1, #0
  402f28:	4650      	mov	r0, sl
  402f2a:	4b29      	ldr	r3, [pc, #164]	; (402fd0 <f_write+0x1f0>)
  402f2c:	4798      	blx	r3
  402f2e:	b130      	cbz	r0, 402f3e <f_write+0x15e>
  402f30:	79a3      	ldrb	r3, [r4, #6]
  402f32:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402f36:	71a3      	strb	r3, [r4, #6]
  402f38:	2001      	movs	r0, #1
  402f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fp->fs->winsect = sect;
  402f3e:	6823      	ldr	r3, [r4, #0]
  402f40:	62dd      	str	r5, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
  402f42:	61a5      	str	r5, [r4, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  402f44:	68a5      	ldr	r5, [r4, #8]
  402f46:	f3c5 0508 	ubfx	r5, r5, #0, #9
  402f4a:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  402f4e:	42b5      	cmp	r5, r6
  402f50:	bf28      	it	cs
  402f52:	4635      	movcs	r5, r6
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  402f54:	69a1      	ldr	r1, [r4, #24]
  402f56:	6820      	ldr	r0, [r4, #0]
  402f58:	4b1d      	ldr	r3, [pc, #116]	; (402fd0 <f_write+0x1f0>)
  402f5a:	4798      	blx	r3
  402f5c:	b130      	cbz	r0, 402f6c <f_write+0x18c>
			ABORT(fp->fs, FR_DISK_ERR);
  402f5e:	79a3      	ldrb	r3, [r4, #6]
  402f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402f64:	71a3      	strb	r3, [r4, #6]
  402f66:	2001      	movs	r0, #1
  402f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  402f6c:	68a0      	ldr	r0, [r4, #8]
  402f6e:	f3c0 0008 	ubfx	r0, r0, #0, #9
  402f72:	3030      	adds	r0, #48	; 0x30
  402f74:	6823      	ldr	r3, [r4, #0]
  402f76:	462a      	mov	r2, r5
  402f78:	4649      	mov	r1, r9
  402f7a:	4418      	add	r0, r3
  402f7c:	4b17      	ldr	r3, [pc, #92]	; (402fdc <f_write+0x1fc>)
  402f7e:	4798      	blx	r3
		fp->fs->wflag = 1;
  402f80:	6823      	ldr	r3, [r4, #0]
  402f82:	2201      	movs	r2, #1
  402f84:	711a      	strb	r2, [r3, #4]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  402f86:	44a9      	add	r9, r5
  402f88:	68a3      	ldr	r3, [r4, #8]
  402f8a:	442b      	add	r3, r5
  402f8c:	60a3      	str	r3, [r4, #8]
  402f8e:	f8d8 3000 	ldr.w	r3, [r8]
  402f92:	442b      	add	r3, r5
  402f94:	f8c8 3000 	str.w	r3, [r8]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
  402f98:	1b76      	subs	r6, r6, r5
  402f9a:	f47f af41 	bne.w	402e20 <f_write+0x40>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  402f9e:	68a3      	ldr	r3, [r4, #8]
  402fa0:	68e2      	ldr	r2, [r4, #12]
  402fa2:	4293      	cmp	r3, r2
  402fa4:	bf88      	it	hi
  402fa6:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  402fa8:	79a3      	ldrb	r3, [r4, #6]
  402faa:	f043 0320 	orr.w	r3, r3, #32
  402fae:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  402fb0:	2000      	movs	r0, #0
  402fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
  402fba:	2002      	movs	r0, #2
  402fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
  402fc0:	2007      	movs	r0, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
  402fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fc6:	bf00      	nop
  402fc8:	00401981 	.word	0x00401981
  402fcc:	00402125 	.word	0x00402125
  402fd0:	00401dd9 	.word	0x00401dd9
  402fd4:	00401949 	.word	0x00401949
  402fd8:	004017e9 	.word	0x004017e9
  402fdc:	00401925 	.word	0x00401925

00402fe0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  402fe0:	b538      	push	{r3, r4, r5, lr}
  402fe2:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  402fe4:	8881      	ldrh	r1, [r0, #4]
  402fe6:	6800      	ldr	r0, [r0, #0]
  402fe8:	4b1e      	ldr	r3, [pc, #120]	; (403064 <f_sync+0x84>)
  402fea:	4798      	blx	r3
	if (res == FR_OK) {
  402fec:	4603      	mov	r3, r0
  402fee:	2800      	cmp	r0, #0
  402ff0:	d135      	bne.n	40305e <f_sync+0x7e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  402ff2:	79a2      	ldrb	r2, [r4, #6]
  402ff4:	f012 0f20 	tst.w	r2, #32
  402ff8:	d031      	beq.n	40305e <f_sync+0x7e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  402ffa:	69e1      	ldr	r1, [r4, #28]
  402ffc:	6820      	ldr	r0, [r4, #0]
  402ffe:	4b1a      	ldr	r3, [pc, #104]	; (403068 <f_sync+0x88>)
  403000:	4798      	blx	r3
			if (res == FR_OK) {
  403002:	4603      	mov	r3, r0
  403004:	bb58      	cbnz	r0, 40305e <f_sync+0x7e>
				dir = fp->dir_ptr;
  403006:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  403008:	7aeb      	ldrb	r3, [r5, #11]
  40300a:	f043 0320 	orr.w	r3, r3, #32
  40300e:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  403010:	68e3      	ldr	r3, [r4, #12]
  403012:	772b      	strb	r3, [r5, #28]
  403014:	68e3      	ldr	r3, [r4, #12]
  403016:	121b      	asrs	r3, r3, #8
  403018:	776b      	strb	r3, [r5, #29]
  40301a:	89e3      	ldrh	r3, [r4, #14]
  40301c:	77ab      	strb	r3, [r5, #30]
  40301e:	7be3      	ldrb	r3, [r4, #15]
  403020:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  403022:	6923      	ldr	r3, [r4, #16]
  403024:	76ab      	strb	r3, [r5, #26]
  403026:	6923      	ldr	r3, [r4, #16]
  403028:	121b      	asrs	r3, r3, #8
  40302a:	76eb      	strb	r3, [r5, #27]
  40302c:	8a63      	ldrh	r3, [r4, #18]
  40302e:	752b      	strb	r3, [r5, #20]
  403030:	8a63      	ldrh	r3, [r4, #18]
  403032:	121b      	asrs	r3, r3, #8
  403034:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  403036:	4b0d      	ldr	r3, [pc, #52]	; (40306c <f_sync+0x8c>)
  403038:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  40303a:	75a8      	strb	r0, [r5, #22]
  40303c:	1203      	asrs	r3, r0, #8
  40303e:	75eb      	strb	r3, [r5, #23]
  403040:	0c03      	lsrs	r3, r0, #16
  403042:	762b      	strb	r3, [r5, #24]
  403044:	0e00      	lsrs	r0, r0, #24
  403046:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  403048:	79a3      	ldrb	r3, [r4, #6]
  40304a:	f023 0320 	bic.w	r3, r3, #32
  40304e:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  403050:	6823      	ldr	r3, [r4, #0]
  403052:	2201      	movs	r2, #1
  403054:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  403056:	6820      	ldr	r0, [r4, #0]
  403058:	4b05      	ldr	r3, [pc, #20]	; (403070 <f_sync+0x90>)
  40305a:	4798      	blx	r3
  40305c:	4603      	mov	r3, r0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  40305e:	4618      	mov	r0, r3
  403060:	bd38      	pop	{r3, r4, r5, pc}
  403062:	bf00      	nop
  403064:	00401981 	.word	0x00401981
  403068:	00401dd9 	.word	0x00401dd9
  40306c:	004018cd 	.word	0x004018cd
  403070:	00402831 	.word	0x00402831

00403074 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403074:	b510      	push	{r4, lr}
  403076:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  403078:	4b03      	ldr	r3, [pc, #12]	; (403088 <f_close+0x14>)
  40307a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  40307c:	4603      	mov	r3, r0
  40307e:	b908      	cbnz	r0, 403084 <f_close+0x10>
  403080:	2200      	movs	r2, #0
  403082:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  403084:	4618      	mov	r0, r3
  403086:	bd10      	pop	{r4, pc}
  403088:	00402fe1 	.word	0x00402fe1

0040308c <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  40308c:	b510      	push	{r4, lr}
  40308e:	b082      	sub	sp, #8
  403090:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  403092:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  403096:	ab01      	add	r3, sp, #4
  403098:	2201      	movs	r2, #1
  40309a:	4669      	mov	r1, sp
  40309c:	4620      	mov	r0, r4
  40309e:	4c05      	ldr	r4, [pc, #20]	; (4030b4 <f_putc+0x28>)
  4030a0:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  4030a2:	9b01      	ldr	r3, [sp, #4]
  4030a4:	2b01      	cmp	r3, #1
}
  4030a6:	bf0c      	ite	eq
  4030a8:	2001      	moveq	r0, #1
  4030aa:	f04f 30ff 	movne.w	r0, #4294967295
  4030ae:	b002      	add	sp, #8
  4030b0:	bd10      	pop	{r4, pc}
  4030b2:	bf00      	nop
  4030b4:	00402de1 	.word	0x00402de1

004030b8 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4030b8:	287f      	cmp	r0, #127	; 0x7f
  4030ba:	d919      	bls.n	4030f0 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4030bc:	b971      	cbnz	r1, 4030dc <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4030be:	28c7      	cmp	r0, #199	; 0xc7
  4030c0:	d013      	beq.n	4030ea <ff_convert+0x32>
  4030c2:	4a0c      	ldr	r2, [pc, #48]	; (4030f4 <ff_convert+0x3c>)
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  4030c4:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  4030c6:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  4030ca:	4281      	cmp	r1, r0
  4030cc:	d003      	beq.n	4030d6 <ff_convert+0x1e>
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  4030ce:	3301      	adds	r3, #1
  4030d0:	b29b      	uxth	r3, r3
  4030d2:	2b80      	cmp	r3, #128	; 0x80
  4030d4:	d1f7      	bne.n	4030c6 <ff_convert+0xe>
				if (src == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
  4030d6:	3380      	adds	r3, #128	; 0x80
  4030d8:	b2d8      	uxtb	r0, r3
  4030da:	4770      	bx	lr
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4030dc:	28ff      	cmp	r0, #255	; 0xff
  4030de:	d806      	bhi.n	4030ee <ff_convert+0x36>
  4030e0:	3880      	subs	r0, #128	; 0x80
  4030e2:	4b04      	ldr	r3, [pc, #16]	; (4030f4 <ff_convert+0x3c>)
  4030e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  4030e8:	4770      	bx	lr

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4030ea:	2300      	movs	r3, #0
  4030ec:	e7f3      	b.n	4030d6 <ff_convert+0x1e>
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4030ee:	2000      	movs	r0, #0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
  4030f0:	4770      	bx	lr
  4030f2:	bf00      	nop
  4030f4:	0040dfe0 	.word	0x0040dfe0

004030f8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4030f8:	2861      	cmp	r0, #97	; 0x61
  4030fa:	d00e      	beq.n	40311a <ff_wtoupper+0x22>
  4030fc:	4908      	ldr	r1, [pc, #32]	; (403120 <ff_wtoupper+0x28>)
  4030fe:	2200      	movs	r2, #0
  403100:	3201      	adds	r2, #1
  403102:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  403106:	4283      	cmp	r3, r0
  403108:	d001      	beq.n	40310e <ff_wtoupper+0x16>
  40310a:	2b00      	cmp	r3, #0
  40310c:	d1f8      	bne.n	403100 <ff_wtoupper+0x8>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40310e:	b11b      	cbz	r3, 403118 <ff_wtoupper+0x20>
  403110:	4b04      	ldr	r3, [pc, #16]	; (403124 <ff_wtoupper+0x2c>)
  403112:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  403116:	4770      	bx	lr
  403118:	4770      	bx	lr
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40311a:	2200      	movs	r2, #0
  40311c:	e7f8      	b.n	403110 <ff_wtoupper+0x18>
  40311e:	bf00      	nop
  403120:	0040e0e0 	.word	0x0040e0e0
  403124:	0040e2c0 	.word	0x0040e2c0

00403128 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  403128:	2810      	cmp	r0, #16
  40312a:	d108      	bne.n	40313e <chip_isr+0x16>
  40312c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403130:	d105      	bne.n	40313e <chip_isr+0x16>
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
  403132:	b508      	push	{r3, lr}
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
		if (gpfIsr) {
  403134:	4b02      	ldr	r3, [pc, #8]	; (403140 <chip_isr+0x18>)
  403136:	681b      	ldr	r3, [r3, #0]
  403138:	b103      	cbz	r3, 40313c <chip_isr+0x14>
			gpfIsr();
  40313a:	4798      	blx	r3
  40313c:	bd08      	pop	{r3, pc}
  40313e:	4770      	bx	lr
  403140:	2040093c 	.word	0x2040093c

00403144 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  403144:	b140      	cbz	r0, 403158 <nm_bsp_sleep+0x14>
*	@brief	Sleep in units of mSec
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
  403146:	b570      	push	{r4, r5, r6, lr}
  403148:	4604      	mov	r4, r0
	while(u32TimeMsec--) {
		delay_ms(4);
  40314a:	4e04      	ldr	r6, [pc, #16]	; (40315c <nm_bsp_sleep+0x18>)
  40314c:	4d04      	ldr	r5, [pc, #16]	; (403160 <nm_bsp_sleep+0x1c>)
  40314e:	4630      	mov	r0, r6
  403150:	47a8      	blx	r5
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  403152:	3c01      	subs	r4, #1
  403154:	d1fb      	bne.n	40314e <nm_bsp_sleep+0xa>
  403156:	bd70      	pop	{r4, r5, r6, pc}
  403158:	4770      	bx	lr
  40315a:	bf00      	nop
  40315c:	00031635 	.word	0x00031635
  403160:	20400001 	.word	0x20400001

00403164 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset WINC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
  403164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403168:	4f09      	ldr	r7, [pc, #36]	; (403190 <nm_bsp_reset+0x2c>)
  40316a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40316e:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  403172:	4d08      	ldr	r5, [pc, #32]	; (403194 <nm_bsp_reset+0x30>)
  403174:	2608      	movs	r6, #8
  403176:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_LOW);
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_LOW);
	nm_bsp_sleep(100);
  403178:	2064      	movs	r0, #100	; 0x64
  40317a:	4c07      	ldr	r4, [pc, #28]	; (403198 <nm_bsp_reset+0x34>)
  40317c:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40317e:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_CHIP_ENABLE, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  403182:	2064      	movs	r0, #100	; 0x64
  403184:	47a0      	blx	r4
  403186:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(CONF_WINC_PIN_RESET, IOPORT_PIN_LEVEL_HIGH);
	nm_bsp_sleep(100);
  403188:	2064      	movs	r0, #100	; 0x64
  40318a:	47a0      	blx	r4
  40318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403190:	400e1200 	.word	0x400e1200
  403194:	400e1000 	.word	0x400e1000
  403198:	00403145 	.word	0x00403145

0040319c <nm_bsp_init>:
*	@fn		nm_bsp_init
*	@brief	Initialize BSP
*	@return	0 in case of success and -1 in case of failure
*/
sint8 nm_bsp_init(void)
{
  40319c:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  40319e:	2200      	movs	r2, #0
  4031a0:	4b14      	ldr	r3, [pc, #80]	; (4031f4 <nm_bsp_init+0x58>)
  4031a2:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4031a4:	200a      	movs	r0, #10
  4031a6:	4c14      	ldr	r4, [pc, #80]	; (4031f8 <nm_bsp_init+0x5c>)
  4031a8:	47a0      	blx	r4
  4031aa:	200b      	movs	r0, #11
  4031ac:	47a0      	blx	r4
  4031ae:	200c      	movs	r0, #12
  4031b0:	47a0      	blx	r4
  4031b2:	2010      	movs	r0, #16
  4031b4:	47a0      	blx	r4
  4031b6:	2011      	movs	r0, #17
  4031b8:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4031ba:	4b10      	ldr	r3, [pc, #64]	; (4031fc <nm_bsp_init+0x60>)
  4031bc:	2208      	movs	r2, #8
  4031be:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4031c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4031c4:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4031c6:	4a0e      	ldr	r2, [pc, #56]	; (403200 <nm_bsp_init+0x64>)
  4031c8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4031cc:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4031ce:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4031d2:	6311      	str	r1, [r2, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4031d4:	2204      	movs	r2, #4
  4031d6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4031d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4031dc:	631a      	str	r2, [r3, #48]	; 0x30

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  4031de:	4b09      	ldr	r3, [pc, #36]	; (403204 <nm_bsp_init+0x68>)
  4031e0:	681b      	ldr	r3, [r3, #0]
  4031e2:	f013 0f01 	tst.w	r3, #1
  4031e6:	d001      	beq.n	4031ec <nm_bsp_init+0x50>
  4031e8:	4b06      	ldr	r3, [pc, #24]	; (403204 <nm_bsp_init+0x68>)
  4031ea:	681b      	ldr	r3, [r3, #0]
	    delay_init();
    }

	/* Perform chip reset. */
	nm_bsp_reset();
  4031ec:	4b06      	ldr	r3, [pc, #24]	; (403208 <nm_bsp_init+0x6c>)
  4031ee:	4798      	blx	r3

	return 0;
}
  4031f0:	2000      	movs	r0, #0
  4031f2:	bd10      	pop	{r4, pc}
  4031f4:	2040093c 	.word	0x2040093c
  4031f8:	004065c9 	.word	0x004065c9
  4031fc:	400e1000 	.word	0x400e1000
  403200:	400e1200 	.word	0x400e1200
  403204:	e000e010 	.word	0xe000e010
  403208:	00403165 	.word	0x00403165

0040320c <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  40320c:	b530      	push	{r4, r5, lr}
  40320e:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  403210:	4b14      	ldr	r3, [pc, #80]	; (403264 <nm_bsp_register_isr+0x58>)
  403212:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  403214:	2010      	movs	r0, #16
  403216:	4b14      	ldr	r3, [pc, #80]	; (403268 <nm_bsp_register_isr+0x5c>)
  403218:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40321a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40321e:	207c      	movs	r0, #124	; 0x7c
  403220:	4b12      	ldr	r3, [pc, #72]	; (40326c <nm_bsp_register_isr+0x60>)
  403222:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  403224:	4c12      	ldr	r4, [pc, #72]	; (403270 <nm_bsp_register_isr+0x64>)
  403226:	2201      	movs	r2, #1
  403228:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40322c:	4620      	mov	r0, r4
  40322e:	4b11      	ldr	r3, [pc, #68]	; (403274 <nm_bsp_register_isr+0x68>)
  403230:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  403232:	4b11      	ldr	r3, [pc, #68]	; (403278 <nm_bsp_register_isr+0x6c>)
  403234:	9300      	str	r3, [sp, #0]
  403236:	2351      	movs	r3, #81	; 0x51
  403238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40323c:	2110      	movs	r1, #16
  40323e:	4620      	mov	r0, r4
  403240:	4d0e      	ldr	r5, [pc, #56]	; (40327c <nm_bsp_register_isr+0x70>)
  403242:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  403244:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403248:	4620      	mov	r0, r4
  40324a:	4b0d      	ldr	r3, [pc, #52]	; (403280 <nm_bsp_register_isr+0x74>)
  40324c:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40324e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  403252:	4b0c      	ldr	r3, [pc, #48]	; (403284 <nm_bsp_register_isr+0x78>)
  403254:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  403256:	2200      	movs	r2, #0
  403258:	2110      	movs	r1, #16
  40325a:	4620      	mov	r0, r4
  40325c:	4b0a      	ldr	r3, [pc, #40]	; (403288 <nm_bsp_register_isr+0x7c>)
  40325e:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  403260:	b003      	add	sp, #12
  403262:	bd30      	pop	{r4, r5, pc}
  403264:	2040093c 	.word	0x2040093c
  403268:	004065c9 	.word	0x004065c9
  40326c:	004061c9 	.word	0x004061c9
  403270:	400e1400 	.word	0x400e1400
  403274:	00406085 	.word	0x00406085
  403278:	00403129 	.word	0x00403129
  40327c:	0040634d 	.word	0x0040634d
  403280:	004061b9 	.word	0x004061b9
  403284:	e000e100 	.word	0xe000e100
  403288:	0040641d 	.word	0x0040641d

0040328c <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  40328c:	b508      	push	{r3, lr}
	if (u8Enable) {
  40328e:	b128      	cbz	r0, 40329c <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  403290:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403294:	4804      	ldr	r0, [pc, #16]	; (4032a8 <nm_bsp_interrupt_ctrl+0x1c>)
  403296:	4b05      	ldr	r3, [pc, #20]	; (4032ac <nm_bsp_interrupt_ctrl+0x20>)
  403298:	4798      	blx	r3
  40329a:	bd08      	pop	{r3, pc}
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40329c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4032a0:	4801      	ldr	r0, [pc, #4]	; (4032a8 <nm_bsp_interrupt_ctrl+0x1c>)
  4032a2:	4b03      	ldr	r3, [pc, #12]	; (4032b0 <nm_bsp_interrupt_ctrl+0x24>)
  4032a4:	4798      	blx	r3
  4032a6:	bd08      	pop	{r3, pc}
  4032a8:	400e1400 	.word	0x400e1400
  4032ac:	004061b9 	.word	0x004061b9
  4032b0:	004061bd 	.word	0x004061bd

004032b4 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4032b6:	4c39      	ldr	r4, [pc, #228]	; (40339c <nm_bus_init+0xe8>)
  4032b8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4032bc:	6621      	str	r1, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4032be:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4032c2:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4032c4:	6261      	str	r1, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4032c6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4032ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4032cc:	430b      	orrs	r3, r1
  4032ce:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4032d0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4032d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  4032d6:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4032d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4032dc:	6622      	str	r2, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4032de:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4032e2:	6562      	str	r2, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4032e4:	6262      	str	r2, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4032e6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4032ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4032ec:	4313      	orrs	r3, r2
  4032ee:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4032f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4032f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4032f6:	6763      	str	r3, [r4, #116]	; 0x74
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4032f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  4032fc:	6623      	str	r3, [r4, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4032fe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403302:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403304:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403306:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  40330a:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40330c:	4318      	orrs	r0, r3
  40330e:	6720      	str	r0, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403310:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403312:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  403316:	6760      	str	r0, [r4, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403318:	6061      	str	r1, [r4, #4]
  40331a:	6062      	str	r2, [r4, #4]
  40331c:	6063      	str	r3, [r4, #4]
  40331e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  403322:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  403324:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  403326:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  403328:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40332a:	4d1d      	ldr	r5, [pc, #116]	; (4033a0 <nm_bus_init+0xec>)
  40332c:	4628      	mov	r0, r5
  40332e:	4b1d      	ldr	r3, [pc, #116]	; (4033a4 <nm_bus_init+0xf0>)
  403330:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  403332:	2302      	movs	r3, #2
  403334:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  403336:	2380      	movs	r3, #128	; 0x80
  403338:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40333a:	686b      	ldr	r3, [r5, #4]
  40333c:	f043 0301 	orr.w	r3, r3, #1
  403340:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  403342:	686b      	ldr	r3, [r5, #4]
  403344:	f043 0310 	orr.w	r3, r3, #16
  403348:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  40334a:	2101      	movs	r1, #1
  40334c:	4628      	mov	r0, r5
  40334e:	4b16      	ldr	r3, [pc, #88]	; (4033a8 <nm_bus_init+0xf4>)
  403350:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  403352:	2200      	movs	r2, #0
  403354:	2101      	movs	r1, #1
  403356:	4628      	mov	r0, r5
  403358:	4b14      	ldr	r3, [pc, #80]	; (4033ac <nm_bus_init+0xf8>)
  40335a:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  40335c:	2201      	movs	r2, #1
  40335e:	4611      	mov	r1, r2
  403360:	4628      	mov	r0, r5
  403362:	4b13      	ldr	r3, [pc, #76]	; (4033b0 <nm_bus_init+0xfc>)
  403364:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  403366:	2200      	movs	r2, #0
  403368:	2101      	movs	r1, #1
  40336a:	4628      	mov	r0, r5
  40336c:	4b11      	ldr	r3, [pc, #68]	; (4033b4 <nm_bus_init+0x100>)
  40336e:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  403370:	4911      	ldr	r1, [pc, #68]	; (4033b8 <nm_bus_init+0x104>)
  403372:	4812      	ldr	r0, [pc, #72]	; (4033bc <nm_bus_init+0x108>)
  403374:	4b12      	ldr	r3, [pc, #72]	; (4033c0 <nm_bus_init+0x10c>)
  403376:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
	spi_set_clock_polarity(CONF_WINC_SPI,
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  403378:	b2c2      	uxtb	r2, r0
  40337a:	2101      	movs	r1, #1
  40337c:	4628      	mov	r0, r5
  40337e:	4b11      	ldr	r3, [pc, #68]	; (4033c4 <nm_bus_init+0x110>)
  403380:	4798      	blx	r3
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  403382:	2300      	movs	r3, #0
  403384:	461a      	mov	r2, r3
  403386:	2101      	movs	r1, #1
  403388:	4628      	mov	r0, r5
  40338a:	4f0f      	ldr	r7, [pc, #60]	; (4033c8 <nm_bus_init+0x114>)
  40338c:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40338e:	2301      	movs	r3, #1
  403390:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  403392:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  403394:	4b0d      	ldr	r3, [pc, #52]	; (4033cc <nm_bus_init+0x118>)
  403396:	4798      	blx	r3
#endif
	return result;
}
  403398:	2000      	movs	r0, #0
  40339a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40339c:	400e1400 	.word	0x400e1400
  4033a0:	40008000 	.word	0x40008000
  4033a4:	0040661d 	.word	0x0040661d
  4033a8:	00406649 	.word	0x00406649
  4033ac:	004066cd 	.word	0x004066cd
  4033b0:	004066ed 	.word	0x004066ed
  4033b4:	0040670d 	.word	0x0040670d
  4033b8:	11e1a300 	.word	0x11e1a300
  4033bc:	02dc6c00 	.word	0x02dc6c00
  4033c0:	00406721 	.word	0x00406721
  4033c4:	00406739 	.word	0x00406739
  4033c8:	00406765 	.word	0x00406765
  4033cc:	00403165 	.word	0x00403165

004033d0 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033d4:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4033d6:	2803      	cmp	r0, #3
  4033d8:	d141      	bne.n	40345e <nm_bus_ioctl+0x8e>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  4033da:	680e      	ldr	r6, [r1, #0]
  4033dc:	684d      	ldr	r5, [r1, #4]
  4033de:	890c      	ldrh	r4, [r1, #8]
	uint16 cpu16Sz		= u16Sz;
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
  4033e0:	2300      	movs	r3, #0
  4033e2:	f88d 3004 	strb.w	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
  4033e6:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t uc_pcs;

	if (!pu8Mosi) {
  4033ea:	b136      	cbz	r6, 4033fa <nm_bus_ioctl+0x2a>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
  4033ec:	2d00      	cmp	r5, #0
  4033ee:	d133      	bne.n	403458 <nm_bus_ioctl+0x88>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
  4033f0:	f04f 0801 	mov.w	r8, #1
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4033f4:	4699      	mov	r9, r3
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
  4033f6:	ad01      	add	r5, sp, #4
  4033f8:	e004      	b.n	403404 <nm_bus_ioctl+0x34>
	uint8 *cppu8Mosi	= pu8Mosi;
	uint8 *cppu8Miso	= pu8Miso;
	*/
	
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4033fa:	f04f 0800 	mov.w	r8, #0
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
  4033fe:	f04f 0901 	mov.w	r9, #1
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;
	uint8_t uc_pcs;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
  403402:	ae01      	add	r6, sp, #4
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
  403404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  403408:	4b1c      	ldr	r3, [pc, #112]	; (40347c <nm_bus_ioctl+0xac>)
  40340a:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  40340c:	b1f4      	cbz	r4, 40344c <nm_bus_ioctl+0x7c>
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40340e:	4f1c      	ldr	r7, [pc, #112]	; (403480 <nm_bus_ioctl+0xb0>)
  403410:	f8df b084 	ldr.w	fp, [pc, #132]	; 403498 <nm_bus_ioctl+0xc8>
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  403414:	f8df a084 	ldr.w	sl, [pc, #132]	; 40349c <nm_bus_ioctl+0xcc>
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
		txd_data = *pu8Mosi;
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  403418:	2300      	movs	r3, #0
  40341a:	461a      	mov	r2, r3
  40341c:	7831      	ldrb	r1, [r6, #0]
  40341e:	4638      	mov	r0, r7
  403420:	47d8      	blx	fp
		
		/* Read SPI master data register. */
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  403422:	f10d 0205 	add.w	r2, sp, #5
  403426:	f10d 0106 	add.w	r1, sp, #6
  40342a:	4638      	mov	r0, r7
  40342c:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  40342e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  403432:	702b      	strb	r3, [r5, #0]

		u16Sz--;
  403434:	3c01      	subs	r4, #1
  403436:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  403438:	f1b8 0f00 	cmp.w	r8, #0
  40343c:	d100      	bne.n	403440 <nm_bus_ioctl+0x70>
			pu8Miso++;
  40343e:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  403440:	f1b9 0f00 	cmp.w	r9, #0
  403444:	d100      	bne.n	403448 <nm_bus_ioctl+0x78>
			pu8Mosi++;
  403446:	3601      	adds	r6, #1
	else {
		return M2M_ERR_BUS_FAIL;
	}
	
	SPI_ASSERT_CS();
	while (u16Sz) {
  403448:	2c00      	cmp	r4, #0
  40344a:	d1e5      	bne.n	403418 <nm_bus_ioctl+0x48>
		if (!u8SkipMiso)
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}
	SPI_DEASSERT_CS();
  40344c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  403450:	4b0a      	ldr	r3, [pc, #40]	; (40347c <nm_bus_ioctl+0xac>)
  403452:	631a      	str	r2, [r3, #48]	; 0x30
	printf(" / MISO: 0x");
	for(i = 0; i<cpu16Sz; i++)
		printf("%x", *(cppu8Miso+i) );
	printf(" / Size %d \n", cpu16Sz);
*/
	return M2M_SUCCESS;
  403454:	2000      	movs	r0, #0
  403456:	e00e      	b.n	403476 <nm_bus_ioctl+0xa6>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
  403458:	f06f 0005 	mvn.w	r0, #5
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
  40345c:	e00b      	b.n	403476 <nm_bus_ioctl+0xa6>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("Invalid IOCTL command!\n");
  40345e:	f240 121f 	movw	r2, #287	; 0x11f
  403462:	4908      	ldr	r1, [pc, #32]	; (403484 <nm_bus_ioctl+0xb4>)
  403464:	4808      	ldr	r0, [pc, #32]	; (403488 <nm_bus_ioctl+0xb8>)
  403466:	4c09      	ldr	r4, [pc, #36]	; (40348c <nm_bus_ioctl+0xbc>)
  403468:	47a0      	blx	r4
  40346a:	4809      	ldr	r0, [pc, #36]	; (403490 <nm_bus_ioctl+0xc0>)
  40346c:	47a0      	blx	r4
  40346e:	4809      	ldr	r0, [pc, #36]	; (403494 <nm_bus_ioctl+0xc4>)
  403470:	47a0      	blx	r4
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
  403472:	f04f 30ff 	mov.w	r0, #4294967295
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  403476:	b003      	add	sp, #12
  403478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40347c:	400e1400 	.word	0x400e1400
  403480:	40008000 	.word	0x40008000
  403484:	0040e4a0 	.word	0x0040e4a0
  403488:	0040e4b0 	.word	0x0040e4b0
  40348c:	00407645 	.word	0x00407645
  403490:	0040e4c4 	.word	0x0040e4c4
  403494:	0040f6d8 	.word	0x0040f6d8
  403498:	00406695 	.word	0x00406695
  40349c:	00406661 	.word	0x00406661

004034a0 <nm_bus_deinit>:
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4034a0:	2202      	movs	r2, #2
  4034a2:	4b0e      	ldr	r3, [pc, #56]	; (4034dc <nm_bus_deinit+0x3c>)
  4034a4:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4034a6:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  4034aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4034ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4034b2:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4034b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4034b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4034bc:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4034be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4034c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4034c6:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4034c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4034cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4034d0:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4034d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  4034d6:	2000      	movs	r0, #0
  4034d8:	4770      	bx	lr
  4034da:	bf00      	nop
  4034dc:	40008000 	.word	0x40008000

004034e0 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  4034e0:	b13a      	cbz	r2, 4034f2 <m2m_memcpy+0x12>
  4034e2:	3901      	subs	r1, #1
  4034e4:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  4034e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4034ea:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  4034ee:	4290      	cmp	r0, r2
  4034f0:	d1f9      	bne.n	4034e6 <m2m_memcpy+0x6>
  4034f2:	4770      	bx	lr

004034f4 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  4034f4:	b122      	cbz	r2, 403500 <m2m_memset+0xc>
  4034f6:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  4034f8:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  4034fc:	4290      	cmp	r0, r2
  4034fe:	d1fb      	bne.n	4034f8 <m2m_memset+0x4>
  403500:	4770      	bx	lr
  403502:	bf00      	nop

00403504 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
  403504:	4603      	mov	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
  403506:	7802      	ldrb	r2, [r0, #0]
  403508:	b13a      	cbz	r2, 40351a <m2m_strlen+0x16>
  40350a:	2000      	movs	r0, #0
	{
		u16StrLen ++;
  40350c:	3001      	adds	r0, #1
  40350e:	b280      	uxth	r0, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  403510:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  403514:	2a00      	cmp	r2, #0
  403516:	d1f9      	bne.n	40350c <m2m_strlen+0x8>
  403518:	4770      	bx	lr
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
  40351a:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
  40351c:	4770      	bx	lr
  40351e:	bf00      	nop

00403520 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  403520:	4a02      	ldr	r2, [pc, #8]	; (40352c <isr+0xc>)
  403522:	7813      	ldrb	r3, [r2, #0]
  403524:	3301      	adds	r3, #1
  403526:	b2db      	uxtb	r3, r3
  403528:	7013      	strb	r3, [r2, #0]
  40352a:	4770      	bx	lr
  40352c:	20400948 	.word	0x20400948

00403530 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  403530:	4770      	bx	lr
  403532:	bf00      	nop

00403534 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
  403534:	b500      	push	{lr}
  403536:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
  403538:	2001      	movs	r0, #1
  40353a:	4b0b      	ldr	r3, [pc, #44]	; (403568 <hif_set_rx_done+0x34>)
  40353c:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  40353e:	a901      	add	r1, sp, #4
  403540:	f241 0070 	movw	r0, #4208	; 0x1070
  403544:	4b09      	ldr	r3, [pc, #36]	; (40356c <hif_set_rx_done+0x38>)
  403546:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  403548:	4603      	mov	r3, r0
  40354a:	b940      	cbnz	r0, 40355e <hif_set_rx_done+0x2a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
  40354c:	9901      	ldr	r1, [sp, #4]
  40354e:	f041 0102 	orr.w	r1, r1, #2
  403552:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  403554:	f241 0070 	movw	r0, #4208	; 0x1070
  403558:	4b05      	ldr	r3, [pc, #20]	; (403570 <hif_set_rx_done+0x3c>)
  40355a:	4798      	blx	r3
  40355c:	4603      	mov	r3, r0
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
  40355e:	4618      	mov	r0, r3
  403560:	b003      	add	sp, #12
  403562:	f85d fb04 	ldr.w	pc, [sp], #4
  403566:	bf00      	nop
  403568:	0040328d 	.word	0x0040328d
  40356c:	004047fd 	.word	0x004047fd
  403570:	00404809 	.word	0x00404809

00403574 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  403574:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  403576:	4b11      	ldr	r3, [pc, #68]	; (4035bc <hif_chip_wake+0x48>)
  403578:	781b      	ldrb	r3, [r3, #0]
  40357a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40357e:	d115      	bne.n	4035ac <hif_chip_wake+0x38>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  403580:	4b0f      	ldr	r3, [pc, #60]	; (4035c0 <hif_chip_wake+0x4c>)
  403582:	781b      	ldrb	r3, [r3, #0]
  403584:	b2db      	uxtb	r3, r3
  403586:	2b03      	cmp	r3, #3
  403588:	d004      	beq.n	403594 <hif_chip_wake+0x20>
  40358a:	4b0d      	ldr	r3, [pc, #52]	; (4035c0 <hif_chip_wake+0x4c>)
  40358c:	781b      	ldrb	r3, [r3, #0]
  40358e:	b2db      	uxtb	r3, r3
  403590:	2b04      	cmp	r3, #4
  403592:	d10b      	bne.n	4035ac <hif_chip_wake+0x38>
		{
			ret = nm_clkless_wake();
  403594:	4b0b      	ldr	r3, [pc, #44]	; (4035c4 <hif_chip_wake+0x50>)
  403596:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  403598:	4603      	mov	r3, r0
  40359a:	b968      	cbnz	r0, 4035b8 <hif_chip_wake+0x44>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  40359c:	f245 6178 	movw	r1, #22136	; 0x5678
  4035a0:	f241 0074 	movw	r0, #4212	; 0x1074
  4035a4:	4b08      	ldr	r3, [pc, #32]	; (4035c8 <hif_chip_wake+0x54>)
  4035a6:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4035a8:	4603      	mov	r3, r0
  4035aa:	b928      	cbnz	r0, 4035b8 <hif_chip_wake+0x44>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4035ac:	4a03      	ldr	r2, [pc, #12]	; (4035bc <hif_chip_wake+0x48>)
  4035ae:	7813      	ldrb	r3, [r2, #0]
  4035b0:	3301      	adds	r3, #1
  4035b2:	b2db      	uxtb	r3, r3
  4035b4:	7013      	strb	r3, [r2, #0]
  4035b6:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4035b8:	4618      	mov	r0, r3
  4035ba:	bd08      	pop	{r3, pc}
  4035bc:	20400964 	.word	0x20400964
  4035c0:	20400954 	.word	0x20400954
  4035c4:	0040436d 	.word	0x0040436d
  4035c8:	00404809 	.word	0x00404809

004035cc <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
  4035cc:	b500      	push	{lr}
  4035ce:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  4035d0:	4b1d      	ldr	r3, [pc, #116]	; (403648 <hif_chip_sleep+0x7c>)
  4035d2:	781b      	ldrb	r3, [r3, #0]
  4035d4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4035d8:	d004      	beq.n	4035e4 <hif_chip_sleep+0x18>
	{
		gu8ChipSleep--;
  4035da:	4a1b      	ldr	r2, [pc, #108]	; (403648 <hif_chip_sleep+0x7c>)
  4035dc:	7813      	ldrb	r3, [r2, #0]
  4035de:	3b01      	subs	r3, #1
  4035e0:	b2db      	uxtb	r3, r3
  4035e2:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  4035e4:	4b18      	ldr	r3, [pc, #96]	; (403648 <hif_chip_sleep+0x7c>)
  4035e6:	781b      	ldrb	r3, [r3, #0]
  4035e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4035ec:	d125      	bne.n	40363a <hif_chip_sleep+0x6e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4035ee:	4b17      	ldr	r3, [pc, #92]	; (40364c <hif_chip_sleep+0x80>)
  4035f0:	781b      	ldrb	r3, [r3, #0]
  4035f2:	b2db      	uxtb	r3, r3
  4035f4:	2b03      	cmp	r3, #3
  4035f6:	d004      	beq.n	403602 <hif_chip_sleep+0x36>
  4035f8:	4b14      	ldr	r3, [pc, #80]	; (40364c <hif_chip_sleep+0x80>)
  4035fa:	781b      	ldrb	r3, [r3, #0]
  4035fc:	b2db      	uxtb	r3, r3
  4035fe:	2b04      	cmp	r3, #4
  403600:	d11d      	bne.n	40363e <hif_chip_sleep+0x72>
		{
			uint32 reg = 0;
  403602:	2300      	movs	r3, #0
  403604:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  403606:	f244 3121 	movw	r1, #17185	; 0x4321
  40360a:	f241 0074 	movw	r0, #4212	; 0x1074
  40360e:	4b10      	ldr	r3, [pc, #64]	; (403650 <hif_chip_sleep+0x84>)
  403610:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  403612:	4603      	mov	r3, r0
  403614:	b9a0      	cbnz	r0, 403640 <hif_chip_sleep+0x74>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
  403616:	a901      	add	r1, sp, #4
  403618:	2001      	movs	r0, #1
  40361a:	4b0e      	ldr	r3, [pc, #56]	; (403654 <hif_chip_sleep+0x88>)
  40361c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40361e:	4603      	mov	r3, r0
  403620:	b970      	cbnz	r0, 403640 <hif_chip_sleep+0x74>
			if(reg&0x2)
  403622:	9901      	ldr	r1, [sp, #4]
  403624:	f011 0f02 	tst.w	r1, #2
  403628:	d00a      	beq.n	403640 <hif_chip_sleep+0x74>
			{
				reg &=~(1 << 1);
  40362a:	f021 0102 	bic.w	r1, r1, #2
  40362e:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  403630:	2001      	movs	r0, #1
  403632:	4b07      	ldr	r3, [pc, #28]	; (403650 <hif_chip_sleep+0x84>)
  403634:	4798      	blx	r3
  403636:	4603      	mov	r3, r0
  403638:	e002      	b.n	403640 <hif_chip_sleep+0x74>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
  40363a:	2300      	movs	r3, #0
  40363c:	e000      	b.n	403640 <hif_chip_sleep+0x74>
  40363e:	2300      	movs	r3, #0
		{
		}
	}
ERR1:
	return ret;
}
  403640:	4618      	mov	r0, r3
  403642:	b003      	add	sp, #12
  403644:	f85d fb04 	ldr.w	pc, [sp], #4
  403648:	20400964 	.word	0x20400964
  40364c:	20400954 	.word	0x20400954
  403650:	00404809 	.word	0x00404809
  403654:	004047fd 	.word	0x004047fd

00403658 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  403658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40365c:	b087      	sub	sp, #28
  40365e:	4680      	mov	r8, r0
  403660:	460f      	mov	r7, r1
  403662:	4692      	mov	sl, r2
  403664:	4699      	mov	r9, r3
  403666:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403668:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  40366c:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  403670:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  403674:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  403678:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  40367c:	2308      	movs	r3, #8
  40367e:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  403682:	b144      	cbz	r4, 403696 <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  403684:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  403688:	fa16 f383 	uxtah	r3, r6, r3
  40368c:	442b      	add	r3, r5
  40368e:	b29b      	uxth	r3, r3
  403690:	f8ad 3016 	strh.w	r3, [sp, #22]
  403694:	e006      	b.n	4036a4 <hif_send+0x4c>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
  403696:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40369a:	fa19 f383 	uxtah	r3, r9, r3
  40369e:	b29b      	uxth	r3, r3
  4036a0:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	ret = hif_chip_wake();
  4036a4:	4b57      	ldr	r3, [pc, #348]	; (403804 <hif_send+0x1ac>)
  4036a6:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4036a8:	4683      	mov	fp, r0
  4036aa:	2800      	cmp	r0, #0
  4036ac:	f040 8095 	bne.w	4037da <hif_send+0x182>
	{
		volatile uint32 reg, dma_addr = 0;
  4036b0:	2300      	movs	r3, #0
  4036b2:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4036b4:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4036b8:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4036ba:	9b02      	ldr	r3, [sp, #8]
  4036bc:	ea48 0303 	orr.w	r3, r8, r3
  4036c0:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4036c2:	9b02      	ldr	r3, [sp, #8]
  4036c4:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  4036c8:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4036ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4036ce:	9b02      	ldr	r3, [sp, #8]
  4036d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4036d4:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  4036d6:	9902      	ldr	r1, [sp, #8]
  4036d8:	f241 008c 	movw	r0, #4236	; 0x108c
  4036dc:	4b4a      	ldr	r3, [pc, #296]	; (403808 <hif_send+0x1b0>)
  4036de:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4036e0:	4683      	mov	fp, r0
  4036e2:	2800      	cmp	r0, #0
  4036e4:	f040 808a 	bne.w	4037fc <hif_send+0x1a4>


		reg = 0;
  4036e8:	2300      	movs	r3, #0
  4036ea:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  4036ec:	9b02      	ldr	r3, [sp, #8]
  4036ee:	f043 0302 	orr.w	r3, r3, #2
  4036f2:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  4036f4:	9902      	ldr	r1, [sp, #8]
  4036f6:	f241 0078 	movw	r0, #4216	; 0x1078
  4036fa:	4b43      	ldr	r3, [pc, #268]	; (403808 <hif_send+0x1b0>)
  4036fc:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4036fe:	4683      	mov	fp, r0
  403700:	2800      	cmp	r0, #0
  403702:	d17b      	bne.n	4037fc <hif_send+0x1a4>
		dma_addr = 0;
  403704:	2300      	movs	r3, #0
  403706:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  403708:	f8ad 3006 	strh.w	r3, [sp, #6]
  40370c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  403710:	b29b      	uxth	r3, r3
  403712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403716:	d21e      	bcs.n	403756 <hif_send+0xfe>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  403718:	f241 0878 	movw	r8, #4216	; 0x1078
  40371c:	4f3b      	ldr	r7, [pc, #236]	; (40380c <hif_send+0x1b4>)
  40371e:	a902      	add	r1, sp, #8
  403720:	4640      	mov	r0, r8
  403722:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  403724:	b9b8      	cbnz	r0, 403756 <hif_send+0xfe>
			if (!(reg & 0x2))
  403726:	9b02      	ldr	r3, [sp, #8]
  403728:	f013 0f02 	tst.w	r3, #2
  40372c:	d107      	bne.n	40373e <hif_send+0xe6>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  40372e:	a903      	add	r1, sp, #12
  403730:	4837      	ldr	r0, [pc, #220]	; (403810 <hif_send+0x1b8>)
  403732:	4b36      	ldr	r3, [pc, #216]	; (40380c <hif_send+0x1b4>)
  403734:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  403736:	b170      	cbz	r0, 403756 <hif_send+0xfe>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
  403738:	2300      	movs	r3, #0
  40373a:	9303      	str	r3, [sp, #12]
  40373c:	e00b      	b.n	403756 <hif_send+0xfe>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  40373e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  403742:	3301      	adds	r3, #1
  403744:	b29b      	uxth	r3, r3
  403746:	f8ad 3006 	strh.w	r3, [sp, #6]
  40374a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40374e:	b29b      	uxth	r3, r3
  403750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  403754:	d3e3      	bcc.n	40371e <hif_send+0xc6>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  403756:	9b03      	ldr	r3, [sp, #12]
  403758:	2b00      	cmp	r3, #0
  40375a:	d04d      	beq.n	4037f8 <hif_send+0x1a0>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  40375c:	9b03      	ldr	r3, [sp, #12]
  40375e:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  403760:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  403764:	b29b      	uxth	r3, r3
  403766:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  40376a:	9804      	ldr	r0, [sp, #16]
  40376c:	2208      	movs	r2, #8
  40376e:	a905      	add	r1, sp, #20
  403770:	4b28      	ldr	r3, [pc, #160]	; (403814 <hif_send+0x1bc>)
  403772:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  403774:	4683      	mov	fp, r0
  403776:	2800      	cmp	r0, #0
  403778:	d140      	bne.n	4037fc <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  40377a:	9b04      	ldr	r3, [sp, #16]
  40377c:	3308      	adds	r3, #8
  40377e:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  403780:	f1ba 0f00 	cmp.w	sl, #0
  403784:	d00a      	beq.n	40379c <hif_send+0x144>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  403786:	9804      	ldr	r0, [sp, #16]
  403788:	464a      	mov	r2, r9
  40378a:	4651      	mov	r1, sl
  40378c:	4b21      	ldr	r3, [pc, #132]	; (403814 <hif_send+0x1bc>)
  40378e:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  403790:	4683      	mov	fp, r0
  403792:	2800      	cmp	r0, #0
  403794:	d132      	bne.n	4037fc <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  403796:	9b04      	ldr	r3, [sp, #16]
  403798:	444b      	add	r3, r9
  40379a:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  40379c:	b174      	cbz	r4, 4037bc <hif_send+0x164>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  40379e:	9b04      	ldr	r3, [sp, #16]
  4037a0:	ebc9 0505 	rsb	r5, r9, r5
  4037a4:	441d      	add	r5, r3
  4037a6:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4037a8:	9804      	ldr	r0, [sp, #16]
  4037aa:	4632      	mov	r2, r6
  4037ac:	4621      	mov	r1, r4
  4037ae:	4b19      	ldr	r3, [pc, #100]	; (403814 <hif_send+0x1bc>)
  4037b0:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4037b2:	4683      	mov	fp, r0
  4037b4:	bb10      	cbnz	r0, 4037fc <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4037b6:	9b04      	ldr	r3, [sp, #16]
  4037b8:	441e      	add	r6, r3
  4037ba:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4037bc:	9b03      	ldr	r3, [sp, #12]
  4037be:	009b      	lsls	r3, r3, #2
  4037c0:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4037c2:	9b02      	ldr	r3, [sp, #8]
  4037c4:	f043 0302 	orr.w	r3, r3, #2
  4037c8:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4037ca:	9902      	ldr	r1, [sp, #8]
  4037cc:	f241 006c 	movw	r0, #4204	; 0x106c
  4037d0:	4b0d      	ldr	r3, [pc, #52]	; (403808 <hif_send+0x1b0>)
  4037d2:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4037d4:	4683      	mov	fp, r0
  4037d6:	b988      	cbnz	r0, 4037fc <hif_send+0x1a4>
  4037d8:	e00a      	b.n	4037f0 <hif_send+0x198>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  4037da:	f240 129f 	movw	r2, #415	; 0x19f
  4037de:	490e      	ldr	r1, [pc, #56]	; (403818 <hif_send+0x1c0>)
  4037e0:	480e      	ldr	r0, [pc, #56]	; (40381c <hif_send+0x1c4>)
  4037e2:	4c0f      	ldr	r4, [pc, #60]	; (403820 <hif_send+0x1c8>)
  4037e4:	47a0      	blx	r4
  4037e6:	480f      	ldr	r0, [pc, #60]	; (403824 <hif_send+0x1cc>)
  4037e8:	47a0      	blx	r4
  4037ea:	480f      	ldr	r0, [pc, #60]	; (403828 <hif_send+0x1d0>)
  4037ec:	47a0      	blx	r4
		goto ERR1;
  4037ee:	e005      	b.n	4037fc <hif_send+0x1a4>
	}
	ret = hif_chip_sleep();
  4037f0:	4b0e      	ldr	r3, [pc, #56]	; (40382c <hif_send+0x1d4>)
  4037f2:	4798      	blx	r3
  4037f4:	4683      	mov	fp, r0
  4037f6:	e001      	b.n	4037fc <hif_send+0x1a4>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
  4037f8:	f06f 0b02 	mvn.w	fp, #2
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
}
  4037fc:	4658      	mov	r0, fp
  4037fe:	b007      	add	sp, #28
  403800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403804:	00403575 	.word	0x00403575
  403808:	00404809 	.word	0x00404809
  40380c:	004047fd 	.word	0x004047fd
  403810:	00150400 	.word	0x00150400
  403814:	00404875 	.word	0x00404875
  403818:	0040e734 	.word	0x0040e734
  40381c:	0040e4b0 	.word	0x0040e4b0
  403820:	00407645 	.word	0x00407645
  403824:	0040e4f0 	.word	0x0040e4f0
  403828:	0040f6d8 	.word	0x0040f6d8
  40382c:	004035cd 	.word	0x004035cd

00403830 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  403830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403834:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  403836:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 403b34 <hif_handle_isr+0x304>
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  40383a:	4fa3      	ldr	r7, [pc, #652]	; (403ac8 <hif_handle_isr+0x298>)
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  40383c:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 403b38 <hif_handle_isr+0x308>
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  403840:	4ea2      	ldr	r6, [pc, #648]	; (403acc <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  403842:	e17b      	b.n	403b3c <hif_handle_isr+0x30c>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
  403844:	f899 3000 	ldrb.w	r3, [r9]
  403848:	3b01      	subs	r3, #1
  40384a:	b2db      	uxtb	r3, r3
  40384c:	f889 3000 	strb.w	r3, [r9]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
  403850:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  403852:	4604      	mov	r4, r0
  403854:	2800      	cmp	r0, #0
  403856:	f040 811a 	bne.w	403a8e <hif_handle_isr+0x25e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  40385a:	a903      	add	r1, sp, #12
  40385c:	f241 0070 	movw	r0, #4208	; 0x1070
  403860:	4b9b      	ldr	r3, [pc, #620]	; (403ad0 <hif_handle_isr+0x2a0>)
  403862:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  403864:	4604      	mov	r4, r0
  403866:	2800      	cmp	r0, #0
  403868:	f040 8106 	bne.w	403a78 <hif_handle_isr+0x248>
		{
			if(reg & 0x1)	/* New interrupt has been received */
  40386c:	9b03      	ldr	r3, [sp, #12]
  40386e:	f013 0f01 	tst.w	r3, #1
  403872:	f000 80f5 	beq.w	403a60 <hif_handle_isr+0x230>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
  403876:	4b97      	ldr	r3, [pc, #604]	; (403ad4 <hif_handle_isr+0x2a4>)
  403878:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
  40387a:	9903      	ldr	r1, [sp, #12]
  40387c:	f021 0101 	bic.w	r1, r1, #1
  403880:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  403882:	f241 0070 	movw	r0, #4208	; 0x1070
  403886:	4b94      	ldr	r3, [pc, #592]	; (403ad8 <hif_handle_isr+0x2a8>)
  403888:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  40388a:	4604      	mov	r4, r0
  40388c:	2800      	cmp	r0, #0
  40388e:	f040 810e 	bne.w	403aae <hif_handle_isr+0x27e>
				gu8HifSizeDone = 0;
  403892:	2200      	movs	r2, #0
  403894:	4b91      	ldr	r3, [pc, #580]	; (403adc <hif_handle_isr+0x2ac>)
  403896:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  403898:	9d03      	ldr	r5, [sp, #12]
  40389a:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  40389e:	2d00      	cmp	r5, #0
  4038a0:	f000 80d1 	beq.w	403a46 <hif_handle_isr+0x216>
					uint32 address = 0;
  4038a4:	a906      	add	r1, sp, #24
  4038a6:	f841 2d04 	str.w	r2, [r1, #-4]!
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  4038aa:	f241 0084 	movw	r0, #4228	; 0x1084
  4038ae:	4b88      	ldr	r3, [pc, #544]	; (403ad0 <hif_handle_isr+0x2a0>)
  4038b0:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  4038b2:	4604      	mov	r4, r0
  4038b4:	b168      	cbz	r0, 4038d2 <hif_handle_isr+0xa2>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  4038b6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  4038ba:	4641      	mov	r1, r8
  4038bc:	4630      	mov	r0, r6
  4038be:	4d88      	ldr	r5, [pc, #544]	; (403ae0 <hif_handle_isr+0x2b0>)
  4038c0:	47a8      	blx	r5
  4038c2:	4888      	ldr	r0, [pc, #544]	; (403ae4 <hif_handle_isr+0x2b4>)
  4038c4:	47a8      	blx	r5
  4038c6:	4888      	ldr	r0, [pc, #544]	; (403ae8 <hif_handle_isr+0x2b8>)
  4038c8:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4038ca:	2001      	movs	r0, #1
  4038cc:	4b81      	ldr	r3, [pc, #516]	; (403ad4 <hif_handle_isr+0x2a4>)
  4038ce:	4798      	blx	r3
  4038d0:	e0eb      	b.n	403aaa <hif_handle_isr+0x27a>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4038d2:	2204      	movs	r2, #4
  4038d4:	a904      	add	r1, sp, #16
  4038d6:	9805      	ldr	r0, [sp, #20]
  4038d8:	4b84      	ldr	r3, [pc, #528]	; (403aec <hif_handle_isr+0x2bc>)
  4038da:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4038dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4038e0:	b29b      	uxth	r3, r3
  4038e2:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4038e6:	4604      	mov	r4, r0
  4038e8:	b168      	cbz	r0, 403906 <hif_handle_isr+0xd6>
					{
						M2M_ERR("(hif) address bus fail\n");
  4038ea:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  4038ee:	4641      	mov	r1, r8
  4038f0:	4630      	mov	r0, r6
  4038f2:	4d7b      	ldr	r5, [pc, #492]	; (403ae0 <hif_handle_isr+0x2b0>)
  4038f4:	47a8      	blx	r5
  4038f6:	487e      	ldr	r0, [pc, #504]	; (403af0 <hif_handle_isr+0x2c0>)
  4038f8:	47a8      	blx	r5
  4038fa:	487b      	ldr	r0, [pc, #492]	; (403ae8 <hif_handle_isr+0x2b8>)
  4038fc:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4038fe:	2001      	movs	r0, #1
  403900:	4b74      	ldr	r3, [pc, #464]	; (403ad4 <hif_handle_isr+0x2a4>)
  403902:	4798      	blx	r3
  403904:	e0d1      	b.n	403aaa <hif_handle_isr+0x27a>
						goto ERR1;
					}
					if(strHif.u16Length != size)
  403906:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40390a:	b29b      	uxth	r3, r3
  40390c:	429d      	cmp	r5, r3
  40390e:	d01e      	beq.n	40394e <hif_handle_isr+0x11e>
					{
						if((size - strHif.u16Length) > 4)
  403910:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  403914:	b29b      	uxth	r3, r3
  403916:	1aeb      	subs	r3, r5, r3
  403918:	2b04      	cmp	r3, #4
  40391a:	dd18      	ble.n	40394e <hif_handle_isr+0x11e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  40391c:	f240 12df 	movw	r2, #479	; 0x1df
  403920:	4641      	mov	r1, r8
  403922:	4630      	mov	r0, r6
  403924:	4c6e      	ldr	r4, [pc, #440]	; (403ae0 <hif_handle_isr+0x2b0>)
  403926:	47a0      	blx	r4
  403928:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40392c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  403930:	f89d 1011 	ldrb.w	r1, [sp, #17]
  403934:	9100      	str	r1, [sp, #0]
  403936:	b292      	uxth	r2, r2
  403938:	4629      	mov	r1, r5
  40393a:	486e      	ldr	r0, [pc, #440]	; (403af4 <hif_handle_isr+0x2c4>)
  40393c:	47a0      	blx	r4
  40393e:	486a      	ldr	r0, [pc, #424]	; (403ae8 <hif_handle_isr+0x2b8>)
  403940:	47a0      	blx	r4
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
  403942:	2001      	movs	r0, #1
  403944:	4b63      	ldr	r3, [pc, #396]	; (403ad4 <hif_handle_isr+0x2a4>)
  403946:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  403948:	f06f 0405 	mvn.w	r4, #5
  40394c:	e0ad      	b.n	403aaa <hif_handle_isr+0x27a>
							goto ERR1;
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  40394e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  403952:	b2db      	uxtb	r3, r3
  403954:	2b01      	cmp	r3, #1
  403956:	d10d      	bne.n	403974 <hif_handle_isr+0x144>
					{
						if(pfWifiCb)
  403958:	4b67      	ldr	r3, [pc, #412]	; (403af8 <hif_handle_isr+0x2c8>)
  40395a:	681b      	ldr	r3, [r3, #0]
  40395c:	2b00      	cmp	r3, #0
  40395e:	d060      	beq.n	403a22 <hif_handle_isr+0x1f2>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  403960:	f89d 0011 	ldrb.w	r0, [sp, #17]
  403964:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  403968:	3908      	subs	r1, #8
  40396a:	9a05      	ldr	r2, [sp, #20]
  40396c:	3208      	adds	r2, #8
  40396e:	b289      	uxth	r1, r1
  403970:	4798      	blx	r3
  403972:	e056      	b.n	403a22 <hif_handle_isr+0x1f2>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  403974:	f89d 3010 	ldrb.w	r3, [sp, #16]
  403978:	b2db      	uxtb	r3, r3
  40397a:	2b02      	cmp	r3, #2
  40397c:	d10d      	bne.n	40399a <hif_handle_isr+0x16a>
					{
						if(pfIpCb)
  40397e:	4b5f      	ldr	r3, [pc, #380]	; (403afc <hif_handle_isr+0x2cc>)
  403980:	681b      	ldr	r3, [r3, #0]
  403982:	2b00      	cmp	r3, #0
  403984:	d04d      	beq.n	403a22 <hif_handle_isr+0x1f2>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  403986:	f89d 0011 	ldrb.w	r0, [sp, #17]
  40398a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40398e:	3908      	subs	r1, #8
  403990:	9a05      	ldr	r2, [sp, #20]
  403992:	3208      	adds	r2, #8
  403994:	b289      	uxth	r1, r1
  403996:	4798      	blx	r3
  403998:	e043      	b.n	403a22 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  40399a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40399e:	b2db      	uxtb	r3, r3
  4039a0:	2b04      	cmp	r3, #4
  4039a2:	d10d      	bne.n	4039c0 <hif_handle_isr+0x190>
					{
						if(pfOtaCb)
  4039a4:	4b56      	ldr	r3, [pc, #344]	; (403b00 <hif_handle_isr+0x2d0>)
  4039a6:	681b      	ldr	r3, [r3, #0]
  4039a8:	2b00      	cmp	r3, #0
  4039aa:	d03a      	beq.n	403a22 <hif_handle_isr+0x1f2>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4039ac:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4039b0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4039b4:	3908      	subs	r1, #8
  4039b6:	9a05      	ldr	r2, [sp, #20]
  4039b8:	3208      	adds	r2, #8
  4039ba:	b289      	uxth	r1, r1
  4039bc:	4798      	blx	r3
  4039be:	e030      	b.n	403a22 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4039c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4039c4:	b2db      	uxtb	r3, r3
  4039c6:	2b06      	cmp	r3, #6
  4039c8:	d10c      	bne.n	4039e4 <hif_handle_isr+0x1b4>
					{
						if(pfCryptoCb)
  4039ca:	4b4e      	ldr	r3, [pc, #312]	; (403b04 <hif_handle_isr+0x2d4>)
  4039cc:	681b      	ldr	r3, [r3, #0]
  4039ce:	b343      	cbz	r3, 403a22 <hif_handle_isr+0x1f2>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4039d0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4039d4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4039d8:	3908      	subs	r1, #8
  4039da:	9a05      	ldr	r2, [sp, #20]
  4039dc:	3208      	adds	r2, #8
  4039de:	b289      	uxth	r1, r1
  4039e0:	4798      	blx	r3
  4039e2:	e01e      	b.n	403a22 <hif_handle_isr+0x1f2>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4039e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4039e8:	b2db      	uxtb	r3, r3
  4039ea:	2b07      	cmp	r3, #7
  4039ec:	d10c      	bne.n	403a08 <hif_handle_isr+0x1d8>
					{
						if(pfSigmaCb)
  4039ee:	4b46      	ldr	r3, [pc, #280]	; (403b08 <hif_handle_isr+0x2d8>)
  4039f0:	681b      	ldr	r3, [r3, #0]
  4039f2:	b1b3      	cbz	r3, 403a22 <hif_handle_isr+0x1f2>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4039f4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4039f8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4039fc:	3908      	subs	r1, #8
  4039fe:	9a05      	ldr	r2, [sp, #20]
  403a00:	3208      	adds	r2, #8
  403a02:	b289      	uxth	r1, r1
  403a04:	4798      	blx	r3
  403a06:	e00c      	b.n	403a22 <hif_handle_isr+0x1f2>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
  403a08:	f240 2202 	movw	r2, #514	; 0x202
  403a0c:	4641      	mov	r1, r8
  403a0e:	4630      	mov	r0, r6
  403a10:	4c33      	ldr	r4, [pc, #204]	; (403ae0 <hif_handle_isr+0x2b0>)
  403a12:	47a0      	blx	r4
  403a14:	483d      	ldr	r0, [pc, #244]	; (403b0c <hif_handle_isr+0x2dc>)
  403a16:	47a0      	blx	r4
  403a18:	4833      	ldr	r0, [pc, #204]	; (403ae8 <hif_handle_isr+0x2b8>)
  403a1a:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  403a1c:	f06f 0405 	mvn.w	r4, #5
  403a20:	e043      	b.n	403aaa <hif_handle_isr+0x27a>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
  403a22:	4b2e      	ldr	r3, [pc, #184]	; (403adc <hif_handle_isr+0x2ac>)
  403a24:	781b      	ldrb	r3, [r3, #0]
  403a26:	f013 0fff 	tst.w	r3, #255	; 0xff
  403a2a:	d13b      	bne.n	403aa4 <hif_handle_isr+0x274>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
  403a2c:	f240 2209 	movw	r2, #521	; 0x209
  403a30:	4641      	mov	r1, r8
  403a32:	4630      	mov	r0, r6
  403a34:	4c2a      	ldr	r4, [pc, #168]	; (403ae0 <hif_handle_isr+0x2b0>)
  403a36:	47a0      	blx	r4
  403a38:	4835      	ldr	r0, [pc, #212]	; (403b10 <hif_handle_isr+0x2e0>)
  403a3a:	47a0      	blx	r4
  403a3c:	482a      	ldr	r0, [pc, #168]	; (403ae8 <hif_handle_isr+0x2b8>)
  403a3e:	47a0      	blx	r4
						ret = hif_set_rx_done();
  403a40:	4b34      	ldr	r3, [pc, #208]	; (403b14 <hif_handle_isr+0x2e4>)
  403a42:	4798      	blx	r3
  403a44:	e02e      	b.n	403aa4 <hif_handle_isr+0x274>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
  403a46:	f240 2211 	movw	r2, #529	; 0x211
  403a4a:	4641      	mov	r1, r8
  403a4c:	4630      	mov	r0, r6
  403a4e:	4c24      	ldr	r4, [pc, #144]	; (403ae0 <hif_handle_isr+0x2b0>)
  403a50:	47a0      	blx	r4
  403a52:	4831      	ldr	r0, [pc, #196]	; (403b18 <hif_handle_isr+0x2e8>)
  403a54:	47a0      	blx	r4
  403a56:	4824      	ldr	r0, [pc, #144]	; (403ae8 <hif_handle_isr+0x2b8>)
  403a58:	47a0      	blx	r4
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
  403a5a:	f06f 0401 	mvn.w	r4, #1
  403a5e:	e026      	b.n	403aae <hif_handle_isr+0x27e>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
  403a60:	f44f 7206 	mov.w	r2, #536	; 0x218
  403a64:	4641      	mov	r1, r8
  403a66:	4630      	mov	r0, r6
  403a68:	4c1d      	ldr	r4, [pc, #116]	; (403ae0 <hif_handle_isr+0x2b0>)
  403a6a:	47a0      	blx	r4
  403a6c:	9903      	ldr	r1, [sp, #12]
  403a6e:	482b      	ldr	r0, [pc, #172]	; (403b1c <hif_handle_isr+0x2ec>)
  403a70:	47a0      	blx	r4
  403a72:	481d      	ldr	r0, [pc, #116]	; (403ae8 <hif_handle_isr+0x2b8>)
  403a74:	47a0      	blx	r4
  403a76:	e015      	b.n	403aa4 <hif_handle_isr+0x274>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  403a78:	f240 221e 	movw	r2, #542	; 0x21e
  403a7c:	4641      	mov	r1, r8
  403a7e:	4630      	mov	r0, r6
  403a80:	4d17      	ldr	r5, [pc, #92]	; (403ae0 <hif_handle_isr+0x2b0>)
  403a82:	47a8      	blx	r5
  403a84:	4826      	ldr	r0, [pc, #152]	; (403b20 <hif_handle_isr+0x2f0>)
  403a86:	47a8      	blx	r5
  403a88:	4817      	ldr	r0, [pc, #92]	; (403ae8 <hif_handle_isr+0x2b8>)
  403a8a:	47a8      	blx	r5
  403a8c:	e00f      	b.n	403aae <hif_handle_isr+0x27e>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  403a8e:	f44f 7209 	mov.w	r2, #548	; 0x224
  403a92:	4641      	mov	r1, r8
  403a94:	4630      	mov	r0, r6
  403a96:	4d12      	ldr	r5, [pc, #72]	; (403ae0 <hif_handle_isr+0x2b0>)
  403a98:	47a8      	blx	r5
  403a9a:	4822      	ldr	r0, [pc, #136]	; (403b24 <hif_handle_isr+0x2f4>)
  403a9c:	47a8      	blx	r5
  403a9e:	4812      	ldr	r0, [pc, #72]	; (403ae8 <hif_handle_isr+0x2b8>)
  403aa0:	47a8      	blx	r5
  403aa2:	e004      	b.n	403aae <hif_handle_isr+0x27e>
		goto ERR1;
	}

	ret = hif_chip_sleep();
  403aa4:	4b20      	ldr	r3, [pc, #128]	; (403b28 <hif_handle_isr+0x2f8>)
  403aa6:	4798      	blx	r3
  403aa8:	4604      	mov	r4, r0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
  403aaa:	2c00      	cmp	r4, #0
  403aac:	d046      	beq.n	403b3c <hif_handle_isr+0x30c>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  403aae:	f240 2243 	movw	r2, #579	; 0x243
  403ab2:	491e      	ldr	r1, [pc, #120]	; (403b2c <hif_handle_isr+0x2fc>)
  403ab4:	4630      	mov	r0, r6
  403ab6:	4d0a      	ldr	r5, [pc, #40]	; (403ae0 <hif_handle_isr+0x2b0>)
  403ab8:	47a8      	blx	r5
  403aba:	4621      	mov	r1, r4
  403abc:	481c      	ldr	r0, [pc, #112]	; (403b30 <hif_handle_isr+0x300>)
  403abe:	47a8      	blx	r5
  403ac0:	4809      	ldr	r0, [pc, #36]	; (403ae8 <hif_handle_isr+0x2b8>)
  403ac2:	47a8      	blx	r5
			}
		}
  403ac4:	e6c4      	b.n	403850 <hif_handle_isr+0x20>
  403ac6:	bf00      	nop
  403ac8:	00403575 	.word	0x00403575
  403acc:	0040e4b0 	.word	0x0040e4b0
  403ad0:	004047fd 	.word	0x004047fd
  403ad4:	0040328d 	.word	0x0040328d
  403ad8:	00404809 	.word	0x00404809
  403adc:	2040095c 	.word	0x2040095c
  403ae0:	00407645 	.word	0x00407645
  403ae4:	0040e510 	.word	0x0040e510
  403ae8:	0040f6d8 	.word	0x0040f6d8
  403aec:	00404815 	.word	0x00404815
  403af0:	0040e538 	.word	0x0040e538
  403af4:	0040e550 	.word	0x0040e550
  403af8:	20400944 	.word	0x20400944
  403afc:	20400958 	.word	0x20400958
  403b00:	20400960 	.word	0x20400960
  403b04:	20400940 	.word	0x20400940
  403b08:	20400950 	.word	0x20400950
  403b0c:	0040e590 	.word	0x0040e590
  403b10:	0040e5a8 	.word	0x0040e5a8
  403b14:	00403535 	.word	0x00403535
  403b18:	0040e5cc 	.word	0x0040e5cc
  403b1c:	0040e5e0 	.word	0x0040e5e0
  403b20:	0040e5fc 	.word	0x0040e5fc
  403b24:	0040e620 	.word	0x0040e620
  403b28:	004035cd 	.word	0x004035cd
  403b2c:	0040e740 	.word	0x0040e740
  403b30:	0040e640 	.word	0x0040e640
  403b34:	20400948 	.word	0x20400948
  403b38:	0040e4dc 	.word	0x0040e4dc

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  403b3c:	f899 3000 	ldrb.w	r3, [r9]
  403b40:	f013 0fff 	tst.w	r3, #255	; 0xff
  403b44:	f47f ae7e 	bne.w	403844 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
  403b48:	2000      	movs	r0, #0
  403b4a:	b007      	add	sp, #28
  403b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00403b50 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  403b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403b54:	b083      	sub	sp, #12
  403b56:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  403b58:	2a00      	cmp	r2, #0
  403b5a:	bf18      	it	ne
  403b5c:	2900      	cmpne	r1, #0
  403b5e:	d003      	beq.n	403b68 <hif_receive+0x18>
  403b60:	4605      	mov	r5, r0
  403b62:	460f      	mov	r7, r1
  403b64:	4616      	mov	r6, r2
  403b66:	b9a0      	cbnz	r0, 403b92 <hif_receive+0x42>
	{
		if(isDone)
  403b68:	b134      	cbz	r4, 403b78 <hif_receive+0x28>
		{
			gu8HifSizeDone = 1;
  403b6a:	2201      	movs	r2, #1
  403b6c:	4b31      	ldr	r3, [pc, #196]	; (403c34 <hif_receive+0xe4>)
  403b6e:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  403b70:	4b31      	ldr	r3, [pc, #196]	; (403c38 <hif_receive+0xe8>)
  403b72:	4798      	blx	r3
  403b74:	4603      	mov	r3, r0
  403b76:	e058      	b.n	403c2a <hif_receive+0xda>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
  403b78:	f240 2269 	movw	r2, #617	; 0x269
  403b7c:	492f      	ldr	r1, [pc, #188]	; (403c3c <hif_receive+0xec>)
  403b7e:	4830      	ldr	r0, [pc, #192]	; (403c40 <hif_receive+0xf0>)
  403b80:	4c30      	ldr	r4, [pc, #192]	; (403c44 <hif_receive+0xf4>)
  403b82:	47a0      	blx	r4
  403b84:	4830      	ldr	r0, [pc, #192]	; (403c48 <hif_receive+0xf8>)
  403b86:	47a0      	blx	r4
  403b88:	4830      	ldr	r0, [pc, #192]	; (403c4c <hif_receive+0xfc>)
  403b8a:	47a0      	blx	r4
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
  403b8c:	f06f 030b 	mvn.w	r3, #11
  403b90:	e04b      	b.n	403c2a <hif_receive+0xda>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  403b92:	4669      	mov	r1, sp
  403b94:	f241 0070 	movw	r0, #4208	; 0x1070
  403b98:	4b2d      	ldr	r3, [pc, #180]	; (403c50 <hif_receive+0x100>)
  403b9a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  403b9c:	4603      	mov	r3, r0
  403b9e:	2800      	cmp	r0, #0
  403ba0:	d143      	bne.n	403c2a <hif_receive+0xda>


	size = (uint16)((reg >> 2) & 0xfff);
  403ba2:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  403ba6:	a901      	add	r1, sp, #4
  403ba8:	f241 0084 	movw	r0, #4228	; 0x1084
  403bac:	4b28      	ldr	r3, [pc, #160]	; (403c50 <hif_receive+0x100>)
  403bae:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  403bb0:	4603      	mov	r3, r0
  403bb2:	2800      	cmp	r0, #0
  403bb4:	d139      	bne.n	403c2a <hif_receive+0xda>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
  403bb6:	f3c8 088b 	ubfx	r8, r8, #2, #12
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
  403bba:	4546      	cmp	r6, r8
  403bbc:	d90e      	bls.n	403bdc <hif_receive+0x8c>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  403bbe:	f240 227a 	movw	r2, #634	; 0x27a
  403bc2:	491e      	ldr	r1, [pc, #120]	; (403c3c <hif_receive+0xec>)
  403bc4:	481e      	ldr	r0, [pc, #120]	; (403c40 <hif_receive+0xf0>)
  403bc6:	4c1f      	ldr	r4, [pc, #124]	; (403c44 <hif_receive+0xf4>)
  403bc8:	47a0      	blx	r4
  403bca:	4642      	mov	r2, r8
  403bcc:	4631      	mov	r1, r6
  403bce:	4821      	ldr	r0, [pc, #132]	; (403c54 <hif_receive+0x104>)
  403bd0:	47a0      	blx	r4
  403bd2:	481e      	ldr	r0, [pc, #120]	; (403c4c <hif_receive+0xfc>)
  403bd4:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;


	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
  403bd6:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
  403bda:	e026      	b.n	403c2a <hif_receive+0xda>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  403bdc:	9b01      	ldr	r3, [sp, #4]
  403bde:	429d      	cmp	r5, r3
  403be0:	d304      	bcc.n	403bec <hif_receive+0x9c>
  403be2:	eb05 0906 	add.w	r9, r5, r6
  403be6:	4443      	add	r3, r8
  403be8:	4599      	cmp	r9, r3
  403bea:	d90c      	bls.n	403c06 <hif_receive+0xb6>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  403bec:	f44f 7220 	mov.w	r2, #640	; 0x280
  403bf0:	4912      	ldr	r1, [pc, #72]	; (403c3c <hif_receive+0xec>)
  403bf2:	4813      	ldr	r0, [pc, #76]	; (403c40 <hif_receive+0xf0>)
  403bf4:	4c13      	ldr	r4, [pc, #76]	; (403c44 <hif_receive+0xf4>)
  403bf6:	47a0      	blx	r4
  403bf8:	4817      	ldr	r0, [pc, #92]	; (403c58 <hif_receive+0x108>)
  403bfa:	47a0      	blx	r4
  403bfc:	4813      	ldr	r0, [pc, #76]	; (403c4c <hif_receive+0xfc>)
  403bfe:	47a0      	blx	r4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
  403c00:	f06f 030b 	mvn.w	r3, #11
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
  403c04:	e011      	b.n	403c2a <hif_receive+0xda>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  403c06:	4632      	mov	r2, r6
  403c08:	4639      	mov	r1, r7
  403c0a:	4628      	mov	r0, r5
  403c0c:	4b13      	ldr	r3, [pc, #76]	; (403c5c <hif_receive+0x10c>)
  403c0e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  403c10:	4603      	mov	r3, r0
  403c12:	b950      	cbnz	r0, 403c2a <hif_receive+0xda>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  403c14:	9a01      	ldr	r2, [sp, #4]
  403c16:	4442      	add	r2, r8
  403c18:	454a      	cmp	r2, r9
  403c1a:	d000      	beq.n	403c1e <hif_receive+0xce>
  403c1c:	b12c      	cbz	r4, 403c2a <hif_receive+0xda>
	{
		gu8HifSizeDone = 1;
  403c1e:	2201      	movs	r2, #1
  403c20:	4b04      	ldr	r3, [pc, #16]	; (403c34 <hif_receive+0xe4>)
  403c22:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
  403c24:	4b04      	ldr	r3, [pc, #16]	; (403c38 <hif_receive+0xe8>)
  403c26:	4798      	blx	r3
  403c28:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  403c2a:	4618      	mov	r0, r3
  403c2c:	b003      	add	sp, #12
  403c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c32:	bf00      	nop
  403c34:	2040095c 	.word	0x2040095c
  403c38:	00403535 	.word	0x00403535
  403c3c:	0040e4e4 	.word	0x0040e4e4
  403c40:	0040e4b0 	.word	0x0040e4b0
  403c44:	00407645 	.word	0x00407645
  403c48:	0040e670 	.word	0x0040e670
  403c4c:	0040f6d8 	.word	0x0040f6d8
  403c50:	004047fd 	.word	0x004047fd
  403c54:	0040e690 	.word	0x0040e690
  403c58:	0040e6d4 	.word	0x0040e6d4
  403c5c:	00404815 	.word	0x00404815

00403c60 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  403c60:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  403c62:	1e43      	subs	r3, r0, #1
  403c64:	2b06      	cmp	r3, #6
  403c66:	d81d      	bhi.n	403ca4 <hif_register_cb+0x44>
  403c68:	e8df f003 	tbb	[pc, r3]
  403c6c:	0c100408 	.word	0x0c100408
  403c70:	141c      	.short	0x141c
  403c72:	18          	.byte	0x18
  403c73:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  403c74:	4b13      	ldr	r3, [pc, #76]	; (403cc4 <hif_register_cb+0x64>)
  403c76:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  403c78:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
  403c7a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  403c7c:	4b12      	ldr	r3, [pc, #72]	; (403cc8 <hif_register_cb+0x68>)
  403c7e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  403c80:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
  403c82:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  403c84:	4b11      	ldr	r3, [pc, #68]	; (403ccc <hif_register_cb+0x6c>)
  403c86:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  403c88:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
  403c8a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  403c8c:	4b10      	ldr	r3, [pc, #64]	; (403cd0 <hif_register_cb+0x70>)
  403c8e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  403c90:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
  403c92:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  403c94:	4b0f      	ldr	r3, [pc, #60]	; (403cd4 <hif_register_cb+0x74>)
  403c96:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  403c98:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
  403c9a:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  403c9c:	4b0e      	ldr	r3, [pc, #56]	; (403cd8 <hif_register_cb+0x78>)
  403c9e:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
  403ca0:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
			break;
  403ca2:	bd38      	pop	{r3, r4, r5, pc}
  403ca4:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  403ca6:	f240 22b9 	movw	r2, #697	; 0x2b9
  403caa:	490c      	ldr	r1, [pc, #48]	; (403cdc <hif_register_cb+0x7c>)
  403cac:	480c      	ldr	r0, [pc, #48]	; (403ce0 <hif_register_cb+0x80>)
  403cae:	4d0d      	ldr	r5, [pc, #52]	; (403ce4 <hif_register_cb+0x84>)
  403cb0:	47a8      	blx	r5
  403cb2:	4621      	mov	r1, r4
  403cb4:	480c      	ldr	r0, [pc, #48]	; (403ce8 <hif_register_cb+0x88>)
  403cb6:	47a8      	blx	r5
  403cb8:	480c      	ldr	r0, [pc, #48]	; (403cec <hif_register_cb+0x8c>)
  403cba:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  403cbc:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  403cc0:	bd38      	pop	{r3, r4, r5, pc}
  403cc2:	bf00      	nop
  403cc4:	20400958 	.word	0x20400958
  403cc8:	20400944 	.word	0x20400944
  403ccc:	20400960 	.word	0x20400960
  403cd0:	2040094c 	.word	0x2040094c
  403cd4:	20400940 	.word	0x20400940
  403cd8:	20400950 	.word	0x20400950
  403cdc:	0040e724 	.word	0x0040e724
  403ce0:	0040e4b0 	.word	0x0040e4b0
  403ce4:	00407645 	.word	0x00407645
  403ce8:	0040e718 	.word	0x0040e718
  403cec:	0040f6d8 	.word	0x0040f6d8

00403cf0 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
  403cf0:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  403cf2:	2400      	movs	r4, #0
  403cf4:	4b09      	ldr	r3, [pc, #36]	; (403d1c <hif_init+0x2c>)
  403cf6:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  403cf8:	4b09      	ldr	r3, [pc, #36]	; (403d20 <hif_init+0x30>)
  403cfa:	601c      	str	r4, [r3, #0]

	gu8ChipSleep = 0;
  403cfc:	4b09      	ldr	r3, [pc, #36]	; (403d24 <hif_init+0x34>)
  403cfe:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  403d00:	4b09      	ldr	r3, [pc, #36]	; (403d28 <hif_init+0x38>)
  403d02:	701c      	strb	r4, [r3, #0]

	gu8Interrupt = 0;
  403d04:	4b09      	ldr	r3, [pc, #36]	; (403d2c <hif_init+0x3c>)
  403d06:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  403d08:	4809      	ldr	r0, [pc, #36]	; (403d30 <hif_init+0x40>)
  403d0a:	4b0a      	ldr	r3, [pc, #40]	; (403d34 <hif_init+0x44>)
  403d0c:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  403d0e:	490a      	ldr	r1, [pc, #40]	; (403d38 <hif_init+0x48>)
  403d10:	2003      	movs	r0, #3
  403d12:	4b0a      	ldr	r3, [pc, #40]	; (403d3c <hif_init+0x4c>)
  403d14:	4798      	blx	r3

	return M2M_SUCCESS;
}
  403d16:	4620      	mov	r0, r4
  403d18:	bd10      	pop	{r4, pc}
  403d1a:	bf00      	nop
  403d1c:	20400944 	.word	0x20400944
  403d20:	20400958 	.word	0x20400958
  403d24:	20400964 	.word	0x20400964
  403d28:	20400954 	.word	0x20400954
  403d2c:	20400948 	.word	0x20400948
  403d30:	00403521 	.word	0x00403521
  403d34:	0040320d 	.word	0x0040320d
  403d38:	00403531 	.word	0x00403531
  403d3c:	00403c61 	.word	0x00403c61

00403d40 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  403d40:	b530      	push	{r4, r5, lr}
  403d42:	b09f      	sub	sp, #124	; 0x7c
  403d44:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  403d46:	282c      	cmp	r0, #44	; 0x2c
  403d48:	d111      	bne.n	403d6e <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  403d4a:	2300      	movs	r3, #0
  403d4c:	2204      	movs	r2, #4
  403d4e:	a903      	add	r1, sp, #12
  403d50:	4628      	mov	r0, r5
  403d52:	4c90      	ldr	r4, [pc, #576]	; (403f94 <m2m_wifi_cb+0x254>)
  403d54:	47a0      	blx	r4
  403d56:	2800      	cmp	r0, #0
  403d58:	f040 8119 	bne.w	403f8e <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  403d5c:	4b8e      	ldr	r3, [pc, #568]	; (403f98 <m2m_wifi_cb+0x258>)
  403d5e:	681b      	ldr	r3, [r3, #0]
  403d60:	2b00      	cmp	r3, #0
  403d62:	f000 8114 	beq.w	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  403d66:	a903      	add	r1, sp, #12
  403d68:	202c      	movs	r0, #44	; 0x2c
  403d6a:	4798      	blx	r3
  403d6c:	e10f      	b.n	403f8e <m2m_wifi_cb+0x24e>
  403d6e:	4604      	mov	r4, r0
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  403d70:	281b      	cmp	r0, #27
  403d72:	d111      	bne.n	403d98 <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  403d74:	2300      	movs	r3, #0
  403d76:	2208      	movs	r2, #8
  403d78:	a903      	add	r1, sp, #12
  403d7a:	4628      	mov	r0, r5
  403d7c:	4c85      	ldr	r4, [pc, #532]	; (403f94 <m2m_wifi_cb+0x254>)
  403d7e:	47a0      	blx	r4
  403d80:	2800      	cmp	r0, #0
  403d82:	f040 8104 	bne.w	403f8e <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  403d86:	4b84      	ldr	r3, [pc, #528]	; (403f98 <m2m_wifi_cb+0x258>)
  403d88:	681b      	ldr	r3, [r3, #0]
  403d8a:	2b00      	cmp	r3, #0
  403d8c:	f000 80ff 	beq.w	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  403d90:	a903      	add	r1, sp, #12
  403d92:	201b      	movs	r0, #27
  403d94:	4798      	blx	r3
  403d96:	e0fa      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  403d98:	2806      	cmp	r0, #6
  403d9a:	d111      	bne.n	403dc0 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  403d9c:	2301      	movs	r3, #1
  403d9e:	2230      	movs	r2, #48	; 0x30
  403da0:	a903      	add	r1, sp, #12
  403da2:	4628      	mov	r0, r5
  403da4:	4c7b      	ldr	r4, [pc, #492]	; (403f94 <m2m_wifi_cb+0x254>)
  403da6:	47a0      	blx	r4
  403da8:	2800      	cmp	r0, #0
  403daa:	f040 80f0 	bne.w	403f8e <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  403dae:	4b7a      	ldr	r3, [pc, #488]	; (403f98 <m2m_wifi_cb+0x258>)
  403db0:	681b      	ldr	r3, [r3, #0]
  403db2:	2b00      	cmp	r3, #0
  403db4:	f000 80eb 	beq.w	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  403db8:	a903      	add	r1, sp, #12
  403dba:	2006      	movs	r0, #6
  403dbc:	4798      	blx	r3
  403dbe:	e0e6      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  403dc0:	280e      	cmp	r0, #14
  403dc2:	f000 80e4 	beq.w	403f8e <m2m_wifi_cb+0x24e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  403dc6:	2832      	cmp	r0, #50	; 0x32
  403dc8:	d111      	bne.n	403dee <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  403dca:	2300      	movs	r3, #0
  403dcc:	2210      	movs	r2, #16
  403dce:	a903      	add	r1, sp, #12
  403dd0:	4628      	mov	r0, r5
  403dd2:	4c70      	ldr	r4, [pc, #448]	; (403f94 <m2m_wifi_cb+0x254>)
  403dd4:	47a0      	blx	r4
  403dd6:	2800      	cmp	r0, #0
  403dd8:	f040 80d9 	bne.w	403f8e <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  403ddc:	4b6e      	ldr	r3, [pc, #440]	; (403f98 <m2m_wifi_cb+0x258>)
  403dde:	681b      	ldr	r3, [r3, #0]
  403de0:	2b00      	cmp	r3, #0
  403de2:	f000 80d4 	beq.w	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  403de6:	a903      	add	r1, sp, #12
  403de8:	2032      	movs	r0, #50	; 0x32
  403dea:	4798      	blx	r3
  403dec:	e0cf      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  403dee:	282f      	cmp	r0, #47	; 0x2f
  403df0:	d116      	bne.n	403e20 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  403df2:	2264      	movs	r2, #100	; 0x64
  403df4:	2100      	movs	r1, #0
  403df6:	a803      	add	r0, sp, #12
  403df8:	4b68      	ldr	r3, [pc, #416]	; (403f9c <m2m_wifi_cb+0x25c>)
  403dfa:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  403dfc:	2300      	movs	r3, #0
  403dfe:	2264      	movs	r2, #100	; 0x64
  403e00:	a903      	add	r1, sp, #12
  403e02:	4628      	mov	r0, r5
  403e04:	4c63      	ldr	r4, [pc, #396]	; (403f94 <m2m_wifi_cb+0x254>)
  403e06:	47a0      	blx	r4
  403e08:	2800      	cmp	r0, #0
  403e0a:	f040 80c0 	bne.w	403f8e <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  403e0e:	4b62      	ldr	r3, [pc, #392]	; (403f98 <m2m_wifi_cb+0x258>)
  403e10:	681b      	ldr	r3, [r3, #0]
  403e12:	2b00      	cmp	r3, #0
  403e14:	f000 80bb 	beq.w	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  403e18:	a903      	add	r1, sp, #12
  403e1a:	202f      	movs	r0, #47	; 0x2f
  403e1c:	4798      	blx	r3
  403e1e:	e0b6      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  403e20:	2834      	cmp	r0, #52	; 0x34
  403e22:	d120      	bne.n	403e66 <m2m_wifi_cb+0x126>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  403e24:	2300      	movs	r3, #0
  403e26:	2204      	movs	r2, #4
  403e28:	a903      	add	r1, sp, #12
  403e2a:	4628      	mov	r0, r5
  403e2c:	4c59      	ldr	r4, [pc, #356]	; (403f94 <m2m_wifi_cb+0x254>)
  403e2e:	47a0      	blx	r4
  403e30:	2800      	cmp	r0, #0
  403e32:	f040 80ac 	bne.w	403f8e <m2m_wifi_cb+0x24e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  403e36:	485a      	ldr	r0, [pc, #360]	; (403fa0 <m2m_wifi_cb+0x260>)
  403e38:	4c5a      	ldr	r4, [pc, #360]	; (403fa4 <m2m_wifi_cb+0x264>)
  403e3a:	47a0      	blx	r4
  403e3c:	9903      	ldr	r1, [sp, #12]
  403e3e:	0e0b      	lsrs	r3, r1, #24
  403e40:	9300      	str	r3, [sp, #0]
  403e42:	f3c1 4307 	ubfx	r3, r1, #16, #8
  403e46:	f3c1 2207 	ubfx	r2, r1, #8, #8
  403e4a:	b2c9      	uxtb	r1, r1
  403e4c:	4856      	ldr	r0, [pc, #344]	; (403fa8 <m2m_wifi_cb+0x268>)
  403e4e:	47a0      	blx	r4
  403e50:	4856      	ldr	r0, [pc, #344]	; (403fac <m2m_wifi_cb+0x26c>)
  403e52:	47a0      	blx	r4
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
  403e54:	4b50      	ldr	r3, [pc, #320]	; (403f98 <m2m_wifi_cb+0x258>)
  403e56:	681b      	ldr	r3, [r3, #0]
  403e58:	2b00      	cmp	r3, #0
  403e5a:	f000 8098 	beq.w	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  403e5e:	2100      	movs	r1, #0
  403e60:	2034      	movs	r0, #52	; 0x34
  403e62:	4798      	blx	r3
  403e64:	e093      	b.n	403f8e <m2m_wifi_cb+0x24e>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  403e66:	2811      	cmp	r0, #17
  403e68:	d116      	bne.n	403e98 <m2m_wifi_cb+0x158>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
  403e6a:	2300      	movs	r3, #0
  403e6c:	4a50      	ldr	r2, [pc, #320]	; (403fb0 <m2m_wifi_cb+0x270>)
  403e6e:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  403e70:	2204      	movs	r2, #4
  403e72:	a903      	add	r1, sp, #12
  403e74:	4628      	mov	r0, r5
  403e76:	4c47      	ldr	r4, [pc, #284]	; (403f94 <m2m_wifi_cb+0x254>)
  403e78:	47a0      	blx	r4
  403e7a:	2800      	cmp	r0, #0
  403e7c:	f040 8087 	bne.w	403f8e <m2m_wifi_cb+0x24e>
		{
			gu8ChNum = strState.u8NumofCh;
  403e80:	f89d 200c 	ldrb.w	r2, [sp, #12]
  403e84:	4b4b      	ldr	r3, [pc, #300]	; (403fb4 <m2m_wifi_cb+0x274>)
  403e86:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  403e88:	4b43      	ldr	r3, [pc, #268]	; (403f98 <m2m_wifi_cb+0x258>)
  403e8a:	681b      	ldr	r3, [r3, #0]
  403e8c:	2b00      	cmp	r3, #0
  403e8e:	d07e      	beq.n	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  403e90:	a903      	add	r1, sp, #12
  403e92:	2011      	movs	r0, #17
  403e94:	4798      	blx	r3
  403e96:	e07a      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  403e98:	2813      	cmp	r0, #19
  403e9a:	d10f      	bne.n	403ebc <m2m_wifi_cb+0x17c>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  403e9c:	2300      	movs	r3, #0
  403e9e:	222c      	movs	r2, #44	; 0x2c
  403ea0:	a903      	add	r1, sp, #12
  403ea2:	4628      	mov	r0, r5
  403ea4:	4c3b      	ldr	r4, [pc, #236]	; (403f94 <m2m_wifi_cb+0x254>)
  403ea6:	47a0      	blx	r4
  403ea8:	2800      	cmp	r0, #0
  403eaa:	d170      	bne.n	403f8e <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  403eac:	4b3a      	ldr	r3, [pc, #232]	; (403f98 <m2m_wifi_cb+0x258>)
  403eae:	681b      	ldr	r3, [r3, #0]
  403eb0:	2b00      	cmp	r3, #0
  403eb2:	d06c      	beq.n	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  403eb4:	a903      	add	r1, sp, #12
  403eb6:	2013      	movs	r0, #19
  403eb8:	4798      	blx	r3
  403eba:	e068      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  403ebc:	2804      	cmp	r0, #4
  403ebe:	d10f      	bne.n	403ee0 <m2m_wifi_cb+0x1a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  403ec0:	2300      	movs	r3, #0
  403ec2:	2204      	movs	r2, #4
  403ec4:	a91c      	add	r1, sp, #112	; 0x70
  403ec6:	4628      	mov	r0, r5
  403ec8:	4c32      	ldr	r4, [pc, #200]	; (403f94 <m2m_wifi_cb+0x254>)
  403eca:	47a0      	blx	r4
  403ecc:	2800      	cmp	r0, #0
  403ece:	d15e      	bne.n	403f8e <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  403ed0:	4b31      	ldr	r3, [pc, #196]	; (403f98 <m2m_wifi_cb+0x258>)
  403ed2:	681b      	ldr	r3, [r3, #0]
  403ed4:	2b00      	cmp	r3, #0
  403ed6:	d05a      	beq.n	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  403ed8:	a91c      	add	r1, sp, #112	; 0x70
  403eda:	2004      	movs	r0, #4
  403edc:	4798      	blx	r3
  403ede:	e056      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  403ee0:	2865      	cmp	r0, #101	; 0x65
  403ee2:	d10f      	bne.n	403f04 <m2m_wifi_cb+0x1c4>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  403ee4:	2300      	movs	r3, #0
  403ee6:	2204      	movs	r2, #4
  403ee8:	a91c      	add	r1, sp, #112	; 0x70
  403eea:	4628      	mov	r0, r5
  403eec:	4c29      	ldr	r4, [pc, #164]	; (403f94 <m2m_wifi_cb+0x254>)
  403eee:	47a0      	blx	r4
  403ef0:	2800      	cmp	r0, #0
  403ef2:	d14c      	bne.n	403f8e <m2m_wifi_cb+0x24e>
		{
			if (gpfAppWifiCb)
  403ef4:	4b28      	ldr	r3, [pc, #160]	; (403f98 <m2m_wifi_cb+0x258>)
  403ef6:	681b      	ldr	r3, [r3, #0]
  403ef8:	2b00      	cmp	r3, #0
  403efa:	d048      	beq.n	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  403efc:	a91c      	add	r1, sp, #112	; 0x70
  403efe:	2065      	movs	r0, #101	; 0x65
  403f00:	4798      	blx	r3
  403f02:	e044      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  403f04:	2809      	cmp	r0, #9
  403f06:	d10f      	bne.n	403f28 <m2m_wifi_cb+0x1e8>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  403f08:	2301      	movs	r3, #1
  403f0a:	2264      	movs	r2, #100	; 0x64
  403f0c:	a903      	add	r1, sp, #12
  403f0e:	4628      	mov	r0, r5
  403f10:	4c20      	ldr	r4, [pc, #128]	; (403f94 <m2m_wifi_cb+0x254>)
  403f12:	47a0      	blx	r4
  403f14:	2800      	cmp	r0, #0
  403f16:	d13a      	bne.n	403f8e <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  403f18:	4b1f      	ldr	r3, [pc, #124]	; (403f98 <m2m_wifi_cb+0x258>)
  403f1a:	681b      	ldr	r3, [r3, #0]
  403f1c:	2b00      	cmp	r3, #0
  403f1e:	d036      	beq.n	403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  403f20:	a903      	add	r1, sp, #12
  403f22:	2009      	movs	r0, #9
  403f24:	4798      	blx	r3
  403f26:	e032      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  403f28:	282a      	cmp	r0, #42	; 0x2a
  403f2a:	d10d      	bne.n	403f48 <m2m_wifi_cb+0x208>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  403f2c:	2301      	movs	r3, #1
  403f2e:	2204      	movs	r2, #4
  403f30:	a903      	add	r1, sp, #12
  403f32:	4628      	mov	r0, r5
  403f34:	4c17      	ldr	r4, [pc, #92]	; (403f94 <m2m_wifi_cb+0x254>)
  403f36:	47a0      	blx	r4
  403f38:	bb48      	cbnz	r0, 403f8e <m2m_wifi_cb+0x24e>
		{
			if(gpfAppWifiCb)
  403f3a:	4b17      	ldr	r3, [pc, #92]	; (403f98 <m2m_wifi_cb+0x258>)
  403f3c:	681b      	ldr	r3, [r3, #0]
  403f3e:	b333      	cbz	r3, 403f8e <m2m_wifi_cb+0x24e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  403f40:	a903      	add	r1, sp, #12
  403f42:	202a      	movs	r0, #42	; 0x2a
  403f44:	4798      	blx	r3
  403f46:	e022      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  403f48:	2820      	cmp	r0, #32
  403f4a:	d115      	bne.n	403f78 <m2m_wifi_cb+0x238>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  403f4c:	2300      	movs	r3, #0
  403f4e:	2208      	movs	r2, #8
  403f50:	a903      	add	r1, sp, #12
  403f52:	4628      	mov	r0, r5
  403f54:	4c0f      	ldr	r4, [pc, #60]	; (403f94 <m2m_wifi_cb+0x254>)
  403f56:	47a0      	blx	r4
  403f58:	b9c8      	cbnz	r0, 403f8e <m2m_wifi_cb+0x24e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  403f5a:	2301      	movs	r3, #1
  403f5c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  403f60:	9903      	ldr	r1, [sp, #12]
  403f62:	f105 0008 	add.w	r0, r5, #8
  403f66:	47a0      	blx	r4
  403f68:	b988      	cbnz	r0, 403f8e <m2m_wifi_cb+0x24e>
			{
				if(gpfAppWifiCb)
  403f6a:	4b0b      	ldr	r3, [pc, #44]	; (403f98 <m2m_wifi_cb+0x258>)
  403f6c:	681b      	ldr	r3, [r3, #0]
  403f6e:	b173      	cbz	r3, 403f8e <m2m_wifi_cb+0x24e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  403f70:	a903      	add	r1, sp, #12
  403f72:	2020      	movs	r0, #32
  403f74:	4798      	blx	r3
  403f76:	e00a      	b.n	403f8e <m2m_wifi_cb+0x24e>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  403f78:	f44f 7295 	mov.w	r2, #298	; 0x12a
  403f7c:	490e      	ldr	r1, [pc, #56]	; (403fb8 <m2m_wifi_cb+0x278>)
  403f7e:	480f      	ldr	r0, [pc, #60]	; (403fbc <m2m_wifi_cb+0x27c>)
  403f80:	4d08      	ldr	r5, [pc, #32]	; (403fa4 <m2m_wifi_cb+0x264>)
  403f82:	47a8      	blx	r5
  403f84:	4621      	mov	r1, r4
  403f86:	480e      	ldr	r0, [pc, #56]	; (403fc0 <m2m_wifi_cb+0x280>)
  403f88:	47a8      	blx	r5
  403f8a:	4808      	ldr	r0, [pc, #32]	; (403fac <m2m_wifi_cb+0x26c>)
  403f8c:	47a8      	blx	r5
	}
}
  403f8e:	b01f      	add	sp, #124	; 0x7c
  403f90:	bd30      	pop	{r4, r5, pc}
  403f92:	bf00      	nop
  403f94:	00403b51 	.word	0x00403b51
  403f98:	20400968 	.word	0x20400968
  403f9c:	004034f5 	.word	0x004034f5
  403fa0:	0040e770 	.word	0x0040e770
  403fa4:	00407645 	.word	0x00407645
  403fa8:	0040e77c 	.word	0x0040e77c
  403fac:	0040f6d8 	.word	0x0040f6d8
  403fb0:	2040096c 	.word	0x2040096c
  403fb4:	2040096d 	.word	0x2040096d
  403fb8:	0040e764 	.word	0x0040e764
  403fbc:	0040e4b0 	.word	0x0040e4b0
  403fc0:	0040e79c 	.word	0x0040e79c

00403fc4 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  403fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  403fc6:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  403fc8:	2301      	movs	r3, #1
  403fca:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  403fce:	2800      	cmp	r0, #0
  403fd0:	d04e      	beq.n	404070 <m2m_wifi_init+0xac>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  403fd2:	6802      	ldr	r2, [r0, #0]
  403fd4:	4b29      	ldr	r3, [pc, #164]	; (40407c <m2m_wifi_init+0xb8>)
  403fd6:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  403fd8:	2200      	movs	r2, #0
  403fda:	4b29      	ldr	r3, [pc, #164]	; (404080 <m2m_wifi_init+0xbc>)
  403fdc:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  403fde:	f10d 0007 	add.w	r0, sp, #7
  403fe2:	4b28      	ldr	r3, [pc, #160]	; (404084 <m2m_wifi_init+0xc0>)
  403fe4:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  403fe6:	4604      	mov	r4, r0
  403fe8:	2800      	cmp	r0, #0
  403fea:	d143      	bne.n	404074 <m2m_wifi_init+0xb0>
	/* Initialize host interface module */
	ret = hif_init(NULL);
  403fec:	4b26      	ldr	r3, [pc, #152]	; (404088 <m2m_wifi_init+0xc4>)
  403fee:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  403ff0:	4604      	mov	r4, r0
  403ff2:	2800      	cmp	r0, #0
  403ff4:	d138      	bne.n	404068 <m2m_wifi_init+0xa4>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  403ff6:	4925      	ldr	r1, [pc, #148]	; (40408c <m2m_wifi_init+0xc8>)
  403ff8:	2001      	movs	r0, #1
  403ffa:	4b25      	ldr	r3, [pc, #148]	; (404090 <m2m_wifi_init+0xcc>)
  403ffc:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
  403ffe:	a802      	add	r0, sp, #8
  404000:	4b24      	ldr	r3, [pc, #144]	; (404094 <m2m_wifi_init+0xd0>)
  404002:	4798      	blx	r3
  404004:	4604      	mov	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  404006:	4f24      	ldr	r7, [pc, #144]	; (404098 <m2m_wifi_init+0xd4>)
  404008:	4638      	mov	r0, r7
  40400a:	4d24      	ldr	r5, [pc, #144]	; (40409c <m2m_wifi_init+0xd8>)
  40400c:	47a8      	blx	r5
  40400e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  404012:	f89d 200d 	ldrb.w	r2, [sp, #13]
  404016:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40401a:	4821      	ldr	r0, [pc, #132]	; (4040a0 <m2m_wifi_init+0xdc>)
  40401c:	47a8      	blx	r5
  40401e:	4e21      	ldr	r6, [pc, #132]	; (4040a4 <m2m_wifi_init+0xe0>)
  404020:	4630      	mov	r0, r6
  404022:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  404024:	4638      	mov	r0, r7
  404026:	47a8      	blx	r5
  404028:	f89d 3011 	ldrb.w	r3, [sp, #17]
  40402c:	f89d 2010 	ldrb.w	r2, [sp, #16]
  404030:	f89d 100f 	ldrb.w	r1, [sp, #15]
  404034:	481c      	ldr	r0, [pc, #112]	; (4040a8 <m2m_wifi_init+0xe4>)
  404036:	47a8      	blx	r5
  404038:	4630      	mov	r0, r6
  40403a:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  40403c:	4638      	mov	r0, r7
  40403e:	47a8      	blx	r5
  404040:	2300      	movs	r3, #0
  404042:	2203      	movs	r2, #3
  404044:	2113      	movs	r1, #19
  404046:	4819      	ldr	r0, [pc, #100]	; (4040ac <m2m_wifi_init+0xe8>)
  404048:	47a8      	blx	r5
  40404a:	4630      	mov	r0, r6
  40404c:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  40404e:	f114 0f0d 	cmn.w	r4, #13
  404052:	d10f      	bne.n	404074 <m2m_wifi_init+0xb0>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
  404054:	f240 12d5 	movw	r2, #469	; 0x1d5
  404058:	4915      	ldr	r1, [pc, #84]	; (4040b0 <m2m_wifi_init+0xec>)
  40405a:	4816      	ldr	r0, [pc, #88]	; (4040b4 <m2m_wifi_init+0xf0>)
  40405c:	47a8      	blx	r5
  40405e:	4816      	ldr	r0, [pc, #88]	; (4040b8 <m2m_wifi_init+0xf4>)
  404060:	47a8      	blx	r5
  404062:	4630      	mov	r0, r6
  404064:	47a8      	blx	r5
  404066:	e005      	b.n	404074 <m2m_wifi_init+0xb0>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
  404068:	2000      	movs	r0, #0
  40406a:	4b14      	ldr	r3, [pc, #80]	; (4040bc <m2m_wifi_init+0xf8>)
  40406c:	4798      	blx	r3
  40406e:	e001      	b.n	404074 <m2m_wifi_init+0xb0>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
  404070:	f06f 040b 	mvn.w	r4, #11

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  404074:	4620      	mov	r0, r4
  404076:	b00b      	add	sp, #44	; 0x2c
  404078:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40407a:	bf00      	nop
  40407c:	20400968 	.word	0x20400968
  404080:	2040096c 	.word	0x2040096c
  404084:	00404981 	.word	0x00404981
  404088:	00403cf1 	.word	0x00403cf1
  40408c:	00403d41 	.word	0x00403d41
  404090:	00403c61 	.word	0x00403c61
  404094:	004048d5 	.word	0x004048d5
  404098:	0040e770 	.word	0x0040e770
  40409c:	00407645 	.word	0x00407645
  4040a0:	0040e854 	.word	0x0040e854
  4040a4:	0040f6d8 	.word	0x0040f6d8
  4040a8:	0040e870 	.word	0x0040e870
  4040ac:	0040e88c 	.word	0x0040e88c
  4040b0:	0040ea98 	.word	0x0040ea98
  4040b4:	0040e4b0 	.word	0x0040e4b0
  4040b8:	0040e8a8 	.word	0x0040e8a8
  4040bc:	00404a49 	.word	0x00404a49

004040c0 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  4040c0:	b508      	push	{r3, lr}
	return hif_handle_isr();
  4040c2:	4b01      	ldr	r3, [pc, #4]	; (4040c8 <m2m_wifi_handle_events+0x8>)
  4040c4:	4798      	blx	r3
}
  4040c6:	bd08      	pop	{r3, pc}
  4040c8:	00403831 	.word	0x00403831

004040cc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  4040cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4040d0:	b0a0      	sub	sp, #128	; 0x80
  4040d2:	4680      	mov	r8, r0
  4040d4:	460d      	mov	r5, r1
  4040d6:	4614      	mov	r4, r2
  4040d8:	461e      	mov	r6, r3
  4040da:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  4040de:	2a01      	cmp	r2, #1
  4040e0:	d045      	beq.n	40416e <m2m_wifi_connect_sc+0xa2>
	{
		if(pvAuthInfo == NULL)
  4040e2:	b963      	cbnz	r3, 4040fe <m2m_wifi_connect_sc+0x32>
		{
			M2M_ERR("Key is not valid\n");
  4040e4:	f240 2203 	movw	r2, #515	; 0x203
  4040e8:	497a      	ldr	r1, [pc, #488]	; (4042d4 <m2m_wifi_connect_sc+0x208>)
  4040ea:	487b      	ldr	r0, [pc, #492]	; (4042d8 <m2m_wifi_connect_sc+0x20c>)
  4040ec:	4c7b      	ldr	r4, [pc, #492]	; (4042dc <m2m_wifi_connect_sc+0x210>)
  4040ee:	47a0      	blx	r4
  4040f0:	487b      	ldr	r0, [pc, #492]	; (4042e0 <m2m_wifi_connect_sc+0x214>)
  4040f2:	47a0      	blx	r4
  4040f4:	487b      	ldr	r0, [pc, #492]	; (4042e4 <m2m_wifi_connect_sc+0x218>)
  4040f6:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4040f8:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4040fc:	e0e7      	b.n	4042ce <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4040fe:	2a02      	cmp	r2, #2
  404100:	d135      	bne.n	40416e <m2m_wifi_connect_sc+0xa2>
  404102:	4618      	mov	r0, r3
  404104:	4b78      	ldr	r3, [pc, #480]	; (4042e8 <m2m_wifi_connect_sc+0x21c>)
  404106:	4798      	blx	r3
  404108:	2840      	cmp	r0, #64	; 0x40
  40410a:	d130      	bne.n	40416e <m2m_wifi_connect_sc+0xa2>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  40410c:	7833      	ldrb	r3, [r6, #0]
  40410e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404112:	b2d2      	uxtb	r2, r2
  404114:	2a36      	cmp	r2, #54	; 0x36
  404116:	d81b      	bhi.n	404150 <m2m_wifi_connect_sc+0x84>
  404118:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  40411c:	b2d2      	uxtb	r2, r2
  40411e:	2a06      	cmp	r2, #6
  404120:	d916      	bls.n	404150 <m2m_wifi_connect_sc+0x84>
  404122:	3b47      	subs	r3, #71	; 0x47
  404124:	b2db      	uxtb	r3, r3
  404126:	2b19      	cmp	r3, #25
  404128:	d912      	bls.n	404150 <m2m_wifi_connect_sc+0x84>
  40412a:	4631      	mov	r1, r6
  40412c:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  404130:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  404134:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  404138:	b2d2      	uxtb	r2, r2
  40413a:	2a06      	cmp	r2, #6
  40413c:	d908      	bls.n	404150 <m2m_wifi_connect_sc+0x84>
  40413e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404142:	b2d2      	uxtb	r2, r2
  404144:	2a36      	cmp	r2, #54	; 0x36
  404146:	d803      	bhi.n	404150 <m2m_wifi_connect_sc+0x84>
  404148:	3b47      	subs	r3, #71	; 0x47
  40414a:	b2db      	uxtb	r3, r3
  40414c:	2b19      	cmp	r3, #25
  40414e:	d80c      	bhi.n	40416a <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
  404150:	f240 220f 	movw	r2, #527	; 0x20f
  404154:	495f      	ldr	r1, [pc, #380]	; (4042d4 <m2m_wifi_connect_sc+0x208>)
  404156:	4860      	ldr	r0, [pc, #384]	; (4042d8 <m2m_wifi_connect_sc+0x20c>)
  404158:	4c60      	ldr	r4, [pc, #384]	; (4042dc <m2m_wifi_connect_sc+0x210>)
  40415a:	47a0      	blx	r4
  40415c:	4863      	ldr	r0, [pc, #396]	; (4042ec <m2m_wifi_connect_sc+0x220>)
  40415e:	47a0      	blx	r4
  404160:	4860      	ldr	r0, [pc, #384]	; (4042e4 <m2m_wifi_connect_sc+0x218>)
  404162:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  404164:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  404168:	e0b1      	b.n	4042ce <m2m_wifi_connect_sc+0x202>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
  40416a:	4288      	cmp	r0, r1
  40416c:	d1e0      	bne.n	404130 <m2m_wifi_connect_sc+0x64>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  40416e:	1e6b      	subs	r3, r5, #1
  404170:	b2db      	uxtb	r3, r3
  404172:	2b1f      	cmp	r3, #31
  404174:	d90c      	bls.n	404190 <m2m_wifi_connect_sc+0xc4>
	{
		M2M_ERR("SSID LEN INVALID\n");
  404176:	f240 2219 	movw	r2, #537	; 0x219
  40417a:	4956      	ldr	r1, [pc, #344]	; (4042d4 <m2m_wifi_connect_sc+0x208>)
  40417c:	4856      	ldr	r0, [pc, #344]	; (4042d8 <m2m_wifi_connect_sc+0x20c>)
  40417e:	4c57      	ldr	r4, [pc, #348]	; (4042dc <m2m_wifi_connect_sc+0x210>)
  404180:	47a0      	blx	r4
  404182:	485b      	ldr	r0, [pc, #364]	; (4042f0 <m2m_wifi_connect_sc+0x224>)
  404184:	47a0      	blx	r4
  404186:	4857      	ldr	r0, [pc, #348]	; (4042e4 <m2m_wifi_connect_sc+0x218>)
  404188:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  40418a:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40418e:	e09e      	b.n	4042ce <m2m_wifi_connect_sc+0x202>
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  404190:	2fff      	cmp	r7, #255	; 0xff
  404192:	d00e      	beq.n	4041b2 <m2m_wifi_connect_sc+0xe6>
  404194:	2f0d      	cmp	r7, #13
  404196:	d90c      	bls.n	4041b2 <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("CH INVALID\n");
  404198:	f240 2222 	movw	r2, #546	; 0x222
  40419c:	494d      	ldr	r1, [pc, #308]	; (4042d4 <m2m_wifi_connect_sc+0x208>)
  40419e:	484e      	ldr	r0, [pc, #312]	; (4042d8 <m2m_wifi_connect_sc+0x20c>)
  4041a0:	4c4e      	ldr	r4, [pc, #312]	; (4042dc <m2m_wifi_connect_sc+0x210>)
  4041a2:	47a0      	blx	r4
  4041a4:	4853      	ldr	r0, [pc, #332]	; (4042f4 <m2m_wifi_connect_sc+0x228>)
  4041a6:	47a0      	blx	r4
  4041a8:	484e      	ldr	r0, [pc, #312]	; (4042e4 <m2m_wifi_connect_sc+0x218>)
  4041aa:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4041ac:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4041b0:	e08d      	b.n	4042ce <m2m_wifi_connect_sc+0x202>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  4041b2:	462a      	mov	r2, r5
  4041b4:	4641      	mov	r1, r8
  4041b6:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  4041ba:	4b4f      	ldr	r3, [pc, #316]	; (4042f8 <m2m_wifi_connect_sc+0x22c>)
  4041bc:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  4041be:	ab20      	add	r3, sp, #128	; 0x80
  4041c0:	441d      	add	r5, r3
  4041c2:	2300      	movs	r3, #0
  4041c4:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  4041c8:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  4041cc:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4041d0:	3300      	adds	r3, #0
  4041d2:	bf18      	it	ne
  4041d4:	2301      	movne	r3, #1
  4041d6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  4041da:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  4041de:	2c03      	cmp	r4, #3
  4041e0:	d138      	bne.n	404254 <m2m_wifi_connect_sc+0x188>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  4041e2:	7833      	ldrb	r3, [r6, #0]
  4041e4:	3b01      	subs	r3, #1
  4041e6:	b2db      	uxtb	r3, r3
  4041e8:	f88d 3014 	strb.w	r3, [sp, #20]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  4041ec:	2b03      	cmp	r3, #3
  4041ee:	d90e      	bls.n	40420e <m2m_wifi_connect_sc+0x142>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4041f0:	f240 2239 	movw	r2, #569	; 0x239
  4041f4:	4937      	ldr	r1, [pc, #220]	; (4042d4 <m2m_wifi_connect_sc+0x208>)
  4041f6:	4838      	ldr	r0, [pc, #224]	; (4042d8 <m2m_wifi_connect_sc+0x20c>)
  4041f8:	4c38      	ldr	r4, [pc, #224]	; (4042dc <m2m_wifi_connect_sc+0x210>)
  4041fa:	47a0      	blx	r4
  4041fc:	f89d 1014 	ldrb.w	r1, [sp, #20]
  404200:	483e      	ldr	r0, [pc, #248]	; (4042fc <m2m_wifi_connect_sc+0x230>)
  404202:	47a0      	blx	r4
  404204:	4837      	ldr	r0, [pc, #220]	; (4042e4 <m2m_wifi_connect_sc+0x218>)
  404206:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  404208:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40420c:	e05f      	b.n	4042ce <m2m_wifi_connect_sc+0x202>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  40420e:	7872      	ldrb	r2, [r6, #1]
  404210:	1e53      	subs	r3, r2, #1
  404212:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  404216:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  40421a:	2b0b      	cmp	r3, #11
  40421c:	d00e      	beq.n	40423c <m2m_wifi_connect_sc+0x170>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  40421e:	f44f 7210 	mov.w	r2, #576	; 0x240
  404222:	492c      	ldr	r1, [pc, #176]	; (4042d4 <m2m_wifi_connect_sc+0x208>)
  404224:	482c      	ldr	r0, [pc, #176]	; (4042d8 <m2m_wifi_connect_sc+0x20c>)
  404226:	4c2d      	ldr	r4, [pc, #180]	; (4042dc <m2m_wifi_connect_sc+0x210>)
  404228:	47a0      	blx	r4
  40422a:	f89d 1015 	ldrb.w	r1, [sp, #21]
  40422e:	4834      	ldr	r0, [pc, #208]	; (404300 <m2m_wifi_connect_sc+0x234>)
  404230:	47a0      	blx	r4
  404232:	482c      	ldr	r0, [pc, #176]	; (4042e4 <m2m_wifi_connect_sc+0x218>)
  404234:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  404236:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40423a:	e048      	b.n	4042ce <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  40423c:	1cb1      	adds	r1, r6, #2
  40423e:	f10d 0016 	add.w	r0, sp, #22
  404242:	4b2d      	ldr	r3, [pc, #180]	; (4042f8 <m2m_wifi_connect_sc+0x22c>)
  404244:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  404246:	7873      	ldrb	r3, [r6, #1]
  404248:	aa20      	add	r2, sp, #128	; 0x80
  40424a:	4413      	add	r3, r2
  40424c:	2200      	movs	r2, #0
  40424e:	f803 2c6a 	strb.w	r2, [r3, #-106]
  404252:	e032      	b.n	4042ba <m2m_wifi_connect_sc+0x1ee>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  404254:	2c02      	cmp	r4, #2
  404256:	d119      	bne.n	40428c <m2m_wifi_connect_sc+0x1c0>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  404258:	4630      	mov	r0, r6
  40425a:	4b23      	ldr	r3, [pc, #140]	; (4042e8 <m2m_wifi_connect_sc+0x21c>)
  40425c:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  40425e:	1e43      	subs	r3, r0, #1
  404260:	b29b      	uxth	r3, r3
  404262:	2b3f      	cmp	r3, #63	; 0x3f
  404264:	d90c      	bls.n	404280 <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("Incorrect PSK key length\n");
  404266:	f240 224f 	movw	r2, #591	; 0x24f
  40426a:	491a      	ldr	r1, [pc, #104]	; (4042d4 <m2m_wifi_connect_sc+0x208>)
  40426c:	481a      	ldr	r0, [pc, #104]	; (4042d8 <m2m_wifi_connect_sc+0x20c>)
  40426e:	4c1b      	ldr	r4, [pc, #108]	; (4042dc <m2m_wifi_connect_sc+0x210>)
  404270:	47a0      	blx	r4
  404272:	4824      	ldr	r0, [pc, #144]	; (404304 <m2m_wifi_connect_sc+0x238>)
  404274:	47a0      	blx	r4
  404276:	481b      	ldr	r0, [pc, #108]	; (4042e4 <m2m_wifi_connect_sc+0x218>)
  404278:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40427a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40427e:	e026      	b.n	4042ce <m2m_wifi_connect_sc+0x202>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  404280:	1c42      	adds	r2, r0, #1
  404282:	4631      	mov	r1, r6
  404284:	a805      	add	r0, sp, #20
  404286:	4b1c      	ldr	r3, [pc, #112]	; (4042f8 <m2m_wifi_connect_sc+0x22c>)
  404288:	4798      	blx	r3
  40428a:	e016      	b.n	4042ba <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  40428c:	2c04      	cmp	r4, #4
  40428e:	d105      	bne.n	40429c <m2m_wifi_connect_sc+0x1d0>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  404290:	223e      	movs	r2, #62	; 0x3e
  404292:	4631      	mov	r1, r6
  404294:	a805      	add	r0, sp, #20
  404296:	4b18      	ldr	r3, [pc, #96]	; (4042f8 <m2m_wifi_connect_sc+0x22c>)
  404298:	4798      	blx	r3
  40429a:	e00e      	b.n	4042ba <m2m_wifi_connect_sc+0x1ee>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  40429c:	2c01      	cmp	r4, #1
  40429e:	d00c      	beq.n	4042ba <m2m_wifi_connect_sc+0x1ee>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
  4042a0:	f240 225f 	movw	r2, #607	; 0x25f
  4042a4:	490b      	ldr	r1, [pc, #44]	; (4042d4 <m2m_wifi_connect_sc+0x208>)
  4042a6:	480c      	ldr	r0, [pc, #48]	; (4042d8 <m2m_wifi_connect_sc+0x20c>)
  4042a8:	4c0c      	ldr	r4, [pc, #48]	; (4042dc <m2m_wifi_connect_sc+0x210>)
  4042aa:	47a0      	blx	r4
  4042ac:	4816      	ldr	r0, [pc, #88]	; (404308 <m2m_wifi_connect_sc+0x23c>)
  4042ae:	47a0      	blx	r4
  4042b0:	480c      	ldr	r0, [pc, #48]	; (4042e4 <m2m_wifi_connect_sc+0x218>)
  4042b2:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4042b4:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4042b8:	e009      	b.n	4042ce <m2m_wifi_connect_sc+0x202>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4042ba:	2300      	movs	r3, #0
  4042bc:	9302      	str	r3, [sp, #8]
  4042be:	9301      	str	r3, [sp, #4]
  4042c0:	9300      	str	r3, [sp, #0]
  4042c2:	236c      	movs	r3, #108	; 0x6c
  4042c4:	aa05      	add	r2, sp, #20
  4042c6:	2128      	movs	r1, #40	; 0x28
  4042c8:	2001      	movs	r0, #1
  4042ca:	4c10      	ldr	r4, [pc, #64]	; (40430c <m2m_wifi_connect_sc+0x240>)
  4042cc:	47a0      	blx	r4

ERR1:
	return ret;
}
  4042ce:	b020      	add	sp, #128	; 0x80
  4042d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4042d4:	0040e750 	.word	0x0040e750
  4042d8:	0040e4b0 	.word	0x0040e4b0
  4042dc:	00407645 	.word	0x00407645
  4042e0:	0040e8c4 	.word	0x0040e8c4
  4042e4:	0040f6d8 	.word	0x0040f6d8
  4042e8:	00403505 	.word	0x00403505
  4042ec:	0040e8d8 	.word	0x0040e8d8
  4042f0:	0040e8e8 	.word	0x0040e8e8
  4042f4:	0040e8fc 	.word	0x0040e8fc
  4042f8:	004034e1 	.word	0x004034e1
  4042fc:	0040e908 	.word	0x0040e908
  404300:	0040e924 	.word	0x0040e924
  404304:	0040e940 	.word	0x0040e940
  404308:	0040e95c 	.word	0x0040e95c
  40430c:	00403659 	.word	0x00403659

00404310 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
  404310:	b510      	push	{r4, lr}
  404312:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  404314:	2400      	movs	r4, #0
  404316:	9401      	str	r4, [sp, #4]
  404318:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  40431c:	9400      	str	r4, [sp, #0]
  40431e:	4c02      	ldr	r4, [pc, #8]	; (404328 <m2m_wifi_connect+0x18>)
  404320:	47a0      	blx	r4
}
  404322:	b002      	add	sp, #8
  404324:	bd10      	pop	{r4, pc}
  404326:	bf00      	nop
  404328:	004040cd 	.word	0x004040cd

0040432c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  40432c:	2000      	movs	r0, #0
  40432e:	4770      	bx	lr

00404330 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  404330:	b5f0      	push	{r4, r5, r6, r7, lr}
  404332:	b083      	sub	sp, #12
  404334:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  404336:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  40433a:	4e0a      	ldr	r6, [pc, #40]	; (404364 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  40433c:	4f0a      	ldr	r7, [pc, #40]	; (404368 <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40433e:	4621      	mov	r1, r4
  404340:	4628      	mov	r0, r5
  404342:	47b0      	blx	r6
		if(val32 != 0) {		
  404344:	b154      	cbz	r4, 40435c <chip_apply_conf+0x2c>
			uint32 reg = 0;
  404346:	a902      	add	r1, sp, #8
  404348:	2300      	movs	r3, #0
  40434a:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  40434e:	4628      	mov	r0, r5
  404350:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  404352:	2800      	cmp	r0, #0
  404354:	d1f3      	bne.n	40433e <chip_apply_conf+0xe>
				if(reg == val32)
  404356:	9b01      	ldr	r3, [sp, #4]
  404358:	429c      	cmp	r4, r3
  40435a:	d1f0      	bne.n	40433e <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  40435c:	2000      	movs	r0, #0
  40435e:	b003      	add	sp, #12
  404360:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404362:	bf00      	nop
  404364:	00404809 	.word	0x00404809
  404368:	004047fd 	.word	0x004047fd

0040436c <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  40436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404370:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  404372:	2001      	movs	r0, #1
  404374:	4b3d      	ldr	r3, [pc, #244]	; (40446c <nm_clkless_wake+0x100>)
  404376:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  404378:	a901      	add	r1, sp, #4
  40437a:	2001      	movs	r0, #1
  40437c:	4b3c      	ldr	r3, [pc, #240]	; (404470 <nm_clkless_wake+0x104>)
  40437e:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  404380:	4682      	mov	sl, r0
  404382:	b148      	cbz	r0, 404398 <nm_clkless_wake+0x2c>
		M2M_ERR("Bus error (1). Wake up failed\n");
  404384:	2272      	movs	r2, #114	; 0x72
  404386:	493b      	ldr	r1, [pc, #236]	; (404474 <nm_clkless_wake+0x108>)
  404388:	483b      	ldr	r0, [pc, #236]	; (404478 <nm_clkless_wake+0x10c>)
  40438a:	4c3c      	ldr	r4, [pc, #240]	; (40447c <nm_clkless_wake+0x110>)
  40438c:	47a0      	blx	r4
  40438e:	483c      	ldr	r0, [pc, #240]	; (404480 <nm_clkless_wake+0x114>)
  404390:	47a0      	blx	r4
  404392:	483c      	ldr	r0, [pc, #240]	; (404484 <nm_clkless_wake+0x118>)
  404394:	47a0      	blx	r4
		goto _WAKE_EXIT;
  404396:	e064      	b.n	404462 <nm_clkless_wake+0xf6>
  404398:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40439a:	f04f 0801 	mov.w	r8, #1
  40439e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 404498 <nm_clkless_wake+0x12c>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4043a2:	4d32      	ldr	r5, [pc, #200]	; (40446c <nm_clkless_wake+0x100>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4043a4:	4f38      	ldr	r7, [pc, #224]	; (404488 <nm_clkless_wake+0x11c>)
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4043a6:	9901      	ldr	r1, [sp, #4]
  4043a8:	f041 0102 	orr.w	r1, r1, #2
  4043ac:	4640      	mov	r0, r8
  4043ae:	47c8      	blx	r9
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4043b0:	4640      	mov	r0, r8
  4043b2:	47a8      	blx	r5
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4043b4:	4669      	mov	r1, sp
  4043b6:	4b35      	ldr	r3, [pc, #212]	; (40448c <nm_clkless_wake+0x120>)
  4043b8:	6818      	ldr	r0, [r3, #0]
  4043ba:	4b2d      	ldr	r3, [pc, #180]	; (404470 <nm_clkless_wake+0x104>)
  4043bc:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4043be:	b918      	cbnz	r0, 4043c8 <nm_clkless_wake+0x5c>
  4043c0:	9b00      	ldr	r3, [sp, #0]
  4043c2:	b10b      	cbz	r3, 4043c8 <nm_clkless_wake+0x5c>
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4043c4:	4e31      	ldr	r6, [pc, #196]	; (40448c <nm_clkless_wake+0x120>)
  4043c6:	e037      	b.n	404438 <nm_clkless_wake+0xcc>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
  4043c8:	4e30      	ldr	r6, [pc, #192]	; (40448c <nm_clkless_wake+0x120>)
  4043ca:	230e      	movs	r3, #14
  4043cc:	6033      	str	r3, [r6, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
  4043ce:	4640      	mov	r0, r8
  4043d0:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4043d2:	4669      	mov	r1, sp
  4043d4:	6830      	ldr	r0, [r6, #0]
  4043d6:	4b26      	ldr	r3, [pc, #152]	; (404470 <nm_clkless_wake+0x104>)
  4043d8:	4798      	blx	r3
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4043da:	b910      	cbnz	r0, 4043e2 <nm_clkless_wake+0x76>
  4043dc:	9b00      	ldr	r3, [sp, #0]
  4043de:	2b00      	cmp	r3, #0
  4043e0:	d1f0      	bne.n	4043c4 <nm_clkless_wake+0x58>
				 
				clk_status_reg_adr = 0x13;
  4043e2:	4e2a      	ldr	r6, [pc, #168]	; (40448c <nm_clkless_wake+0x120>)
  4043e4:	2313      	movs	r3, #19
  4043e6:	6033      	str	r3, [r6, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
  4043e8:	4640      	mov	r0, r8
  4043ea:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4043ec:	4669      	mov	r1, sp
  4043ee:	6830      	ldr	r0, [r6, #0]
  4043f0:	4b1f      	ldr	r3, [pc, #124]	; (404470 <nm_clkless_wake+0x104>)
  4043f2:	4798      	blx	r3
			
				if(ret != M2M_SUCCESS) {
  4043f4:	4606      	mov	r6, r0
  4043f6:	2800      	cmp	r0, #0
  4043f8:	d0e4      	beq.n	4043c4 <nm_clkless_wake+0x58>
					M2M_ERR("Bus error (2). Wake up failed\n");
  4043fa:	2296      	movs	r2, #150	; 0x96
  4043fc:	491d      	ldr	r1, [pc, #116]	; (404474 <nm_clkless_wake+0x108>)
  4043fe:	481e      	ldr	r0, [pc, #120]	; (404478 <nm_clkless_wake+0x10c>)
  404400:	4c1e      	ldr	r4, [pc, #120]	; (40447c <nm_clkless_wake+0x110>)
  404402:	47a0      	blx	r4
  404404:	4822      	ldr	r0, [pc, #136]	; (404490 <nm_clkless_wake+0x124>)
  404406:	47a0      	blx	r4
  404408:	481e      	ldr	r0, [pc, #120]	; (404484 <nm_clkless_wake+0x118>)
  40440a:	47a0      	blx	r4
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
				 
				clk_status_reg_adr = 0x13;
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40440c:	46b2      	mov	sl, r6
			
				if(ret != M2M_SUCCESS) {
					M2M_ERR("Bus error (2). Wake up failed\n");
					goto _WAKE_EXIT;
  40440e:	e028      	b.n	404462 <nm_clkless_wake+0xf6>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
  404410:	2002      	movs	r0, #2
  404412:	47a8      	blx	r5

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  404414:	4669      	mov	r1, sp
  404416:	6830      	ldr	r0, [r6, #0]
  404418:	4b15      	ldr	r3, [pc, #84]	; (404470 <nm_clkless_wake+0x104>)
  40441a:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
  40441c:	9b00      	ldr	r3, [sp, #0]
  40441e:	f013 0f04 	tst.w	r3, #4
  404422:	d109      	bne.n	404438 <nm_clkless_wake+0xcc>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
  404424:	22aa      	movs	r2, #170	; 0xaa
  404426:	4913      	ldr	r1, [pc, #76]	; (404474 <nm_clkless_wake+0x108>)
  404428:	4813      	ldr	r0, [pc, #76]	; (404478 <nm_clkless_wake+0x10c>)
  40442a:	f8df b050 	ldr.w	fp, [pc, #80]	; 40447c <nm_clkless_wake+0x110>
  40442e:	47d8      	blx	fp
  404430:	4818      	ldr	r0, [pc, #96]	; (404494 <nm_clkless_wake+0x128>)
  404432:	47d8      	blx	fp
  404434:	4813      	ldr	r0, [pc, #76]	; (404484 <nm_clkless_wake+0x118>)
  404436:	47d8      	blx	fp
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  404438:	9b00      	ldr	r3, [sp, #0]
  40443a:	f013 0f04 	tst.w	r3, #4
  40443e:	d110      	bne.n	404462 <nm_clkless_wake+0xf6>
  404440:	3401      	adds	r4, #1
  404442:	fba7 2304 	umull	r2, r3, r7, r4
  404446:	085b      	lsrs	r3, r3, #1
  404448:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40444c:	429c      	cmp	r4, r3
  40444e:	d0df      	beq.n	404410 <nm_clkless_wake+0xa4>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
  404450:	9901      	ldr	r1, [sp, #4]
  404452:	f041 0102 	orr.w	r1, r1, #2
  404456:	4640      	mov	r0, r8
  404458:	47c8      	blx	r9
		}
	} while((clk_status_reg & 0x4) == 0);
  40445a:	9b00      	ldr	r3, [sp, #0]
  40445c:	f013 0f04 	tst.w	r3, #4
  404460:	d0a1      	beq.n	4043a6 <nm_clkless_wake+0x3a>

_WAKE_EXIT:
	return ret;
}
  404462:	4650      	mov	r0, sl
  404464:	b003      	add	sp, #12
  404466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40446a:	bf00      	nop
  40446c:	00403145 	.word	0x00403145
  404470:	004047fd 	.word	0x004047fd
  404474:	0040eab4 	.word	0x0040eab4
  404478:	0040e4b0 	.word	0x0040e4b0
  40447c:	00407645 	.word	0x00407645
  404480:	0040eac4 	.word	0x0040eac4
  404484:	0040f6d8 	.word	0x0040f6d8
  404488:	aaaaaaab 	.word	0xaaaaaaab
  40448c:	20400034 	.word	0x20400034
  404490:	0040eae4 	.word	0x0040eae4
  404494:	0040eb04 	.word	0x0040eb04
  404498:	00404809 	.word	0x00404809

0040449c <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  40449c:	b500      	push	{lr}
  40449e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4044a0:	a901      	add	r1, sp, #4
  4044a2:	f241 4008 	movw	r0, #5128	; 0x1408
  4044a6:	4b15      	ldr	r3, [pc, #84]	; (4044fc <enable_interrupts+0x60>)
  4044a8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4044aa:	b9e0      	cbnz	r0, 4044e6 <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  4044ac:	9901      	ldr	r1, [sp, #4]
  4044ae:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4044b2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  4044b4:	f241 4008 	movw	r0, #5128	; 0x1408
  4044b8:	4b11      	ldr	r3, [pc, #68]	; (404500 <enable_interrupts+0x64>)
  4044ba:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4044bc:	b9b0      	cbnz	r0, 4044ec <enable_interrupts+0x50>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  4044be:	a901      	add	r1, sp, #4
  4044c0:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4044c4:	4b0d      	ldr	r3, [pc, #52]	; (4044fc <enable_interrupts+0x60>)
  4044c6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4044c8:	b998      	cbnz	r0, 4044f2 <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  4044ca:	9901      	ldr	r1, [sp, #4]
  4044cc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4044d0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  4044d2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  4044d6:	4b0a      	ldr	r3, [pc, #40]	; (404500 <enable_interrupts+0x64>)
  4044d8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4044da:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
  4044dc:	bf14      	ite	ne
  4044de:	f06f 0005 	mvnne.w	r0, #5
  4044e2:	2000      	moveq	r0, #0
  4044e4:	e007      	b.n	4044f6 <enable_interrupts+0x5a>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4044e6:	f06f 0005 	mvn.w	r0, #5
  4044ea:	e004      	b.n	4044f6 <enable_interrupts+0x5a>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4044ec:	f06f 0005 	mvn.w	r0, #5
  4044f0:	e001      	b.n	4044f6 <enable_interrupts+0x5a>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
  4044f2:	f06f 0005 	mvn.w	r0, #5
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
  4044f6:	b003      	add	sp, #12
  4044f8:	f85d fb04 	ldr.w	pc, [sp], #4
  4044fc:	004047fd 	.word	0x004047fd
  404500:	00404809 	.word	0x00404809

00404504 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  404504:	b510      	push	{r4, lr}
  404506:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  404508:	4b24      	ldr	r3, [pc, #144]	; (40459c <nmi_get_chipid+0x98>)
  40450a:	681c      	ldr	r4, [r3, #0]
  40450c:	2c00      	cmp	r4, #0
  40450e:	d140      	bne.n	404592 <nmi_get_chipid+0x8e>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  404510:	4619      	mov	r1, r3
  404512:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  404516:	4b22      	ldr	r3, [pc, #136]	; (4045a0 <nmi_get_chipid+0x9c>)
  404518:	4798      	blx	r3
  40451a:	b118      	cbz	r0, 404524 <nmi_get_chipid+0x20>
			chipid = 0;
  40451c:	2200      	movs	r2, #0
  40451e:	4b1f      	ldr	r3, [pc, #124]	; (40459c <nmi_get_chipid+0x98>)
  404520:	601a      	str	r2, [r3, #0]
			return 0;
  404522:	e038      	b.n	404596 <nmi_get_chipid+0x92>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  404524:	a901      	add	r1, sp, #4
  404526:	f241 30f4 	movw	r0, #5108	; 0x13f4
  40452a:	4b1d      	ldr	r3, [pc, #116]	; (4045a0 <nmi_get_chipid+0x9c>)
  40452c:	4798      	blx	r3
  40452e:	b118      	cbz	r0, 404538 <nmi_get_chipid+0x34>
			chipid = 0;
  404530:	2200      	movs	r2, #0
  404532:	4b1a      	ldr	r3, [pc, #104]	; (40459c <nmi_get_chipid+0x98>)
  404534:	601a      	str	r2, [r3, #0]
			return 0;
  404536:	e02e      	b.n	404596 <nmi_get_chipid+0x92>
		}

		if (chipid == 0x1002a0)  {
  404538:	4b18      	ldr	r3, [pc, #96]	; (40459c <nmi_get_chipid+0x98>)
  40453a:	681b      	ldr	r3, [r3, #0]
  40453c:	4a19      	ldr	r2, [pc, #100]	; (4045a4 <nmi_get_chipid+0xa0>)
  40453e:	4293      	cmp	r3, r2
  404540:	d106      	bne.n	404550 <nmi_get_chipid+0x4c>
			if (rfrevid == 0x1) { /* 1002A0 */
  404542:	9b01      	ldr	r3, [sp, #4]
  404544:	2b01      	cmp	r3, #1
  404546:	d01d      	beq.n	404584 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
  404548:	3201      	adds	r2, #1
  40454a:	4b14      	ldr	r3, [pc, #80]	; (40459c <nmi_get_chipid+0x98>)
  40454c:	601a      	str	r2, [r3, #0]
  40454e:	e019      	b.n	404584 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
  404550:	4a15      	ldr	r2, [pc, #84]	; (4045a8 <nmi_get_chipid+0xa4>)
  404552:	4293      	cmp	r3, r2
  404554:	d109      	bne.n	40456a <nmi_get_chipid+0x66>
			if(rfrevid == 3) { /* 1002B0 */
  404556:	9b01      	ldr	r3, [sp, #4]
  404558:	2b03      	cmp	r3, #3
  40455a:	d013      	beq.n	404584 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
  40455c:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  40455e:	bf0c      	ite	eq
  404560:	3201      	addeq	r2, #1
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
  404562:	4a12      	ldrne	r2, [pc, #72]	; (4045ac <nmi_get_chipid+0xa8>)
  404564:	4b0d      	ldr	r3, [pc, #52]	; (40459c <nmi_get_chipid+0x98>)
  404566:	601a      	str	r2, [r3, #0]
  404568:	e00c      	b.n	404584 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1000F0) { 
  40456a:	4a11      	ldr	r2, [pc, #68]	; (4045b0 <nmi_get_chipid+0xac>)
  40456c:	4293      	cmp	r3, r2
  40456e:	d109      	bne.n	404584 <nmi_get_chipid+0x80>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  404570:	490a      	ldr	r1, [pc, #40]	; (40459c <nmi_get_chipid+0x98>)
  404572:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  404576:	4b0a      	ldr	r3, [pc, #40]	; (4045a0 <nmi_get_chipid+0x9c>)
  404578:	4798      	blx	r3
  40457a:	b118      	cbz	r0, 404584 <nmi_get_chipid+0x80>
			chipid = 0;
  40457c:	2200      	movs	r2, #0
  40457e:	4b07      	ldr	r3, [pc, #28]	; (40459c <nmi_get_chipid+0x98>)
  404580:	601a      	str	r2, [r3, #0]
			return 0;
  404582:	e008      	b.n	404596 <nmi_get_chipid+0x92>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
  404584:	4a05      	ldr	r2, [pc, #20]	; (40459c <nmi_get_chipid+0x98>)
  404586:	6813      	ldr	r3, [r2, #0]
  404588:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40458c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  404590:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
  404592:	4b02      	ldr	r3, [pc, #8]	; (40459c <nmi_get_chipid+0x98>)
  404594:	681c      	ldr	r4, [r3, #0]
}
  404596:	4620      	mov	r0, r4
  404598:	b002      	add	sp, #8
  40459a:	bd10      	pop	{r4, pc}
  40459c:	20400970 	.word	0x20400970
  4045a0:	004047fd 	.word	0x004047fd
  4045a4:	001002a0 	.word	0x001002a0
  4045a8:	001002b0 	.word	0x001002b0
  4045ac:	001002b2 	.word	0x001002b2
  4045b0:	001000f0 	.word	0x001000f0

004045b4 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  4045b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4045b8:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4045ba:	f241 0514 	movw	r5, #4116	; 0x1014
  4045be:	4c28      	ldr	r4, [pc, #160]	; (404660 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4045c0:	4e28      	ldr	r6, [pc, #160]	; (404664 <wait_for_bootrom+0xb0>)
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  4045c2:	4628      	mov	r0, r5
  4045c4:	47a0      	blx	r4
		if (reg & 0x80000000) {
  4045c6:	2800      	cmp	r0, #0
  4045c8:	db02      	blt.n	4045d0 <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  4045ca:	2001      	movs	r0, #1
  4045cc:	47b0      	blx	r6
	}
  4045ce:	e7f8      	b.n	4045c2 <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  4045d0:	4825      	ldr	r0, [pc, #148]	; (404668 <wait_for_bootrom+0xb4>)
  4045d2:	4b23      	ldr	r3, [pc, #140]	; (404660 <wait_for_bootrom+0xac>)
  4045d4:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  4045d6:	f010 0f01 	tst.w	r0, #1
  4045da:	d110      	bne.n	4045fe <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  4045dc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 404664 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  4045e0:	4e1f      	ldr	r6, [pc, #124]	; (404660 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4045e2:	4d22      	ldr	r5, [pc, #136]	; (40466c <wait_for_bootrom+0xb8>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  4045e4:	2001      	movs	r0, #1
  4045e6:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  4045e8:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4045ec:	47b0      	blx	r6
  4045ee:	4604      	mov	r4, r0

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4045f0:	462a      	mov	r2, r5
  4045f2:	4601      	mov	r1, r0
  4045f4:	481e      	ldr	r0, [pc, #120]	; (404670 <wait_for_bootrom+0xbc>)
  4045f6:	4b1f      	ldr	r3, [pc, #124]	; (404674 <wait_for_bootrom+0xc0>)
  4045f8:	4798      	blx	r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
  4045fa:	42ac      	cmp	r4, r5
  4045fc:	d1f2      	bne.n	4045e4 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4045fe:	2f02      	cmp	r7, #2
  404600:	d10a      	bne.n	404618 <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  404602:	491d      	ldr	r1, [pc, #116]	; (404678 <wait_for_bootrom+0xc4>)
  404604:	481d      	ldr	r0, [pc, #116]	; (40467c <wait_for_bootrom+0xc8>)
  404606:	4c1e      	ldr	r4, [pc, #120]	; (404680 <wait_for_bootrom+0xcc>)
  404608:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  40460a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40460e:	f241 008c 	movw	r0, #4236	; 0x108c
  404612:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  404614:	2400      	movs	r4, #0
  404616:	e00f      	b.n	404638 <wait_for_bootrom+0x84>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  404618:	2f03      	cmp	r7, #3
  40461a:	d109      	bne.n	404630 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  40461c:	4916      	ldr	r1, [pc, #88]	; (404678 <wait_for_bootrom+0xc4>)
  40461e:	4817      	ldr	r0, [pc, #92]	; (40467c <wait_for_bootrom+0xc8>)
  404620:	4c17      	ldr	r4, [pc, #92]	; (404680 <wait_for_bootrom+0xcc>)
  404622:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  404624:	2100      	movs	r1, #0
  404626:	f241 008c 	movw	r0, #4236	; 0x108c
  40462a:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
  40462c:	2400      	movs	r4, #0
  40462e:	e003      	b.n	404638 <wait_for_bootrom+0x84>
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  404630:	2f04      	cmp	r7, #4
  404632:	bf14      	ite	ne
  404634:	2400      	movne	r4, #0
  404636:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  404638:	4b12      	ldr	r3, [pc, #72]	; (404684 <wait_for_bootrom+0xd0>)
  40463a:	4798      	blx	r3
  40463c:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404640:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  404644:	bf0c      	ite	eq
  404646:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  40464a:	4620      	movne	r0, r4
  40464c:	4b0e      	ldr	r3, [pc, #56]	; (404688 <wait_for_bootrom+0xd4>)
  40464e:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  404650:	490e      	ldr	r1, [pc, #56]	; (40468c <wait_for_bootrom+0xd8>)
  404652:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  404656:	4b0a      	ldr	r3, [pc, #40]	; (404680 <wait_for_bootrom+0xcc>)
  404658:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  40465a:	2000      	movs	r0, #0
  40465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404660:	004047f1 	.word	0x004047f1
  404664:	00403145 	.word	0x00403145
  404668:	000207bc 	.word	0x000207bc
  40466c:	10add09e 	.word	0x10add09e
  404670:	0040eb50 	.word	0x0040eb50
  404674:	00407645 	.word	0x00407645
  404678:	3c1cd57d 	.word	0x3c1cd57d
  40467c:	000207ac 	.word	0x000207ac
  404680:	00404809 	.word	0x00404809
  404684:	00404505 	.word	0x00404505
  404688:	00404331 	.word	0x00404331
  40468c:	ef522f61 	.word	0xef522f61

00404690 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  404690:	b5f0      	push	{r4, r5, r6, r7, lr}
  404692:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  404694:	f241 038c 	movw	r3, #4236	; 0x108c
  404698:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  40469a:	4b18      	ldr	r3, [pc, #96]	; (4046fc <wait_for_firmware_start+0x6c>)
  40469c:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  40469e:	3802      	subs	r0, #2
  4046a0:	b2c0      	uxtb	r0, r0
  4046a2:	2801      	cmp	r0, #1
  4046a4:	d810      	bhi.n	4046c8 <wait_for_firmware_start+0x38>
		regAddress = NMI_REV_REG;
  4046a6:	4b16      	ldr	r3, [pc, #88]	; (404700 <wait_for_firmware_start+0x70>)
  4046a8:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  4046aa:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  4046ae:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  4046b2:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  4046b6:	9300      	str	r3, [sp, #0]
  4046b8:	e006      	b.n	4046c8 <wait_for_firmware_start+0x38>
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4046ba:	4638      	mov	r0, r7
  4046bc:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4046be:	9801      	ldr	r0, [sp, #4]
  4046c0:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  4046c2:	3c01      	subs	r4, #1
  4046c4:	d106      	bne.n	4046d4 <wait_for_firmware_start+0x44>
  4046c6:	e013      	b.n	4046f0 <wait_for_firmware_start+0x60>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
  4046c8:	f04f 34ff 	mov.w	r4, #4294967295
  4046cc:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4046ce:	2702      	movs	r7, #2
  4046d0:	4e0c      	ldr	r6, [pc, #48]	; (404704 <wait_for_firmware_start+0x74>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4046d2:	4d0d      	ldr	r5, [pc, #52]	; (404708 <wait_for_firmware_start+0x78>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
  4046d4:	9b00      	ldr	r3, [sp, #0]
  4046d6:	4298      	cmp	r0, r3
  4046d8:	d1ef      	bne.n	4046ba <wait_for_firmware_start+0x2a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  4046da:	9a00      	ldr	r2, [sp, #0]
  4046dc:	4b07      	ldr	r3, [pc, #28]	; (4046fc <wait_for_firmware_start+0x6c>)
  4046de:	429a      	cmp	r2, r3
  4046e0:	d109      	bne.n	4046f6 <wait_for_firmware_start+0x66>
	{
		nm_write_reg(NMI_STATE_REG, 0);
  4046e2:	2100      	movs	r1, #0
  4046e4:	f241 008c 	movw	r0, #4236	; 0x108c
  4046e8:	4b08      	ldr	r3, [pc, #32]	; (40470c <wait_for_firmware_start+0x7c>)
  4046ea:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  4046ec:	2000      	movs	r0, #0
  4046ee:	e003      	b.n	4046f8 <wait_for_firmware_start+0x68>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  4046f0:	f06f 0004 	mvn.w	r0, #4
  4046f4:	e000      	b.n	4046f8 <wait_for_firmware_start+0x68>
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
  4046f6:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  4046f8:	b003      	add	sp, #12
  4046fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4046fc:	02532636 	.word	0x02532636
  404700:	000207ac 	.word	0x000207ac
  404704:	00403145 	.word	0x00403145
  404708:	004047f1 	.word	0x004047f1
  40470c:	00404809 	.word	0x00404809

00404710 <chip_deinit>:

sint8 chip_deinit(void)
{
  404710:	b5f0      	push	{r4, r5, r6, r7, lr}
  404712:	b083      	sub	sp, #12
	uint32 reg = 0;
  404714:	a902      	add	r1, sp, #8
  404716:	2300      	movs	r3, #0
  404718:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40471c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  404720:	4b24      	ldr	r3, [pc, #144]	; (4047b4 <chip_deinit+0xa4>)
  404722:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  404724:	b148      	cbz	r0, 40473a <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
  404726:	f240 2231 	movw	r2, #561	; 0x231
  40472a:	4923      	ldr	r1, [pc, #140]	; (4047b8 <chip_deinit+0xa8>)
  40472c:	4823      	ldr	r0, [pc, #140]	; (4047bc <chip_deinit+0xac>)
  40472e:	4c24      	ldr	r4, [pc, #144]	; (4047c0 <chip_deinit+0xb0>)
  404730:	47a0      	blx	r4
  404732:	4824      	ldr	r0, [pc, #144]	; (4047c4 <chip_deinit+0xb4>)
  404734:	47a0      	blx	r4
  404736:	4824      	ldr	r0, [pc, #144]	; (4047c8 <chip_deinit+0xb8>)
  404738:	47a0      	blx	r4
	}
	reg &= ~(1 << 10);
  40473a:	9901      	ldr	r1, [sp, #4]
  40473c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  404740:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  404742:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  404746:	4b21      	ldr	r3, [pc, #132]	; (4047cc <chip_deinit+0xbc>)
  404748:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  40474a:	4605      	mov	r5, r0
  40474c:	b158      	cbz	r0, 404766 <chip_deinit+0x56>
		M2M_ERR("Error while writing reg\n");
  40474e:	f240 2237 	movw	r2, #567	; 0x237
  404752:	4919      	ldr	r1, [pc, #100]	; (4047b8 <chip_deinit+0xa8>)
  404754:	4819      	ldr	r0, [pc, #100]	; (4047bc <chip_deinit+0xac>)
  404756:	4c1a      	ldr	r4, [pc, #104]	; (4047c0 <chip_deinit+0xb0>)
  404758:	47a0      	blx	r4
  40475a:	481d      	ldr	r0, [pc, #116]	; (4047d0 <chip_deinit+0xc0>)
  40475c:	47a0      	blx	r4
  40475e:	481a      	ldr	r0, [pc, #104]	; (4047c8 <chip_deinit+0xb8>)
  404760:	47a0      	blx	r4
		return ret;
  404762:	4628      	mov	r0, r5
  404764:	e024      	b.n	4047b0 <chip_deinit+0xa0>
  404766:	240a      	movs	r4, #10
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  404768:	4e12      	ldr	r6, [pc, #72]	; (4047b4 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40476a:	4f18      	ldr	r7, [pc, #96]	; (4047cc <chip_deinit+0xbc>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40476c:	a901      	add	r1, sp, #4
  40476e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  404772:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  404774:	4605      	mov	r5, r0
  404776:	b158      	cbz	r0, 404790 <chip_deinit+0x80>
			M2M_ERR("Error while reading reg\n");
  404778:	f240 223e 	movw	r2, #574	; 0x23e
  40477c:	490e      	ldr	r1, [pc, #56]	; (4047b8 <chip_deinit+0xa8>)
  40477e:	480f      	ldr	r0, [pc, #60]	; (4047bc <chip_deinit+0xac>)
  404780:	4c0f      	ldr	r4, [pc, #60]	; (4047c0 <chip_deinit+0xb0>)
  404782:	47a0      	blx	r4
  404784:	4813      	ldr	r0, [pc, #76]	; (4047d4 <chip_deinit+0xc4>)
  404786:	47a0      	blx	r4
  404788:	480f      	ldr	r0, [pc, #60]	; (4047c8 <chip_deinit+0xb8>)
  40478a:	47a0      	blx	r4
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40478c:	4628      	mov	r0, r5
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
  40478e:	e00f      	b.n	4047b0 <chip_deinit+0xa0>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
  404790:	9901      	ldr	r1, [sp, #4]
  404792:	f411 6f80 	tst.w	r1, #1024	; 0x400
  404796:	d00a      	beq.n	4047ae <chip_deinit+0x9e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
  404798:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  40479c:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40479e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4047a2:	47b8      	blx	r7
  4047a4:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4047a6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4047aa:	d1df      	bne.n	40476c <chip_deinit+0x5c>
  4047ac:	e000      	b.n	4047b0 <chip_deinit+0xa0>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4047ae:	2000      	movs	r0, #0
		}

	} while (timeout);

	return ret;
}
  4047b0:	b003      	add	sp, #12
  4047b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4047b4:	004047fd 	.word	0x004047fd
  4047b8:	0040eaa8 	.word	0x0040eaa8
  4047bc:	0040e4b0 	.word	0x0040e4b0
  4047c0:	00407645 	.word	0x00407645
  4047c4:	0040eb60 	.word	0x0040eb60
  4047c8:	0040f6d8 	.word	0x0040f6d8
  4047cc:	00404809 	.word	0x00404809
  4047d0:	0040eb7c 	.word	0x0040eb7c
  4047d4:	0040eb98 	.word	0x0040eb98

004047d8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  4047d8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  4047da:	4b01      	ldr	r3, [pc, #4]	; (4047e0 <nm_bus_iface_init+0x8>)
  4047dc:	4798      	blx	r3

	return ret;
}
  4047de:	bd08      	pop	{r3, pc}
  4047e0:	004032b5 	.word	0x004032b5

004047e4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  4047e4:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  4047e6:	4b01      	ldr	r3, [pc, #4]	; (4047ec <nm_bus_iface_deinit+0x8>)
  4047e8:	4798      	blx	r3

	return ret;
}
  4047ea:	bd08      	pop	{r3, pc}
  4047ec:	004034a1 	.word	0x004034a1

004047f0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  4047f0:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  4047f2:	4b01      	ldr	r3, [pc, #4]	; (4047f8 <nm_read_reg+0x8>)
  4047f4:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  4047f6:	bd08      	pop	{r3, pc}
  4047f8:	00405041 	.word	0x00405041

004047fc <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4047fc:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  4047fe:	4b01      	ldr	r3, [pc, #4]	; (404804 <nm_read_reg_with_ret+0x8>)
  404800:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  404802:	bd08      	pop	{r3, pc}
  404804:	00405059 	.word	0x00405059

00404808 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  404808:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  40480a:	4b01      	ldr	r3, [pc, #4]	; (404810 <nm_write_reg+0x8>)
  40480c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  40480e:	bd08      	pop	{r3, pc}
  404810:	00405071 	.word	0x00405071

00404814 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  404814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404818:	4607      	mov	r7, r0
  40481a:	4689      	mov	r9, r1
  40481c:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40481e:	4b13      	ldr	r3, [pc, #76]	; (40486c <nm_read_block+0x58>)
  404820:	f8b3 8000 	ldrh.w	r8, [r3]
  404824:	f1a8 0808 	sub.w	r8, r8, #8
  404828:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40482c:	4542      	cmp	r2, r8
  40482e:	d808      	bhi.n	404842 <nm_read_block+0x2e>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  404830:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  404832:	b2aa      	uxth	r2, r5
  404834:	eb09 0106 	add.w	r1, r9, r6
  404838:	4638      	mov	r0, r7
  40483a:	4b0d      	ldr	r3, [pc, #52]	; (404870 <nm_read_block+0x5c>)
  40483c:	4798      	blx	r3
  40483e:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  404840:	e010      	b.n	404864 <nm_read_block+0x50>
  404842:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  404844:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  404846:	f8df a028 	ldr.w	sl, [pc, #40]	; 404870 <nm_read_block+0x5c>
  40484a:	4642      	mov	r2, r8
  40484c:	eb09 0106 	add.w	r1, r9, r6
  404850:	4638      	mov	r0, r7
  404852:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  404854:	4603      	mov	r3, r0
  404856:	b928      	cbnz	r0, 404864 <nm_read_block+0x50>
			u32Sz -= u16MaxTrxSz;
  404858:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40485a:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40485c:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40485e:	42a5      	cmp	r5, r4
  404860:	d8f3      	bhi.n	40484a <nm_read_block+0x36>
  404862:	e7e6      	b.n	404832 <nm_read_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  404864:	4618      	mov	r0, r3
  404866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40486a:	bf00      	nop
  40486c:	20400030 	.word	0x20400030
  404870:	00405195 	.word	0x00405195

00404874 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  404874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404878:	4607      	mov	r7, r0
  40487a:	4689      	mov	r9, r1
  40487c:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40487e:	4b13      	ldr	r3, [pc, #76]	; (4048cc <nm_write_block+0x58>)
  404880:	f8b3 8000 	ldrh.w	r8, [r3]
  404884:	f1a8 0808 	sub.w	r8, r8, #8
  404888:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  40488c:	4542      	cmp	r2, r8
  40488e:	d808      	bhi.n	4048a2 <nm_write_block+0x2e>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
  404890:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  404892:	b2aa      	uxth	r2, r5
  404894:	eb09 0106 	add.w	r1, r9, r6
  404898:	4638      	mov	r0, r7
  40489a:	4b0d      	ldr	r3, [pc, #52]	; (4048d0 <nm_write_block+0x5c>)
  40489c:	4798      	blx	r3
  40489e:	4603      	mov	r3, r0
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
  4048a0:	e010      	b.n	4048c4 <nm_write_block+0x50>
  4048a2:	4644      	mov	r4, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4048a4:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4048a6:	f8df a028 	ldr.w	sl, [pc, #40]	; 4048d0 <nm_write_block+0x5c>
  4048aa:	4642      	mov	r2, r8
  4048ac:	eb09 0106 	add.w	r1, r9, r6
  4048b0:	4638      	mov	r0, r7
  4048b2:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4048b4:	4603      	mov	r3, r0
  4048b6:	b928      	cbnz	r0, 4048c4 <nm_write_block+0x50>
			u32Sz -= u16MaxTrxSz;
  4048b8:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4048ba:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4048bc:	4427      	add	r7, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4048be:	42a5      	cmp	r5, r4
  4048c0:	d8f3      	bhi.n	4048aa <nm_write_block+0x36>
  4048c2:	e7e6      	b.n	404892 <nm_write_block+0x1e>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
  4048c4:	4618      	mov	r0, r3
  4048c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4048ca:	bf00      	nop
  4048cc:	20400030 	.word	0x20400030
  4048d0:	00405261 	.word	0x00405261

004048d4 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  4048d4:	b530      	push	{r4, r5, lr}
  4048d6:	b083      	sub	sp, #12
  4048d8:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  4048da:	a902      	add	r1, sp, #8
  4048dc:	2300      	movs	r3, #0
  4048de:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  4048e2:	4823      	ldr	r0, [pc, #140]	; (404970 <nm_get_firmware_info+0x9c>)
  4048e4:	4b23      	ldr	r3, [pc, #140]	; (404974 <nm_get_firmware_info+0xa0>)
  4048e6:	4798      	blx	r3
  4048e8:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  4048ea:	9a01      	ldr	r2, [sp, #4]
  4048ec:	4b22      	ldr	r3, [pc, #136]	; (404978 <nm_get_firmware_info+0xa4>)
  4048ee:	429a      	cmp	r2, r3
  4048f0:	d105      	bne.n	4048fe <nm_get_firmware_info+0x2a>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4048f2:	a901      	add	r1, sp, #4
  4048f4:	f241 0048 	movw	r0, #4168	; 0x1048
  4048f8:	4b1e      	ldr	r3, [pc, #120]	; (404974 <nm_get_firmware_info+0xa0>)
  4048fa:	4798      	blx	r3
  4048fc:	4605      	mov	r5, r0
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  4048fe:	9b01      	ldr	r3, [sp, #4]
  404900:	0c1a      	lsrs	r2, r3, #16
  404902:	1211      	asrs	r1, r2, #8
  404904:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  404906:	f3c2 1103 	ubfx	r1, r2, #4, #4
  40490a:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  40490c:	f002 020f 	and.w	r2, r2, #15
  404910:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  404912:	121a      	asrs	r2, r3, #8
  404914:	7122      	strb	r2, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  404916:	f3c3 1203 	ubfx	r2, r3, #4, #4
  40491a:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  40491c:	f003 030f 	and.w	r3, r3, #15
  404920:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  404922:	4b16      	ldr	r3, [pc, #88]	; (40497c <nm_get_firmware_info+0xa8>)
  404924:	4798      	blx	r3
  404926:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  404928:	7922      	ldrb	r2, [r4, #4]
  40492a:	79a3      	ldrb	r3, [r4, #6]
  40492c:	f003 030f 	and.w	r3, r3, #15
  404930:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  404934:	7963      	ldrb	r3, [r4, #5]
  404936:	011b      	lsls	r3, r3, #4
  404938:	b2db      	uxtb	r3, r3
  40493a:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
	if(curr_drv_ver <  min_req_drv_ver) {
  40493c:	79e1      	ldrb	r1, [r4, #7]
  40493e:	7a62      	ldrb	r2, [r4, #9]
  404940:	f002 020f 	and.w	r2, r2, #15
  404944:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  404948:	7a22      	ldrb	r2, [r4, #8]
  40494a:	0112      	lsls	r2, r2, #4
  40494c:	b2d2      	uxtb	r2, r2
  40494e:	430a      	orrs	r2, r1
  404950:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  404954:	428a      	cmp	r2, r1
  404956:	bf88      	it	hi
  404958:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  40495c:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  404960:	4293      	cmp	r3, r2
	}
	return ret;
}
  404962:	bf8c      	ite	hi
  404964:	4628      	movhi	r0, r5
  404966:	f06f 000c 	mvnls.w	r0, #12
  40496a:	b003      	add	sp, #12
  40496c:	bd30      	pop	{r4, r5, pc}
  40496e:	bf00      	nop
  404970:	000207ac 	.word	0x000207ac
  404974:	004047fd 	.word	0x004047fd
  404978:	d75dc1c3 	.word	0xd75dc1c3
  40497c:	00404505 	.word	0x00404505

00404980 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  404980:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  404982:	b130      	cbz	r0, 404992 <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
  404984:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  404986:	1e63      	subs	r3, r4, #1
  404988:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  40498a:	2b04      	cmp	r3, #4
  40498c:	bf28      	it	cs
  40498e:	2401      	movcs	r4, #1
  404990:	e000      	b.n	404994 <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
  404992:	2401      	movs	r4, #1
	}
	
	ret = nm_bus_iface_init(NULL);
  404994:	2000      	movs	r0, #0
  404996:	4b1d      	ldr	r3, [pc, #116]	; (404a0c <nm_drv_init+0x8c>)
  404998:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40499a:	4605      	mov	r5, r0
  40499c:	b150      	cbz	r0, 4049b4 <nm_drv_init+0x34>
		M2M_ERR("[nmi start]: fail init bus\n");
  40499e:	f44f 7292 	mov.w	r2, #292	; 0x124
  4049a2:	491b      	ldr	r1, [pc, #108]	; (404a10 <nm_drv_init+0x90>)
  4049a4:	481b      	ldr	r0, [pc, #108]	; (404a14 <nm_drv_init+0x94>)
  4049a6:	4c1c      	ldr	r4, [pc, #112]	; (404a18 <nm_drv_init+0x98>)
  4049a8:	47a0      	blx	r4
  4049aa:	481c      	ldr	r0, [pc, #112]	; (404a1c <nm_drv_init+0x9c>)
  4049ac:	47a0      	blx	r4
  4049ae:	481c      	ldr	r0, [pc, #112]	; (404a20 <nm_drv_init+0xa0>)
  4049b0:	47a0      	blx	r4
		goto ERR1;
  4049b2:	e029      	b.n	404a08 <nm_drv_init+0x88>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  4049b4:	481b      	ldr	r0, [pc, #108]	; (404a24 <nm_drv_init+0xa4>)
  4049b6:	4d18      	ldr	r5, [pc, #96]	; (404a18 <nm_drv_init+0x98>)
  4049b8:	47a8      	blx	r5
  4049ba:	4b1b      	ldr	r3, [pc, #108]	; (404a28 <nm_drv_init+0xa8>)
  4049bc:	4798      	blx	r3
  4049be:	4601      	mov	r1, r0
  4049c0:	481a      	ldr	r0, [pc, #104]	; (404a2c <nm_drv_init+0xac>)
  4049c2:	47a8      	blx	r5
  4049c4:	4816      	ldr	r0, [pc, #88]	; (404a20 <nm_drv_init+0xa0>)
  4049c6:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  4049c8:	4b19      	ldr	r3, [pc, #100]	; (404a30 <nm_drv_init+0xb0>)
  4049ca:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  4049cc:	4620      	mov	r0, r4
  4049ce:	4b19      	ldr	r3, [pc, #100]	; (404a34 <nm_drv_init+0xb4>)
  4049d0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4049d2:	4605      	mov	r5, r0
  4049d4:	b9b0      	cbnz	r0, 404a04 <nm_drv_init+0x84>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  4049d6:	4620      	mov	r0, r4
  4049d8:	4b17      	ldr	r3, [pc, #92]	; (404a38 <nm_drv_init+0xb8>)
  4049da:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4049dc:	4605      	mov	r5, r0
  4049de:	b988      	cbnz	r0, 404a04 <nm_drv_init+0x84>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  4049e0:	3c02      	subs	r4, #2
  4049e2:	b2e4      	uxtb	r4, r4
  4049e4:	2c01      	cmp	r4, #1
  4049e6:	d90f      	bls.n	404a08 <nm_drv_init+0x88>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  4049e8:	4b14      	ldr	r3, [pc, #80]	; (404a3c <nm_drv_init+0xbc>)
  4049ea:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4049ec:	4605      	mov	r5, r0
  4049ee:	b158      	cbz	r0, 404a08 <nm_drv_init+0x88>
		M2M_ERR("failed to enable interrupts..\n");
  4049f0:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  4049f4:	4906      	ldr	r1, [pc, #24]	; (404a10 <nm_drv_init+0x90>)
  4049f6:	4807      	ldr	r0, [pc, #28]	; (404a14 <nm_drv_init+0x94>)
  4049f8:	4c07      	ldr	r4, [pc, #28]	; (404a18 <nm_drv_init+0x98>)
  4049fa:	47a0      	blx	r4
  4049fc:	4810      	ldr	r0, [pc, #64]	; (404a40 <nm_drv_init+0xc0>)
  4049fe:	47a0      	blx	r4
  404a00:	4807      	ldr	r0, [pc, #28]	; (404a20 <nm_drv_init+0xa0>)
  404a02:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  404a04:	4b0f      	ldr	r3, [pc, #60]	; (404a44 <nm_drv_init+0xc4>)
  404a06:	4798      	blx	r3
ERR1:
	return ret;
}
  404a08:	4628      	mov	r0, r5
  404a0a:	bd38      	pop	{r3, r4, r5, pc}
  404a0c:	004047d9 	.word	0x004047d9
  404a10:	0040eca0 	.word	0x0040eca0
  404a14:	0040e4b0 	.word	0x0040e4b0
  404a18:	00407645 	.word	0x00407645
  404a1c:	0040ebf4 	.word	0x0040ebf4
  404a20:	0040f6d8 	.word	0x0040f6d8
  404a24:	0040e770 	.word	0x0040e770
  404a28:	00404505 	.word	0x00404505
  404a2c:	0040ec10 	.word	0x0040ec10
  404a30:	00405089 	.word	0x00405089
  404a34:	004045b5 	.word	0x004045b5
  404a38:	00404691 	.word	0x00404691
  404a3c:	0040449d 	.word	0x0040449d
  404a40:	0040ec20 	.word	0x0040ec20
  404a44:	004047e5 	.word	0x004047e5

00404a48 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  404a48:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  404a4a:	4b19      	ldr	r3, [pc, #100]	; (404ab0 <nm_drv_deinit+0x68>)
  404a4c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404a4e:	b158      	cbz	r0, 404a68 <nm_drv_deinit+0x20>
  404a50:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  404a52:	f44f 72ba 	mov.w	r2, #372	; 0x174
  404a56:	4917      	ldr	r1, [pc, #92]	; (404ab4 <nm_drv_deinit+0x6c>)
  404a58:	4817      	ldr	r0, [pc, #92]	; (404ab8 <nm_drv_deinit+0x70>)
  404a5a:	4d18      	ldr	r5, [pc, #96]	; (404abc <nm_drv_deinit+0x74>)
  404a5c:	47a8      	blx	r5
  404a5e:	4818      	ldr	r0, [pc, #96]	; (404ac0 <nm_drv_deinit+0x78>)
  404a60:	47a8      	blx	r5
  404a62:	4818      	ldr	r0, [pc, #96]	; (404ac4 <nm_drv_deinit+0x7c>)
  404a64:	47a8      	blx	r5
		goto ERR1;
  404a66:	e020      	b.n	404aaa <nm_drv_deinit+0x62>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  404a68:	2000      	movs	r0, #0
  404a6a:	4b17      	ldr	r3, [pc, #92]	; (404ac8 <nm_drv_deinit+0x80>)
  404a6c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404a6e:	4604      	mov	r4, r0
  404a70:	b150      	cbz	r0, 404a88 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  404a72:	f240 127b 	movw	r2, #379	; 0x17b
  404a76:	490f      	ldr	r1, [pc, #60]	; (404ab4 <nm_drv_deinit+0x6c>)
  404a78:	480f      	ldr	r0, [pc, #60]	; (404ab8 <nm_drv_deinit+0x70>)
  404a7a:	4d10      	ldr	r5, [pc, #64]	; (404abc <nm_drv_deinit+0x74>)
  404a7c:	47a8      	blx	r5
  404a7e:	4813      	ldr	r0, [pc, #76]	; (404acc <nm_drv_deinit+0x84>)
  404a80:	47a8      	blx	r5
  404a82:	4810      	ldr	r0, [pc, #64]	; (404ac4 <nm_drv_deinit+0x7c>)
  404a84:	47a8      	blx	r5
		goto ERR1;
  404a86:	e010      	b.n	404aaa <nm_drv_deinit+0x62>
	}

	ret = nm_bus_iface_deinit();
  404a88:	4b11      	ldr	r3, [pc, #68]	; (404ad0 <nm_drv_deinit+0x88>)
  404a8a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404a8c:	4604      	mov	r4, r0
  404a8e:	b150      	cbz	r0, 404aa6 <nm_drv_deinit+0x5e>
		M2M_ERR("[nmi stop]: fail init bus\n");
  404a90:	f240 1281 	movw	r2, #385	; 0x181
  404a94:	4907      	ldr	r1, [pc, #28]	; (404ab4 <nm_drv_deinit+0x6c>)
  404a96:	4808      	ldr	r0, [pc, #32]	; (404ab8 <nm_drv_deinit+0x70>)
  404a98:	4d08      	ldr	r5, [pc, #32]	; (404abc <nm_drv_deinit+0x74>)
  404a9a:	47a8      	blx	r5
  404a9c:	480d      	ldr	r0, [pc, #52]	; (404ad4 <nm_drv_deinit+0x8c>)
  404a9e:	47a8      	blx	r5
  404aa0:	4808      	ldr	r0, [pc, #32]	; (404ac4 <nm_drv_deinit+0x7c>)
  404aa2:	47a8      	blx	r5
		goto ERR1;
  404aa4:	e001      	b.n	404aaa <nm_drv_deinit+0x62>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  404aa6:	4b0c      	ldr	r3, [pc, #48]	; (404ad8 <nm_drv_deinit+0x90>)
  404aa8:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
  404aaa:	4620      	mov	r0, r4
  404aac:	bd38      	pop	{r3, r4, r5, pc}
  404aae:	bf00      	nop
  404ab0:	00404711 	.word	0x00404711
  404ab4:	0040ecac 	.word	0x0040ecac
  404ab8:	0040e4b0 	.word	0x0040e4b0
  404abc:	00407645 	.word	0x00407645
  404ac0:	0040ec40 	.word	0x0040ec40
  404ac4:	0040f6d8 	.word	0x0040f6d8
  404ac8:	00405af1 	.word	0x00405af1
  404acc:	0040ec60 	.word	0x0040ec60
  404ad0:	004047e5 	.word	0x004047e5
  404ad4:	0040ec84 	.word	0x0040ec84
  404ad8:	00405035 	.word	0x00405035

00404adc <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  404adc:	b500      	push	{lr}
  404ade:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  404ae0:	2300      	movs	r3, #0
  404ae2:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  404ae4:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  404ae6:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  404aea:	a901      	add	r1, sp, #4
  404aec:	2003      	movs	r0, #3
  404aee:	4b02      	ldr	r3, [pc, #8]	; (404af8 <nmi_spi_read+0x1c>)
  404af0:	4798      	blx	r3
}
  404af2:	b005      	add	sp, #20
  404af4:	f85d fb04 	ldr.w	pc, [sp], #4
  404af8:	004033d1 	.word	0x004033d1

00404afc <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  404afc:	b5f0      	push	{r4, r5, r6, r7, lr}
  404afe:	b083      	sub	sp, #12
  404b00:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  404b02:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  404b06:	b2db      	uxtb	r3, r3
  404b08:	2b01      	cmp	r3, #1
  404b0a:	d901      	bls.n	404b10 <spi_cmd_rsp+0x14>
  404b0c:	28cf      	cmp	r0, #207	; 0xcf
  404b0e:	d106      	bne.n	404b1e <spi_cmd_rsp+0x22>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404b10:	2101      	movs	r1, #1
  404b12:	f10d 0007 	add.w	r0, sp, #7
  404b16:	4b22      	ldr	r3, [pc, #136]	; (404ba0 <spi_cmd_rsp+0xa4>)
  404b18:	4798      	blx	r3
  404b1a:	2800      	cmp	r0, #0
  404b1c:	d13a      	bne.n	404b94 <spi_cmd_rsp+0x98>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  404b1e:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404b20:	2701      	movs	r7, #1
  404b22:	4e1f      	ldr	r6, [pc, #124]	; (404ba0 <spi_cmd_rsp+0xa4>)
  404b24:	4639      	mov	r1, r7
  404b26:	f10d 0007 	add.w	r0, sp, #7
  404b2a:	47b0      	blx	r6
  404b2c:	b158      	cbz	r0, 404b46 <spi_cmd_rsp+0x4a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  404b2e:	f240 1227 	movw	r2, #295	; 0x127
  404b32:	491c      	ldr	r1, [pc, #112]	; (404ba4 <spi_cmd_rsp+0xa8>)
  404b34:	481c      	ldr	r0, [pc, #112]	; (404ba8 <spi_cmd_rsp+0xac>)
  404b36:	4c1d      	ldr	r4, [pc, #116]	; (404bac <spi_cmd_rsp+0xb0>)
  404b38:	47a0      	blx	r4
  404b3a:	481d      	ldr	r0, [pc, #116]	; (404bb0 <spi_cmd_rsp+0xb4>)
  404b3c:	47a0      	blx	r4
  404b3e:	481d      	ldr	r0, [pc, #116]	; (404bb4 <spi_cmd_rsp+0xb8>)
  404b40:	47a0      	blx	r4
			result = N_FAIL;
  404b42:	2000      	movs	r0, #0
			goto _fail_;
  404b44:	e029      	b.n	404b9a <spi_cmd_rsp+0x9e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  404b46:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404b4a:	42ab      	cmp	r3, r5
  404b4c:	d005      	beq.n	404b5a <spi_cmd_rsp+0x5e>
  404b4e:	1e63      	subs	r3, r4, #1
  404b50:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  404b54:	d1e6      	bne.n	404b24 <spi_cmd_rsp+0x28>
  404b56:	240b      	movs	r4, #11
  404b58:	e000      	b.n	404b5c <spi_cmd_rsp+0x60>
  404b5a:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404b5c:	2601      	movs	r6, #1
  404b5e:	4d10      	ldr	r5, [pc, #64]	; (404ba0 <spi_cmd_rsp+0xa4>)
  404b60:	4631      	mov	r1, r6
  404b62:	f10d 0007 	add.w	r0, sp, #7
  404b66:	47a8      	blx	r5
  404b68:	b158      	cbz	r0, 404b82 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  404b6a:	f240 1235 	movw	r2, #309	; 0x135
  404b6e:	490d      	ldr	r1, [pc, #52]	; (404ba4 <spi_cmd_rsp+0xa8>)
  404b70:	480d      	ldr	r0, [pc, #52]	; (404ba8 <spi_cmd_rsp+0xac>)
  404b72:	4c0e      	ldr	r4, [pc, #56]	; (404bac <spi_cmd_rsp+0xb0>)
  404b74:	47a0      	blx	r4
  404b76:	480e      	ldr	r0, [pc, #56]	; (404bb0 <spi_cmd_rsp+0xb4>)
  404b78:	47a0      	blx	r4
  404b7a:	480e      	ldr	r0, [pc, #56]	; (404bb4 <spi_cmd_rsp+0xb8>)
  404b7c:	47a0      	blx	r4
			result = N_FAIL;
  404b7e:	2000      	movs	r0, #0
			goto _fail_;
  404b80:	e00b      	b.n	404b9a <spi_cmd_rsp+0x9e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  404b82:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404b86:	b13b      	cbz	r3, 404b98 <spi_cmd_rsp+0x9c>
  404b88:	1e63      	subs	r3, r4, #1
  404b8a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  404b8e:	d1e7      	bne.n	404b60 <spi_cmd_rsp+0x64>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  404b90:	2001      	movs	r0, #1
  404b92:	e002      	b.n	404b9a <spi_cmd_rsp+0x9e>
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			result = N_FAIL;
  404b94:	2000      	movs	r0, #0
  404b96:	e000      	b.n	404b9a <spi_cmd_rsp+0x9e>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
  404b98:	2001      	movs	r0, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
  404b9a:	b003      	add	sp, #12
  404b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404b9e:	bf00      	nop
  404ba0:	00404add 	.word	0x00404add
  404ba4:	0040f2d0 	.word	0x0040f2d0
  404ba8:	0040e4b0 	.word	0x0040e4b0
  404bac:	00407645 	.word	0x00407645
  404bb0:	0040edf4 	.word	0x0040edf4
  404bb4:	0040f6d8 	.word	0x0040f6d8

00404bb8 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  404bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bbc:	b083      	sub	sp, #12
  404bbe:	4682      	mov	sl, r0
  404bc0:	4689      	mov	r9, r1
  404bc2:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  404bc4:	f04f 0800 	mov.w	r8, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404bc8:	4d35      	ldr	r5, [pc, #212]	; (404ca0 <spi_data_read+0xe8>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
  404bca:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
			nbytes = sz;
  404bce:	bf94      	ite	ls
  404bd0:	fa0f f789 	sxthls.w	r7, r9
		else
			nbytes = DATA_PKT_SZ;
  404bd4:	f44f 5700 	movhi.w	r7, #8192	; 0x2000

		/**
			Data Respnose header
		**/
		retry = 10;
  404bd8:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404bda:	2601      	movs	r6, #1
  404bdc:	4631      	mov	r1, r6
  404bde:	f10d 0003 	add.w	r0, sp, #3
  404be2:	47a8      	blx	r5
  404be4:	b158      	cbz	r0, 404bfe <spi_data_read+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  404be6:	f240 1257 	movw	r2, #343	; 0x157
  404bea:	492e      	ldr	r1, [pc, #184]	; (404ca4 <spi_data_read+0xec>)
  404bec:	482e      	ldr	r0, [pc, #184]	; (404ca8 <spi_data_read+0xf0>)
  404bee:	4c2f      	ldr	r4, [pc, #188]	; (404cac <spi_data_read+0xf4>)
  404bf0:	47a0      	blx	r4
  404bf2:	482f      	ldr	r0, [pc, #188]	; (404cb0 <spi_data_read+0xf8>)
  404bf4:	47a0      	blx	r4
  404bf6:	482f      	ldr	r0, [pc, #188]	; (404cb4 <spi_data_read+0xfc>)
  404bf8:	47a0      	blx	r4
  404bfa:	2000      	movs	r0, #0
  404bfc:	e04d      	b.n	404c9a <spi_data_read+0xe2>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
  404bfe:	f89d 3003 	ldrb.w	r3, [sp, #3]
  404c02:	091b      	lsrs	r3, r3, #4
  404c04:	2b0f      	cmp	r3, #15
  404c06:	d005      	beq.n	404c14 <spi_data_read+0x5c>
  404c08:	3c01      	subs	r4, #1
  404c0a:	b224      	sxth	r4, r4
				break;
		} while (retry--);
  404c0c:	f1b4 3fff 	cmp.w	r4, #4294967295
  404c10:	d1e4      	bne.n	404bdc <spi_data_read+0x24>
  404c12:	e001      	b.n	404c18 <spi_data_read+0x60>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
  404c14:	2c00      	cmp	r4, #0
  404c16:	dc0d      	bgt.n	404c34 <spi_data_read+0x7c>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  404c18:	f240 1263 	movw	r2, #355	; 0x163
  404c1c:	4921      	ldr	r1, [pc, #132]	; (404ca4 <spi_data_read+0xec>)
  404c1e:	4822      	ldr	r0, [pc, #136]	; (404ca8 <spi_data_read+0xf0>)
  404c20:	4c22      	ldr	r4, [pc, #136]	; (404cac <spi_data_read+0xf4>)
  404c22:	47a0      	blx	r4
  404c24:	f89d 1003 	ldrb.w	r1, [sp, #3]
  404c28:	4823      	ldr	r0, [pc, #140]	; (404cb8 <spi_data_read+0x100>)
  404c2a:	47a0      	blx	r4
  404c2c:	4821      	ldr	r0, [pc, #132]	; (404cb4 <spi_data_read+0xfc>)
  404c2e:	47a0      	blx	r4
			result = N_FAIL;
  404c30:	2000      	movs	r0, #0
			break;
  404c32:	e032      	b.n	404c9a <spi_data_read+0xe2>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  404c34:	b2bf      	uxth	r7, r7
  404c36:	4639      	mov	r1, r7
  404c38:	eb0a 0008 	add.w	r0, sl, r8
  404c3c:	47a8      	blx	r5
  404c3e:	b158      	cbz	r0, 404c58 <spi_data_read+0xa0>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  404c40:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  404c44:	4917      	ldr	r1, [pc, #92]	; (404ca4 <spi_data_read+0xec>)
  404c46:	4818      	ldr	r0, [pc, #96]	; (404ca8 <spi_data_read+0xf0>)
  404c48:	4c18      	ldr	r4, [pc, #96]	; (404cac <spi_data_read+0xf4>)
  404c4a:	47a0      	blx	r4
  404c4c:	481b      	ldr	r0, [pc, #108]	; (404cbc <spi_data_read+0x104>)
  404c4e:	47a0      	blx	r4
  404c50:	4818      	ldr	r0, [pc, #96]	; (404cb4 <spi_data_read+0xfc>)
  404c52:	47a0      	blx	r4
			result = N_FAIL;
  404c54:	2000      	movs	r0, #0
			break;
  404c56:	e020      	b.n	404c9a <spi_data_read+0xe2>
		}
		if(!clockless)
  404c58:	f1bb 0f00 	cmp.w	fp, #0
  404c5c:	d112      	bne.n	404c84 <spi_data_read+0xcc>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
  404c5e:	4b18      	ldr	r3, [pc, #96]	; (404cc0 <spi_data_read+0x108>)
  404c60:	781b      	ldrb	r3, [r3, #0]
  404c62:	b97b      	cbnz	r3, 404c84 <spi_data_read+0xcc>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  404c64:	2102      	movs	r1, #2
  404c66:	a801      	add	r0, sp, #4
  404c68:	47a8      	blx	r5
  404c6a:	b158      	cbz	r0, 404c84 <spi_data_read+0xcc>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  404c6c:	f240 1277 	movw	r2, #375	; 0x177
  404c70:	490c      	ldr	r1, [pc, #48]	; (404ca4 <spi_data_read+0xec>)
  404c72:	480d      	ldr	r0, [pc, #52]	; (404ca8 <spi_data_read+0xf0>)
  404c74:	4c0d      	ldr	r4, [pc, #52]	; (404cac <spi_data_read+0xf4>)
  404c76:	47a0      	blx	r4
  404c78:	4812      	ldr	r0, [pc, #72]	; (404cc4 <spi_data_read+0x10c>)
  404c7a:	47a0      	blx	r4
  404c7c:	480d      	ldr	r0, [pc, #52]	; (404cb4 <spi_data_read+0xfc>)
  404c7e:	47a0      	blx	r4
					result = N_FAIL;
  404c80:	2000      	movs	r0, #0
					break;
  404c82:	e00a      	b.n	404c9a <spi_data_read+0xe2>
				}
			}
		}
		ix += nbytes;
  404c84:	44b8      	add	r8, r7
  404c86:	fa0f f888 	sxth.w	r8, r8
		sz -= nbytes;
  404c8a:	ebc7 0709 	rsb	r7, r7, r9
  404c8e:	fa1f f987 	uxth.w	r9, r7

	} while (sz);
  404c92:	f1b9 0f00 	cmp.w	r9, #0
  404c96:	d198      	bne.n	404bca <spi_data_read+0x12>
  404c98:	2001      	movs	r0, #1

	return result;
}
  404c9a:	b003      	add	sp, #12
  404c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ca0:	00404add 	.word	0x00404add
  404ca4:	0040ecbc 	.word	0x0040ecbc
  404ca8:	0040e4b0 	.word	0x0040e4b0
  404cac:	00407645 	.word	0x00407645
  404cb0:	0040ee28 	.word	0x0040ee28
  404cb4:	0040f6d8 	.word	0x0040f6d8
  404cb8:	0040ee5c 	.word	0x0040ee5c
  404cbc:	0040ee8c 	.word	0x0040ee8c
  404cc0:	20400974 	.word	0x20400974
  404cc4:	0040eec0 	.word	0x0040eec0

00404cc8 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
  404cc8:	b500      	push	{lr}
  404cca:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
  404ccc:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  404cce:	2300      	movs	r3, #0
  404cd0:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  404cd2:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  404cd6:	a901      	add	r1, sp, #4
  404cd8:	2003      	movs	r0, #3
  404cda:	4b02      	ldr	r3, [pc, #8]	; (404ce4 <nmi_spi_write+0x1c>)
  404cdc:	4798      	blx	r3
}
  404cde:	b005      	add	sp, #20
  404ce0:	f85d fb04 	ldr.w	pc, [sp], #4
  404ce4:	004033d1 	.word	0x004033d1

00404ce8 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
  404ce8:	b570      	push	{r4, r5, r6, lr}
  404cea:	b084      	sub	sp, #16
  404cec:	f89d 4020 	ldrb.w	r4, [sp, #32]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
  404cf0:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  404cf4:	38c1      	subs	r0, #193	; 0xc1
  404cf6:	280e      	cmp	r0, #14
  404cf8:	f200 80ae 	bhi.w	404e58 <spi_cmd+0x170>
  404cfc:	e8df f000 	tbb	[pc, r0]
  404d00:	125f3e3e 	.word	0x125f3e3e
  404d04:	4d4d2c23 	.word	0x4d4d2c23
  404d08:	acac0878 	.word	0xacac0878
  404d0c:	acac      	.short	0xacac
  404d0e:	35          	.byte	0x35
  404d0f:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
  404d10:	0c0b      	lsrs	r3, r1, #16
  404d12:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404d16:	0a0b      	lsrs	r3, r1, #8
  404d18:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  404d1c:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  404d20:	2105      	movs	r1, #5
		break;
  404d22:	e0a4      	b.n	404e6e <spi_cmd+0x186>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  404d24:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  404d28:	b914      	cbnz	r4, 404d30 <spi_cmd+0x48>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
  404d2a:	f88d 3005 	strb.w	r3, [sp, #5]
  404d2e:	e003      	b.n	404d38 <spi_cmd+0x50>
		if(clockless)  bc[1] |= (1 << 7);
  404d30:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404d34:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  404d38:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  404d3c:	2300      	movs	r3, #0
  404d3e:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404d42:	2105      	movs	r1, #5
		break;
  404d44:	e093      	b.n	404e6e <spi_cmd+0x186>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
  404d46:	2300      	movs	r3, #0
  404d48:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  404d4c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  404d50:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404d54:	2105      	movs	r1, #5
		break;
  404d56:	e08a      	b.n	404e6e <spi_cmd+0x186>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
  404d58:	2300      	movs	r3, #0
  404d5a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  404d5e:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  404d62:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404d66:	2105      	movs	r1, #5
		break;
  404d68:	e081      	b.n	404e6e <spi_cmd+0x186>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
  404d6a:	23ff      	movs	r3, #255	; 0xff
  404d6c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  404d70:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  404d74:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404d78:	2105      	movs	r1, #5
		break;
  404d7a:	e078      	b.n	404e6e <spi_cmd+0x186>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
  404d7c:	0c0a      	lsrs	r2, r1, #16
  404d7e:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404d82:	0a0a      	lsrs	r2, r1, #8
  404d84:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  404d88:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  404d8c:	0a1a      	lsrs	r2, r3, #8
  404d8e:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  404d92:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  404d96:	2107      	movs	r1, #7
		break;
  404d98:	e069      	b.n	404e6e <spi_cmd+0x186>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
  404d9a:	0c0a      	lsrs	r2, r1, #16
  404d9c:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404da0:	0a0a      	lsrs	r2, r1, #8
  404da2:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  404da6:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  404daa:	0c1a      	lsrs	r2, r3, #16
  404dac:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  404db0:	0a1a      	lsrs	r2, r3, #8
  404db2:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  404db6:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  404dba:	2108      	movs	r1, #8
		break;
  404dbc:	e057      	b.n	404e6e <spi_cmd+0x186>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  404dbe:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  404dc2:	b914      	cbnz	r4, 404dca <spi_cmd+0xe2>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
  404dc4:	f88d 3005 	strb.w	r3, [sp, #5]
  404dc8:	e003      	b.n	404dd2 <spi_cmd+0xea>
		if(clockless)  bc[1] |= (1 << 7);
  404dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404dce:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  404dd2:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  404dd6:	0e13      	lsrs	r3, r2, #24
  404dd8:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  404ddc:	0c13      	lsrs	r3, r2, #16
  404dde:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  404de2:	0a13      	lsrs	r3, r2, #8
  404de4:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  404de8:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  404dec:	2108      	movs	r1, #8
		break;
  404dee:	e03e      	b.n	404e6e <spi_cmd+0x186>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
  404df0:	0c0b      	lsrs	r3, r1, #16
  404df2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404df6:	0a0b      	lsrs	r3, r1, #8
  404df8:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  404dfc:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  404e00:	0e13      	lsrs	r3, r2, #24
  404e02:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  404e06:	0c13      	lsrs	r3, r2, #16
  404e08:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  404e0c:	0a13      	lsrs	r3, r2, #8
  404e0e:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  404e12:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  404e16:	2109      	movs	r1, #9
		break;
  404e18:	e029      	b.n	404e6e <spi_cmd+0x186>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  404e1a:	f812 3b01 	ldrb.w	r3, [r2], #1
  404e1e:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  404e22:	5ce0      	ldrb	r0, [r4, r3]
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
  404e24:	4295      	cmp	r5, r2
  404e26:	d1f8      	bne.n	404e1a <spi_cmd+0x132>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  404e28:	ab04      	add	r3, sp, #16
  404e2a:	441e      	add	r6, r3
  404e2c:	0043      	lsls	r3, r0, #1
  404e2e:	f806 3c0c 	strb.w	r3, [r6, #-12]
  404e32:	e001      	b.n	404e38 <spi_cmd+0x150>
		else
			len-=1;
  404e34:	3901      	subs	r1, #1
  404e36:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  404e38:	a801      	add	r0, sp, #4
  404e3a:	4b10      	ldr	r3, [pc, #64]	; (404e7c <spi_cmd+0x194>)
  404e3c:	4798      	blx	r3
  404e3e:	b168      	cbz	r0, 404e5c <spi_cmd+0x174>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  404e40:	f44f 7284 	mov.w	r2, #264	; 0x108
  404e44:	490e      	ldr	r1, [pc, #56]	; (404e80 <spi_cmd+0x198>)
  404e46:	480f      	ldr	r0, [pc, #60]	; (404e84 <spi_cmd+0x19c>)
  404e48:	4c0f      	ldr	r4, [pc, #60]	; (404e88 <spi_cmd+0x1a0>)
  404e4a:	47a0      	blx	r4
  404e4c:	480f      	ldr	r0, [pc, #60]	; (404e8c <spi_cmd+0x1a4>)
  404e4e:	47a0      	blx	r4
  404e50:	480f      	ldr	r0, [pc, #60]	; (404e90 <spi_cmd+0x1a8>)
  404e52:	47a0      	blx	r4
			result = N_FAIL;
  404e54:	2000      	movs	r0, #0
  404e56:	e00f      	b.n	404e78 <spi_cmd+0x190>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
  404e58:	2000      	movs	r0, #0
  404e5a:	e00d      	b.n	404e78 <spi_cmd+0x190>
  404e5c:	2001      	movs	r0, #1
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
  404e5e:	e00b      	b.n	404e78 <spi_cmd+0x190>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  404e60:	1e4e      	subs	r6, r1, #1
  404e62:	ab01      	add	r3, sp, #4
  404e64:	199d      	adds	r5, r3, r6
  404e66:	207f      	movs	r0, #127	; 0x7f
  404e68:	461a      	mov	r2, r3
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
  404e6a:	4c0a      	ldr	r4, [pc, #40]	; (404e94 <spi_cmd+0x1ac>)
  404e6c:	e7d5      	b.n	404e1a <spi_cmd+0x132>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
  404e6e:	4b0a      	ldr	r3, [pc, #40]	; (404e98 <spi_cmd+0x1b0>)
  404e70:	781b      	ldrb	r3, [r3, #0]
  404e72:	2b00      	cmp	r3, #0
  404e74:	d1de      	bne.n	404e34 <spi_cmd+0x14c>
  404e76:	e7f3      	b.n	404e60 <spi_cmd+0x178>
			result = N_FAIL;
		}
	}

	return result;
}
  404e78:	b004      	add	sp, #16
  404e7a:	bd70      	pop	{r4, r5, r6, pc}
  404e7c:	00404cc9 	.word	0x00404cc9
  404e80:	0040f2b8 	.word	0x0040f2b8
  404e84:	0040e4b0 	.word	0x0040e4b0
  404e88:	00407645 	.word	0x00407645
  404e8c:	0040eef8 	.word	0x0040eef8
  404e90:	0040f6d8 	.word	0x0040f6d8
  404e94:	0040eccc 	.word	0x0040eccc
  404e98:	20400974 	.word	0x20400974

00404e9c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  404e9c:	b570      	push	{r4, r5, r6, lr}
  404e9e:	b082      	sub	sp, #8
  404ea0:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  404ea2:	2831      	cmp	r0, #49	; 0x31
  404ea4:	bf35      	itete	cc
  404ea6:	2301      	movcc	r3, #1
  404ea8:	2300      	movcs	r3, #0
  404eaa:	25c3      	movcc	r5, #195	; 0xc3
  404eac:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  404eae:	9300      	str	r3, [sp, #0]
  404eb0:	2304      	movs	r3, #4
  404eb2:	460a      	mov	r2, r1
  404eb4:	4601      	mov	r1, r0
  404eb6:	4628      	mov	r0, r5
  404eb8:	4e16      	ldr	r6, [pc, #88]	; (404f14 <spi_write_reg+0x78>)
  404eba:	47b0      	blx	r6
	if (result != N_OK) {
  404ebc:	2801      	cmp	r0, #1
  404ebe:	d00c      	beq.n	404eda <spi_write_reg+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  404ec0:	f240 12eb 	movw	r2, #491	; 0x1eb
  404ec4:	4914      	ldr	r1, [pc, #80]	; (404f18 <spi_write_reg+0x7c>)
  404ec6:	4815      	ldr	r0, [pc, #84]	; (404f1c <spi_write_reg+0x80>)
  404ec8:	4d15      	ldr	r5, [pc, #84]	; (404f20 <spi_write_reg+0x84>)
  404eca:	47a8      	blx	r5
  404ecc:	4621      	mov	r1, r4
  404ece:	4815      	ldr	r0, [pc, #84]	; (404f24 <spi_write_reg+0x88>)
  404ed0:	47a8      	blx	r5
  404ed2:	4815      	ldr	r0, [pc, #84]	; (404f28 <spi_write_reg+0x8c>)
  404ed4:	47a8      	blx	r5
		return N_FAIL;
  404ed6:	2000      	movs	r0, #0
  404ed8:	e01a      	b.n	404f10 <spi_write_reg+0x74>
	}

	result = spi_cmd_rsp(cmd);
  404eda:	4628      	mov	r0, r5
  404edc:	4b13      	ldr	r3, [pc, #76]	; (404f2c <spi_write_reg+0x90>)
  404ede:	4798      	blx	r3
	if (result != N_OK) {
  404ee0:	2801      	cmp	r0, #1
  404ee2:	d014      	beq.n	404f0e <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  404ee4:	f240 12f1 	movw	r2, #497	; 0x1f1
  404ee8:	490b      	ldr	r1, [pc, #44]	; (404f18 <spi_write_reg+0x7c>)
  404eea:	480c      	ldr	r0, [pc, #48]	; (404f1c <spi_write_reg+0x80>)
  404eec:	4d0c      	ldr	r5, [pc, #48]	; (404f20 <spi_write_reg+0x84>)
  404eee:	47a8      	blx	r5
  404ef0:	4621      	mov	r1, r4
  404ef2:	480f      	ldr	r0, [pc, #60]	; (404f30 <spi_write_reg+0x94>)
  404ef4:	47a8      	blx	r5
  404ef6:	480c      	ldr	r0, [pc, #48]	; (404f28 <spi_write_reg+0x8c>)
  404ef8:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404efa:	2400      	movs	r4, #0
  404efc:	9400      	str	r4, [sp, #0]
  404efe:	4623      	mov	r3, r4
  404f00:	4622      	mov	r2, r4
  404f02:	4621      	mov	r1, r4
  404f04:	20cf      	movs	r0, #207	; 0xcf
  404f06:	4d03      	ldr	r5, [pc, #12]	; (404f14 <spi_write_reg+0x78>)
  404f08:	47a8      	blx	r5
		return N_FAIL;
  404f0a:	4620      	mov	r0, r4
  404f0c:	e000      	b.n	404f10 <spi_write_reg+0x74>
	}

	return N_OK;
  404f0e:	2001      	movs	r0, #1
	}

	return result;

#endif
}
  404f10:	b002      	add	sp, #8
  404f12:	bd70      	pop	{r4, r5, r6, pc}
  404f14:	00404ce9 	.word	0x00404ce9
  404f18:	0040f2a8 	.word	0x0040f2a8
  404f1c:	0040e4b0 	.word	0x0040e4b0
  404f20:	00407645 	.word	0x00407645
  404f24:	0040ef24 	.word	0x0040ef24
  404f28:	0040f6d8 	.word	0x0040f6d8
  404f2c:	00404afd 	.word	0x00404afd
  404f30:	0040ef50 	.word	0x0040ef50

00404f34 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  404f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f38:	b084      	sub	sp, #16
  404f3a:	4604      	mov	r4, r0
  404f3c:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  404f3e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  404f42:	bf35      	itete	cc
  404f44:	2601      	movcc	r6, #1
  404f46:	2600      	movcs	r6, #0
  404f48:	25c4      	movcc	r5, #196	; 0xc4
  404f4a:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  404f4c:	9600      	str	r6, [sp, #0]
  404f4e:	2304      	movs	r3, #4
  404f50:	2200      	movs	r2, #0
  404f52:	4601      	mov	r1, r0
  404f54:	4628      	mov	r0, r5
  404f56:	4f2d      	ldr	r7, [pc, #180]	; (40500c <spi_read_reg+0xd8>)
  404f58:	47b8      	blx	r7
	if (result != N_OK) {
  404f5a:	2801      	cmp	r0, #1
  404f5c:	d00c      	beq.n	404f78 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  404f5e:	f240 2245 	movw	r2, #581	; 0x245
  404f62:	492b      	ldr	r1, [pc, #172]	; (405010 <spi_read_reg+0xdc>)
  404f64:	482b      	ldr	r0, [pc, #172]	; (405014 <spi_read_reg+0xe0>)
  404f66:	4d2c      	ldr	r5, [pc, #176]	; (405018 <spi_read_reg+0xe4>)
  404f68:	47a8      	blx	r5
  404f6a:	4621      	mov	r1, r4
  404f6c:	482b      	ldr	r0, [pc, #172]	; (40501c <spi_read_reg+0xe8>)
  404f6e:	47a8      	blx	r5
  404f70:	482b      	ldr	r0, [pc, #172]	; (405020 <spi_read_reg+0xec>)
  404f72:	47a8      	blx	r5
		return N_FAIL;
  404f74:	2000      	movs	r0, #0
  404f76:	e045      	b.n	405004 <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
  404f78:	4628      	mov	r0, r5
  404f7a:	4b2a      	ldr	r3, [pc, #168]	; (405024 <spi_read_reg+0xf0>)
  404f7c:	4798      	blx	r3
	if (result != N_OK) {
  404f7e:	2801      	cmp	r0, #1
  404f80:	d014      	beq.n	404fac <spi_read_reg+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  404f82:	f240 224b 	movw	r2, #587	; 0x24b
  404f86:	4922      	ldr	r1, [pc, #136]	; (405010 <spi_read_reg+0xdc>)
  404f88:	4822      	ldr	r0, [pc, #136]	; (405014 <spi_read_reg+0xe0>)
  404f8a:	4d23      	ldr	r5, [pc, #140]	; (405018 <spi_read_reg+0xe4>)
  404f8c:	47a8      	blx	r5
  404f8e:	4621      	mov	r1, r4
  404f90:	4825      	ldr	r0, [pc, #148]	; (405028 <spi_read_reg+0xf4>)
  404f92:	47a8      	blx	r5
  404f94:	4822      	ldr	r0, [pc, #136]	; (405020 <spi_read_reg+0xec>)
  404f96:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404f98:	2400      	movs	r4, #0
  404f9a:	9400      	str	r4, [sp, #0]
  404f9c:	4623      	mov	r3, r4
  404f9e:	4622      	mov	r2, r4
  404fa0:	4621      	mov	r1, r4
  404fa2:	20cf      	movs	r0, #207	; 0xcf
  404fa4:	4d19      	ldr	r5, [pc, #100]	; (40500c <spi_read_reg+0xd8>)
  404fa6:	47a8      	blx	r5
		return N_FAIL;
  404fa8:	4620      	mov	r0, r4
  404faa:	e02b      	b.n	405004 <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
  404fac:	4632      	mov	r2, r6
  404fae:	2104      	movs	r1, #4
  404fb0:	a803      	add	r0, sp, #12
  404fb2:	4b1e      	ldr	r3, [pc, #120]	; (40502c <spi_read_reg+0xf8>)
  404fb4:	4798      	blx	r3
	if (result != N_OK) {
  404fb6:	2801      	cmp	r0, #1
  404fb8:	d013      	beq.n	404fe2 <spi_read_reg+0xae>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  404fba:	f240 2253 	movw	r2, #595	; 0x253
  404fbe:	4914      	ldr	r1, [pc, #80]	; (405010 <spi_read_reg+0xdc>)
  404fc0:	4814      	ldr	r0, [pc, #80]	; (405014 <spi_read_reg+0xe0>)
  404fc2:	4c15      	ldr	r4, [pc, #84]	; (405018 <spi_read_reg+0xe4>)
  404fc4:	47a0      	blx	r4
  404fc6:	481a      	ldr	r0, [pc, #104]	; (405030 <spi_read_reg+0xfc>)
  404fc8:	47a0      	blx	r4
  404fca:	4815      	ldr	r0, [pc, #84]	; (405020 <spi_read_reg+0xec>)
  404fcc:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404fce:	2400      	movs	r4, #0
  404fd0:	9400      	str	r4, [sp, #0]
  404fd2:	4623      	mov	r3, r4
  404fd4:	4622      	mov	r2, r4
  404fd6:	4621      	mov	r1, r4
  404fd8:	20cf      	movs	r0, #207	; 0xcf
  404fda:	4d0c      	ldr	r5, [pc, #48]	; (40500c <spi_read_reg+0xd8>)
  404fdc:	47a8      	blx	r5
		return N_FAIL;
  404fde:	4620      	mov	r0, r4
  404fe0:	e010      	b.n	405004 <spi_read_reg+0xd0>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
  404fe2:	f89d 100d 	ldrb.w	r1, [sp, #13]
  404fe6:	f89d 200e 	ldrb.w	r2, [sp, #14]
  404fea:	0413      	lsls	r3, r2, #16
  404fec:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  404ff0:	f89d 300c 	ldrb.w	r3, [sp, #12]
  404ff4:	4313      	orrs	r3, r2
  404ff6:	f89d 200f 	ldrb.w	r2, [sp, #15]
  404ffa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  404ffe:	f8c8 3000 	str.w	r3, [r8]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
  405002:	2001      	movs	r0, #1
}
  405004:	b004      	add	sp, #16
  405006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40500a:	bf00      	nop
  40500c:	00404ce9 	.word	0x00404ce9
  405010:	0040f2dc 	.word	0x0040f2dc
  405014:	0040e4b0 	.word	0x0040e4b0
  405018:	00407645 	.word	0x00407645
  40501c:	0040ef88 	.word	0x0040ef88
  405020:	0040f6d8 	.word	0x0040f6d8
  405024:	00404afd 	.word	0x00404afd
  405028:	0040efb4 	.word	0x0040efb4
  40502c:	00404bb9 	.word	0x00404bb9
  405030:	0040efe8 	.word	0x0040efe8

00405034 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  405034:	2000      	movs	r0, #0
  405036:	4b01      	ldr	r3, [pc, #4]	; (40503c <nm_spi_deinit+0x8>)
  405038:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  40503a:	4770      	bx	lr
  40503c:	20400974 	.word	0x20400974

00405040 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  405040:	b500      	push	{lr}
  405042:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  405044:	a901      	add	r1, sp, #4
  405046:	4b03      	ldr	r3, [pc, #12]	; (405054 <nm_spi_read_reg+0x14>)
  405048:	4798      	blx	r3

	return u32Val;
}
  40504a:	9801      	ldr	r0, [sp, #4]
  40504c:	b003      	add	sp, #12
  40504e:	f85d fb04 	ldr.w	pc, [sp], #4
  405052:	bf00      	nop
  405054:	00404f35 	.word	0x00404f35

00405058 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  405058:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  40505a:	4b04      	ldr	r3, [pc, #16]	; (40506c <nm_spi_read_reg_with_ret+0x14>)
  40505c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40505e:	2801      	cmp	r0, #1

	return s8Ret;
}
  405060:	bf0c      	ite	eq
  405062:	2000      	moveq	r0, #0
  405064:	f06f 0005 	mvnne.w	r0, #5
  405068:	bd08      	pop	{r3, pc}
  40506a:	bf00      	nop
  40506c:	00404f35 	.word	0x00404f35

00405070 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  405070:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  405072:	4b04      	ldr	r3, [pc, #16]	; (405084 <nm_spi_write_reg+0x14>)
  405074:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  405076:	2801      	cmp	r0, #1

	return s8Ret;
}
  405078:	bf0c      	ite	eq
  40507a:	2000      	moveq	r0, #0
  40507c:	f06f 0005 	mvnne.w	r0, #5
  405080:	bd08      	pop	{r3, pc}
  405082:	bf00      	nop
  405084:	00404e9d 	.word	0x00404e9d

00405088 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
  405088:	b530      	push	{r4, r5, lr}
  40508a:	b083      	sub	sp, #12
	uint32 chipid;
	uint32 reg =0;
  40508c:	2300      	movs	r3, #0
  40508e:	a902      	add	r1, sp, #8
  405090:	f841 3d08 	str.w	r3, [r1, #-8]!

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
  405094:	4a32      	ldr	r2, [pc, #200]	; (405160 <nm_spi_init+0xd8>)
  405096:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  405098:	f64e 0024 	movw	r0, #59428	; 0xe824
  40509c:	4b31      	ldr	r3, [pc, #196]	; (405164 <nm_spi_init+0xdc>)
  40509e:	4798      	blx	r3
  4050a0:	b9f0      	cbnz	r0, 4050e0 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
  4050a2:	2201      	movs	r2, #1
  4050a4:	4b2e      	ldr	r3, [pc, #184]	; (405160 <nm_spi_init+0xd8>)
  4050a6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  4050a8:	f240 22c5 	movw	r2, #709	; 0x2c5
  4050ac:	492e      	ldr	r1, [pc, #184]	; (405168 <nm_spi_init+0xe0>)
  4050ae:	482f      	ldr	r0, [pc, #188]	; (40516c <nm_spi_init+0xe4>)
  4050b0:	4c2f      	ldr	r4, [pc, #188]	; (405170 <nm_spi_init+0xe8>)
  4050b2:	47a0      	blx	r4
  4050b4:	482f      	ldr	r0, [pc, #188]	; (405174 <nm_spi_init+0xec>)
  4050b6:	47a0      	blx	r4
  4050b8:	482f      	ldr	r0, [pc, #188]	; (405178 <nm_spi_init+0xf0>)
  4050ba:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  4050bc:	4669      	mov	r1, sp
  4050be:	f64e 0024 	movw	r0, #59428	; 0xe824
  4050c2:	4b28      	ldr	r3, [pc, #160]	; (405164 <nm_spi_init+0xdc>)
  4050c4:	4798      	blx	r3
  4050c6:	4604      	mov	r4, r0
  4050c8:	b950      	cbnz	r0, 4050e0 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4050ca:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  4050ce:	4926      	ldr	r1, [pc, #152]	; (405168 <nm_spi_init+0xe0>)
  4050d0:	4826      	ldr	r0, [pc, #152]	; (40516c <nm_spi_init+0xe4>)
  4050d2:	4d27      	ldr	r5, [pc, #156]	; (405170 <nm_spi_init+0xe8>)
  4050d4:	47a8      	blx	r5
  4050d6:	4829      	ldr	r0, [pc, #164]	; (40517c <nm_spi_init+0xf4>)
  4050d8:	47a8      	blx	r5
  4050da:	4827      	ldr	r0, [pc, #156]	; (405178 <nm_spi_init+0xf0>)
  4050dc:	47a8      	blx	r5
			return 0;
  4050de:	e03c      	b.n	40515a <nm_spi_init+0xd2>
		}
	}
	if(gu8Crc_off == 0)
  4050e0:	4b1f      	ldr	r3, [pc, #124]	; (405160 <nm_spi_init+0xd8>)
  4050e2:	781b      	ldrb	r3, [r3, #0]
  4050e4:	b9cb      	cbnz	r3, 40511a <nm_spi_init+0x92>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
  4050e6:	9900      	ldr	r1, [sp, #0]
  4050e8:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
  4050ec:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4050f0:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  4050f2:	f64e 0024 	movw	r0, #59428	; 0xe824
  4050f6:	4b22      	ldr	r3, [pc, #136]	; (405180 <nm_spi_init+0xf8>)
  4050f8:	4798      	blx	r3
  4050fa:	4604      	mov	r4, r0
  4050fc:	b950      	cbnz	r0, 405114 <nm_spi_init+0x8c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  4050fe:	f240 22d2 	movw	r2, #722	; 0x2d2
  405102:	4919      	ldr	r1, [pc, #100]	; (405168 <nm_spi_init+0xe0>)
  405104:	4819      	ldr	r0, [pc, #100]	; (40516c <nm_spi_init+0xe4>)
  405106:	4d1a      	ldr	r5, [pc, #104]	; (405170 <nm_spi_init+0xe8>)
  405108:	47a8      	blx	r5
  40510a:	481e      	ldr	r0, [pc, #120]	; (405184 <nm_spi_init+0xfc>)
  40510c:	47a8      	blx	r5
  40510e:	481a      	ldr	r0, [pc, #104]	; (405178 <nm_spi_init+0xf0>)
  405110:	47a8      	blx	r5
			return 0;
  405112:	e022      	b.n	40515a <nm_spi_init+0xd2>
		}
		gu8Crc_off = 1;
  405114:	2201      	movs	r2, #1
  405116:	4b12      	ldr	r3, [pc, #72]	; (405160 <nm_spi_init+0xd8>)
  405118:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
  40511a:	a901      	add	r1, sp, #4
  40511c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  405120:	4b10      	ldr	r3, [pc, #64]	; (405164 <nm_spi_init+0xdc>)
  405122:	4798      	blx	r3
  405124:	b960      	cbnz	r0, 405140 <nm_spi_init+0xb8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  405126:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  40512a:	490f      	ldr	r1, [pc, #60]	; (405168 <nm_spi_init+0xe0>)
  40512c:	480f      	ldr	r0, [pc, #60]	; (40516c <nm_spi_init+0xe4>)
  40512e:	4c10      	ldr	r4, [pc, #64]	; (405170 <nm_spi_init+0xe8>)
  405130:	47a0      	blx	r4
  405132:	4815      	ldr	r0, [pc, #84]	; (405188 <nm_spi_init+0x100>)
  405134:	47a0      	blx	r4
  405136:	4810      	ldr	r0, [pc, #64]	; (405178 <nm_spi_init+0xf0>)
  405138:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  40513a:	f06f 0405 	mvn.w	r4, #5
  40513e:	e00c      	b.n	40515a <nm_spi_init+0xd2>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  405140:	f64e 0024 	movw	r0, #59428	; 0xe824
  405144:	4b11      	ldr	r3, [pc, #68]	; (40518c <nm_spi_init+0x104>)
  405146:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  405148:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  40514c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  405150:	f64e 0024 	movw	r0, #59428	; 0xe824
  405154:	4b0e      	ldr	r3, [pc, #56]	; (405190 <nm_spi_init+0x108>)
  405156:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
  405158:	2400      	movs	r4, #0
}
  40515a:	4620      	mov	r0, r4
  40515c:	b003      	add	sp, #12
  40515e:	bd30      	pop	{r4, r5, pc}
  405160:	20400974 	.word	0x20400974
  405164:	00404f35 	.word	0x00404f35
  405168:	0040edcc 	.word	0x0040edcc
  40516c:	0040e4b0 	.word	0x0040e4b0
  405170:	00407645 	.word	0x00407645
  405174:	0040f008 	.word	0x0040f008
  405178:	0040f6d8 	.word	0x0040f6d8
  40517c:	0040f058 	.word	0x0040f058
  405180:	00404e9d 	.word	0x00404e9d
  405184:	0040f088 	.word	0x0040f088
  405188:	0040f0bc 	.word	0x0040f0bc
  40518c:	00405041 	.word	0x00405041
  405190:	00405071 	.word	0x00405071

00405194 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  405194:	b5f0      	push	{r4, r5, r6, r7, lr}
  405196:	b083      	sub	sp, #12
  405198:	4604      	mov	r4, r0
  40519a:	460f      	mov	r7, r1
  40519c:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  40519e:	2200      	movs	r2, #0
  4051a0:	9200      	str	r2, [sp, #0]
  4051a2:	462b      	mov	r3, r5
  4051a4:	4601      	mov	r1, r0
  4051a6:	20c8      	movs	r0, #200	; 0xc8
  4051a8:	4e23      	ldr	r6, [pc, #140]	; (405238 <nm_spi_read_block+0xa4>)
  4051aa:	47b0      	blx	r6
	if (result != N_OK) {
  4051ac:	2801      	cmp	r0, #1
  4051ae:	d00b      	beq.n	4051c8 <nm_spi_read_block+0x34>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4051b0:	f44f 721d 	mov.w	r2, #628	; 0x274
  4051b4:	4921      	ldr	r1, [pc, #132]	; (40523c <nm_spi_read_block+0xa8>)
  4051b6:	4822      	ldr	r0, [pc, #136]	; (405240 <nm_spi_read_block+0xac>)
  4051b8:	4d22      	ldr	r5, [pc, #136]	; (405244 <nm_spi_read_block+0xb0>)
  4051ba:	47a8      	blx	r5
  4051bc:	4621      	mov	r1, r4
  4051be:	4822      	ldr	r0, [pc, #136]	; (405248 <nm_spi_read_block+0xb4>)
  4051c0:	47a8      	blx	r5
  4051c2:	4822      	ldr	r0, [pc, #136]	; (40524c <nm_spi_read_block+0xb8>)
  4051c4:	47a8      	blx	r5
  4051c6:	e032      	b.n	40522e <nm_spi_read_block+0x9a>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  4051c8:	20c8      	movs	r0, #200	; 0xc8
  4051ca:	4b21      	ldr	r3, [pc, #132]	; (405250 <nm_spi_read_block+0xbc>)
  4051cc:	4798      	blx	r3
	if (result != N_OK) {
  4051ce:	2801      	cmp	r0, #1
  4051d0:	d012      	beq.n	4051f8 <nm_spi_read_block+0x64>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  4051d2:	f240 227a 	movw	r2, #634	; 0x27a
  4051d6:	4919      	ldr	r1, [pc, #100]	; (40523c <nm_spi_read_block+0xa8>)
  4051d8:	4819      	ldr	r0, [pc, #100]	; (405240 <nm_spi_read_block+0xac>)
  4051da:	4d1a      	ldr	r5, [pc, #104]	; (405244 <nm_spi_read_block+0xb0>)
  4051dc:	47a8      	blx	r5
  4051de:	4621      	mov	r1, r4
  4051e0:	481c      	ldr	r0, [pc, #112]	; (405254 <nm_spi_read_block+0xc0>)
  4051e2:	47a8      	blx	r5
  4051e4:	4819      	ldr	r0, [pc, #100]	; (40524c <nm_spi_read_block+0xb8>)
  4051e6:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4051e8:	2100      	movs	r1, #0
  4051ea:	9100      	str	r1, [sp, #0]
  4051ec:	460b      	mov	r3, r1
  4051ee:	460a      	mov	r2, r1
  4051f0:	20cf      	movs	r0, #207	; 0xcf
  4051f2:	4c11      	ldr	r4, [pc, #68]	; (405238 <nm_spi_read_block+0xa4>)
  4051f4:	47a0      	blx	r4
  4051f6:	e01a      	b.n	40522e <nm_spi_read_block+0x9a>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
  4051f8:	2200      	movs	r2, #0
  4051fa:	4629      	mov	r1, r5
  4051fc:	4638      	mov	r0, r7
  4051fe:	4b16      	ldr	r3, [pc, #88]	; (405258 <nm_spi_read_block+0xc4>)
  405200:	4798      	blx	r3
	if (result != N_OK) {
  405202:	2801      	cmp	r0, #1
  405204:	d011      	beq.n	40522a <nm_spi_read_block+0x96>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  405206:	f44f 7221 	mov.w	r2, #644	; 0x284
  40520a:	490c      	ldr	r1, [pc, #48]	; (40523c <nm_spi_read_block+0xa8>)
  40520c:	480c      	ldr	r0, [pc, #48]	; (405240 <nm_spi_read_block+0xac>)
  40520e:	4c0d      	ldr	r4, [pc, #52]	; (405244 <nm_spi_read_block+0xb0>)
  405210:	47a0      	blx	r4
  405212:	4812      	ldr	r0, [pc, #72]	; (40525c <nm_spi_read_block+0xc8>)
  405214:	47a0      	blx	r4
  405216:	480d      	ldr	r0, [pc, #52]	; (40524c <nm_spi_read_block+0xb8>)
  405218:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40521a:	2100      	movs	r1, #0
  40521c:	9100      	str	r1, [sp, #0]
  40521e:	460b      	mov	r3, r1
  405220:	460a      	mov	r2, r1
  405222:	20cf      	movs	r0, #207	; 0xcf
  405224:	4c04      	ldr	r4, [pc, #16]	; (405238 <nm_spi_read_block+0xa4>)
  405226:	47a0      	blx	r4
  405228:	e001      	b.n	40522e <nm_spi_read_block+0x9a>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40522a:	2000      	movs	r0, #0
  40522c:	e001      	b.n	405232 <nm_spi_read_block+0x9e>
	else s8Ret = M2M_ERR_BUS_FAIL;
  40522e:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  405232:	b003      	add	sp, #12
  405234:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405236:	bf00      	nop
  405238:	00404ce9 	.word	0x00404ce9
  40523c:	0040ede8 	.word	0x0040ede8
  405240:	0040e4b0 	.word	0x0040e4b0
  405244:	00407645 	.word	0x00407645
  405248:	0040f0e4 	.word	0x0040f0e4
  40524c:	0040f6d8 	.word	0x0040f6d8
  405250:	00404afd 	.word	0x00404afd
  405254:	0040f114 	.word	0x0040f114
  405258:	00404bb9 	.word	0x00404bb9
  40525c:	0040f14c 	.word	0x0040f14c

00405260 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  405260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405264:	b085      	sub	sp, #20
  405266:	4604      	mov	r4, r0
  405268:	4688      	mov	r8, r1
  40526a:	4615      	mov	r5, r2

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
  40526c:	2200      	movs	r2, #0
  40526e:	9200      	str	r2, [sp, #0]
  405270:	462b      	mov	r3, r5
  405272:	4601      	mov	r1, r0
  405274:	20c7      	movs	r0, #199	; 0xc7
  405276:	4e4c      	ldr	r6, [pc, #304]	; (4053a8 <nm_spi_write_block+0x148>)
  405278:	47b0      	blx	r6
	if (result != N_OK) {
  40527a:	2801      	cmp	r0, #1
  40527c:	d00b      	beq.n	405296 <nm_spi_write_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  40527e:	f240 220f 	movw	r2, #527	; 0x20f
  405282:	494a      	ldr	r1, [pc, #296]	; (4053ac <nm_spi_write_block+0x14c>)
  405284:	484a      	ldr	r0, [pc, #296]	; (4053b0 <nm_spi_write_block+0x150>)
  405286:	4d4b      	ldr	r5, [pc, #300]	; (4053b4 <nm_spi_write_block+0x154>)
  405288:	47a8      	blx	r5
  40528a:	4621      	mov	r1, r4
  40528c:	484a      	ldr	r0, [pc, #296]	; (4053b8 <nm_spi_write_block+0x158>)
  40528e:	47a8      	blx	r5
  405290:	484a      	ldr	r0, [pc, #296]	; (4053bc <nm_spi_write_block+0x15c>)
  405292:	47a8      	blx	r5
  405294:	e082      	b.n	40539c <nm_spi_write_block+0x13c>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
  405296:	20c7      	movs	r0, #199	; 0xc7
  405298:	4b49      	ldr	r3, [pc, #292]	; (4053c0 <nm_spi_write_block+0x160>)
  40529a:	4798      	blx	r3
	if (result != N_OK) {
  40529c:	2801      	cmp	r0, #1
  40529e:	d012      	beq.n	4052c6 <nm_spi_write_block+0x66>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4052a0:	f240 2215 	movw	r2, #533	; 0x215
  4052a4:	4941      	ldr	r1, [pc, #260]	; (4053ac <nm_spi_write_block+0x14c>)
  4052a6:	4842      	ldr	r0, [pc, #264]	; (4053b0 <nm_spi_write_block+0x150>)
  4052a8:	4d42      	ldr	r5, [pc, #264]	; (4053b4 <nm_spi_write_block+0x154>)
  4052aa:	47a8      	blx	r5
  4052ac:	4621      	mov	r1, r4
  4052ae:	4845      	ldr	r0, [pc, #276]	; (4053c4 <nm_spi_write_block+0x164>)
  4052b0:	47a8      	blx	r5
  4052b2:	4842      	ldr	r0, [pc, #264]	; (4053bc <nm_spi_write_block+0x15c>)
  4052b4:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4052b6:	2100      	movs	r1, #0
  4052b8:	9100      	str	r1, [sp, #0]
  4052ba:	460b      	mov	r3, r1
  4052bc:	460a      	mov	r2, r1
  4052be:	20cf      	movs	r0, #207	; 0xcf
  4052c0:	4c39      	ldr	r4, [pc, #228]	; (4053a8 <nm_spi_write_block+0x148>)
  4052c2:	47a0      	blx	r4
  4052c4:	e06a      	b.n	40539c <nm_spi_write_block+0x13c>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
  4052c6:	2400      	movs	r4, #0
  4052c8:	f8ad 400c 	strh.w	r4, [sp, #12]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4052cc:	4f3e      	ldr	r7, [pc, #248]	; (4053c8 <nm_spi_write_block+0x168>)
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  4052ce:	f8df 9110 	ldr.w	r9, [pc, #272]	; 4053e0 <nm_spi_write_block+0x180>
  4052d2:	462e      	mov	r6, r5
  4052d4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4052d8:	bf28      	it	cs
  4052da:	f44f 5600 	movcs.w	r6, #8192	; 0x2000

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
  4052de:	b92c      	cbnz	r4, 4052ec <nm_spi_write_block+0x8c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
  4052e0:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4052e4:	bf94      	ite	ls
  4052e6:	2303      	movls	r3, #3
  4052e8:	2301      	movhi	r3, #1
  4052ea:	e004      	b.n	4052f6 <nm_spi_write_block+0x96>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
  4052ec:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4052f0:	bf94      	ite	ls
  4052f2:	2303      	movls	r3, #3
  4052f4:	2302      	movhi	r3, #2
		}
		cmd |= order;
  4052f6:	f063 030f 	orn	r3, r3, #15
  4052fa:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4052fe:	2101      	movs	r1, #1
  405300:	f10d 000b 	add.w	r0, sp, #11
  405304:	47b8      	blx	r7
  405306:	b150      	cbz	r0, 40531e <nm_spi_write_block+0xbe>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  405308:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  40530c:	492f      	ldr	r1, [pc, #188]	; (4053cc <nm_spi_write_block+0x16c>)
  40530e:	4828      	ldr	r0, [pc, #160]	; (4053b0 <nm_spi_write_block+0x150>)
  405310:	4c28      	ldr	r4, [pc, #160]	; (4053b4 <nm_spi_write_block+0x154>)
  405312:	47a0      	blx	r4
  405314:	482e      	ldr	r0, [pc, #184]	; (4053d0 <nm_spi_write_block+0x170>)
  405316:	47a0      	blx	r4
  405318:	4828      	ldr	r0, [pc, #160]	; (4053bc <nm_spi_write_block+0x15c>)
  40531a:	47a0      	blx	r4
  40531c:	e028      	b.n	405370 <nm_spi_write_block+0x110>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  40531e:	4631      	mov	r1, r6
  405320:	eb08 0004 	add.w	r0, r8, r4
  405324:	47b8      	blx	r7
  405326:	b150      	cbz	r0, 40533e <nm_spi_write_block+0xde>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  405328:	f240 12b1 	movw	r2, #433	; 0x1b1
  40532c:	4927      	ldr	r1, [pc, #156]	; (4053cc <nm_spi_write_block+0x16c>)
  40532e:	4820      	ldr	r0, [pc, #128]	; (4053b0 <nm_spi_write_block+0x150>)
  405330:	4c20      	ldr	r4, [pc, #128]	; (4053b4 <nm_spi_write_block+0x154>)
  405332:	47a0      	blx	r4
  405334:	4827      	ldr	r0, [pc, #156]	; (4053d4 <nm_spi_write_block+0x174>)
  405336:	47a0      	blx	r4
  405338:	4820      	ldr	r0, [pc, #128]	; (4053bc <nm_spi_write_block+0x15c>)
  40533a:	47a0      	blx	r4
  40533c:	e018      	b.n	405370 <nm_spi_write_block+0x110>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
  40533e:	f899 3000 	ldrb.w	r3, [r9]
  405342:	b973      	cbnz	r3, 405362 <nm_spi_write_block+0x102>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  405344:	2102      	movs	r1, #2
  405346:	a803      	add	r0, sp, #12
  405348:	47b8      	blx	r7
  40534a:	b150      	cbz	r0, 405362 <nm_spi_write_block+0x102>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  40534c:	f240 12bb 	movw	r2, #443	; 0x1bb
  405350:	491e      	ldr	r1, [pc, #120]	; (4053cc <nm_spi_write_block+0x16c>)
  405352:	4817      	ldr	r0, [pc, #92]	; (4053b0 <nm_spi_write_block+0x150>)
  405354:	4c17      	ldr	r4, [pc, #92]	; (4053b4 <nm_spi_write_block+0x154>)
  405356:	47a0      	blx	r4
  405358:	481f      	ldr	r0, [pc, #124]	; (4053d8 <nm_spi_write_block+0x178>)
  40535a:	47a0      	blx	r4
  40535c:	4817      	ldr	r0, [pc, #92]	; (4053bc <nm_spi_write_block+0x15c>)
  40535e:	47a0      	blx	r4
  405360:	e006      	b.n	405370 <nm_spi_write_block+0x110>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
  405362:	4434      	add	r4, r6
  405364:	b224      	sxth	r4, r4
		sz -= nbytes;
  405366:	1bad      	subs	r5, r5, r6
  405368:	b2ad      	uxth	r5, r5
	} while (sz);
  40536a:	2d00      	cmp	r5, #0
  40536c:	d1b1      	bne.n	4052d2 <nm_spi_write_block+0x72>
  40536e:	e013      	b.n	405398 <nm_spi_write_block+0x138>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  405370:	f240 2226 	movw	r2, #550	; 0x226
  405374:	490d      	ldr	r1, [pc, #52]	; (4053ac <nm_spi_write_block+0x14c>)
  405376:	480e      	ldr	r0, [pc, #56]	; (4053b0 <nm_spi_write_block+0x150>)
  405378:	4c0e      	ldr	r4, [pc, #56]	; (4053b4 <nm_spi_write_block+0x154>)
  40537a:	47a0      	blx	r4
  40537c:	4817      	ldr	r0, [pc, #92]	; (4053dc <nm_spi_write_block+0x17c>)
  40537e:	47a0      	blx	r4
  405380:	480e      	ldr	r0, [pc, #56]	; (4053bc <nm_spi_write_block+0x15c>)
  405382:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  405384:	2400      	movs	r4, #0
  405386:	9400      	str	r4, [sp, #0]
  405388:	4623      	mov	r3, r4
  40538a:	4622      	mov	r2, r4
  40538c:	4621      	mov	r1, r4
  40538e:	20cf      	movs	r0, #207	; 0xcf
  405390:	4d05      	ldr	r5, [pc, #20]	; (4053a8 <nm_spi_write_block+0x148>)
  405392:	47a8      	blx	r5
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  405394:	4620      	mov	r0, r4
  405396:	e003      	b.n	4053a0 <nm_spi_write_block+0x140>
  405398:	2000      	movs	r0, #0
  40539a:	e001      	b.n	4053a0 <nm_spi_write_block+0x140>
	else s8Ret = M2M_ERR_BUS_FAIL;
  40539c:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4053a0:	b005      	add	sp, #20
  4053a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4053a6:	bf00      	nop
  4053a8:	00404ce9 	.word	0x00404ce9
  4053ac:	0040f2c0 	.word	0x0040f2c0
  4053b0:	0040e4b0 	.word	0x0040e4b0
  4053b4:	00407645 	.word	0x00407645
  4053b8:	0040f174 	.word	0x0040f174
  4053bc:	0040f6d8 	.word	0x0040f6d8
  4053c0:	00404afd 	.word	0x00404afd
  4053c4:	0040f1a4 	.word	0x0040f1a4
  4053c8:	00404cc9 	.word	0x00404cc9
  4053cc:	0040edd8 	.word	0x0040edd8
  4053d0:	0040f1dc 	.word	0x0040f1dc
  4053d4:	0040f214 	.word	0x0040f214
  4053d8:	0040f248 	.word	0x0040f248
  4053dc:	0040f280 	.word	0x0040f280
  4053e0:	20400974 	.word	0x20400974

004053e4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  4053e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053e8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  4053ec:	2c00      	cmp	r4, #0
  4053ee:	d047      	beq.n	405480 <Socket_ReadSocketData+0x9c>
  4053f0:	4681      	mov	r9, r0
  4053f2:	460e      	mov	r6, r1
  4053f4:	4692      	mov	sl, r2
  4053f6:	4698      	mov	r8, r3
  4053f8:	0103      	lsls	r3, r0, #4
  4053fa:	4922      	ldr	r1, [pc, #136]	; (405484 <Socket_ReadSocketData+0xa0>)
  4053fc:	58cb      	ldr	r3, [r1, r3]
  4053fe:	2b00      	cmp	r3, #0
  405400:	d03e      	beq.n	405480 <Socket_ReadSocketData+0x9c>
  405402:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  405406:	889b      	ldrh	r3, [r3, #4]
  405408:	b29b      	uxth	r3, r3
  40540a:	2b00      	cmp	r3, #0
  40540c:	d038      	beq.n	405480 <Socket_ReadSocketData+0x9c>
  40540e:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  405412:	7a9b      	ldrb	r3, [r3, #10]
  405414:	b2db      	uxtb	r3, r3
  405416:	2b01      	cmp	r3, #1
  405418:	d132      	bne.n	405480 <Socket_ReadSocketData+0x9c>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  40541a:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  40541c:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  405420:	f8df b078 	ldr.w	fp, [pc, #120]	; 40549c <Socket_ReadSocketData+0xb8>
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  405424:	88bb      	ldrh	r3, [r7, #4]
			if(s16Diff > 0)
  405426:	1ae3      	subs	r3, r4, r3
  405428:	b21b      	sxth	r3, r3
  40542a:	2b00      	cmp	r3, #0
  40542c:	dd03      	ble.n	405436 <Socket_ReadSocketData+0x52>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  40542e:	88bd      	ldrh	r5, [r7, #4]
  405430:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
  405432:	2300      	movs	r3, #0
  405434:	e001      	b.n	40543a <Socket_ReadSocketData+0x56>
  405436:	4625      	mov	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
  405438:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  40543a:	6839      	ldr	r1, [r7, #0]
  40543c:	462a      	mov	r2, r5
  40543e:	4640      	mov	r0, r8
  405440:	47d8      	blx	fp
  405442:	b9a8      	cbnz	r0, 405470 <Socket_ReadSocketData+0x8c>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  405444:	683b      	ldr	r3, [r7, #0]
  405446:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  405448:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  40544a:	88f3      	ldrh	r3, [r6, #6]
  40544c:	1b5b      	subs	r3, r3, r5
  40544e:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
  405450:	4b0d      	ldr	r3, [pc, #52]	; (405488 <Socket_ReadSocketData+0xa4>)
  405452:	681b      	ldr	r3, [r3, #0]
  405454:	b12b      	cbz	r3, 405462 <Socket_ReadSocketData+0x7e>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  405456:	4b0c      	ldr	r3, [pc, #48]	; (405488 <Socket_ReadSocketData+0xa4>)
  405458:	681b      	ldr	r3, [r3, #0]
  40545a:	4632      	mov	r2, r6
  40545c:	4651      	mov	r1, sl
  40545e:	4648      	mov	r0, r9
  405460:	4798      	blx	r3

				u16ReadCount -= u16Read;
  405462:	1b64      	subs	r4, r4, r5
  405464:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  405466:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  405468:	2c00      	cmp	r4, #0
  40546a:	d1db      	bne.n	405424 <Socket_ReadSocketData+0x40>
  40546c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  405470:	4806      	ldr	r0, [pc, #24]	; (40548c <Socket_ReadSocketData+0xa8>)
  405472:	4d07      	ldr	r5, [pc, #28]	; (405490 <Socket_ReadSocketData+0xac>)
  405474:	47a8      	blx	r5
  405476:	4621      	mov	r1, r4
  405478:	4806      	ldr	r0, [pc, #24]	; (405494 <Socket_ReadSocketData+0xb0>)
  40547a:	47a8      	blx	r5
  40547c:	4806      	ldr	r0, [pc, #24]	; (405498 <Socket_ReadSocketData+0xb4>)
  40547e:	47a8      	blx	r5
  405480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405484:	2040159c 	.word	0x2040159c
  405488:	2040164c 	.word	0x2040164c
  40548c:	0040e770 	.word	0x0040e770
  405490:	00407645 	.word	0x00407645
  405494:	0040f2ec 	.word	0x0040f2ec
  405498:	0040f6d8 	.word	0x0040f6d8
  40549c:	00403b51 	.word	0x00403b51

004054a0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  4054a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4054a2:	b099      	sub	sp, #100	; 0x64
  4054a4:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  4054a6:	2841      	cmp	r0, #65	; 0x41
  4054a8:	d119      	bne.n	4054de <m2m_ip_cb+0x3e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4054aa:	2300      	movs	r3, #0
  4054ac:	2204      	movs	r2, #4
  4054ae:	a907      	add	r1, sp, #28
  4054b0:	4620      	mov	r0, r4
  4054b2:	4ca4      	ldr	r4, [pc, #656]	; (405744 <m2m_ip_cb+0x2a4>)
  4054b4:	47a0      	blx	r4
  4054b6:	2800      	cmp	r0, #0
  4054b8:	f040 8141 	bne.w	40573e <m2m_ip_cb+0x29e>
		{
			strBind.status = strBindReply.s8Status;
  4054bc:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4054c0:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4054c4:	4ba0      	ldr	r3, [pc, #640]	; (405748 <m2m_ip_cb+0x2a8>)
  4054c6:	681b      	ldr	r3, [r3, #0]
  4054c8:	2b00      	cmp	r3, #0
  4054ca:	f000 8138 	beq.w	40573e <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4054ce:	4b9e      	ldr	r3, [pc, #632]	; (405748 <m2m_ip_cb+0x2a8>)
  4054d0:	681b      	ldr	r3, [r3, #0]
  4054d2:	aa03      	add	r2, sp, #12
  4054d4:	2101      	movs	r1, #1
  4054d6:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4054da:	4798      	blx	r3
  4054dc:	e12f      	b.n	40573e <m2m_ip_cb+0x29e>
  4054de:	460d      	mov	r5, r1
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  4054e0:	2842      	cmp	r0, #66	; 0x42
  4054e2:	d119      	bne.n	405518 <m2m_ip_cb+0x78>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  4054e4:	2300      	movs	r3, #0
  4054e6:	2204      	movs	r2, #4
  4054e8:	a907      	add	r1, sp, #28
  4054ea:	4620      	mov	r0, r4
  4054ec:	4c95      	ldr	r4, [pc, #596]	; (405744 <m2m_ip_cb+0x2a4>)
  4054ee:	47a0      	blx	r4
  4054f0:	2800      	cmp	r0, #0
  4054f2:	f040 8124 	bne.w	40573e <m2m_ip_cb+0x29e>
		{
			strListen.status = strListenReply.s8Status;
  4054f6:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4054fa:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4054fe:	4b92      	ldr	r3, [pc, #584]	; (405748 <m2m_ip_cb+0x2a8>)
  405500:	681b      	ldr	r3, [r3, #0]
  405502:	2b00      	cmp	r3, #0
  405504:	f000 811b 	beq.w	40573e <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  405508:	4b8f      	ldr	r3, [pc, #572]	; (405748 <m2m_ip_cb+0x2a8>)
  40550a:	681b      	ldr	r3, [r3, #0]
  40550c:	aa03      	add	r2, sp, #12
  40550e:	2102      	movs	r1, #2
  405510:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  405514:	4798      	blx	r3
  405516:	e112      	b.n	40573e <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  405518:	2843      	cmp	r0, #67	; 0x43
  40551a:	d13f      	bne.n	40559c <m2m_ip_cb+0xfc>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  40551c:	2300      	movs	r3, #0
  40551e:	220c      	movs	r2, #12
  405520:	eb0d 0102 	add.w	r1, sp, r2
  405524:	4620      	mov	r0, r4
  405526:	4c87      	ldr	r4, [pc, #540]	; (405744 <m2m_ip_cb+0x2a4>)
  405528:	47a0      	blx	r4
  40552a:	2800      	cmp	r0, #0
  40552c:	f040 8107 	bne.w	40573e <m2m_ip_cb+0x29e>
		{
			if(strAcceptReply.sConnectedSock >= 0)
  405530:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  405534:	2b00      	cmp	r3, #0
  405536:	db19      	blt.n	40556c <m2m_ip_cb+0xcc>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  405538:	4a84      	ldr	r2, [pc, #528]	; (40574c <m2m_ip_cb+0x2ac>)
  40553a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  40553e:	2100      	movs	r1, #0
  405540:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  405542:	2101      	movs	r1, #1
  405544:	7291      	strb	r1, [r2, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  405546:	4982      	ldr	r1, [pc, #520]	; (405750 <m2m_ip_cb+0x2b0>)
  405548:	880a      	ldrh	r2, [r1, #0]
  40554a:	3201      	adds	r2, #1
  40554c:	b292      	uxth	r2, r2
  40554e:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  405550:	880a      	ldrh	r2, [r1, #0]
  405552:	b292      	uxth	r2, r2
  405554:	b91a      	cbnz	r2, 40555e <m2m_ip_cb+0xbe>
					++gu16SessionID;
  405556:	880a      	ldrh	r2, [r1, #0]
  405558:	3201      	adds	r2, #1
  40555a:	b292      	uxth	r2, r2
  40555c:	800a      	strh	r2, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  40555e:	4a7c      	ldr	r2, [pc, #496]	; (405750 <m2m_ip_cb+0x2b0>)
  405560:	8811      	ldrh	r1, [r2, #0]
  405562:	b289      	uxth	r1, r1
  405564:	4a79      	ldr	r2, [pc, #484]	; (40574c <m2m_ip_cb+0x2ac>)
  405566:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  40556a:	80d1      	strh	r1, [r2, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
  40556c:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  405570:	2302      	movs	r3, #2
  405572:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  405576:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  40557a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  40557e:	9b04      	ldr	r3, [sp, #16]
  405580:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  405582:	4b71      	ldr	r3, [pc, #452]	; (405748 <m2m_ip_cb+0x2a8>)
  405584:	681b      	ldr	r3, [r3, #0]
  405586:	2b00      	cmp	r3, #0
  405588:	f000 80d9 	beq.w	40573e <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  40558c:	4b6e      	ldr	r3, [pc, #440]	; (405748 <m2m_ip_cb+0x2a8>)
  40558e:	681b      	ldr	r3, [r3, #0]
  405590:	aa07      	add	r2, sp, #28
  405592:	2104      	movs	r1, #4
  405594:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  405598:	4798      	blx	r3
  40559a:	e0d0      	b.n	40573e <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  40559c:	2844      	cmp	r0, #68	; 0x44
  40559e:	d001      	beq.n	4055a4 <m2m_ip_cb+0x104>
  4055a0:	284b      	cmp	r0, #75	; 0x4b
  4055a2:	d124      	bne.n	4055ee <m2m_ip_cb+0x14e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4055a4:	2300      	movs	r3, #0
  4055a6:	2204      	movs	r2, #4
  4055a8:	a907      	add	r1, sp, #28
  4055aa:	4620      	mov	r0, r4
  4055ac:	4c65      	ldr	r4, [pc, #404]	; (405744 <m2m_ip_cb+0x2a4>)
  4055ae:	47a0      	blx	r4
  4055b0:	2800      	cmp	r0, #0
  4055b2:	f040 80c4 	bne.w	40573e <m2m_ip_cb+0x29e>
		{
			strConnMsg.sock		= strConnectReply.sock;
  4055b6:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4055ba:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4055be:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4055c2:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4055c6:	b93b      	cbnz	r3, 4055d8 <m2m_ip_cb+0x138>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4055c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4055cc:	3b08      	subs	r3, #8
  4055ce:	b29b      	uxth	r3, r3
  4055d0:	4a5e      	ldr	r2, [pc, #376]	; (40574c <m2m_ip_cb+0x2ac>)
  4055d2:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4055d6:	8113      	strh	r3, [r2, #8]
			}
			if(gpfAppSocketCb)
  4055d8:	4b5b      	ldr	r3, [pc, #364]	; (405748 <m2m_ip_cb+0x2a8>)
  4055da:	681b      	ldr	r3, [r3, #0]
  4055dc:	2b00      	cmp	r3, #0
  4055de:	f000 80ae 	beq.w	40573e <m2m_ip_cb+0x29e>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4055e2:	4b59      	ldr	r3, [pc, #356]	; (405748 <m2m_ip_cb+0x2a8>)
  4055e4:	681b      	ldr	r3, [r3, #0]
  4055e6:	aa03      	add	r2, sp, #12
  4055e8:	2105      	movs	r1, #5
  4055ea:	4798      	blx	r3
  4055ec:	e0a7      	b.n	40573e <m2m_ip_cb+0x29e>
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  4055ee:	284a      	cmp	r0, #74	; 0x4a
  4055f0:	d113      	bne.n	40561a <m2m_ip_cb+0x17a>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4055f2:	2300      	movs	r3, #0
  4055f4:	2244      	movs	r2, #68	; 0x44
  4055f6:	a907      	add	r1, sp, #28
  4055f8:	4620      	mov	r0, r4
  4055fa:	4c52      	ldr	r4, [pc, #328]	; (405744 <m2m_ip_cb+0x2a4>)
  4055fc:	47a0      	blx	r4
  4055fe:	2800      	cmp	r0, #0
  405600:	f040 809d 	bne.w	40573e <m2m_ip_cb+0x29e>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
  405604:	4b53      	ldr	r3, [pc, #332]	; (405754 <m2m_ip_cb+0x2b4>)
  405606:	681b      	ldr	r3, [r3, #0]
  405608:	2b00      	cmp	r3, #0
  40560a:	f000 8098 	beq.w	40573e <m2m_ip_cb+0x29e>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  40560e:	4b51      	ldr	r3, [pc, #324]	; (405754 <m2m_ip_cb+0x2b4>)
  405610:	681b      	ldr	r3, [r3, #0]
  405612:	9917      	ldr	r1, [sp, #92]	; 0x5c
  405614:	a807      	add	r0, sp, #28
  405616:	4798      	blx	r3
  405618:	e091      	b.n	40573e <m2m_ip_cb+0x29e>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40561a:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  40561e:	b2db      	uxtb	r3, r3
  405620:	2b07      	cmp	r3, #7
  405622:	d84d      	bhi.n	4056c0 <m2m_ip_cb+0x220>
  405624:	2285      	movs	r2, #133	; 0x85
  405626:	fa22 f303 	lsr.w	r3, r2, r3
  40562a:	f013 0f01 	tst.w	r3, #1
  40562e:	d047      	beq.n	4056c0 <m2m_ip_cb+0x220>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  405630:	2848      	cmp	r0, #72	; 0x48
  405632:	bf14      	ite	ne
  405634:	2706      	movne	r7, #6
  405636:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  405638:	2300      	movs	r3, #0
  40563a:	2210      	movs	r2, #16
  40563c:	a903      	add	r1, sp, #12
  40563e:	4620      	mov	r0, r4
  405640:	4e40      	ldr	r6, [pc, #256]	; (405744 <m2m_ip_cb+0x2a4>)
  405642:	47b0      	blx	r6
  405644:	2800      	cmp	r0, #0
  405646:	d17a      	bne.n	40573e <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  405648:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  40564c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  405650:	4a3e      	ldr	r2, [pc, #248]	; (40574c <m2m_ip_cb+0x2ac>)
  405652:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  405656:	2300      	movs	r3, #0
  405658:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  40565a:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  40565e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  405662:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  405666:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  40566a:	9e04      	ldr	r6, [sp, #16]
  40566c:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  40566e:	88d2      	ldrh	r2, [r2, #6]
  405670:	b292      	uxth	r2, r2
  405672:	4291      	cmp	r1, r2
  405674:	d11b      	bne.n	4056ae <m2m_ip_cb+0x20e>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  405676:	f1be 0f00 	cmp.w	lr, #0
  40567a:	dd0a      	ble.n	405692 <m2m_ip_cb+0x1f2>
  40567c:	45ae      	cmp	lr, r5
  40567e:	da08      	bge.n	405692 <m2m_ip_cb+0x1f2>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  405680:	fa1f f28e 	uxth.w	r2, lr
  405684:	9200      	str	r2, [sp, #0]
  405686:	4423      	add	r3, r4
  405688:	463a      	mov	r2, r7
  40568a:	a907      	add	r1, sp, #28
  40568c:	4c32      	ldr	r4, [pc, #200]	; (405758 <m2m_ip_cb+0x2b8>)
  40568e:	47a0      	blx	r4
  405690:	e055      	b.n	40573e <m2m_ip_cb+0x29e>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  405692:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  405696:	2300      	movs	r3, #0
  405698:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  40569a:	4b2b      	ldr	r3, [pc, #172]	; (405748 <m2m_ip_cb+0x2a8>)
  40569c:	681b      	ldr	r3, [r3, #0]
  40569e:	2b00      	cmp	r3, #0
  4056a0:	d04d      	beq.n	40573e <m2m_ip_cb+0x29e>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  4056a2:	4b29      	ldr	r3, [pc, #164]	; (405748 <m2m_ip_cb+0x2a8>)
  4056a4:	681b      	ldr	r3, [r3, #0]
  4056a6:	aa07      	add	r2, sp, #28
  4056a8:	4639      	mov	r1, r7
  4056aa:	4798      	blx	r3
  4056ac:	e047      	b.n	40573e <m2m_ip_cb+0x29e>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4056ae:	2d10      	cmp	r5, #16
  4056b0:	d945      	bls.n	40573e <m2m_ip_cb+0x29e>
					hif_receive(0, NULL, 0, 1);
  4056b2:	2301      	movs	r3, #1
  4056b4:	2200      	movs	r2, #0
  4056b6:	4611      	mov	r1, r2
  4056b8:	4610      	mov	r0, r2
  4056ba:	4c22      	ldr	r4, [pc, #136]	; (405744 <m2m_ip_cb+0x2a4>)
  4056bc:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
  4056be:	e03e      	b.n	40573e <m2m_ip_cb+0x29e>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  4056c0:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  4056c4:	2b45      	cmp	r3, #69	; 0x45
  4056c6:	d001      	beq.n	4056cc <m2m_ip_cb+0x22c>
  4056c8:	284c      	cmp	r0, #76	; 0x4c
  4056ca:	d123      	bne.n	405714 <m2m_ip_cb+0x274>
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  4056cc:	2847      	cmp	r0, #71	; 0x47
  4056ce:	bf14      	ite	ne
  4056d0:	2507      	movne	r5, #7
  4056d2:	2508      	moveq	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  4056d4:	2300      	movs	r3, #0
  4056d6:	2208      	movs	r2, #8
  4056d8:	a907      	add	r1, sp, #28
  4056da:	4620      	mov	r0, r4
  4056dc:	4c19      	ldr	r4, [pc, #100]	; (405744 <m2m_ip_cb+0x2a4>)
  4056de:	47a0      	blx	r4
  4056e0:	2800      	cmp	r0, #0
  4056e2:	d12c      	bne.n	40573e <m2m_ip_cb+0x29e>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
  4056e4:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  4056e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  4056ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4056f0:	f8ad 300c 	strh.w	r3, [sp, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4056f4:	4b15      	ldr	r3, [pc, #84]	; (40574c <m2m_ip_cb+0x2ac>)
  4056f6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4056fa:	88db      	ldrh	r3, [r3, #6]
  4056fc:	b29b      	uxth	r3, r3
  4056fe:	429a      	cmp	r2, r3
  405700:	d11d      	bne.n	40573e <m2m_ip_cb+0x29e>
			{
				if(gpfAppSocketCb)
  405702:	4b11      	ldr	r3, [pc, #68]	; (405748 <m2m_ip_cb+0x2a8>)
  405704:	681b      	ldr	r3, [r3, #0]
  405706:	b1d3      	cbz	r3, 40573e <m2m_ip_cb+0x29e>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  405708:	4b0f      	ldr	r3, [pc, #60]	; (405748 <m2m_ip_cb+0x2a8>)
  40570a:	681b      	ldr	r3, [r3, #0]
  40570c:	aa03      	add	r2, sp, #12
  40570e:	4629      	mov	r1, r5
  405710:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
  405712:	e014      	b.n	40573e <m2m_ip_cb+0x29e>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
  405714:	2852      	cmp	r0, #82	; 0x52
  405716:	d112      	bne.n	40573e <m2m_ip_cb+0x29e>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  405718:	2301      	movs	r3, #1
  40571a:	2214      	movs	r2, #20
  40571c:	a907      	add	r1, sp, #28
  40571e:	4620      	mov	r0, r4
  405720:	4c08      	ldr	r4, [pc, #32]	; (405744 <m2m_ip_cb+0x2a4>)
  405722:	47a0      	blx	r4
  405724:	b958      	cbnz	r0, 40573e <m2m_ip_cb+0x29e>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  405726:	4b0d      	ldr	r3, [pc, #52]	; (40575c <m2m_ip_cb+0x2bc>)
  405728:	9a08      	ldr	r2, [sp, #32]
  40572a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  40572c:	681b      	ldr	r3, [r3, #0]
  40572e:	b133      	cbz	r3, 40573e <m2m_ip_cb+0x29e>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  405730:	4b0a      	ldr	r3, [pc, #40]	; (40575c <m2m_ip_cb+0x2bc>)
  405732:	681b      	ldr	r3, [r3, #0]
  405734:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  405738:	9909      	ldr	r1, [sp, #36]	; 0x24
  40573a:	9807      	ldr	r0, [sp, #28]
  40573c:	4798      	blx	r3
			}
		}
	}
}
  40573e:	b019      	add	sp, #100	; 0x64
  405740:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405742:	bf00      	nop
  405744:	00403b51 	.word	0x00403b51
  405748:	2040164c 	.word	0x2040164c
  40574c:	2040159c 	.word	0x2040159c
  405750:	20400976 	.word	0x20400976
  405754:	20401654 	.word	0x20401654
  405758:	004053e5 	.word	0x004053e5
  40575c:	20401650 	.word	0x20401650

00405760 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  405760:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  405762:	4b0a      	ldr	r3, [pc, #40]	; (40578c <socketInit+0x2c>)
  405764:	781b      	ldrb	r3, [r3, #0]
  405766:	f013 0fff 	tst.w	r3, #255	; 0xff
  40576a:	d10e      	bne.n	40578a <socketInit+0x2a>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  40576c:	22b0      	movs	r2, #176	; 0xb0
  40576e:	2100      	movs	r1, #0
  405770:	4807      	ldr	r0, [pc, #28]	; (405790 <socketInit+0x30>)
  405772:	4b08      	ldr	r3, [pc, #32]	; (405794 <socketInit+0x34>)
  405774:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  405776:	4908      	ldr	r1, [pc, #32]	; (405798 <socketInit+0x38>)
  405778:	2002      	movs	r0, #2
  40577a:	4b08      	ldr	r3, [pc, #32]	; (40579c <socketInit+0x3c>)
  40577c:	4798      	blx	r3
		gbSocketInit=1;
  40577e:	2201      	movs	r2, #1
  405780:	4b02      	ldr	r3, [pc, #8]	; (40578c <socketInit+0x2c>)
  405782:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  405784:	2200      	movs	r2, #0
  405786:	4b06      	ldr	r3, [pc, #24]	; (4057a0 <socketInit+0x40>)
  405788:	801a      	strh	r2, [r3, #0]
  40578a:	bd08      	pop	{r3, pc}
  40578c:	20400975 	.word	0x20400975
  405790:	2040159c 	.word	0x2040159c
  405794:	004034f5 	.word	0x004034f5
  405798:	004054a1 	.word	0x004054a1
  40579c:	00403c61 	.word	0x00403c61
  4057a0:	20400976 	.word	0x20400976

004057a4 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  4057a4:	4b02      	ldr	r3, [pc, #8]	; (4057b0 <registerSocketCallback+0xc>)
  4057a6:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  4057a8:	4b02      	ldr	r3, [pc, #8]	; (4057b4 <registerSocketCallback+0x10>)
  4057aa:	6019      	str	r1, [r3, #0]
  4057ac:	4770      	bx	lr
  4057ae:	bf00      	nop
  4057b0:	2040164c 	.word	0x2040164c
  4057b4:	20401654 	.word	0x20401654

004057b8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  4057b8:	b570      	push	{r4, r5, r6, lr}
  4057ba:	b086      	sub	sp, #24
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  4057bc:	2802      	cmp	r0, #2
  4057be:	d14b      	bne.n	405858 <socket+0xa0>
	{
		if(u8Type == SOCK_STREAM)
  4057c0:	2901      	cmp	r1, #1
  4057c2:	d04c      	beq.n	40585e <socket+0xa6>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  4057c4:	2902      	cmp	r1, #2
  4057c6:	d04d      	beq.n	405864 <socket+0xac>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
  4057c8:	f04f 34ff 	mov.w	r4, #4294967295
  4057cc:	e058      	b.n	405880 <socket+0xc8>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4057ce:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  4057d0:	eb00 1304 	add.w	r3, r0, r4, lsl #4
  4057d4:	7a9b      	ldrb	r3, [r3, #10]
  4057d6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4057da:	d136      	bne.n	40584a <socket+0x92>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  4057dc:	482a      	ldr	r0, [pc, #168]	; (405888 <socket+0xd0>)
  4057de:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4057e2:	4616      	mov	r6, r2
			if(pstrSock->bIsUsed == 0)
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  4057e4:	2210      	movs	r2, #16
  4057e6:	2100      	movs	r1, #0
  4057e8:	4b28      	ldr	r3, [pc, #160]	; (40588c <socket+0xd4>)
  4057ea:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  4057ec:	4b26      	ldr	r3, [pc, #152]	; (405888 <socket+0xd0>)
  4057ee:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4057f2:	2201      	movs	r2, #1
  4057f4:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4057f6:	4a26      	ldr	r2, [pc, #152]	; (405890 <socket+0xd8>)
  4057f8:	8813      	ldrh	r3, [r2, #0]
  4057fa:	3301      	adds	r3, #1
  4057fc:	b29b      	uxth	r3, r3
  4057fe:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  405800:	8813      	ldrh	r3, [r2, #0]
  405802:	b29b      	uxth	r3, r3
  405804:	b91b      	cbnz	r3, 40580e <socket+0x56>
					++gu16SessionID;
  405806:	8813      	ldrh	r3, [r2, #0]
  405808:	3301      	adds	r3, #1
  40580a:	b29b      	uxth	r3, r3
  40580c:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  40580e:	4b20      	ldr	r3, [pc, #128]	; (405890 <socket+0xd8>)
  405810:	881a      	ldrh	r2, [r3, #0]
  405812:	b292      	uxth	r2, r2
  405814:	4b1c      	ldr	r3, [pc, #112]	; (405888 <socket+0xd0>)
  405816:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40581a:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  40581c:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  40581e:	f016 0f01 	tst.w	r6, #1
  405822:	d02d      	beq.n	405880 <socket+0xc8>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  405824:	aa06      	add	r2, sp, #24
  405826:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  40582a:	4b17      	ldr	r3, [pc, #92]	; (405888 <socket+0xd0>)
  40582c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  405830:	2321      	movs	r3, #33	; 0x21
  405832:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  405834:	2300      	movs	r3, #0
  405836:	9302      	str	r3, [sp, #8]
  405838:	9301      	str	r3, [sp, #4]
  40583a:	9300      	str	r3, [sp, #0]
  40583c:	2304      	movs	r3, #4
  40583e:	2150      	movs	r1, #80	; 0x50
  405840:	2002      	movs	r0, #2
  405842:	4d14      	ldr	r5, [pc, #80]	; (405894 <socket+0xdc>)
  405844:	47a8      	blx	r5
  405846:	e01b      	b.n	405880 <socket+0xc8>
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
			if(pstrSock->bIsUsed == 0)
  405848:	480f      	ldr	r0, [pc, #60]	; (405888 <socket+0xd0>)
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
  40584a:	3401      	adds	r4, #1
  40584c:	b2e4      	uxtb	r4, r4
  40584e:	428c      	cmp	r4, r1
  405850:	d3bd      	bcc.n	4057ce <socket+0x16>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET		sock = -1;
  405852:	f04f 34ff 	mov.w	r4, #4294967295
  405856:	e013      	b.n	405880 <socket+0xc8>
  405858:	f04f 34ff 	mov.w	r4, #4294967295
  40585c:	e010      	b.n	405880 <socket+0xc8>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
  40585e:	2107      	movs	r1, #7
			u8Count = 0;
  405860:	2400      	movs	r4, #0
  405862:	e001      	b.n	405868 <socket+0xb0>
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  405864:	210b      	movs	r1, #11
			u8Count = TCP_SOCK_MAX;
  405866:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  405868:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  40586a:	4b07      	ldr	r3, [pc, #28]	; (405888 <socket+0xd0>)
  40586c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  405870:	7a9b      	ldrb	r3, [r3, #10]
  405872:	f013 0fff 	tst.w	r3, #255	; 0xff
  405876:	d1e7      	bne.n	405848 <socket+0x90>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  405878:	4803      	ldr	r0, [pc, #12]	; (405888 <socket+0xd0>)
  40587a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  40587e:	e7b0      	b.n	4057e2 <socket+0x2a>
				break;
			}
		}
	}
	return sock;
}
  405880:	4620      	mov	r0, r4
  405882:	b006      	add	sp, #24
  405884:	bd70      	pop	{r4, r5, r6, pc}
  405886:	bf00      	nop
  405888:	2040159c 	.word	0x2040159c
  40588c:	004034f5 	.word	0x004034f5
  405890:	20400976 	.word	0x20400976
  405894:	00403659 	.word	0x00403659

00405898 <connect>:
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  405898:	2800      	cmp	r0, #0
  40589a:	db38      	blt.n	40590e <connect+0x76>
  40589c:	2900      	cmp	r1, #0
  40589e:	d036      	beq.n	40590e <connect+0x76>
  4058a0:	4b1f      	ldr	r3, [pc, #124]	; (405920 <connect+0x88>)
  4058a2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4058a6:	7a9b      	ldrb	r3, [r3, #10]
  4058a8:	b2db      	uxtb	r3, r3
  4058aa:	2a00      	cmp	r2, #0
  4058ac:	d032      	beq.n	405914 <connect+0x7c>
  4058ae:	2b01      	cmp	r3, #1
  4058b0:	d130      	bne.n	405914 <connect+0x7c>

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  4058b2:	b530      	push	{r4, r5, lr}
  4058b4:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  4058b6:	4b1a      	ldr	r3, [pc, #104]	; (405920 <connect+0x88>)
  4058b8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4058bc:	7adb      	ldrb	r3, [r3, #11]
  4058be:	f013 0f01 	tst.w	r3, #1
  4058c2:	d007      	beq.n	4058d4 <connect+0x3c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  4058c4:	4b16      	ldr	r3, [pc, #88]	; (405920 <connect+0x88>)
  4058c6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4058ca:	7adb      	ldrb	r3, [r3, #11]
  4058cc:	f88d 301d 	strb.w	r3, [sp, #29]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  4058d0:	254b      	movs	r5, #75	; 0x4b
  4058d2:	e000      	b.n	4058d6 <connect+0x3e>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  4058d4:	2544      	movs	r5, #68	; 0x44
  4058d6:	4604      	mov	r4, r0
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
  4058d8:	f88d 001c 	strb.w	r0, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  4058dc:	2208      	movs	r2, #8
  4058de:	a805      	add	r0, sp, #20
  4058e0:	4b10      	ldr	r3, [pc, #64]	; (405924 <connect+0x8c>)
  4058e2:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  4058e4:	480e      	ldr	r0, [pc, #56]	; (405920 <connect+0x88>)
  4058e6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4058ea:	88c3      	ldrh	r3, [r0, #6]
  4058ec:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  4058f0:	2300      	movs	r3, #0
  4058f2:	9302      	str	r3, [sp, #8]
  4058f4:	9301      	str	r3, [sp, #4]
  4058f6:	9300      	str	r3, [sp, #0]
  4058f8:	230c      	movs	r3, #12
  4058fa:	aa05      	add	r2, sp, #20
  4058fc:	4629      	mov	r1, r5
  4058fe:	2002      	movs	r0, #2
  405900:	4c09      	ldr	r4, [pc, #36]	; (405928 <connect+0x90>)
  405902:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  405904:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  405906:	bf18      	it	ne
  405908:	f06f 0008 	mvnne.w	r0, #8
  40590c:	e005      	b.n	40591a <connect+0x82>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40590e:	f06f 0005 	mvn.w	r0, #5
  405912:	4770      	bx	lr
  405914:	f06f 0005 	mvn.w	r0, #5
  405918:	4770      	bx	lr
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
  40591a:	b009      	add	sp, #36	; 0x24
  40591c:	bd30      	pop	{r4, r5, pc}
  40591e:	bf00      	nop
  405920:	2040159c 	.word	0x2040159c
  405924:	004034e1 	.word	0x004034e1
  405928:	00403659 	.word	0x00403659

0040592c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  40592c:	b530      	push	{r4, r5, lr}
  40592e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  405930:	460c      	mov	r4, r1
  405932:	3100      	adds	r1, #0
  405934:	bf18      	it	ne
  405936:	2101      	movne	r1, #1
  405938:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  40593c:	bf88      	it	hi
  40593e:	2100      	movhi	r1, #0
  405940:	2900      	cmp	r1, #0
  405942:	d036      	beq.n	4059b2 <send+0x86>
  405944:	2800      	cmp	r0, #0
  405946:	db34      	blt.n	4059b2 <send+0x86>
  405948:	4b1d      	ldr	r3, [pc, #116]	; (4059c0 <send+0x94>)
  40594a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40594e:	7a9b      	ldrb	r3, [r3, #10]
  405950:	b2db      	uxtb	r3, r3
  405952:	2b01      	cmp	r3, #1
  405954:	d130      	bne.n	4059b8 <send+0x8c>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  405956:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  40595a:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  40595e:	4b18      	ldr	r3, [pc, #96]	; (4059c0 <send+0x94>)
  405960:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  405964:	88db      	ldrh	r3, [r3, #6]
  405966:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  40596a:	2807      	cmp	r0, #7
  40596c:	bfb4      	ite	lt
  40596e:	2550      	movlt	r5, #80	; 0x50
  405970:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  405972:	4b13      	ldr	r3, [pc, #76]	; (4059c0 <send+0x94>)
  405974:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  405978:	7adb      	ldrb	r3, [r3, #11]
  40597a:	f013 0f01 	tst.w	r3, #1
  40597e:	d006      	beq.n	40598e <send+0x62>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  405980:	4b0f      	ldr	r3, [pc, #60]	; (4059c0 <send+0x94>)
  405982:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  405986:	8905      	ldrh	r5, [r0, #8]
  405988:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  40598a:	214c      	movs	r1, #76	; 0x4c
  40598c:	e000      	b.n	405990 <send+0x64>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
  40598e:	2145      	movs	r1, #69	; 0x45
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  405990:	9502      	str	r5, [sp, #8]
  405992:	9201      	str	r2, [sp, #4]
  405994:	9400      	str	r4, [sp, #0]
  405996:	2310      	movs	r3, #16
  405998:	eb0d 0203 	add.w	r2, sp, r3
  40599c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4059a0:	2002      	movs	r0, #2
  4059a2:	4c08      	ldr	r4, [pc, #32]	; (4059c4 <send+0x98>)
  4059a4:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  4059a6:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  4059a8:	bf0c      	ite	eq
  4059aa:	2000      	moveq	r0, #0
  4059ac:	f06f 000d 	mvnne.w	r0, #13
  4059b0:	e004      	b.n	4059bc <send+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4059b2:	f06f 0005 	mvn.w	r0, #5
  4059b6:	e001      	b.n	4059bc <send+0x90>
  4059b8:	f06f 0005 	mvn.w	r0, #5
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
  4059bc:	b009      	add	sp, #36	; 0x24
  4059be:	bd30      	pop	{r4, r5, pc}
  4059c0:	2040159c 	.word	0x2040159c
  4059c4:	00403659 	.word	0x00403659

004059c8 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4059c8:	2900      	cmp	r1, #0
  4059ca:	bf18      	it	ne
  4059cc:	2a00      	cmpne	r2, #0
  4059ce:	d045      	beq.n	405a5c <recv+0x94>

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
  4059d0:	b570      	push	{r4, r5, r6, lr}
  4059d2:	b086      	sub	sp, #24
  4059d4:	460e      	mov	r6, r1
  4059d6:	4615      	mov	r5, r2
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4059d8:	2800      	cmp	r0, #0
  4059da:	db36      	blt.n	405a4a <recv+0x82>
  4059dc:	4a21      	ldr	r2, [pc, #132]	; (405a64 <recv+0x9c>)
  4059de:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4059e2:	7a92      	ldrb	r2, [r2, #10]
  4059e4:	b2d2      	uxtb	r2, r2
  4059e6:	2a01      	cmp	r2, #1
  4059e8:	d132      	bne.n	405a50 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  4059ea:	4c1e      	ldr	r4, [pc, #120]	; (405a64 <recv+0x9c>)
  4059ec:	0101      	lsls	r1, r0, #4
  4059ee:	1862      	adds	r2, r4, r1
  4059f0:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  4059f2:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  4059f4:	7b12      	ldrb	r2, [r2, #12]
  4059f6:	f012 0fff 	tst.w	r2, #255	; 0xff
  4059fa:	d12c      	bne.n	405a56 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  4059fc:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  405a00:	2101      	movs	r1, #1
  405a02:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  405a04:	7ad2      	ldrb	r2, [r2, #11]
  405a06:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  405a08:	2a00      	cmp	r2, #0
  405a0a:	bf0c      	ite	eq
  405a0c:	2146      	moveq	r1, #70	; 0x46
  405a0e:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  405a10:	b91b      	cbnz	r3, 405a1a <recv+0x52>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  405a12:	f04f 33ff 	mov.w	r3, #4294967295
  405a16:	9304      	str	r3, [sp, #16]
  405a18:	e000      	b.n	405a1c <recv+0x54>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  405a1a:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
  405a1c:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  405a20:	4b10      	ldr	r3, [pc, #64]	; (405a64 <recv+0x9c>)
  405a22:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  405a26:	88c3      	ldrh	r3, [r0, #6]
  405a28:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  405a2c:	2300      	movs	r3, #0
  405a2e:	9302      	str	r3, [sp, #8]
  405a30:	9301      	str	r3, [sp, #4]
  405a32:	9300      	str	r3, [sp, #0]
  405a34:	2308      	movs	r3, #8
  405a36:	aa04      	add	r2, sp, #16
  405a38:	2002      	movs	r0, #2
  405a3a:	4c0b      	ldr	r4, [pc, #44]	; (405a68 <recv+0xa0>)
  405a3c:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  405a3e:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  405a40:	bf0c      	ite	eq
  405a42:	2000      	moveq	r0, #0
  405a44:	f06f 000d 	mvnne.w	r0, #13
  405a48:	e006      	b.n	405a58 <recv+0x90>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  405a4a:	f06f 0005 	mvn.w	r0, #5
  405a4e:	e003      	b.n	405a58 <recv+0x90>
  405a50:	f06f 0005 	mvn.w	r0, #5
  405a54:	e000      	b.n	405a58 <recv+0x90>
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
  405a56:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  405a58:	b006      	add	sp, #24
  405a5a:	bd70      	pop	{r4, r5, r6, pc}
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  405a5c:	f06f 0005 	mvn.w	r0, #5
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
  405a60:	4770      	bx	lr
  405a62:	bf00      	nop
  405a64:	2040159c 	.word	0x2040159c
  405a68:	00403659 	.word	0x00403659

00405a6c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  405a6c:	b530      	push	{r4, r5, lr}
  405a6e:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  405a70:	2800      	cmp	r0, #0
  405a72:	db2e      	blt.n	405ad2 <close+0x66>
  405a74:	4b1b      	ldr	r3, [pc, #108]	; (405ae4 <close+0x78>)
  405a76:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  405a7a:	7a9b      	ldrb	r3, [r3, #10]
  405a7c:	b2db      	uxtb	r3, r3
  405a7e:	2b01      	cmp	r3, #1
  405a80:	d12a      	bne.n	405ad8 <close+0x6c>
  405a82:	4604      	mov	r4, r0
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  405a84:	f88d 0014 	strb.w	r0, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  405a88:	4b16      	ldr	r3, [pc, #88]	; (405ae4 <close+0x78>)
  405a8a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  405a8e:	88da      	ldrh	r2, [r3, #6]
  405a90:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  405a94:	2200      	movs	r2, #0
  405a96:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  405a98:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  405a9a:	7adb      	ldrb	r3, [r3, #11]
  405a9c:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  405aa0:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  405aa2:	9202      	str	r2, [sp, #8]
  405aa4:	9201      	str	r2, [sp, #4]
  405aa6:	9200      	str	r2, [sp, #0]
  405aa8:	f04f 0304 	mov.w	r3, #4
  405aac:	aa05      	add	r2, sp, #20
  405aae:	bf0c      	ite	eq
  405ab0:	2149      	moveq	r1, #73	; 0x49
  405ab2:	214e      	movne	r1, #78	; 0x4e
  405ab4:	2002      	movs	r0, #2
  405ab6:	4d0c      	ldr	r5, [pc, #48]	; (405ae8 <close+0x7c>)
  405ab8:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  405aba:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  405abc:	bf18      	it	ne
  405abe:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  405ac2:	2210      	movs	r2, #16
  405ac4:	2100      	movs	r1, #0
  405ac6:	4807      	ldr	r0, [pc, #28]	; (405ae4 <close+0x78>)
  405ac8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  405acc:	4b07      	ldr	r3, [pc, #28]	; (405aec <close+0x80>)
  405ace:	4798      	blx	r3
  405ad0:	e004      	b.n	405adc <close+0x70>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  405ad2:	f06f 0505 	mvn.w	r5, #5
  405ad6:	e001      	b.n	405adc <close+0x70>
  405ad8:	f06f 0505 	mvn.w	r5, #5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
  405adc:	4628      	mov	r0, r5
  405ade:	b007      	add	sp, #28
  405ae0:	bd30      	pop	{r4, r5, pc}
  405ae2:	bf00      	nop
  405ae4:	2040159c 	.word	0x2040159c
  405ae8:	00403659 	.word	0x00403659
  405aec:	004034f5 	.word	0x004034f5

00405af0 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  405af0:	b570      	push	{r4, r5, r6, lr}
  405af2:	b082      	sub	sp, #8
  405af4:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  405af6:	4b2b      	ldr	r3, [pc, #172]	; (405ba4 <spi_flash_enable+0xb4>)
  405af8:	4798      	blx	r3
  405afa:	f3c0 000b 	ubfx	r0, r0, #0, #12
  405afe:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  405b02:	d34a      	bcc.n	405b9a <spi_flash_enable+0xaa>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  405b04:	a901      	add	r1, sp, #4
  405b06:	f241 4010 	movw	r0, #5136	; 0x1410
  405b0a:	4b27      	ldr	r3, [pc, #156]	; (405ba8 <spi_flash_enable+0xb8>)
  405b0c:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  405b0e:	4604      	mov	r4, r0
  405b10:	2800      	cmp	r0, #0
  405b12:	d143      	bne.n	405b9c <spi_flash_enable+0xac>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
  405b14:	4b25      	ldr	r3, [pc, #148]	; (405bac <spi_flash_enable+0xbc>)
  405b16:	9a01      	ldr	r2, [sp, #4]
  405b18:	4013      	ands	r3, r2
  405b1a:	4925      	ldr	r1, [pc, #148]	; (405bb0 <spi_flash_enable+0xc0>)
  405b1c:	4319      	orrs	r1, r3
  405b1e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  405b20:	f241 4010 	movw	r0, #5136	; 0x1410
  405b24:	4b23      	ldr	r3, [pc, #140]	; (405bb4 <spi_flash_enable+0xc4>)
  405b26:	4798      	blx	r3
		if(enable) {
  405b28:	b1b5      	cbz	r5, 405b58 <spi_flash_enable+0x68>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  405b2a:	2100      	movs	r1, #0
  405b2c:	4822      	ldr	r0, [pc, #136]	; (405bb8 <spi_flash_enable+0xc8>)
  405b2e:	4d21      	ldr	r5, [pc, #132]	; (405bb4 <spi_flash_enable+0xc4>)
  405b30:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  405b32:	21ab      	movs	r1, #171	; 0xab
  405b34:	4821      	ldr	r0, [pc, #132]	; (405bbc <spi_flash_enable+0xcc>)
  405b36:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  405b38:	2101      	movs	r1, #1
  405b3a:	4821      	ldr	r0, [pc, #132]	; (405bc0 <spi_flash_enable+0xd0>)
  405b3c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  405b3e:	2100      	movs	r1, #0
  405b40:	4820      	ldr	r0, [pc, #128]	; (405bc4 <spi_flash_enable+0xd4>)
  405b42:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  405b44:	2181      	movs	r1, #129	; 0x81
  405b46:	4820      	ldr	r0, [pc, #128]	; (405bc8 <spi_flash_enable+0xd8>)
  405b48:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  405b4a:	4e20      	ldr	r6, [pc, #128]	; (405bcc <spi_flash_enable+0xdc>)
  405b4c:	4d20      	ldr	r5, [pc, #128]	; (405bd0 <spi_flash_enable+0xe0>)
  405b4e:	4630      	mov	r0, r6
  405b50:	47a8      	blx	r5
  405b52:	2801      	cmp	r0, #1
  405b54:	d1fb      	bne.n	405b4e <spi_flash_enable+0x5e>
  405b56:	e015      	b.n	405b84 <spi_flash_enable+0x94>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  405b58:	2100      	movs	r1, #0
  405b5a:	4817      	ldr	r0, [pc, #92]	; (405bb8 <spi_flash_enable+0xc8>)
  405b5c:	4d15      	ldr	r5, [pc, #84]	; (405bb4 <spi_flash_enable+0xc4>)
  405b5e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  405b60:	21b9      	movs	r1, #185	; 0xb9
  405b62:	4816      	ldr	r0, [pc, #88]	; (405bbc <spi_flash_enable+0xcc>)
  405b64:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  405b66:	2101      	movs	r1, #1
  405b68:	4815      	ldr	r0, [pc, #84]	; (405bc0 <spi_flash_enable+0xd0>)
  405b6a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  405b6c:	2100      	movs	r1, #0
  405b6e:	4815      	ldr	r0, [pc, #84]	; (405bc4 <spi_flash_enable+0xd4>)
  405b70:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  405b72:	2181      	movs	r1, #129	; 0x81
  405b74:	4814      	ldr	r0, [pc, #80]	; (405bc8 <spi_flash_enable+0xd8>)
  405b76:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  405b78:	4e14      	ldr	r6, [pc, #80]	; (405bcc <spi_flash_enable+0xdc>)
  405b7a:	4d15      	ldr	r5, [pc, #84]	; (405bd0 <spi_flash_enable+0xe0>)
  405b7c:	4630      	mov	r0, r6
  405b7e:	47a8      	blx	r5
  405b80:	2801      	cmp	r0, #1
  405b82:	d1fb      	bne.n	405b7c <spi_flash_enable+0x8c>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
  405b84:	4909      	ldr	r1, [pc, #36]	; (405bac <spi_flash_enable+0xbc>)
  405b86:	9b01      	ldr	r3, [sp, #4]
  405b88:	4019      	ands	r1, r3
  405b8a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  405b8e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  405b90:	f241 4010 	movw	r0, #5136	; 0x1410
  405b94:	4b07      	ldr	r3, [pc, #28]	; (405bb4 <spi_flash_enable+0xc4>)
  405b96:	4798      	blx	r3
  405b98:	e000      	b.n	405b9c <spi_flash_enable+0xac>
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
  405b9a:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  405b9c:	4620      	mov	r0, r4
  405b9e:	b002      	add	sp, #8
  405ba0:	bd70      	pop	{r4, r5, r6, pc}
  405ba2:	bf00      	nop
  405ba4:	00404505 	.word	0x00404505
  405ba8:	004047fd 	.word	0x004047fd
  405bac:	f8888fff 	.word	0xf8888fff
  405bb0:	01111000 	.word	0x01111000
  405bb4:	00404809 	.word	0x00404809
  405bb8:	00010208 	.word	0x00010208
  405bbc:	0001020c 	.word	0x0001020c
  405bc0:	00010214 	.word	0x00010214
  405bc4:	0001021c 	.word	0x0001021c
  405bc8:	00010204 	.word	0x00010204
  405bcc:	00010218 	.word	0x00010218
  405bd0:	004047f1 	.word	0x004047f1

00405bd4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  405bd4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  405bd6:	4810      	ldr	r0, [pc, #64]	; (405c18 <sysclk_init+0x44>)
  405bd8:	4b10      	ldr	r3, [pc, #64]	; (405c1c <sysclk_init+0x48>)
  405bda:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  405bdc:	213e      	movs	r1, #62	; 0x3e
  405bde:	2000      	movs	r0, #0
  405be0:	4b0f      	ldr	r3, [pc, #60]	; (405c20 <sysclk_init+0x4c>)
  405be2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  405be4:	4c0f      	ldr	r4, [pc, #60]	; (405c24 <sysclk_init+0x50>)
  405be6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  405be8:	2800      	cmp	r0, #0
  405bea:	d0fc      	beq.n	405be6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  405bec:	4b0e      	ldr	r3, [pc, #56]	; (405c28 <sysclk_init+0x54>)
  405bee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  405bf0:	4a0e      	ldr	r2, [pc, #56]	; (405c2c <sysclk_init+0x58>)
  405bf2:	4b0f      	ldr	r3, [pc, #60]	; (405c30 <sysclk_init+0x5c>)
  405bf4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  405bf6:	4c0f      	ldr	r4, [pc, #60]	; (405c34 <sysclk_init+0x60>)
  405bf8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  405bfa:	2800      	cmp	r0, #0
  405bfc:	d0fc      	beq.n	405bf8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  405bfe:	2002      	movs	r0, #2
  405c00:	4b0d      	ldr	r3, [pc, #52]	; (405c38 <sysclk_init+0x64>)
  405c02:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  405c04:	2000      	movs	r0, #0
  405c06:	4b0d      	ldr	r3, [pc, #52]	; (405c3c <sysclk_init+0x68>)
  405c08:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  405c0a:	4b0d      	ldr	r3, [pc, #52]	; (405c40 <sysclk_init+0x6c>)
  405c0c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  405c0e:	4802      	ldr	r0, [pc, #8]	; (405c18 <sysclk_init+0x44>)
  405c10:	4b02      	ldr	r3, [pc, #8]	; (405c1c <sysclk_init+0x48>)
  405c12:	4798      	blx	r3
  405c14:	bd10      	pop	{r4, pc}
  405c16:	bf00      	nop
  405c18:	11e1a300 	.word	0x11e1a300
  405c1c:	00406ab9 	.word	0x00406ab9
  405c20:	00406545 	.word	0x00406545
  405c24:	00406599 	.word	0x00406599
  405c28:	004065a9 	.word	0x004065a9
  405c2c:	20183f01 	.word	0x20183f01
  405c30:	400e0600 	.word	0x400e0600
  405c34:	004065b9 	.word	0x004065b9
  405c38:	004064a1 	.word	0x004064a1
  405c3c:	004064dd 	.word	0x004064dd
  405c40:	004069a9 	.word	0x004069a9

00405c44 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  405c44:	b990      	cbnz	r0, 405c6c <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  405c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c4a:	460c      	mov	r4, r1
  405c4c:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  405c4e:	2a00      	cmp	r2, #0
  405c50:	dd0f      	ble.n	405c72 <_read+0x2e>
  405c52:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  405c54:	4e08      	ldr	r6, [pc, #32]	; (405c78 <_read+0x34>)
  405c56:	4d09      	ldr	r5, [pc, #36]	; (405c7c <_read+0x38>)
  405c58:	6830      	ldr	r0, [r6, #0]
  405c5a:	4621      	mov	r1, r4
  405c5c:	682b      	ldr	r3, [r5, #0]
  405c5e:	4798      	blx	r3
		ptr++;
  405c60:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  405c62:	42a7      	cmp	r7, r4
  405c64:	d1f8      	bne.n	405c58 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  405c66:	4640      	mov	r0, r8
  405c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  405c6c:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  405c70:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  405c72:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  405c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c78:	20401660 	.word	0x20401660
  405c7c:	20401658 	.word	0x20401658

00405c80 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  405c80:	3801      	subs	r0, #1
  405c82:	2802      	cmp	r0, #2
  405c84:	d815      	bhi.n	405cb2 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  405c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c8a:	460e      	mov	r6, r1
  405c8c:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  405c8e:	b19a      	cbz	r2, 405cb8 <_write+0x38>
  405c90:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  405c92:	f8df 8038 	ldr.w	r8, [pc, #56]	; 405ccc <_write+0x4c>
  405c96:	4f0c      	ldr	r7, [pc, #48]	; (405cc8 <_write+0x48>)
  405c98:	f8d8 0000 	ldr.w	r0, [r8]
  405c9c:	f815 1b01 	ldrb.w	r1, [r5], #1
  405ca0:	683b      	ldr	r3, [r7, #0]
  405ca2:	4798      	blx	r3
  405ca4:	2800      	cmp	r0, #0
  405ca6:	db0a      	blt.n	405cbe <_write+0x3e>
  405ca8:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  405caa:	3c01      	subs	r4, #1
  405cac:	d1f4      	bne.n	405c98 <_write+0x18>
  405cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  405cb2:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  405cb6:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  405cb8:	2000      	movs	r0, #0
  405cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  405cbe:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  405cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405cc6:	bf00      	nop
  405cc8:	2040165c 	.word	0x2040165c
  405ccc:	20401660 	.word	0x20401660

00405cd0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  405cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  405cd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405cd6:	4bb6      	ldr	r3, [pc, #728]	; (405fb0 <board_init+0x2e0>)
  405cd8:	605a      	str	r2, [r3, #4]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  405cda:	f3bf 8f5f 	dmb	sy
		MPU_REGION_VALID |
		MPU_DEFAULT_ITCM_REGION;

	dw_region_attr =
		MPU_AP_PRIVILEGED_READ_WRITE |
		mpu_cal_mpu_region_size(ITCM_END_ADDRESS - ITCM_START_ADDRESS) |
  405cde:	4fb5      	ldr	r7, [pc, #724]	; (405fb4 <board_init+0x2e4>)
  405ce0:	4638      	mov	r0, r7
  405ce2:	4db5      	ldr	r5, [pc, #724]	; (405fb8 <board_init+0x2e8>)
  405ce4:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405ce6:	4eb5      	ldr	r6, [pc, #724]	; (405fbc <board_init+0x2ec>)
  405ce8:	ea40 0106 	orr.w	r1, r0, r6
  405cec:	2011      	movs	r0, #17
  405cee:	4cb4      	ldr	r4, [pc, #720]	; (405fc0 <board_init+0x2f0>)
  405cf0:	47a0      	blx	r4
		MPU_DEFAULT_IFLASH_REGION;

	dw_region_attr =
		MPU_AP_READONLY |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(IFLASH_END_ADDRESS - IFLASH_START_ADDRESS) |
  405cf2:	48b4      	ldr	r0, [pc, #720]	; (405fc4 <board_init+0x2f4>)
  405cf4:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405cf6:	49b4      	ldr	r1, [pc, #720]	; (405fc8 <board_init+0x2f8>)
  405cf8:	4301      	orrs	r1, r0
  405cfa:	48b4      	ldr	r0, [pc, #720]	; (405fcc <board_init+0x2fc>)
  405cfc:	47a0      	blx	r4
		MPU_REGION_VALID |
		MPU_DEFAULT_DTCM_REGION;

	dw_region_attr =
		MPU_AP_PRIVILEGED_READ_WRITE |
		mpu_cal_mpu_region_size(DTCM_END_ADDRESS - DTCM_START_ADDRESS) |
  405cfe:	4638      	mov	r0, r7
  405d00:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d02:	ea40 0106 	orr.w	r1, r0, r6
  405d06:	48b2      	ldr	r0, [pc, #712]	; (405fd0 <board_init+0x300>)
  405d08:	47a0      	blx	r4
		MPU_DEFAULT_SRAM_REGION_1;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(SRAM_FIRST_END_ADDRESS - SRAM_FIRST_START_ADDRESS)
  405d0a:	48b2      	ldr	r0, [pc, #712]	; (405fd4 <board_init+0x304>)
  405d0c:	47a8      	blx	r5
		| MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d0e:	f106 7608 	add.w	r6, r6, #35651584	; 0x2200000
  405d12:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
  405d16:	ea40 0106 	orr.w	r1, r0, r6
  405d1a:	48af      	ldr	r0, [pc, #700]	; (405fd8 <board_init+0x308>)
  405d1c:	47a0      	blx	r4
		MPU_DEFAULT_SRAM_REGION_2;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_NWA_TYPE( NON_SHAREABLE ) |
		mpu_cal_mpu_region_size(SRAM_SECOND_END_ADDRESS - SRAM_SECOND_START_ADDRESS) |
  405d1e:	48af      	ldr	r0, [pc, #700]	; (405fdc <board_init+0x30c>)
  405d20:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d22:	ea40 0106 	orr.w	r1, r0, r6
  405d26:	48ae      	ldr	r0, [pc, #696]	; (405fe0 <board_init+0x310>)
  405d28:	47a0      	blx	r4
		MPU_PERIPHERALS_REGION;

	dw_region_attr = MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		mpu_cal_mpu_region_size(PERIPHERALS_END_ADDRESS - PERIPHERALS_START_ADDRESS)
  405d2a:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  405d2e:	47a8      	blx	r5
		|MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d30:	4eac      	ldr	r6, [pc, #688]	; (405fe4 <board_init+0x314>)
  405d32:	ea40 0106 	orr.w	r1, r0, r6
  405d36:	48ac      	ldr	r0, [pc, #688]	; (405fe8 <board_init+0x318>)
  405d38:	47a0      	blx	r4

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		/* External memory Must be defined with 'Device' or 'Strongly Ordered' attribute for write accesses (AXI) */
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		mpu_cal_mpu_region_size(EXT_EBI_END_ADDRESS - EXT_EBI_START_ADDRESS) |
  405d3a:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  405d3e:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d40:	4faa      	ldr	r7, [pc, #680]	; (405fec <board_init+0x31c>)
  405d42:	ea40 0107 	orr.w	r1, r0, r7
  405d46:	48aa      	ldr	r0, [pc, #680]	; (405ff0 <board_init+0x320>)
  405d48:	47a0      	blx	r4
		MPU_DEFAULT_SDRAM_REGION;

	dw_region_attr =
		MPU_AP_FULL_ACCESS    |
		INNER_NORMAL_WB_RWA_TYPE( SHAREABLE ) |
		mpu_cal_mpu_region_size(SDRAM_END_ADDRESS - SDRAM_START_ADDRESS) |
  405d4a:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
  405d4e:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d50:	49a8      	ldr	r1, [pc, #672]	; (405ff4 <board_init+0x324>)
  405d52:	4301      	orrs	r1, r0
  405d54:	48a8      	ldr	r0, [pc, #672]	; (405ff8 <board_init+0x328>)
  405d56:	47a0      	blx	r4
		MPU_QSPIMEM_REGION;

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		STRONGLY_ORDERED_SHAREABLE_TYPE |
		mpu_cal_mpu_region_size(QSPI_END_ADDRESS - QSPI_START_ADDRESS) |
  405d58:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
  405d5c:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d5e:	ea40 0107 	orr.w	r1, r0, r7
  405d62:	48a6      	ldr	r0, [pc, #664]	; (405ffc <board_init+0x32c>)
  405d64:	47a0      	blx	r4

	dw_region_attr =
		MPU_AP_FULL_ACCESS |
		MPU_REGION_EXECUTE_NEVER |
		SHAREABLE_DEVICE_TYPE |
		mpu_cal_mpu_region_size(USBHSRAM_END_ADDRESS - USBHSRAM_START_ADDRESS) |
  405d66:	48a6      	ldr	r0, [pc, #664]	; (406000 <board_init+0x330>)
  405d68:	47a8      	blx	r5
		MPU_REGION_ENABLE;

	mpu_set_region( dw_region_base_addr, dw_region_attr);
  405d6a:	ea40 0106 	orr.w	r1, r0, r6
  405d6e:	48a5      	ldr	r0, [pc, #660]	; (406004 <board_init+0x334>)
  405d70:	47a0      	blx	r4


	/* Enable the memory management fault , Bus Fault, Usage Fault exception */
	SCB->SHCSR |= (SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk
  405d72:	4ca5      	ldr	r4, [pc, #660]	; (406008 <board_init+0x338>)
  405d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405d76:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
  405d7a:	6263      	str	r3, [r4, #36]	; 0x24
					| SCB_SHCSR_USGFAULTENA_Msk);

	/* Enable the MPU region */
	mpu_enable( MPU_ENABLE | MPU_PRIVDEFENA);
  405d7c:	2005      	movs	r0, #5
  405d7e:	4ba3      	ldr	r3, [pc, #652]	; (40600c <board_init+0x33c>)
  405d80:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  405d82:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  405d86:	f3bf 8f6f 	isb	sy
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  405d8a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  405d8e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  405d92:	2300      	movs	r3, #0
  405d94:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  405d98:	6963      	ldr	r3, [r4, #20]
  405d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  405d9e:	6163      	str	r3, [r4, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  405da0:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  405da4:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  405da8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  405dac:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  405db0:	f006 0707 	and.w	r7, r6, #7
  405db4:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  405db6:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  405dba:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  405dbe:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  405dc2:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  405dc6:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  405dc8:	fa05 f107 	lsl.w	r1, r5, r7
  405dcc:	fa03 f200 	lsl.w	r2, r3, r0
  405dd0:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  405dd2:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  405dd6:	3b01      	subs	r3, #1
  405dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
  405ddc:	d1f6      	bne.n	405dcc <board_init+0xfc>
        } while(sets--);
  405dde:	3d01      	subs	r5, #1
  405de0:	f1b5 3fff 	cmp.w	r5, #4294967295
  405de4:	d1ef      	bne.n	405dc6 <board_init+0xf6>
  405de6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  405dea:	4b87      	ldr	r3, [pc, #540]	; (406008 <board_init+0x338>)
  405dec:	695a      	ldr	r2, [r3, #20]
  405dee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  405df2:	615a      	str	r2, [r3, #20]
  405df4:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  405df8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  405dfc:	4a84      	ldr	r2, [pc, #528]	; (406010 <board_init+0x340>)
  405dfe:	4985      	ldr	r1, [pc, #532]	; (406014 <board_init+0x344>)
  405e00:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  405e02:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  405e06:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  405e08:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  405e0c:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  405e10:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  405e14:	f022 0201 	bic.w	r2, r2, #1
  405e18:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  405e1c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  405e20:	f022 0201 	bic.w	r2, r2, #1
  405e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  405e28:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  405e2c:	f3bf 8f6f 	isb	sy
  405e30:	200a      	movs	r0, #10
  405e32:	4c79      	ldr	r4, [pc, #484]	; (406018 <board_init+0x348>)
  405e34:	47a0      	blx	r4
  405e36:	200b      	movs	r0, #11
  405e38:	47a0      	blx	r4
  405e3a:	200c      	movs	r0, #12
  405e3c:	47a0      	blx	r4
  405e3e:	2010      	movs	r0, #16
  405e40:	47a0      	blx	r4
  405e42:	2011      	movs	r0, #17
  405e44:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  405e46:	4a75      	ldr	r2, [pc, #468]	; (40601c <board_init+0x34c>)
  405e48:	f44f 7380 	mov.w	r3, #256	; 0x100
  405e4c:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405e4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405e52:	6313      	str	r3, [r2, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405e54:	4b72      	ldr	r3, [pc, #456]	; (406020 <board_init+0x350>)
  405e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405e5a:	6159      	str	r1, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405e5c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  405e60:	6659      	str	r1, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405e62:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  405e66:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  405e68:	6219      	str	r1, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  405e6a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  405e6e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405e70:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  405e74:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  405e76:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405e78:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
  405e7c:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  405e7e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  405e82:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  405e86:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  405e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  405e8e:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405e90:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  405e94:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  405e96:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405e98:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  405e9c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405e9e:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  405ea2:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  405ea4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405ea6:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
  405eaa:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405eac:	6059      	str	r1, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  405eae:	485d      	ldr	r0, [pc, #372]	; (406024 <board_init+0x354>)
  405eb0:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
  405eb4:	f041 0110 	orr.w	r1, r1, #16
  405eb8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  405ebc:	495a      	ldr	r1, [pc, #360]	; (406028 <board_init+0x358>)
  405ebe:	2010      	movs	r0, #16
  405ec0:	6608      	str	r0, [r1, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405ec2:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  405ec6:	6548      	str	r0, [r1, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  405ec8:	6248      	str	r0, [r1, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405eca:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  405ece:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  405ed0:	4304      	orrs	r4, r0
  405ed2:	670c      	str	r4, [r1, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  405ed4:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  405ed6:	4304      	orrs	r4, r0
  405ed8:	674c      	str	r4, [r1, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405eda:	6048      	str	r0, [r1, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  405edc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405ee0:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405ee2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  405ee6:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  405ee8:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405eea:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  405eee:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405ef0:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  405ef4:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  405ef6:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405ef8:	4308      	orrs	r0, r1
  405efa:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405efc:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  405efe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405f02:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405f04:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  405f08:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  405f0a:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405f0c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  405f10:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405f12:	4308      	orrs	r0, r1
  405f14:	6718      	str	r0, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  405f16:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405f18:	4308      	orrs	r0, r1
  405f1a:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405f1c:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  405f1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  405f22:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405f24:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  405f28:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  405f2a:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405f2c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  405f30:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405f32:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  405f36:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  405f38:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405f3a:	4308      	orrs	r0, r1
  405f3c:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405f3e:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  405f40:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  405f44:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405f46:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  405f4a:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  405f4c:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405f4e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  405f52:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405f54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405f58:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  405f5a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405f5c:	4308      	orrs	r0, r1
  405f5e:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405f60:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  405f62:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  405f66:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405f68:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  405f6c:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  405f6e:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405f70:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  405f74:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405f76:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  405f7a:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  405f7c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405f7e:	4308      	orrs	r0, r1
  405f80:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405f82:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  405f84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  405f88:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  405f8a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  405f8e:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  405f90:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  405f92:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  405f96:	6f18      	ldr	r0, [r3, #112]	; 0x70
  405f98:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  405f9c:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  405f9e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  405fa0:	4308      	orrs	r0, r1
  405fa2:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405fa4:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  405fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  405faa:	6153      	str	r3, [r2, #20]
  405fac:	e03e      	b.n	40602c <board_init+0x35c>
  405fae:	bf00      	nop
  405fb0:	400e1850 	.word	0x400e1850
  405fb4:	003fffff 	.word	0x003fffff
  405fb8:	00406069 	.word	0x00406069
  405fbc:	01000001 	.word	0x01000001
  405fc0:	0040605d 	.word	0x0040605d
  405fc4:	001fffff 	.word	0x001fffff
  405fc8:	06230001 	.word	0x06230001
  405fcc:	00400012 	.word	0x00400012
  405fd0:	20000013 	.word	0x20000013
  405fd4:	0003ffff 	.word	0x0003ffff
  405fd8:	20400014 	.word	0x20400014
  405fdc:	0001ffff 	.word	0x0001ffff
  405fe0:	20440015 	.word	0x20440015
  405fe4:	13010001 	.word	0x13010001
  405fe8:	40000016 	.word	0x40000016
  405fec:	03000001 	.word	0x03000001
  405ff0:	60000017 	.word	0x60000017
  405ff4:	03250001 	.word	0x03250001
  405ff8:	70000018 	.word	0x70000018
  405ffc:	80000019 	.word	0x80000019
  406000:	000fffff 	.word	0x000fffff
  406004:	a010001a 	.word	0xa010001a
  406008:	e000ed00 	.word	0xe000ed00
  40600c:	00406051 	.word	0x00406051
  406010:	400e0c00 	.word	0x400e0c00
  406014:	5a00080c 	.word	0x5a00080c
  406018:	004065c9 	.word	0x004065c9
  40601c:	400e1200 	.word	0x400e1200
  406020:	400e0e00 	.word	0x400e0e00
  406024:	40088000 	.word	0x40088000
  406028:	400e1000 	.word	0x400e1000
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40602c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  406030:	6653      	str	r3, [r2, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  406032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  406036:	6553      	str	r3, [r2, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  406038:	6253      	str	r3, [r2, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40603a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40603e:	6f13      	ldr	r3, [r2, #112]	; 0x70
  406040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  406044:	6713      	str	r3, [r2, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  406046:	6f53      	ldr	r3, [r2, #116]	; 0x74
  406048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40604c:	6753      	str	r3, [r2, #116]	; 0x74
  40604e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00406050 <mpu_enable>:
 *
 * \param dwMPUEnable  Enable/Disable the memory region.
 */
void mpu_enable(uint32_t dw_mpu_enable)
{
	MPU->CTRL = dw_mpu_enable ;
  406050:	4b01      	ldr	r3, [pc, #4]	; (406058 <mpu_enable+0x8>)
  406052:	6058      	str	r0, [r3, #4]
  406054:	4770      	bx	lr
  406056:	bf00      	nop
  406058:	e000ed90 	.word	0xe000ed90

0040605c <mpu_set_region>:
 * \param dwRegionBaseAddr  Memory region base address.
 * \param dwRegionAttr  Memory region attributes.
 */
void mpu_set_region(uint32_t dw_region_base_addr, uint32_t dw_region_attr)
{
	MPU->RBAR = dw_region_base_addr;
  40605c:	4b01      	ldr	r3, [pc, #4]	; (406064 <mpu_set_region+0x8>)
  40605e:	60d8      	str	r0, [r3, #12]
	MPU->RASR = dw_region_attr;
  406060:	6119      	str	r1, [r3, #16]
  406062:	4770      	bx	lr
  406064:	e000ed90 	.word	0xe000ed90

00406068 <mpu_cal_mpu_region_size>:
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  406068:	2820      	cmp	r0, #32
  40606a:	d908      	bls.n	40607e <mpu_cal_mpu_region_size+0x16>
  40606c:	2304      	movs	r3, #4
  40606e:	2220      	movs	r2, #32
			break;
		} else {
			dwReturnValue++;
  406070:	3301      	adds	r3, #1
		}
		dwRegionSize <<= 1;
  406072:	0052      	lsls	r2, r2, #1
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;

	while( dwReturnValue < 31 ) {
		if( dw_actual_size_in_bytes <= dwRegionSize ) {
  406074:	4290      	cmp	r0, r2
  406076:	d903      	bls.n	406080 <mpu_cal_mpu_region_size+0x18>
  406078:	2b1e      	cmp	r3, #30
  40607a:	d9f9      	bls.n	406070 <mpu_cal_mpu_region_size+0x8>
  40607c:	e000      	b.n	406080 <mpu_cal_mpu_region_size+0x18>
 * \brief Calculate region size for the RASR.
 */
uint32_t mpu_cal_mpu_region_size(uint32_t dw_actual_size_in_bytes)
{
	uint32_t dwRegionSize = 32;
	uint32_t dwReturnValue = 4;
  40607e:	2304      	movs	r3, #4
		}
		dwRegionSize <<= 1;
	}

	return ( dwReturnValue << 1 );
}
  406080:	0058      	lsls	r0, r3, #1
  406082:	4770      	bx	lr

00406084 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  406084:	b10a      	cbz	r2, 40608a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  406086:	6641      	str	r1, [r0, #100]	; 0x64
  406088:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40608a:	6601      	str	r1, [r0, #96]	; 0x60
  40608c:	4770      	bx	lr
  40608e:	bf00      	nop

00406090 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  406090:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  406092:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  406096:	d02f      	beq.n	4060f8 <pio_set_peripheral+0x68>
  406098:	d807      	bhi.n	4060aa <pio_set_peripheral+0x1a>
  40609a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40609e:	d014      	beq.n	4060ca <pio_set_peripheral+0x3a>
  4060a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4060a4:	d01e      	beq.n	4060e4 <pio_set_peripheral+0x54>
  4060a6:	b939      	cbnz	r1, 4060b8 <pio_set_peripheral+0x28>
  4060a8:	4770      	bx	lr
  4060aa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4060ae:	d037      	beq.n	406120 <pio_set_peripheral+0x90>
  4060b0:	d804      	bhi.n	4060bc <pio_set_peripheral+0x2c>
  4060b2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4060b6:	d029      	beq.n	40610c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4060b8:	6042      	str	r2, [r0, #4]
  4060ba:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4060bc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4060c0:	d02e      	beq.n	406120 <pio_set_peripheral+0x90>
  4060c2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4060c6:	d02b      	beq.n	406120 <pio_set_peripheral+0x90>
  4060c8:	e7f6      	b.n	4060b8 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4060ca:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4060cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4060ce:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4060d0:	43d3      	mvns	r3, r2
  4060d2:	4021      	ands	r1, r4
  4060d4:	4019      	ands	r1, r3
  4060d6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4060d8:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4060da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4060dc:	4021      	ands	r1, r4
  4060de:	400b      	ands	r3, r1
  4060e0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4060e2:	e01a      	b.n	40611a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4060e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4060e6:	4313      	orrs	r3, r2
  4060e8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4060ea:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4060ec:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4060ee:	400b      	ands	r3, r1
  4060f0:	ea23 0302 	bic.w	r3, r3, r2
  4060f4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4060f6:	e7df      	b.n	4060b8 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4060f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4060fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4060fc:	400b      	ands	r3, r1
  4060fe:	ea23 0302 	bic.w	r3, r3, r2
  406102:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  406104:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  406106:	4313      	orrs	r3, r2
  406108:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40610a:	e7d5      	b.n	4060b8 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40610c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40610e:	4313      	orrs	r3, r2
  406110:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  406112:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  406114:	4313      	orrs	r3, r2
  406116:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  406118:	e7ce      	b.n	4060b8 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40611a:	6042      	str	r2, [r0, #4]
}
  40611c:	f85d 4b04 	ldr.w	r4, [sp], #4
  406120:	4770      	bx	lr
  406122:	bf00      	nop

00406124 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  406124:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  406126:	f012 0f01 	tst.w	r2, #1
  40612a:	d001      	beq.n	406130 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  40612c:	6641      	str	r1, [r0, #100]	; 0x64
  40612e:	e000      	b.n	406132 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  406130:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  406132:	f012 0f0a 	tst.w	r2, #10
  406136:	d001      	beq.n	40613c <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  406138:	6201      	str	r1, [r0, #32]
  40613a:	e000      	b.n	40613e <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40613c:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40613e:	f012 0f02 	tst.w	r2, #2
  406142:	d002      	beq.n	40614a <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  406144:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  406148:	e004      	b.n	406154 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40614a:	f012 0f08 	tst.w	r2, #8
  40614e:	d001      	beq.n	406154 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  406150:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  406154:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  406156:	6001      	str	r1, [r0, #0]
  406158:	4770      	bx	lr
  40615a:	bf00      	nop

0040615c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40615c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40615e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  406160:	9c01      	ldr	r4, [sp, #4]
  406162:	b10c      	cbz	r4, 406168 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  406164:	6641      	str	r1, [r0, #100]	; 0x64
  406166:	e000      	b.n	40616a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  406168:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40616a:	b10b      	cbz	r3, 406170 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  40616c:	6501      	str	r1, [r0, #80]	; 0x50
  40616e:	e000      	b.n	406172 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  406170:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  406172:	b10a      	cbz	r2, 406178 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  406174:	6301      	str	r1, [r0, #48]	; 0x30
  406176:	e000      	b.n	40617a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  406178:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40617a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40617c:	6001      	str	r1, [r0, #0]
}
  40617e:	f85d 4b04 	ldr.w	r4, [sp], #4
  406182:	4770      	bx	lr

00406184 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  406184:	f012 0f10 	tst.w	r2, #16
  406188:	d012      	beq.n	4061b0 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40618a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40618e:	f012 0f20 	tst.w	r2, #32
  406192:	d002      	beq.n	40619a <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  406194:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  406198:	e001      	b.n	40619e <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40619a:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40619e:	f012 0f40 	tst.w	r2, #64	; 0x40
  4061a2:	d002      	beq.n	4061aa <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4061a4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4061a8:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4061aa:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4061ae:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4061b0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4061b4:	4770      	bx	lr
  4061b6:	bf00      	nop

004061b8 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  4061b8:	6401      	str	r1, [r0, #64]	; 0x40
  4061ba:	4770      	bx	lr

004061bc <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4061bc:	6441      	str	r1, [r0, #68]	; 0x44
  4061be:	4770      	bx	lr

004061c0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4061c0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4061c2:	4770      	bx	lr

004061c4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4061c4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4061c6:	4770      	bx	lr

004061c8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4061c8:	b570      	push	{r4, r5, r6, lr}
  4061ca:	b082      	sub	sp, #8
  4061cc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4061ce:	4c47      	ldr	r4, [pc, #284]	; (4062ec <pio_configure_pin+0x124>)
  4061d0:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4061d4:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4061d6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4061da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4061de:	d04d      	beq.n	40627c <pio_configure_pin+0xb4>
  4061e0:	d809      	bhi.n	4061f6 <pio_configure_pin+0x2e>
  4061e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4061e6:	d023      	beq.n	406230 <pio_configure_pin+0x68>
  4061e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4061ec:	d033      	beq.n	406256 <pio_configure_pin+0x8e>
  4061ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4061f2:	d177      	bne.n	4062e4 <pio_configure_pin+0x11c>
  4061f4:	e009      	b.n	40620a <pio_configure_pin+0x42>
  4061f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4061fa:	d05d      	beq.n	4062b8 <pio_configure_pin+0xf0>
  4061fc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  406200:	d05a      	beq.n	4062b8 <pio_configure_pin+0xf0>
  406202:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  406206:	d04c      	beq.n	4062a2 <pio_configure_pin+0xda>
  406208:	e06c      	b.n	4062e4 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40620a:	f000 001f 	and.w	r0, r0, #31
  40620e:	2601      	movs	r6, #1
  406210:	4086      	lsls	r6, r0
  406212:	4632      	mov	r2, r6
  406214:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  406218:	4620      	mov	r0, r4
  40621a:	4b35      	ldr	r3, [pc, #212]	; (4062f0 <pio_configure_pin+0x128>)
  40621c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40621e:	f015 0f01 	tst.w	r5, #1
  406222:	d002      	beq.n	40622a <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  406224:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  406226:	2001      	movs	r0, #1
  406228:	e05d      	b.n	4062e6 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40622a:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40622c:	2001      	movs	r0, #1
  40622e:	e05a      	b.n	4062e6 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  406230:	f000 001f 	and.w	r0, r0, #31
  406234:	2601      	movs	r6, #1
  406236:	4086      	lsls	r6, r0
  406238:	4632      	mov	r2, r6
  40623a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40623e:	4620      	mov	r0, r4
  406240:	4b2b      	ldr	r3, [pc, #172]	; (4062f0 <pio_configure_pin+0x128>)
  406242:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  406244:	f015 0f01 	tst.w	r5, #1
  406248:	d002      	beq.n	406250 <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  40624a:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  40624c:	2001      	movs	r0, #1
  40624e:	e04a      	b.n	4062e6 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  406250:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  406252:	2001      	movs	r0, #1
  406254:	e047      	b.n	4062e6 <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  406256:	f000 001f 	and.w	r0, r0, #31
  40625a:	2601      	movs	r6, #1
  40625c:	4086      	lsls	r6, r0
  40625e:	4632      	mov	r2, r6
  406260:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  406264:	4620      	mov	r0, r4
  406266:	4b22      	ldr	r3, [pc, #136]	; (4062f0 <pio_configure_pin+0x128>)
  406268:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40626a:	f015 0f01 	tst.w	r5, #1
  40626e:	d002      	beq.n	406276 <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  406270:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  406272:	2001      	movs	r0, #1
  406274:	e037      	b.n	4062e6 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  406276:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  406278:	2001      	movs	r0, #1
  40627a:	e034      	b.n	4062e6 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40627c:	f000 001f 	and.w	r0, r0, #31
  406280:	2601      	movs	r6, #1
  406282:	4086      	lsls	r6, r0
  406284:	4632      	mov	r2, r6
  406286:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40628a:	4620      	mov	r0, r4
  40628c:	4b18      	ldr	r3, [pc, #96]	; (4062f0 <pio_configure_pin+0x128>)
  40628e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  406290:	f015 0f01 	tst.w	r5, #1
  406294:	d002      	beq.n	40629c <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  406296:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  406298:	2001      	movs	r0, #1
  40629a:	e024      	b.n	4062e6 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40629c:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40629e:	2001      	movs	r0, #1
  4062a0:	e021      	b.n	4062e6 <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4062a2:	f000 011f 	and.w	r1, r0, #31
  4062a6:	2601      	movs	r6, #1
  4062a8:	462a      	mov	r2, r5
  4062aa:	fa06 f101 	lsl.w	r1, r6, r1
  4062ae:	4620      	mov	r0, r4
  4062b0:	4b10      	ldr	r3, [pc, #64]	; (4062f4 <pio_configure_pin+0x12c>)
  4062b2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4062b4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4062b6:	e016      	b.n	4062e6 <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4062b8:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4062bc:	f000 011f 	and.w	r1, r0, #31
  4062c0:	2601      	movs	r6, #1
  4062c2:	ea05 0306 	and.w	r3, r5, r6
  4062c6:	9300      	str	r3, [sp, #0]
  4062c8:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4062cc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4062d0:	bf14      	ite	ne
  4062d2:	2200      	movne	r2, #0
  4062d4:	2201      	moveq	r2, #1
  4062d6:	fa06 f101 	lsl.w	r1, r6, r1
  4062da:	4620      	mov	r0, r4
  4062dc:	4c06      	ldr	r4, [pc, #24]	; (4062f8 <pio_configure_pin+0x130>)
  4062de:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4062e0:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4062e2:	e000      	b.n	4062e6 <pio_configure_pin+0x11e>

	default:
		return 0;
  4062e4:	2000      	movs	r0, #0
	}

	return 1;
}
  4062e6:	b002      	add	sp, #8
  4062e8:	bd70      	pop	{r4, r5, r6, pc}
  4062ea:	bf00      	nop
  4062ec:	00200707 	.word	0x00200707
  4062f0:	00406091 	.word	0x00406091
  4062f4:	00406125 	.word	0x00406125
  4062f8:	0040615d 	.word	0x0040615d

004062fc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4062fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406300:	4604      	mov	r4, r0
  406302:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  406304:	4b0e      	ldr	r3, [pc, #56]	; (406340 <pio_handler_process+0x44>)
  406306:	4798      	blx	r3
  406308:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40630a:	4620      	mov	r0, r4
  40630c:	4b0d      	ldr	r3, [pc, #52]	; (406344 <pio_handler_process+0x48>)
  40630e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  406310:	4005      	ands	r5, r0
  406312:	d013      	beq.n	40633c <pio_handler_process+0x40>
  406314:	4c0c      	ldr	r4, [pc, #48]	; (406348 <pio_handler_process+0x4c>)
  406316:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40631a:	6823      	ldr	r3, [r4, #0]
  40631c:	4543      	cmp	r3, r8
  40631e:	d108      	bne.n	406332 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  406320:	6861      	ldr	r1, [r4, #4]
  406322:	4229      	tst	r1, r5
  406324:	d005      	beq.n	406332 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  406326:	68e3      	ldr	r3, [r4, #12]
  406328:	4640      	mov	r0, r8
  40632a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40632c:	6863      	ldr	r3, [r4, #4]
  40632e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  406332:	42b4      	cmp	r4, r6
  406334:	d002      	beq.n	40633c <pio_handler_process+0x40>
  406336:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  406338:	2d00      	cmp	r5, #0
  40633a:	d1ee      	bne.n	40631a <pio_handler_process+0x1e>
  40633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406340:	004061c1 	.word	0x004061c1
  406344:	004061c5 	.word	0x004061c5
  406348:	2040097c 	.word	0x2040097c

0040634c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40634e:	4c17      	ldr	r4, [pc, #92]	; (4063ac <pio_handler_set+0x60>)
  406350:	6826      	ldr	r6, [r4, #0]
  406352:	2e06      	cmp	r6, #6
  406354:	d828      	bhi.n	4063a8 <pio_handler_set+0x5c>
  406356:	f04f 0c00 	mov.w	ip, #0
  40635a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40635c:	4f14      	ldr	r7, [pc, #80]	; (4063b0 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  40635e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  406360:	0125      	lsls	r5, r4, #4
  406362:	597d      	ldr	r5, [r7, r5]
  406364:	428d      	cmp	r5, r1
  406366:	d104      	bne.n	406372 <pio_handler_set+0x26>
  406368:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40636c:	686d      	ldr	r5, [r5, #4]
  40636e:	4295      	cmp	r5, r2
  406370:	d004      	beq.n	40637c <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  406372:	3401      	adds	r4, #1
  406374:	b2e4      	uxtb	r4, r4
  406376:	46a4      	mov	ip, r4
  406378:	42a6      	cmp	r6, r4
  40637a:	d2f0      	bcs.n	40635e <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40637c:	4d0c      	ldr	r5, [pc, #48]	; (4063b0 <pio_handler_set+0x64>)
  40637e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  406382:	eb05 040e 	add.w	r4, r5, lr
  406386:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  40638a:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40638c:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40638e:	9906      	ldr	r1, [sp, #24]
  406390:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  406392:	3601      	adds	r6, #1
  406394:	4566      	cmp	r6, ip
  406396:	d101      	bne.n	40639c <pio_handler_set+0x50>
		gs_ul_nb_sources++;
  406398:	4904      	ldr	r1, [pc, #16]	; (4063ac <pio_handler_set+0x60>)
  40639a:	600e      	str	r6, [r1, #0]
  40639c:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40639e:	461a      	mov	r2, r3
  4063a0:	4b04      	ldr	r3, [pc, #16]	; (4063b4 <pio_handler_set+0x68>)
  4063a2:	4798      	blx	r3

	return 0;
  4063a4:	2000      	movs	r0, #0
  4063a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4063a8:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4063aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4063ac:	20400978 	.word	0x20400978
  4063b0:	2040097c 	.word	0x2040097c
  4063b4:	00406185 	.word	0x00406185

004063b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4063b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4063ba:	210a      	movs	r1, #10
  4063bc:	4801      	ldr	r0, [pc, #4]	; (4063c4 <PIOA_Handler+0xc>)
  4063be:	4b02      	ldr	r3, [pc, #8]	; (4063c8 <PIOA_Handler+0x10>)
  4063c0:	4798      	blx	r3
  4063c2:	bd08      	pop	{r3, pc}
  4063c4:	400e0e00 	.word	0x400e0e00
  4063c8:	004062fd 	.word	0x004062fd

004063cc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4063cc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4063ce:	210b      	movs	r1, #11
  4063d0:	4801      	ldr	r0, [pc, #4]	; (4063d8 <PIOB_Handler+0xc>)
  4063d2:	4b02      	ldr	r3, [pc, #8]	; (4063dc <PIOB_Handler+0x10>)
  4063d4:	4798      	blx	r3
  4063d6:	bd08      	pop	{r3, pc}
  4063d8:	400e1000 	.word	0x400e1000
  4063dc:	004062fd 	.word	0x004062fd

004063e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4063e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4063e2:	210c      	movs	r1, #12
  4063e4:	4801      	ldr	r0, [pc, #4]	; (4063ec <PIOC_Handler+0xc>)
  4063e6:	4b02      	ldr	r3, [pc, #8]	; (4063f0 <PIOC_Handler+0x10>)
  4063e8:	4798      	blx	r3
  4063ea:	bd08      	pop	{r3, pc}
  4063ec:	400e1200 	.word	0x400e1200
  4063f0:	004062fd 	.word	0x004062fd

004063f4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4063f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4063f6:	2110      	movs	r1, #16
  4063f8:	4801      	ldr	r0, [pc, #4]	; (406400 <PIOD_Handler+0xc>)
  4063fa:	4b02      	ldr	r3, [pc, #8]	; (406404 <PIOD_Handler+0x10>)
  4063fc:	4798      	blx	r3
  4063fe:	bd08      	pop	{r3, pc}
  406400:	400e1400 	.word	0x400e1400
  406404:	004062fd 	.word	0x004062fd

00406408 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  406408:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40640a:	2111      	movs	r1, #17
  40640c:	4801      	ldr	r0, [pc, #4]	; (406414 <PIOE_Handler+0xc>)
  40640e:	4b02      	ldr	r3, [pc, #8]	; (406418 <PIOE_Handler+0x10>)
  406410:	4798      	blx	r3
  406412:	bd08      	pop	{r3, pc}
  406414:	400e1600 	.word	0x400e1600
  406418:	004062fd 	.word	0x004062fd

0040641c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  40641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40641e:	4606      	mov	r6, r0
  406420:	460d      	mov	r5, r1
  406422:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  406424:	4b17      	ldr	r3, [pc, #92]	; (406484 <pio_handler_set_priority+0x68>)
  406426:	4798      	blx	r3
  406428:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40642a:	f04f 31ff 	mov.w	r1, #4294967295
  40642e:	4630      	mov	r0, r6
  406430:	4b15      	ldr	r3, [pc, #84]	; (406488 <pio_handler_set_priority+0x6c>)
  406432:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  406434:	4630      	mov	r0, r6
  406436:	4b15      	ldr	r3, [pc, #84]	; (40648c <pio_handler_set_priority+0x70>)
  406438:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40643a:	fa5f fe85 	uxtb.w	lr, r5
  40643e:	f00e 031f 	and.w	r3, lr, #31
  406442:	2201      	movs	r2, #1
  406444:	fa02 f303 	lsl.w	r3, r2, r3
  406448:	0968      	lsrs	r0, r5, #5
  40644a:	4911      	ldr	r1, [pc, #68]	; (406490 <pio_handler_set_priority+0x74>)
  40644c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  406450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  406454:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  406458:	2d00      	cmp	r5, #0
  40645a:	da07      	bge.n	40646c <pio_handler_set_priority+0x50>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40645c:	f00e 0e0f 	and.w	lr, lr, #15
  406460:	0164      	lsls	r4, r4, #5
  406462:	b2e4      	uxtb	r4, r4
  406464:	4a0b      	ldr	r2, [pc, #44]	; (406494 <pio_handler_set_priority+0x78>)
  406466:	f802 400e 	strb.w	r4, [r2, lr]
  40646a:	e003      	b.n	406474 <pio_handler_set_priority+0x58>
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40646c:	0164      	lsls	r4, r4, #5
  40646e:	b2e4      	uxtb	r4, r4
  406470:	4a09      	ldr	r2, [pc, #36]	; (406498 <pio_handler_set_priority+0x7c>)
  406472:	5554      	strb	r4, [r2, r5]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  406474:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  406478:	4639      	mov	r1, r7
  40647a:	4630      	mov	r0, r6
  40647c:	4b07      	ldr	r3, [pc, #28]	; (40649c <pio_handler_set_priority+0x80>)
  40647e:	4798      	blx	r3
  406480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406482:	bf00      	nop
  406484:	004061c5 	.word	0x004061c5
  406488:	004061bd 	.word	0x004061bd
  40648c:	004061c1 	.word	0x004061c1
  406490:	e000e100 	.word	0xe000e100
  406494:	e000ed14 	.word	0xe000ed14
  406498:	e000e400 	.word	0xe000e400
  40649c:	004061b9 	.word	0x004061b9

004064a0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4064a0:	2803      	cmp	r0, #3
  4064a2:	d007      	beq.n	4064b4 <pmc_mck_set_division+0x14>
  4064a4:	2804      	cmp	r0, #4
  4064a6:	d008      	beq.n	4064ba <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4064a8:	2802      	cmp	r0, #2
  4064aa:	bf0c      	ite	eq
  4064ac:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4064b0:	2200      	movne	r2, #0
  4064b2:	e004      	b.n	4064be <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4064b4:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  4064b8:	e001      	b.n	4064be <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4064ba:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4064be:	4906      	ldr	r1, [pc, #24]	; (4064d8 <pmc_mck_set_division+0x38>)
  4064c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4064c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4064c6:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4064c8:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4064ca:	460a      	mov	r2, r1
  4064cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4064ce:	f013 0f08 	tst.w	r3, #8
  4064d2:	d0fb      	beq.n	4064cc <pmc_mck_set_division+0x2c>
}
  4064d4:	4770      	bx	lr
  4064d6:	bf00      	nop
  4064d8:	400e0600 	.word	0x400e0600

004064dc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4064dc:	4a18      	ldr	r2, [pc, #96]	; (406540 <pmc_switch_mck_to_pllack+0x64>)
  4064de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4064e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4064e4:	4318      	orrs	r0, r3
  4064e6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4064e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4064ea:	f013 0f08 	tst.w	r3, #8
  4064ee:	d003      	beq.n	4064f8 <pmc_switch_mck_to_pllack+0x1c>
  4064f0:	e009      	b.n	406506 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4064f2:	3b01      	subs	r3, #1
  4064f4:	d103      	bne.n	4064fe <pmc_switch_mck_to_pllack+0x22>
  4064f6:	e01e      	b.n	406536 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4064f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4064fc:	4910      	ldr	r1, [pc, #64]	; (406540 <pmc_switch_mck_to_pllack+0x64>)
  4064fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  406500:	f012 0f08 	tst.w	r2, #8
  406504:	d0f5      	beq.n	4064f2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  406506:	4a0e      	ldr	r2, [pc, #56]	; (406540 <pmc_switch_mck_to_pllack+0x64>)
  406508:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40650a:	f023 0303 	bic.w	r3, r3, #3
  40650e:	f043 0302 	orr.w	r3, r3, #2
  406512:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  406514:	6e90      	ldr	r0, [r2, #104]	; 0x68
  406516:	f010 0008 	ands.w	r0, r0, #8
  40651a:	d004      	beq.n	406526 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40651c:	2000      	movs	r0, #0
  40651e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  406520:	3b01      	subs	r3, #1
  406522:	d103      	bne.n	40652c <pmc_switch_mck_to_pllack+0x50>
  406524:	e009      	b.n	40653a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  406526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40652a:	4905      	ldr	r1, [pc, #20]	; (406540 <pmc_switch_mck_to_pllack+0x64>)
  40652c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40652e:	f012 0f08 	tst.w	r2, #8
  406532:	d0f5      	beq.n	406520 <pmc_switch_mck_to_pllack+0x44>
  406534:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  406536:	2001      	movs	r0, #1
  406538:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40653a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40653c:	4770      	bx	lr
  40653e:	bf00      	nop
  406540:	400e0600 	.word	0x400e0600

00406544 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  406544:	b138      	cbz	r0, 406556 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  406546:	490e      	ldr	r1, [pc, #56]	; (406580 <pmc_switch_mainck_to_xtal+0x3c>)
  406548:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40654a:	4a0e      	ldr	r2, [pc, #56]	; (406584 <pmc_switch_mainck_to_xtal+0x40>)
  40654c:	401a      	ands	r2, r3
  40654e:	4b0e      	ldr	r3, [pc, #56]	; (406588 <pmc_switch_mainck_to_xtal+0x44>)
  406550:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  406552:	620b      	str	r3, [r1, #32]
  406554:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  406556:	480a      	ldr	r0, [pc, #40]	; (406580 <pmc_switch_mainck_to_xtal+0x3c>)
  406558:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40655a:	0209      	lsls	r1, r1, #8
  40655c:	b289      	uxth	r1, r1
  40655e:	4a0b      	ldr	r2, [pc, #44]	; (40658c <pmc_switch_mainck_to_xtal+0x48>)
  406560:	401a      	ands	r2, r3
  406562:	4b0b      	ldr	r3, [pc, #44]	; (406590 <pmc_switch_mainck_to_xtal+0x4c>)
  406564:	4313      	orrs	r3, r2
  406566:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  406568:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40656a:	4602      	mov	r2, r0
  40656c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40656e:	f013 0f01 	tst.w	r3, #1
  406572:	d0fb      	beq.n	40656c <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  406574:	4a02      	ldr	r2, [pc, #8]	; (406580 <pmc_switch_mainck_to_xtal+0x3c>)
  406576:	6a11      	ldr	r1, [r2, #32]
  406578:	4b06      	ldr	r3, [pc, #24]	; (406594 <pmc_switch_mainck_to_xtal+0x50>)
  40657a:	430b      	orrs	r3, r1
  40657c:	6213      	str	r3, [r2, #32]
  40657e:	4770      	bx	lr
  406580:	400e0600 	.word	0x400e0600
  406584:	fec8fffc 	.word	0xfec8fffc
  406588:	01370002 	.word	0x01370002
  40658c:	ffc8fffc 	.word	0xffc8fffc
  406590:	00370001 	.word	0x00370001
  406594:	01370000 	.word	0x01370000

00406598 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  406598:	4b02      	ldr	r3, [pc, #8]	; (4065a4 <pmc_osc_is_ready_mainck+0xc>)
  40659a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40659c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4065a0:	4770      	bx	lr
  4065a2:	bf00      	nop
  4065a4:	400e0600 	.word	0x400e0600

004065a8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4065a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4065ac:	4b01      	ldr	r3, [pc, #4]	; (4065b4 <pmc_disable_pllack+0xc>)
  4065ae:	629a      	str	r2, [r3, #40]	; 0x28
  4065b0:	4770      	bx	lr
  4065b2:	bf00      	nop
  4065b4:	400e0600 	.word	0x400e0600

004065b8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4065b8:	4b02      	ldr	r3, [pc, #8]	; (4065c4 <pmc_is_locked_pllack+0xc>)
  4065ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4065bc:	f000 0002 	and.w	r0, r0, #2
  4065c0:	4770      	bx	lr
  4065c2:	bf00      	nop
  4065c4:	400e0600 	.word	0x400e0600

004065c8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4065c8:	283f      	cmp	r0, #63	; 0x3f
  4065ca:	d81e      	bhi.n	40660a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4065cc:	281f      	cmp	r0, #31
  4065ce:	d80c      	bhi.n	4065ea <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4065d0:	4b11      	ldr	r3, [pc, #68]	; (406618 <pmc_enable_periph_clk+0x50>)
  4065d2:	699a      	ldr	r2, [r3, #24]
  4065d4:	2301      	movs	r3, #1
  4065d6:	4083      	lsls	r3, r0
  4065d8:	4393      	bics	r3, r2
  4065da:	d018      	beq.n	40660e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4065dc:	2301      	movs	r3, #1
  4065de:	fa03 f000 	lsl.w	r0, r3, r0
  4065e2:	4b0d      	ldr	r3, [pc, #52]	; (406618 <pmc_enable_periph_clk+0x50>)
  4065e4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4065e6:	2000      	movs	r0, #0
  4065e8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4065ea:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4065ec:	4b0a      	ldr	r3, [pc, #40]	; (406618 <pmc_enable_periph_clk+0x50>)
  4065ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4065f2:	2301      	movs	r3, #1
  4065f4:	4083      	lsls	r3, r0
  4065f6:	4393      	bics	r3, r2
  4065f8:	d00b      	beq.n	406612 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4065fa:	2301      	movs	r3, #1
  4065fc:	fa03 f000 	lsl.w	r0, r3, r0
  406600:	4b05      	ldr	r3, [pc, #20]	; (406618 <pmc_enable_periph_clk+0x50>)
  406602:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  406606:	2000      	movs	r0, #0
  406608:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40660a:	2001      	movs	r0, #1
  40660c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40660e:	2000      	movs	r0, #0
  406610:	4770      	bx	lr
  406612:	2000      	movs	r0, #0
}
  406614:	4770      	bx	lr
  406616:	bf00      	nop
  406618:	400e0600 	.word	0x400e0600

0040661c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40661c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40661e:	4b07      	ldr	r3, [pc, #28]	; (40663c <spi_enable_clock+0x20>)
  406620:	4298      	cmp	r0, r3
  406622:	d103      	bne.n	40662c <spi_enable_clock+0x10>
  406624:	2015      	movs	r0, #21
  406626:	4b06      	ldr	r3, [pc, #24]	; (406640 <spi_enable_clock+0x24>)
  406628:	4798      	blx	r3
  40662a:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40662c:	4b05      	ldr	r3, [pc, #20]	; (406644 <spi_enable_clock+0x28>)
  40662e:	4298      	cmp	r0, r3
  406630:	d102      	bne.n	406638 <spi_enable_clock+0x1c>
  406632:	202a      	movs	r0, #42	; 0x2a
  406634:	4b02      	ldr	r3, [pc, #8]	; (406640 <spi_enable_clock+0x24>)
  406636:	4798      	blx	r3
  406638:	bd08      	pop	{r3, pc}
  40663a:	bf00      	nop
  40663c:	40008000 	.word	0x40008000
  406640:	004065c9 	.word	0x004065c9
  406644:	40058000 	.word	0x40058000

00406648 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  406648:	6843      	ldr	r3, [r0, #4]
  40664a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40664e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  406650:	6843      	ldr	r3, [r0, #4]
  406652:	0409      	lsls	r1, r1, #16
  406654:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  406658:	430b      	orrs	r3, r1
  40665a:	6043      	str	r3, [r0, #4]
  40665c:	4770      	bx	lr
  40665e:	bf00      	nop

00406660 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  406660:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  406662:	f643 2399 	movw	r3, #15001	; 0x3a99
  406666:	e001      	b.n	40666c <spi_read+0xc>
		if (!timeout--) {
  406668:	3b01      	subs	r3, #1
  40666a:	d00e      	beq.n	40668a <spi_read+0x2a>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  40666c:	6904      	ldr	r4, [r0, #16]
  40666e:	f014 0f01 	tst.w	r4, #1
  406672:	d0f9      	beq.n	406668 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
  406674:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  406676:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  406678:	f010 0f02 	tst.w	r0, #2
  40667c:	d002      	beq.n	406684 <spi_read+0x24>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  40667e:	f3c3 4003 	ubfx	r0, r3, #16, #4
  406682:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  406684:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  406686:	2000      	movs	r0, #0
  406688:	e000      	b.n	40668c <spi_read+0x2c>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  40668a:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
  40668c:	f85d 4b04 	ldr.w	r4, [sp], #4
  406690:	4770      	bx	lr
  406692:	bf00      	nop

00406694 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  406694:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  406696:	f643 2499 	movw	r4, #15001	; 0x3a99
  40669a:	e001      	b.n	4066a0 <spi_write+0xc>
		if (!timeout--) {
  40669c:	3c01      	subs	r4, #1
  40669e:	d011      	beq.n	4066c4 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4066a0:	6905      	ldr	r5, [r0, #16]
  4066a2:	f015 0f02 	tst.w	r5, #2
  4066a6:	d0f9      	beq.n	40669c <spi_write+0x8>
  4066a8:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4066aa:	f014 0f02 	tst.w	r4, #2
  4066ae:	d006      	beq.n	4066be <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4066b0:	0412      	lsls	r2, r2, #16
  4066b2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4066b6:	4311      	orrs	r1, r2
		if (uc_last) {
  4066b8:	b10b      	cbz	r3, 4066be <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  4066ba:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4066be:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4066c0:	2000      	movs	r0, #0
  4066c2:	e000      	b.n	4066c6 <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  4066c4:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  4066c6:	bc30      	pop	{r4, r5}
  4066c8:	4770      	bx	lr
  4066ca:	bf00      	nop

004066cc <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4066cc:	b132      	cbz	r2, 4066dc <spi_set_clock_polarity+0x10>
  4066ce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4066d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4066d4:	f043 0301 	orr.w	r3, r3, #1
  4066d8:	6303      	str	r3, [r0, #48]	; 0x30
  4066da:	4770      	bx	lr
  4066dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4066e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4066e2:	f023 0301 	bic.w	r3, r3, #1
  4066e6:	6303      	str	r3, [r0, #48]	; 0x30
  4066e8:	4770      	bx	lr
  4066ea:	bf00      	nop

004066ec <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4066ec:	b132      	cbz	r2, 4066fc <spi_set_clock_phase+0x10>
  4066ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4066f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4066f4:	f043 0302 	orr.w	r3, r3, #2
  4066f8:	6303      	str	r3, [r0, #48]	; 0x30
  4066fa:	4770      	bx	lr
  4066fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  406700:	6b03      	ldr	r3, [r0, #48]	; 0x30
  406702:	f023 0302 	bic.w	r3, r3, #2
  406706:	6303      	str	r3, [r0, #48]	; 0x30
  406708:	4770      	bx	lr
  40670a:	bf00      	nop

0040670c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40670c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  406710:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  406712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  406716:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  406718:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40671a:	431a      	orrs	r2, r3
  40671c:	630a      	str	r2, [r1, #48]	; 0x30
  40671e:	4770      	bx	lr

00406720 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  406720:	1e43      	subs	r3, r0, #1
  406722:	4419      	add	r1, r3
  406724:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  406728:	1e43      	subs	r3, r0, #1
  40672a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40672c:	bf94      	ite	ls
  40672e:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  406730:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  406734:	4770      	bx	lr
  406736:	bf00      	nop

00406738 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  406738:	b16a      	cbz	r2, 406756 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  40673a:	b410      	push	{r4}
  40673c:	4614      	mov	r4, r2
  40673e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  406742:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  406744:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  406748:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40674a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40674c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  406750:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  406752:	2000      	movs	r0, #0
  406754:	e002      	b.n	40675c <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  406756:	f04f 30ff 	mov.w	r0, #4294967295
  40675a:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  40675c:	f85d 4b04 	ldr.w	r4, [sp], #4
  406760:	4770      	bx	lr
  406762:	bf00      	nop

00406764 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  406764:	b410      	push	{r4}
  406766:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40676a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  40676c:	b280      	uxth	r0, r0
  40676e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  406770:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  406772:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  406776:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40677a:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  40677c:	f85d 4b04 	ldr.w	r4, [sp], #4
  406780:	4770      	bx	lr
  406782:	bf00      	nop

00406784 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  406784:	6943      	ldr	r3, [r0, #20]
  406786:	f013 0f02 	tst.w	r3, #2
  40678a:	d002      	beq.n	406792 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40678c:	61c1      	str	r1, [r0, #28]
	return 0;
  40678e:	2000      	movs	r0, #0
  406790:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  406792:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  406794:	4770      	bx	lr
  406796:	bf00      	nop

00406798 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  406798:	6943      	ldr	r3, [r0, #20]
  40679a:	f013 0f01 	tst.w	r3, #1
  40679e:	d003      	beq.n	4067a8 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4067a0:	6983      	ldr	r3, [r0, #24]
  4067a2:	700b      	strb	r3, [r1, #0]
	return 0;
  4067a4:	2000      	movs	r0, #0
  4067a6:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4067a8:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4067aa:	4770      	bx	lr

004067ac <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4067ac:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4067ae:	010c      	lsls	r4, r1, #4
  4067b0:	4294      	cmp	r4, r2
  4067b2:	d90f      	bls.n	4067d4 <usart_set_async_baudrate+0x28>
  4067b4:	e01a      	b.n	4067ec <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4067b6:	6841      	ldr	r1, [r0, #4]
  4067b8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4067bc:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4067be:	0412      	lsls	r2, r2, #16
  4067c0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4067c4:	431a      	orrs	r2, r3
  4067c6:	6202      	str	r2, [r0, #32]

	return 0;
  4067c8:	2000      	movs	r0, #0
  4067ca:	e01c      	b.n	406806 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  4067cc:	2001      	movs	r0, #1
  4067ce:	e01a      	b.n	406806 <usart_set_async_baudrate+0x5a>
  4067d0:	2001      	movs	r0, #1
  4067d2:	e018      	b.n	406806 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4067d4:	0863      	lsrs	r3, r4, #1
  4067d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4067da:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  4067de:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4067e0:	1e5c      	subs	r4, r3, #1
  4067e2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4067e6:	428c      	cmp	r4, r1
  4067e8:	d9e9      	bls.n	4067be <usart_set_async_baudrate+0x12>
  4067ea:	e7ef      	b.n	4067cc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4067ec:	00c9      	lsls	r1, r1, #3
  4067ee:	084b      	lsrs	r3, r1, #1
  4067f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4067f4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4067f8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4067fa:	1e5c      	subs	r4, r3, #1
  4067fc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  406800:	428c      	cmp	r4, r1
  406802:	d8e5      	bhi.n	4067d0 <usart_set_async_baudrate+0x24>
  406804:	e7d7      	b.n	4067b6 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  406806:	f85d 4b04 	ldr.w	r4, [sp], #4
  40680a:	4770      	bx	lr

0040680c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40680c:	4b08      	ldr	r3, [pc, #32]	; (406830 <usart_reset+0x24>)
  40680e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  406812:	2300      	movs	r3, #0
  406814:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  406816:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  406818:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40681a:	2388      	movs	r3, #136	; 0x88
  40681c:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40681e:	2324      	movs	r3, #36	; 0x24
  406820:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  406822:	f44f 7380 	mov.w	r3, #256	; 0x100
  406826:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  406828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40682c:	6003      	str	r3, [r0, #0]
  40682e:	4770      	bx	lr
  406830:	55534100 	.word	0x55534100

00406834 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  406834:	b570      	push	{r4, r5, r6, lr}
  406836:	4605      	mov	r5, r0
  406838:	460c      	mov	r4, r1
  40683a:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40683c:	4b0f      	ldr	r3, [pc, #60]	; (40687c <usart_init_rs232+0x48>)
  40683e:	4798      	blx	r3

	ul_reg_val = 0;
  406840:	2200      	movs	r2, #0
  406842:	4b0f      	ldr	r3, [pc, #60]	; (406880 <usart_init_rs232+0x4c>)
  406844:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  406846:	b19c      	cbz	r4, 406870 <usart_init_rs232+0x3c>
  406848:	4632      	mov	r2, r6
  40684a:	6821      	ldr	r1, [r4, #0]
  40684c:	4628      	mov	r0, r5
  40684e:	4b0d      	ldr	r3, [pc, #52]	; (406884 <usart_init_rs232+0x50>)
  406850:	4798      	blx	r3
  406852:	4602      	mov	r2, r0
  406854:	b970      	cbnz	r0, 406874 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  406856:	6861      	ldr	r1, [r4, #4]
  406858:	68a3      	ldr	r3, [r4, #8]
  40685a:	4319      	orrs	r1, r3
  40685c:	6923      	ldr	r3, [r4, #16]
  40685e:	4319      	orrs	r1, r3
  406860:	68e3      	ldr	r3, [r4, #12]
  406862:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  406864:	4906      	ldr	r1, [pc, #24]	; (406880 <usart_init_rs232+0x4c>)
  406866:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  406868:	6869      	ldr	r1, [r5, #4]
  40686a:	430b      	orrs	r3, r1
  40686c:	606b      	str	r3, [r5, #4]

	return 0;
  40686e:	e002      	b.n	406876 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  406870:	2201      	movs	r2, #1
  406872:	e000      	b.n	406876 <usart_init_rs232+0x42>
  406874:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  406876:	4610      	mov	r0, r2
  406878:	bd70      	pop	{r4, r5, r6, pc}
  40687a:	bf00      	nop
  40687c:	0040680d 	.word	0x0040680d
  406880:	204009ec 	.word	0x204009ec
  406884:	004067ad 	.word	0x004067ad

00406888 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  406888:	2340      	movs	r3, #64	; 0x40
  40688a:	6003      	str	r3, [r0, #0]
  40688c:	4770      	bx	lr
  40688e:	bf00      	nop

00406890 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  406890:	2310      	movs	r3, #16
  406892:	6003      	str	r3, [r0, #0]
  406894:	4770      	bx	lr
  406896:	bf00      	nop

00406898 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  406898:	6943      	ldr	r3, [r0, #20]
  40689a:	f013 0f02 	tst.w	r3, #2
  40689e:	d004      	beq.n	4068aa <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4068a0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4068a4:	61c1      	str	r1, [r0, #28]
	return 0;
  4068a6:	2000      	movs	r0, #0
  4068a8:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4068aa:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4068ac:	4770      	bx	lr
  4068ae:	bf00      	nop

004068b0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4068b0:	6943      	ldr	r3, [r0, #20]
  4068b2:	f013 0f01 	tst.w	r3, #1
  4068b6:	d005      	beq.n	4068c4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4068b8:	6983      	ldr	r3, [r0, #24]
  4068ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4068be:	600b      	str	r3, [r1, #0]

	return 0;
  4068c0:	2000      	movs	r0, #0
  4068c2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4068c4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4068c6:	4770      	bx	lr

004068c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4068c8:	e7fe      	b.n	4068c8 <Dummy_Handler>
  4068ca:	bf00      	nop

004068cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4068cc:	b500      	push	{lr}
  4068ce:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  4068d0:	4b27      	ldr	r3, [pc, #156]	; (406970 <Reset_Handler+0xa4>)
  4068d2:	4a28      	ldr	r2, [pc, #160]	; (406974 <Reset_Handler+0xa8>)
  4068d4:	429a      	cmp	r2, r3
  4068d6:	d003      	beq.n	4068e0 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  4068d8:	4b27      	ldr	r3, [pc, #156]	; (406978 <Reset_Handler+0xac>)
  4068da:	4a25      	ldr	r2, [pc, #148]	; (406970 <Reset_Handler+0xa4>)
  4068dc:	429a      	cmp	r2, r3
  4068de:	d304      	bcc.n	4068ea <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4068e0:	4b26      	ldr	r3, [pc, #152]	; (40697c <Reset_Handler+0xb0>)
  4068e2:	4a27      	ldr	r2, [pc, #156]	; (406980 <Reset_Handler+0xb4>)
  4068e4:	429a      	cmp	r2, r3
  4068e6:	d30f      	bcc.n	406908 <Reset_Handler+0x3c>
  4068e8:	e01a      	b.n	406920 <Reset_Handler+0x54>
  4068ea:	4921      	ldr	r1, [pc, #132]	; (406970 <Reset_Handler+0xa4>)
  4068ec:	4b25      	ldr	r3, [pc, #148]	; (406984 <Reset_Handler+0xb8>)
  4068ee:	1a5b      	subs	r3, r3, r1
  4068f0:	f023 0303 	bic.w	r3, r3, #3
  4068f4:	3304      	adds	r3, #4
  4068f6:	4a1f      	ldr	r2, [pc, #124]	; (406974 <Reset_Handler+0xa8>)
  4068f8:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4068fa:	f852 0b04 	ldr.w	r0, [r2], #4
  4068fe:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  406902:	429a      	cmp	r2, r3
  406904:	d1f9      	bne.n	4068fa <Reset_Handler+0x2e>
  406906:	e7eb      	b.n	4068e0 <Reset_Handler+0x14>
  406908:	4b1f      	ldr	r3, [pc, #124]	; (406988 <Reset_Handler+0xbc>)
  40690a:	4a20      	ldr	r2, [pc, #128]	; (40698c <Reset_Handler+0xc0>)
  40690c:	1ad2      	subs	r2, r2, r3
  40690e:	f022 0203 	bic.w	r2, r2, #3
  406912:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  406914:	3b04      	subs	r3, #4
                *pDest++ = 0;
  406916:	2100      	movs	r1, #0
  406918:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40691c:	4293      	cmp	r3, r2
  40691e:	d1fb      	bne.n	406918 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  406920:	4a1b      	ldr	r2, [pc, #108]	; (406990 <Reset_Handler+0xc4>)
  406922:	4b1c      	ldr	r3, [pc, #112]	; (406994 <Reset_Handler+0xc8>)
  406924:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  406928:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40692a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40692e:	fab3 f383 	clz	r3, r3
  406932:	095b      	lsrs	r3, r3, #5
  406934:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  406936:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  406938:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40693c:	2200      	movs	r2, #0
  40693e:	4b16      	ldr	r3, [pc, #88]	; (406998 <Reset_Handler+0xcc>)
  406940:	701a      	strb	r2, [r3, #0]
	return flags;
  406942:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  406944:	4a15      	ldr	r2, [pc, #84]	; (40699c <Reset_Handler+0xd0>)
  406946:	6813      	ldr	r3, [r2, #0]
  406948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40694c:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40694e:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  406952:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  406956:	b129      	cbz	r1, 406964 <Reset_Handler+0x98>
		cpu_irq_enable();
  406958:	2201      	movs	r2, #1
  40695a:	4b0f      	ldr	r3, [pc, #60]	; (406998 <Reset_Handler+0xcc>)
  40695c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40695e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  406962:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  406964:	4b0e      	ldr	r3, [pc, #56]	; (4069a0 <Reset_Handler+0xd4>)
  406966:	4798      	blx	r3

        /* Branch to main function */
        main();
  406968:	4b0e      	ldr	r3, [pc, #56]	; (4069a4 <Reset_Handler+0xd8>)
  40696a:	4798      	blx	r3
  40696c:	e7fe      	b.n	40696c <Reset_Handler+0xa0>
  40696e:	bf00      	nop
  406970:	20400000 	.word	0x20400000
  406974:	0040f978 	.word	0x0040f978
  406978:	204008e4 	.word	0x204008e4
  40697c:	20402f94 	.word	0x20402f94
  406980:	204008e4 	.word	0x204008e4
  406984:	204008e3 	.word	0x204008e3
  406988:	204008e8 	.word	0x204008e8
  40698c:	20402f97 	.word	0x20402f97
  406990:	e000ed00 	.word	0xe000ed00
  406994:	00400000 	.word	0x00400000
  406998:	20400038 	.word	0x20400038
  40699c:	e000ed88 	.word	0xe000ed88
  4069a0:	004075f5 	.word	0x004075f5
  4069a4:	00407359 	.word	0x00407359

004069a8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4069a8:	4b3c      	ldr	r3, [pc, #240]	; (406a9c <SystemCoreClockUpdate+0xf4>)
  4069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4069ac:	f003 0303 	and.w	r3, r3, #3
  4069b0:	2b01      	cmp	r3, #1
  4069b2:	d00f      	beq.n	4069d4 <SystemCoreClockUpdate+0x2c>
  4069b4:	b113      	cbz	r3, 4069bc <SystemCoreClockUpdate+0x14>
  4069b6:	2b02      	cmp	r3, #2
  4069b8:	d029      	beq.n	406a0e <SystemCoreClockUpdate+0x66>
  4069ba:	e057      	b.n	406a6c <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4069bc:	4b38      	ldr	r3, [pc, #224]	; (406aa0 <SystemCoreClockUpdate+0xf8>)
  4069be:	695b      	ldr	r3, [r3, #20]
  4069c0:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4069c4:	bf14      	ite	ne
  4069c6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4069ca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4069ce:	4b35      	ldr	r3, [pc, #212]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  4069d0:	601a      	str	r2, [r3, #0]
  4069d2:	e04b      	b.n	406a6c <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4069d4:	4b31      	ldr	r3, [pc, #196]	; (406a9c <SystemCoreClockUpdate+0xf4>)
  4069d6:	6a1b      	ldr	r3, [r3, #32]
  4069d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4069dc:	d003      	beq.n	4069e6 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4069de:	4a32      	ldr	r2, [pc, #200]	; (406aa8 <SystemCoreClockUpdate+0x100>)
  4069e0:	4b30      	ldr	r3, [pc, #192]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  4069e2:	601a      	str	r2, [r3, #0]
  4069e4:	e042      	b.n	406a6c <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4069e6:	4a31      	ldr	r2, [pc, #196]	; (406aac <SystemCoreClockUpdate+0x104>)
  4069e8:	4b2e      	ldr	r3, [pc, #184]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  4069ea:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4069ec:	4b2b      	ldr	r3, [pc, #172]	; (406a9c <SystemCoreClockUpdate+0xf4>)
  4069ee:	6a1b      	ldr	r3, [r3, #32]
  4069f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4069f4:	2b10      	cmp	r3, #16
  4069f6:	d002      	beq.n	4069fe <SystemCoreClockUpdate+0x56>
  4069f8:	2b20      	cmp	r3, #32
  4069fa:	d004      	beq.n	406a06 <SystemCoreClockUpdate+0x5e>
  4069fc:	e036      	b.n	406a6c <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4069fe:	4a2c      	ldr	r2, [pc, #176]	; (406ab0 <SystemCoreClockUpdate+0x108>)
  406a00:	4b28      	ldr	r3, [pc, #160]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  406a02:	601a      	str	r2, [r3, #0]
          break;
  406a04:	e032      	b.n	406a6c <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  406a06:	4a28      	ldr	r2, [pc, #160]	; (406aa8 <SystemCoreClockUpdate+0x100>)
  406a08:	4b26      	ldr	r3, [pc, #152]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  406a0a:	601a      	str	r2, [r3, #0]
          break;
  406a0c:	e02e      	b.n	406a6c <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  406a0e:	4b23      	ldr	r3, [pc, #140]	; (406a9c <SystemCoreClockUpdate+0xf4>)
  406a10:	6a1b      	ldr	r3, [r3, #32]
  406a12:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  406a16:	d003      	beq.n	406a20 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  406a18:	4a23      	ldr	r2, [pc, #140]	; (406aa8 <SystemCoreClockUpdate+0x100>)
  406a1a:	4b22      	ldr	r3, [pc, #136]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  406a1c:	601a      	str	r2, [r3, #0]
  406a1e:	e012      	b.n	406a46 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  406a20:	4a22      	ldr	r2, [pc, #136]	; (406aac <SystemCoreClockUpdate+0x104>)
  406a22:	4b20      	ldr	r3, [pc, #128]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  406a24:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  406a26:	4b1d      	ldr	r3, [pc, #116]	; (406a9c <SystemCoreClockUpdate+0xf4>)
  406a28:	6a1b      	ldr	r3, [r3, #32]
  406a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406a2e:	2b10      	cmp	r3, #16
  406a30:	d002      	beq.n	406a38 <SystemCoreClockUpdate+0x90>
  406a32:	2b20      	cmp	r3, #32
  406a34:	d004      	beq.n	406a40 <SystemCoreClockUpdate+0x98>
  406a36:	e006      	b.n	406a46 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  406a38:	4a1d      	ldr	r2, [pc, #116]	; (406ab0 <SystemCoreClockUpdate+0x108>)
  406a3a:	4b1a      	ldr	r3, [pc, #104]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  406a3c:	601a      	str	r2, [r3, #0]
          break;
  406a3e:	e002      	b.n	406a46 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  406a40:	4a19      	ldr	r2, [pc, #100]	; (406aa8 <SystemCoreClockUpdate+0x100>)
  406a42:	4b18      	ldr	r3, [pc, #96]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  406a44:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  406a46:	4b15      	ldr	r3, [pc, #84]	; (406a9c <SystemCoreClockUpdate+0xf4>)
  406a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406a4a:	f003 0303 	and.w	r3, r3, #3
  406a4e:	2b02      	cmp	r3, #2
  406a50:	d10c      	bne.n	406a6c <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  406a52:	4a12      	ldr	r2, [pc, #72]	; (406a9c <SystemCoreClockUpdate+0xf4>)
  406a54:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  406a56:	6a92      	ldr	r2, [r2, #40]	; 0x28
  406a58:	4812      	ldr	r0, [pc, #72]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  406a5a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  406a5e:	6803      	ldr	r3, [r0, #0]
  406a60:	fb01 3303 	mla	r3, r1, r3, r3
  406a64:	b2d2      	uxtb	r2, r2
  406a66:	fbb3 f3f2 	udiv	r3, r3, r2
  406a6a:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  406a6c:	4b0b      	ldr	r3, [pc, #44]	; (406a9c <SystemCoreClockUpdate+0xf4>)
  406a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406a74:	2b70      	cmp	r3, #112	; 0x70
  406a76:	d107      	bne.n	406a88 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  406a78:	4a0a      	ldr	r2, [pc, #40]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  406a7a:	6813      	ldr	r3, [r2, #0]
  406a7c:	490d      	ldr	r1, [pc, #52]	; (406ab4 <SystemCoreClockUpdate+0x10c>)
  406a7e:	fba1 1303 	umull	r1, r3, r1, r3
  406a82:	085b      	lsrs	r3, r3, #1
  406a84:	6013      	str	r3, [r2, #0]
  406a86:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  406a88:	4b04      	ldr	r3, [pc, #16]	; (406a9c <SystemCoreClockUpdate+0xf4>)
  406a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406a8c:	4905      	ldr	r1, [pc, #20]	; (406aa4 <SystemCoreClockUpdate+0xfc>)
  406a8e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  406a92:	680b      	ldr	r3, [r1, #0]
  406a94:	40d3      	lsrs	r3, r2
  406a96:	600b      	str	r3, [r1, #0]
  406a98:	4770      	bx	lr
  406a9a:	bf00      	nop
  406a9c:	400e0600 	.word	0x400e0600
  406aa0:	400e1810 	.word	0x400e1810
  406aa4:	2040003c 	.word	0x2040003c
  406aa8:	00b71b00 	.word	0x00b71b00
  406aac:	003d0900 	.word	0x003d0900
  406ab0:	007a1200 	.word	0x007a1200
  406ab4:	aaaaaaab 	.word	0xaaaaaaab

00406ab8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  406ab8:	4b12      	ldr	r3, [pc, #72]	; (406b04 <system_init_flash+0x4c>)
  406aba:	4298      	cmp	r0, r3
  406abc:	d804      	bhi.n	406ac8 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  406abe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  406ac2:	4b11      	ldr	r3, [pc, #68]	; (406b08 <system_init_flash+0x50>)
  406ac4:	601a      	str	r2, [r3, #0]
  406ac6:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  406ac8:	4b10      	ldr	r3, [pc, #64]	; (406b0c <system_init_flash+0x54>)
  406aca:	4298      	cmp	r0, r3
  406acc:	d803      	bhi.n	406ad6 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  406ace:	4a10      	ldr	r2, [pc, #64]	; (406b10 <system_init_flash+0x58>)
  406ad0:	4b0d      	ldr	r3, [pc, #52]	; (406b08 <system_init_flash+0x50>)
  406ad2:	601a      	str	r2, [r3, #0]
  406ad4:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  406ad6:	4b0f      	ldr	r3, [pc, #60]	; (406b14 <system_init_flash+0x5c>)
  406ad8:	4298      	cmp	r0, r3
  406ada:	d803      	bhi.n	406ae4 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  406adc:	4a0e      	ldr	r2, [pc, #56]	; (406b18 <system_init_flash+0x60>)
  406ade:	4b0a      	ldr	r3, [pc, #40]	; (406b08 <system_init_flash+0x50>)
  406ae0:	601a      	str	r2, [r3, #0]
  406ae2:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  406ae4:	4b0d      	ldr	r3, [pc, #52]	; (406b1c <system_init_flash+0x64>)
  406ae6:	4298      	cmp	r0, r3
  406ae8:	d803      	bhi.n	406af2 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  406aea:	4a0d      	ldr	r2, [pc, #52]	; (406b20 <system_init_flash+0x68>)
  406aec:	4b06      	ldr	r3, [pc, #24]	; (406b08 <system_init_flash+0x50>)
  406aee:	601a      	str	r2, [r3, #0]
  406af0:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  406af2:	4b0c      	ldr	r3, [pc, #48]	; (406b24 <system_init_flash+0x6c>)
  406af4:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  406af6:	bf94      	ite	ls
  406af8:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  406afc:	4a0a      	ldrhi	r2, [pc, #40]	; (406b28 <system_init_flash+0x70>)
  406afe:	4b02      	ldr	r3, [pc, #8]	; (406b08 <system_init_flash+0x50>)
  406b00:	601a      	str	r2, [r3, #0]
  406b02:	4770      	bx	lr
  406b04:	01312cff 	.word	0x01312cff
  406b08:	400e0c00 	.word	0x400e0c00
  406b0c:	026259ff 	.word	0x026259ff
  406b10:	04000100 	.word	0x04000100
  406b14:	039386ff 	.word	0x039386ff
  406b18:	04000200 	.word	0x04000200
  406b1c:	04c4b3ff 	.word	0x04c4b3ff
  406b20:	04000300 	.word	0x04000300
  406b24:	05f5e0ff 	.word	0x05f5e0ff
  406b28:	04000500 	.word	0x04000500

00406b2c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  406b2c:	4b09      	ldr	r3, [pc, #36]	; (406b54 <_sbrk+0x28>)
  406b2e:	681b      	ldr	r3, [r3, #0]
  406b30:	b913      	cbnz	r3, 406b38 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  406b32:	4a09      	ldr	r2, [pc, #36]	; (406b58 <_sbrk+0x2c>)
  406b34:	4b07      	ldr	r3, [pc, #28]	; (406b54 <_sbrk+0x28>)
  406b36:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  406b38:	4b06      	ldr	r3, [pc, #24]	; (406b54 <_sbrk+0x28>)
  406b3a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  406b3c:	181a      	adds	r2, r3, r0
  406b3e:	4907      	ldr	r1, [pc, #28]	; (406b5c <_sbrk+0x30>)
  406b40:	4291      	cmp	r1, r2
  406b42:	db04      	blt.n	406b4e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  406b44:	4610      	mov	r0, r2
  406b46:	4a03      	ldr	r2, [pc, #12]	; (406b54 <_sbrk+0x28>)
  406b48:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  406b4a:	4618      	mov	r0, r3
  406b4c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  406b4e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  406b52:	4770      	bx	lr
  406b54:	204009f0 	.word	0x204009f0
  406b58:	20405198 	.word	0x20405198
  406b5c:	2045fffc 	.word	0x2045fffc

00406b60 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  406b60:	f04f 30ff 	mov.w	r0, #4294967295
  406b64:	4770      	bx	lr
  406b66:	bf00      	nop

00406b68 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  406b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  406b6c:	604b      	str	r3, [r1, #4]

	return 0;
}
  406b6e:	2000      	movs	r0, #0
  406b70:	4770      	bx	lr
  406b72:	bf00      	nop

00406b74 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  406b74:	2001      	movs	r0, #1
  406b76:	4770      	bx	lr

00406b78 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  406b78:	2000      	movs	r0, #0
  406b7a:	4770      	bx	lr

00406b7c <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  406b7c:	b510      	push	{r4, lr}
  406b7e:	b082      	sub	sp, #8
	switch (u8MsgType) {
  406b80:	282c      	cmp	r0, #44	; 0x2c
  406b82:	d002      	beq.n	406b8a <wifi_cb+0xe>
  406b84:	2832      	cmp	r0, #50	; 0x32
  406b86:	d019      	beq.n	406bbc <wifi_cb+0x40>
  406b88:	e024      	b.n	406bd4 <wifi_cb+0x58>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  406b8a:	780b      	ldrb	r3, [r1, #0]
  406b8c:	2b01      	cmp	r3, #1
  406b8e:	d105      	bne.n	406b9c <wifi_cb+0x20>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
  406b90:	4811      	ldr	r0, [pc, #68]	; (406bd8 <wifi_cb+0x5c>)
  406b92:	4b12      	ldr	r3, [pc, #72]	; (406bdc <wifi_cb+0x60>)
  406b94:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  406b96:	4b12      	ldr	r3, [pc, #72]	; (406be0 <wifi_cb+0x64>)
  406b98:	4798      	blx	r3
  406b9a:	e01b      	b.n	406bd4 <wifi_cb+0x58>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  406b9c:	b9d3      	cbnz	r3, 406bd4 <wifi_cb+0x58>
			printf("wifi_cb: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
  406b9e:	4811      	ldr	r0, [pc, #68]	; (406be4 <wifi_cb+0x68>)
  406ba0:	4b0e      	ldr	r3, [pc, #56]	; (406bdc <wifi_cb+0x60>)
  406ba2:	4798      	blx	r3
			wifi_connected = 0;
  406ba4:	2200      	movs	r2, #0
  406ba6:	4b10      	ldr	r3, [pc, #64]	; (406be8 <wifi_cb+0x6c>)
  406ba8:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  406baa:	23ff      	movs	r3, #255	; 0xff
  406bac:	9300      	str	r3, [sp, #0]
  406bae:	4b0f      	ldr	r3, [pc, #60]	; (406bec <wifi_cb+0x70>)
  406bb0:	2202      	movs	r2, #2
  406bb2:	2107      	movs	r1, #7
  406bb4:	480e      	ldr	r0, [pc, #56]	; (406bf0 <wifi_cb+0x74>)
  406bb6:	4c0f      	ldr	r4, [pc, #60]	; (406bf4 <wifi_cb+0x78>)
  406bb8:	47a0      	blx	r4
  406bba:	e00b      	b.n	406bd4 <wifi_cb+0x58>
	break;

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		wifi_connected = 1;
  406bbc:	2201      	movs	r2, #1
  406bbe:	4b0a      	ldr	r3, [pc, #40]	; (406be8 <wifi_cb+0x6c>)
  406bc0:	701a      	strb	r2, [r3, #0]
		printf("wifi_cb: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
  406bc2:	788b      	ldrb	r3, [r1, #2]
  406bc4:	784a      	ldrb	r2, [r1, #1]
  406bc6:	7808      	ldrb	r0, [r1, #0]
  406bc8:	78c9      	ldrb	r1, [r1, #3]
  406bca:	9100      	str	r1, [sp, #0]
  406bcc:	4601      	mov	r1, r0
  406bce:	480a      	ldr	r0, [pc, #40]	; (406bf8 <wifi_cb+0x7c>)
  406bd0:	4c02      	ldr	r4, [pc, #8]	; (406bdc <wifi_cb+0x60>)
  406bd2:	47a0      	blx	r4
	break;

	default:
		break;
	}
}
  406bd4:	b002      	add	sp, #8
  406bd6:	bd10      	pop	{r4, pc}
  406bd8:	0040f348 	.word	0x0040f348
  406bdc:	00407645 	.word	0x00407645
  406be0:	0040432d 	.word	0x0040432d
  406be4:	0040f380 	.word	0x0040f380
  406be8:	204009f4 	.word	0x204009f4
  406bec:	0040f3bc 	.word	0x0040f3bc
  406bf0:	0040f3c8 	.word	0x0040f3c8
  406bf4:	00404311 	.word	0x00404311
  406bf8:	0040f3d0 	.word	0x0040f3d0

00406bfc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  406bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  406bfe:	b083      	sub	sp, #12
  406c00:	4605      	mov	r5, r0
  406c02:	460c      	mov	r4, r1
	uint32_t val = 0;
  406c04:	2300      	movs	r3, #0
  406c06:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406c08:	4b29      	ldr	r3, [pc, #164]	; (406cb0 <usart_serial_getchar+0xb4>)
  406c0a:	4298      	cmp	r0, r3
  406c0c:	d107      	bne.n	406c1e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  406c0e:	461f      	mov	r7, r3
  406c10:	4e28      	ldr	r6, [pc, #160]	; (406cb4 <usart_serial_getchar+0xb8>)
  406c12:	4621      	mov	r1, r4
  406c14:	4638      	mov	r0, r7
  406c16:	47b0      	blx	r6
  406c18:	2800      	cmp	r0, #0
  406c1a:	d1fa      	bne.n	406c12 <usart_serial_getchar+0x16>
  406c1c:	e015      	b.n	406c4a <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406c1e:	4b26      	ldr	r3, [pc, #152]	; (406cb8 <usart_serial_getchar+0xbc>)
  406c20:	4298      	cmp	r0, r3
  406c22:	d107      	bne.n	406c34 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  406c24:	461f      	mov	r7, r3
  406c26:	4e23      	ldr	r6, [pc, #140]	; (406cb4 <usart_serial_getchar+0xb8>)
  406c28:	4621      	mov	r1, r4
  406c2a:	4638      	mov	r0, r7
  406c2c:	47b0      	blx	r6
  406c2e:	2800      	cmp	r0, #0
  406c30:	d1fa      	bne.n	406c28 <usart_serial_getchar+0x2c>
  406c32:	e015      	b.n	406c60 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406c34:	4b21      	ldr	r3, [pc, #132]	; (406cbc <usart_serial_getchar+0xc0>)
  406c36:	4298      	cmp	r0, r3
  406c38:	d107      	bne.n	406c4a <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  406c3a:	461f      	mov	r7, r3
  406c3c:	4e1d      	ldr	r6, [pc, #116]	; (406cb4 <usart_serial_getchar+0xb8>)
  406c3e:	4621      	mov	r1, r4
  406c40:	4638      	mov	r0, r7
  406c42:	47b0      	blx	r6
  406c44:	2800      	cmp	r0, #0
  406c46:	d1fa      	bne.n	406c3e <usart_serial_getchar+0x42>
  406c48:	e017      	b.n	406c7a <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406c4a:	4b1d      	ldr	r3, [pc, #116]	; (406cc0 <usart_serial_getchar+0xc4>)
  406c4c:	429d      	cmp	r5, r3
  406c4e:	d107      	bne.n	406c60 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  406c50:	461f      	mov	r7, r3
  406c52:	4e18      	ldr	r6, [pc, #96]	; (406cb4 <usart_serial_getchar+0xb8>)
  406c54:	4621      	mov	r1, r4
  406c56:	4638      	mov	r0, r7
  406c58:	47b0      	blx	r6
  406c5a:	2800      	cmp	r0, #0
  406c5c:	d1fa      	bne.n	406c54 <usart_serial_getchar+0x58>
  406c5e:	e019      	b.n	406c94 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406c60:	4b18      	ldr	r3, [pc, #96]	; (406cc4 <usart_serial_getchar+0xc8>)
  406c62:	429d      	cmp	r5, r3
  406c64:	d109      	bne.n	406c7a <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  406c66:	461e      	mov	r6, r3
  406c68:	4d17      	ldr	r5, [pc, #92]	; (406cc8 <usart_serial_getchar+0xcc>)
  406c6a:	a901      	add	r1, sp, #4
  406c6c:	4630      	mov	r0, r6
  406c6e:	47a8      	blx	r5
  406c70:	2800      	cmp	r0, #0
  406c72:	d1fa      	bne.n	406c6a <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  406c74:	9b01      	ldr	r3, [sp, #4]
  406c76:	7023      	strb	r3, [r4, #0]
  406c78:	e018      	b.n	406cac <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406c7a:	4b14      	ldr	r3, [pc, #80]	; (406ccc <usart_serial_getchar+0xd0>)
  406c7c:	429d      	cmp	r5, r3
  406c7e:	d109      	bne.n	406c94 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  406c80:	461e      	mov	r6, r3
  406c82:	4d11      	ldr	r5, [pc, #68]	; (406cc8 <usart_serial_getchar+0xcc>)
  406c84:	a901      	add	r1, sp, #4
  406c86:	4630      	mov	r0, r6
  406c88:	47a8      	blx	r5
  406c8a:	2800      	cmp	r0, #0
  406c8c:	d1fa      	bne.n	406c84 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  406c8e:	9b01      	ldr	r3, [sp, #4]
  406c90:	7023      	strb	r3, [r4, #0]
  406c92:	e00b      	b.n	406cac <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406c94:	4b0e      	ldr	r3, [pc, #56]	; (406cd0 <usart_serial_getchar+0xd4>)
  406c96:	429d      	cmp	r5, r3
  406c98:	d108      	bne.n	406cac <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  406c9a:	461e      	mov	r6, r3
  406c9c:	4d0a      	ldr	r5, [pc, #40]	; (406cc8 <usart_serial_getchar+0xcc>)
  406c9e:	a901      	add	r1, sp, #4
  406ca0:	4630      	mov	r0, r6
  406ca2:	47a8      	blx	r5
  406ca4:	2800      	cmp	r0, #0
  406ca6:	d1fa      	bne.n	406c9e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  406ca8:	9b01      	ldr	r3, [sp, #4]
  406caa:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406cac:	b003      	add	sp, #12
  406cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406cb0:	400e0800 	.word	0x400e0800
  406cb4:	00406799 	.word	0x00406799
  406cb8:	400e0a00 	.word	0x400e0a00
  406cbc:	400e1a00 	.word	0x400e1a00
  406cc0:	400e1c00 	.word	0x400e1c00
  406cc4:	40024000 	.word	0x40024000
  406cc8:	004068b1 	.word	0x004068b1
  406ccc:	40028000 	.word	0x40028000
  406cd0:	4002c000 	.word	0x4002c000

00406cd4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  406cd4:	b570      	push	{r4, r5, r6, lr}
  406cd6:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  406cd8:	4b2a      	ldr	r3, [pc, #168]	; (406d84 <usart_serial_putchar+0xb0>)
  406cda:	4298      	cmp	r0, r3
  406cdc:	d108      	bne.n	406cf0 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  406cde:	461e      	mov	r6, r3
  406ce0:	4d29      	ldr	r5, [pc, #164]	; (406d88 <usart_serial_putchar+0xb4>)
  406ce2:	4621      	mov	r1, r4
  406ce4:	4630      	mov	r0, r6
  406ce6:	47a8      	blx	r5
  406ce8:	2800      	cmp	r0, #0
  406cea:	d1fa      	bne.n	406ce2 <usart_serial_putchar+0xe>
		return 1;
  406cec:	2001      	movs	r0, #1
  406cee:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  406cf0:	4b26      	ldr	r3, [pc, #152]	; (406d8c <usart_serial_putchar+0xb8>)
  406cf2:	4298      	cmp	r0, r3
  406cf4:	d108      	bne.n	406d08 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  406cf6:	461e      	mov	r6, r3
  406cf8:	4d23      	ldr	r5, [pc, #140]	; (406d88 <usart_serial_putchar+0xb4>)
  406cfa:	4621      	mov	r1, r4
  406cfc:	4630      	mov	r0, r6
  406cfe:	47a8      	blx	r5
  406d00:	2800      	cmp	r0, #0
  406d02:	d1fa      	bne.n	406cfa <usart_serial_putchar+0x26>
		return 1;
  406d04:	2001      	movs	r0, #1
  406d06:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  406d08:	4b21      	ldr	r3, [pc, #132]	; (406d90 <usart_serial_putchar+0xbc>)
  406d0a:	4298      	cmp	r0, r3
  406d0c:	d108      	bne.n	406d20 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  406d0e:	461e      	mov	r6, r3
  406d10:	4d1d      	ldr	r5, [pc, #116]	; (406d88 <usart_serial_putchar+0xb4>)
  406d12:	4621      	mov	r1, r4
  406d14:	4630      	mov	r0, r6
  406d16:	47a8      	blx	r5
  406d18:	2800      	cmp	r0, #0
  406d1a:	d1fa      	bne.n	406d12 <usart_serial_putchar+0x3e>
		return 1;
  406d1c:	2001      	movs	r0, #1
  406d1e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  406d20:	4b1c      	ldr	r3, [pc, #112]	; (406d94 <usart_serial_putchar+0xc0>)
  406d22:	4298      	cmp	r0, r3
  406d24:	d108      	bne.n	406d38 <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  406d26:	461e      	mov	r6, r3
  406d28:	4d17      	ldr	r5, [pc, #92]	; (406d88 <usart_serial_putchar+0xb4>)
  406d2a:	4621      	mov	r1, r4
  406d2c:	4630      	mov	r0, r6
  406d2e:	47a8      	blx	r5
  406d30:	2800      	cmp	r0, #0
  406d32:	d1fa      	bne.n	406d2a <usart_serial_putchar+0x56>
		return 1;
  406d34:	2001      	movs	r0, #1
  406d36:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406d38:	4b17      	ldr	r3, [pc, #92]	; (406d98 <usart_serial_putchar+0xc4>)
  406d3a:	4298      	cmp	r0, r3
  406d3c:	d108      	bne.n	406d50 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  406d3e:	461e      	mov	r6, r3
  406d40:	4d16      	ldr	r5, [pc, #88]	; (406d9c <usart_serial_putchar+0xc8>)
  406d42:	4621      	mov	r1, r4
  406d44:	4630      	mov	r0, r6
  406d46:	47a8      	blx	r5
  406d48:	2800      	cmp	r0, #0
  406d4a:	d1fa      	bne.n	406d42 <usart_serial_putchar+0x6e>
		return 1;
  406d4c:	2001      	movs	r0, #1
  406d4e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  406d50:	4b13      	ldr	r3, [pc, #76]	; (406da0 <usart_serial_putchar+0xcc>)
  406d52:	4298      	cmp	r0, r3
  406d54:	d108      	bne.n	406d68 <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  406d56:	461e      	mov	r6, r3
  406d58:	4d10      	ldr	r5, [pc, #64]	; (406d9c <usart_serial_putchar+0xc8>)
  406d5a:	4621      	mov	r1, r4
  406d5c:	4630      	mov	r0, r6
  406d5e:	47a8      	blx	r5
  406d60:	2800      	cmp	r0, #0
  406d62:	d1fa      	bne.n	406d5a <usart_serial_putchar+0x86>
		return 1;
  406d64:	2001      	movs	r0, #1
  406d66:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406d68:	4b0e      	ldr	r3, [pc, #56]	; (406da4 <usart_serial_putchar+0xd0>)
  406d6a:	4298      	cmp	r0, r3
  406d6c:	d108      	bne.n	406d80 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  406d6e:	461e      	mov	r6, r3
  406d70:	4d0a      	ldr	r5, [pc, #40]	; (406d9c <usart_serial_putchar+0xc8>)
  406d72:	4621      	mov	r1, r4
  406d74:	4630      	mov	r0, r6
  406d76:	47a8      	blx	r5
  406d78:	2800      	cmp	r0, #0
  406d7a:	d1fa      	bne.n	406d72 <usart_serial_putchar+0x9e>
		return 1;
  406d7c:	2001      	movs	r0, #1
  406d7e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  406d80:	2000      	movs	r0, #0
}
  406d82:	bd70      	pop	{r4, r5, r6, pc}
  406d84:	400e0800 	.word	0x400e0800
  406d88:	00406785 	.word	0x00406785
  406d8c:	400e0a00 	.word	0x400e0a00
  406d90:	400e1a00 	.word	0x400e1a00
  406d94:	400e1c00 	.word	0x400e1c00
  406d98:	40024000 	.word	0x40024000
  406d9c:	00406899 	.word	0x00406899
  406da0:	40028000 	.word	0x40028000
  406da4:	4002c000 	.word	0x4002c000

00406da8 <info_parser>:
    printf(MSG_SOCKET_ERRO);
    return(COMMAND_ERRO);
  }      
}

uint8_t **info_parser (uint8_t *info, int size, uint8_t **file_names) {
  406da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406dac:	b083      	sub	sp, #12
  406dae:	4604      	mov	r4, r0
  406db0:	9000      	str	r0, [sp, #0]
  406db2:	9201      	str	r2, [sp, #4]
	int start = 0;
	int temp_c = 0;
	uint8_t file_c = 0;
	int i;
	char t;
	uint8_t *temp = malloc(sizeof(char)*100);
  406db4:	2064      	movs	r0, #100	; 0x64
  406db6:	4b25      	ldr	r3, [pc, #148]	; (406e4c <info_parser+0xa4>)
  406db8:	4798      	blx	r3
  406dba:	4682      	mov	sl, r0
  406dbc:	2600      	movs	r6, #0
  406dbe:	19a7      	adds	r7, r4, r6
}

uint8_t **info_parser (uint8_t *info, int size, uint8_t **file_names) {
	int start = 0;
	int temp_c = 0;
	uint8_t file_c = 0;
  406dc0:	46b1      	mov	r9, r6
  }      
}

uint8_t **info_parser (uint8_t *info, int size, uint8_t **file_names) {
	int start = 0;
	int temp_c = 0;
  406dc2:	4635      	mov	r5, r6
    return(COMMAND_ERRO);
  }      
}

uint8_t **info_parser (uint8_t *info, int size, uint8_t **file_names) {
	int start = 0;
  406dc4:	46b0      	mov	r8, r6
	int i;
	char t;
	uint8_t *temp = malloc(sizeof(char)*100);

	
	while (i < strlen(info)) {
  406dc6:	f8df b094 	ldr.w	fp, [pc, #148]	; 406e5c <info_parser+0xb4>
  406dca:	e030      	b.n	406e2e <info_parser+0x86>
		t = (char) info[i];
  406dcc:	f817 4b01 	ldrb.w	r4, [r7], #1
		if (start == 1 && t == ':') {
  406dd0:	f1b8 0f00 	cmp.w	r8, #0
  406dd4:	d019      	beq.n	406e0a <info_parser+0x62>
  406dd6:	2c3a      	cmp	r4, #58	; 0x3a
  406dd8:	d117      	bne.n	406e0a <info_parser+0x62>
			start = 0;
			temp_c = 0;
			file_names[file_c] = malloc(sizeof (char) * 100);
  406dda:	2064      	movs	r0, #100	; 0x64
  406ddc:	4b1b      	ldr	r3, [pc, #108]	; (406e4c <info_parser+0xa4>)
  406dde:	4798      	blx	r3
  406de0:	9a01      	ldr	r2, [sp, #4]
  406de2:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
			memset(file_names[file_c], NULL, sizeof file_names[file_c]);
  406de6:	2500      	movs	r5, #0
  406de8:	6005      	str	r5, [r0, #0]
			strcpy(file_names[file_c], temp);
  406dea:	4651      	mov	r1, sl
  406dec:	4b18      	ldr	r3, [pc, #96]	; (406e50 <info_parser+0xa8>)
  406dee:	4798      	blx	r3
			//printf("%d, %s", file_c, file_names[file_c]);
			memset(temp, NULL, strlen(temp));
  406df0:	4650      	mov	r0, sl
  406df2:	47d8      	blx	fp
  406df4:	4602      	mov	r2, r0
  406df6:	4629      	mov	r1, r5
  406df8:	4650      	mov	r0, sl
  406dfa:	4b16      	ldr	r3, [pc, #88]	; (406e54 <info_parser+0xac>)
  406dfc:	4798      	blx	r3
			file_c++;
  406dfe:	f109 0901 	add.w	r9, r9, #1
  406e02:	fa5f f989 	uxtb.w	r9, r9

	
	while (i < strlen(info)) {
		t = (char) info[i];
		if (start == 1 && t == ':') {
			start = 0;
  406e06:	46a8      	mov	r8, r5
  406e08:	e007      	b.n	406e1a <info_parser+0x72>
			//printf("%d, %s", file_c, file_names[file_c]);
			memset(temp, NULL, strlen(temp));
			file_c++;
		}
		
		if (start) {
  406e0a:	f1b8 0f00 	cmp.w	r8, #0
  406e0e:	d004      	beq.n	406e1a <info_parser+0x72>
			temp[temp_c] = info[i];		
  406e10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
  406e14:	f80a 3005 	strb.w	r3, [sl, r5]
			temp_c++;
  406e18:	3501      	adds	r5, #1
		}
		
		if (t == '{' || t == ','){
  406e1a:	2c7b      	cmp	r4, #123	; 0x7b
  406e1c:	d001      	beq.n	406e22 <info_parser+0x7a>
  406e1e:	2c2c      	cmp	r4, #44	; 0x2c
  406e20:	d104      	bne.n	406e2c <info_parser+0x84>
			memset(temp, NULL, sizeof temp);
  406e22:	2300      	movs	r3, #0
  406e24:	f8ca 3000 	str.w	r3, [sl]
			start = 1;
  406e28:	f04f 0801 	mov.w	r8, #1
		}
		i++;
  406e2c:	3601      	adds	r6, #1
	int i;
	char t;
	uint8_t *temp = malloc(sizeof(char)*100);

	
	while (i < strlen(info)) {
  406e2e:	9800      	ldr	r0, [sp, #0]
  406e30:	47d8      	blx	fp
  406e32:	42b0      	cmp	r0, r6
  406e34:	d8ca      	bhi.n	406dcc <info_parser+0x24>
			start = 1;
		}
		i++;
	}
	
	number_of_files = file_c-1;
  406e36:	f109 39ff 	add.w	r9, r9, #4294967295
  406e3a:	fa5f f989 	uxtb.w	r9, r9
  406e3e:	4b06      	ldr	r3, [pc, #24]	; (406e58 <info_parser+0xb0>)
  406e40:	f883 9000 	strb.w	r9, [r3]
	return file_names;
}
  406e44:	9801      	ldr	r0, [sp, #4]
  406e46:	b003      	add	sp, #12
  406e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e4c:	0040766d 	.word	0x0040766d
  406e50:	00407fd5 	.word	0x00407fd5
  406e54:	00407d21 	.word	0x00407d21
  406e58:	20400fae 	.word	0x20400fae
  406e5c:	004080c1 	.word	0x004080c1

00406e60 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  406e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e64:	b085      	sub	sp, #20
  406e66:	4616      	mov	r6, r2
	switch (u8Msg) {
  406e68:	2906      	cmp	r1, #6
  406e6a:	d045      	beq.n	406ef8 <socket_cb+0x98>
  406e6c:	2907      	cmp	r1, #7
  406e6e:	d03d      	beq.n	406eec <socket_cb+0x8c>
  406e70:	2905      	cmp	r1, #5
  406e72:	f040 8230 	bne.w	4072d6 <socket_cb+0x476>
   
  /* Socket connected */
  case SOCKET_MSG_CONNECT:
  {
    uint16_t rtn;
    memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  406e76:	4c9f      	ldr	r4, [pc, #636]	; (4070f4 <socket_cb+0x294>)
  406e78:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406e7c:	2100      	movs	r1, #0
  406e7e:	4620      	mov	r0, r4
  406e80:	4b9d      	ldr	r3, [pc, #628]	; (4070f8 <socket_cb+0x298>)
  406e82:	4798      	blx	r3
    sprintf((char *)gau8ReceivedBuffer, "%s%s", HOST_MSG, HOST_MSG_SUFFIX);
  406e84:	4b9d      	ldr	r3, [pc, #628]	; (4070fc <socket_cb+0x29c>)
  406e86:	4a9e      	ldr	r2, [pc, #632]	; (407100 <socket_cb+0x2a0>)
  406e88:	499e      	ldr	r1, [pc, #632]	; (407104 <socket_cb+0x2a4>)
  406e8a:	4620      	mov	r0, r4
  406e8c:	4c9e      	ldr	r4, [pc, #632]	; (407108 <socket_cb+0x2a8>)
  406e8e:	47a0      	blx	r4
    
    tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    if (pstrConnect && pstrConnect->s8Error >= 0) {
  406e90:	b30e      	cbz	r6, 406ed6 <socket_cb+0x76>
  406e92:	f996 3001 	ldrsb.w	r3, [r6, #1]
  406e96:	2b00      	cmp	r3, #0
  406e98:	db1d      	blt.n	406ed6 <socket_cb+0x76>
      printf("socket_cb: connect success!\r\n");
  406e9a:	489c      	ldr	r0, [pc, #624]	; (40710c <socket_cb+0x2ac>)
  406e9c:	4b9c      	ldr	r3, [pc, #624]	; (407110 <socket_cb+0x2b0>)
  406e9e:	4798      	blx	r3
      rtn = send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  406ea0:	4c94      	ldr	r4, [pc, #592]	; (4070f4 <socket_cb+0x294>)
  406ea2:	4620      	mov	r0, r4
  406ea4:	4b9b      	ldr	r3, [pc, #620]	; (407114 <socket_cb+0x2b4>)
  406ea6:	4798      	blx	r3
  406ea8:	4d9b      	ldr	r5, [pc, #620]	; (407118 <socket_cb+0x2b8>)
  406eaa:	2300      	movs	r3, #0
  406eac:	b282      	uxth	r2, r0
  406eae:	4621      	mov	r1, r4
  406eb0:	f995 0000 	ldrsb.w	r0, [r5]
  406eb4:	4e99      	ldr	r6, [pc, #612]	; (40711c <socket_cb+0x2bc>)
  406eb6:	47b0      	blx	r6
      memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  406eb8:	f240 56b4 	movw	r6, #1460	; 0x5b4
  406ebc:	4632      	mov	r2, r6
  406ebe:	2100      	movs	r1, #0
  406ec0:	4620      	mov	r0, r4
  406ec2:	4b8d      	ldr	r3, [pc, #564]	; (4070f8 <socket_cb+0x298>)
  406ec4:	4798      	blx	r3
      recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  406ec6:	2300      	movs	r3, #0
  406ec8:	4632      	mov	r2, r6
  406eca:	4995      	ldr	r1, [pc, #596]	; (407120 <socket_cb+0x2c0>)
  406ecc:	f995 0000 	ldrsb.w	r0, [r5]
  406ed0:	4c94      	ldr	r4, [pc, #592]	; (407124 <socket_cb+0x2c4>)
  406ed2:	47a0      	blx	r4
  406ed4:	e1ff      	b.n	4072d6 <socket_cb+0x476>
			
      } else {
      printf("socket_cb: connect error!\r\n");
  406ed6:	4894      	ldr	r0, [pc, #592]	; (407128 <socket_cb+0x2c8>)
  406ed8:	4b8d      	ldr	r3, [pc, #564]	; (407110 <socket_cb+0x2b0>)
  406eda:	4798      	blx	r3
      close(tcp_client_socket);
  406edc:	4c8e      	ldr	r4, [pc, #568]	; (407118 <socket_cb+0x2b8>)
  406ede:	f994 0000 	ldrsb.w	r0, [r4]
  406ee2:	4b92      	ldr	r3, [pc, #584]	; (40712c <socket_cb+0x2cc>)
  406ee4:	4798      	blx	r3
      tcp_client_socket = -1;
  406ee6:	23ff      	movs	r3, #255	; 0xff
  406ee8:	7023      	strb	r3, [r4, #0]
  406eea:	e1f4      	b.n	4072d6 <socket_cb+0x476>
  break;

	/* Message send */
	case SOCKET_MSG_SEND:
	{
		printf("socket_cb: send success!\r\n");
  406eec:	4890      	ldr	r0, [pc, #576]	; (407130 <socket_cb+0x2d0>)
  406eee:	4c88      	ldr	r4, [pc, #544]	; (407110 <socket_cb+0x2b0>)
  406ef0:	47a0      	blx	r4
		printf("\r\n");
  406ef2:	4890      	ldr	r0, [pc, #576]	; (407134 <socket_cb+0x2d4>)
  406ef4:	47a0      	blx	r4
	  //printf("TCP Server Test Complete!\r\n");
	  //printf("close socket\n");
	  //close(tcp_client_socket);
	  //close(tcp_server_socket);
	}
	break;
  406ef6:	e1ee      	b.n	4072d6 <socket_cb+0x476>
	/* Message receive */
	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *buffer = (tstrSocketRecvMsg *)pvMsg;
		
		sint16 nbytes = buffer->s16BufferSize;
  406ef8:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    uint8_t  messageAck[64];
    uint16_t messageAckSize;
    uint8_t  command;
    uint8_t *temp;
		
		if (buffer && buffer->s16BufferSize > 0) {
  406efc:	2c00      	cmp	r4, #0
  406efe:	f340 81d4 	ble.w	4072aa <socket_cb+0x44a>
  406f02:	2a00      	cmp	r2, #0
  406f04:	f000 81d1 	beq.w	4072aa <socket_cb+0x44a>
			switch (http_flag)	{
  406f08:	4b8b      	ldr	r3, [pc, #556]	; (407138 <socket_cb+0x2d8>)
  406f0a:	781b      	ldrb	r3, [r3, #0]
  406f0c:	b2db      	uxtb	r3, r3
  406f0e:	2b01      	cmp	r3, #1
  406f10:	d078      	beq.n	407004 <socket_cb+0x1a4>
  406f12:	b11b      	cbz	r3, 406f1c <socket_cb+0xbc>
  406f14:	2b02      	cmp	r3, #2
  406f16:	f000 8093 	beq.w	407040 <socket_cb+0x1e0>
  406f1a:	e1dc      	b.n	4072d6 <socket_cb+0x476>
				case INFO:							
					
					printf("INFO\r\n");
  406f1c:	4887      	ldr	r0, [pc, #540]	; (40713c <socket_cb+0x2dc>)
  406f1e:	4c7c      	ldr	r4, [pc, #496]	; (407110 <socket_cb+0x2b0>)
  406f20:	47a0      	blx	r4
					memcpy(server_info, buffer->pu8Buffer, MAIN_WIFI_M2M_BUFFER_SIZE);
  406f22:	4d87      	ldr	r5, [pc, #540]	; (407140 <socket_cb+0x2e0>)
  406f24:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406f28:	6831      	ldr	r1, [r6, #0]
  406f2a:	4628      	mov	r0, r5
  406f2c:	f8df b244 	ldr.w	fp, [pc, #580]	; 407174 <socket_cb+0x314>
  406f30:	47d8      	blx	fp
					
					// limpa o buffer de recepcao e tx
					memset(buffer->pu8Buffer, 0, buffer->s16BufferSize);
  406f32:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  406f36:	2100      	movs	r1, #0
  406f38:	6830      	ldr	r0, [r6, #0]
  406f3a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 4070f8 <socket_cb+0x298>
  406f3e:	47c8      	blx	r9
					
					printf("Parsing... \r\n") ;
  406f40:	4880      	ldr	r0, [pc, #512]	; (407144 <socket_cb+0x2e4>)
  406f42:	47a0      	blx	r4
					info_parser(server_info, sizeof(server_info), file_names);
  406f44:	4e80      	ldr	r6, [pc, #512]	; (407148 <socket_cb+0x2e8>)
  406f46:	6832      	ldr	r2, [r6, #0]
  406f48:	f240 51b4 	movw	r1, #1460	; 0x5b4
  406f4c:	4628      	mov	r0, r5
  406f4e:	4b7f      	ldr	r3, [pc, #508]	; (40714c <socket_cb+0x2ec>)
  406f50:	4798      	blx	r3
					
					//printf(file_names[2]);
					printf("\r\n");
  406f52:	4d78      	ldr	r5, [pc, #480]	; (407134 <socket_cb+0x2d4>)
  406f54:	4628      	mov	r0, r5
  406f56:	47a0      	blx	r4
					printf("OK!");
  406f58:	487d      	ldr	r0, [pc, #500]	; (407150 <socket_cb+0x2f0>)
  406f5a:	47a0      	blx	r4
					printf("\r\n");
  406f5c:	4628      	mov	r0, r5
  406f5e:	47a0      	blx	r4
					/*Numero de arquivos*/
					printf("Numero de arquivos: %d\r\n", number_of_files);
  406f60:	4d7c      	ldr	r5, [pc, #496]	; (407154 <socket_cb+0x2f4>)
  406f62:	7829      	ldrb	r1, [r5, #0]
  406f64:	487c      	ldr	r0, [pc, #496]	; (407158 <socket_cb+0x2f8>)
  406f66:	47a0      	blx	r4
					
					
					uint16_t rtn;					
					uint8_t *substring = malloc(sizeof (char) * strlen(file_names[number_of_files])-1);
  406f68:	f8d6 8000 	ldr.w	r8, [r6]
  406f6c:	782b      	ldrb	r3, [r5, #0]
  406f6e:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
  406f72:	4e68      	ldr	r6, [pc, #416]	; (407114 <socket_cb+0x2b4>)
  406f74:	47b0      	blx	r6
  406f76:	3801      	subs	r0, #1
  406f78:	4b78      	ldr	r3, [pc, #480]	; (40715c <socket_cb+0x2fc>)
  406f7a:	4798      	blx	r3
  406f7c:	4607      	mov	r7, r0

					memcpy( substring, &file_names[number_of_files][1], strlen(file_names[number_of_files])-2);
  406f7e:	f895 a000 	ldrb.w	sl, [r5]
  406f82:	fa5f fa8a 	uxtb.w	sl, sl
  406f86:	782b      	ldrb	r3, [r5, #0]
  406f88:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
  406f8c:	47b0      	blx	r6
  406f8e:	f858 102a 	ldr.w	r1, [r8, sl, lsl #2]
  406f92:	1e82      	subs	r2, r0, #2
  406f94:	3101      	adds	r1, #1
  406f96:	4638      	mov	r0, r7
  406f98:	47d8      	blx	fp
					substring[strlen(file_names[number_of_files])-2] = '\0';
  406f9a:	782b      	ldrb	r3, [r5, #0]
  406f9c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
  406fa0:	47b0      	blx	r6
  406fa2:	4438      	add	r0, r7
  406fa4:	2500      	movs	r5, #0
  406fa6:	f800 5c02 	strb.w	r5, [r0, #-2]
					
					printf("Nome de arquivos: %s\r\n",  substring);
  406faa:	4639      	mov	r1, r7
  406fac:	486c      	ldr	r0, [pc, #432]	; (407160 <socket_cb+0x300>)
  406fae:	47a0      	blx	r4

					memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  406fb0:	4c50      	ldr	r4, [pc, #320]	; (4070f4 <socket_cb+0x294>)
  406fb2:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406fb6:	4629      	mov	r1, r5
  406fb8:	4620      	mov	r0, r4
  406fba:	47c8      	blx	r9
					sprintf((char *)gau8ReceivedBuffer, "%s%s%s%s", HOST_MSG, "file/", substring, HOST_MSG_SUFFIX);
  406fbc:	4b4f      	ldr	r3, [pc, #316]	; (4070fc <socket_cb+0x29c>)
  406fbe:	9301      	str	r3, [sp, #4]
  406fc0:	9700      	str	r7, [sp, #0]
  406fc2:	4b68      	ldr	r3, [pc, #416]	; (407164 <socket_cb+0x304>)
  406fc4:	4a4e      	ldr	r2, [pc, #312]	; (407100 <socket_cb+0x2a0>)
  406fc6:	4968      	ldr	r1, [pc, #416]	; (407168 <socket_cb+0x308>)
  406fc8:	4620      	mov	r0, r4
  406fca:	4f4f      	ldr	r7, [pc, #316]	; (407108 <socket_cb+0x2a8>)
  406fcc:	47b8      	blx	r7
					
					
					rtn = send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  406fce:	4620      	mov	r0, r4
  406fd0:	47b0      	blx	r6
  406fd2:	4e51      	ldr	r6, [pc, #324]	; (407118 <socket_cb+0x2b8>)
  406fd4:	462b      	mov	r3, r5
  406fd6:	b282      	uxth	r2, r0
  406fd8:	4621      	mov	r1, r4
  406fda:	f996 0000 	ldrsb.w	r0, [r6]
  406fde:	4f4f      	ldr	r7, [pc, #316]	; (40711c <socket_cb+0x2bc>)
  406fe0:	47b8      	blx	r7
					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  406fe2:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406fe6:	4629      	mov	r1, r5
  406fe8:	4620      	mov	r0, r4
  406fea:	47c8      	blx	r9
					
					http_flag = HEADER;
  406fec:	2201      	movs	r2, #1
  406fee:	4b52      	ldr	r3, [pc, #328]	; (407138 <socket_cb+0x2d8>)
  406ff0:	701a      	strb	r2, [r3, #0]
					recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  406ff2:	462b      	mov	r3, r5
  406ff4:	f240 52b4 	movw	r2, #1460	; 0x5b4
  406ff8:	4949      	ldr	r1, [pc, #292]	; (407120 <socket_cb+0x2c0>)
  406ffa:	f996 0000 	ldrsb.w	r0, [r6]
  406ffe:	4c49      	ldr	r4, [pc, #292]	; (407124 <socket_cb+0x2c4>)
  407000:	47a0      	blx	r4
					
					//memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
					//recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);				
					break;
  407002:	e168      	b.n	4072d6 <socket_cb+0x476>
					
				case HEADER:
				
					printf("HEADER\r\n");
  407004:	4859      	ldr	r0, [pc, #356]	; (40716c <socket_cb+0x30c>)
  407006:	4d42      	ldr	r5, [pc, #264]	; (407110 <socket_cb+0x2b0>)
  407008:	47a8      	blx	r5
					memcpy(header, buffer->pu8Buffer, MAIN_WIFI_M2M_BUFFER_SIZE);
  40700a:	f240 54b4 	movw	r4, #1460	; 0x5b4
  40700e:	4622      	mov	r2, r4
  407010:	6831      	ldr	r1, [r6, #0]
  407012:	4857      	ldr	r0, [pc, #348]	; (407170 <socket_cb+0x310>)
  407014:	4b57      	ldr	r3, [pc, #348]	; (407174 <socket_cb+0x314>)
  407016:	4798      	blx	r3
				
					//printf(header);
					printf("\r\n");
  407018:	4846      	ldr	r0, [pc, #280]	; (407134 <socket_cb+0x2d4>)
  40701a:	47a8      	blx	r5
					
					recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  40701c:	2300      	movs	r3, #0
  40701e:	4622      	mov	r2, r4
  407020:	493f      	ldr	r1, [pc, #252]	; (407120 <socket_cb+0x2c0>)
  407022:	483d      	ldr	r0, [pc, #244]	; (407118 <socket_cb+0x2b8>)
  407024:	f990 0000 	ldrsb.w	r0, [r0]
  407028:	4c3e      	ldr	r4, [pc, #248]	; (407124 <socket_cb+0x2c4>)
  40702a:	47a0      	blx	r4
					
					
					// limpa o buffer de recepcao e tx
					memset(buffer->pu8Buffer, 0, buffer->s16BufferSize);
  40702c:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  407030:	2100      	movs	r1, #0
  407032:	6830      	ldr	r0, [r6, #0]
  407034:	4b30      	ldr	r3, [pc, #192]	; (4070f8 <socket_cb+0x298>)
  407036:	4798      	blx	r3
					
					http_flag = BODY;
  407038:	2202      	movs	r2, #2
  40703a:	4b3f      	ldr	r3, [pc, #252]	; (407138 <socket_cb+0x2d8>)
  40703c:	701a      	strb	r2, [r3, #0]
					break;
  40703e:	e14a      	b.n	4072d6 <socket_cb+0x476>
					
				case BODY:
				
				  memset(file_content, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  407040:	4f4d      	ldr	r7, [pc, #308]	; (407178 <socket_cb+0x318>)
  407042:	f240 52b4 	movw	r2, #1460	; 0x5b4
  407046:	2100      	movs	r1, #0
  407048:	4638      	mov	r0, r7
  40704a:	4b2b      	ldr	r3, [pc, #172]	; (4070f8 <socket_cb+0x298>)
  40704c:	4798      	blx	r3

				
					printf("BODY\r\n");
  40704e:	484b      	ldr	r0, [pc, #300]	; (40717c <socket_cb+0x31c>)
  407050:	4d2f      	ldr	r5, [pc, #188]	; (407110 <socket_cb+0x2b0>)
  407052:	47a8      	blx	r5
					
					memcpy(file_content, buffer->pu8Buffer, nbytes);
  407054:	4622      	mov	r2, r4
  407056:	6831      	ldr	r1, [r6, #0]
  407058:	4638      	mov	r0, r7
  40705a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 407174 <socket_cb+0x314>
  40705e:	47c8      	blx	r9
					
					printf("Conteudo no arquivo:\r\n");
  407060:	4847      	ldr	r0, [pc, #284]	; (407180 <socket_cb+0x320>)
  407062:	47a8      	blx	r5
					printf(file_content);
  407064:	4638      	mov	r0, r7
  407066:	47a8      	blx	r5
					printf("\r\nFim\r\n");
  407068:	4846      	ldr	r0, [pc, #280]	; (407184 <socket_cb+0x324>)
  40706a:	47a8      	blx	r5
					
					/*SD Card Create File*/
					char file_name[] = "0:";
  40706c:	4b46      	ldr	r3, [pc, #280]	; (407188 <socket_cb+0x328>)
  40706e:	681b      	ldr	r3, [r3, #0]
  407070:	f8ad 300c 	strh.w	r3, [sp, #12]
  407074:	0c1b      	lsrs	r3, r3, #16
  407076:	f88d 300e 	strb.w	r3, [sp, #14]
					
					uint8_t *subname = malloc(sizeof (char) * strlen(file_names[number_of_files])-1);
  40707a:	4b33      	ldr	r3, [pc, #204]	; (407148 <socket_cb+0x2e8>)
  40707c:	681c      	ldr	r4, [r3, #0]
  40707e:	4f35      	ldr	r7, [pc, #212]	; (407154 <socket_cb+0x2f4>)
  407080:	783b      	ldrb	r3, [r7, #0]
  407082:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  407086:	f8df a08c 	ldr.w	sl, [pc, #140]	; 407114 <socket_cb+0x2b4>
  40708a:	47d0      	blx	sl
  40708c:	3801      	subs	r0, #1
  40708e:	4b33      	ldr	r3, [pc, #204]	; (40715c <socket_cb+0x2fc>)
  407090:	4798      	blx	r3
  407092:	4680      	mov	r8, r0

					memcpy( subname, &file_names[number_of_files][1], strlen(file_names[number_of_files])-2);
  407094:	f897 b000 	ldrb.w	fp, [r7]
  407098:	fa5f fb8b 	uxtb.w	fp, fp
  40709c:	783b      	ldrb	r3, [r7, #0]
  40709e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  4070a2:	47d0      	blx	sl
  4070a4:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
  4070a8:	1e82      	subs	r2, r0, #2
  4070aa:	3101      	adds	r1, #1
  4070ac:	4640      	mov	r0, r8
  4070ae:	47c8      	blx	r9
					subname[strlen(file_names[number_of_files])-2] = '\0';
  4070b0:	783b      	ldrb	r3, [r7, #0]
  4070b2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  4070b6:	47d0      	blx	sl
  4070b8:	4440      	add	r0, r8
  4070ba:	2300      	movs	r3, #0
  4070bc:	f800 3c02 	strb.w	r3, [r0, #-2]
	
					strcat(file_name, subname);
  4070c0:	4641      	mov	r1, r8
  4070c2:	a803      	add	r0, sp, #12
  4070c4:	4b31      	ldr	r3, [pc, #196]	; (40718c <socket_cb+0x32c>)
  4070c6:	4798      	blx	r3
					printf("FILE NAME: %s", file_name);
  4070c8:	a903      	add	r1, sp, #12
  4070ca:	4831      	ldr	r0, [pc, #196]	; (407190 <socket_cb+0x330>)
  4070cc:	47a8      	blx	r5
					
					printf("Create file (f_open)...\r\n");
  4070ce:	4831      	ldr	r0, [pc, #196]	; (407194 <socket_cb+0x334>)
  4070d0:	47a8      	blx	r5
					file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  4070d2:	2330      	movs	r3, #48	; 0x30
  4070d4:	f88d 300c 	strb.w	r3, [sp, #12]
					res = f_open(&card_file,
  4070d8:	220a      	movs	r2, #10
  4070da:	a903      	add	r1, sp, #12
  4070dc:	482e      	ldr	r0, [pc, #184]	; (407198 <socket_cb+0x338>)
  4070de:	4b2f      	ldr	r3, [pc, #188]	; (40719c <socket_cb+0x33c>)
  4070e0:	4798      	blx	r3
  4070e2:	4b2f      	ldr	r3, [pc, #188]	; (4071a0 <socket_cb+0x340>)
  4070e4:	7018      	strb	r0, [r3, #0]
					(char const *)file_name,
					FA_CREATE_ALWAYS | FA_WRITE);
					if (res != FR_OK) {
  4070e6:	2800      	cmp	r0, #0
  4070e8:	f000 80ea 	beq.w	4072c0 <socket_cb+0x460>
						printf("[FAIL] res %d\r\n", res);
  4070ec:	4601      	mov	r1, r0
  4070ee:	482d      	ldr	r0, [pc, #180]	; (4071a4 <socket_cb+0x344>)
  4070f0:	47a8      	blx	r5
  4070f2:	e0e5      	b.n	4072c0 <socket_cb+0x460>
  4070f4:	20400fb0 	.word	0x20400fb0
  4070f8:	00407d21 	.word	0x00407d21
  4070fc:	0040f408 	.word	0x0040f408
  407100:	0040f424 	.word	0x0040f424
  407104:	0040f4e0 	.word	0x0040f4e0
  407108:	00407f49 	.word	0x00407f49
  40710c:	0040f42c 	.word	0x0040f42c
  407110:	00407645 	.word	0x00407645
  407114:	004080c1 	.word	0x004080c1
  407118:	20400040 	.word	0x20400040
  40711c:	0040592d 	.word	0x0040592d
  407120:	204009f8 	.word	0x204009f8
  407124:	004059c9 	.word	0x004059c9
  407128:	0040f44c 	.word	0x0040f44c
  40712c:	00405a6d 	.word	0x00405a6d
  407130:	0040f468 	.word	0x0040f468
  407134:	0040f480 	.word	0x0040f480
  407138:	20400fad 	.word	0x20400fad
  40713c:	0040f484 	.word	0x0040f484
  407140:	20402424 	.word	0x20402424
  407144:	0040f48c 	.word	0x0040f48c
  407148:	20401c18 	.word	0x20401c18
  40714c:	00406da9 	.word	0x00406da9
  407150:	0040f49c 	.word	0x0040f49c
  407154:	20400fae 	.word	0x20400fae
  407158:	0040f4a0 	.word	0x0040f4a0
  40715c:	0040766d 	.word	0x0040766d
  407160:	0040f4bc 	.word	0x0040f4bc
  407164:	0040f4d4 	.word	0x0040f4d4
  407168:	0040f4dc 	.word	0x0040f4dc
  40716c:	0040f4e8 	.word	0x0040f4e8
  407170:	204029d8 	.word	0x204029d8
  407174:	00407bed 	.word	0x00407bed
  407178:	20401e4c 	.word	0x20401e4c
  40717c:	0040f4f4 	.word	0x0040f4f4
  407180:	0040f4fc 	.word	0x0040f4fc
  407184:	0040f514 	.word	0x0040f514
  407188:	0040f5dc 	.word	0x0040f5dc
  40718c:	00407f95 	.word	0x00407f95
  407190:	0040f51c 	.word	0x0040f51c
  407194:	0040f52c 	.word	0x0040f52c
  407198:	20402400 	.word	0x20402400
  40719c:	00402c49 	.word	0x00402c49
  4071a0:	20402f8c 	.word	0x20402f8c
  4071a4:	0040f548 	.word	0x0040f548
					//f_puts(file_content, &card_file);
					uint8_t temp = 0;
					
					for(int i=0; i<sizeof(file_content);i++) {
						
						f_putc(file_content[i], &card_file);
  4071a8:	f818 0004 	ldrb.w	r0, [r8, r4]
  4071ac:	4639      	mov	r1, r7
  4071ae:	47a8      	blx	r5
					//char server_info_2[] = "{\"teste.txt\":\"2017-05-24T19:45:57.911Z\",\"teste1.txt\":\"2017-05-30T16:06:12.858Z\",\"testecopy.txt\":\"2017-05-30T16:06:12.858Z\"}";
					
					//f_puts(file_content, &card_file);
					uint8_t temp = 0;
					
					for(int i=0; i<sizeof(file_content);i++) {
  4071b0:	3401      	adds	r4, #1
  4071b2:	f240 53b4 	movw	r3, #1460	; 0x5b4
  4071b6:	429c      	cmp	r4, r3
  4071b8:	d1f6      	bne.n	4071a8 <socket_cb+0x348>
						
						f_putc(file_content[i], &card_file);
						//f_write(&card_file, file_content, MAIN_WIFI_M2M_BUFFER_SIZE, temp);
						
					}
					printf("\r\n\r\n");
  4071ba:	4848      	ldr	r0, [pc, #288]	; (4072dc <socket_cb+0x47c>)
  4071bc:	4c48      	ldr	r4, [pc, #288]	; (4072e0 <socket_cb+0x480>)
  4071be:	47a0      	blx	r4
					printf("OK \r\n");
  4071c0:	4848      	ldr	r0, [pc, #288]	; (4072e4 <socket_cb+0x484>)
  4071c2:	47a0      	blx	r4
					
					printf("Fechando arquivo \n");
  4071c4:	4848      	ldr	r0, [pc, #288]	; (4072e8 <socket_cb+0x488>)
  4071c6:	47a0      	blx	r4

					/* Close the file */
					f_close(&card_file);
  4071c8:	4848      	ldr	r0, [pc, #288]	; (4072ec <socket_cb+0x48c>)
  4071ca:	4b49      	ldr	r3, [pc, #292]	; (4072f0 <socket_cb+0x490>)
  4071cc:	4798      	blx	r3
					
					printf("[OK]\r\n");
  4071ce:	4849      	ldr	r0, [pc, #292]	; (4072f4 <socket_cb+0x494>)
  4071d0:	47a0      	blx	r4
					
					number_of_files--;
  4071d2:	4d49      	ldr	r5, [pc, #292]	; (4072f8 <socket_cb+0x498>)
  4071d4:	782b      	ldrb	r3, [r5, #0]
  4071d6:	3b01      	subs	r3, #1
  4071d8:	b2db      	uxtb	r3, r3
  4071da:	702b      	strb	r3, [r5, #0]
					printf("NUMBER OF FILES: %d\r\n", number_of_files);
  4071dc:	7829      	ldrb	r1, [r5, #0]
  4071de:	4847      	ldr	r0, [pc, #284]	; (4072fc <socket_cb+0x49c>)
  4071e0:	47a0      	blx	r4
										
					// limpa o buffer de recepcao e tx
					memset(buffer->pu8Buffer, NULL, sizeof (buffer->pu8Buffer));
  4071e2:	6833      	ldr	r3, [r6, #0]
  4071e4:	2200      	movs	r2, #0
  4071e6:	601a      	str	r2, [r3, #0]
					
						
					if(number_of_files == 0) {
  4071e8:	782b      	ldrb	r3, [r5, #0]
  4071ea:	f013 0fff 	tst.w	r3, #255	; 0xff
  4071ee:	d108      	bne.n	407202 <socket_cb+0x3a2>
						reception_flag = 1;
  4071f0:	2201      	movs	r2, #1
  4071f2:	4b43      	ldr	r3, [pc, #268]	; (407300 <socket_cb+0x4a0>)
  4071f4:	701a      	strb	r2, [r3, #0]
						close(tcp_client_socket);
  4071f6:	4b43      	ldr	r3, [pc, #268]	; (407304 <socket_cb+0x4a4>)
  4071f8:	f993 0000 	ldrsb.w	r0, [r3]
  4071fc:	4b42      	ldr	r3, [pc, #264]	; (407308 <socket_cb+0x4a8>)
  4071fe:	4798      	blx	r3
						break;
  407200:	e069      	b.n	4072d6 <socket_cb+0x476>
					}
					if (number_of_files > 0) {
  407202:	4b3d      	ldr	r3, [pc, #244]	; (4072f8 <socket_cb+0x498>)
  407204:	781b      	ldrb	r3, [r3, #0]
  407206:	f013 0fff 	tst.w	r3, #255	; 0xff
  40720a:	d064      	beq.n	4072d6 <socket_cb+0x476>
						uint16_t rtn;
						uint8_t *substring = malloc(sizeof (char) * strlen(file_names[number_of_files])-1);
  40720c:	4b3f      	ldr	r3, [pc, #252]	; (40730c <socket_cb+0x4ac>)
  40720e:	681c      	ldr	r4, [r3, #0]
  407210:	4d39      	ldr	r5, [pc, #228]	; (4072f8 <socket_cb+0x498>)
  407212:	782b      	ldrb	r3, [r5, #0]
  407214:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  407218:	4e3d      	ldr	r6, [pc, #244]	; (407310 <socket_cb+0x4b0>)
  40721a:	47b0      	blx	r6
  40721c:	3801      	subs	r0, #1
  40721e:	4b3d      	ldr	r3, [pc, #244]	; (407314 <socket_cb+0x4b4>)
  407220:	4798      	blx	r3
  407222:	4680      	mov	r8, r0
						
						memcpy( substring, &file_names[number_of_files][1], strlen(file_names[number_of_files])-2);
  407224:	782f      	ldrb	r7, [r5, #0]
  407226:	b2ff      	uxtb	r7, r7
  407228:	782b      	ldrb	r3, [r5, #0]
  40722a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  40722e:	47b0      	blx	r6
  407230:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
  407234:	1e82      	subs	r2, r0, #2
  407236:	3101      	adds	r1, #1
  407238:	4640      	mov	r0, r8
  40723a:	4b37      	ldr	r3, [pc, #220]	; (407318 <socket_cb+0x4b8>)
  40723c:	4798      	blx	r3
						substring[strlen(file_names[number_of_files])-2] = '\0';
  40723e:	782b      	ldrb	r3, [r5, #0]
  407240:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  407244:	47b0      	blx	r6
  407246:	4440      	add	r0, r8
  407248:	2400      	movs	r4, #0
  40724a:	f800 4c02 	strb.w	r4, [r0, #-2]
						
						memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  40724e:	4d33      	ldr	r5, [pc, #204]	; (40731c <socket_cb+0x4bc>)
  407250:	f240 57b4 	movw	r7, #1460	; 0x5b4
  407254:	463a      	mov	r2, r7
  407256:	4621      	mov	r1, r4
  407258:	4628      	mov	r0, r5
  40725a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 407348 <socket_cb+0x4e8>
  40725e:	47c8      	blx	r9
						sprintf((char *)gau8ReceivedBuffer, "%s%s%s%s", HOST_MSG, "file/", substring, HOST_MSG_SUFFIX);
  407260:	4b2f      	ldr	r3, [pc, #188]	; (407320 <socket_cb+0x4c0>)
  407262:	9301      	str	r3, [sp, #4]
  407264:	f8cd 8000 	str.w	r8, [sp]
  407268:	4b2e      	ldr	r3, [pc, #184]	; (407324 <socket_cb+0x4c4>)
  40726a:	4a2f      	ldr	r2, [pc, #188]	; (407328 <socket_cb+0x4c8>)
  40726c:	492f      	ldr	r1, [pc, #188]	; (40732c <socket_cb+0x4cc>)
  40726e:	4628      	mov	r0, r5
  407270:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 40734c <socket_cb+0x4ec>
  407274:	47c0      	blx	r8
						
						
						rtn = send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  407276:	4628      	mov	r0, r5
  407278:	47b0      	blx	r6
  40727a:	4e22      	ldr	r6, [pc, #136]	; (407304 <socket_cb+0x4a4>)
  40727c:	4623      	mov	r3, r4
  40727e:	b282      	uxth	r2, r0
  407280:	4629      	mov	r1, r5
  407282:	f996 0000 	ldrsb.w	r0, [r6]
  407286:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 407350 <socket_cb+0x4f0>
  40728a:	47c0      	blx	r8
						memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  40728c:	463a      	mov	r2, r7
  40728e:	4621      	mov	r1, r4
  407290:	4628      	mov	r0, r5
  407292:	47c8      	blx	r9
						
						http_flag = HEADER;
  407294:	2201      	movs	r2, #1
  407296:	4b26      	ldr	r3, [pc, #152]	; (407330 <socket_cb+0x4d0>)
  407298:	701a      	strb	r2, [r3, #0]
						recv(tcp_client_socket, gau8SocketTestBuffer, sizeof(gau8SocketTestBuffer), 0);
  40729a:	4623      	mov	r3, r4
  40729c:	463a      	mov	r2, r7
  40729e:	4925      	ldr	r1, [pc, #148]	; (407334 <socket_cb+0x4d4>)
  4072a0:	f996 0000 	ldrsb.w	r0, [r6]
  4072a4:	4c24      	ldr	r4, [pc, #144]	; (407338 <socket_cb+0x4d8>)
  4072a6:	47a0      	blx	r4
  4072a8:	e015      	b.n	4072d6 <socket_cb+0x476>
				
			}
			
		
		} else {
		printf("socket_cb: recv error!\r\n");
  4072aa:	4824      	ldr	r0, [pc, #144]	; (40733c <socket_cb+0x4dc>)
  4072ac:	4b0c      	ldr	r3, [pc, #48]	; (4072e0 <socket_cb+0x480>)
  4072ae:	4798      	blx	r3
		close(tcp_client_socket);
  4072b0:	4c14      	ldr	r4, [pc, #80]	; (407304 <socket_cb+0x4a4>)
  4072b2:	f994 0000 	ldrsb.w	r0, [r4]
  4072b6:	4b14      	ldr	r3, [pc, #80]	; (407308 <socket_cb+0x4a8>)
  4072b8:	4798      	blx	r3
		tcp_client_socket = -1;
  4072ba:	23ff      	movs	r3, #255	; 0xff
  4072bc:	7023      	strb	r3, [r4, #0]
	break; 
	}
	default:
		break;
	}
}
  4072be:	e00a      	b.n	4072d6 <socket_cb+0x476>
					(char const *)file_name,
					FA_CREATE_ALWAYS | FA_WRITE);
					if (res != FR_OK) {
						printf("[FAIL] res %d\r\n", res);
					}
					printf("[OK]\r\n");
  4072c0:	480c      	ldr	r0, [pc, #48]	; (4072f4 <socket_cb+0x494>)
  4072c2:	4c07      	ldr	r4, [pc, #28]	; (4072e0 <socket_cb+0x480>)
  4072c4:	47a0      	blx	r4
					
					printf("Write to info file (f_puts)...\r\n");
  4072c6:	481e      	ldr	r0, [pc, #120]	; (407340 <socket_cb+0x4e0>)
  4072c8:	47a0      	blx	r4
  4072ca:	2400      	movs	r4, #0
					//f_puts(file_content, &card_file);
					uint8_t temp = 0;
					
					for(int i=0; i<sizeof(file_content);i++) {
						
						f_putc(file_content[i], &card_file);
  4072cc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 407354 <socket_cb+0x4f4>
  4072d0:	4f06      	ldr	r7, [pc, #24]	; (4072ec <socket_cb+0x48c>)
  4072d2:	4d1c      	ldr	r5, [pc, #112]	; (407344 <socket_cb+0x4e4>)
  4072d4:	e768      	b.n	4071a8 <socket_cb+0x348>
	break; 
	}
	default:
		break;
	}
}
  4072d6:	b005      	add	sp, #20
  4072d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4072dc:	0040f558 	.word	0x0040f558
  4072e0:	00407645 	.word	0x00407645
  4072e4:	0040f560 	.word	0x0040f560
  4072e8:	0040f568 	.word	0x0040f568
  4072ec:	20402400 	.word	0x20402400
  4072f0:	00403075 	.word	0x00403075
  4072f4:	0040f57c 	.word	0x0040f57c
  4072f8:	20400fae 	.word	0x20400fae
  4072fc:	0040f584 	.word	0x0040f584
  407300:	20400fac 	.word	0x20400fac
  407304:	20400040 	.word	0x20400040
  407308:	00405a6d 	.word	0x00405a6d
  40730c:	20401c18 	.word	0x20401c18
  407310:	004080c1 	.word	0x004080c1
  407314:	0040766d 	.word	0x0040766d
  407318:	00407bed 	.word	0x00407bed
  40731c:	20400fb0 	.word	0x20400fb0
  407320:	0040f408 	.word	0x0040f408
  407324:	0040f4d4 	.word	0x0040f4d4
  407328:	0040f424 	.word	0x0040f424
  40732c:	0040f4dc 	.word	0x0040f4dc
  407330:	20400fad 	.word	0x20400fad
  407334:	204009f8 	.word	0x204009f8
  407338:	004059c9 	.word	0x004059c9
  40733c:	0040f59c 	.word	0x0040f59c
  407340:	0040f5b8 	.word	0x0040f5b8
  407344:	0040308d 	.word	0x0040308d
  407348:	00407d21 	.word	0x00407d21
  40734c:	00407f49 	.word	0x00407f49
  407350:	0040592d 	.word	0x0040592d
  407354:	20401e4c 	.word	0x20401e4c

00407358 <main>:
 * Initialize system, UART console, network then test function of TCP server.
 *
 * \return program return value.
 */
int main(void)
{
  407358:	b570      	push	{r4, r5, r6, lr}
  40735a:	b092      	sub	sp, #72	; 0x48
	tstrWifiInitParam param;
	int8_t ret;
	struct sockaddr_in addr;
	
	file_names = malloc(sizeof(uint8_t *)*20);
  40735c:	2050      	movs	r0, #80	; 0x50
  40735e:	4b6c      	ldr	r3, [pc, #432]	; (407510 <main+0x1b8>)
  407360:	4798      	blx	r3
  407362:	4b6c      	ldr	r3, [pc, #432]	; (407514 <main+0x1bc>)
  407364:	6018      	str	r0, [r3, #0]

	
	

	/* Initialize the board. */
	sysclk_init();
  407366:	4b6c      	ldr	r3, [pc, #432]	; (407518 <main+0x1c0>)
  407368:	4798      	blx	r3
	board_init();
  40736a:	4b6c      	ldr	r3, [pc, #432]	; (40751c <main+0x1c4>)
  40736c:	4798      	blx	r3
  40736e:	200e      	movs	r0, #14
  407370:	4e6b      	ldr	r6, [pc, #428]	; (407520 <main+0x1c8>)
  407372:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  407374:	4d6b      	ldr	r5, [pc, #428]	; (407524 <main+0x1cc>)
  407376:	4b6c      	ldr	r3, [pc, #432]	; (407528 <main+0x1d0>)
  407378:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40737a:	4a6c      	ldr	r2, [pc, #432]	; (40752c <main+0x1d4>)
  40737c:	4b6c      	ldr	r3, [pc, #432]	; (407530 <main+0x1d8>)
  40737e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  407380:	4a6c      	ldr	r2, [pc, #432]	; (407534 <main+0x1dc>)
  407382:	4b6d      	ldr	r3, [pc, #436]	; (407538 <main+0x1e0>)
  407384:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  407386:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40738a:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  40738c:	23c0      	movs	r3, #192	; 0xc0
  40738e:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  407390:	f44f 6300 	mov.w	r3, #2048	; 0x800
  407394:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  407396:	2400      	movs	r4, #0
  407398:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40739a:	9406      	str	r4, [sp, #24]
  40739c:	200e      	movs	r0, #14
  40739e:	47b0      	blx	r6
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4073a0:	4a66      	ldr	r2, [pc, #408]	; (40753c <main+0x1e4>)
  4073a2:	a902      	add	r1, sp, #8
  4073a4:	4628      	mov	r0, r5
  4073a6:	4b66      	ldr	r3, [pc, #408]	; (407540 <main+0x1e8>)
  4073a8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4073aa:	4628      	mov	r0, r5
  4073ac:	4b65      	ldr	r3, [pc, #404]	; (407544 <main+0x1ec>)
  4073ae:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4073b0:	4628      	mov	r0, r5
  4073b2:	4b65      	ldr	r3, [pc, #404]	; (407548 <main+0x1f0>)
  4073b4:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4073b6:	4e65      	ldr	r6, [pc, #404]	; (40754c <main+0x1f4>)
  4073b8:	6833      	ldr	r3, [r6, #0]
  4073ba:	4621      	mov	r1, r4
  4073bc:	6898      	ldr	r0, [r3, #8]
  4073be:	4d64      	ldr	r5, [pc, #400]	; (407550 <main+0x1f8>)
  4073c0:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4073c2:	6833      	ldr	r3, [r6, #0]
  4073c4:	4621      	mov	r1, r4
  4073c6:	6858      	ldr	r0, [r3, #4]
  4073c8:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  4073ca:	4862      	ldr	r0, [pc, #392]	; (407554 <main+0x1fc>)
  4073cc:	4c62      	ldr	r4, [pc, #392]	; (407558 <main+0x200>)
  4073ce:	47a0      	blx	r4
	
	
	/** SDCARD */
	irq_initialize_vectors();
	cpu_irq_enable();
  4073d0:	2201      	movs	r2, #1
  4073d2:	4b62      	ldr	r3, [pc, #392]	; (40755c <main+0x204>)
  4073d4:	701a      	strb	r2, [r3, #0]
  4073d6:	f3bf 8f5f 	dmb	sy
  4073da:	b662      	cpsie	i
	
	/* Initialize SD MMC stack */
	sd_mmc_init();
  4073dc:	4b60      	ldr	r3, [pc, #384]	; (407560 <main+0x208>)
  4073de:	4798      	blx	r3
	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  4073e0:	4860      	ldr	r0, [pc, #384]	; (407564 <main+0x20c>)
  4073e2:	47a0      	blx	r4
	

	char temp_buffer[MAIN_WIFI_M2M_BUFFER_SIZE];
	
	printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  4073e4:	4860      	ldr	r0, [pc, #384]	; (407568 <main+0x210>)
  4073e6:	47a0      	blx	r4
	/* Wait card present and ready */
	do {
		status = sd_mmc_test_unit_ready(0);
  4073e8:	4c60      	ldr	r4, [pc, #384]	; (40756c <main+0x214>)
		if (CTRL_FAIL == status) {
			printf("Card install FAIL\n\r");
			printf("Please unplug and re-plug the card.\n\r");
			while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  4073ea:	4d61      	ldr	r5, [pc, #388]	; (407570 <main+0x218>)
	char temp_buffer[MAIN_WIFI_M2M_BUFFER_SIZE];
	
	printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
	/* Wait card present and ready */
	do {
		status = sd_mmc_test_unit_ready(0);
  4073ec:	2000      	movs	r0, #0
  4073ee:	4b61      	ldr	r3, [pc, #388]	; (407574 <main+0x21c>)
  4073f0:	4798      	blx	r3
  4073f2:	7020      	strb	r0, [r4, #0]
		if (CTRL_FAIL == status) {
  4073f4:	2801      	cmp	r0, #1
  4073f6:	d109      	bne.n	40740c <main+0xb4>
			printf("Card install FAIL\n\r");
  4073f8:	485f      	ldr	r0, [pc, #380]	; (407578 <main+0x220>)
  4073fa:	4e57      	ldr	r6, [pc, #348]	; (407558 <main+0x200>)
  4073fc:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
  4073fe:	485f      	ldr	r0, [pc, #380]	; (40757c <main+0x224>)
  407400:	47b0      	blx	r6
			while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  407402:	2600      	movs	r6, #0
  407404:	4630      	mov	r0, r6
  407406:	47a8      	blx	r5
  407408:	2802      	cmp	r0, #2
  40740a:	d1fb      	bne.n	407404 <main+0xac>
			}
		}
	} while (CTRL_GOOD != status);
  40740c:	7823      	ldrb	r3, [r4, #0]
  40740e:	2b00      	cmp	r3, #0
  407410:	d1ec      	bne.n	4073ec <main+0x94>
	
	printf("Mount disk (f_mount)...\r\n");
  407412:	485b      	ldr	r0, [pc, #364]	; (407580 <main+0x228>)
  407414:	4b50      	ldr	r3, [pc, #320]	; (407558 <main+0x200>)
  407416:	4798      	blx	r3
	memset(&fs, 0, sizeof(FATFS));
  407418:	4c5a      	ldr	r4, [pc, #360]	; (407584 <main+0x22c>)
  40741a:	f44f 720c 	mov.w	r2, #560	; 0x230
  40741e:	2100      	movs	r1, #0
  407420:	4620      	mov	r0, r4
  407422:	4b59      	ldr	r3, [pc, #356]	; (407588 <main+0x230>)
  407424:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  407426:	4621      	mov	r1, r4
  407428:	2000      	movs	r0, #0
  40742a:	4b58      	ldr	r3, [pc, #352]	; (40758c <main+0x234>)
  40742c:	4798      	blx	r3
  40742e:	4b58      	ldr	r3, [pc, #352]	; (407590 <main+0x238>)
  407430:	7018      	strb	r0, [r3, #0]
	if (FR_INVALID_DRIVE == res) {
  407432:	280b      	cmp	r0, #11
  407434:	d104      	bne.n	407440 <main+0xe8>
		printf("[FAIL] res %d\r\n", res);
  407436:	210b      	movs	r1, #11
  407438:	4856      	ldr	r0, [pc, #344]	; (407594 <main+0x23c>)
  40743a:	4b47      	ldr	r3, [pc, #284]	; (407558 <main+0x200>)
  40743c:	4798      	blx	r3
		goto main_end_of_test;
  40743e:	e05b      	b.n	4074f8 <main+0x1a0>
	}
	printf("[OK]\r\n");
  407440:	4855      	ldr	r0, [pc, #340]	; (407598 <main+0x240>)
  407442:	4b45      	ldr	r3, [pc, #276]	; (407558 <main+0x200>)
  407444:	4798      	blx	r3
#endif

#ifdef WIFI_EN

	/* Initialize the BSP. */
	nm_bsp_init();
  407446:	4b55      	ldr	r3, [pc, #340]	; (40759c <main+0x244>)
  407448:	4798      	blx	r3

	/* Initialize socket address structure. */
	addr.sin_family = AF_INET;
  40744a:	2302      	movs	r3, #2
  40744c:	f8ad 3020 	strh.w	r3, [sp, #32]
	addr.sin_port = _htons(MAIN_SERVER_PORT);
  407450:	f249 131f 	movw	r3, #37151	; 0x911f
  407454:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	addr.sin_addr.s_addr = MAIN_SERVER_IP;
  407458:	4b51      	ldr	r3, [pc, #324]	; (4075a0 <main+0x248>)
  40745a:	9309      	str	r3, [sp, #36]	; 0x24

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  40745c:	2300      	movs	r3, #0
  40745e:	930d      	str	r3, [sp, #52]	; 0x34
  407460:	930e      	str	r3, [sp, #56]	; 0x38
  407462:	930f      	str	r3, [sp, #60]	; 0x3c
  407464:	9310      	str	r3, [sp, #64]	; 0x40
  407466:	9311      	str	r3, [sp, #68]	; 0x44
		
	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  407468:	4b4e      	ldr	r3, [pc, #312]	; (4075a4 <main+0x24c>)
  40746a:	930c      	str	r3, [sp, #48]	; 0x30
	ret = m2m_wifi_init(&param);
  40746c:	a80c      	add	r0, sp, #48	; 0x30
  40746e:	4b4e      	ldr	r3, [pc, #312]	; (4075a8 <main+0x250>)
  407470:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  407472:	4601      	mov	r1, r0
  407474:	b118      	cbz	r0, 40747e <main+0x126>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  407476:	484d      	ldr	r0, [pc, #308]	; (4075ac <main+0x254>)
  407478:	4b37      	ldr	r3, [pc, #220]	; (407558 <main+0x200>)
  40747a:	4798      	blx	r3
  40747c:	e7fe      	b.n	40747c <main+0x124>
		}
	}
	

	/* Initialize socket module */
	socketInit();
  40747e:	4b4c      	ldr	r3, [pc, #304]	; (4075b0 <main+0x258>)
  407480:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);
  407482:	2100      	movs	r1, #0
  407484:	484b      	ldr	r0, [pc, #300]	; (4075b4 <main+0x25c>)
  407486:	4b4c      	ldr	r3, [pc, #304]	; (4075b8 <main+0x260>)
  407488:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  40748a:	23ff      	movs	r3, #255	; 0xff
  40748c:	9300      	str	r3, [sp, #0]
  40748e:	4b4b      	ldr	r3, [pc, #300]	; (4075bc <main+0x264>)
  407490:	2202      	movs	r2, #2
  407492:	2107      	movs	r1, #7
  407494:	484a      	ldr	r0, [pc, #296]	; (4075c0 <main+0x268>)
  407496:	4c4b      	ldr	r4, [pc, #300]	; (4075c4 <main+0x26c>)
  407498:	47a0      	blx	r4
	
	while (!reception_flag) {
  40749a:	4e4b      	ldr	r6, [pc, #300]	; (4075c8 <main+0x270>)
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  40749c:	4d4b      	ldr	r5, [pc, #300]	; (4075cc <main+0x274>)

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  40749e:	4c4c      	ldr	r4, [pc, #304]	; (4075d0 <main+0x278>)
	registerSocketCallback(socket_cb, NULL);

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	
	while (!reception_flag) {
  4074a0:	e027      	b.n	4074f2 <main+0x19a>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
  4074a2:	2000      	movs	r0, #0
  4074a4:	47a8      	blx	r5

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  4074a6:	7823      	ldrb	r3, [r4, #0]
  4074a8:	2b01      	cmp	r3, #1
  4074aa:	d122      	bne.n	4074f2 <main+0x19a>
			if (tcp_client_socket < 0) {
  4074ac:	4b49      	ldr	r3, [pc, #292]	; (4075d4 <main+0x27c>)
  4074ae:	f993 3000 	ldrsb.w	r3, [r3]
  4074b2:	2b00      	cmp	r3, #0
  4074b4:	da1d      	bge.n	4074f2 <main+0x19a>
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  4074b6:	2200      	movs	r2, #0
  4074b8:	2101      	movs	r1, #1
  4074ba:	2002      	movs	r0, #2
  4074bc:	4b46      	ldr	r3, [pc, #280]	; (4075d8 <main+0x280>)
  4074be:	4798      	blx	r3
  4074c0:	4b44      	ldr	r3, [pc, #272]	; (4075d4 <main+0x27c>)
  4074c2:	7018      	strb	r0, [r3, #0]
  4074c4:	2800      	cmp	r0, #0
  4074c6:	da03      	bge.n	4074d0 <main+0x178>
					printf("main: failed to create TCP client socket error!\r\n");
  4074c8:	4844      	ldr	r0, [pc, #272]	; (4075dc <main+0x284>)
  4074ca:	4b23      	ldr	r3, [pc, #140]	; (407558 <main+0x200>)
  4074cc:	4798      	blx	r3
					continue;
  4074ce:	e010      	b.n	4074f2 <main+0x19a>
				}
				
				/* Connect TCP client socket. */
				if (connect(tcp_client_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR ) {
  4074d0:	2210      	movs	r2, #16
  4074d2:	a908      	add	r1, sp, #32
  4074d4:	4b42      	ldr	r3, [pc, #264]	; (4075e0 <main+0x288>)
  4074d6:	4798      	blx	r3
  4074d8:	b140      	cbz	r0, 4074ec <main+0x194>
					printf("main: failed to connect socket error!\r\n");
  4074da:	4842      	ldr	r0, [pc, #264]	; (4075e4 <main+0x28c>)
  4074dc:	4b1e      	ldr	r3, [pc, #120]	; (407558 <main+0x200>)
  4074de:	4798      	blx	r3
					close(tcp_client_socket);
  4074e0:	4b3c      	ldr	r3, [pc, #240]	; (4075d4 <main+0x27c>)
  4074e2:	f993 0000 	ldrsb.w	r0, [r3]
  4074e6:	4b40      	ldr	r3, [pc, #256]	; (4075e8 <main+0x290>)
  4074e8:	4798      	blx	r3
					continue;
  4074ea:	e002      	b.n	4074f2 <main+0x19a>
					}else{
					printf("Conectado ! \n");
  4074ec:	483f      	ldr	r0, [pc, #252]	; (4075ec <main+0x294>)
  4074ee:	4b1a      	ldr	r3, [pc, #104]	; (407558 <main+0x200>)
  4074f0:	4798      	blx	r3
	registerSocketCallback(socket_cb, NULL);

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	
	while (!reception_flag) {
  4074f2:	7833      	ldrb	r3, [r6, #0]
  4074f4:	2b00      	cmp	r3, #0
  4074f6:	d0d4      	beq.n	4074a2 <main+0x14a>
	//		delay_ms(20);
	//	}
	//}
		
	main_end_of_test:
	printf("Please unplug the card.\n\r");
  4074f8:	483d      	ldr	r0, [pc, #244]	; (4075f0 <main+0x298>)
  4074fa:	4b17      	ldr	r3, [pc, #92]	; (407558 <main+0x200>)
  4074fc:	4798      	blx	r3
	while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  4074fe:	2500      	movs	r5, #0
  407500:	4c1b      	ldr	r4, [pc, #108]	; (407570 <main+0x218>)
  407502:	4628      	mov	r0, r5
  407504:	47a0      	blx	r4
  407506:	2802      	cmp	r0, #2
  407508:	d1fb      	bne.n	407502 <main+0x1aa>
	}

	return 0;
}
  40750a:	2000      	movs	r0, #0
  40750c:	b012      	add	sp, #72	; 0x48
  40750e:	bd70      	pop	{r4, r5, r6, pc}
  407510:	0040766d 	.word	0x0040766d
  407514:	20401c18 	.word	0x20401c18
  407518:	00405bd5 	.word	0x00405bd5
  40751c:	00405cd1 	.word	0x00405cd1
  407520:	004065c9 	.word	0x004065c9
  407524:	40028000 	.word	0x40028000
  407528:	20401660 	.word	0x20401660
  40752c:	00406cd5 	.word	0x00406cd5
  407530:	2040165c 	.word	0x2040165c
  407534:	00406bfd 	.word	0x00406bfd
  407538:	20401658 	.word	0x20401658
  40753c:	08f0d180 	.word	0x08f0d180
  407540:	00406835 	.word	0x00406835
  407544:	00406889 	.word	0x00406889
  407548:	00406891 	.word	0x00406891
  40754c:	20400470 	.word	0x20400470
  407550:	00407de9 	.word	0x00407de9
  407554:	0040f5e0 	.word	0x0040f5e0
  407558:	00407645 	.word	0x00407645
  40755c:	20400038 	.word	0x20400038
  407560:	00400345 	.word	0x00400345
  407564:	0040f640 	.word	0x0040f640
  407568:	0040f670 	.word	0x0040f670
  40756c:	20402f8d 	.word	0x20402f8d
  407570:	00400371 	.word	0x00400371
  407574:	00400ec5 	.word	0x00400ec5
  407578:	0040f6a0 	.word	0x0040f6a0
  40757c:	0040f6b4 	.word	0x0040f6b4
  407580:	0040f6dc 	.word	0x0040f6dc
  407584:	20401c1c 	.word	0x20401c1c
  407588:	00407d21 	.word	0x00407d21
  40758c:	00402c21 	.word	0x00402c21
  407590:	20402f8c 	.word	0x20402f8c
  407594:	0040f548 	.word	0x0040f548
  407598:	0040f57c 	.word	0x0040f57c
  40759c:	0040319d 	.word	0x0040319d
  4075a0:	070a14ac 	.word	0x070a14ac
  4075a4:	00406b7d 	.word	0x00406b7d
  4075a8:	00403fc5 	.word	0x00403fc5
  4075ac:	0040f6f8 	.word	0x0040f6f8
  4075b0:	00405761 	.word	0x00405761
  4075b4:	00406e61 	.word	0x00406e61
  4075b8:	004057a5 	.word	0x004057a5
  4075bc:	0040f3bc 	.word	0x0040f3bc
  4075c0:	0040f3c8 	.word	0x0040f3c8
  4075c4:	00404311 	.word	0x00404311
  4075c8:	20400fac 	.word	0x20400fac
  4075cc:	004040c1 	.word	0x004040c1
  4075d0:	204009f4 	.word	0x204009f4
  4075d4:	20400040 	.word	0x20400040
  4075d8:	004057b9 	.word	0x004057b9
  4075dc:	0040f720 	.word	0x0040f720
  4075e0:	00405899 	.word	0x00405899
  4075e4:	0040f754 	.word	0x0040f754
  4075e8:	00405a6d 	.word	0x00405a6d
  4075ec:	0040f77c 	.word	0x0040f77c
  4075f0:	0040f78c 	.word	0x0040f78c

004075f4 <__libc_init_array>:
  4075f4:	b570      	push	{r4, r5, r6, lr}
  4075f6:	4e0f      	ldr	r6, [pc, #60]	; (407634 <__libc_init_array+0x40>)
  4075f8:	4d0f      	ldr	r5, [pc, #60]	; (407638 <__libc_init_array+0x44>)
  4075fa:	1b76      	subs	r6, r6, r5
  4075fc:	10b6      	asrs	r6, r6, #2
  4075fe:	bf18      	it	ne
  407600:	2400      	movne	r4, #0
  407602:	d005      	beq.n	407610 <__libc_init_array+0x1c>
  407604:	3401      	adds	r4, #1
  407606:	f855 3b04 	ldr.w	r3, [r5], #4
  40760a:	4798      	blx	r3
  40760c:	42a6      	cmp	r6, r4
  40760e:	d1f9      	bne.n	407604 <__libc_init_array+0x10>
  407610:	4e0a      	ldr	r6, [pc, #40]	; (40763c <__libc_init_array+0x48>)
  407612:	4d0b      	ldr	r5, [pc, #44]	; (407640 <__libc_init_array+0x4c>)
  407614:	1b76      	subs	r6, r6, r5
  407616:	f008 f999 	bl	40f94c <_init>
  40761a:	10b6      	asrs	r6, r6, #2
  40761c:	bf18      	it	ne
  40761e:	2400      	movne	r4, #0
  407620:	d006      	beq.n	407630 <__libc_init_array+0x3c>
  407622:	3401      	adds	r4, #1
  407624:	f855 3b04 	ldr.w	r3, [r5], #4
  407628:	4798      	blx	r3
  40762a:	42a6      	cmp	r6, r4
  40762c:	d1f9      	bne.n	407622 <__libc_init_array+0x2e>
  40762e:	bd70      	pop	{r4, r5, r6, pc}
  407630:	bd70      	pop	{r4, r5, r6, pc}
  407632:	bf00      	nop
  407634:	0040f958 	.word	0x0040f958
  407638:	0040f958 	.word	0x0040f958
  40763c:	0040f960 	.word	0x0040f960
  407640:	0040f958 	.word	0x0040f958

00407644 <iprintf>:
  407644:	b40f      	push	{r0, r1, r2, r3}
  407646:	b500      	push	{lr}
  407648:	4907      	ldr	r1, [pc, #28]	; (407668 <iprintf+0x24>)
  40764a:	b083      	sub	sp, #12
  40764c:	ab04      	add	r3, sp, #16
  40764e:	6808      	ldr	r0, [r1, #0]
  407650:	f853 2b04 	ldr.w	r2, [r3], #4
  407654:	6881      	ldr	r1, [r0, #8]
  407656:	9301      	str	r3, [sp, #4]
  407658:	f002 f92a 	bl	4098b0 <_vfiprintf_r>
  40765c:	b003      	add	sp, #12
  40765e:	f85d eb04 	ldr.w	lr, [sp], #4
  407662:	b004      	add	sp, #16
  407664:	4770      	bx	lr
  407666:	bf00      	nop
  407668:	20400470 	.word	0x20400470

0040766c <malloc>:
  40766c:	4b02      	ldr	r3, [pc, #8]	; (407678 <malloc+0xc>)
  40766e:	4601      	mov	r1, r0
  407670:	6818      	ldr	r0, [r3, #0]
  407672:	f000 b803 	b.w	40767c <_malloc_r>
  407676:	bf00      	nop
  407678:	20400470 	.word	0x20400470

0040767c <_malloc_r>:
  40767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407680:	f101 050b 	add.w	r5, r1, #11
  407684:	2d16      	cmp	r5, #22
  407686:	b083      	sub	sp, #12
  407688:	4606      	mov	r6, r0
  40768a:	f240 809f 	bls.w	4077cc <_malloc_r+0x150>
  40768e:	f035 0507 	bics.w	r5, r5, #7
  407692:	f100 80bf 	bmi.w	407814 <_malloc_r+0x198>
  407696:	42a9      	cmp	r1, r5
  407698:	f200 80bc 	bhi.w	407814 <_malloc_r+0x198>
  40769c:	f000 fb8e 	bl	407dbc <__malloc_lock>
  4076a0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4076a4:	f0c0 829c 	bcc.w	407be0 <_malloc_r+0x564>
  4076a8:	0a6b      	lsrs	r3, r5, #9
  4076aa:	f000 80ba 	beq.w	407822 <_malloc_r+0x1a6>
  4076ae:	2b04      	cmp	r3, #4
  4076b0:	f200 8183 	bhi.w	4079ba <_malloc_r+0x33e>
  4076b4:	09a8      	lsrs	r0, r5, #6
  4076b6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  4076ba:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4076be:	3038      	adds	r0, #56	; 0x38
  4076c0:	4fc4      	ldr	r7, [pc, #784]	; (4079d4 <_malloc_r+0x358>)
  4076c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4076c6:	f1a3 0108 	sub.w	r1, r3, #8
  4076ca:	685c      	ldr	r4, [r3, #4]
  4076cc:	42a1      	cmp	r1, r4
  4076ce:	d107      	bne.n	4076e0 <_malloc_r+0x64>
  4076d0:	e0ac      	b.n	40782c <_malloc_r+0x1b0>
  4076d2:	2a00      	cmp	r2, #0
  4076d4:	f280 80ac 	bge.w	407830 <_malloc_r+0x1b4>
  4076d8:	68e4      	ldr	r4, [r4, #12]
  4076da:	42a1      	cmp	r1, r4
  4076dc:	f000 80a6 	beq.w	40782c <_malloc_r+0x1b0>
  4076e0:	6863      	ldr	r3, [r4, #4]
  4076e2:	f023 0303 	bic.w	r3, r3, #3
  4076e6:	1b5a      	subs	r2, r3, r5
  4076e8:	2a0f      	cmp	r2, #15
  4076ea:	ddf2      	ble.n	4076d2 <_malloc_r+0x56>
  4076ec:	49b9      	ldr	r1, [pc, #740]	; (4079d4 <_malloc_r+0x358>)
  4076ee:	693c      	ldr	r4, [r7, #16]
  4076f0:	f101 0e08 	add.w	lr, r1, #8
  4076f4:	4574      	cmp	r4, lr
  4076f6:	f000 81b3 	beq.w	407a60 <_malloc_r+0x3e4>
  4076fa:	6863      	ldr	r3, [r4, #4]
  4076fc:	f023 0303 	bic.w	r3, r3, #3
  407700:	1b5a      	subs	r2, r3, r5
  407702:	2a0f      	cmp	r2, #15
  407704:	f300 8199 	bgt.w	407a3a <_malloc_r+0x3be>
  407708:	2a00      	cmp	r2, #0
  40770a:	f8c1 e014 	str.w	lr, [r1, #20]
  40770e:	f8c1 e010 	str.w	lr, [r1, #16]
  407712:	f280 809e 	bge.w	407852 <_malloc_r+0x1d6>
  407716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40771a:	f080 8167 	bcs.w	4079ec <_malloc_r+0x370>
  40771e:	08db      	lsrs	r3, r3, #3
  407720:	f103 0c01 	add.w	ip, r3, #1
  407724:	2201      	movs	r2, #1
  407726:	109b      	asrs	r3, r3, #2
  407728:	fa02 f303 	lsl.w	r3, r2, r3
  40772c:	684a      	ldr	r2, [r1, #4]
  40772e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  407732:	f8c4 8008 	str.w	r8, [r4, #8]
  407736:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  40773a:	431a      	orrs	r2, r3
  40773c:	f1a9 0308 	sub.w	r3, r9, #8
  407740:	60e3      	str	r3, [r4, #12]
  407742:	604a      	str	r2, [r1, #4]
  407744:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  407748:	f8c8 400c 	str.w	r4, [r8, #12]
  40774c:	1083      	asrs	r3, r0, #2
  40774e:	2401      	movs	r4, #1
  407750:	409c      	lsls	r4, r3
  407752:	4294      	cmp	r4, r2
  407754:	f200 808a 	bhi.w	40786c <_malloc_r+0x1f0>
  407758:	4214      	tst	r4, r2
  40775a:	d106      	bne.n	40776a <_malloc_r+0xee>
  40775c:	f020 0003 	bic.w	r0, r0, #3
  407760:	0064      	lsls	r4, r4, #1
  407762:	4214      	tst	r4, r2
  407764:	f100 0004 	add.w	r0, r0, #4
  407768:	d0fa      	beq.n	407760 <_malloc_r+0xe4>
  40776a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40776e:	46cc      	mov	ip, r9
  407770:	4680      	mov	r8, r0
  407772:	f8dc 100c 	ldr.w	r1, [ip, #12]
  407776:	458c      	cmp	ip, r1
  407778:	d107      	bne.n	40778a <_malloc_r+0x10e>
  40777a:	e173      	b.n	407a64 <_malloc_r+0x3e8>
  40777c:	2a00      	cmp	r2, #0
  40777e:	f280 8181 	bge.w	407a84 <_malloc_r+0x408>
  407782:	68c9      	ldr	r1, [r1, #12]
  407784:	458c      	cmp	ip, r1
  407786:	f000 816d 	beq.w	407a64 <_malloc_r+0x3e8>
  40778a:	684b      	ldr	r3, [r1, #4]
  40778c:	f023 0303 	bic.w	r3, r3, #3
  407790:	1b5a      	subs	r2, r3, r5
  407792:	2a0f      	cmp	r2, #15
  407794:	ddf2      	ble.n	40777c <_malloc_r+0x100>
  407796:	460c      	mov	r4, r1
  407798:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40779c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4077a0:	194b      	adds	r3, r1, r5
  4077a2:	f045 0501 	orr.w	r5, r5, #1
  4077a6:	604d      	str	r5, [r1, #4]
  4077a8:	f042 0101 	orr.w	r1, r2, #1
  4077ac:	f8c8 c00c 	str.w	ip, [r8, #12]
  4077b0:	4630      	mov	r0, r6
  4077b2:	f8cc 8008 	str.w	r8, [ip, #8]
  4077b6:	617b      	str	r3, [r7, #20]
  4077b8:	613b      	str	r3, [r7, #16]
  4077ba:	f8c3 e00c 	str.w	lr, [r3, #12]
  4077be:	f8c3 e008 	str.w	lr, [r3, #8]
  4077c2:	6059      	str	r1, [r3, #4]
  4077c4:	509a      	str	r2, [r3, r2]
  4077c6:	f000 fafb 	bl	407dc0 <__malloc_unlock>
  4077ca:	e01f      	b.n	40780c <_malloc_r+0x190>
  4077cc:	2910      	cmp	r1, #16
  4077ce:	d821      	bhi.n	407814 <_malloc_r+0x198>
  4077d0:	f000 faf4 	bl	407dbc <__malloc_lock>
  4077d4:	2510      	movs	r5, #16
  4077d6:	2306      	movs	r3, #6
  4077d8:	2002      	movs	r0, #2
  4077da:	4f7e      	ldr	r7, [pc, #504]	; (4079d4 <_malloc_r+0x358>)
  4077dc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4077e0:	f1a3 0208 	sub.w	r2, r3, #8
  4077e4:	685c      	ldr	r4, [r3, #4]
  4077e6:	4294      	cmp	r4, r2
  4077e8:	f000 8145 	beq.w	407a76 <_malloc_r+0x3fa>
  4077ec:	6863      	ldr	r3, [r4, #4]
  4077ee:	68e1      	ldr	r1, [r4, #12]
  4077f0:	68a5      	ldr	r5, [r4, #8]
  4077f2:	f023 0303 	bic.w	r3, r3, #3
  4077f6:	4423      	add	r3, r4
  4077f8:	4630      	mov	r0, r6
  4077fa:	685a      	ldr	r2, [r3, #4]
  4077fc:	60e9      	str	r1, [r5, #12]
  4077fe:	f042 0201 	orr.w	r2, r2, #1
  407802:	608d      	str	r5, [r1, #8]
  407804:	605a      	str	r2, [r3, #4]
  407806:	f000 fadb 	bl	407dc0 <__malloc_unlock>
  40780a:	3408      	adds	r4, #8
  40780c:	4620      	mov	r0, r4
  40780e:	b003      	add	sp, #12
  407810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407814:	2400      	movs	r4, #0
  407816:	230c      	movs	r3, #12
  407818:	4620      	mov	r0, r4
  40781a:	6033      	str	r3, [r6, #0]
  40781c:	b003      	add	sp, #12
  40781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407822:	2380      	movs	r3, #128	; 0x80
  407824:	f04f 0e40 	mov.w	lr, #64	; 0x40
  407828:	203f      	movs	r0, #63	; 0x3f
  40782a:	e749      	b.n	4076c0 <_malloc_r+0x44>
  40782c:	4670      	mov	r0, lr
  40782e:	e75d      	b.n	4076ec <_malloc_r+0x70>
  407830:	4423      	add	r3, r4
  407832:	68e1      	ldr	r1, [r4, #12]
  407834:	685a      	ldr	r2, [r3, #4]
  407836:	68a5      	ldr	r5, [r4, #8]
  407838:	f042 0201 	orr.w	r2, r2, #1
  40783c:	60e9      	str	r1, [r5, #12]
  40783e:	4630      	mov	r0, r6
  407840:	608d      	str	r5, [r1, #8]
  407842:	605a      	str	r2, [r3, #4]
  407844:	f000 fabc 	bl	407dc0 <__malloc_unlock>
  407848:	3408      	adds	r4, #8
  40784a:	4620      	mov	r0, r4
  40784c:	b003      	add	sp, #12
  40784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407852:	4423      	add	r3, r4
  407854:	4630      	mov	r0, r6
  407856:	685a      	ldr	r2, [r3, #4]
  407858:	f042 0201 	orr.w	r2, r2, #1
  40785c:	605a      	str	r2, [r3, #4]
  40785e:	f000 faaf 	bl	407dc0 <__malloc_unlock>
  407862:	3408      	adds	r4, #8
  407864:	4620      	mov	r0, r4
  407866:	b003      	add	sp, #12
  407868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40786c:	68bc      	ldr	r4, [r7, #8]
  40786e:	6863      	ldr	r3, [r4, #4]
  407870:	f023 0803 	bic.w	r8, r3, #3
  407874:	45a8      	cmp	r8, r5
  407876:	d304      	bcc.n	407882 <_malloc_r+0x206>
  407878:	ebc5 0308 	rsb	r3, r5, r8
  40787c:	2b0f      	cmp	r3, #15
  40787e:	f300 808c 	bgt.w	40799a <_malloc_r+0x31e>
  407882:	4b55      	ldr	r3, [pc, #340]	; (4079d8 <_malloc_r+0x35c>)
  407884:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4079e8 <_malloc_r+0x36c>
  407888:	681a      	ldr	r2, [r3, #0]
  40788a:	f8d9 3000 	ldr.w	r3, [r9]
  40788e:	3301      	adds	r3, #1
  407890:	442a      	add	r2, r5
  407892:	eb04 0a08 	add.w	sl, r4, r8
  407896:	f000 8160 	beq.w	407b5a <_malloc_r+0x4de>
  40789a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40789e:	320f      	adds	r2, #15
  4078a0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4078a4:	f022 020f 	bic.w	r2, r2, #15
  4078a8:	4611      	mov	r1, r2
  4078aa:	4630      	mov	r0, r6
  4078ac:	9201      	str	r2, [sp, #4]
  4078ae:	f000 fa89 	bl	407dc4 <_sbrk_r>
  4078b2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4078b6:	4683      	mov	fp, r0
  4078b8:	9a01      	ldr	r2, [sp, #4]
  4078ba:	f000 8158 	beq.w	407b6e <_malloc_r+0x4f2>
  4078be:	4582      	cmp	sl, r0
  4078c0:	f200 80fc 	bhi.w	407abc <_malloc_r+0x440>
  4078c4:	4b45      	ldr	r3, [pc, #276]	; (4079dc <_malloc_r+0x360>)
  4078c6:	6819      	ldr	r1, [r3, #0]
  4078c8:	45da      	cmp	sl, fp
  4078ca:	4411      	add	r1, r2
  4078cc:	6019      	str	r1, [r3, #0]
  4078ce:	f000 8153 	beq.w	407b78 <_malloc_r+0x4fc>
  4078d2:	f8d9 0000 	ldr.w	r0, [r9]
  4078d6:	f8df e110 	ldr.w	lr, [pc, #272]	; 4079e8 <_malloc_r+0x36c>
  4078da:	3001      	adds	r0, #1
  4078dc:	bf1b      	ittet	ne
  4078de:	ebca 0a0b 	rsbne	sl, sl, fp
  4078e2:	4451      	addne	r1, sl
  4078e4:	f8ce b000 	streq.w	fp, [lr]
  4078e8:	6019      	strne	r1, [r3, #0]
  4078ea:	f01b 0107 	ands.w	r1, fp, #7
  4078ee:	f000 8117 	beq.w	407b20 <_malloc_r+0x4a4>
  4078f2:	f1c1 0008 	rsb	r0, r1, #8
  4078f6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4078fa:	4483      	add	fp, r0
  4078fc:	3108      	adds	r1, #8
  4078fe:	445a      	add	r2, fp
  407900:	f3c2 020b 	ubfx	r2, r2, #0, #12
  407904:	ebc2 0901 	rsb	r9, r2, r1
  407908:	4649      	mov	r1, r9
  40790a:	4630      	mov	r0, r6
  40790c:	9301      	str	r3, [sp, #4]
  40790e:	f000 fa59 	bl	407dc4 <_sbrk_r>
  407912:	1c43      	adds	r3, r0, #1
  407914:	9b01      	ldr	r3, [sp, #4]
  407916:	f000 813f 	beq.w	407b98 <_malloc_r+0x51c>
  40791a:	ebcb 0200 	rsb	r2, fp, r0
  40791e:	444a      	add	r2, r9
  407920:	f042 0201 	orr.w	r2, r2, #1
  407924:	6819      	ldr	r1, [r3, #0]
  407926:	f8c7 b008 	str.w	fp, [r7, #8]
  40792a:	4449      	add	r1, r9
  40792c:	42bc      	cmp	r4, r7
  40792e:	f8cb 2004 	str.w	r2, [fp, #4]
  407932:	6019      	str	r1, [r3, #0]
  407934:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4079dc <_malloc_r+0x360>
  407938:	d016      	beq.n	407968 <_malloc_r+0x2ec>
  40793a:	f1b8 0f0f 	cmp.w	r8, #15
  40793e:	f240 80fd 	bls.w	407b3c <_malloc_r+0x4c0>
  407942:	6862      	ldr	r2, [r4, #4]
  407944:	f1a8 030c 	sub.w	r3, r8, #12
  407948:	f023 0307 	bic.w	r3, r3, #7
  40794c:	18e0      	adds	r0, r4, r3
  40794e:	f002 0201 	and.w	r2, r2, #1
  407952:	f04f 0e05 	mov.w	lr, #5
  407956:	431a      	orrs	r2, r3
  407958:	2b0f      	cmp	r3, #15
  40795a:	6062      	str	r2, [r4, #4]
  40795c:	f8c0 e004 	str.w	lr, [r0, #4]
  407960:	f8c0 e008 	str.w	lr, [r0, #8]
  407964:	f200 811c 	bhi.w	407ba0 <_malloc_r+0x524>
  407968:	4b1d      	ldr	r3, [pc, #116]	; (4079e0 <_malloc_r+0x364>)
  40796a:	68bc      	ldr	r4, [r7, #8]
  40796c:	681a      	ldr	r2, [r3, #0]
  40796e:	4291      	cmp	r1, r2
  407970:	bf88      	it	hi
  407972:	6019      	strhi	r1, [r3, #0]
  407974:	4b1b      	ldr	r3, [pc, #108]	; (4079e4 <_malloc_r+0x368>)
  407976:	681a      	ldr	r2, [r3, #0]
  407978:	4291      	cmp	r1, r2
  40797a:	6862      	ldr	r2, [r4, #4]
  40797c:	bf88      	it	hi
  40797e:	6019      	strhi	r1, [r3, #0]
  407980:	f022 0203 	bic.w	r2, r2, #3
  407984:	4295      	cmp	r5, r2
  407986:	eba2 0305 	sub.w	r3, r2, r5
  40798a:	d801      	bhi.n	407990 <_malloc_r+0x314>
  40798c:	2b0f      	cmp	r3, #15
  40798e:	dc04      	bgt.n	40799a <_malloc_r+0x31e>
  407990:	4630      	mov	r0, r6
  407992:	f000 fa15 	bl	407dc0 <__malloc_unlock>
  407996:	2400      	movs	r4, #0
  407998:	e738      	b.n	40780c <_malloc_r+0x190>
  40799a:	1962      	adds	r2, r4, r5
  40799c:	f043 0301 	orr.w	r3, r3, #1
  4079a0:	f045 0501 	orr.w	r5, r5, #1
  4079a4:	6065      	str	r5, [r4, #4]
  4079a6:	4630      	mov	r0, r6
  4079a8:	60ba      	str	r2, [r7, #8]
  4079aa:	6053      	str	r3, [r2, #4]
  4079ac:	f000 fa08 	bl	407dc0 <__malloc_unlock>
  4079b0:	3408      	adds	r4, #8
  4079b2:	4620      	mov	r0, r4
  4079b4:	b003      	add	sp, #12
  4079b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4079ba:	2b14      	cmp	r3, #20
  4079bc:	d971      	bls.n	407aa2 <_malloc_r+0x426>
  4079be:	2b54      	cmp	r3, #84	; 0x54
  4079c0:	f200 80a4 	bhi.w	407b0c <_malloc_r+0x490>
  4079c4:	0b28      	lsrs	r0, r5, #12
  4079c6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4079ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4079ce:	306e      	adds	r0, #110	; 0x6e
  4079d0:	e676      	b.n	4076c0 <_malloc_r+0x44>
  4079d2:	bf00      	nop
  4079d4:	20400474 	.word	0x20400474
  4079d8:	2040156c 	.word	0x2040156c
  4079dc:	20401570 	.word	0x20401570
  4079e0:	20401568 	.word	0x20401568
  4079e4:	20401564 	.word	0x20401564
  4079e8:	20400880 	.word	0x20400880
  4079ec:	0a5a      	lsrs	r2, r3, #9
  4079ee:	2a04      	cmp	r2, #4
  4079f0:	d95e      	bls.n	407ab0 <_malloc_r+0x434>
  4079f2:	2a14      	cmp	r2, #20
  4079f4:	f200 80b3 	bhi.w	407b5e <_malloc_r+0x4e2>
  4079f8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4079fc:	0049      	lsls	r1, r1, #1
  4079fe:	325b      	adds	r2, #91	; 0x5b
  407a00:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  407a04:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  407a08:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 407be8 <_malloc_r+0x56c>
  407a0c:	f1ac 0c08 	sub.w	ip, ip, #8
  407a10:	458c      	cmp	ip, r1
  407a12:	f000 8088 	beq.w	407b26 <_malloc_r+0x4aa>
  407a16:	684a      	ldr	r2, [r1, #4]
  407a18:	f022 0203 	bic.w	r2, r2, #3
  407a1c:	4293      	cmp	r3, r2
  407a1e:	d202      	bcs.n	407a26 <_malloc_r+0x3aa>
  407a20:	6889      	ldr	r1, [r1, #8]
  407a22:	458c      	cmp	ip, r1
  407a24:	d1f7      	bne.n	407a16 <_malloc_r+0x39a>
  407a26:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  407a2a:	687a      	ldr	r2, [r7, #4]
  407a2c:	f8c4 c00c 	str.w	ip, [r4, #12]
  407a30:	60a1      	str	r1, [r4, #8]
  407a32:	f8cc 4008 	str.w	r4, [ip, #8]
  407a36:	60cc      	str	r4, [r1, #12]
  407a38:	e688      	b.n	40774c <_malloc_r+0xd0>
  407a3a:	1963      	adds	r3, r4, r5
  407a3c:	f042 0701 	orr.w	r7, r2, #1
  407a40:	f045 0501 	orr.w	r5, r5, #1
  407a44:	6065      	str	r5, [r4, #4]
  407a46:	4630      	mov	r0, r6
  407a48:	614b      	str	r3, [r1, #20]
  407a4a:	610b      	str	r3, [r1, #16]
  407a4c:	f8c3 e00c 	str.w	lr, [r3, #12]
  407a50:	f8c3 e008 	str.w	lr, [r3, #8]
  407a54:	605f      	str	r7, [r3, #4]
  407a56:	509a      	str	r2, [r3, r2]
  407a58:	3408      	adds	r4, #8
  407a5a:	f000 f9b1 	bl	407dc0 <__malloc_unlock>
  407a5e:	e6d5      	b.n	40780c <_malloc_r+0x190>
  407a60:	684a      	ldr	r2, [r1, #4]
  407a62:	e673      	b.n	40774c <_malloc_r+0xd0>
  407a64:	f108 0801 	add.w	r8, r8, #1
  407a68:	f018 0f03 	tst.w	r8, #3
  407a6c:	f10c 0c08 	add.w	ip, ip, #8
  407a70:	f47f ae7f 	bne.w	407772 <_malloc_r+0xf6>
  407a74:	e030      	b.n	407ad8 <_malloc_r+0x45c>
  407a76:	68dc      	ldr	r4, [r3, #12]
  407a78:	42a3      	cmp	r3, r4
  407a7a:	bf08      	it	eq
  407a7c:	3002      	addeq	r0, #2
  407a7e:	f43f ae35 	beq.w	4076ec <_malloc_r+0x70>
  407a82:	e6b3      	b.n	4077ec <_malloc_r+0x170>
  407a84:	440b      	add	r3, r1
  407a86:	460c      	mov	r4, r1
  407a88:	685a      	ldr	r2, [r3, #4]
  407a8a:	68c9      	ldr	r1, [r1, #12]
  407a8c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  407a90:	f042 0201 	orr.w	r2, r2, #1
  407a94:	605a      	str	r2, [r3, #4]
  407a96:	4630      	mov	r0, r6
  407a98:	60e9      	str	r1, [r5, #12]
  407a9a:	608d      	str	r5, [r1, #8]
  407a9c:	f000 f990 	bl	407dc0 <__malloc_unlock>
  407aa0:	e6b4      	b.n	40780c <_malloc_r+0x190>
  407aa2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  407aa6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  407aaa:	ea4f 034e 	mov.w	r3, lr, lsl #1
  407aae:	e607      	b.n	4076c0 <_malloc_r+0x44>
  407ab0:	099a      	lsrs	r2, r3, #6
  407ab2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407ab6:	0049      	lsls	r1, r1, #1
  407ab8:	3238      	adds	r2, #56	; 0x38
  407aba:	e7a1      	b.n	407a00 <_malloc_r+0x384>
  407abc:	42bc      	cmp	r4, r7
  407abe:	4b4a      	ldr	r3, [pc, #296]	; (407be8 <_malloc_r+0x56c>)
  407ac0:	f43f af00 	beq.w	4078c4 <_malloc_r+0x248>
  407ac4:	689c      	ldr	r4, [r3, #8]
  407ac6:	6862      	ldr	r2, [r4, #4]
  407ac8:	f022 0203 	bic.w	r2, r2, #3
  407acc:	e75a      	b.n	407984 <_malloc_r+0x308>
  407ace:	f859 3908 	ldr.w	r3, [r9], #-8
  407ad2:	4599      	cmp	r9, r3
  407ad4:	f040 8082 	bne.w	407bdc <_malloc_r+0x560>
  407ad8:	f010 0f03 	tst.w	r0, #3
  407adc:	f100 30ff 	add.w	r0, r0, #4294967295
  407ae0:	d1f5      	bne.n	407ace <_malloc_r+0x452>
  407ae2:	687b      	ldr	r3, [r7, #4]
  407ae4:	ea23 0304 	bic.w	r3, r3, r4
  407ae8:	607b      	str	r3, [r7, #4]
  407aea:	0064      	lsls	r4, r4, #1
  407aec:	429c      	cmp	r4, r3
  407aee:	f63f aebd 	bhi.w	40786c <_malloc_r+0x1f0>
  407af2:	2c00      	cmp	r4, #0
  407af4:	f43f aeba 	beq.w	40786c <_malloc_r+0x1f0>
  407af8:	421c      	tst	r4, r3
  407afa:	4640      	mov	r0, r8
  407afc:	f47f ae35 	bne.w	40776a <_malloc_r+0xee>
  407b00:	0064      	lsls	r4, r4, #1
  407b02:	421c      	tst	r4, r3
  407b04:	f100 0004 	add.w	r0, r0, #4
  407b08:	d0fa      	beq.n	407b00 <_malloc_r+0x484>
  407b0a:	e62e      	b.n	40776a <_malloc_r+0xee>
  407b0c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407b10:	d818      	bhi.n	407b44 <_malloc_r+0x4c8>
  407b12:	0be8      	lsrs	r0, r5, #15
  407b14:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  407b18:	ea4f 034e 	mov.w	r3, lr, lsl #1
  407b1c:	3077      	adds	r0, #119	; 0x77
  407b1e:	e5cf      	b.n	4076c0 <_malloc_r+0x44>
  407b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407b24:	e6eb      	b.n	4078fe <_malloc_r+0x282>
  407b26:	2101      	movs	r1, #1
  407b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
  407b2c:	1092      	asrs	r2, r2, #2
  407b2e:	fa01 f202 	lsl.w	r2, r1, r2
  407b32:	431a      	orrs	r2, r3
  407b34:	f8c8 2004 	str.w	r2, [r8, #4]
  407b38:	4661      	mov	r1, ip
  407b3a:	e777      	b.n	407a2c <_malloc_r+0x3b0>
  407b3c:	2301      	movs	r3, #1
  407b3e:	f8cb 3004 	str.w	r3, [fp, #4]
  407b42:	e725      	b.n	407990 <_malloc_r+0x314>
  407b44:	f240 5254 	movw	r2, #1364	; 0x554
  407b48:	4293      	cmp	r3, r2
  407b4a:	d820      	bhi.n	407b8e <_malloc_r+0x512>
  407b4c:	0ca8      	lsrs	r0, r5, #18
  407b4e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  407b52:	ea4f 034e 	mov.w	r3, lr, lsl #1
  407b56:	307c      	adds	r0, #124	; 0x7c
  407b58:	e5b2      	b.n	4076c0 <_malloc_r+0x44>
  407b5a:	3210      	adds	r2, #16
  407b5c:	e6a4      	b.n	4078a8 <_malloc_r+0x22c>
  407b5e:	2a54      	cmp	r2, #84	; 0x54
  407b60:	d826      	bhi.n	407bb0 <_malloc_r+0x534>
  407b62:	0b1a      	lsrs	r2, r3, #12
  407b64:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  407b68:	0049      	lsls	r1, r1, #1
  407b6a:	326e      	adds	r2, #110	; 0x6e
  407b6c:	e748      	b.n	407a00 <_malloc_r+0x384>
  407b6e:	68bc      	ldr	r4, [r7, #8]
  407b70:	6862      	ldr	r2, [r4, #4]
  407b72:	f022 0203 	bic.w	r2, r2, #3
  407b76:	e705      	b.n	407984 <_malloc_r+0x308>
  407b78:	f3ca 000b 	ubfx	r0, sl, #0, #12
  407b7c:	2800      	cmp	r0, #0
  407b7e:	f47f aea8 	bne.w	4078d2 <_malloc_r+0x256>
  407b82:	4442      	add	r2, r8
  407b84:	68bb      	ldr	r3, [r7, #8]
  407b86:	f042 0201 	orr.w	r2, r2, #1
  407b8a:	605a      	str	r2, [r3, #4]
  407b8c:	e6ec      	b.n	407968 <_malloc_r+0x2ec>
  407b8e:	23fe      	movs	r3, #254	; 0xfe
  407b90:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  407b94:	207e      	movs	r0, #126	; 0x7e
  407b96:	e593      	b.n	4076c0 <_malloc_r+0x44>
  407b98:	2201      	movs	r2, #1
  407b9a:	f04f 0900 	mov.w	r9, #0
  407b9e:	e6c1      	b.n	407924 <_malloc_r+0x2a8>
  407ba0:	f104 0108 	add.w	r1, r4, #8
  407ba4:	4630      	mov	r0, r6
  407ba6:	f003 ffed 	bl	40bb84 <_free_r>
  407baa:	f8d9 1000 	ldr.w	r1, [r9]
  407bae:	e6db      	b.n	407968 <_malloc_r+0x2ec>
  407bb0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407bb4:	d805      	bhi.n	407bc2 <_malloc_r+0x546>
  407bb6:	0bda      	lsrs	r2, r3, #15
  407bb8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407bbc:	0049      	lsls	r1, r1, #1
  407bbe:	3277      	adds	r2, #119	; 0x77
  407bc0:	e71e      	b.n	407a00 <_malloc_r+0x384>
  407bc2:	f240 5154 	movw	r1, #1364	; 0x554
  407bc6:	428a      	cmp	r2, r1
  407bc8:	d805      	bhi.n	407bd6 <_malloc_r+0x55a>
  407bca:	0c9a      	lsrs	r2, r3, #18
  407bcc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407bd0:	0049      	lsls	r1, r1, #1
  407bd2:	327c      	adds	r2, #124	; 0x7c
  407bd4:	e714      	b.n	407a00 <_malloc_r+0x384>
  407bd6:	21fe      	movs	r1, #254	; 0xfe
  407bd8:	227e      	movs	r2, #126	; 0x7e
  407bda:	e711      	b.n	407a00 <_malloc_r+0x384>
  407bdc:	687b      	ldr	r3, [r7, #4]
  407bde:	e784      	b.n	407aea <_malloc_r+0x46e>
  407be0:	08e8      	lsrs	r0, r5, #3
  407be2:	1c43      	adds	r3, r0, #1
  407be4:	005b      	lsls	r3, r3, #1
  407be6:	e5f8      	b.n	4077da <_malloc_r+0x15e>
  407be8:	20400474 	.word	0x20400474

00407bec <memcpy>:
  407bec:	4684      	mov	ip, r0
  407bee:	ea41 0300 	orr.w	r3, r1, r0
  407bf2:	f013 0303 	ands.w	r3, r3, #3
  407bf6:	d16d      	bne.n	407cd4 <memcpy+0xe8>
  407bf8:	3a40      	subs	r2, #64	; 0x40
  407bfa:	d341      	bcc.n	407c80 <memcpy+0x94>
  407bfc:	f851 3b04 	ldr.w	r3, [r1], #4
  407c00:	f840 3b04 	str.w	r3, [r0], #4
  407c04:	f851 3b04 	ldr.w	r3, [r1], #4
  407c08:	f840 3b04 	str.w	r3, [r0], #4
  407c0c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c10:	f840 3b04 	str.w	r3, [r0], #4
  407c14:	f851 3b04 	ldr.w	r3, [r1], #4
  407c18:	f840 3b04 	str.w	r3, [r0], #4
  407c1c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c20:	f840 3b04 	str.w	r3, [r0], #4
  407c24:	f851 3b04 	ldr.w	r3, [r1], #4
  407c28:	f840 3b04 	str.w	r3, [r0], #4
  407c2c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c30:	f840 3b04 	str.w	r3, [r0], #4
  407c34:	f851 3b04 	ldr.w	r3, [r1], #4
  407c38:	f840 3b04 	str.w	r3, [r0], #4
  407c3c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c40:	f840 3b04 	str.w	r3, [r0], #4
  407c44:	f851 3b04 	ldr.w	r3, [r1], #4
  407c48:	f840 3b04 	str.w	r3, [r0], #4
  407c4c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c50:	f840 3b04 	str.w	r3, [r0], #4
  407c54:	f851 3b04 	ldr.w	r3, [r1], #4
  407c58:	f840 3b04 	str.w	r3, [r0], #4
  407c5c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c60:	f840 3b04 	str.w	r3, [r0], #4
  407c64:	f851 3b04 	ldr.w	r3, [r1], #4
  407c68:	f840 3b04 	str.w	r3, [r0], #4
  407c6c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c70:	f840 3b04 	str.w	r3, [r0], #4
  407c74:	f851 3b04 	ldr.w	r3, [r1], #4
  407c78:	f840 3b04 	str.w	r3, [r0], #4
  407c7c:	3a40      	subs	r2, #64	; 0x40
  407c7e:	d2bd      	bcs.n	407bfc <memcpy+0x10>
  407c80:	3230      	adds	r2, #48	; 0x30
  407c82:	d311      	bcc.n	407ca8 <memcpy+0xbc>
  407c84:	f851 3b04 	ldr.w	r3, [r1], #4
  407c88:	f840 3b04 	str.w	r3, [r0], #4
  407c8c:	f851 3b04 	ldr.w	r3, [r1], #4
  407c90:	f840 3b04 	str.w	r3, [r0], #4
  407c94:	f851 3b04 	ldr.w	r3, [r1], #4
  407c98:	f840 3b04 	str.w	r3, [r0], #4
  407c9c:	f851 3b04 	ldr.w	r3, [r1], #4
  407ca0:	f840 3b04 	str.w	r3, [r0], #4
  407ca4:	3a10      	subs	r2, #16
  407ca6:	d2ed      	bcs.n	407c84 <memcpy+0x98>
  407ca8:	320c      	adds	r2, #12
  407caa:	d305      	bcc.n	407cb8 <memcpy+0xcc>
  407cac:	f851 3b04 	ldr.w	r3, [r1], #4
  407cb0:	f840 3b04 	str.w	r3, [r0], #4
  407cb4:	3a04      	subs	r2, #4
  407cb6:	d2f9      	bcs.n	407cac <memcpy+0xc0>
  407cb8:	3204      	adds	r2, #4
  407cba:	d008      	beq.n	407cce <memcpy+0xe2>
  407cbc:	07d2      	lsls	r2, r2, #31
  407cbe:	bf1c      	itt	ne
  407cc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407cc4:	f800 3b01 	strbne.w	r3, [r0], #1
  407cc8:	d301      	bcc.n	407cce <memcpy+0xe2>
  407cca:	880b      	ldrh	r3, [r1, #0]
  407ccc:	8003      	strh	r3, [r0, #0]
  407cce:	4660      	mov	r0, ip
  407cd0:	4770      	bx	lr
  407cd2:	bf00      	nop
  407cd4:	2a08      	cmp	r2, #8
  407cd6:	d313      	bcc.n	407d00 <memcpy+0x114>
  407cd8:	078b      	lsls	r3, r1, #30
  407cda:	d08d      	beq.n	407bf8 <memcpy+0xc>
  407cdc:	f010 0303 	ands.w	r3, r0, #3
  407ce0:	d08a      	beq.n	407bf8 <memcpy+0xc>
  407ce2:	f1c3 0304 	rsb	r3, r3, #4
  407ce6:	1ad2      	subs	r2, r2, r3
  407ce8:	07db      	lsls	r3, r3, #31
  407cea:	bf1c      	itt	ne
  407cec:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407cf0:	f800 3b01 	strbne.w	r3, [r0], #1
  407cf4:	d380      	bcc.n	407bf8 <memcpy+0xc>
  407cf6:	f831 3b02 	ldrh.w	r3, [r1], #2
  407cfa:	f820 3b02 	strh.w	r3, [r0], #2
  407cfe:	e77b      	b.n	407bf8 <memcpy+0xc>
  407d00:	3a04      	subs	r2, #4
  407d02:	d3d9      	bcc.n	407cb8 <memcpy+0xcc>
  407d04:	3a01      	subs	r2, #1
  407d06:	f811 3b01 	ldrb.w	r3, [r1], #1
  407d0a:	f800 3b01 	strb.w	r3, [r0], #1
  407d0e:	d2f9      	bcs.n	407d04 <memcpy+0x118>
  407d10:	780b      	ldrb	r3, [r1, #0]
  407d12:	7003      	strb	r3, [r0, #0]
  407d14:	784b      	ldrb	r3, [r1, #1]
  407d16:	7043      	strb	r3, [r0, #1]
  407d18:	788b      	ldrb	r3, [r1, #2]
  407d1a:	7083      	strb	r3, [r0, #2]
  407d1c:	4660      	mov	r0, ip
  407d1e:	4770      	bx	lr

00407d20 <memset>:
  407d20:	b470      	push	{r4, r5, r6}
  407d22:	0784      	lsls	r4, r0, #30
  407d24:	d046      	beq.n	407db4 <memset+0x94>
  407d26:	1e54      	subs	r4, r2, #1
  407d28:	2a00      	cmp	r2, #0
  407d2a:	d041      	beq.n	407db0 <memset+0x90>
  407d2c:	b2cd      	uxtb	r5, r1
  407d2e:	4603      	mov	r3, r0
  407d30:	e002      	b.n	407d38 <memset+0x18>
  407d32:	1e62      	subs	r2, r4, #1
  407d34:	b3e4      	cbz	r4, 407db0 <memset+0x90>
  407d36:	4614      	mov	r4, r2
  407d38:	f803 5b01 	strb.w	r5, [r3], #1
  407d3c:	079a      	lsls	r2, r3, #30
  407d3e:	d1f8      	bne.n	407d32 <memset+0x12>
  407d40:	2c03      	cmp	r4, #3
  407d42:	d92e      	bls.n	407da2 <memset+0x82>
  407d44:	b2cd      	uxtb	r5, r1
  407d46:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407d4a:	2c0f      	cmp	r4, #15
  407d4c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407d50:	d919      	bls.n	407d86 <memset+0x66>
  407d52:	f103 0210 	add.w	r2, r3, #16
  407d56:	4626      	mov	r6, r4
  407d58:	3e10      	subs	r6, #16
  407d5a:	2e0f      	cmp	r6, #15
  407d5c:	f842 5c10 	str.w	r5, [r2, #-16]
  407d60:	f842 5c0c 	str.w	r5, [r2, #-12]
  407d64:	f842 5c08 	str.w	r5, [r2, #-8]
  407d68:	f842 5c04 	str.w	r5, [r2, #-4]
  407d6c:	f102 0210 	add.w	r2, r2, #16
  407d70:	d8f2      	bhi.n	407d58 <memset+0x38>
  407d72:	f1a4 0210 	sub.w	r2, r4, #16
  407d76:	f022 020f 	bic.w	r2, r2, #15
  407d7a:	f004 040f 	and.w	r4, r4, #15
  407d7e:	3210      	adds	r2, #16
  407d80:	2c03      	cmp	r4, #3
  407d82:	4413      	add	r3, r2
  407d84:	d90d      	bls.n	407da2 <memset+0x82>
  407d86:	461e      	mov	r6, r3
  407d88:	4622      	mov	r2, r4
  407d8a:	3a04      	subs	r2, #4
  407d8c:	2a03      	cmp	r2, #3
  407d8e:	f846 5b04 	str.w	r5, [r6], #4
  407d92:	d8fa      	bhi.n	407d8a <memset+0x6a>
  407d94:	1f22      	subs	r2, r4, #4
  407d96:	f022 0203 	bic.w	r2, r2, #3
  407d9a:	3204      	adds	r2, #4
  407d9c:	4413      	add	r3, r2
  407d9e:	f004 0403 	and.w	r4, r4, #3
  407da2:	b12c      	cbz	r4, 407db0 <memset+0x90>
  407da4:	b2c9      	uxtb	r1, r1
  407da6:	441c      	add	r4, r3
  407da8:	f803 1b01 	strb.w	r1, [r3], #1
  407dac:	42a3      	cmp	r3, r4
  407dae:	d1fb      	bne.n	407da8 <memset+0x88>
  407db0:	bc70      	pop	{r4, r5, r6}
  407db2:	4770      	bx	lr
  407db4:	4614      	mov	r4, r2
  407db6:	4603      	mov	r3, r0
  407db8:	e7c2      	b.n	407d40 <memset+0x20>
  407dba:	bf00      	nop

00407dbc <__malloc_lock>:
  407dbc:	4770      	bx	lr
  407dbe:	bf00      	nop

00407dc0 <__malloc_unlock>:
  407dc0:	4770      	bx	lr
  407dc2:	bf00      	nop

00407dc4 <_sbrk_r>:
  407dc4:	b538      	push	{r3, r4, r5, lr}
  407dc6:	4c07      	ldr	r4, [pc, #28]	; (407de4 <_sbrk_r+0x20>)
  407dc8:	2300      	movs	r3, #0
  407dca:	4605      	mov	r5, r0
  407dcc:	4608      	mov	r0, r1
  407dce:	6023      	str	r3, [r4, #0]
  407dd0:	f7fe feac 	bl	406b2c <_sbrk>
  407dd4:	1c43      	adds	r3, r0, #1
  407dd6:	d000      	beq.n	407dda <_sbrk_r+0x16>
  407dd8:	bd38      	pop	{r3, r4, r5, pc}
  407dda:	6823      	ldr	r3, [r4, #0]
  407ddc:	2b00      	cmp	r3, #0
  407dde:	d0fb      	beq.n	407dd8 <_sbrk_r+0x14>
  407de0:	602b      	str	r3, [r5, #0]
  407de2:	bd38      	pop	{r3, r4, r5, pc}
  407de4:	20402f90 	.word	0x20402f90

00407de8 <setbuf>:
  407de8:	2900      	cmp	r1, #0
  407dea:	bf0c      	ite	eq
  407dec:	2202      	moveq	r2, #2
  407dee:	2200      	movne	r2, #0
  407df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407df4:	f000 b800 	b.w	407df8 <setvbuf>

00407df8 <setvbuf>:
  407df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407dfc:	4c51      	ldr	r4, [pc, #324]	; (407f44 <setvbuf+0x14c>)
  407dfe:	6825      	ldr	r5, [r4, #0]
  407e00:	b083      	sub	sp, #12
  407e02:	4604      	mov	r4, r0
  407e04:	460f      	mov	r7, r1
  407e06:	4690      	mov	r8, r2
  407e08:	461e      	mov	r6, r3
  407e0a:	b115      	cbz	r5, 407e12 <setvbuf+0x1a>
  407e0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407e0e:	2b00      	cmp	r3, #0
  407e10:	d079      	beq.n	407f06 <setvbuf+0x10e>
  407e12:	f1b8 0f02 	cmp.w	r8, #2
  407e16:	d004      	beq.n	407e22 <setvbuf+0x2a>
  407e18:	f1b8 0f01 	cmp.w	r8, #1
  407e1c:	d87f      	bhi.n	407f1e <setvbuf+0x126>
  407e1e:	2e00      	cmp	r6, #0
  407e20:	db7d      	blt.n	407f1e <setvbuf+0x126>
  407e22:	4621      	mov	r1, r4
  407e24:	4628      	mov	r0, r5
  407e26:	f003 fd4f 	bl	40b8c8 <_fflush_r>
  407e2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407e2c:	b141      	cbz	r1, 407e40 <setvbuf+0x48>
  407e2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407e32:	4299      	cmp	r1, r3
  407e34:	d002      	beq.n	407e3c <setvbuf+0x44>
  407e36:	4628      	mov	r0, r5
  407e38:	f003 fea4 	bl	40bb84 <_free_r>
  407e3c:	2300      	movs	r3, #0
  407e3e:	6323      	str	r3, [r4, #48]	; 0x30
  407e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e44:	2200      	movs	r2, #0
  407e46:	61a2      	str	r2, [r4, #24]
  407e48:	6062      	str	r2, [r4, #4]
  407e4a:	061a      	lsls	r2, r3, #24
  407e4c:	d454      	bmi.n	407ef8 <setvbuf+0x100>
  407e4e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407e52:	f023 0303 	bic.w	r3, r3, #3
  407e56:	f1b8 0f02 	cmp.w	r8, #2
  407e5a:	81a3      	strh	r3, [r4, #12]
  407e5c:	d039      	beq.n	407ed2 <setvbuf+0xda>
  407e5e:	ab01      	add	r3, sp, #4
  407e60:	466a      	mov	r2, sp
  407e62:	4621      	mov	r1, r4
  407e64:	4628      	mov	r0, r5
  407e66:	f004 f92f 	bl	40c0c8 <__swhatbuf_r>
  407e6a:	89a3      	ldrh	r3, [r4, #12]
  407e6c:	4318      	orrs	r0, r3
  407e6e:	81a0      	strh	r0, [r4, #12]
  407e70:	b326      	cbz	r6, 407ebc <setvbuf+0xc4>
  407e72:	b327      	cbz	r7, 407ebe <setvbuf+0xc6>
  407e74:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407e76:	2b00      	cmp	r3, #0
  407e78:	d04d      	beq.n	407f16 <setvbuf+0x11e>
  407e7a:	9b00      	ldr	r3, [sp, #0]
  407e7c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  407e80:	6027      	str	r7, [r4, #0]
  407e82:	429e      	cmp	r6, r3
  407e84:	bf1c      	itt	ne
  407e86:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  407e8a:	81a0      	strhne	r0, [r4, #12]
  407e8c:	f1b8 0f01 	cmp.w	r8, #1
  407e90:	bf08      	it	eq
  407e92:	f040 0001 	orreq.w	r0, r0, #1
  407e96:	b283      	uxth	r3, r0
  407e98:	bf08      	it	eq
  407e9a:	81a0      	strheq	r0, [r4, #12]
  407e9c:	f003 0008 	and.w	r0, r3, #8
  407ea0:	b280      	uxth	r0, r0
  407ea2:	6127      	str	r7, [r4, #16]
  407ea4:	6166      	str	r6, [r4, #20]
  407ea6:	b318      	cbz	r0, 407ef0 <setvbuf+0xf8>
  407ea8:	f013 0001 	ands.w	r0, r3, #1
  407eac:	d02f      	beq.n	407f0e <setvbuf+0x116>
  407eae:	2000      	movs	r0, #0
  407eb0:	4276      	negs	r6, r6
  407eb2:	61a6      	str	r6, [r4, #24]
  407eb4:	60a0      	str	r0, [r4, #8]
  407eb6:	b003      	add	sp, #12
  407eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407ebc:	9e00      	ldr	r6, [sp, #0]
  407ebe:	4630      	mov	r0, r6
  407ec0:	f7ff fbd4 	bl	40766c <malloc>
  407ec4:	4607      	mov	r7, r0
  407ec6:	b368      	cbz	r0, 407f24 <setvbuf+0x12c>
  407ec8:	89a3      	ldrh	r3, [r4, #12]
  407eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407ece:	81a3      	strh	r3, [r4, #12]
  407ed0:	e7d0      	b.n	407e74 <setvbuf+0x7c>
  407ed2:	2000      	movs	r0, #0
  407ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407ed8:	f043 0302 	orr.w	r3, r3, #2
  407edc:	2500      	movs	r5, #0
  407ede:	2101      	movs	r1, #1
  407ee0:	81a3      	strh	r3, [r4, #12]
  407ee2:	60a5      	str	r5, [r4, #8]
  407ee4:	6022      	str	r2, [r4, #0]
  407ee6:	6122      	str	r2, [r4, #16]
  407ee8:	6161      	str	r1, [r4, #20]
  407eea:	b003      	add	sp, #12
  407eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407ef0:	60a0      	str	r0, [r4, #8]
  407ef2:	b003      	add	sp, #12
  407ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407ef8:	6921      	ldr	r1, [r4, #16]
  407efa:	4628      	mov	r0, r5
  407efc:	f003 fe42 	bl	40bb84 <_free_r>
  407f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f04:	e7a3      	b.n	407e4e <setvbuf+0x56>
  407f06:	4628      	mov	r0, r5
  407f08:	f003 fd72 	bl	40b9f0 <__sinit>
  407f0c:	e781      	b.n	407e12 <setvbuf+0x1a>
  407f0e:	60a6      	str	r6, [r4, #8]
  407f10:	b003      	add	sp, #12
  407f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407f16:	4628      	mov	r0, r5
  407f18:	f003 fd6a 	bl	40b9f0 <__sinit>
  407f1c:	e7ad      	b.n	407e7a <setvbuf+0x82>
  407f1e:	f04f 30ff 	mov.w	r0, #4294967295
  407f22:	e7e2      	b.n	407eea <setvbuf+0xf2>
  407f24:	f8dd 9000 	ldr.w	r9, [sp]
  407f28:	45b1      	cmp	r9, r6
  407f2a:	d006      	beq.n	407f3a <setvbuf+0x142>
  407f2c:	4648      	mov	r0, r9
  407f2e:	f7ff fb9d 	bl	40766c <malloc>
  407f32:	4607      	mov	r7, r0
  407f34:	b108      	cbz	r0, 407f3a <setvbuf+0x142>
  407f36:	464e      	mov	r6, r9
  407f38:	e7c6      	b.n	407ec8 <setvbuf+0xd0>
  407f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f3e:	f04f 30ff 	mov.w	r0, #4294967295
  407f42:	e7c7      	b.n	407ed4 <setvbuf+0xdc>
  407f44:	20400470 	.word	0x20400470

00407f48 <sprintf>:
  407f48:	b40e      	push	{r1, r2, r3}
  407f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
  407f4c:	b09c      	sub	sp, #112	; 0x70
  407f4e:	ab21      	add	r3, sp, #132	; 0x84
  407f50:	490f      	ldr	r1, [pc, #60]	; (407f90 <sprintf+0x48>)
  407f52:	f853 2b04 	ldr.w	r2, [r3], #4
  407f56:	9301      	str	r3, [sp, #4]
  407f58:	4605      	mov	r5, r0
  407f5a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  407f5e:	6808      	ldr	r0, [r1, #0]
  407f60:	9502      	str	r5, [sp, #8]
  407f62:	f44f 7702 	mov.w	r7, #520	; 0x208
  407f66:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407f6a:	a902      	add	r1, sp, #8
  407f6c:	9506      	str	r5, [sp, #24]
  407f6e:	f8ad 7014 	strh.w	r7, [sp, #20]
  407f72:	9404      	str	r4, [sp, #16]
  407f74:	9407      	str	r4, [sp, #28]
  407f76:	f8ad 6016 	strh.w	r6, [sp, #22]
  407f7a:	f000 f90f 	bl	40819c <_svfprintf_r>
  407f7e:	9b02      	ldr	r3, [sp, #8]
  407f80:	2200      	movs	r2, #0
  407f82:	701a      	strb	r2, [r3, #0]
  407f84:	b01c      	add	sp, #112	; 0x70
  407f86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407f8a:	b003      	add	sp, #12
  407f8c:	4770      	bx	lr
  407f8e:	bf00      	nop
  407f90:	20400470 	.word	0x20400470

00407f94 <strcat>:
  407f94:	0783      	lsls	r3, r0, #30
  407f96:	b510      	push	{r4, lr}
  407f98:	4604      	mov	r4, r0
  407f9a:	d110      	bne.n	407fbe <strcat+0x2a>
  407f9c:	6802      	ldr	r2, [r0, #0]
  407f9e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  407fa2:	ea23 0302 	bic.w	r3, r3, r2
  407fa6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407faa:	d108      	bne.n	407fbe <strcat+0x2a>
  407fac:	f850 2f04 	ldr.w	r2, [r0, #4]!
  407fb0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  407fb4:	ea23 0302 	bic.w	r3, r3, r2
  407fb8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407fbc:	d0f6      	beq.n	407fac <strcat+0x18>
  407fbe:	7803      	ldrb	r3, [r0, #0]
  407fc0:	b11b      	cbz	r3, 407fca <strcat+0x36>
  407fc2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  407fc6:	2b00      	cmp	r3, #0
  407fc8:	d1fb      	bne.n	407fc2 <strcat+0x2e>
  407fca:	f000 f803 	bl	407fd4 <strcpy>
  407fce:	4620      	mov	r0, r4
  407fd0:	bd10      	pop	{r4, pc}
  407fd2:	bf00      	nop

00407fd4 <strcpy>:
  407fd4:	ea80 0201 	eor.w	r2, r0, r1
  407fd8:	4684      	mov	ip, r0
  407fda:	f012 0f03 	tst.w	r2, #3
  407fde:	d14f      	bne.n	408080 <strcpy+0xac>
  407fe0:	f011 0f03 	tst.w	r1, #3
  407fe4:	d132      	bne.n	40804c <strcpy+0x78>
  407fe6:	f84d 4d04 	str.w	r4, [sp, #-4]!
  407fea:	f011 0f04 	tst.w	r1, #4
  407fee:	f851 3b04 	ldr.w	r3, [r1], #4
  407ff2:	d00b      	beq.n	40800c <strcpy+0x38>
  407ff4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  407ff8:	439a      	bics	r2, r3
  407ffa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407ffe:	bf04      	itt	eq
  408000:	f84c 3b04 	streq.w	r3, [ip], #4
  408004:	f851 3b04 	ldreq.w	r3, [r1], #4
  408008:	d116      	bne.n	408038 <strcpy+0x64>
  40800a:	bf00      	nop
  40800c:	f851 4b04 	ldr.w	r4, [r1], #4
  408010:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  408014:	439a      	bics	r2, r3
  408016:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40801a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40801e:	d10b      	bne.n	408038 <strcpy+0x64>
  408020:	f84c 3b04 	str.w	r3, [ip], #4
  408024:	43a2      	bics	r2, r4
  408026:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40802a:	bf04      	itt	eq
  40802c:	f851 3b04 	ldreq.w	r3, [r1], #4
  408030:	f84c 4b04 	streq.w	r4, [ip], #4
  408034:	d0ea      	beq.n	40800c <strcpy+0x38>
  408036:	4623      	mov	r3, r4
  408038:	f80c 3b01 	strb.w	r3, [ip], #1
  40803c:	f013 0fff 	tst.w	r3, #255	; 0xff
  408040:	ea4f 2333 	mov.w	r3, r3, ror #8
  408044:	d1f8      	bne.n	408038 <strcpy+0x64>
  408046:	f85d 4b04 	ldr.w	r4, [sp], #4
  40804a:	4770      	bx	lr
  40804c:	f011 0f01 	tst.w	r1, #1
  408050:	d006      	beq.n	408060 <strcpy+0x8c>
  408052:	f811 2b01 	ldrb.w	r2, [r1], #1
  408056:	f80c 2b01 	strb.w	r2, [ip], #1
  40805a:	2a00      	cmp	r2, #0
  40805c:	bf08      	it	eq
  40805e:	4770      	bxeq	lr
  408060:	f011 0f02 	tst.w	r1, #2
  408064:	d0bf      	beq.n	407fe6 <strcpy+0x12>
  408066:	f831 2b02 	ldrh.w	r2, [r1], #2
  40806a:	f012 0fff 	tst.w	r2, #255	; 0xff
  40806e:	bf16      	itet	ne
  408070:	f82c 2b02 	strhne.w	r2, [ip], #2
  408074:	f88c 2000 	strbeq.w	r2, [ip]
  408078:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40807c:	d1b3      	bne.n	407fe6 <strcpy+0x12>
  40807e:	4770      	bx	lr
  408080:	f811 2b01 	ldrb.w	r2, [r1], #1
  408084:	f80c 2b01 	strb.w	r2, [ip], #1
  408088:	2a00      	cmp	r2, #0
  40808a:	d1f9      	bne.n	408080 <strcpy+0xac>
  40808c:	4770      	bx	lr
  40808e:	bf00      	nop
	...

004080c0 <strlen>:
  4080c0:	f890 f000 	pld	[r0]
  4080c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4080c8:	f020 0107 	bic.w	r1, r0, #7
  4080cc:	f06f 0c00 	mvn.w	ip, #0
  4080d0:	f010 0407 	ands.w	r4, r0, #7
  4080d4:	f891 f020 	pld	[r1, #32]
  4080d8:	f040 8049 	bne.w	40816e <strlen+0xae>
  4080dc:	f04f 0400 	mov.w	r4, #0
  4080e0:	f06f 0007 	mvn.w	r0, #7
  4080e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4080e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4080ec:	f100 0008 	add.w	r0, r0, #8
  4080f0:	fa82 f24c 	uadd8	r2, r2, ip
  4080f4:	faa4 f28c 	sel	r2, r4, ip
  4080f8:	fa83 f34c 	uadd8	r3, r3, ip
  4080fc:	faa2 f38c 	sel	r3, r2, ip
  408100:	bb4b      	cbnz	r3, 408156 <strlen+0x96>
  408102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  408106:	fa82 f24c 	uadd8	r2, r2, ip
  40810a:	f100 0008 	add.w	r0, r0, #8
  40810e:	faa4 f28c 	sel	r2, r4, ip
  408112:	fa83 f34c 	uadd8	r3, r3, ip
  408116:	faa2 f38c 	sel	r3, r2, ip
  40811a:	b9e3      	cbnz	r3, 408156 <strlen+0x96>
  40811c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  408120:	fa82 f24c 	uadd8	r2, r2, ip
  408124:	f100 0008 	add.w	r0, r0, #8
  408128:	faa4 f28c 	sel	r2, r4, ip
  40812c:	fa83 f34c 	uadd8	r3, r3, ip
  408130:	faa2 f38c 	sel	r3, r2, ip
  408134:	b97b      	cbnz	r3, 408156 <strlen+0x96>
  408136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40813a:	f101 0120 	add.w	r1, r1, #32
  40813e:	fa82 f24c 	uadd8	r2, r2, ip
  408142:	f100 0008 	add.w	r0, r0, #8
  408146:	faa4 f28c 	sel	r2, r4, ip
  40814a:	fa83 f34c 	uadd8	r3, r3, ip
  40814e:	faa2 f38c 	sel	r3, r2, ip
  408152:	2b00      	cmp	r3, #0
  408154:	d0c6      	beq.n	4080e4 <strlen+0x24>
  408156:	2a00      	cmp	r2, #0
  408158:	bf04      	itt	eq
  40815a:	3004      	addeq	r0, #4
  40815c:	461a      	moveq	r2, r3
  40815e:	ba12      	rev	r2, r2
  408160:	fab2 f282 	clz	r2, r2
  408164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  408168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40816c:	4770      	bx	lr
  40816e:	e9d1 2300 	ldrd	r2, r3, [r1]
  408172:	f004 0503 	and.w	r5, r4, #3
  408176:	f1c4 0000 	rsb	r0, r4, #0
  40817a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40817e:	f014 0f04 	tst.w	r4, #4
  408182:	f891 f040 	pld	[r1, #64]	; 0x40
  408186:	fa0c f505 	lsl.w	r5, ip, r5
  40818a:	ea62 0205 	orn	r2, r2, r5
  40818e:	bf1c      	itt	ne
  408190:	ea63 0305 	ornne	r3, r3, r5
  408194:	4662      	movne	r2, ip
  408196:	f04f 0400 	mov.w	r4, #0
  40819a:	e7a9      	b.n	4080f0 <strlen+0x30>

0040819c <_svfprintf_r>:
  40819c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4081a0:	b0c1      	sub	sp, #260	; 0x104
  4081a2:	460c      	mov	r4, r1
  4081a4:	9109      	str	r1, [sp, #36]	; 0x24
  4081a6:	4615      	mov	r5, r2
  4081a8:	930e      	str	r3, [sp, #56]	; 0x38
  4081aa:	900a      	str	r0, [sp, #40]	; 0x28
  4081ac:	f003 ff88 	bl	40c0c0 <_localeconv_r>
  4081b0:	6803      	ldr	r3, [r0, #0]
  4081b2:	9317      	str	r3, [sp, #92]	; 0x5c
  4081b4:	4618      	mov	r0, r3
  4081b6:	f7ff ff83 	bl	4080c0 <strlen>
  4081ba:	89a3      	ldrh	r3, [r4, #12]
  4081bc:	9016      	str	r0, [sp, #88]	; 0x58
  4081be:	061e      	lsls	r6, r3, #24
  4081c0:	d503      	bpl.n	4081ca <_svfprintf_r+0x2e>
  4081c2:	6923      	ldr	r3, [r4, #16]
  4081c4:	2b00      	cmp	r3, #0
  4081c6:	f001 8119 	beq.w	4093fc <_svfprintf_r+0x1260>
  4081ca:	2300      	movs	r3, #0
  4081cc:	461a      	mov	r2, r3
  4081ce:	9312      	str	r3, [sp, #72]	; 0x48
  4081d0:	9325      	str	r3, [sp, #148]	; 0x94
  4081d2:	9324      	str	r3, [sp, #144]	; 0x90
  4081d4:	9319      	str	r3, [sp, #100]	; 0x64
  4081d6:	930b      	str	r3, [sp, #44]	; 0x2c
  4081d8:	f8df a464 	ldr.w	sl, [pc, #1124]	; 408640 <_svfprintf_r+0x4a4>
  4081dc:	9214      	str	r2, [sp, #80]	; 0x50
  4081de:	ab30      	add	r3, sp, #192	; 0xc0
  4081e0:	9323      	str	r3, [sp, #140]	; 0x8c
  4081e2:	4699      	mov	r9, r3
  4081e4:	9215      	str	r2, [sp, #84]	; 0x54
  4081e6:	46a8      	mov	r8, r5
  4081e8:	f898 3000 	ldrb.w	r3, [r8]
  4081ec:	4644      	mov	r4, r8
  4081ee:	b1eb      	cbz	r3, 40822c <_svfprintf_r+0x90>
  4081f0:	2b25      	cmp	r3, #37	; 0x25
  4081f2:	d102      	bne.n	4081fa <_svfprintf_r+0x5e>
  4081f4:	e01a      	b.n	40822c <_svfprintf_r+0x90>
  4081f6:	2b25      	cmp	r3, #37	; 0x25
  4081f8:	d003      	beq.n	408202 <_svfprintf_r+0x66>
  4081fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4081fe:	2b00      	cmp	r3, #0
  408200:	d1f9      	bne.n	4081f6 <_svfprintf_r+0x5a>
  408202:	ebc8 0504 	rsb	r5, r8, r4
  408206:	b18d      	cbz	r5, 40822c <_svfprintf_r+0x90>
  408208:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40820a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40820c:	f8c9 8000 	str.w	r8, [r9]
  408210:	3301      	adds	r3, #1
  408212:	442a      	add	r2, r5
  408214:	2b07      	cmp	r3, #7
  408216:	f8c9 5004 	str.w	r5, [r9, #4]
  40821a:	9225      	str	r2, [sp, #148]	; 0x94
  40821c:	9324      	str	r3, [sp, #144]	; 0x90
  40821e:	f300 80a6 	bgt.w	40836e <_svfprintf_r+0x1d2>
  408222:	f109 0908 	add.w	r9, r9, #8
  408226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408228:	442b      	add	r3, r5
  40822a:	930b      	str	r3, [sp, #44]	; 0x2c
  40822c:	7823      	ldrb	r3, [r4, #0]
  40822e:	2b00      	cmp	r3, #0
  408230:	f000 80a6 	beq.w	408380 <_svfprintf_r+0x1e4>
  408234:	2300      	movs	r3, #0
  408236:	461a      	mov	r2, r3
  408238:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40823c:	4619      	mov	r1, r3
  40823e:	930c      	str	r3, [sp, #48]	; 0x30
  408240:	9307      	str	r3, [sp, #28]
  408242:	f04f 3bff 	mov.w	fp, #4294967295
  408246:	7863      	ldrb	r3, [r4, #1]
  408248:	f104 0801 	add.w	r8, r4, #1
  40824c:	465d      	mov	r5, fp
  40824e:	f108 0801 	add.w	r8, r8, #1
  408252:	f1a3 0020 	sub.w	r0, r3, #32
  408256:	2858      	cmp	r0, #88	; 0x58
  408258:	f200 8425 	bhi.w	408aa6 <_svfprintf_r+0x90a>
  40825c:	e8df f010 	tbh	[pc, r0, lsl #1]
  408260:	04230388 	.word	0x04230388
  408264:	03900423 	.word	0x03900423
  408268:	04230423 	.word	0x04230423
  40826c:	04230423 	.word	0x04230423
  408270:	04230423 	.word	0x04230423
  408274:	03a50397 	.word	0x03a50397
  408278:	005d0423 	.word	0x005d0423
  40827c:	042300e2 	.word	0x042300e2
  408280:	010500fe 	.word	0x010500fe
  408284:	01050105 	.word	0x01050105
  408288:	01050105 	.word	0x01050105
  40828c:	01050105 	.word	0x01050105
  408290:	01050105 	.word	0x01050105
  408294:	04230423 	.word	0x04230423
  408298:	04230423 	.word	0x04230423
  40829c:	04230423 	.word	0x04230423
  4082a0:	04230423 	.word	0x04230423
  4082a4:	04230423 	.word	0x04230423
  4082a8:	02810115 	.word	0x02810115
  4082ac:	02810423 	.word	0x02810423
  4082b0:	04230423 	.word	0x04230423
  4082b4:	04230423 	.word	0x04230423
  4082b8:	042302c6 	.word	0x042302c6
  4082bc:	02cd0423 	.word	0x02cd0423
  4082c0:	04230423 	.word	0x04230423
  4082c4:	04230423 	.word	0x04230423
  4082c8:	02f70423 	.word	0x02f70423
  4082cc:	04230423 	.word	0x04230423
  4082d0:	04230325 	.word	0x04230325
  4082d4:	04230423 	.word	0x04230423
  4082d8:	04230423 	.word	0x04230423
  4082dc:	04230423 	.word	0x04230423
  4082e0:	04230423 	.word	0x04230423
  4082e4:	03660423 	.word	0x03660423
  4082e8:	02810379 	.word	0x02810379
  4082ec:	02810281 	.word	0x02810281
  4082f0:	03790381 	.word	0x03790381
  4082f4:	04230423 	.word	0x04230423
  4082f8:	042303d1 	.word	0x042303d1
  4082fc:	00a303db 	.word	0x00a303db
  408300:	03ee0064 	.word	0x03ee0064
  408304:	03f50423 	.word	0x03f50423
  408308:	03aa0423 	.word	0x03aa0423
  40830c:	04230423 	.word	0x04230423
  408310:	03bc      	.short	0x03bc
  408312:	980c      	ldr	r0, [sp, #48]	; 0x30
  408314:	930e      	str	r3, [sp, #56]	; 0x38
  408316:	4240      	negs	r0, r0
  408318:	900c      	str	r0, [sp, #48]	; 0x30
  40831a:	9b07      	ldr	r3, [sp, #28]
  40831c:	f043 0304 	orr.w	r3, r3, #4
  408320:	9307      	str	r3, [sp, #28]
  408322:	f898 3000 	ldrb.w	r3, [r8]
  408326:	e792      	b.n	40824e <_svfprintf_r+0xb2>
  408328:	980e      	ldr	r0, [sp, #56]	; 0x38
  40832a:	46ab      	mov	fp, r5
  40832c:	2100      	movs	r1, #0
  40832e:	6804      	ldr	r4, [r0, #0]
  408330:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408334:	1d07      	adds	r7, r0, #4
  408336:	9807      	ldr	r0, [sp, #28]
  408338:	2330      	movs	r3, #48	; 0x30
  40833a:	2278      	movs	r2, #120	; 0x78
  40833c:	458b      	cmp	fp, r1
  40833e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  408342:	f04f 0500 	mov.w	r5, #0
  408346:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40834a:	f040 0302 	orr.w	r3, r0, #2
  40834e:	f2c0 83c7 	blt.w	408ae0 <_svfprintf_r+0x944>
  408352:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  408356:	f043 0302 	orr.w	r3, r3, #2
  40835a:	9307      	str	r3, [sp, #28]
  40835c:	ea54 0305 	orrs.w	r3, r4, r5
  408360:	970e      	str	r7, [sp, #56]	; 0x38
  408362:	f000 8393 	beq.w	408a8c <_svfprintf_r+0x8f0>
  408366:	460f      	mov	r7, r1
  408368:	9211      	str	r2, [sp, #68]	; 0x44
  40836a:	48b3      	ldr	r0, [pc, #716]	; (408638 <_svfprintf_r+0x49c>)
  40836c:	e2ce      	b.n	40890c <_svfprintf_r+0x770>
  40836e:	aa23      	add	r2, sp, #140	; 0x8c
  408370:	9909      	ldr	r1, [sp, #36]	; 0x24
  408372:	980a      	ldr	r0, [sp, #40]	; 0x28
  408374:	f004 fd12 	bl	40cd9c <__ssprint_r>
  408378:	b948      	cbnz	r0, 40838e <_svfprintf_r+0x1f2>
  40837a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40837e:	e752      	b.n	408226 <_svfprintf_r+0x8a>
  408380:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408382:	b123      	cbz	r3, 40838e <_svfprintf_r+0x1f2>
  408384:	980a      	ldr	r0, [sp, #40]	; 0x28
  408386:	9909      	ldr	r1, [sp, #36]	; 0x24
  408388:	aa23      	add	r2, sp, #140	; 0x8c
  40838a:	f004 fd07 	bl	40cd9c <__ssprint_r>
  40838e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408390:	899b      	ldrh	r3, [r3, #12]
  408392:	f013 0f40 	tst.w	r3, #64	; 0x40
  408396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408398:	bf18      	it	ne
  40839a:	f04f 33ff 	movne.w	r3, #4294967295
  40839e:	4618      	mov	r0, r3
  4083a0:	b041      	add	sp, #260	; 0x104
  4083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083a6:	9311      	str	r3, [sp, #68]	; 0x44
  4083a8:	46ab      	mov	fp, r5
  4083aa:	2a00      	cmp	r2, #0
  4083ac:	f041 8223 	bne.w	4097f6 <_svfprintf_r+0x165a>
  4083b0:	9a07      	ldr	r2, [sp, #28]
  4083b2:	f012 0320 	ands.w	r3, r2, #32
  4083b6:	f000 822e 	beq.w	408816 <_svfprintf_r+0x67a>
  4083ba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4083bc:	3707      	adds	r7, #7
  4083be:	f027 0307 	bic.w	r3, r7, #7
  4083c2:	2700      	movs	r7, #0
  4083c4:	f103 0108 	add.w	r1, r3, #8
  4083c8:	45bb      	cmp	fp, r7
  4083ca:	910e      	str	r1, [sp, #56]	; 0x38
  4083cc:	e9d3 4500 	ldrd	r4, r5, [r3]
  4083d0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4083d4:	f2c0 8752 	blt.w	40927c <_svfprintf_r+0x10e0>
  4083d8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4083dc:	9307      	str	r3, [sp, #28]
  4083de:	ea54 0305 	orrs.w	r3, r4, r5
  4083e2:	f000 8375 	beq.w	408ad0 <_svfprintf_r+0x934>
  4083e6:	ae30      	add	r6, sp, #192	; 0xc0
  4083e8:	08e2      	lsrs	r2, r4, #3
  4083ea:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4083ee:	08e9      	lsrs	r1, r5, #3
  4083f0:	f004 0307 	and.w	r3, r4, #7
  4083f4:	460d      	mov	r5, r1
  4083f6:	4614      	mov	r4, r2
  4083f8:	3330      	adds	r3, #48	; 0x30
  4083fa:	ea54 0205 	orrs.w	r2, r4, r5
  4083fe:	f806 3d01 	strb.w	r3, [r6, #-1]!
  408402:	d1f1      	bne.n	4083e8 <_svfprintf_r+0x24c>
  408404:	9a07      	ldr	r2, [sp, #28]
  408406:	07d1      	lsls	r1, r2, #31
  408408:	f140 8084 	bpl.w	408514 <_svfprintf_r+0x378>
  40840c:	2b30      	cmp	r3, #48	; 0x30
  40840e:	f000 8081 	beq.w	408514 <_svfprintf_r+0x378>
  408412:	2230      	movs	r2, #48	; 0x30
  408414:	1e73      	subs	r3, r6, #1
  408416:	f806 2c01 	strb.w	r2, [r6, #-1]
  40841a:	aa30      	add	r2, sp, #192	; 0xc0
  40841c:	1ad2      	subs	r2, r2, r3
  40841e:	920d      	str	r2, [sp, #52]	; 0x34
  408420:	461e      	mov	r6, r3
  408422:	e07a      	b.n	40851a <_svfprintf_r+0x37e>
  408424:	f898 3000 	ldrb.w	r3, [r8]
  408428:	2b2a      	cmp	r3, #42	; 0x2a
  40842a:	f108 0401 	add.w	r4, r8, #1
  40842e:	f001 81b1 	beq.w	409794 <_svfprintf_r+0x15f8>
  408432:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408436:	2809      	cmp	r0, #9
  408438:	bf98      	it	ls
  40843a:	2500      	movls	r5, #0
  40843c:	f201 8164 	bhi.w	409708 <_svfprintf_r+0x156c>
  408440:	f814 3b01 	ldrb.w	r3, [r4], #1
  408444:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  408448:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  40844c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408450:	2809      	cmp	r0, #9
  408452:	d9f5      	bls.n	408440 <_svfprintf_r+0x2a4>
  408454:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  408458:	46a0      	mov	r8, r4
  40845a:	e6fa      	b.n	408252 <_svfprintf_r+0xb6>
  40845c:	9b07      	ldr	r3, [sp, #28]
  40845e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408462:	9307      	str	r3, [sp, #28]
  408464:	f898 3000 	ldrb.w	r3, [r8]
  408468:	e6f1      	b.n	40824e <_svfprintf_r+0xb2>
  40846a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40846e:	2300      	movs	r3, #0
  408470:	461c      	mov	r4, r3
  408472:	f818 3b01 	ldrb.w	r3, [r8], #1
  408476:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40847a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40847e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408482:	2809      	cmp	r0, #9
  408484:	d9f5      	bls.n	408472 <_svfprintf_r+0x2d6>
  408486:	940c      	str	r4, [sp, #48]	; 0x30
  408488:	e6e3      	b.n	408252 <_svfprintf_r+0xb6>
  40848a:	9311      	str	r3, [sp, #68]	; 0x44
  40848c:	46ab      	mov	fp, r5
  40848e:	2a00      	cmp	r2, #0
  408490:	f041 81c9 	bne.w	409826 <_svfprintf_r+0x168a>
  408494:	9b07      	ldr	r3, [sp, #28]
  408496:	f043 0310 	orr.w	r3, r3, #16
  40849a:	9307      	str	r3, [sp, #28]
  40849c:	9b07      	ldr	r3, [sp, #28]
  40849e:	0698      	lsls	r0, r3, #26
  4084a0:	f140 8530 	bpl.w	408f04 <_svfprintf_r+0xd68>
  4084a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4084a6:	3707      	adds	r7, #7
  4084a8:	f027 0707 	bic.w	r7, r7, #7
  4084ac:	e9d7 2300 	ldrd	r2, r3, [r7]
  4084b0:	f107 0108 	add.w	r1, r7, #8
  4084b4:	910e      	str	r1, [sp, #56]	; 0x38
  4084b6:	4614      	mov	r4, r2
  4084b8:	461d      	mov	r5, r3
  4084ba:	2a00      	cmp	r2, #0
  4084bc:	f173 0300 	sbcs.w	r3, r3, #0
  4084c0:	f2c0 855b 	blt.w	408f7a <_svfprintf_r+0xdde>
  4084c4:	f1bb 0f00 	cmp.w	fp, #0
  4084c8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4084cc:	f2c0 8538 	blt.w	408f40 <_svfprintf_r+0xda4>
  4084d0:	9b07      	ldr	r3, [sp, #28]
  4084d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4084d6:	9307      	str	r3, [sp, #28]
  4084d8:	ea54 0305 	orrs.w	r3, r4, r5
  4084dc:	f000 81db 	beq.w	408896 <_svfprintf_r+0x6fa>
  4084e0:	2d00      	cmp	r5, #0
  4084e2:	bf08      	it	eq
  4084e4:	2c0a      	cmpeq	r4, #10
  4084e6:	f0c0 81db 	bcc.w	4088a0 <_svfprintf_r+0x704>
  4084ea:	ae30      	add	r6, sp, #192	; 0xc0
  4084ec:	4620      	mov	r0, r4
  4084ee:	4629      	mov	r1, r5
  4084f0:	220a      	movs	r2, #10
  4084f2:	2300      	movs	r3, #0
  4084f4:	f005 fb2e 	bl	40db54 <__aeabi_uldivmod>
  4084f8:	3230      	adds	r2, #48	; 0x30
  4084fa:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4084fe:	4620      	mov	r0, r4
  408500:	4629      	mov	r1, r5
  408502:	2300      	movs	r3, #0
  408504:	220a      	movs	r2, #10
  408506:	f005 fb25 	bl	40db54 <__aeabi_uldivmod>
  40850a:	4604      	mov	r4, r0
  40850c:	460d      	mov	r5, r1
  40850e:	ea54 0305 	orrs.w	r3, r4, r5
  408512:	d1eb      	bne.n	4084ec <_svfprintf_r+0x350>
  408514:	ab30      	add	r3, sp, #192	; 0xc0
  408516:	1b9b      	subs	r3, r3, r6
  408518:	930d      	str	r3, [sp, #52]	; 0x34
  40851a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40851c:	455b      	cmp	r3, fp
  40851e:	bfb8      	it	lt
  408520:	465b      	movlt	r3, fp
  408522:	9308      	str	r3, [sp, #32]
  408524:	2300      	movs	r3, #0
  408526:	9313      	str	r3, [sp, #76]	; 0x4c
  408528:	b117      	cbz	r7, 408530 <_svfprintf_r+0x394>
  40852a:	9b08      	ldr	r3, [sp, #32]
  40852c:	3301      	adds	r3, #1
  40852e:	9308      	str	r3, [sp, #32]
  408530:	9b07      	ldr	r3, [sp, #28]
  408532:	f013 0302 	ands.w	r3, r3, #2
  408536:	930f      	str	r3, [sp, #60]	; 0x3c
  408538:	d002      	beq.n	408540 <_svfprintf_r+0x3a4>
  40853a:	9b08      	ldr	r3, [sp, #32]
  40853c:	3302      	adds	r3, #2
  40853e:	9308      	str	r3, [sp, #32]
  408540:	9b07      	ldr	r3, [sp, #28]
  408542:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  408546:	9310      	str	r3, [sp, #64]	; 0x40
  408548:	f040 82d7 	bne.w	408afa <_svfprintf_r+0x95e>
  40854c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40854e:	9a08      	ldr	r2, [sp, #32]
  408550:	1a9d      	subs	r5, r3, r2
  408552:	2d00      	cmp	r5, #0
  408554:	f340 82d1 	ble.w	408afa <_svfprintf_r+0x95e>
  408558:	2d10      	cmp	r5, #16
  40855a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40855c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40855e:	4f37      	ldr	r7, [pc, #220]	; (40863c <_svfprintf_r+0x4a0>)
  408560:	dd27      	ble.n	4085b2 <_svfprintf_r+0x416>
  408562:	9618      	str	r6, [sp, #96]	; 0x60
  408564:	4648      	mov	r0, r9
  408566:	2410      	movs	r4, #16
  408568:	46b9      	mov	r9, r7
  40856a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40856c:	462f      	mov	r7, r5
  40856e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  408570:	e004      	b.n	40857c <_svfprintf_r+0x3e0>
  408572:	3f10      	subs	r7, #16
  408574:	2f10      	cmp	r7, #16
  408576:	f100 0008 	add.w	r0, r0, #8
  40857a:	dd16      	ble.n	4085aa <_svfprintf_r+0x40e>
  40857c:	3201      	adds	r2, #1
  40857e:	4b2f      	ldr	r3, [pc, #188]	; (40863c <_svfprintf_r+0x4a0>)
  408580:	9224      	str	r2, [sp, #144]	; 0x90
  408582:	3110      	adds	r1, #16
  408584:	2a07      	cmp	r2, #7
  408586:	9125      	str	r1, [sp, #148]	; 0x94
  408588:	e880 0018 	stmia.w	r0, {r3, r4}
  40858c:	ddf1      	ble.n	408572 <_svfprintf_r+0x3d6>
  40858e:	aa23      	add	r2, sp, #140	; 0x8c
  408590:	4631      	mov	r1, r6
  408592:	4628      	mov	r0, r5
  408594:	f004 fc02 	bl	40cd9c <__ssprint_r>
  408598:	2800      	cmp	r0, #0
  40859a:	f47f aef8 	bne.w	40838e <_svfprintf_r+0x1f2>
  40859e:	3f10      	subs	r7, #16
  4085a0:	2f10      	cmp	r7, #16
  4085a2:	9925      	ldr	r1, [sp, #148]	; 0x94
  4085a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4085a6:	a830      	add	r0, sp, #192	; 0xc0
  4085a8:	dce8      	bgt.n	40857c <_svfprintf_r+0x3e0>
  4085aa:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4085ac:	463d      	mov	r5, r7
  4085ae:	464f      	mov	r7, r9
  4085b0:	4681      	mov	r9, r0
  4085b2:	3201      	adds	r2, #1
  4085b4:	186c      	adds	r4, r5, r1
  4085b6:	2a07      	cmp	r2, #7
  4085b8:	9425      	str	r4, [sp, #148]	; 0x94
  4085ba:	9224      	str	r2, [sp, #144]	; 0x90
  4085bc:	f8c9 7000 	str.w	r7, [r9]
  4085c0:	f8c9 5004 	str.w	r5, [r9, #4]
  4085c4:	f300 8428 	bgt.w	408e18 <_svfprintf_r+0xc7c>
  4085c8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4085cc:	f109 0908 	add.w	r9, r9, #8
  4085d0:	b177      	cbz	r7, 4085f0 <_svfprintf_r+0x454>
  4085d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4085d4:	3301      	adds	r3, #1
  4085d6:	3401      	adds	r4, #1
  4085d8:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4085dc:	2201      	movs	r2, #1
  4085de:	2b07      	cmp	r3, #7
  4085e0:	9425      	str	r4, [sp, #148]	; 0x94
  4085e2:	9324      	str	r3, [sp, #144]	; 0x90
  4085e4:	e889 0006 	stmia.w	r9, {r1, r2}
  4085e8:	f300 83a0 	bgt.w	408d2c <_svfprintf_r+0xb90>
  4085ec:	f109 0908 	add.w	r9, r9, #8
  4085f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4085f2:	b16b      	cbz	r3, 408610 <_svfprintf_r+0x474>
  4085f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4085f6:	3301      	adds	r3, #1
  4085f8:	3402      	adds	r4, #2
  4085fa:	a91c      	add	r1, sp, #112	; 0x70
  4085fc:	2202      	movs	r2, #2
  4085fe:	2b07      	cmp	r3, #7
  408600:	9425      	str	r4, [sp, #148]	; 0x94
  408602:	9324      	str	r3, [sp, #144]	; 0x90
  408604:	e889 0006 	stmia.w	r9, {r1, r2}
  408608:	f300 839c 	bgt.w	408d44 <_svfprintf_r+0xba8>
  40860c:	f109 0908 	add.w	r9, r9, #8
  408610:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408612:	2b80      	cmp	r3, #128	; 0x80
  408614:	f000 82d5 	beq.w	408bc2 <_svfprintf_r+0xa26>
  408618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40861a:	ebc3 070b 	rsb	r7, r3, fp
  40861e:	2f00      	cmp	r7, #0
  408620:	dd39      	ble.n	408696 <_svfprintf_r+0x4fa>
  408622:	4a07      	ldr	r2, [pc, #28]	; (408640 <_svfprintf_r+0x4a4>)
  408624:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408626:	920f      	str	r2, [sp, #60]	; 0x3c
  408628:	2f10      	cmp	r7, #16
  40862a:	dd28      	ble.n	40867e <_svfprintf_r+0x4e2>
  40862c:	4622      	mov	r2, r4
  40862e:	f04f 0b10 	mov.w	fp, #16
  408632:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  408634:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408636:	e00a      	b.n	40864e <_svfprintf_r+0x4b2>
  408638:	0040f7e4 	.word	0x0040f7e4
  40863c:	0040f804 	.word	0x0040f804
  408640:	0040f7b0 	.word	0x0040f7b0
  408644:	3f10      	subs	r7, #16
  408646:	2f10      	cmp	r7, #16
  408648:	f109 0908 	add.w	r9, r9, #8
  40864c:	dd16      	ble.n	40867c <_svfprintf_r+0x4e0>
  40864e:	3301      	adds	r3, #1
  408650:	3210      	adds	r2, #16
  408652:	2b07      	cmp	r3, #7
  408654:	9225      	str	r2, [sp, #148]	; 0x94
  408656:	9324      	str	r3, [sp, #144]	; 0x90
  408658:	e889 0c00 	stmia.w	r9, {sl, fp}
  40865c:	ddf2      	ble.n	408644 <_svfprintf_r+0x4a8>
  40865e:	aa23      	add	r2, sp, #140	; 0x8c
  408660:	4621      	mov	r1, r4
  408662:	4628      	mov	r0, r5
  408664:	f004 fb9a 	bl	40cd9c <__ssprint_r>
  408668:	2800      	cmp	r0, #0
  40866a:	f47f ae90 	bne.w	40838e <_svfprintf_r+0x1f2>
  40866e:	3f10      	subs	r7, #16
  408670:	2f10      	cmp	r7, #16
  408672:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408674:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408676:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40867a:	dce8      	bgt.n	40864e <_svfprintf_r+0x4b2>
  40867c:	4614      	mov	r4, r2
  40867e:	3301      	adds	r3, #1
  408680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408682:	9324      	str	r3, [sp, #144]	; 0x90
  408684:	443c      	add	r4, r7
  408686:	2b07      	cmp	r3, #7
  408688:	9425      	str	r4, [sp, #148]	; 0x94
  40868a:	e889 0084 	stmia.w	r9, {r2, r7}
  40868e:	f300 8341 	bgt.w	408d14 <_svfprintf_r+0xb78>
  408692:	f109 0908 	add.w	r9, r9, #8
  408696:	9b07      	ldr	r3, [sp, #28]
  408698:	05da      	lsls	r2, r3, #23
  40869a:	f100 8230 	bmi.w	408afe <_svfprintf_r+0x962>
  40869e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4086a0:	990d      	ldr	r1, [sp, #52]	; 0x34
  4086a2:	f8c9 6000 	str.w	r6, [r9]
  4086a6:	3301      	adds	r3, #1
  4086a8:	440c      	add	r4, r1
  4086aa:	2b07      	cmp	r3, #7
  4086ac:	9425      	str	r4, [sp, #148]	; 0x94
  4086ae:	f8c9 1004 	str.w	r1, [r9, #4]
  4086b2:	9324      	str	r3, [sp, #144]	; 0x90
  4086b4:	f300 8318 	bgt.w	408ce8 <_svfprintf_r+0xb4c>
  4086b8:	f109 0908 	add.w	r9, r9, #8
  4086bc:	9b07      	ldr	r3, [sp, #28]
  4086be:	0759      	lsls	r1, r3, #29
  4086c0:	d53f      	bpl.n	408742 <_svfprintf_r+0x5a6>
  4086c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4086c4:	9a08      	ldr	r2, [sp, #32]
  4086c6:	1a9d      	subs	r5, r3, r2
  4086c8:	2d00      	cmp	r5, #0
  4086ca:	dd3a      	ble.n	408742 <_svfprintf_r+0x5a6>
  4086cc:	2d10      	cmp	r5, #16
  4086ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4086d0:	4fbc      	ldr	r7, [pc, #752]	; (4089c4 <_svfprintf_r+0x828>)
  4086d2:	dd23      	ble.n	40871c <_svfprintf_r+0x580>
  4086d4:	4622      	mov	r2, r4
  4086d6:	2610      	movs	r6, #16
  4086d8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4086dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4086de:	e004      	b.n	4086ea <_svfprintf_r+0x54e>
  4086e0:	3d10      	subs	r5, #16
  4086e2:	2d10      	cmp	r5, #16
  4086e4:	f109 0908 	add.w	r9, r9, #8
  4086e8:	dd17      	ble.n	40871a <_svfprintf_r+0x57e>
  4086ea:	3301      	adds	r3, #1
  4086ec:	49b5      	ldr	r1, [pc, #724]	; (4089c4 <_svfprintf_r+0x828>)
  4086ee:	9324      	str	r3, [sp, #144]	; 0x90
  4086f0:	3210      	adds	r2, #16
  4086f2:	2b07      	cmp	r3, #7
  4086f4:	9225      	str	r2, [sp, #148]	; 0x94
  4086f6:	e889 0042 	stmia.w	r9, {r1, r6}
  4086fa:	ddf1      	ble.n	4086e0 <_svfprintf_r+0x544>
  4086fc:	aa23      	add	r2, sp, #140	; 0x8c
  4086fe:	4621      	mov	r1, r4
  408700:	4658      	mov	r0, fp
  408702:	f004 fb4b 	bl	40cd9c <__ssprint_r>
  408706:	2800      	cmp	r0, #0
  408708:	f47f ae41 	bne.w	40838e <_svfprintf_r+0x1f2>
  40870c:	3d10      	subs	r5, #16
  40870e:	2d10      	cmp	r5, #16
  408710:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408712:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408714:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408718:	dce7      	bgt.n	4086ea <_svfprintf_r+0x54e>
  40871a:	4614      	mov	r4, r2
  40871c:	3301      	adds	r3, #1
  40871e:	442c      	add	r4, r5
  408720:	2b07      	cmp	r3, #7
  408722:	9425      	str	r4, [sp, #148]	; 0x94
  408724:	9324      	str	r3, [sp, #144]	; 0x90
  408726:	f8c9 7000 	str.w	r7, [r9]
  40872a:	f8c9 5004 	str.w	r5, [r9, #4]
  40872e:	dd08      	ble.n	408742 <_svfprintf_r+0x5a6>
  408730:	aa23      	add	r2, sp, #140	; 0x8c
  408732:	9909      	ldr	r1, [sp, #36]	; 0x24
  408734:	980a      	ldr	r0, [sp, #40]	; 0x28
  408736:	f004 fb31 	bl	40cd9c <__ssprint_r>
  40873a:	2800      	cmp	r0, #0
  40873c:	f47f ae27 	bne.w	40838e <_svfprintf_r+0x1f2>
  408740:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408746:	9908      	ldr	r1, [sp, #32]
  408748:	428a      	cmp	r2, r1
  40874a:	bfac      	ite	ge
  40874c:	189b      	addge	r3, r3, r2
  40874e:	185b      	addlt	r3, r3, r1
  408750:	930b      	str	r3, [sp, #44]	; 0x2c
  408752:	2c00      	cmp	r4, #0
  408754:	f040 82d4 	bne.w	408d00 <_svfprintf_r+0xb64>
  408758:	2300      	movs	r3, #0
  40875a:	9324      	str	r3, [sp, #144]	; 0x90
  40875c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408760:	e542      	b.n	4081e8 <_svfprintf_r+0x4c>
  408762:	9311      	str	r3, [sp, #68]	; 0x44
  408764:	46ab      	mov	fp, r5
  408766:	2a00      	cmp	r2, #0
  408768:	f041 8059 	bne.w	40981e <_svfprintf_r+0x1682>
  40876c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40876e:	3707      	adds	r7, #7
  408770:	f027 0307 	bic.w	r3, r7, #7
  408774:	f103 0208 	add.w	r2, r3, #8
  408778:	920e      	str	r2, [sp, #56]	; 0x38
  40877a:	681a      	ldr	r2, [r3, #0]
  40877c:	9214      	str	r2, [sp, #80]	; 0x50
  40877e:	685b      	ldr	r3, [r3, #4]
  408780:	9315      	str	r3, [sp, #84]	; 0x54
  408782:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408784:	9d14      	ldr	r5, [sp, #80]	; 0x50
  408786:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40878a:	4628      	mov	r0, r5
  40878c:	4621      	mov	r1, r4
  40878e:	f04f 32ff 	mov.w	r2, #4294967295
  408792:	4b8d      	ldr	r3, [pc, #564]	; (4089c8 <_svfprintf_r+0x82c>)
  408794:	f005 f9a0 	bl	40dad8 <__aeabi_dcmpun>
  408798:	2800      	cmp	r0, #0
  40879a:	f040 84c1 	bne.w	409120 <_svfprintf_r+0xf84>
  40879e:	4628      	mov	r0, r5
  4087a0:	4621      	mov	r1, r4
  4087a2:	f04f 32ff 	mov.w	r2, #4294967295
  4087a6:	4b88      	ldr	r3, [pc, #544]	; (4089c8 <_svfprintf_r+0x82c>)
  4087a8:	f005 f978 	bl	40da9c <__aeabi_dcmple>
  4087ac:	2800      	cmp	r0, #0
  4087ae:	f040 84b7 	bne.w	409120 <_svfprintf_r+0xf84>
  4087b2:	9814      	ldr	r0, [sp, #80]	; 0x50
  4087b4:	9915      	ldr	r1, [sp, #84]	; 0x54
  4087b6:	2200      	movs	r2, #0
  4087b8:	2300      	movs	r3, #0
  4087ba:	f005 f965 	bl	40da88 <__aeabi_dcmplt>
  4087be:	2800      	cmp	r0, #0
  4087c0:	f040 874b 	bne.w	40965a <_svfprintf_r+0x14be>
  4087c4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4087c8:	4e80      	ldr	r6, [pc, #512]	; (4089cc <_svfprintf_r+0x830>)
  4087ca:	4b81      	ldr	r3, [pc, #516]	; (4089d0 <_svfprintf_r+0x834>)
  4087cc:	9907      	ldr	r1, [sp, #28]
  4087ce:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  4087d2:	9107      	str	r1, [sp, #28]
  4087d4:	9911      	ldr	r1, [sp, #68]	; 0x44
  4087d6:	2203      	movs	r2, #3
  4087d8:	f04f 0b00 	mov.w	fp, #0
  4087dc:	9208      	str	r2, [sp, #32]
  4087de:	2947      	cmp	r1, #71	; 0x47
  4087e0:	bfd8      	it	le
  4087e2:	461e      	movle	r6, r3
  4087e4:	920d      	str	r2, [sp, #52]	; 0x34
  4087e6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  4087ea:	e69d      	b.n	408528 <_svfprintf_r+0x38c>
  4087ec:	9b07      	ldr	r3, [sp, #28]
  4087ee:	f043 0308 	orr.w	r3, r3, #8
  4087f2:	9307      	str	r3, [sp, #28]
  4087f4:	f898 3000 	ldrb.w	r3, [r8]
  4087f8:	e529      	b.n	40824e <_svfprintf_r+0xb2>
  4087fa:	9311      	str	r3, [sp, #68]	; 0x44
  4087fc:	46ab      	mov	fp, r5
  4087fe:	2a00      	cmp	r2, #0
  408800:	f041 8009 	bne.w	409816 <_svfprintf_r+0x167a>
  408804:	9b07      	ldr	r3, [sp, #28]
  408806:	f043 0310 	orr.w	r3, r3, #16
  40880a:	9307      	str	r3, [sp, #28]
  40880c:	9a07      	ldr	r2, [sp, #28]
  40880e:	f012 0320 	ands.w	r3, r2, #32
  408812:	f47f add2 	bne.w	4083ba <_svfprintf_r+0x21e>
  408816:	9907      	ldr	r1, [sp, #28]
  408818:	f011 0210 	ands.w	r2, r1, #16
  40881c:	f000 8507 	beq.w	40922e <_svfprintf_r+0x1092>
  408820:	980e      	ldr	r0, [sp, #56]	; 0x38
  408822:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408826:	f1bb 0f00 	cmp.w	fp, #0
  40882a:	6804      	ldr	r4, [r0, #0]
  40882c:	f100 0704 	add.w	r7, r0, #4
  408830:	f04f 0500 	mov.w	r5, #0
  408834:	f2c0 8521 	blt.w	40927a <_svfprintf_r+0x10de>
  408838:	460a      	mov	r2, r1
  40883a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40883e:	9207      	str	r2, [sp, #28]
  408840:	ea54 0205 	orrs.w	r2, r4, r5
  408844:	970e      	str	r7, [sp, #56]	; 0x38
  408846:	f000 8143 	beq.w	408ad0 <_svfprintf_r+0x934>
  40884a:	461f      	mov	r7, r3
  40884c:	e5cb      	b.n	4083e6 <_svfprintf_r+0x24a>
  40884e:	9311      	str	r3, [sp, #68]	; 0x44
  408850:	46ab      	mov	fp, r5
  408852:	2a00      	cmp	r2, #0
  408854:	f040 87d7 	bne.w	409806 <_svfprintf_r+0x166a>
  408858:	9b07      	ldr	r3, [sp, #28]
  40885a:	f043 0310 	orr.w	r3, r3, #16
  40885e:	9307      	str	r3, [sp, #28]
  408860:	9a07      	ldr	r2, [sp, #28]
  408862:	f012 0320 	ands.w	r3, r2, #32
  408866:	f000 8332 	beq.w	408ece <_svfprintf_r+0xd32>
  40886a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40886c:	3707      	adds	r7, #7
  40886e:	f027 0307 	bic.w	r3, r7, #7
  408872:	2700      	movs	r7, #0
  408874:	f103 0108 	add.w	r1, r3, #8
  408878:	45bb      	cmp	fp, r7
  40887a:	910e      	str	r1, [sp, #56]	; 0x38
  40887c:	e9d3 4500 	ldrd	r4, r5, [r3]
  408880:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408884:	f2c0 835c 	blt.w	408f40 <_svfprintf_r+0xda4>
  408888:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40888c:	9307      	str	r3, [sp, #28]
  40888e:	ea54 0305 	orrs.w	r3, r4, r5
  408892:	f47f ae25 	bne.w	4084e0 <_svfprintf_r+0x344>
  408896:	f1bb 0f00 	cmp.w	fp, #0
  40889a:	f000 80fe 	beq.w	408a9a <_svfprintf_r+0x8fe>
  40889e:	2400      	movs	r4, #0
  4088a0:	ae40      	add	r6, sp, #256	; 0x100
  4088a2:	3430      	adds	r4, #48	; 0x30
  4088a4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4088a8:	e634      	b.n	408514 <_svfprintf_r+0x378>
  4088aa:	9311      	str	r3, [sp, #68]	; 0x44
  4088ac:	46ab      	mov	fp, r5
  4088ae:	2a00      	cmp	r2, #0
  4088b0:	f040 87a5 	bne.w	4097fe <_svfprintf_r+0x1662>
  4088b4:	9b07      	ldr	r3, [sp, #28]
  4088b6:	4847      	ldr	r0, [pc, #284]	; (4089d4 <_svfprintf_r+0x838>)
  4088b8:	069d      	lsls	r5, r3, #26
  4088ba:	f140 8097 	bpl.w	4089ec <_svfprintf_r+0x850>
  4088be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4088c0:	3707      	adds	r7, #7
  4088c2:	f027 0307 	bic.w	r3, r7, #7
  4088c6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4088ca:	f103 0208 	add.w	r2, r3, #8
  4088ce:	920e      	str	r2, [sp, #56]	; 0x38
  4088d0:	9a07      	ldr	r2, [sp, #28]
  4088d2:	f012 0701 	ands.w	r7, r2, #1
  4088d6:	f000 8241 	beq.w	408d5c <_svfprintf_r+0xbc0>
  4088da:	ea54 0305 	orrs.w	r3, r4, r5
  4088de:	f000 84f5 	beq.w	4092cc <_svfprintf_r+0x1130>
  4088e2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4088e6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  4088ea:	2700      	movs	r7, #0
  4088ec:	9a07      	ldr	r2, [sp, #28]
  4088ee:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4088f2:	2330      	movs	r3, #48	; 0x30
  4088f4:	45bb      	cmp	fp, r7
  4088f6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4088fa:	f042 0302 	orr.w	r3, r2, #2
  4088fe:	f2c0 86a9 	blt.w	409654 <_svfprintf_r+0x14b8>
  408902:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  408906:	f043 0302 	orr.w	r3, r3, #2
  40890a:	9307      	str	r3, [sp, #28]
  40890c:	ae30      	add	r6, sp, #192	; 0xc0
  40890e:	0923      	lsrs	r3, r4, #4
  408910:	f004 010f 	and.w	r1, r4, #15
  408914:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  408918:	092a      	lsrs	r2, r5, #4
  40891a:	461c      	mov	r4, r3
  40891c:	4615      	mov	r5, r2
  40891e:	5c43      	ldrb	r3, [r0, r1]
  408920:	f806 3d01 	strb.w	r3, [r6, #-1]!
  408924:	ea54 0305 	orrs.w	r3, r4, r5
  408928:	d1f1      	bne.n	40890e <_svfprintf_r+0x772>
  40892a:	e5f3      	b.n	408514 <_svfprintf_r+0x378>
  40892c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40892e:	9311      	str	r3, [sp, #68]	; 0x44
  408930:	680a      	ldr	r2, [r1, #0]
  408932:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  408936:	2300      	movs	r3, #0
  408938:	460a      	mov	r2, r1
  40893a:	461f      	mov	r7, r3
  40893c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408940:	3204      	adds	r2, #4
  408942:	2301      	movs	r3, #1
  408944:	9308      	str	r3, [sp, #32]
  408946:	46bb      	mov	fp, r7
  408948:	9713      	str	r7, [sp, #76]	; 0x4c
  40894a:	920e      	str	r2, [sp, #56]	; 0x38
  40894c:	930d      	str	r3, [sp, #52]	; 0x34
  40894e:	ae26      	add	r6, sp, #152	; 0x98
  408950:	e5ee      	b.n	408530 <_svfprintf_r+0x394>
  408952:	9311      	str	r3, [sp, #68]	; 0x44
  408954:	46ab      	mov	fp, r5
  408956:	2a00      	cmp	r2, #0
  408958:	f43f ada0 	beq.w	40849c <_svfprintf_r+0x300>
  40895c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  408960:	e59c      	b.n	40849c <_svfprintf_r+0x300>
  408962:	9b07      	ldr	r3, [sp, #28]
  408964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408968:	9307      	str	r3, [sp, #28]
  40896a:	f898 3000 	ldrb.w	r3, [r8]
  40896e:	e46e      	b.n	40824e <_svfprintf_r+0xb2>
  408970:	f898 3000 	ldrb.w	r3, [r8]
  408974:	2900      	cmp	r1, #0
  408976:	f47f ac6a 	bne.w	40824e <_svfprintf_r+0xb2>
  40897a:	2201      	movs	r2, #1
  40897c:	2120      	movs	r1, #32
  40897e:	e466      	b.n	40824e <_svfprintf_r+0xb2>
  408980:	9b07      	ldr	r3, [sp, #28]
  408982:	f043 0301 	orr.w	r3, r3, #1
  408986:	9307      	str	r3, [sp, #28]
  408988:	f898 3000 	ldrb.w	r3, [r8]
  40898c:	e45f      	b.n	40824e <_svfprintf_r+0xb2>
  40898e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408990:	6823      	ldr	r3, [r4, #0]
  408992:	930c      	str	r3, [sp, #48]	; 0x30
  408994:	4618      	mov	r0, r3
  408996:	2800      	cmp	r0, #0
  408998:	4623      	mov	r3, r4
  40899a:	f103 0304 	add.w	r3, r3, #4
  40899e:	f6ff acb8 	blt.w	408312 <_svfprintf_r+0x176>
  4089a2:	930e      	str	r3, [sp, #56]	; 0x38
  4089a4:	f898 3000 	ldrb.w	r3, [r8]
  4089a8:	e451      	b.n	40824e <_svfprintf_r+0xb2>
  4089aa:	f898 3000 	ldrb.w	r3, [r8]
  4089ae:	2201      	movs	r2, #1
  4089b0:	212b      	movs	r1, #43	; 0x2b
  4089b2:	e44c      	b.n	40824e <_svfprintf_r+0xb2>
  4089b4:	9311      	str	r3, [sp, #68]	; 0x44
  4089b6:	46ab      	mov	fp, r5
  4089b8:	2a00      	cmp	r2, #0
  4089ba:	f43f af51 	beq.w	408860 <_svfprintf_r+0x6c4>
  4089be:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4089c2:	e74d      	b.n	408860 <_svfprintf_r+0x6c4>
  4089c4:	0040f804 	.word	0x0040f804
  4089c8:	7fefffff 	.word	0x7fefffff
  4089cc:	0040f7c4 	.word	0x0040f7c4
  4089d0:	0040f7c0 	.word	0x0040f7c0
  4089d4:	0040f7d0 	.word	0x0040f7d0
  4089d8:	9311      	str	r3, [sp, #68]	; 0x44
  4089da:	46ab      	mov	fp, r5
  4089dc:	2a00      	cmp	r2, #0
  4089de:	f040 8703 	bne.w	4097e8 <_svfprintf_r+0x164c>
  4089e2:	9b07      	ldr	r3, [sp, #28]
  4089e4:	4899      	ldr	r0, [pc, #612]	; (408c4c <_svfprintf_r+0xab0>)
  4089e6:	069d      	lsls	r5, r3, #26
  4089e8:	f53f af69 	bmi.w	4088be <_svfprintf_r+0x722>
  4089ec:	9b07      	ldr	r3, [sp, #28]
  4089ee:	06dc      	lsls	r4, r3, #27
  4089f0:	f140 845e 	bpl.w	4092b0 <_svfprintf_r+0x1114>
  4089f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4089f6:	4613      	mov	r3, r2
  4089f8:	3304      	adds	r3, #4
  4089fa:	6814      	ldr	r4, [r2, #0]
  4089fc:	930e      	str	r3, [sp, #56]	; 0x38
  4089fe:	2500      	movs	r5, #0
  408a00:	e766      	b.n	4088d0 <_svfprintf_r+0x734>
  408a02:	f898 3000 	ldrb.w	r3, [r8]
  408a06:	2b6c      	cmp	r3, #108	; 0x6c
  408a08:	f000 84e1 	beq.w	4093ce <_svfprintf_r+0x1232>
  408a0c:	9807      	ldr	r0, [sp, #28]
  408a0e:	f040 0010 	orr.w	r0, r0, #16
  408a12:	9007      	str	r0, [sp, #28]
  408a14:	e41b      	b.n	40824e <_svfprintf_r+0xb2>
  408a16:	2a00      	cmp	r2, #0
  408a18:	f040 86db 	bne.w	4097d2 <_svfprintf_r+0x1636>
  408a1c:	9b07      	ldr	r3, [sp, #28]
  408a1e:	069b      	lsls	r3, r3, #26
  408a20:	f140 842f 	bpl.w	409282 <_svfprintf_r+0x10e6>
  408a24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408a28:	6813      	ldr	r3, [r2, #0]
  408a2a:	17cd      	asrs	r5, r1, #31
  408a2c:	4608      	mov	r0, r1
  408a2e:	3204      	adds	r2, #4
  408a30:	4629      	mov	r1, r5
  408a32:	920e      	str	r2, [sp, #56]	; 0x38
  408a34:	e9c3 0100 	strd	r0, r1, [r3]
  408a38:	f7ff bbd6 	b.w	4081e8 <_svfprintf_r+0x4c>
  408a3c:	9b07      	ldr	r3, [sp, #28]
  408a3e:	f043 0320 	orr.w	r3, r3, #32
  408a42:	9307      	str	r3, [sp, #28]
  408a44:	f898 3000 	ldrb.w	r3, [r8]
  408a48:	e401      	b.n	40824e <_svfprintf_r+0xb2>
  408a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408a4c:	9311      	str	r3, [sp, #68]	; 0x44
  408a4e:	6816      	ldr	r6, [r2, #0]
  408a50:	2400      	movs	r4, #0
  408a52:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  408a56:	1d17      	adds	r7, r2, #4
  408a58:	2e00      	cmp	r6, #0
  408a5a:	f000 85bd 	beq.w	4095d8 <_svfprintf_r+0x143c>
  408a5e:	2d00      	cmp	r5, #0
  408a60:	f2c0 850f 	blt.w	409482 <_svfprintf_r+0x12e6>
  408a64:	462a      	mov	r2, r5
  408a66:	4621      	mov	r1, r4
  408a68:	4630      	mov	r0, r6
  408a6a:	f003 fba1 	bl	40c1b0 <memchr>
  408a6e:	2800      	cmp	r0, #0
  408a70:	f000 8604 	beq.w	40967c <_svfprintf_r+0x14e0>
  408a74:	1b83      	subs	r3, r0, r6
  408a76:	930d      	str	r3, [sp, #52]	; 0x34
  408a78:	46a3      	mov	fp, r4
  408a7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408a7e:	970e      	str	r7, [sp, #56]	; 0x38
  408a80:	9308      	str	r3, [sp, #32]
  408a82:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  408a86:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408a8a:	e54d      	b.n	408528 <_svfprintf_r+0x38c>
  408a8c:	486f      	ldr	r0, [pc, #444]	; (408c4c <_svfprintf_r+0xab0>)
  408a8e:	9211      	str	r2, [sp, #68]	; 0x44
  408a90:	f1bb 0f00 	cmp.w	fp, #0
  408a94:	f040 8173 	bne.w	408d7e <_svfprintf_r+0xbe2>
  408a98:	465f      	mov	r7, fp
  408a9a:	f04f 0b00 	mov.w	fp, #0
  408a9e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  408aa2:	ae30      	add	r6, sp, #192	; 0xc0
  408aa4:	e539      	b.n	40851a <_svfprintf_r+0x37e>
  408aa6:	9311      	str	r3, [sp, #68]	; 0x44
  408aa8:	2a00      	cmp	r2, #0
  408aaa:	f040 86b0 	bne.w	40980e <_svfprintf_r+0x1672>
  408aae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408ab0:	2a00      	cmp	r2, #0
  408ab2:	f43f ac65 	beq.w	408380 <_svfprintf_r+0x1e4>
  408ab6:	2300      	movs	r3, #0
  408ab8:	2101      	movs	r1, #1
  408aba:	461f      	mov	r7, r3
  408abc:	9108      	str	r1, [sp, #32]
  408abe:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  408ac2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408ac6:	469b      	mov	fp, r3
  408ac8:	9313      	str	r3, [sp, #76]	; 0x4c
  408aca:	910d      	str	r1, [sp, #52]	; 0x34
  408acc:	ae26      	add	r6, sp, #152	; 0x98
  408ace:	e52f      	b.n	408530 <_svfprintf_r+0x394>
  408ad0:	f1bb 0f00 	cmp.w	fp, #0
  408ad4:	f000 85dd 	beq.w	409692 <_svfprintf_r+0x14f6>
  408ad8:	2700      	movs	r7, #0
  408ada:	2400      	movs	r4, #0
  408adc:	2500      	movs	r5, #0
  408ade:	e482      	b.n	4083e6 <_svfprintf_r+0x24a>
  408ae0:	485a      	ldr	r0, [pc, #360]	; (408c4c <_svfprintf_r+0xab0>)
  408ae2:	9307      	str	r3, [sp, #28]
  408ae4:	9211      	str	r2, [sp, #68]	; 0x44
  408ae6:	ea54 0305 	orrs.w	r3, r4, r5
  408aea:	970e      	str	r7, [sp, #56]	; 0x38
  408aec:	f04f 0700 	mov.w	r7, #0
  408af0:	f47f af0c 	bne.w	40890c <_svfprintf_r+0x770>
  408af4:	2400      	movs	r4, #0
  408af6:	2500      	movs	r5, #0
  408af8:	e708      	b.n	40890c <_svfprintf_r+0x770>
  408afa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408afc:	e568      	b.n	4085d0 <_svfprintf_r+0x434>
  408afe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408b00:	2b65      	cmp	r3, #101	; 0x65
  408b02:	f340 80a9 	ble.w	408c58 <_svfprintf_r+0xabc>
  408b06:	9814      	ldr	r0, [sp, #80]	; 0x50
  408b08:	9915      	ldr	r1, [sp, #84]	; 0x54
  408b0a:	2200      	movs	r2, #0
  408b0c:	2300      	movs	r3, #0
  408b0e:	f004 ffb1 	bl	40da74 <__aeabi_dcmpeq>
  408b12:	2800      	cmp	r0, #0
  408b14:	f000 8135 	beq.w	408d82 <_svfprintf_r+0xbe6>
  408b18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408b1a:	4a4d      	ldr	r2, [pc, #308]	; (408c50 <_svfprintf_r+0xab4>)
  408b1c:	f8c9 2000 	str.w	r2, [r9]
  408b20:	3301      	adds	r3, #1
  408b22:	3401      	adds	r4, #1
  408b24:	2201      	movs	r2, #1
  408b26:	2b07      	cmp	r3, #7
  408b28:	9425      	str	r4, [sp, #148]	; 0x94
  408b2a:	9324      	str	r3, [sp, #144]	; 0x90
  408b2c:	f8c9 2004 	str.w	r2, [r9, #4]
  408b30:	f300 83e6 	bgt.w	409300 <_svfprintf_r+0x1164>
  408b34:	f109 0908 	add.w	r9, r9, #8
  408b38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408b3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408b3c:	4293      	cmp	r3, r2
  408b3e:	db03      	blt.n	408b48 <_svfprintf_r+0x9ac>
  408b40:	9b07      	ldr	r3, [sp, #28]
  408b42:	07db      	lsls	r3, r3, #31
  408b44:	f57f adba 	bpl.w	4086bc <_svfprintf_r+0x520>
  408b48:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408b4a:	9916      	ldr	r1, [sp, #88]	; 0x58
  408b4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  408b4e:	f8c9 2000 	str.w	r2, [r9]
  408b52:	3301      	adds	r3, #1
  408b54:	440c      	add	r4, r1
  408b56:	2b07      	cmp	r3, #7
  408b58:	9425      	str	r4, [sp, #148]	; 0x94
  408b5a:	f8c9 1004 	str.w	r1, [r9, #4]
  408b5e:	9324      	str	r3, [sp, #144]	; 0x90
  408b60:	f300 843f 	bgt.w	4093e2 <_svfprintf_r+0x1246>
  408b64:	f109 0908 	add.w	r9, r9, #8
  408b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408b6a:	1e5d      	subs	r5, r3, #1
  408b6c:	2d00      	cmp	r5, #0
  408b6e:	f77f ada5 	ble.w	4086bc <_svfprintf_r+0x520>
  408b72:	4a38      	ldr	r2, [pc, #224]	; (408c54 <_svfprintf_r+0xab8>)
  408b74:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408b76:	920f      	str	r2, [sp, #60]	; 0x3c
  408b78:	2d10      	cmp	r5, #16
  408b7a:	f340 81e6 	ble.w	408f4a <_svfprintf_r+0xdae>
  408b7e:	2610      	movs	r6, #16
  408b80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408b82:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  408b86:	e005      	b.n	408b94 <_svfprintf_r+0x9f8>
  408b88:	f109 0908 	add.w	r9, r9, #8
  408b8c:	3d10      	subs	r5, #16
  408b8e:	2d10      	cmp	r5, #16
  408b90:	f340 81db 	ble.w	408f4a <_svfprintf_r+0xdae>
  408b94:	3301      	adds	r3, #1
  408b96:	3410      	adds	r4, #16
  408b98:	2b07      	cmp	r3, #7
  408b9a:	9425      	str	r4, [sp, #148]	; 0x94
  408b9c:	9324      	str	r3, [sp, #144]	; 0x90
  408b9e:	f8c9 a000 	str.w	sl, [r9]
  408ba2:	f8c9 6004 	str.w	r6, [r9, #4]
  408ba6:	ddef      	ble.n	408b88 <_svfprintf_r+0x9ec>
  408ba8:	aa23      	add	r2, sp, #140	; 0x8c
  408baa:	4659      	mov	r1, fp
  408bac:	4638      	mov	r0, r7
  408bae:	f004 f8f5 	bl	40cd9c <__ssprint_r>
  408bb2:	2800      	cmp	r0, #0
  408bb4:	f47f abeb 	bne.w	40838e <_svfprintf_r+0x1f2>
  408bb8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408bba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408bbc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408bc0:	e7e4      	b.n	408b8c <_svfprintf_r+0x9f0>
  408bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408bc4:	9a08      	ldr	r2, [sp, #32]
  408bc6:	1a9f      	subs	r7, r3, r2
  408bc8:	2f00      	cmp	r7, #0
  408bca:	f77f ad25 	ble.w	408618 <_svfprintf_r+0x47c>
  408bce:	4a21      	ldr	r2, [pc, #132]	; (408c54 <_svfprintf_r+0xab8>)
  408bd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408bd2:	920f      	str	r2, [sp, #60]	; 0x3c
  408bd4:	2f10      	cmp	r7, #16
  408bd6:	dd2b      	ble.n	408c30 <_svfprintf_r+0xa94>
  408bd8:	464a      	mov	r2, r9
  408bda:	4621      	mov	r1, r4
  408bdc:	46b9      	mov	r9, r7
  408bde:	2510      	movs	r5, #16
  408be0:	4637      	mov	r7, r6
  408be2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408be4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  408be6:	e006      	b.n	408bf6 <_svfprintf_r+0xa5a>
  408be8:	f1a9 0910 	sub.w	r9, r9, #16
  408bec:	f1b9 0f10 	cmp.w	r9, #16
  408bf0:	f102 0208 	add.w	r2, r2, #8
  408bf4:	dd18      	ble.n	408c28 <_svfprintf_r+0xa8c>
  408bf6:	3301      	adds	r3, #1
  408bf8:	3110      	adds	r1, #16
  408bfa:	2b07      	cmp	r3, #7
  408bfc:	9125      	str	r1, [sp, #148]	; 0x94
  408bfe:	9324      	str	r3, [sp, #144]	; 0x90
  408c00:	f8c2 a000 	str.w	sl, [r2]
  408c04:	6055      	str	r5, [r2, #4]
  408c06:	ddef      	ble.n	408be8 <_svfprintf_r+0xa4c>
  408c08:	aa23      	add	r2, sp, #140	; 0x8c
  408c0a:	4631      	mov	r1, r6
  408c0c:	4620      	mov	r0, r4
  408c0e:	f004 f8c5 	bl	40cd9c <__ssprint_r>
  408c12:	2800      	cmp	r0, #0
  408c14:	f47f abbb 	bne.w	40838e <_svfprintf_r+0x1f2>
  408c18:	f1a9 0910 	sub.w	r9, r9, #16
  408c1c:	f1b9 0f10 	cmp.w	r9, #16
  408c20:	9925      	ldr	r1, [sp, #148]	; 0x94
  408c22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408c24:	aa30      	add	r2, sp, #192	; 0xc0
  408c26:	dce6      	bgt.n	408bf6 <_svfprintf_r+0xa5a>
  408c28:	463e      	mov	r6, r7
  408c2a:	460c      	mov	r4, r1
  408c2c:	464f      	mov	r7, r9
  408c2e:	4691      	mov	r9, r2
  408c30:	3301      	adds	r3, #1
  408c32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408c34:	9324      	str	r3, [sp, #144]	; 0x90
  408c36:	443c      	add	r4, r7
  408c38:	2b07      	cmp	r3, #7
  408c3a:	9425      	str	r4, [sp, #148]	; 0x94
  408c3c:	e889 0084 	stmia.w	r9, {r2, r7}
  408c40:	f300 8245 	bgt.w	4090ce <_svfprintf_r+0xf32>
  408c44:	f109 0908 	add.w	r9, r9, #8
  408c48:	e4e6      	b.n	408618 <_svfprintf_r+0x47c>
  408c4a:	bf00      	nop
  408c4c:	0040f7e4 	.word	0x0040f7e4
  408c50:	0040f800 	.word	0x0040f800
  408c54:	0040f7b0 	.word	0x0040f7b0
  408c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c5a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408c5c:	2b01      	cmp	r3, #1
  408c5e:	f340 8208 	ble.w	409072 <_svfprintf_r+0xed6>
  408c62:	3501      	adds	r5, #1
  408c64:	3401      	adds	r4, #1
  408c66:	2301      	movs	r3, #1
  408c68:	2d07      	cmp	r5, #7
  408c6a:	9425      	str	r4, [sp, #148]	; 0x94
  408c6c:	9524      	str	r5, [sp, #144]	; 0x90
  408c6e:	f8c9 6000 	str.w	r6, [r9]
  408c72:	f8c9 3004 	str.w	r3, [r9, #4]
  408c76:	f300 820d 	bgt.w	409094 <_svfprintf_r+0xef8>
  408c7a:	f109 0908 	add.w	r9, r9, #8
  408c7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408c82:	f8c9 3000 	str.w	r3, [r9]
  408c86:	3501      	adds	r5, #1
  408c88:	4414      	add	r4, r2
  408c8a:	2d07      	cmp	r5, #7
  408c8c:	9425      	str	r4, [sp, #148]	; 0x94
  408c8e:	9524      	str	r5, [sp, #144]	; 0x90
  408c90:	f8c9 2004 	str.w	r2, [r9, #4]
  408c94:	f300 820e 	bgt.w	4090b4 <_svfprintf_r+0xf18>
  408c98:	f109 0908 	add.w	r9, r9, #8
  408c9c:	2300      	movs	r3, #0
  408c9e:	9814      	ldr	r0, [sp, #80]	; 0x50
  408ca0:	9915      	ldr	r1, [sp, #84]	; 0x54
  408ca2:	2200      	movs	r2, #0
  408ca4:	f004 fee6 	bl	40da74 <__aeabi_dcmpeq>
  408ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408caa:	2800      	cmp	r0, #0
  408cac:	f040 80c3 	bne.w	408e36 <_svfprintf_r+0xc9a>
  408cb0:	3b01      	subs	r3, #1
  408cb2:	3501      	adds	r5, #1
  408cb4:	3601      	adds	r6, #1
  408cb6:	441c      	add	r4, r3
  408cb8:	2d07      	cmp	r5, #7
  408cba:	9524      	str	r5, [sp, #144]	; 0x90
  408cbc:	9425      	str	r4, [sp, #148]	; 0x94
  408cbe:	f8c9 6000 	str.w	r6, [r9]
  408cc2:	f8c9 3004 	str.w	r3, [r9, #4]
  408cc6:	f300 80f5 	bgt.w	408eb4 <_svfprintf_r+0xd18>
  408cca:	f109 0908 	add.w	r9, r9, #8
  408cce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408cd0:	f8c9 2004 	str.w	r2, [r9, #4]
  408cd4:	3501      	adds	r5, #1
  408cd6:	4414      	add	r4, r2
  408cd8:	ab1f      	add	r3, sp, #124	; 0x7c
  408cda:	2d07      	cmp	r5, #7
  408cdc:	9425      	str	r4, [sp, #148]	; 0x94
  408cde:	9524      	str	r5, [sp, #144]	; 0x90
  408ce0:	f8c9 3000 	str.w	r3, [r9]
  408ce4:	f77f ace8 	ble.w	4086b8 <_svfprintf_r+0x51c>
  408ce8:	aa23      	add	r2, sp, #140	; 0x8c
  408cea:	9909      	ldr	r1, [sp, #36]	; 0x24
  408cec:	980a      	ldr	r0, [sp, #40]	; 0x28
  408cee:	f004 f855 	bl	40cd9c <__ssprint_r>
  408cf2:	2800      	cmp	r0, #0
  408cf4:	f47f ab4b 	bne.w	40838e <_svfprintf_r+0x1f2>
  408cf8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408cfa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408cfe:	e4dd      	b.n	4086bc <_svfprintf_r+0x520>
  408d00:	aa23      	add	r2, sp, #140	; 0x8c
  408d02:	9909      	ldr	r1, [sp, #36]	; 0x24
  408d04:	980a      	ldr	r0, [sp, #40]	; 0x28
  408d06:	f004 f849 	bl	40cd9c <__ssprint_r>
  408d0a:	2800      	cmp	r0, #0
  408d0c:	f43f ad24 	beq.w	408758 <_svfprintf_r+0x5bc>
  408d10:	f7ff bb3d 	b.w	40838e <_svfprintf_r+0x1f2>
  408d14:	aa23      	add	r2, sp, #140	; 0x8c
  408d16:	9909      	ldr	r1, [sp, #36]	; 0x24
  408d18:	980a      	ldr	r0, [sp, #40]	; 0x28
  408d1a:	f004 f83f 	bl	40cd9c <__ssprint_r>
  408d1e:	2800      	cmp	r0, #0
  408d20:	f47f ab35 	bne.w	40838e <_svfprintf_r+0x1f2>
  408d24:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408d26:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408d2a:	e4b4      	b.n	408696 <_svfprintf_r+0x4fa>
  408d2c:	aa23      	add	r2, sp, #140	; 0x8c
  408d2e:	9909      	ldr	r1, [sp, #36]	; 0x24
  408d30:	980a      	ldr	r0, [sp, #40]	; 0x28
  408d32:	f004 f833 	bl	40cd9c <__ssprint_r>
  408d36:	2800      	cmp	r0, #0
  408d38:	f47f ab29 	bne.w	40838e <_svfprintf_r+0x1f2>
  408d3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408d3e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408d42:	e455      	b.n	4085f0 <_svfprintf_r+0x454>
  408d44:	aa23      	add	r2, sp, #140	; 0x8c
  408d46:	9909      	ldr	r1, [sp, #36]	; 0x24
  408d48:	980a      	ldr	r0, [sp, #40]	; 0x28
  408d4a:	f004 f827 	bl	40cd9c <__ssprint_r>
  408d4e:	2800      	cmp	r0, #0
  408d50:	f47f ab1d 	bne.w	40838e <_svfprintf_r+0x1f2>
  408d54:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408d56:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408d5a:	e459      	b.n	408610 <_svfprintf_r+0x474>
  408d5c:	f1bb 0f00 	cmp.w	fp, #0
  408d60:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408d64:	f2c0 82d8 	blt.w	409318 <_svfprintf_r+0x117c>
  408d68:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  408d6c:	9307      	str	r3, [sp, #28]
  408d6e:	ea54 0305 	orrs.w	r3, r4, r5
  408d72:	f47f adcb 	bne.w	40890c <_svfprintf_r+0x770>
  408d76:	f1bb 0f00 	cmp.w	fp, #0
  408d7a:	f43f ae8d 	beq.w	408a98 <_svfprintf_r+0x8fc>
  408d7e:	2700      	movs	r7, #0
  408d80:	e6b8      	b.n	408af4 <_svfprintf_r+0x958>
  408d82:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  408d84:	2d00      	cmp	r5, #0
  408d86:	f340 82ca 	ble.w	40931e <_svfprintf_r+0x1182>
  408d8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408d8e:	4293      	cmp	r3, r2
  408d90:	bfa8      	it	ge
  408d92:	4613      	movge	r3, r2
  408d94:	2b00      	cmp	r3, #0
  408d96:	461d      	mov	r5, r3
  408d98:	dd0d      	ble.n	408db6 <_svfprintf_r+0xc1a>
  408d9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408d9c:	f8c9 6000 	str.w	r6, [r9]
  408da0:	3301      	adds	r3, #1
  408da2:	442c      	add	r4, r5
  408da4:	2b07      	cmp	r3, #7
  408da6:	9425      	str	r4, [sp, #148]	; 0x94
  408da8:	f8c9 5004 	str.w	r5, [r9, #4]
  408dac:	9324      	str	r3, [sp, #144]	; 0x90
  408dae:	f300 839c 	bgt.w	4094ea <_svfprintf_r+0x134e>
  408db2:	f109 0908 	add.w	r9, r9, #8
  408db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408db8:	2d00      	cmp	r5, #0
  408dba:	bfa8      	it	ge
  408dbc:	1b5b      	subge	r3, r3, r5
  408dbe:	2b00      	cmp	r3, #0
  408dc0:	461d      	mov	r5, r3
  408dc2:	f340 80f6 	ble.w	408fb2 <_svfprintf_r+0xe16>
  408dc6:	4aba      	ldr	r2, [pc, #744]	; (4090b0 <_svfprintf_r+0xf14>)
  408dc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408dca:	920f      	str	r2, [sp, #60]	; 0x3c
  408dcc:	2d10      	cmp	r5, #16
  408dce:	f340 828a 	ble.w	4092e6 <_svfprintf_r+0x114a>
  408dd2:	4622      	mov	r2, r4
  408dd4:	2710      	movs	r7, #16
  408dd6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408dda:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408ddc:	e005      	b.n	408dea <_svfprintf_r+0xc4e>
  408dde:	f109 0908 	add.w	r9, r9, #8
  408de2:	3d10      	subs	r5, #16
  408de4:	2d10      	cmp	r5, #16
  408de6:	f340 827d 	ble.w	4092e4 <_svfprintf_r+0x1148>
  408dea:	3301      	adds	r3, #1
  408dec:	3210      	adds	r2, #16
  408dee:	2b07      	cmp	r3, #7
  408df0:	9225      	str	r2, [sp, #148]	; 0x94
  408df2:	9324      	str	r3, [sp, #144]	; 0x90
  408df4:	f8c9 a000 	str.w	sl, [r9]
  408df8:	f8c9 7004 	str.w	r7, [r9, #4]
  408dfc:	ddef      	ble.n	408dde <_svfprintf_r+0xc42>
  408dfe:	aa23      	add	r2, sp, #140	; 0x8c
  408e00:	4621      	mov	r1, r4
  408e02:	4658      	mov	r0, fp
  408e04:	f003 ffca 	bl	40cd9c <__ssprint_r>
  408e08:	2800      	cmp	r0, #0
  408e0a:	f47f aac0 	bne.w	40838e <_svfprintf_r+0x1f2>
  408e0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408e10:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408e12:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408e16:	e7e4      	b.n	408de2 <_svfprintf_r+0xc46>
  408e18:	aa23      	add	r2, sp, #140	; 0x8c
  408e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  408e1c:	980a      	ldr	r0, [sp, #40]	; 0x28
  408e1e:	f003 ffbd 	bl	40cd9c <__ssprint_r>
  408e22:	2800      	cmp	r0, #0
  408e24:	f47f aab3 	bne.w	40838e <_svfprintf_r+0x1f2>
  408e28:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408e2c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408e2e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408e32:	f7ff bbcd 	b.w	4085d0 <_svfprintf_r+0x434>
  408e36:	1e5e      	subs	r6, r3, #1
  408e38:	2e00      	cmp	r6, #0
  408e3a:	f77f af48 	ble.w	408cce <_svfprintf_r+0xb32>
  408e3e:	4b9c      	ldr	r3, [pc, #624]	; (4090b0 <_svfprintf_r+0xf14>)
  408e40:	930f      	str	r3, [sp, #60]	; 0x3c
  408e42:	2e10      	cmp	r6, #16
  408e44:	dd2c      	ble.n	408ea0 <_svfprintf_r+0xd04>
  408e46:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  408e4a:	2710      	movs	r7, #16
  408e4c:	46b0      	mov	r8, r6
  408e4e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408e52:	9e09      	ldr	r6, [sp, #36]	; 0x24
  408e54:	e006      	b.n	408e64 <_svfprintf_r+0xcc8>
  408e56:	f1a8 0810 	sub.w	r8, r8, #16
  408e5a:	f1b8 0f10 	cmp.w	r8, #16
  408e5e:	f109 0908 	add.w	r9, r9, #8
  408e62:	dd1a      	ble.n	408e9a <_svfprintf_r+0xcfe>
  408e64:	3501      	adds	r5, #1
  408e66:	3410      	adds	r4, #16
  408e68:	2d07      	cmp	r5, #7
  408e6a:	9425      	str	r4, [sp, #148]	; 0x94
  408e6c:	9524      	str	r5, [sp, #144]	; 0x90
  408e6e:	f8c9 a000 	str.w	sl, [r9]
  408e72:	f8c9 7004 	str.w	r7, [r9, #4]
  408e76:	ddee      	ble.n	408e56 <_svfprintf_r+0xcba>
  408e78:	aa23      	add	r2, sp, #140	; 0x8c
  408e7a:	4631      	mov	r1, r6
  408e7c:	4658      	mov	r0, fp
  408e7e:	f003 ff8d 	bl	40cd9c <__ssprint_r>
  408e82:	2800      	cmp	r0, #0
  408e84:	f47f aa83 	bne.w	40838e <_svfprintf_r+0x1f2>
  408e88:	f1a8 0810 	sub.w	r8, r8, #16
  408e8c:	f1b8 0f10 	cmp.w	r8, #16
  408e90:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408e92:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408e94:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408e98:	dce4      	bgt.n	408e64 <_svfprintf_r+0xcc8>
  408e9a:	4646      	mov	r6, r8
  408e9c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  408ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408ea2:	3501      	adds	r5, #1
  408ea4:	4434      	add	r4, r6
  408ea6:	2d07      	cmp	r5, #7
  408ea8:	9425      	str	r4, [sp, #148]	; 0x94
  408eaa:	9524      	str	r5, [sp, #144]	; 0x90
  408eac:	e889 0048 	stmia.w	r9, {r3, r6}
  408eb0:	f77f af0b 	ble.w	408cca <_svfprintf_r+0xb2e>
  408eb4:	aa23      	add	r2, sp, #140	; 0x8c
  408eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
  408eb8:	980a      	ldr	r0, [sp, #40]	; 0x28
  408eba:	f003 ff6f 	bl	40cd9c <__ssprint_r>
  408ebe:	2800      	cmp	r0, #0
  408ec0:	f47f aa65 	bne.w	40838e <_svfprintf_r+0x1f2>
  408ec4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408ec6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  408ec8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408ecc:	e6ff      	b.n	408cce <_svfprintf_r+0xb32>
  408ece:	9907      	ldr	r1, [sp, #28]
  408ed0:	f011 0210 	ands.w	r2, r1, #16
  408ed4:	f000 8108 	beq.w	4090e8 <_svfprintf_r+0xf4c>
  408ed8:	980e      	ldr	r0, [sp, #56]	; 0x38
  408eda:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408ede:	f1bb 0f00 	cmp.w	fp, #0
  408ee2:	6804      	ldr	r4, [r0, #0]
  408ee4:	f100 0704 	add.w	r7, r0, #4
  408ee8:	f04f 0500 	mov.w	r5, #0
  408eec:	db26      	blt.n	408f3c <_svfprintf_r+0xda0>
  408eee:	460a      	mov	r2, r1
  408ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  408ef4:	9207      	str	r2, [sp, #28]
  408ef6:	ea54 0205 	orrs.w	r2, r4, r5
  408efa:	970e      	str	r7, [sp, #56]	; 0x38
  408efc:	461f      	mov	r7, r3
  408efe:	f47f aaef 	bne.w	4084e0 <_svfprintf_r+0x344>
  408f02:	e4c8      	b.n	408896 <_svfprintf_r+0x6fa>
  408f04:	9b07      	ldr	r3, [sp, #28]
  408f06:	06d9      	lsls	r1, r3, #27
  408f08:	d42a      	bmi.n	408f60 <_svfprintf_r+0xdc4>
  408f0a:	9b07      	ldr	r3, [sp, #28]
  408f0c:	065a      	lsls	r2, r3, #25
  408f0e:	d527      	bpl.n	408f60 <_svfprintf_r+0xdc4>
  408f10:	990e      	ldr	r1, [sp, #56]	; 0x38
  408f12:	f9b1 4000 	ldrsh.w	r4, [r1]
  408f16:	3104      	adds	r1, #4
  408f18:	17e5      	asrs	r5, r4, #31
  408f1a:	4622      	mov	r2, r4
  408f1c:	462b      	mov	r3, r5
  408f1e:	910e      	str	r1, [sp, #56]	; 0x38
  408f20:	f7ff bacb 	b.w	4084ba <_svfprintf_r+0x31e>
  408f24:	990e      	ldr	r1, [sp, #56]	; 0x38
  408f26:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408f2a:	f1bb 0f00 	cmp.w	fp, #0
  408f2e:	680c      	ldr	r4, [r1, #0]
  408f30:	f101 0704 	add.w	r7, r1, #4
  408f34:	f04f 0500 	mov.w	r5, #0
  408f38:	f280 8247 	bge.w	4093ca <_svfprintf_r+0x122e>
  408f3c:	970e      	str	r7, [sp, #56]	; 0x38
  408f3e:	461f      	mov	r7, r3
  408f40:	ea54 0305 	orrs.w	r3, r4, r5
  408f44:	f47f aacc 	bne.w	4084e0 <_svfprintf_r+0x344>
  408f48:	e4aa      	b.n	4088a0 <_svfprintf_r+0x704>
  408f4a:	3301      	adds	r3, #1
  408f4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408f4e:	9324      	str	r3, [sp, #144]	; 0x90
  408f50:	442c      	add	r4, r5
  408f52:	2b07      	cmp	r3, #7
  408f54:	9425      	str	r4, [sp, #148]	; 0x94
  408f56:	e889 0024 	stmia.w	r9, {r2, r5}
  408f5a:	f77f abad 	ble.w	4086b8 <_svfprintf_r+0x51c>
  408f5e:	e6c3      	b.n	408ce8 <_svfprintf_r+0xb4c>
  408f60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408f62:	6814      	ldr	r4, [r2, #0]
  408f64:	4613      	mov	r3, r2
  408f66:	3304      	adds	r3, #4
  408f68:	17e5      	asrs	r5, r4, #31
  408f6a:	4622      	mov	r2, r4
  408f6c:	930e      	str	r3, [sp, #56]	; 0x38
  408f6e:	2a00      	cmp	r2, #0
  408f70:	462b      	mov	r3, r5
  408f72:	f173 0300 	sbcs.w	r3, r3, #0
  408f76:	f6bf aaa5 	bge.w	4084c4 <_svfprintf_r+0x328>
  408f7a:	4264      	negs	r4, r4
  408f7c:	f04f 072d 	mov.w	r7, #45	; 0x2d
  408f80:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  408f84:	f1bb 0f00 	cmp.w	fp, #0
  408f88:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408f8c:	f6ff aaa8 	blt.w	4084e0 <_svfprintf_r+0x344>
  408f90:	9b07      	ldr	r3, [sp, #28]
  408f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408f96:	9307      	str	r3, [sp, #28]
  408f98:	f7ff baa2 	b.w	4084e0 <_svfprintf_r+0x344>
  408f9c:	aa23      	add	r2, sp, #140	; 0x8c
  408f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
  408fa0:	980a      	ldr	r0, [sp, #40]	; 0x28
  408fa2:	f003 fefb 	bl	40cd9c <__ssprint_r>
  408fa6:	2800      	cmp	r0, #0
  408fa8:	f47f a9f1 	bne.w	40838e <_svfprintf_r+0x1f2>
  408fac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  408fae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408fb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408fb6:	4432      	add	r2, r6
  408fb8:	4617      	mov	r7, r2
  408fba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408fbc:	4293      	cmp	r3, r2
  408fbe:	db47      	blt.n	409050 <_svfprintf_r+0xeb4>
  408fc0:	9a07      	ldr	r2, [sp, #28]
  408fc2:	07d5      	lsls	r5, r2, #31
  408fc4:	d444      	bmi.n	409050 <_svfprintf_r+0xeb4>
  408fc6:	9912      	ldr	r1, [sp, #72]	; 0x48
  408fc8:	440e      	add	r6, r1
  408fca:	1bf5      	subs	r5, r6, r7
  408fcc:	1acb      	subs	r3, r1, r3
  408fce:	429d      	cmp	r5, r3
  408fd0:	bfa8      	it	ge
  408fd2:	461d      	movge	r5, r3
  408fd4:	2d00      	cmp	r5, #0
  408fd6:	462e      	mov	r6, r5
  408fd8:	dd0d      	ble.n	408ff6 <_svfprintf_r+0xe5a>
  408fda:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408fdc:	f8c9 7000 	str.w	r7, [r9]
  408fe0:	3201      	adds	r2, #1
  408fe2:	442c      	add	r4, r5
  408fe4:	2a07      	cmp	r2, #7
  408fe6:	9425      	str	r4, [sp, #148]	; 0x94
  408fe8:	f8c9 5004 	str.w	r5, [r9, #4]
  408fec:	9224      	str	r2, [sp, #144]	; 0x90
  408fee:	f300 830b 	bgt.w	409608 <_svfprintf_r+0x146c>
  408ff2:	f109 0908 	add.w	r9, r9, #8
  408ff6:	2e00      	cmp	r6, #0
  408ff8:	bfac      	ite	ge
  408ffa:	1b9d      	subge	r5, r3, r6
  408ffc:	461d      	movlt	r5, r3
  408ffe:	2d00      	cmp	r5, #0
  409000:	f77f ab5c 	ble.w	4086bc <_svfprintf_r+0x520>
  409004:	4a2a      	ldr	r2, [pc, #168]	; (4090b0 <_svfprintf_r+0xf14>)
  409006:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409008:	920f      	str	r2, [sp, #60]	; 0x3c
  40900a:	2d10      	cmp	r5, #16
  40900c:	dd9d      	ble.n	408f4a <_svfprintf_r+0xdae>
  40900e:	2610      	movs	r6, #16
  409010:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409012:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  409016:	e004      	b.n	409022 <_svfprintf_r+0xe86>
  409018:	f109 0908 	add.w	r9, r9, #8
  40901c:	3d10      	subs	r5, #16
  40901e:	2d10      	cmp	r5, #16
  409020:	dd93      	ble.n	408f4a <_svfprintf_r+0xdae>
  409022:	3301      	adds	r3, #1
  409024:	3410      	adds	r4, #16
  409026:	2b07      	cmp	r3, #7
  409028:	9425      	str	r4, [sp, #148]	; 0x94
  40902a:	9324      	str	r3, [sp, #144]	; 0x90
  40902c:	f8c9 a000 	str.w	sl, [r9]
  409030:	f8c9 6004 	str.w	r6, [r9, #4]
  409034:	ddf0      	ble.n	409018 <_svfprintf_r+0xe7c>
  409036:	aa23      	add	r2, sp, #140	; 0x8c
  409038:	4659      	mov	r1, fp
  40903a:	4638      	mov	r0, r7
  40903c:	f003 feae 	bl	40cd9c <__ssprint_r>
  409040:	2800      	cmp	r0, #0
  409042:	f47f a9a4 	bne.w	40838e <_svfprintf_r+0x1f2>
  409046:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409048:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40904a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40904e:	e7e5      	b.n	40901c <_svfprintf_r+0xe80>
  409050:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409052:	9816      	ldr	r0, [sp, #88]	; 0x58
  409054:	9917      	ldr	r1, [sp, #92]	; 0x5c
  409056:	f8c9 1000 	str.w	r1, [r9]
  40905a:	3201      	adds	r2, #1
  40905c:	4404      	add	r4, r0
  40905e:	2a07      	cmp	r2, #7
  409060:	9425      	str	r4, [sp, #148]	; 0x94
  409062:	f8c9 0004 	str.w	r0, [r9, #4]
  409066:	9224      	str	r2, [sp, #144]	; 0x90
  409068:	f300 82a9 	bgt.w	4095be <_svfprintf_r+0x1422>
  40906c:	f109 0908 	add.w	r9, r9, #8
  409070:	e7a9      	b.n	408fc6 <_svfprintf_r+0xe2a>
  409072:	9b07      	ldr	r3, [sp, #28]
  409074:	07d8      	lsls	r0, r3, #31
  409076:	f53f adf4 	bmi.w	408c62 <_svfprintf_r+0xac6>
  40907a:	3501      	adds	r5, #1
  40907c:	3401      	adds	r4, #1
  40907e:	2301      	movs	r3, #1
  409080:	2d07      	cmp	r5, #7
  409082:	9425      	str	r4, [sp, #148]	; 0x94
  409084:	9524      	str	r5, [sp, #144]	; 0x90
  409086:	f8c9 6000 	str.w	r6, [r9]
  40908a:	f8c9 3004 	str.w	r3, [r9, #4]
  40908e:	f77f ae1c 	ble.w	408cca <_svfprintf_r+0xb2e>
  409092:	e70f      	b.n	408eb4 <_svfprintf_r+0xd18>
  409094:	aa23      	add	r2, sp, #140	; 0x8c
  409096:	9909      	ldr	r1, [sp, #36]	; 0x24
  409098:	980a      	ldr	r0, [sp, #40]	; 0x28
  40909a:	f003 fe7f 	bl	40cd9c <__ssprint_r>
  40909e:	2800      	cmp	r0, #0
  4090a0:	f47f a975 	bne.w	40838e <_svfprintf_r+0x1f2>
  4090a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4090a6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4090a8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4090ac:	e5e7      	b.n	408c7e <_svfprintf_r+0xae2>
  4090ae:	bf00      	nop
  4090b0:	0040f7b0 	.word	0x0040f7b0
  4090b4:	aa23      	add	r2, sp, #140	; 0x8c
  4090b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4090b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4090ba:	f003 fe6f 	bl	40cd9c <__ssprint_r>
  4090be:	2800      	cmp	r0, #0
  4090c0:	f47f a965 	bne.w	40838e <_svfprintf_r+0x1f2>
  4090c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4090c6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4090c8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4090cc:	e5e6      	b.n	408c9c <_svfprintf_r+0xb00>
  4090ce:	aa23      	add	r2, sp, #140	; 0x8c
  4090d0:	9909      	ldr	r1, [sp, #36]	; 0x24
  4090d2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4090d4:	f003 fe62 	bl	40cd9c <__ssprint_r>
  4090d8:	2800      	cmp	r0, #0
  4090da:	f47f a958 	bne.w	40838e <_svfprintf_r+0x1f2>
  4090de:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4090e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4090e4:	f7ff ba98 	b.w	408618 <_svfprintf_r+0x47c>
  4090e8:	9907      	ldr	r1, [sp, #28]
  4090ea:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  4090ee:	f43f af19 	beq.w	408f24 <_svfprintf_r+0xd88>
  4090f2:	980e      	ldr	r0, [sp, #56]	; 0x38
  4090f4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4090f8:	f1bb 0f00 	cmp.w	fp, #0
  4090fc:	8804      	ldrh	r4, [r0, #0]
  4090fe:	f100 0704 	add.w	r7, r0, #4
  409102:	f04f 0500 	mov.w	r5, #0
  409106:	f2c0 81b9 	blt.w	40947c <_svfprintf_r+0x12e0>
  40910a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  40910e:	9307      	str	r3, [sp, #28]
  409110:	ea54 0305 	orrs.w	r3, r4, r5
  409114:	970e      	str	r7, [sp, #56]	; 0x38
  409116:	4617      	mov	r7, r2
  409118:	f47f a9e2 	bne.w	4084e0 <_svfprintf_r+0x344>
  40911c:	f7ff bbbb 	b.w	408896 <_svfprintf_r+0x6fa>
  409120:	9c14      	ldr	r4, [sp, #80]	; 0x50
  409122:	4622      	mov	r2, r4
  409124:	4620      	mov	r0, r4
  409126:	9c15      	ldr	r4, [sp, #84]	; 0x54
  409128:	4623      	mov	r3, r4
  40912a:	4621      	mov	r1, r4
  40912c:	f004 fcd4 	bl	40dad8 <__aeabi_dcmpun>
  409130:	2800      	cmp	r0, #0
  409132:	f040 8317 	bne.w	409764 <_svfprintf_r+0x15c8>
  409136:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409138:	f1bb 3fff 	cmp.w	fp, #4294967295
  40913c:	f023 0320 	bic.w	r3, r3, #32
  409140:	930d      	str	r3, [sp, #52]	; 0x34
  409142:	f000 8270 	beq.w	409626 <_svfprintf_r+0x148a>
  409146:	2b47      	cmp	r3, #71	; 0x47
  409148:	f000 8192 	beq.w	409470 <_svfprintf_r+0x12d4>
  40914c:	9b07      	ldr	r3, [sp, #28]
  40914e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  409152:	9310      	str	r3, [sp, #64]	; 0x40
  409154:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409156:	1e1f      	subs	r7, r3, #0
  409158:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40915a:	9308      	str	r3, [sp, #32]
  40915c:	bfbb      	ittet	lt
  40915e:	463b      	movlt	r3, r7
  409160:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  409164:	2300      	movge	r3, #0
  409166:	232d      	movlt	r3, #45	; 0x2d
  409168:	930f      	str	r3, [sp, #60]	; 0x3c
  40916a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40916c:	2b66      	cmp	r3, #102	; 0x66
  40916e:	f000 825d 	beq.w	40962c <_svfprintf_r+0x1490>
  409172:	2b46      	cmp	r3, #70	; 0x46
  409174:	f000 8151 	beq.w	40941a <_svfprintf_r+0x127e>
  409178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40917a:	9a08      	ldr	r2, [sp, #32]
  40917c:	2b45      	cmp	r3, #69	; 0x45
  40917e:	a821      	add	r0, sp, #132	; 0x84
  409180:	a91e      	add	r1, sp, #120	; 0x78
  409182:	bf0c      	ite	eq
  409184:	f10b 0501 	addeq.w	r5, fp, #1
  409188:	465d      	movne	r5, fp
  40918a:	9004      	str	r0, [sp, #16]
  40918c:	9103      	str	r1, [sp, #12]
  40918e:	a81d      	add	r0, sp, #116	; 0x74
  409190:	2102      	movs	r1, #2
  409192:	463b      	mov	r3, r7
  409194:	9002      	str	r0, [sp, #8]
  409196:	9501      	str	r5, [sp, #4]
  409198:	9100      	str	r1, [sp, #0]
  40919a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40919c:	f001 fbc4 	bl	40a928 <_dtoa_r>
  4091a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4091a2:	2b67      	cmp	r3, #103	; 0x67
  4091a4:	4606      	mov	r6, r0
  4091a6:	f040 8290 	bne.w	4096ca <_svfprintf_r+0x152e>
  4091aa:	9b07      	ldr	r3, [sp, #28]
  4091ac:	07da      	lsls	r2, r3, #31
  4091ae:	f140 82af 	bpl.w	409710 <_svfprintf_r+0x1574>
  4091b2:	1974      	adds	r4, r6, r5
  4091b4:	9808      	ldr	r0, [sp, #32]
  4091b6:	4639      	mov	r1, r7
  4091b8:	2200      	movs	r2, #0
  4091ba:	2300      	movs	r3, #0
  4091bc:	f004 fc5a 	bl	40da74 <__aeabi_dcmpeq>
  4091c0:	2800      	cmp	r0, #0
  4091c2:	f040 8190 	bne.w	4094e6 <_svfprintf_r+0x134a>
  4091c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4091c8:	429c      	cmp	r4, r3
  4091ca:	d906      	bls.n	4091da <_svfprintf_r+0x103e>
  4091cc:	2130      	movs	r1, #48	; 0x30
  4091ce:	1c5a      	adds	r2, r3, #1
  4091d0:	9221      	str	r2, [sp, #132]	; 0x84
  4091d2:	7019      	strb	r1, [r3, #0]
  4091d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4091d6:	429c      	cmp	r4, r3
  4091d8:	d8f9      	bhi.n	4091ce <_svfprintf_r+0x1032>
  4091da:	1b9b      	subs	r3, r3, r6
  4091dc:	9312      	str	r3, [sp, #72]	; 0x48
  4091de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4091e0:	2b47      	cmp	r3, #71	; 0x47
  4091e2:	f000 8179 	beq.w	4094d8 <_svfprintf_r+0x133c>
  4091e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4091e8:	2b65      	cmp	r3, #101	; 0x65
  4091ea:	f340 827d 	ble.w	4096e8 <_svfprintf_r+0x154c>
  4091ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4091f0:	2b66      	cmp	r3, #102	; 0x66
  4091f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4091f4:	9313      	str	r3, [sp, #76]	; 0x4c
  4091f6:	f000 825b 	beq.w	4096b0 <_svfprintf_r+0x1514>
  4091fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4091fc:	9912      	ldr	r1, [sp, #72]	; 0x48
  4091fe:	428a      	cmp	r2, r1
  409200:	f2c0 8230 	blt.w	409664 <_svfprintf_r+0x14c8>
  409204:	9b07      	ldr	r3, [sp, #28]
  409206:	07d9      	lsls	r1, r3, #31
  409208:	f100 8284 	bmi.w	409714 <_svfprintf_r+0x1578>
  40920c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  409210:	920d      	str	r2, [sp, #52]	; 0x34
  409212:	2267      	movs	r2, #103	; 0x67
  409214:	9211      	str	r2, [sp, #68]	; 0x44
  409216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409218:	2a00      	cmp	r2, #0
  40921a:	f040 8153 	bne.w	4094c4 <_svfprintf_r+0x1328>
  40921e:	9308      	str	r3, [sp, #32]
  409220:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409222:	9307      	str	r3, [sp, #28]
  409224:	4693      	mov	fp, r2
  409226:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40922a:	f7ff b97d 	b.w	408528 <_svfprintf_r+0x38c>
  40922e:	9907      	ldr	r1, [sp, #28]
  409230:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  409234:	d015      	beq.n	409262 <_svfprintf_r+0x10c6>
  409236:	980e      	ldr	r0, [sp, #56]	; 0x38
  409238:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40923c:	f1bb 0f00 	cmp.w	fp, #0
  409240:	8804      	ldrh	r4, [r0, #0]
  409242:	f100 0704 	add.w	r7, r0, #4
  409246:	f04f 0500 	mov.w	r5, #0
  40924a:	db16      	blt.n	40927a <_svfprintf_r+0x10de>
  40924c:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  409250:	9307      	str	r3, [sp, #28]
  409252:	ea54 0305 	orrs.w	r3, r4, r5
  409256:	970e      	str	r7, [sp, #56]	; 0x38
  409258:	f43f ac3a 	beq.w	408ad0 <_svfprintf_r+0x934>
  40925c:	4617      	mov	r7, r2
  40925e:	f7ff b8c2 	b.w	4083e6 <_svfprintf_r+0x24a>
  409262:	990e      	ldr	r1, [sp, #56]	; 0x38
  409264:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  409268:	f1bb 0f00 	cmp.w	fp, #0
  40926c:	680c      	ldr	r4, [r1, #0]
  40926e:	f101 0704 	add.w	r7, r1, #4
  409272:	f04f 0500 	mov.w	r5, #0
  409276:	f280 80a5 	bge.w	4093c4 <_svfprintf_r+0x1228>
  40927a:	970e      	str	r7, [sp, #56]	; 0x38
  40927c:	2700      	movs	r7, #0
  40927e:	f7ff b8b2 	b.w	4083e6 <_svfprintf_r+0x24a>
  409282:	9b07      	ldr	r3, [sp, #28]
  409284:	06df      	lsls	r7, r3, #27
  409286:	d40b      	bmi.n	4092a0 <_svfprintf_r+0x1104>
  409288:	9b07      	ldr	r3, [sp, #28]
  40928a:	065e      	lsls	r6, r3, #25
  40928c:	d508      	bpl.n	4092a0 <_svfprintf_r+0x1104>
  40928e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409290:	6813      	ldr	r3, [r2, #0]
  409292:	3204      	adds	r2, #4
  409294:	920e      	str	r2, [sp, #56]	; 0x38
  409296:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40929a:	801a      	strh	r2, [r3, #0]
  40929c:	f7fe bfa4 	b.w	4081e8 <_svfprintf_r+0x4c>
  4092a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4092a2:	6813      	ldr	r3, [r2, #0]
  4092a4:	3204      	adds	r2, #4
  4092a6:	920e      	str	r2, [sp, #56]	; 0x38
  4092a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4092aa:	601a      	str	r2, [r3, #0]
  4092ac:	f7fe bf9c 	b.w	4081e8 <_svfprintf_r+0x4c>
  4092b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4092b2:	9b07      	ldr	r3, [sp, #28]
  4092b4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4092b8:	4613      	mov	r3, r2
  4092ba:	f103 0304 	add.w	r3, r3, #4
  4092be:	bf0c      	ite	eq
  4092c0:	6814      	ldreq	r4, [r2, #0]
  4092c2:	8814      	ldrhne	r4, [r2, #0]
  4092c4:	930e      	str	r3, [sp, #56]	; 0x38
  4092c6:	2500      	movs	r5, #0
  4092c8:	f7ff bb02 	b.w	4088d0 <_svfprintf_r+0x734>
  4092cc:	2700      	movs	r7, #0
  4092ce:	45bb      	cmp	fp, r7
  4092d0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4092d4:	f6ff ac0e 	blt.w	408af4 <_svfprintf_r+0x958>
  4092d8:	9b07      	ldr	r3, [sp, #28]
  4092da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4092de:	9307      	str	r3, [sp, #28]
  4092e0:	f7ff bbd6 	b.w	408a90 <_svfprintf_r+0x8f4>
  4092e4:	4614      	mov	r4, r2
  4092e6:	3301      	adds	r3, #1
  4092e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4092ea:	9324      	str	r3, [sp, #144]	; 0x90
  4092ec:	442c      	add	r4, r5
  4092ee:	2b07      	cmp	r3, #7
  4092f0:	9425      	str	r4, [sp, #148]	; 0x94
  4092f2:	e889 0024 	stmia.w	r9, {r2, r5}
  4092f6:	f73f ae51 	bgt.w	408f9c <_svfprintf_r+0xe00>
  4092fa:	f109 0908 	add.w	r9, r9, #8
  4092fe:	e658      	b.n	408fb2 <_svfprintf_r+0xe16>
  409300:	aa23      	add	r2, sp, #140	; 0x8c
  409302:	9909      	ldr	r1, [sp, #36]	; 0x24
  409304:	980a      	ldr	r0, [sp, #40]	; 0x28
  409306:	f003 fd49 	bl	40cd9c <__ssprint_r>
  40930a:	2800      	cmp	r0, #0
  40930c:	f47f a83f 	bne.w	40838e <_svfprintf_r+0x1f2>
  409310:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409312:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409316:	e40f      	b.n	408b38 <_svfprintf_r+0x99c>
  409318:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40931a:	f7ff bbe4 	b.w	408ae6 <_svfprintf_r+0x94a>
  40931e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409320:	4ab5      	ldr	r2, [pc, #724]	; (4095f8 <_svfprintf_r+0x145c>)
  409322:	f8c9 2000 	str.w	r2, [r9]
  409326:	3301      	adds	r3, #1
  409328:	3401      	adds	r4, #1
  40932a:	2201      	movs	r2, #1
  40932c:	2b07      	cmp	r3, #7
  40932e:	9425      	str	r4, [sp, #148]	; 0x94
  409330:	9324      	str	r3, [sp, #144]	; 0x90
  409332:	f8c9 2004 	str.w	r2, [r9, #4]
  409336:	f300 808e 	bgt.w	409456 <_svfprintf_r+0x12ba>
  40933a:	f109 0908 	add.w	r9, r9, #8
  40933e:	b92d      	cbnz	r5, 40934c <_svfprintf_r+0x11b0>
  409340:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409342:	b91b      	cbnz	r3, 40934c <_svfprintf_r+0x11b0>
  409344:	9b07      	ldr	r3, [sp, #28]
  409346:	07df      	lsls	r7, r3, #31
  409348:	f57f a9b8 	bpl.w	4086bc <_svfprintf_r+0x520>
  40934c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40934e:	9916      	ldr	r1, [sp, #88]	; 0x58
  409350:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  409352:	f8c9 2000 	str.w	r2, [r9]
  409356:	3301      	adds	r3, #1
  409358:	440c      	add	r4, r1
  40935a:	2b07      	cmp	r3, #7
  40935c:	9425      	str	r4, [sp, #148]	; 0x94
  40935e:	f8c9 1004 	str.w	r1, [r9, #4]
  409362:	9324      	str	r3, [sp, #144]	; 0x90
  409364:	f300 81c2 	bgt.w	4096ec <_svfprintf_r+0x1550>
  409368:	f109 0908 	add.w	r9, r9, #8
  40936c:	426d      	negs	r5, r5
  40936e:	2d00      	cmp	r5, #0
  409370:	f340 809b 	ble.w	4094aa <_svfprintf_r+0x130e>
  409374:	4aa1      	ldr	r2, [pc, #644]	; (4095fc <_svfprintf_r+0x1460>)
  409376:	920f      	str	r2, [sp, #60]	; 0x3c
  409378:	2d10      	cmp	r5, #16
  40937a:	f340 80c3 	ble.w	409504 <_svfprintf_r+0x1368>
  40937e:	4622      	mov	r2, r4
  409380:	2710      	movs	r7, #16
  409382:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  409386:	9c09      	ldr	r4, [sp, #36]	; 0x24
  409388:	e005      	b.n	409396 <_svfprintf_r+0x11fa>
  40938a:	f109 0908 	add.w	r9, r9, #8
  40938e:	3d10      	subs	r5, #16
  409390:	2d10      	cmp	r5, #16
  409392:	f340 80b6 	ble.w	409502 <_svfprintf_r+0x1366>
  409396:	3301      	adds	r3, #1
  409398:	3210      	adds	r2, #16
  40939a:	2b07      	cmp	r3, #7
  40939c:	9225      	str	r2, [sp, #148]	; 0x94
  40939e:	9324      	str	r3, [sp, #144]	; 0x90
  4093a0:	f8c9 a000 	str.w	sl, [r9]
  4093a4:	f8c9 7004 	str.w	r7, [r9, #4]
  4093a8:	ddef      	ble.n	40938a <_svfprintf_r+0x11ee>
  4093aa:	aa23      	add	r2, sp, #140	; 0x8c
  4093ac:	4621      	mov	r1, r4
  4093ae:	4658      	mov	r0, fp
  4093b0:	f003 fcf4 	bl	40cd9c <__ssprint_r>
  4093b4:	2800      	cmp	r0, #0
  4093b6:	f47e afea 	bne.w	40838e <_svfprintf_r+0x1f2>
  4093ba:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4093bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4093be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4093c2:	e7e4      	b.n	40938e <_svfprintf_r+0x11f2>
  4093c4:	9a07      	ldr	r2, [sp, #28]
  4093c6:	f7ff ba38 	b.w	40883a <_svfprintf_r+0x69e>
  4093ca:	9a07      	ldr	r2, [sp, #28]
  4093cc:	e590      	b.n	408ef0 <_svfprintf_r+0xd54>
  4093ce:	9b07      	ldr	r3, [sp, #28]
  4093d0:	f043 0320 	orr.w	r3, r3, #32
  4093d4:	9307      	str	r3, [sp, #28]
  4093d6:	f108 0801 	add.w	r8, r8, #1
  4093da:	f898 3000 	ldrb.w	r3, [r8]
  4093de:	f7fe bf36 	b.w	40824e <_svfprintf_r+0xb2>
  4093e2:	aa23      	add	r2, sp, #140	; 0x8c
  4093e4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4093e6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4093e8:	f003 fcd8 	bl	40cd9c <__ssprint_r>
  4093ec:	2800      	cmp	r0, #0
  4093ee:	f47e afce 	bne.w	40838e <_svfprintf_r+0x1f2>
  4093f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4093f4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4093f8:	f7ff bbb6 	b.w	408b68 <_svfprintf_r+0x9cc>
  4093fc:	2140      	movs	r1, #64	; 0x40
  4093fe:	980a      	ldr	r0, [sp, #40]	; 0x28
  409400:	f7fe f93c 	bl	40767c <_malloc_r>
  409404:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409406:	6010      	str	r0, [r2, #0]
  409408:	6110      	str	r0, [r2, #16]
  40940a:	2800      	cmp	r0, #0
  40940c:	f000 81e5 	beq.w	4097da <_svfprintf_r+0x163e>
  409410:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409412:	2340      	movs	r3, #64	; 0x40
  409414:	6153      	str	r3, [r2, #20]
  409416:	f7fe bed8 	b.w	4081ca <_svfprintf_r+0x2e>
  40941a:	a821      	add	r0, sp, #132	; 0x84
  40941c:	a91e      	add	r1, sp, #120	; 0x78
  40941e:	9004      	str	r0, [sp, #16]
  409420:	9103      	str	r1, [sp, #12]
  409422:	a81d      	add	r0, sp, #116	; 0x74
  409424:	2103      	movs	r1, #3
  409426:	9002      	str	r0, [sp, #8]
  409428:	9a08      	ldr	r2, [sp, #32]
  40942a:	f8cd b004 	str.w	fp, [sp, #4]
  40942e:	463b      	mov	r3, r7
  409430:	9100      	str	r1, [sp, #0]
  409432:	980a      	ldr	r0, [sp, #40]	; 0x28
  409434:	f001 fa78 	bl	40a928 <_dtoa_r>
  409438:	465d      	mov	r5, fp
  40943a:	4606      	mov	r6, r0
  40943c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40943e:	2b46      	cmp	r3, #70	; 0x46
  409440:	eb06 0405 	add.w	r4, r6, r5
  409444:	f47f aeb6 	bne.w	4091b4 <_svfprintf_r+0x1018>
  409448:	7833      	ldrb	r3, [r6, #0]
  40944a:	2b30      	cmp	r3, #48	; 0x30
  40944c:	f000 817c 	beq.w	409748 <_svfprintf_r+0x15ac>
  409450:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  409452:	442c      	add	r4, r5
  409454:	e6ae      	b.n	4091b4 <_svfprintf_r+0x1018>
  409456:	aa23      	add	r2, sp, #140	; 0x8c
  409458:	9909      	ldr	r1, [sp, #36]	; 0x24
  40945a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40945c:	f003 fc9e 	bl	40cd9c <__ssprint_r>
  409460:	2800      	cmp	r0, #0
  409462:	f47e af94 	bne.w	40838e <_svfprintf_r+0x1f2>
  409466:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  409468:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40946a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40946e:	e766      	b.n	40933e <_svfprintf_r+0x11a2>
  409470:	f1bb 0f00 	cmp.w	fp, #0
  409474:	bf08      	it	eq
  409476:	f04f 0b01 	moveq.w	fp, #1
  40947a:	e667      	b.n	40914c <_svfprintf_r+0xfb0>
  40947c:	970e      	str	r7, [sp, #56]	; 0x38
  40947e:	4617      	mov	r7, r2
  409480:	e55e      	b.n	408f40 <_svfprintf_r+0xda4>
  409482:	4630      	mov	r0, r6
  409484:	f7fe fe1c 	bl	4080c0 <strlen>
  409488:	46a3      	mov	fp, r4
  40948a:	4603      	mov	r3, r0
  40948c:	900d      	str	r0, [sp, #52]	; 0x34
  40948e:	f7ff baf4 	b.w	408a7a <_svfprintf_r+0x8de>
  409492:	aa23      	add	r2, sp, #140	; 0x8c
  409494:	9909      	ldr	r1, [sp, #36]	; 0x24
  409496:	980a      	ldr	r0, [sp, #40]	; 0x28
  409498:	f003 fc80 	bl	40cd9c <__ssprint_r>
  40949c:	2800      	cmp	r0, #0
  40949e:	f47e af76 	bne.w	40838e <_svfprintf_r+0x1f2>
  4094a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4094a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4094a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4094aa:	9912      	ldr	r1, [sp, #72]	; 0x48
  4094ac:	f8c9 6000 	str.w	r6, [r9]
  4094b0:	3301      	adds	r3, #1
  4094b2:	440c      	add	r4, r1
  4094b4:	2b07      	cmp	r3, #7
  4094b6:	9425      	str	r4, [sp, #148]	; 0x94
  4094b8:	9324      	str	r3, [sp, #144]	; 0x90
  4094ba:	f8c9 1004 	str.w	r1, [r9, #4]
  4094be:	f77f a8fb 	ble.w	4086b8 <_svfprintf_r+0x51c>
  4094c2:	e411      	b.n	408ce8 <_svfprintf_r+0xb4c>
  4094c4:	272d      	movs	r7, #45	; 0x2d
  4094c6:	9308      	str	r3, [sp, #32]
  4094c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4094ca:	9307      	str	r3, [sp, #28]
  4094cc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4094d0:	f04f 0b00 	mov.w	fp, #0
  4094d4:	f7ff b829 	b.w	40852a <_svfprintf_r+0x38e>
  4094d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4094da:	1cdd      	adds	r5, r3, #3
  4094dc:	db1e      	blt.n	40951c <_svfprintf_r+0x1380>
  4094de:	459b      	cmp	fp, r3
  4094e0:	db1c      	blt.n	40951c <_svfprintf_r+0x1380>
  4094e2:	9313      	str	r3, [sp, #76]	; 0x4c
  4094e4:	e689      	b.n	4091fa <_svfprintf_r+0x105e>
  4094e6:	4623      	mov	r3, r4
  4094e8:	e677      	b.n	4091da <_svfprintf_r+0x103e>
  4094ea:	aa23      	add	r2, sp, #140	; 0x8c
  4094ec:	9909      	ldr	r1, [sp, #36]	; 0x24
  4094ee:	980a      	ldr	r0, [sp, #40]	; 0x28
  4094f0:	f003 fc54 	bl	40cd9c <__ssprint_r>
  4094f4:	2800      	cmp	r0, #0
  4094f6:	f47e af4a 	bne.w	40838e <_svfprintf_r+0x1f2>
  4094fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4094fc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409500:	e459      	b.n	408db6 <_svfprintf_r+0xc1a>
  409502:	4614      	mov	r4, r2
  409504:	3301      	adds	r3, #1
  409506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409508:	9324      	str	r3, [sp, #144]	; 0x90
  40950a:	442c      	add	r4, r5
  40950c:	2b07      	cmp	r3, #7
  40950e:	9425      	str	r4, [sp, #148]	; 0x94
  409510:	e889 0024 	stmia.w	r9, {r2, r5}
  409514:	dcbd      	bgt.n	409492 <_svfprintf_r+0x12f6>
  409516:	f109 0908 	add.w	r9, r9, #8
  40951a:	e7c6      	b.n	4094aa <_svfprintf_r+0x130e>
  40951c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40951e:	3a02      	subs	r2, #2
  409520:	9211      	str	r2, [sp, #68]	; 0x44
  409522:	3b01      	subs	r3, #1
  409524:	2b00      	cmp	r3, #0
  409526:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40952a:	931d      	str	r3, [sp, #116]	; 0x74
  40952c:	bfb8      	it	lt
  40952e:	425b      	neglt	r3, r3
  409530:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  409534:	bfb4      	ite	lt
  409536:	222d      	movlt	r2, #45	; 0x2d
  409538:	222b      	movge	r2, #43	; 0x2b
  40953a:	2b09      	cmp	r3, #9
  40953c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  409540:	f340 80f1 	ble.w	409726 <_svfprintf_r+0x158a>
  409544:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  409548:	4604      	mov	r4, r0
  40954a:	4a2d      	ldr	r2, [pc, #180]	; (409600 <_svfprintf_r+0x1464>)
  40954c:	fb82 2103 	smull	r2, r1, r2, r3
  409550:	17da      	asrs	r2, r3, #31
  409552:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  409556:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40955a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40955e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  409562:	2a09      	cmp	r2, #9
  409564:	4613      	mov	r3, r2
  409566:	f804 1d01 	strb.w	r1, [r4, #-1]!
  40956a:	dcee      	bgt.n	40954a <_svfprintf_r+0x13ae>
  40956c:	4621      	mov	r1, r4
  40956e:	3330      	adds	r3, #48	; 0x30
  409570:	b2da      	uxtb	r2, r3
  409572:	f801 2d01 	strb.w	r2, [r1, #-1]!
  409576:	4288      	cmp	r0, r1
  409578:	f240 813a 	bls.w	4097f0 <_svfprintf_r+0x1654>
  40957c:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  409580:	4623      	mov	r3, r4
  409582:	e001      	b.n	409588 <_svfprintf_r+0x13ec>
  409584:	f813 2b01 	ldrb.w	r2, [r3], #1
  409588:	f801 2b01 	strb.w	r2, [r1], #1
  40958c:	4298      	cmp	r0, r3
  40958e:	d1f9      	bne.n	409584 <_svfprintf_r+0x13e8>
  409590:	1c43      	adds	r3, r0, #1
  409592:	1b1b      	subs	r3, r3, r4
  409594:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  409598:	4413      	add	r3, r2
  40959a:	aa1f      	add	r2, sp, #124	; 0x7c
  40959c:	1a9b      	subs	r3, r3, r2
  40959e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4095a0:	9319      	str	r3, [sp, #100]	; 0x64
  4095a2:	2a01      	cmp	r2, #1
  4095a4:	4413      	add	r3, r2
  4095a6:	930d      	str	r3, [sp, #52]	; 0x34
  4095a8:	f340 80ea 	ble.w	409780 <_svfprintf_r+0x15e4>
  4095ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4095ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4095b0:	4413      	add	r3, r2
  4095b2:	2200      	movs	r2, #0
  4095b4:	930d      	str	r3, [sp, #52]	; 0x34
  4095b6:	9213      	str	r2, [sp, #76]	; 0x4c
  4095b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4095bc:	e62b      	b.n	409216 <_svfprintf_r+0x107a>
  4095be:	aa23      	add	r2, sp, #140	; 0x8c
  4095c0:	9909      	ldr	r1, [sp, #36]	; 0x24
  4095c2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4095c4:	f003 fbea 	bl	40cd9c <__ssprint_r>
  4095c8:	2800      	cmp	r0, #0
  4095ca:	f47e aee0 	bne.w	40838e <_svfprintf_r+0x1f2>
  4095ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4095d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4095d2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4095d6:	e4f6      	b.n	408fc6 <_svfprintf_r+0xe2a>
  4095d8:	2d06      	cmp	r5, #6
  4095da:	462b      	mov	r3, r5
  4095dc:	bf28      	it	cs
  4095de:	2306      	movcs	r3, #6
  4095e0:	930d      	str	r3, [sp, #52]	; 0x34
  4095e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4095e6:	46b3      	mov	fp, r6
  4095e8:	970e      	str	r7, [sp, #56]	; 0x38
  4095ea:	9613      	str	r6, [sp, #76]	; 0x4c
  4095ec:	4637      	mov	r7, r6
  4095ee:	9308      	str	r3, [sp, #32]
  4095f0:	4e04      	ldr	r6, [pc, #16]	; (409604 <_svfprintf_r+0x1468>)
  4095f2:	f7fe bf99 	b.w	408528 <_svfprintf_r+0x38c>
  4095f6:	bf00      	nop
  4095f8:	0040f800 	.word	0x0040f800
  4095fc:	0040f7b0 	.word	0x0040f7b0
  409600:	66666667 	.word	0x66666667
  409604:	0040f7f8 	.word	0x0040f7f8
  409608:	aa23      	add	r2, sp, #140	; 0x8c
  40960a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40960c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40960e:	f003 fbc5 	bl	40cd9c <__ssprint_r>
  409612:	2800      	cmp	r0, #0
  409614:	f47e aebb 	bne.w	40838e <_svfprintf_r+0x1f2>
  409618:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40961a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40961c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40961e:	1ad3      	subs	r3, r2, r3
  409620:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409624:	e4e7      	b.n	408ff6 <_svfprintf_r+0xe5a>
  409626:	f04f 0b06 	mov.w	fp, #6
  40962a:	e58f      	b.n	40914c <_svfprintf_r+0xfb0>
  40962c:	a821      	add	r0, sp, #132	; 0x84
  40962e:	a91e      	add	r1, sp, #120	; 0x78
  409630:	9004      	str	r0, [sp, #16]
  409632:	9103      	str	r1, [sp, #12]
  409634:	a81d      	add	r0, sp, #116	; 0x74
  409636:	2103      	movs	r1, #3
  409638:	9002      	str	r0, [sp, #8]
  40963a:	9a08      	ldr	r2, [sp, #32]
  40963c:	f8cd b004 	str.w	fp, [sp, #4]
  409640:	463b      	mov	r3, r7
  409642:	9100      	str	r1, [sp, #0]
  409644:	980a      	ldr	r0, [sp, #40]	; 0x28
  409646:	f001 f96f 	bl	40a928 <_dtoa_r>
  40964a:	465d      	mov	r5, fp
  40964c:	4606      	mov	r6, r0
  40964e:	eb00 040b 	add.w	r4, r0, fp
  409652:	e6f9      	b.n	409448 <_svfprintf_r+0x12ac>
  409654:	9307      	str	r3, [sp, #28]
  409656:	f7ff b959 	b.w	40890c <_svfprintf_r+0x770>
  40965a:	272d      	movs	r7, #45	; 0x2d
  40965c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  409660:	f7ff b8b2 	b.w	4087c8 <_svfprintf_r+0x62c>
  409664:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409666:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409668:	4413      	add	r3, r2
  40966a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40966c:	930d      	str	r3, [sp, #52]	; 0x34
  40966e:	2a00      	cmp	r2, #0
  409670:	dd7e      	ble.n	409770 <_svfprintf_r+0x15d4>
  409672:	2267      	movs	r2, #103	; 0x67
  409674:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409678:	9211      	str	r2, [sp, #68]	; 0x44
  40967a:	e5cc      	b.n	409216 <_svfprintf_r+0x107a>
  40967c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  409680:	970e      	str	r7, [sp, #56]	; 0x38
  409682:	9308      	str	r3, [sp, #32]
  409684:	950d      	str	r5, [sp, #52]	; 0x34
  409686:	4683      	mov	fp, r0
  409688:	9013      	str	r0, [sp, #76]	; 0x4c
  40968a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40968e:	f7fe bf4b 	b.w	408528 <_svfprintf_r+0x38c>
  409692:	9b07      	ldr	r3, [sp, #28]
  409694:	07db      	lsls	r3, r3, #31
  409696:	465f      	mov	r7, fp
  409698:	d505      	bpl.n	4096a6 <_svfprintf_r+0x150a>
  40969a:	ae40      	add	r6, sp, #256	; 0x100
  40969c:	2330      	movs	r3, #48	; 0x30
  40969e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4096a2:	f7fe bf37 	b.w	408514 <_svfprintf_r+0x378>
  4096a6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4096aa:	ae30      	add	r6, sp, #192	; 0xc0
  4096ac:	f7fe bf35 	b.w	40851a <_svfprintf_r+0x37e>
  4096b0:	2b00      	cmp	r3, #0
  4096b2:	dd7d      	ble.n	4097b0 <_svfprintf_r+0x1614>
  4096b4:	f1bb 0f00 	cmp.w	fp, #0
  4096b8:	d13d      	bne.n	409736 <_svfprintf_r+0x159a>
  4096ba:	9a07      	ldr	r2, [sp, #28]
  4096bc:	07d4      	lsls	r4, r2, #31
  4096be:	d43a      	bmi.n	409736 <_svfprintf_r+0x159a>
  4096c0:	461a      	mov	r2, r3
  4096c2:	920d      	str	r2, [sp, #52]	; 0x34
  4096c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4096c8:	e5a5      	b.n	409216 <_svfprintf_r+0x107a>
  4096ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4096cc:	2b47      	cmp	r3, #71	; 0x47
  4096ce:	f47f ad70 	bne.w	4091b2 <_svfprintf_r+0x1016>
  4096d2:	9b07      	ldr	r3, [sp, #28]
  4096d4:	07db      	lsls	r3, r3, #31
  4096d6:	f53f aeb1 	bmi.w	40943c <_svfprintf_r+0x12a0>
  4096da:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4096dc:	1b9b      	subs	r3, r3, r6
  4096de:	9312      	str	r3, [sp, #72]	; 0x48
  4096e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4096e2:	2b47      	cmp	r3, #71	; 0x47
  4096e4:	f43f aef8 	beq.w	4094d8 <_svfprintf_r+0x133c>
  4096e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4096ea:	e71a      	b.n	409522 <_svfprintf_r+0x1386>
  4096ec:	aa23      	add	r2, sp, #140	; 0x8c
  4096ee:	9909      	ldr	r1, [sp, #36]	; 0x24
  4096f0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4096f2:	f003 fb53 	bl	40cd9c <__ssprint_r>
  4096f6:	2800      	cmp	r0, #0
  4096f8:	f47e ae49 	bne.w	40838e <_svfprintf_r+0x1f2>
  4096fc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4096fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409700:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409702:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  409706:	e631      	b.n	40936c <_svfprintf_r+0x11d0>
  409708:	46a0      	mov	r8, r4
  40970a:	2500      	movs	r5, #0
  40970c:	f7fe bda1 	b.w	408252 <_svfprintf_r+0xb6>
  409710:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409712:	e562      	b.n	4091da <_svfprintf_r+0x103e>
  409714:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409718:	4413      	add	r3, r2
  40971a:	2267      	movs	r2, #103	; 0x67
  40971c:	930d      	str	r3, [sp, #52]	; 0x34
  40971e:	9211      	str	r2, [sp, #68]	; 0x44
  409720:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409724:	e577      	b.n	409216 <_svfprintf_r+0x107a>
  409726:	3330      	adds	r3, #48	; 0x30
  409728:	2230      	movs	r2, #48	; 0x30
  40972a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40972e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  409732:	ab20      	add	r3, sp, #128	; 0x80
  409734:	e731      	b.n	40959a <_svfprintf_r+0x13fe>
  409736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409738:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40973a:	189d      	adds	r5, r3, r2
  40973c:	eb05 030b 	add.w	r3, r5, fp
  409740:	930d      	str	r3, [sp, #52]	; 0x34
  409742:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409746:	e566      	b.n	409216 <_svfprintf_r+0x107a>
  409748:	9808      	ldr	r0, [sp, #32]
  40974a:	4639      	mov	r1, r7
  40974c:	2200      	movs	r2, #0
  40974e:	2300      	movs	r3, #0
  409750:	f004 f990 	bl	40da74 <__aeabi_dcmpeq>
  409754:	2800      	cmp	r0, #0
  409756:	f47f ae7b 	bne.w	409450 <_svfprintf_r+0x12b4>
  40975a:	f1c5 0501 	rsb	r5, r5, #1
  40975e:	951d      	str	r5, [sp, #116]	; 0x74
  409760:	442c      	add	r4, r5
  409762:	e527      	b.n	4091b4 <_svfprintf_r+0x1018>
  409764:	4e32      	ldr	r6, [pc, #200]	; (409830 <_svfprintf_r+0x1694>)
  409766:	4b33      	ldr	r3, [pc, #204]	; (409834 <_svfprintf_r+0x1698>)
  409768:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40976c:	f7ff b82e 	b.w	4087cc <_svfprintf_r+0x630>
  409770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409772:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409774:	f1c3 0301 	rsb	r3, r3, #1
  409778:	441a      	add	r2, r3
  40977a:	4613      	mov	r3, r2
  40977c:	920d      	str	r2, [sp, #52]	; 0x34
  40977e:	e778      	b.n	409672 <_svfprintf_r+0x14d6>
  409780:	9b07      	ldr	r3, [sp, #28]
  409782:	f013 0301 	ands.w	r3, r3, #1
  409786:	f47f af11 	bne.w	4095ac <_svfprintf_r+0x1410>
  40978a:	9313      	str	r3, [sp, #76]	; 0x4c
  40978c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40978e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409792:	e540      	b.n	409216 <_svfprintf_r+0x107a>
  409794:	980e      	ldr	r0, [sp, #56]	; 0x38
  409796:	f898 3001 	ldrb.w	r3, [r8, #1]
  40979a:	6805      	ldr	r5, [r0, #0]
  40979c:	3004      	adds	r0, #4
  40979e:	2d00      	cmp	r5, #0
  4097a0:	900e      	str	r0, [sp, #56]	; 0x38
  4097a2:	46a0      	mov	r8, r4
  4097a4:	f6be ad53 	bge.w	40824e <_svfprintf_r+0xb2>
  4097a8:	f04f 35ff 	mov.w	r5, #4294967295
  4097ac:	f7fe bd4f 	b.w	40824e <_svfprintf_r+0xb2>
  4097b0:	f1bb 0f00 	cmp.w	fp, #0
  4097b4:	d102      	bne.n	4097bc <_svfprintf_r+0x1620>
  4097b6:	9b07      	ldr	r3, [sp, #28]
  4097b8:	07d8      	lsls	r0, r3, #31
  4097ba:	d507      	bpl.n	4097cc <_svfprintf_r+0x1630>
  4097bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4097be:	1c5d      	adds	r5, r3, #1
  4097c0:	eb05 030b 	add.w	r3, r5, fp
  4097c4:	930d      	str	r3, [sp, #52]	; 0x34
  4097c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4097ca:	e524      	b.n	409216 <_svfprintf_r+0x107a>
  4097cc:	2301      	movs	r3, #1
  4097ce:	930d      	str	r3, [sp, #52]	; 0x34
  4097d0:	e521      	b.n	409216 <_svfprintf_r+0x107a>
  4097d2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4097d6:	f7ff b921 	b.w	408a1c <_svfprintf_r+0x880>
  4097da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4097dc:	230c      	movs	r3, #12
  4097de:	6013      	str	r3, [r2, #0]
  4097e0:	f04f 30ff 	mov.w	r0, #4294967295
  4097e4:	f7fe bddc 	b.w	4083a0 <_svfprintf_r+0x204>
  4097e8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4097ec:	f7ff b8f9 	b.w	4089e2 <_svfprintf_r+0x846>
  4097f0:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4097f4:	e6d1      	b.n	40959a <_svfprintf_r+0x13fe>
  4097f6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4097fa:	f7fe bdd9 	b.w	4083b0 <_svfprintf_r+0x214>
  4097fe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409802:	f7ff b857 	b.w	4088b4 <_svfprintf_r+0x718>
  409806:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40980a:	f7ff b825 	b.w	408858 <_svfprintf_r+0x6bc>
  40980e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409812:	f7ff b94c 	b.w	408aae <_svfprintf_r+0x912>
  409816:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40981a:	f7fe bff3 	b.w	408804 <_svfprintf_r+0x668>
  40981e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  409822:	f7fe bfa3 	b.w	40876c <_svfprintf_r+0x5d0>
  409826:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40982a:	f7fe be33 	b.w	408494 <_svfprintf_r+0x2f8>
  40982e:	bf00      	nop
  409830:	0040f7cc 	.word	0x0040f7cc
  409834:	0040f7c8 	.word	0x0040f7c8

00409838 <__sprint_r.part.0>:
  409838:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40983a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40983e:	049c      	lsls	r4, r3, #18
  409840:	4692      	mov	sl, r2
  409842:	d52c      	bpl.n	40989e <__sprint_r.part.0+0x66>
  409844:	6893      	ldr	r3, [r2, #8]
  409846:	6812      	ldr	r2, [r2, #0]
  409848:	b33b      	cbz	r3, 40989a <__sprint_r.part.0+0x62>
  40984a:	460f      	mov	r7, r1
  40984c:	4680      	mov	r8, r0
  40984e:	f102 0908 	add.w	r9, r2, #8
  409852:	e919 0060 	ldmdb	r9, {r5, r6}
  409856:	08b6      	lsrs	r6, r6, #2
  409858:	d017      	beq.n	40988a <__sprint_r.part.0+0x52>
  40985a:	3d04      	subs	r5, #4
  40985c:	2400      	movs	r4, #0
  40985e:	e001      	b.n	409864 <__sprint_r.part.0+0x2c>
  409860:	42a6      	cmp	r6, r4
  409862:	d010      	beq.n	409886 <__sprint_r.part.0+0x4e>
  409864:	463a      	mov	r2, r7
  409866:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40986a:	4640      	mov	r0, r8
  40986c:	f002 f92a 	bl	40bac4 <_fputwc_r>
  409870:	1c43      	adds	r3, r0, #1
  409872:	f104 0401 	add.w	r4, r4, #1
  409876:	d1f3      	bne.n	409860 <__sprint_r.part.0+0x28>
  409878:	2300      	movs	r3, #0
  40987a:	f8ca 3008 	str.w	r3, [sl, #8]
  40987e:	f8ca 3004 	str.w	r3, [sl, #4]
  409882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409886:	f8da 3008 	ldr.w	r3, [sl, #8]
  40988a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40988e:	f8ca 3008 	str.w	r3, [sl, #8]
  409892:	f109 0908 	add.w	r9, r9, #8
  409896:	2b00      	cmp	r3, #0
  409898:	d1db      	bne.n	409852 <__sprint_r.part.0+0x1a>
  40989a:	2000      	movs	r0, #0
  40989c:	e7ec      	b.n	409878 <__sprint_r.part.0+0x40>
  40989e:	f002 fa59 	bl	40bd54 <__sfvwrite_r>
  4098a2:	2300      	movs	r3, #0
  4098a4:	f8ca 3008 	str.w	r3, [sl, #8]
  4098a8:	f8ca 3004 	str.w	r3, [sl, #4]
  4098ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004098b0 <_vfiprintf_r>:
  4098b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4098b4:	b0ab      	sub	sp, #172	; 0xac
  4098b6:	461c      	mov	r4, r3
  4098b8:	9100      	str	r1, [sp, #0]
  4098ba:	4690      	mov	r8, r2
  4098bc:	9304      	str	r3, [sp, #16]
  4098be:	9005      	str	r0, [sp, #20]
  4098c0:	b118      	cbz	r0, 4098ca <_vfiprintf_r+0x1a>
  4098c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4098c4:	2b00      	cmp	r3, #0
  4098c6:	f000 80de 	beq.w	409a86 <_vfiprintf_r+0x1d6>
  4098ca:	9800      	ldr	r0, [sp, #0]
  4098cc:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  4098d0:	b28a      	uxth	r2, r1
  4098d2:	0495      	lsls	r5, r2, #18
  4098d4:	d407      	bmi.n	4098e6 <_vfiprintf_r+0x36>
  4098d6:	6e43      	ldr	r3, [r0, #100]	; 0x64
  4098d8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  4098dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4098e0:	8182      	strh	r2, [r0, #12]
  4098e2:	6643      	str	r3, [r0, #100]	; 0x64
  4098e4:	b292      	uxth	r2, r2
  4098e6:	0711      	lsls	r1, r2, #28
  4098e8:	f140 80b1 	bpl.w	409a4e <_vfiprintf_r+0x19e>
  4098ec:	9b00      	ldr	r3, [sp, #0]
  4098ee:	691b      	ldr	r3, [r3, #16]
  4098f0:	2b00      	cmp	r3, #0
  4098f2:	f000 80ac 	beq.w	409a4e <_vfiprintf_r+0x19e>
  4098f6:	f002 021a 	and.w	r2, r2, #26
  4098fa:	2a0a      	cmp	r2, #10
  4098fc:	f000 80b5 	beq.w	409a6a <_vfiprintf_r+0x1ba>
  409900:	2300      	movs	r3, #0
  409902:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  409906:	9302      	str	r3, [sp, #8]
  409908:	930f      	str	r3, [sp, #60]	; 0x3c
  40990a:	930e      	str	r3, [sp, #56]	; 0x38
  40990c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  409910:	46da      	mov	sl, fp
  409912:	f898 3000 	ldrb.w	r3, [r8]
  409916:	4644      	mov	r4, r8
  409918:	b1fb      	cbz	r3, 40995a <_vfiprintf_r+0xaa>
  40991a:	2b25      	cmp	r3, #37	; 0x25
  40991c:	d102      	bne.n	409924 <_vfiprintf_r+0x74>
  40991e:	e01c      	b.n	40995a <_vfiprintf_r+0xaa>
  409920:	2b25      	cmp	r3, #37	; 0x25
  409922:	d003      	beq.n	40992c <_vfiprintf_r+0x7c>
  409924:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  409928:	2b00      	cmp	r3, #0
  40992a:	d1f9      	bne.n	409920 <_vfiprintf_r+0x70>
  40992c:	ebc8 0504 	rsb	r5, r8, r4
  409930:	b19d      	cbz	r5, 40995a <_vfiprintf_r+0xaa>
  409932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409934:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409936:	f8ca 8000 	str.w	r8, [sl]
  40993a:	3301      	adds	r3, #1
  40993c:	442a      	add	r2, r5
  40993e:	2b07      	cmp	r3, #7
  409940:	f8ca 5004 	str.w	r5, [sl, #4]
  409944:	920f      	str	r2, [sp, #60]	; 0x3c
  409946:	930e      	str	r3, [sp, #56]	; 0x38
  409948:	dd7b      	ble.n	409a42 <_vfiprintf_r+0x192>
  40994a:	2a00      	cmp	r2, #0
  40994c:	f040 8528 	bne.w	40a3a0 <_vfiprintf_r+0xaf0>
  409950:	9b02      	ldr	r3, [sp, #8]
  409952:	920e      	str	r2, [sp, #56]	; 0x38
  409954:	442b      	add	r3, r5
  409956:	46da      	mov	sl, fp
  409958:	9302      	str	r3, [sp, #8]
  40995a:	7823      	ldrb	r3, [r4, #0]
  40995c:	2b00      	cmp	r3, #0
  40995e:	f000 843e 	beq.w	40a1de <_vfiprintf_r+0x92e>
  409962:	2100      	movs	r1, #0
  409964:	f04f 0300 	mov.w	r3, #0
  409968:	f04f 32ff 	mov.w	r2, #4294967295
  40996c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409970:	f104 0801 	add.w	r8, r4, #1
  409974:	7863      	ldrb	r3, [r4, #1]
  409976:	9201      	str	r2, [sp, #4]
  409978:	4608      	mov	r0, r1
  40997a:	460e      	mov	r6, r1
  40997c:	460c      	mov	r4, r1
  40997e:	f108 0801 	add.w	r8, r8, #1
  409982:	f1a3 0220 	sub.w	r2, r3, #32
  409986:	2a58      	cmp	r2, #88	; 0x58
  409988:	f200 8393 	bhi.w	40a0b2 <_vfiprintf_r+0x802>
  40998c:	e8df f012 	tbh	[pc, r2, lsl #1]
  409990:	03910346 	.word	0x03910346
  409994:	034e0391 	.word	0x034e0391
  409998:	03910391 	.word	0x03910391
  40999c:	03910391 	.word	0x03910391
  4099a0:	03910391 	.word	0x03910391
  4099a4:	02670289 	.word	0x02670289
  4099a8:	00800391 	.word	0x00800391
  4099ac:	0391026c 	.word	0x0391026c
  4099b0:	025901c6 	.word	0x025901c6
  4099b4:	02590259 	.word	0x02590259
  4099b8:	02590259 	.word	0x02590259
  4099bc:	02590259 	.word	0x02590259
  4099c0:	02590259 	.word	0x02590259
  4099c4:	03910391 	.word	0x03910391
  4099c8:	03910391 	.word	0x03910391
  4099cc:	03910391 	.word	0x03910391
  4099d0:	03910391 	.word	0x03910391
  4099d4:	03910391 	.word	0x03910391
  4099d8:	039101cb 	.word	0x039101cb
  4099dc:	03910391 	.word	0x03910391
  4099e0:	03910391 	.word	0x03910391
  4099e4:	03910391 	.word	0x03910391
  4099e8:	03910391 	.word	0x03910391
  4099ec:	02140391 	.word	0x02140391
  4099f0:	03910391 	.word	0x03910391
  4099f4:	03910391 	.word	0x03910391
  4099f8:	02ee0391 	.word	0x02ee0391
  4099fc:	03910391 	.word	0x03910391
  409a00:	03910311 	.word	0x03910311
  409a04:	03910391 	.word	0x03910391
  409a08:	03910391 	.word	0x03910391
  409a0c:	03910391 	.word	0x03910391
  409a10:	03910391 	.word	0x03910391
  409a14:	03340391 	.word	0x03340391
  409a18:	0391038a 	.word	0x0391038a
  409a1c:	03910391 	.word	0x03910391
  409a20:	038a0367 	.word	0x038a0367
  409a24:	03910391 	.word	0x03910391
  409a28:	0391036c 	.word	0x0391036c
  409a2c:	02950379 	.word	0x02950379
  409a30:	02e90085 	.word	0x02e90085
  409a34:	029b0391 	.word	0x029b0391
  409a38:	02ba0391 	.word	0x02ba0391
  409a3c:	03910391 	.word	0x03910391
  409a40:	0353      	.short	0x0353
  409a42:	f10a 0a08 	add.w	sl, sl, #8
  409a46:	9b02      	ldr	r3, [sp, #8]
  409a48:	442b      	add	r3, r5
  409a4a:	9302      	str	r3, [sp, #8]
  409a4c:	e785      	b.n	40995a <_vfiprintf_r+0xaa>
  409a4e:	9900      	ldr	r1, [sp, #0]
  409a50:	9805      	ldr	r0, [sp, #20]
  409a52:	f000 fe61 	bl	40a718 <__swsetup_r>
  409a56:	2800      	cmp	r0, #0
  409a58:	f040 8558 	bne.w	40a50c <_vfiprintf_r+0xc5c>
  409a5c:	9b00      	ldr	r3, [sp, #0]
  409a5e:	899a      	ldrh	r2, [r3, #12]
  409a60:	f002 021a 	and.w	r2, r2, #26
  409a64:	2a0a      	cmp	r2, #10
  409a66:	f47f af4b 	bne.w	409900 <_vfiprintf_r+0x50>
  409a6a:	9900      	ldr	r1, [sp, #0]
  409a6c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  409a70:	2b00      	cmp	r3, #0
  409a72:	f6ff af45 	blt.w	409900 <_vfiprintf_r+0x50>
  409a76:	4623      	mov	r3, r4
  409a78:	4642      	mov	r2, r8
  409a7a:	9805      	ldr	r0, [sp, #20]
  409a7c:	f000 fe16 	bl	40a6ac <__sbprintf>
  409a80:	b02b      	add	sp, #172	; 0xac
  409a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a86:	f001 ffb3 	bl	40b9f0 <__sinit>
  409a8a:	e71e      	b.n	4098ca <_vfiprintf_r+0x1a>
  409a8c:	4264      	negs	r4, r4
  409a8e:	9304      	str	r3, [sp, #16]
  409a90:	f046 0604 	orr.w	r6, r6, #4
  409a94:	f898 3000 	ldrb.w	r3, [r8]
  409a98:	e771      	b.n	40997e <_vfiprintf_r+0xce>
  409a9a:	2130      	movs	r1, #48	; 0x30
  409a9c:	9804      	ldr	r0, [sp, #16]
  409a9e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  409aa2:	9901      	ldr	r1, [sp, #4]
  409aa4:	9406      	str	r4, [sp, #24]
  409aa6:	f04f 0300 	mov.w	r3, #0
  409aaa:	2278      	movs	r2, #120	; 0x78
  409aac:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409ab0:	2900      	cmp	r1, #0
  409ab2:	4603      	mov	r3, r0
  409ab4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  409ab8:	6804      	ldr	r4, [r0, #0]
  409aba:	f103 0304 	add.w	r3, r3, #4
  409abe:	f04f 0500 	mov.w	r5, #0
  409ac2:	f046 0202 	orr.w	r2, r6, #2
  409ac6:	f2c0 8525 	blt.w	40a514 <_vfiprintf_r+0xc64>
  409aca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409ace:	ea54 0205 	orrs.w	r2, r4, r5
  409ad2:	f046 0602 	orr.w	r6, r6, #2
  409ad6:	9304      	str	r3, [sp, #16]
  409ad8:	f040 84bf 	bne.w	40a45a <_vfiprintf_r+0xbaa>
  409adc:	48b3      	ldr	r0, [pc, #716]	; (409dac <_vfiprintf_r+0x4fc>)
  409ade:	9b01      	ldr	r3, [sp, #4]
  409ae0:	2b00      	cmp	r3, #0
  409ae2:	f040 841c 	bne.w	40a31e <_vfiprintf_r+0xa6e>
  409ae6:	4699      	mov	r9, r3
  409ae8:	2300      	movs	r3, #0
  409aea:	9301      	str	r3, [sp, #4]
  409aec:	9303      	str	r3, [sp, #12]
  409aee:	465f      	mov	r7, fp
  409af0:	9b01      	ldr	r3, [sp, #4]
  409af2:	9a03      	ldr	r2, [sp, #12]
  409af4:	4293      	cmp	r3, r2
  409af6:	bfb8      	it	lt
  409af8:	4613      	movlt	r3, r2
  409afa:	461d      	mov	r5, r3
  409afc:	f1b9 0f00 	cmp.w	r9, #0
  409b00:	d000      	beq.n	409b04 <_vfiprintf_r+0x254>
  409b02:	3501      	adds	r5, #1
  409b04:	f016 0302 	ands.w	r3, r6, #2
  409b08:	9307      	str	r3, [sp, #28]
  409b0a:	bf18      	it	ne
  409b0c:	3502      	addne	r5, #2
  409b0e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  409b12:	9308      	str	r3, [sp, #32]
  409b14:	f040 82f1 	bne.w	40a0fa <_vfiprintf_r+0x84a>
  409b18:	9b06      	ldr	r3, [sp, #24]
  409b1a:	1b5c      	subs	r4, r3, r5
  409b1c:	2c00      	cmp	r4, #0
  409b1e:	f340 82ec 	ble.w	40a0fa <_vfiprintf_r+0x84a>
  409b22:	2c10      	cmp	r4, #16
  409b24:	f340 8556 	ble.w	40a5d4 <_vfiprintf_r+0xd24>
  409b28:	f8df 9284 	ldr.w	r9, [pc, #644]	; 409db0 <_vfiprintf_r+0x500>
  409b2c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  409b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409b32:	46d4      	mov	ip, sl
  409b34:	2310      	movs	r3, #16
  409b36:	46c2      	mov	sl, r8
  409b38:	4670      	mov	r0, lr
  409b3a:	46a8      	mov	r8, r5
  409b3c:	464d      	mov	r5, r9
  409b3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409b42:	e007      	b.n	409b54 <_vfiprintf_r+0x2a4>
  409b44:	f100 0e02 	add.w	lr, r0, #2
  409b48:	f10c 0c08 	add.w	ip, ip, #8
  409b4c:	4608      	mov	r0, r1
  409b4e:	3c10      	subs	r4, #16
  409b50:	2c10      	cmp	r4, #16
  409b52:	dd13      	ble.n	409b7c <_vfiprintf_r+0x2cc>
  409b54:	1c41      	adds	r1, r0, #1
  409b56:	3210      	adds	r2, #16
  409b58:	2907      	cmp	r1, #7
  409b5a:	920f      	str	r2, [sp, #60]	; 0x3c
  409b5c:	f8cc 5000 	str.w	r5, [ip]
  409b60:	f8cc 3004 	str.w	r3, [ip, #4]
  409b64:	910e      	str	r1, [sp, #56]	; 0x38
  409b66:	dded      	ble.n	409b44 <_vfiprintf_r+0x294>
  409b68:	2a00      	cmp	r2, #0
  409b6a:	f040 82b7 	bne.w	40a0dc <_vfiprintf_r+0x82c>
  409b6e:	3c10      	subs	r4, #16
  409b70:	2c10      	cmp	r4, #16
  409b72:	4610      	mov	r0, r2
  409b74:	f04f 0e01 	mov.w	lr, #1
  409b78:	46dc      	mov	ip, fp
  409b7a:	dceb      	bgt.n	409b54 <_vfiprintf_r+0x2a4>
  409b7c:	46a9      	mov	r9, r5
  409b7e:	4670      	mov	r0, lr
  409b80:	4645      	mov	r5, r8
  409b82:	46d0      	mov	r8, sl
  409b84:	46e2      	mov	sl, ip
  409b86:	4422      	add	r2, r4
  409b88:	2807      	cmp	r0, #7
  409b8a:	920f      	str	r2, [sp, #60]	; 0x3c
  409b8c:	f8ca 9000 	str.w	r9, [sl]
  409b90:	f8ca 4004 	str.w	r4, [sl, #4]
  409b94:	900e      	str	r0, [sp, #56]	; 0x38
  409b96:	f300 8375 	bgt.w	40a284 <_vfiprintf_r+0x9d4>
  409b9a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  409b9e:	f10a 0a08 	add.w	sl, sl, #8
  409ba2:	f100 0e01 	add.w	lr, r0, #1
  409ba6:	2b00      	cmp	r3, #0
  409ba8:	f040 82b0 	bne.w	40a10c <_vfiprintf_r+0x85c>
  409bac:	9b07      	ldr	r3, [sp, #28]
  409bae:	2b00      	cmp	r3, #0
  409bb0:	f000 82c3 	beq.w	40a13a <_vfiprintf_r+0x88a>
  409bb4:	3202      	adds	r2, #2
  409bb6:	a90c      	add	r1, sp, #48	; 0x30
  409bb8:	2302      	movs	r3, #2
  409bba:	f1be 0f07 	cmp.w	lr, #7
  409bbe:	920f      	str	r2, [sp, #60]	; 0x3c
  409bc0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409bc4:	e88a 000a 	stmia.w	sl, {r1, r3}
  409bc8:	f340 8378 	ble.w	40a2bc <_vfiprintf_r+0xa0c>
  409bcc:	2a00      	cmp	r2, #0
  409bce:	f040 840a 	bne.w	40a3e6 <_vfiprintf_r+0xb36>
  409bd2:	9b08      	ldr	r3, [sp, #32]
  409bd4:	2b80      	cmp	r3, #128	; 0x80
  409bd6:	f04f 0e01 	mov.w	lr, #1
  409bda:	4610      	mov	r0, r2
  409bdc:	46da      	mov	sl, fp
  409bde:	f040 82b0 	bne.w	40a142 <_vfiprintf_r+0x892>
  409be2:	9b06      	ldr	r3, [sp, #24]
  409be4:	1b5c      	subs	r4, r3, r5
  409be6:	2c00      	cmp	r4, #0
  409be8:	f340 82ab 	ble.w	40a142 <_vfiprintf_r+0x892>
  409bec:	2c10      	cmp	r4, #16
  409bee:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 409db4 <_vfiprintf_r+0x504>
  409bf2:	f340 850b 	ble.w	40a60c <_vfiprintf_r+0xd5c>
  409bf6:	46d6      	mov	lr, sl
  409bf8:	2310      	movs	r3, #16
  409bfa:	46c2      	mov	sl, r8
  409bfc:	46a8      	mov	r8, r5
  409bfe:	464d      	mov	r5, r9
  409c00:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409c04:	e007      	b.n	409c16 <_vfiprintf_r+0x366>
  409c06:	f100 0c02 	add.w	ip, r0, #2
  409c0a:	f10e 0e08 	add.w	lr, lr, #8
  409c0e:	4608      	mov	r0, r1
  409c10:	3c10      	subs	r4, #16
  409c12:	2c10      	cmp	r4, #16
  409c14:	dd13      	ble.n	409c3e <_vfiprintf_r+0x38e>
  409c16:	1c41      	adds	r1, r0, #1
  409c18:	3210      	adds	r2, #16
  409c1a:	2907      	cmp	r1, #7
  409c1c:	920f      	str	r2, [sp, #60]	; 0x3c
  409c1e:	f8ce 5000 	str.w	r5, [lr]
  409c22:	f8ce 3004 	str.w	r3, [lr, #4]
  409c26:	910e      	str	r1, [sp, #56]	; 0x38
  409c28:	dded      	ble.n	409c06 <_vfiprintf_r+0x356>
  409c2a:	2a00      	cmp	r2, #0
  409c2c:	f040 8315 	bne.w	40a25a <_vfiprintf_r+0x9aa>
  409c30:	3c10      	subs	r4, #16
  409c32:	2c10      	cmp	r4, #16
  409c34:	f04f 0c01 	mov.w	ip, #1
  409c38:	4610      	mov	r0, r2
  409c3a:	46de      	mov	lr, fp
  409c3c:	dceb      	bgt.n	409c16 <_vfiprintf_r+0x366>
  409c3e:	46a9      	mov	r9, r5
  409c40:	4645      	mov	r5, r8
  409c42:	46d0      	mov	r8, sl
  409c44:	46f2      	mov	sl, lr
  409c46:	4422      	add	r2, r4
  409c48:	f1bc 0f07 	cmp.w	ip, #7
  409c4c:	920f      	str	r2, [sp, #60]	; 0x3c
  409c4e:	f8ca 9000 	str.w	r9, [sl]
  409c52:	f8ca 4004 	str.w	r4, [sl, #4]
  409c56:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  409c5a:	f300 83d2 	bgt.w	40a402 <_vfiprintf_r+0xb52>
  409c5e:	9b01      	ldr	r3, [sp, #4]
  409c60:	9903      	ldr	r1, [sp, #12]
  409c62:	1a5c      	subs	r4, r3, r1
  409c64:	2c00      	cmp	r4, #0
  409c66:	f10a 0a08 	add.w	sl, sl, #8
  409c6a:	f10c 0e01 	add.w	lr, ip, #1
  409c6e:	4660      	mov	r0, ip
  409c70:	f300 826d 	bgt.w	40a14e <_vfiprintf_r+0x89e>
  409c74:	9903      	ldr	r1, [sp, #12]
  409c76:	f8ca 7000 	str.w	r7, [sl]
  409c7a:	440a      	add	r2, r1
  409c7c:	f1be 0f07 	cmp.w	lr, #7
  409c80:	920f      	str	r2, [sp, #60]	; 0x3c
  409c82:	f8ca 1004 	str.w	r1, [sl, #4]
  409c86:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  409c8a:	f340 82ce 	ble.w	40a22a <_vfiprintf_r+0x97a>
  409c8e:	2a00      	cmp	r2, #0
  409c90:	f040 833a 	bne.w	40a308 <_vfiprintf_r+0xa58>
  409c94:	0770      	lsls	r0, r6, #29
  409c96:	920e      	str	r2, [sp, #56]	; 0x38
  409c98:	d538      	bpl.n	409d0c <_vfiprintf_r+0x45c>
  409c9a:	9b06      	ldr	r3, [sp, #24]
  409c9c:	1b5c      	subs	r4, r3, r5
  409c9e:	2c00      	cmp	r4, #0
  409ca0:	dd34      	ble.n	409d0c <_vfiprintf_r+0x45c>
  409ca2:	46da      	mov	sl, fp
  409ca4:	2c10      	cmp	r4, #16
  409ca6:	f340 84ab 	ble.w	40a600 <_vfiprintf_r+0xd50>
  409caa:	f8df 9104 	ldr.w	r9, [pc, #260]	; 409db0 <_vfiprintf_r+0x500>
  409cae:	990e      	ldr	r1, [sp, #56]	; 0x38
  409cb0:	464f      	mov	r7, r9
  409cb2:	2610      	movs	r6, #16
  409cb4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  409cb8:	e006      	b.n	409cc8 <_vfiprintf_r+0x418>
  409cba:	1c88      	adds	r0, r1, #2
  409cbc:	f10a 0a08 	add.w	sl, sl, #8
  409cc0:	4619      	mov	r1, r3
  409cc2:	3c10      	subs	r4, #16
  409cc4:	2c10      	cmp	r4, #16
  409cc6:	dd13      	ble.n	409cf0 <_vfiprintf_r+0x440>
  409cc8:	1c4b      	adds	r3, r1, #1
  409cca:	3210      	adds	r2, #16
  409ccc:	2b07      	cmp	r3, #7
  409cce:	920f      	str	r2, [sp, #60]	; 0x3c
  409cd0:	f8ca 7000 	str.w	r7, [sl]
  409cd4:	f8ca 6004 	str.w	r6, [sl, #4]
  409cd8:	930e      	str	r3, [sp, #56]	; 0x38
  409cda:	ddee      	ble.n	409cba <_vfiprintf_r+0x40a>
  409cdc:	2a00      	cmp	r2, #0
  409cde:	f040 828e 	bne.w	40a1fe <_vfiprintf_r+0x94e>
  409ce2:	3c10      	subs	r4, #16
  409ce4:	2c10      	cmp	r4, #16
  409ce6:	f04f 0001 	mov.w	r0, #1
  409cea:	4611      	mov	r1, r2
  409cec:	46da      	mov	sl, fp
  409cee:	dceb      	bgt.n	409cc8 <_vfiprintf_r+0x418>
  409cf0:	46b9      	mov	r9, r7
  409cf2:	4422      	add	r2, r4
  409cf4:	2807      	cmp	r0, #7
  409cf6:	920f      	str	r2, [sp, #60]	; 0x3c
  409cf8:	f8ca 9000 	str.w	r9, [sl]
  409cfc:	f8ca 4004 	str.w	r4, [sl, #4]
  409d00:	900e      	str	r0, [sp, #56]	; 0x38
  409d02:	f340 829b 	ble.w	40a23c <_vfiprintf_r+0x98c>
  409d06:	2a00      	cmp	r2, #0
  409d08:	f040 8425 	bne.w	40a556 <_vfiprintf_r+0xca6>
  409d0c:	9b02      	ldr	r3, [sp, #8]
  409d0e:	9a06      	ldr	r2, [sp, #24]
  409d10:	42aa      	cmp	r2, r5
  409d12:	bfac      	ite	ge
  409d14:	189b      	addge	r3, r3, r2
  409d16:	195b      	addlt	r3, r3, r5
  409d18:	9302      	str	r3, [sp, #8]
  409d1a:	e299      	b.n	40a250 <_vfiprintf_r+0x9a0>
  409d1c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  409d20:	f898 3000 	ldrb.w	r3, [r8]
  409d24:	e62b      	b.n	40997e <_vfiprintf_r+0xce>
  409d26:	9406      	str	r4, [sp, #24]
  409d28:	2900      	cmp	r1, #0
  409d2a:	f040 84af 	bne.w	40a68c <_vfiprintf_r+0xddc>
  409d2e:	f046 0610 	orr.w	r6, r6, #16
  409d32:	06b3      	lsls	r3, r6, #26
  409d34:	f140 8312 	bpl.w	40a35c <_vfiprintf_r+0xaac>
  409d38:	9904      	ldr	r1, [sp, #16]
  409d3a:	3107      	adds	r1, #7
  409d3c:	f021 0107 	bic.w	r1, r1, #7
  409d40:	e9d1 2300 	ldrd	r2, r3, [r1]
  409d44:	3108      	adds	r1, #8
  409d46:	9104      	str	r1, [sp, #16]
  409d48:	4614      	mov	r4, r2
  409d4a:	461d      	mov	r5, r3
  409d4c:	2a00      	cmp	r2, #0
  409d4e:	f173 0300 	sbcs.w	r3, r3, #0
  409d52:	f2c0 8386 	blt.w	40a462 <_vfiprintf_r+0xbb2>
  409d56:	9b01      	ldr	r3, [sp, #4]
  409d58:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  409d5c:	2b00      	cmp	r3, #0
  409d5e:	f2c0 831a 	blt.w	40a396 <_vfiprintf_r+0xae6>
  409d62:	ea54 0305 	orrs.w	r3, r4, r5
  409d66:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409d6a:	f000 80ed 	beq.w	409f48 <_vfiprintf_r+0x698>
  409d6e:	2d00      	cmp	r5, #0
  409d70:	bf08      	it	eq
  409d72:	2c0a      	cmpeq	r4, #10
  409d74:	f0c0 80ed 	bcc.w	409f52 <_vfiprintf_r+0x6a2>
  409d78:	465f      	mov	r7, fp
  409d7a:	4620      	mov	r0, r4
  409d7c:	4629      	mov	r1, r5
  409d7e:	220a      	movs	r2, #10
  409d80:	2300      	movs	r3, #0
  409d82:	f003 fee7 	bl	40db54 <__aeabi_uldivmod>
  409d86:	3230      	adds	r2, #48	; 0x30
  409d88:	f807 2d01 	strb.w	r2, [r7, #-1]!
  409d8c:	4620      	mov	r0, r4
  409d8e:	4629      	mov	r1, r5
  409d90:	2300      	movs	r3, #0
  409d92:	220a      	movs	r2, #10
  409d94:	f003 fede 	bl	40db54 <__aeabi_uldivmod>
  409d98:	4604      	mov	r4, r0
  409d9a:	460d      	mov	r5, r1
  409d9c:	ea54 0305 	orrs.w	r3, r4, r5
  409da0:	d1eb      	bne.n	409d7a <_vfiprintf_r+0x4ca>
  409da2:	ebc7 030b 	rsb	r3, r7, fp
  409da6:	9303      	str	r3, [sp, #12]
  409da8:	e6a2      	b.n	409af0 <_vfiprintf_r+0x240>
  409daa:	bf00      	nop
  409dac:	0040f7e4 	.word	0x0040f7e4
  409db0:	0040f824 	.word	0x0040f824
  409db4:	0040f814 	.word	0x0040f814
  409db8:	9406      	str	r4, [sp, #24]
  409dba:	2900      	cmp	r1, #0
  409dbc:	f040 8462 	bne.w	40a684 <_vfiprintf_r+0xdd4>
  409dc0:	f046 0610 	orr.w	r6, r6, #16
  409dc4:	f016 0320 	ands.w	r3, r6, #32
  409dc8:	f000 82ae 	beq.w	40a328 <_vfiprintf_r+0xa78>
  409dcc:	9b04      	ldr	r3, [sp, #16]
  409dce:	3307      	adds	r3, #7
  409dd0:	f023 0307 	bic.w	r3, r3, #7
  409dd4:	f04f 0200 	mov.w	r2, #0
  409dd8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  409ddc:	e9d3 4500 	ldrd	r4, r5, [r3]
  409de0:	f103 0208 	add.w	r2, r3, #8
  409de4:	9b01      	ldr	r3, [sp, #4]
  409de6:	9204      	str	r2, [sp, #16]
  409de8:	2b00      	cmp	r3, #0
  409dea:	f2c0 8174 	blt.w	40a0d6 <_vfiprintf_r+0x826>
  409dee:	ea54 0305 	orrs.w	r3, r4, r5
  409df2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409df6:	f040 816e 	bne.w	40a0d6 <_vfiprintf_r+0x826>
  409dfa:	9b01      	ldr	r3, [sp, #4]
  409dfc:	2b00      	cmp	r3, #0
  409dfe:	f000 8430 	beq.w	40a662 <_vfiprintf_r+0xdb2>
  409e02:	f04f 0900 	mov.w	r9, #0
  409e06:	2400      	movs	r4, #0
  409e08:	2500      	movs	r5, #0
  409e0a:	465f      	mov	r7, fp
  409e0c:	08e2      	lsrs	r2, r4, #3
  409e0e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  409e12:	08e9      	lsrs	r1, r5, #3
  409e14:	f004 0307 	and.w	r3, r4, #7
  409e18:	460d      	mov	r5, r1
  409e1a:	4614      	mov	r4, r2
  409e1c:	3330      	adds	r3, #48	; 0x30
  409e1e:	ea54 0205 	orrs.w	r2, r4, r5
  409e22:	f807 3d01 	strb.w	r3, [r7, #-1]!
  409e26:	d1f1      	bne.n	409e0c <_vfiprintf_r+0x55c>
  409e28:	07f4      	lsls	r4, r6, #31
  409e2a:	d5ba      	bpl.n	409da2 <_vfiprintf_r+0x4f2>
  409e2c:	2b30      	cmp	r3, #48	; 0x30
  409e2e:	d0b8      	beq.n	409da2 <_vfiprintf_r+0x4f2>
  409e30:	2230      	movs	r2, #48	; 0x30
  409e32:	1e7b      	subs	r3, r7, #1
  409e34:	f807 2c01 	strb.w	r2, [r7, #-1]
  409e38:	ebc3 020b 	rsb	r2, r3, fp
  409e3c:	9203      	str	r2, [sp, #12]
  409e3e:	461f      	mov	r7, r3
  409e40:	e656      	b.n	409af0 <_vfiprintf_r+0x240>
  409e42:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409e46:	2400      	movs	r4, #0
  409e48:	f818 3b01 	ldrb.w	r3, [r8], #1
  409e4c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409e50:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  409e54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409e58:	2a09      	cmp	r2, #9
  409e5a:	d9f5      	bls.n	409e48 <_vfiprintf_r+0x598>
  409e5c:	e591      	b.n	409982 <_vfiprintf_r+0xd2>
  409e5e:	f898 3000 	ldrb.w	r3, [r8]
  409e62:	2101      	movs	r1, #1
  409e64:	202b      	movs	r0, #43	; 0x2b
  409e66:	e58a      	b.n	40997e <_vfiprintf_r+0xce>
  409e68:	f898 3000 	ldrb.w	r3, [r8]
  409e6c:	2b2a      	cmp	r3, #42	; 0x2a
  409e6e:	f108 0501 	add.w	r5, r8, #1
  409e72:	f000 83dd 	beq.w	40a630 <_vfiprintf_r+0xd80>
  409e76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409e7a:	2a09      	cmp	r2, #9
  409e7c:	46a8      	mov	r8, r5
  409e7e:	bf98      	it	ls
  409e80:	2500      	movls	r5, #0
  409e82:	f200 83ce 	bhi.w	40a622 <_vfiprintf_r+0xd72>
  409e86:	f818 3b01 	ldrb.w	r3, [r8], #1
  409e8a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  409e8e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  409e92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  409e96:	2a09      	cmp	r2, #9
  409e98:	d9f5      	bls.n	409e86 <_vfiprintf_r+0x5d6>
  409e9a:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  409e9e:	9201      	str	r2, [sp, #4]
  409ea0:	e56f      	b.n	409982 <_vfiprintf_r+0xd2>
  409ea2:	9a04      	ldr	r2, [sp, #16]
  409ea4:	6814      	ldr	r4, [r2, #0]
  409ea6:	4613      	mov	r3, r2
  409ea8:	2c00      	cmp	r4, #0
  409eaa:	f103 0304 	add.w	r3, r3, #4
  409eae:	f6ff aded 	blt.w	409a8c <_vfiprintf_r+0x1dc>
  409eb2:	9304      	str	r3, [sp, #16]
  409eb4:	f898 3000 	ldrb.w	r3, [r8]
  409eb8:	e561      	b.n	40997e <_vfiprintf_r+0xce>
  409eba:	9406      	str	r4, [sp, #24]
  409ebc:	2900      	cmp	r1, #0
  409ebe:	d081      	beq.n	409dc4 <_vfiprintf_r+0x514>
  409ec0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  409ec4:	e77e      	b.n	409dc4 <_vfiprintf_r+0x514>
  409ec6:	9a04      	ldr	r2, [sp, #16]
  409ec8:	9406      	str	r4, [sp, #24]
  409eca:	6817      	ldr	r7, [r2, #0]
  409ecc:	f04f 0300 	mov.w	r3, #0
  409ed0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409ed4:	1d14      	adds	r4, r2, #4
  409ed6:	9b01      	ldr	r3, [sp, #4]
  409ed8:	2f00      	cmp	r7, #0
  409eda:	f000 8386 	beq.w	40a5ea <_vfiprintf_r+0xd3a>
  409ede:	2b00      	cmp	r3, #0
  409ee0:	f2c0 835f 	blt.w	40a5a2 <_vfiprintf_r+0xcf2>
  409ee4:	461a      	mov	r2, r3
  409ee6:	2100      	movs	r1, #0
  409ee8:	4638      	mov	r0, r7
  409eea:	f002 f961 	bl	40c1b0 <memchr>
  409eee:	2800      	cmp	r0, #0
  409ef0:	f000 838f 	beq.w	40a612 <_vfiprintf_r+0xd62>
  409ef4:	1bc3      	subs	r3, r0, r7
  409ef6:	9303      	str	r3, [sp, #12]
  409ef8:	2300      	movs	r3, #0
  409efa:	9404      	str	r4, [sp, #16]
  409efc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  409f00:	9301      	str	r3, [sp, #4]
  409f02:	e5f5      	b.n	409af0 <_vfiprintf_r+0x240>
  409f04:	9406      	str	r4, [sp, #24]
  409f06:	2900      	cmp	r1, #0
  409f08:	f040 83b9 	bne.w	40a67e <_vfiprintf_r+0xdce>
  409f0c:	f016 0920 	ands.w	r9, r6, #32
  409f10:	d135      	bne.n	409f7e <_vfiprintf_r+0x6ce>
  409f12:	f016 0310 	ands.w	r3, r6, #16
  409f16:	d103      	bne.n	409f20 <_vfiprintf_r+0x670>
  409f18:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  409f1c:	f040 832a 	bne.w	40a574 <_vfiprintf_r+0xcc4>
  409f20:	9a04      	ldr	r2, [sp, #16]
  409f22:	4613      	mov	r3, r2
  409f24:	6814      	ldr	r4, [r2, #0]
  409f26:	9a01      	ldr	r2, [sp, #4]
  409f28:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  409f2c:	2a00      	cmp	r2, #0
  409f2e:	f103 0304 	add.w	r3, r3, #4
  409f32:	f04f 0500 	mov.w	r5, #0
  409f36:	f2c0 8332 	blt.w	40a59e <_vfiprintf_r+0xcee>
  409f3a:	ea54 0205 	orrs.w	r2, r4, r5
  409f3e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409f42:	9304      	str	r3, [sp, #16]
  409f44:	f47f af13 	bne.w	409d6e <_vfiprintf_r+0x4be>
  409f48:	9b01      	ldr	r3, [sp, #4]
  409f4a:	2b00      	cmp	r3, #0
  409f4c:	f43f adcc 	beq.w	409ae8 <_vfiprintf_r+0x238>
  409f50:	2400      	movs	r4, #0
  409f52:	af2a      	add	r7, sp, #168	; 0xa8
  409f54:	3430      	adds	r4, #48	; 0x30
  409f56:	f807 4d41 	strb.w	r4, [r7, #-65]!
  409f5a:	ebc7 030b 	rsb	r3, r7, fp
  409f5e:	9303      	str	r3, [sp, #12]
  409f60:	e5c6      	b.n	409af0 <_vfiprintf_r+0x240>
  409f62:	f046 0620 	orr.w	r6, r6, #32
  409f66:	f898 3000 	ldrb.w	r3, [r8]
  409f6a:	e508      	b.n	40997e <_vfiprintf_r+0xce>
  409f6c:	9406      	str	r4, [sp, #24]
  409f6e:	2900      	cmp	r1, #0
  409f70:	f040 836e 	bne.w	40a650 <_vfiprintf_r+0xda0>
  409f74:	f046 0610 	orr.w	r6, r6, #16
  409f78:	f016 0920 	ands.w	r9, r6, #32
  409f7c:	d0c9      	beq.n	409f12 <_vfiprintf_r+0x662>
  409f7e:	9b04      	ldr	r3, [sp, #16]
  409f80:	3307      	adds	r3, #7
  409f82:	f023 0307 	bic.w	r3, r3, #7
  409f86:	f04f 0200 	mov.w	r2, #0
  409f8a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  409f8e:	e9d3 4500 	ldrd	r4, r5, [r3]
  409f92:	f103 0208 	add.w	r2, r3, #8
  409f96:	9b01      	ldr	r3, [sp, #4]
  409f98:	9204      	str	r2, [sp, #16]
  409f9a:	2b00      	cmp	r3, #0
  409f9c:	f2c0 81f9 	blt.w	40a392 <_vfiprintf_r+0xae2>
  409fa0:	ea54 0305 	orrs.w	r3, r4, r5
  409fa4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409fa8:	f04f 0900 	mov.w	r9, #0
  409fac:	f47f aedf 	bne.w	409d6e <_vfiprintf_r+0x4be>
  409fb0:	e7ca      	b.n	409f48 <_vfiprintf_r+0x698>
  409fb2:	9406      	str	r4, [sp, #24]
  409fb4:	2900      	cmp	r1, #0
  409fb6:	f040 8351 	bne.w	40a65c <_vfiprintf_r+0xdac>
  409fba:	06b2      	lsls	r2, r6, #26
  409fbc:	48ae      	ldr	r0, [pc, #696]	; (40a278 <_vfiprintf_r+0x9c8>)
  409fbe:	d541      	bpl.n	40a044 <_vfiprintf_r+0x794>
  409fc0:	9a04      	ldr	r2, [sp, #16]
  409fc2:	3207      	adds	r2, #7
  409fc4:	f022 0207 	bic.w	r2, r2, #7
  409fc8:	e9d2 4500 	ldrd	r4, r5, [r2]
  409fcc:	f102 0108 	add.w	r1, r2, #8
  409fd0:	9104      	str	r1, [sp, #16]
  409fd2:	f016 0901 	ands.w	r9, r6, #1
  409fd6:	f000 8177 	beq.w	40a2c8 <_vfiprintf_r+0xa18>
  409fda:	ea54 0205 	orrs.w	r2, r4, r5
  409fde:	f040 8226 	bne.w	40a42e <_vfiprintf_r+0xb7e>
  409fe2:	f04f 0300 	mov.w	r3, #0
  409fe6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  409fea:	9b01      	ldr	r3, [sp, #4]
  409fec:	2b00      	cmp	r3, #0
  409fee:	f2c0 8196 	blt.w	40a31e <_vfiprintf_r+0xa6e>
  409ff2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  409ff6:	e572      	b.n	409ade <_vfiprintf_r+0x22e>
  409ff8:	9a04      	ldr	r2, [sp, #16]
  409ffa:	9406      	str	r4, [sp, #24]
  409ffc:	6813      	ldr	r3, [r2, #0]
  409ffe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40a002:	4613      	mov	r3, r2
  40a004:	f04f 0100 	mov.w	r1, #0
  40a008:	2501      	movs	r5, #1
  40a00a:	3304      	adds	r3, #4
  40a00c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40a010:	9304      	str	r3, [sp, #16]
  40a012:	9503      	str	r5, [sp, #12]
  40a014:	af10      	add	r7, sp, #64	; 0x40
  40a016:	2300      	movs	r3, #0
  40a018:	9301      	str	r3, [sp, #4]
  40a01a:	e573      	b.n	409b04 <_vfiprintf_r+0x254>
  40a01c:	f898 3000 	ldrb.w	r3, [r8]
  40a020:	2800      	cmp	r0, #0
  40a022:	f47f acac 	bne.w	40997e <_vfiprintf_r+0xce>
  40a026:	2101      	movs	r1, #1
  40a028:	2020      	movs	r0, #32
  40a02a:	e4a8      	b.n	40997e <_vfiprintf_r+0xce>
  40a02c:	f046 0601 	orr.w	r6, r6, #1
  40a030:	f898 3000 	ldrb.w	r3, [r8]
  40a034:	e4a3      	b.n	40997e <_vfiprintf_r+0xce>
  40a036:	9406      	str	r4, [sp, #24]
  40a038:	2900      	cmp	r1, #0
  40a03a:	f040 830c 	bne.w	40a656 <_vfiprintf_r+0xda6>
  40a03e:	06b2      	lsls	r2, r6, #26
  40a040:	488e      	ldr	r0, [pc, #568]	; (40a27c <_vfiprintf_r+0x9cc>)
  40a042:	d4bd      	bmi.n	409fc0 <_vfiprintf_r+0x710>
  40a044:	9904      	ldr	r1, [sp, #16]
  40a046:	06f7      	lsls	r7, r6, #27
  40a048:	460a      	mov	r2, r1
  40a04a:	f100 819d 	bmi.w	40a388 <_vfiprintf_r+0xad8>
  40a04e:	0675      	lsls	r5, r6, #25
  40a050:	f140 819a 	bpl.w	40a388 <_vfiprintf_r+0xad8>
  40a054:	3204      	adds	r2, #4
  40a056:	880c      	ldrh	r4, [r1, #0]
  40a058:	9204      	str	r2, [sp, #16]
  40a05a:	2500      	movs	r5, #0
  40a05c:	e7b9      	b.n	409fd2 <_vfiprintf_r+0x722>
  40a05e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40a062:	f898 3000 	ldrb.w	r3, [r8]
  40a066:	e48a      	b.n	40997e <_vfiprintf_r+0xce>
  40a068:	f898 3000 	ldrb.w	r3, [r8]
  40a06c:	2b6c      	cmp	r3, #108	; 0x6c
  40a06e:	bf03      	ittte	eq
  40a070:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  40a074:	f046 0620 	orreq.w	r6, r6, #32
  40a078:	f108 0801 	addeq.w	r8, r8, #1
  40a07c:	f046 0610 	orrne.w	r6, r6, #16
  40a080:	e47d      	b.n	40997e <_vfiprintf_r+0xce>
  40a082:	2900      	cmp	r1, #0
  40a084:	f040 8309 	bne.w	40a69a <_vfiprintf_r+0xdea>
  40a088:	06b4      	lsls	r4, r6, #26
  40a08a:	f140 821c 	bpl.w	40a4c6 <_vfiprintf_r+0xc16>
  40a08e:	9a04      	ldr	r2, [sp, #16]
  40a090:	9902      	ldr	r1, [sp, #8]
  40a092:	6813      	ldr	r3, [r2, #0]
  40a094:	17cd      	asrs	r5, r1, #31
  40a096:	4608      	mov	r0, r1
  40a098:	3204      	adds	r2, #4
  40a09a:	4629      	mov	r1, r5
  40a09c:	9204      	str	r2, [sp, #16]
  40a09e:	e9c3 0100 	strd	r0, r1, [r3]
  40a0a2:	e436      	b.n	409912 <_vfiprintf_r+0x62>
  40a0a4:	9406      	str	r4, [sp, #24]
  40a0a6:	2900      	cmp	r1, #0
  40a0a8:	f43f ae43 	beq.w	409d32 <_vfiprintf_r+0x482>
  40a0ac:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a0b0:	e63f      	b.n	409d32 <_vfiprintf_r+0x482>
  40a0b2:	9406      	str	r4, [sp, #24]
  40a0b4:	2900      	cmp	r1, #0
  40a0b6:	f040 82ed 	bne.w	40a694 <_vfiprintf_r+0xde4>
  40a0ba:	2b00      	cmp	r3, #0
  40a0bc:	f000 808f 	beq.w	40a1de <_vfiprintf_r+0x92e>
  40a0c0:	2501      	movs	r5, #1
  40a0c2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40a0c6:	f04f 0300 	mov.w	r3, #0
  40a0ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a0ce:	9503      	str	r5, [sp, #12]
  40a0d0:	af10      	add	r7, sp, #64	; 0x40
  40a0d2:	e7a0      	b.n	40a016 <_vfiprintf_r+0x766>
  40a0d4:	9304      	str	r3, [sp, #16]
  40a0d6:	f04f 0900 	mov.w	r9, #0
  40a0da:	e696      	b.n	409e0a <_vfiprintf_r+0x55a>
  40a0dc:	aa0d      	add	r2, sp, #52	; 0x34
  40a0de:	9900      	ldr	r1, [sp, #0]
  40a0e0:	9309      	str	r3, [sp, #36]	; 0x24
  40a0e2:	4648      	mov	r0, r9
  40a0e4:	f7ff fba8 	bl	409838 <__sprint_r.part.0>
  40a0e8:	2800      	cmp	r0, #0
  40a0ea:	d17f      	bne.n	40a1ec <_vfiprintf_r+0x93c>
  40a0ec:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a0ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a0f2:	f100 0e01 	add.w	lr, r0, #1
  40a0f6:	46dc      	mov	ip, fp
  40a0f8:	e529      	b.n	409b4e <_vfiprintf_r+0x29e>
  40a0fa:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a0fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a0fe:	f100 0e01 	add.w	lr, r0, #1
  40a102:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40a106:	2b00      	cmp	r3, #0
  40a108:	f43f ad50 	beq.w	409bac <_vfiprintf_r+0x2fc>
  40a10c:	3201      	adds	r2, #1
  40a10e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40a112:	2301      	movs	r3, #1
  40a114:	f1be 0f07 	cmp.w	lr, #7
  40a118:	920f      	str	r2, [sp, #60]	; 0x3c
  40a11a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40a11e:	e88a 000a 	stmia.w	sl, {r1, r3}
  40a122:	f340 80bf 	ble.w	40a2a4 <_vfiprintf_r+0x9f4>
  40a126:	2a00      	cmp	r2, #0
  40a128:	f040 814e 	bne.w	40a3c8 <_vfiprintf_r+0xb18>
  40a12c:	9907      	ldr	r1, [sp, #28]
  40a12e:	2900      	cmp	r1, #0
  40a130:	f040 80be 	bne.w	40a2b0 <_vfiprintf_r+0xa00>
  40a134:	469e      	mov	lr, r3
  40a136:	4610      	mov	r0, r2
  40a138:	46da      	mov	sl, fp
  40a13a:	9b08      	ldr	r3, [sp, #32]
  40a13c:	2b80      	cmp	r3, #128	; 0x80
  40a13e:	f43f ad50 	beq.w	409be2 <_vfiprintf_r+0x332>
  40a142:	9b01      	ldr	r3, [sp, #4]
  40a144:	9903      	ldr	r1, [sp, #12]
  40a146:	1a5c      	subs	r4, r3, r1
  40a148:	2c00      	cmp	r4, #0
  40a14a:	f77f ad93 	ble.w	409c74 <_vfiprintf_r+0x3c4>
  40a14e:	2c10      	cmp	r4, #16
  40a150:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40a280 <_vfiprintf_r+0x9d0>
  40a154:	dd25      	ble.n	40a1a2 <_vfiprintf_r+0x8f2>
  40a156:	46d4      	mov	ip, sl
  40a158:	2310      	movs	r3, #16
  40a15a:	46c2      	mov	sl, r8
  40a15c:	46a8      	mov	r8, r5
  40a15e:	464d      	mov	r5, r9
  40a160:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40a164:	e007      	b.n	40a176 <_vfiprintf_r+0x8c6>
  40a166:	f100 0e02 	add.w	lr, r0, #2
  40a16a:	f10c 0c08 	add.w	ip, ip, #8
  40a16e:	4608      	mov	r0, r1
  40a170:	3c10      	subs	r4, #16
  40a172:	2c10      	cmp	r4, #16
  40a174:	dd11      	ble.n	40a19a <_vfiprintf_r+0x8ea>
  40a176:	1c41      	adds	r1, r0, #1
  40a178:	3210      	adds	r2, #16
  40a17a:	2907      	cmp	r1, #7
  40a17c:	920f      	str	r2, [sp, #60]	; 0x3c
  40a17e:	f8cc 5000 	str.w	r5, [ip]
  40a182:	f8cc 3004 	str.w	r3, [ip, #4]
  40a186:	910e      	str	r1, [sp, #56]	; 0x38
  40a188:	dded      	ble.n	40a166 <_vfiprintf_r+0x8b6>
  40a18a:	b9d2      	cbnz	r2, 40a1c2 <_vfiprintf_r+0x912>
  40a18c:	3c10      	subs	r4, #16
  40a18e:	2c10      	cmp	r4, #16
  40a190:	f04f 0e01 	mov.w	lr, #1
  40a194:	4610      	mov	r0, r2
  40a196:	46dc      	mov	ip, fp
  40a198:	dced      	bgt.n	40a176 <_vfiprintf_r+0x8c6>
  40a19a:	46a9      	mov	r9, r5
  40a19c:	4645      	mov	r5, r8
  40a19e:	46d0      	mov	r8, sl
  40a1a0:	46e2      	mov	sl, ip
  40a1a2:	4422      	add	r2, r4
  40a1a4:	f1be 0f07 	cmp.w	lr, #7
  40a1a8:	920f      	str	r2, [sp, #60]	; 0x3c
  40a1aa:	f8ca 9000 	str.w	r9, [sl]
  40a1ae:	f8ca 4004 	str.w	r4, [sl, #4]
  40a1b2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40a1b6:	dc2e      	bgt.n	40a216 <_vfiprintf_r+0x966>
  40a1b8:	f10a 0a08 	add.w	sl, sl, #8
  40a1bc:	f10e 0e01 	add.w	lr, lr, #1
  40a1c0:	e558      	b.n	409c74 <_vfiprintf_r+0x3c4>
  40a1c2:	aa0d      	add	r2, sp, #52	; 0x34
  40a1c4:	9900      	ldr	r1, [sp, #0]
  40a1c6:	9301      	str	r3, [sp, #4]
  40a1c8:	4648      	mov	r0, r9
  40a1ca:	f7ff fb35 	bl	409838 <__sprint_r.part.0>
  40a1ce:	b968      	cbnz	r0, 40a1ec <_vfiprintf_r+0x93c>
  40a1d0:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a1d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a1d4:	9b01      	ldr	r3, [sp, #4]
  40a1d6:	f100 0e01 	add.w	lr, r0, #1
  40a1da:	46dc      	mov	ip, fp
  40a1dc:	e7c8      	b.n	40a170 <_vfiprintf_r+0x8c0>
  40a1de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a1e0:	b123      	cbz	r3, 40a1ec <_vfiprintf_r+0x93c>
  40a1e2:	9805      	ldr	r0, [sp, #20]
  40a1e4:	9900      	ldr	r1, [sp, #0]
  40a1e6:	aa0d      	add	r2, sp, #52	; 0x34
  40a1e8:	f7ff fb26 	bl	409838 <__sprint_r.part.0>
  40a1ec:	9b00      	ldr	r3, [sp, #0]
  40a1ee:	899b      	ldrh	r3, [r3, #12]
  40a1f0:	065a      	lsls	r2, r3, #25
  40a1f2:	f100 818b 	bmi.w	40a50c <_vfiprintf_r+0xc5c>
  40a1f6:	9802      	ldr	r0, [sp, #8]
  40a1f8:	b02b      	add	sp, #172	; 0xac
  40a1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1fe:	aa0d      	add	r2, sp, #52	; 0x34
  40a200:	9900      	ldr	r1, [sp, #0]
  40a202:	4648      	mov	r0, r9
  40a204:	f7ff fb18 	bl	409838 <__sprint_r.part.0>
  40a208:	2800      	cmp	r0, #0
  40a20a:	d1ef      	bne.n	40a1ec <_vfiprintf_r+0x93c>
  40a20c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a20e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a210:	1c48      	adds	r0, r1, #1
  40a212:	46da      	mov	sl, fp
  40a214:	e555      	b.n	409cc2 <_vfiprintf_r+0x412>
  40a216:	2a00      	cmp	r2, #0
  40a218:	f040 80fb 	bne.w	40a412 <_vfiprintf_r+0xb62>
  40a21c:	9a03      	ldr	r2, [sp, #12]
  40a21e:	921b      	str	r2, [sp, #108]	; 0x6c
  40a220:	2301      	movs	r3, #1
  40a222:	920f      	str	r2, [sp, #60]	; 0x3c
  40a224:	971a      	str	r7, [sp, #104]	; 0x68
  40a226:	930e      	str	r3, [sp, #56]	; 0x38
  40a228:	46da      	mov	sl, fp
  40a22a:	f10a 0a08 	add.w	sl, sl, #8
  40a22e:	0771      	lsls	r1, r6, #29
  40a230:	d504      	bpl.n	40a23c <_vfiprintf_r+0x98c>
  40a232:	9b06      	ldr	r3, [sp, #24]
  40a234:	1b5c      	subs	r4, r3, r5
  40a236:	2c00      	cmp	r4, #0
  40a238:	f73f ad34 	bgt.w	409ca4 <_vfiprintf_r+0x3f4>
  40a23c:	9b02      	ldr	r3, [sp, #8]
  40a23e:	9906      	ldr	r1, [sp, #24]
  40a240:	42a9      	cmp	r1, r5
  40a242:	bfac      	ite	ge
  40a244:	185b      	addge	r3, r3, r1
  40a246:	195b      	addlt	r3, r3, r5
  40a248:	9302      	str	r3, [sp, #8]
  40a24a:	2a00      	cmp	r2, #0
  40a24c:	f040 80b3 	bne.w	40a3b6 <_vfiprintf_r+0xb06>
  40a250:	2300      	movs	r3, #0
  40a252:	930e      	str	r3, [sp, #56]	; 0x38
  40a254:	46da      	mov	sl, fp
  40a256:	f7ff bb5c 	b.w	409912 <_vfiprintf_r+0x62>
  40a25a:	aa0d      	add	r2, sp, #52	; 0x34
  40a25c:	9900      	ldr	r1, [sp, #0]
  40a25e:	9307      	str	r3, [sp, #28]
  40a260:	4648      	mov	r0, r9
  40a262:	f7ff fae9 	bl	409838 <__sprint_r.part.0>
  40a266:	2800      	cmp	r0, #0
  40a268:	d1c0      	bne.n	40a1ec <_vfiprintf_r+0x93c>
  40a26a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a26c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a26e:	9b07      	ldr	r3, [sp, #28]
  40a270:	f100 0c01 	add.w	ip, r0, #1
  40a274:	46de      	mov	lr, fp
  40a276:	e4cb      	b.n	409c10 <_vfiprintf_r+0x360>
  40a278:	0040f7d0 	.word	0x0040f7d0
  40a27c:	0040f7e4 	.word	0x0040f7e4
  40a280:	0040f814 	.word	0x0040f814
  40a284:	2a00      	cmp	r2, #0
  40a286:	f040 8133 	bne.w	40a4f0 <_vfiprintf_r+0xc40>
  40a28a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40a28e:	2b00      	cmp	r3, #0
  40a290:	f000 80f5 	beq.w	40a47e <_vfiprintf_r+0xbce>
  40a294:	2301      	movs	r3, #1
  40a296:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  40a29a:	461a      	mov	r2, r3
  40a29c:	931b      	str	r3, [sp, #108]	; 0x6c
  40a29e:	469e      	mov	lr, r3
  40a2a0:	911a      	str	r1, [sp, #104]	; 0x68
  40a2a2:	46da      	mov	sl, fp
  40a2a4:	4670      	mov	r0, lr
  40a2a6:	f10a 0a08 	add.w	sl, sl, #8
  40a2aa:	f10e 0e01 	add.w	lr, lr, #1
  40a2ae:	e47d      	b.n	409bac <_vfiprintf_r+0x2fc>
  40a2b0:	a90c      	add	r1, sp, #48	; 0x30
  40a2b2:	2202      	movs	r2, #2
  40a2b4:	469e      	mov	lr, r3
  40a2b6:	911a      	str	r1, [sp, #104]	; 0x68
  40a2b8:	921b      	str	r2, [sp, #108]	; 0x6c
  40a2ba:	46da      	mov	sl, fp
  40a2bc:	4670      	mov	r0, lr
  40a2be:	f10a 0a08 	add.w	sl, sl, #8
  40a2c2:	f10e 0e01 	add.w	lr, lr, #1
  40a2c6:	e738      	b.n	40a13a <_vfiprintf_r+0x88a>
  40a2c8:	9b01      	ldr	r3, [sp, #4]
  40a2ca:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40a2ce:	2b00      	cmp	r3, #0
  40a2d0:	f2c0 812a 	blt.w	40a528 <_vfiprintf_r+0xc78>
  40a2d4:	ea54 0305 	orrs.w	r3, r4, r5
  40a2d8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a2dc:	f43f abff 	beq.w	409ade <_vfiprintf_r+0x22e>
  40a2e0:	465f      	mov	r7, fp
  40a2e2:	0923      	lsrs	r3, r4, #4
  40a2e4:	f004 010f 	and.w	r1, r4, #15
  40a2e8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40a2ec:	092a      	lsrs	r2, r5, #4
  40a2ee:	461c      	mov	r4, r3
  40a2f0:	4615      	mov	r5, r2
  40a2f2:	5c43      	ldrb	r3, [r0, r1]
  40a2f4:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40a2f8:	ea54 0305 	orrs.w	r3, r4, r5
  40a2fc:	d1f1      	bne.n	40a2e2 <_vfiprintf_r+0xa32>
  40a2fe:	ebc7 030b 	rsb	r3, r7, fp
  40a302:	9303      	str	r3, [sp, #12]
  40a304:	f7ff bbf4 	b.w	409af0 <_vfiprintf_r+0x240>
  40a308:	aa0d      	add	r2, sp, #52	; 0x34
  40a30a:	9900      	ldr	r1, [sp, #0]
  40a30c:	9805      	ldr	r0, [sp, #20]
  40a30e:	f7ff fa93 	bl	409838 <__sprint_r.part.0>
  40a312:	2800      	cmp	r0, #0
  40a314:	f47f af6a 	bne.w	40a1ec <_vfiprintf_r+0x93c>
  40a318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a31a:	46da      	mov	sl, fp
  40a31c:	e787      	b.n	40a22e <_vfiprintf_r+0x97e>
  40a31e:	f04f 0900 	mov.w	r9, #0
  40a322:	2400      	movs	r4, #0
  40a324:	2500      	movs	r5, #0
  40a326:	e7db      	b.n	40a2e0 <_vfiprintf_r+0xa30>
  40a328:	f016 0210 	ands.w	r2, r6, #16
  40a32c:	f000 80b2 	beq.w	40a494 <_vfiprintf_r+0xbe4>
  40a330:	9904      	ldr	r1, [sp, #16]
  40a332:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a336:	460a      	mov	r2, r1
  40a338:	680c      	ldr	r4, [r1, #0]
  40a33a:	9901      	ldr	r1, [sp, #4]
  40a33c:	2900      	cmp	r1, #0
  40a33e:	f102 0204 	add.w	r2, r2, #4
  40a342:	f04f 0500 	mov.w	r5, #0
  40a346:	f2c0 8159 	blt.w	40a5fc <_vfiprintf_r+0xd4c>
  40a34a:	ea54 0105 	orrs.w	r1, r4, r5
  40a34e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a352:	9204      	str	r2, [sp, #16]
  40a354:	f43f ad51 	beq.w	409dfa <_vfiprintf_r+0x54a>
  40a358:	4699      	mov	r9, r3
  40a35a:	e556      	b.n	409e0a <_vfiprintf_r+0x55a>
  40a35c:	06f7      	lsls	r7, r6, #27
  40a35e:	d40a      	bmi.n	40a376 <_vfiprintf_r+0xac6>
  40a360:	0675      	lsls	r5, r6, #25
  40a362:	d508      	bpl.n	40a376 <_vfiprintf_r+0xac6>
  40a364:	9904      	ldr	r1, [sp, #16]
  40a366:	f9b1 4000 	ldrsh.w	r4, [r1]
  40a36a:	3104      	adds	r1, #4
  40a36c:	17e5      	asrs	r5, r4, #31
  40a36e:	4622      	mov	r2, r4
  40a370:	462b      	mov	r3, r5
  40a372:	9104      	str	r1, [sp, #16]
  40a374:	e4ea      	b.n	409d4c <_vfiprintf_r+0x49c>
  40a376:	9a04      	ldr	r2, [sp, #16]
  40a378:	6814      	ldr	r4, [r2, #0]
  40a37a:	4613      	mov	r3, r2
  40a37c:	3304      	adds	r3, #4
  40a37e:	17e5      	asrs	r5, r4, #31
  40a380:	9304      	str	r3, [sp, #16]
  40a382:	4622      	mov	r2, r4
  40a384:	462b      	mov	r3, r5
  40a386:	e4e1      	b.n	409d4c <_vfiprintf_r+0x49c>
  40a388:	6814      	ldr	r4, [r2, #0]
  40a38a:	3204      	adds	r2, #4
  40a38c:	9204      	str	r2, [sp, #16]
  40a38e:	2500      	movs	r5, #0
  40a390:	e61f      	b.n	409fd2 <_vfiprintf_r+0x722>
  40a392:	f04f 0900 	mov.w	r9, #0
  40a396:	ea54 0305 	orrs.w	r3, r4, r5
  40a39a:	f47f ace8 	bne.w	409d6e <_vfiprintf_r+0x4be>
  40a39e:	e5d8      	b.n	409f52 <_vfiprintf_r+0x6a2>
  40a3a0:	aa0d      	add	r2, sp, #52	; 0x34
  40a3a2:	9900      	ldr	r1, [sp, #0]
  40a3a4:	9805      	ldr	r0, [sp, #20]
  40a3a6:	f7ff fa47 	bl	409838 <__sprint_r.part.0>
  40a3aa:	2800      	cmp	r0, #0
  40a3ac:	f47f af1e 	bne.w	40a1ec <_vfiprintf_r+0x93c>
  40a3b0:	46da      	mov	sl, fp
  40a3b2:	f7ff bb48 	b.w	409a46 <_vfiprintf_r+0x196>
  40a3b6:	aa0d      	add	r2, sp, #52	; 0x34
  40a3b8:	9900      	ldr	r1, [sp, #0]
  40a3ba:	9805      	ldr	r0, [sp, #20]
  40a3bc:	f7ff fa3c 	bl	409838 <__sprint_r.part.0>
  40a3c0:	2800      	cmp	r0, #0
  40a3c2:	f43f af45 	beq.w	40a250 <_vfiprintf_r+0x9a0>
  40a3c6:	e711      	b.n	40a1ec <_vfiprintf_r+0x93c>
  40a3c8:	aa0d      	add	r2, sp, #52	; 0x34
  40a3ca:	9900      	ldr	r1, [sp, #0]
  40a3cc:	9805      	ldr	r0, [sp, #20]
  40a3ce:	f7ff fa33 	bl	409838 <__sprint_r.part.0>
  40a3d2:	2800      	cmp	r0, #0
  40a3d4:	f47f af0a 	bne.w	40a1ec <_vfiprintf_r+0x93c>
  40a3d8:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a3da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a3dc:	f100 0e01 	add.w	lr, r0, #1
  40a3e0:	46da      	mov	sl, fp
  40a3e2:	f7ff bbe3 	b.w	409bac <_vfiprintf_r+0x2fc>
  40a3e6:	aa0d      	add	r2, sp, #52	; 0x34
  40a3e8:	9900      	ldr	r1, [sp, #0]
  40a3ea:	9805      	ldr	r0, [sp, #20]
  40a3ec:	f7ff fa24 	bl	409838 <__sprint_r.part.0>
  40a3f0:	2800      	cmp	r0, #0
  40a3f2:	f47f aefb 	bne.w	40a1ec <_vfiprintf_r+0x93c>
  40a3f6:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a3f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a3fa:	f100 0e01 	add.w	lr, r0, #1
  40a3fe:	46da      	mov	sl, fp
  40a400:	e69b      	b.n	40a13a <_vfiprintf_r+0x88a>
  40a402:	2a00      	cmp	r2, #0
  40a404:	f040 80d8 	bne.w	40a5b8 <_vfiprintf_r+0xd08>
  40a408:	f04f 0e01 	mov.w	lr, #1
  40a40c:	4610      	mov	r0, r2
  40a40e:	46da      	mov	sl, fp
  40a410:	e697      	b.n	40a142 <_vfiprintf_r+0x892>
  40a412:	aa0d      	add	r2, sp, #52	; 0x34
  40a414:	9900      	ldr	r1, [sp, #0]
  40a416:	9805      	ldr	r0, [sp, #20]
  40a418:	f7ff fa0e 	bl	409838 <__sprint_r.part.0>
  40a41c:	2800      	cmp	r0, #0
  40a41e:	f47f aee5 	bne.w	40a1ec <_vfiprintf_r+0x93c>
  40a422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a426:	f103 0e01 	add.w	lr, r3, #1
  40a42a:	46da      	mov	sl, fp
  40a42c:	e422      	b.n	409c74 <_vfiprintf_r+0x3c4>
  40a42e:	2230      	movs	r2, #48	; 0x30
  40a430:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  40a434:	9a01      	ldr	r2, [sp, #4]
  40a436:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  40a43a:	2a00      	cmp	r2, #0
  40a43c:	f04f 0300 	mov.w	r3, #0
  40a440:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a444:	f046 0302 	orr.w	r3, r6, #2
  40a448:	f2c0 80cb 	blt.w	40a5e2 <_vfiprintf_r+0xd32>
  40a44c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a450:	f046 0602 	orr.w	r6, r6, #2
  40a454:	f04f 0900 	mov.w	r9, #0
  40a458:	e742      	b.n	40a2e0 <_vfiprintf_r+0xa30>
  40a45a:	f04f 0900 	mov.w	r9, #0
  40a45e:	4890      	ldr	r0, [pc, #576]	; (40a6a0 <_vfiprintf_r+0xdf0>)
  40a460:	e73e      	b.n	40a2e0 <_vfiprintf_r+0xa30>
  40a462:	9b01      	ldr	r3, [sp, #4]
  40a464:	4264      	negs	r4, r4
  40a466:	f04f 092d 	mov.w	r9, #45	; 0x2d
  40a46a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40a46e:	2b00      	cmp	r3, #0
  40a470:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40a474:	f6ff ac7b 	blt.w	409d6e <_vfiprintf_r+0x4be>
  40a478:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a47c:	e477      	b.n	409d6e <_vfiprintf_r+0x4be>
  40a47e:	9b07      	ldr	r3, [sp, #28]
  40a480:	2b00      	cmp	r3, #0
  40a482:	d072      	beq.n	40a56a <_vfiprintf_r+0xcba>
  40a484:	ab0c      	add	r3, sp, #48	; 0x30
  40a486:	2202      	movs	r2, #2
  40a488:	931a      	str	r3, [sp, #104]	; 0x68
  40a48a:	921b      	str	r2, [sp, #108]	; 0x6c
  40a48c:	f04f 0e01 	mov.w	lr, #1
  40a490:	46da      	mov	sl, fp
  40a492:	e713      	b.n	40a2bc <_vfiprintf_r+0xa0c>
  40a494:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40a498:	d048      	beq.n	40a52c <_vfiprintf_r+0xc7c>
  40a49a:	9904      	ldr	r1, [sp, #16]
  40a49c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40a4a0:	460b      	mov	r3, r1
  40a4a2:	880c      	ldrh	r4, [r1, #0]
  40a4a4:	9901      	ldr	r1, [sp, #4]
  40a4a6:	2900      	cmp	r1, #0
  40a4a8:	f103 0304 	add.w	r3, r3, #4
  40a4ac:	f04f 0500 	mov.w	r5, #0
  40a4b0:	f6ff ae10 	blt.w	40a0d4 <_vfiprintf_r+0x824>
  40a4b4:	ea54 0105 	orrs.w	r1, r4, r5
  40a4b8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a4bc:	9304      	str	r3, [sp, #16]
  40a4be:	f43f ac9c 	beq.w	409dfa <_vfiprintf_r+0x54a>
  40a4c2:	4691      	mov	r9, r2
  40a4c4:	e4a1      	b.n	409e0a <_vfiprintf_r+0x55a>
  40a4c6:	06f0      	lsls	r0, r6, #27
  40a4c8:	d40a      	bmi.n	40a4e0 <_vfiprintf_r+0xc30>
  40a4ca:	0671      	lsls	r1, r6, #25
  40a4cc:	d508      	bpl.n	40a4e0 <_vfiprintf_r+0xc30>
  40a4ce:	9a04      	ldr	r2, [sp, #16]
  40a4d0:	6813      	ldr	r3, [r2, #0]
  40a4d2:	3204      	adds	r2, #4
  40a4d4:	9204      	str	r2, [sp, #16]
  40a4d6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40a4da:	801a      	strh	r2, [r3, #0]
  40a4dc:	f7ff ba19 	b.w	409912 <_vfiprintf_r+0x62>
  40a4e0:	9a04      	ldr	r2, [sp, #16]
  40a4e2:	6813      	ldr	r3, [r2, #0]
  40a4e4:	3204      	adds	r2, #4
  40a4e6:	9204      	str	r2, [sp, #16]
  40a4e8:	9a02      	ldr	r2, [sp, #8]
  40a4ea:	601a      	str	r2, [r3, #0]
  40a4ec:	f7ff ba11 	b.w	409912 <_vfiprintf_r+0x62>
  40a4f0:	aa0d      	add	r2, sp, #52	; 0x34
  40a4f2:	9900      	ldr	r1, [sp, #0]
  40a4f4:	9805      	ldr	r0, [sp, #20]
  40a4f6:	f7ff f99f 	bl	409838 <__sprint_r.part.0>
  40a4fa:	2800      	cmp	r0, #0
  40a4fc:	f47f ae76 	bne.w	40a1ec <_vfiprintf_r+0x93c>
  40a500:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a504:	f100 0e01 	add.w	lr, r0, #1
  40a508:	46da      	mov	sl, fp
  40a50a:	e5fa      	b.n	40a102 <_vfiprintf_r+0x852>
  40a50c:	f04f 30ff 	mov.w	r0, #4294967295
  40a510:	f7ff bab6 	b.w	409a80 <_vfiprintf_r+0x1d0>
  40a514:	4862      	ldr	r0, [pc, #392]	; (40a6a0 <_vfiprintf_r+0xdf0>)
  40a516:	4616      	mov	r6, r2
  40a518:	ea54 0205 	orrs.w	r2, r4, r5
  40a51c:	9304      	str	r3, [sp, #16]
  40a51e:	f04f 0900 	mov.w	r9, #0
  40a522:	f47f aedd 	bne.w	40a2e0 <_vfiprintf_r+0xa30>
  40a526:	e6fc      	b.n	40a322 <_vfiprintf_r+0xa72>
  40a528:	9b04      	ldr	r3, [sp, #16]
  40a52a:	e7f5      	b.n	40a518 <_vfiprintf_r+0xc68>
  40a52c:	9a04      	ldr	r2, [sp, #16]
  40a52e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40a532:	4613      	mov	r3, r2
  40a534:	6814      	ldr	r4, [r2, #0]
  40a536:	9a01      	ldr	r2, [sp, #4]
  40a538:	2a00      	cmp	r2, #0
  40a53a:	f103 0304 	add.w	r3, r3, #4
  40a53e:	f04f 0500 	mov.w	r5, #0
  40a542:	f6ff adc7 	blt.w	40a0d4 <_vfiprintf_r+0x824>
  40a546:	ea54 0205 	orrs.w	r2, r4, r5
  40a54a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a54e:	9304      	str	r3, [sp, #16]
  40a550:	f47f ac5b 	bne.w	409e0a <_vfiprintf_r+0x55a>
  40a554:	e451      	b.n	409dfa <_vfiprintf_r+0x54a>
  40a556:	aa0d      	add	r2, sp, #52	; 0x34
  40a558:	9900      	ldr	r1, [sp, #0]
  40a55a:	9805      	ldr	r0, [sp, #20]
  40a55c:	f7ff f96c 	bl	409838 <__sprint_r.part.0>
  40a560:	2800      	cmp	r0, #0
  40a562:	f47f ae43 	bne.w	40a1ec <_vfiprintf_r+0x93c>
  40a566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a568:	e668      	b.n	40a23c <_vfiprintf_r+0x98c>
  40a56a:	4610      	mov	r0, r2
  40a56c:	f04f 0e01 	mov.w	lr, #1
  40a570:	46da      	mov	sl, fp
  40a572:	e5e6      	b.n	40a142 <_vfiprintf_r+0x892>
  40a574:	9904      	ldr	r1, [sp, #16]
  40a576:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  40a57a:	460a      	mov	r2, r1
  40a57c:	880c      	ldrh	r4, [r1, #0]
  40a57e:	9901      	ldr	r1, [sp, #4]
  40a580:	2900      	cmp	r1, #0
  40a582:	f102 0204 	add.w	r2, r2, #4
  40a586:	f04f 0500 	mov.w	r5, #0
  40a58a:	db4e      	blt.n	40a62a <_vfiprintf_r+0xd7a>
  40a58c:	ea54 0105 	orrs.w	r1, r4, r5
  40a590:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40a594:	9204      	str	r2, [sp, #16]
  40a596:	4699      	mov	r9, r3
  40a598:	f47f abe9 	bne.w	409d6e <_vfiprintf_r+0x4be>
  40a59c:	e4d4      	b.n	409f48 <_vfiprintf_r+0x698>
  40a59e:	9304      	str	r3, [sp, #16]
  40a5a0:	e6f9      	b.n	40a396 <_vfiprintf_r+0xae6>
  40a5a2:	4638      	mov	r0, r7
  40a5a4:	9404      	str	r4, [sp, #16]
  40a5a6:	f7fd fd8b 	bl	4080c0 <strlen>
  40a5aa:	2300      	movs	r3, #0
  40a5ac:	9003      	str	r0, [sp, #12]
  40a5ae:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a5b2:	9301      	str	r3, [sp, #4]
  40a5b4:	f7ff ba9c 	b.w	409af0 <_vfiprintf_r+0x240>
  40a5b8:	aa0d      	add	r2, sp, #52	; 0x34
  40a5ba:	9900      	ldr	r1, [sp, #0]
  40a5bc:	9805      	ldr	r0, [sp, #20]
  40a5be:	f7ff f93b 	bl	409838 <__sprint_r.part.0>
  40a5c2:	2800      	cmp	r0, #0
  40a5c4:	f47f ae12 	bne.w	40a1ec <_vfiprintf_r+0x93c>
  40a5c8:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a5ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a5cc:	f100 0e01 	add.w	lr, r0, #1
  40a5d0:	46da      	mov	sl, fp
  40a5d2:	e5b6      	b.n	40a142 <_vfiprintf_r+0x892>
  40a5d4:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a5d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a5d8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40a6a8 <_vfiprintf_r+0xdf8>
  40a5dc:	3001      	adds	r0, #1
  40a5de:	f7ff bad2 	b.w	409b86 <_vfiprintf_r+0x2d6>
  40a5e2:	461e      	mov	r6, r3
  40a5e4:	f04f 0900 	mov.w	r9, #0
  40a5e8:	e67a      	b.n	40a2e0 <_vfiprintf_r+0xa30>
  40a5ea:	2b06      	cmp	r3, #6
  40a5ec:	bf28      	it	cs
  40a5ee:	2306      	movcs	r3, #6
  40a5f0:	9303      	str	r3, [sp, #12]
  40a5f2:	9404      	str	r4, [sp, #16]
  40a5f4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40a5f8:	4f2a      	ldr	r7, [pc, #168]	; (40a6a4 <_vfiprintf_r+0xdf4>)
  40a5fa:	e50c      	b.n	40a016 <_vfiprintf_r+0x766>
  40a5fc:	9204      	str	r2, [sp, #16]
  40a5fe:	e56a      	b.n	40a0d6 <_vfiprintf_r+0x826>
  40a600:	980e      	ldr	r0, [sp, #56]	; 0x38
  40a602:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40a6a8 <_vfiprintf_r+0xdf8>
  40a606:	3001      	adds	r0, #1
  40a608:	f7ff bb73 	b.w	409cf2 <_vfiprintf_r+0x442>
  40a60c:	46f4      	mov	ip, lr
  40a60e:	f7ff bb1a 	b.w	409c46 <_vfiprintf_r+0x396>
  40a612:	9b01      	ldr	r3, [sp, #4]
  40a614:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40a618:	9303      	str	r3, [sp, #12]
  40a61a:	9404      	str	r4, [sp, #16]
  40a61c:	9001      	str	r0, [sp, #4]
  40a61e:	f7ff ba67 	b.w	409af0 <_vfiprintf_r+0x240>
  40a622:	2200      	movs	r2, #0
  40a624:	9201      	str	r2, [sp, #4]
  40a626:	f7ff b9ac 	b.w	409982 <_vfiprintf_r+0xd2>
  40a62a:	9204      	str	r2, [sp, #16]
  40a62c:	4699      	mov	r9, r3
  40a62e:	e6b2      	b.n	40a396 <_vfiprintf_r+0xae6>
  40a630:	9a04      	ldr	r2, [sp, #16]
  40a632:	6813      	ldr	r3, [r2, #0]
  40a634:	9301      	str	r3, [sp, #4]
  40a636:	3204      	adds	r2, #4
  40a638:	2b00      	cmp	r3, #0
  40a63a:	9204      	str	r2, [sp, #16]
  40a63c:	f898 3001 	ldrb.w	r3, [r8, #1]
  40a640:	46a8      	mov	r8, r5
  40a642:	f6bf a99c 	bge.w	40997e <_vfiprintf_r+0xce>
  40a646:	f04f 32ff 	mov.w	r2, #4294967295
  40a64a:	9201      	str	r2, [sp, #4]
  40a64c:	f7ff b997 	b.w	40997e <_vfiprintf_r+0xce>
  40a650:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a654:	e48e      	b.n	409f74 <_vfiprintf_r+0x6c4>
  40a656:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a65a:	e4f0      	b.n	40a03e <_vfiprintf_r+0x78e>
  40a65c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a660:	e4ab      	b.n	409fba <_vfiprintf_r+0x70a>
  40a662:	4699      	mov	r9, r3
  40a664:	07f3      	lsls	r3, r6, #31
  40a666:	d505      	bpl.n	40a674 <_vfiprintf_r+0xdc4>
  40a668:	af2a      	add	r7, sp, #168	; 0xa8
  40a66a:	2330      	movs	r3, #48	; 0x30
  40a66c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  40a670:	f7ff bb97 	b.w	409da2 <_vfiprintf_r+0x4f2>
  40a674:	9b01      	ldr	r3, [sp, #4]
  40a676:	9303      	str	r3, [sp, #12]
  40a678:	465f      	mov	r7, fp
  40a67a:	f7ff ba39 	b.w	409af0 <_vfiprintf_r+0x240>
  40a67e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a682:	e443      	b.n	409f0c <_vfiprintf_r+0x65c>
  40a684:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a688:	f7ff bb9a 	b.w	409dc0 <_vfiprintf_r+0x510>
  40a68c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a690:	f7ff bb4d 	b.w	409d2e <_vfiprintf_r+0x47e>
  40a694:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a698:	e50f      	b.n	40a0ba <_vfiprintf_r+0x80a>
  40a69a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  40a69e:	e4f3      	b.n	40a088 <_vfiprintf_r+0x7d8>
  40a6a0:	0040f7e4 	.word	0x0040f7e4
  40a6a4:	0040f7f8 	.word	0x0040f7f8
  40a6a8:	0040f824 	.word	0x0040f824

0040a6ac <__sbprintf>:
  40a6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a6ae:	460c      	mov	r4, r1
  40a6b0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40a6b4:	8989      	ldrh	r1, [r1, #12]
  40a6b6:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a6b8:	89e5      	ldrh	r5, [r4, #14]
  40a6ba:	9619      	str	r6, [sp, #100]	; 0x64
  40a6bc:	f021 0102 	bic.w	r1, r1, #2
  40a6c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a6c2:	f8ad 500e 	strh.w	r5, [sp, #14]
  40a6c6:	2500      	movs	r5, #0
  40a6c8:	69e7      	ldr	r7, [r4, #28]
  40a6ca:	f8ad 100c 	strh.w	r1, [sp, #12]
  40a6ce:	9609      	str	r6, [sp, #36]	; 0x24
  40a6d0:	9506      	str	r5, [sp, #24]
  40a6d2:	ae1a      	add	r6, sp, #104	; 0x68
  40a6d4:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40a6d8:	4669      	mov	r1, sp
  40a6da:	9600      	str	r6, [sp, #0]
  40a6dc:	9604      	str	r6, [sp, #16]
  40a6de:	9502      	str	r5, [sp, #8]
  40a6e0:	9505      	str	r5, [sp, #20]
  40a6e2:	9707      	str	r7, [sp, #28]
  40a6e4:	4606      	mov	r6, r0
  40a6e6:	f7ff f8e3 	bl	4098b0 <_vfiprintf_r>
  40a6ea:	1e05      	subs	r5, r0, #0
  40a6ec:	db07      	blt.n	40a6fe <__sbprintf+0x52>
  40a6ee:	4630      	mov	r0, r6
  40a6f0:	4669      	mov	r1, sp
  40a6f2:	f001 f8e9 	bl	40b8c8 <_fflush_r>
  40a6f6:	2800      	cmp	r0, #0
  40a6f8:	bf18      	it	ne
  40a6fa:	f04f 35ff 	movne.w	r5, #4294967295
  40a6fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40a702:	065b      	lsls	r3, r3, #25
  40a704:	d503      	bpl.n	40a70e <__sbprintf+0x62>
  40a706:	89a3      	ldrh	r3, [r4, #12]
  40a708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a70c:	81a3      	strh	r3, [r4, #12]
  40a70e:	4628      	mov	r0, r5
  40a710:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40a714:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a716:	bf00      	nop

0040a718 <__swsetup_r>:
  40a718:	b538      	push	{r3, r4, r5, lr}
  40a71a:	4b30      	ldr	r3, [pc, #192]	; (40a7dc <__swsetup_r+0xc4>)
  40a71c:	681b      	ldr	r3, [r3, #0]
  40a71e:	4605      	mov	r5, r0
  40a720:	460c      	mov	r4, r1
  40a722:	b113      	cbz	r3, 40a72a <__swsetup_r+0x12>
  40a724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40a726:	2a00      	cmp	r2, #0
  40a728:	d038      	beq.n	40a79c <__swsetup_r+0x84>
  40a72a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a72e:	b293      	uxth	r3, r2
  40a730:	0718      	lsls	r0, r3, #28
  40a732:	d50c      	bpl.n	40a74e <__swsetup_r+0x36>
  40a734:	6920      	ldr	r0, [r4, #16]
  40a736:	b1a8      	cbz	r0, 40a764 <__swsetup_r+0x4c>
  40a738:	f013 0201 	ands.w	r2, r3, #1
  40a73c:	d01e      	beq.n	40a77c <__swsetup_r+0x64>
  40a73e:	6963      	ldr	r3, [r4, #20]
  40a740:	2200      	movs	r2, #0
  40a742:	425b      	negs	r3, r3
  40a744:	61a3      	str	r3, [r4, #24]
  40a746:	60a2      	str	r2, [r4, #8]
  40a748:	b1f0      	cbz	r0, 40a788 <__swsetup_r+0x70>
  40a74a:	2000      	movs	r0, #0
  40a74c:	bd38      	pop	{r3, r4, r5, pc}
  40a74e:	06d9      	lsls	r1, r3, #27
  40a750:	d53c      	bpl.n	40a7cc <__swsetup_r+0xb4>
  40a752:	0758      	lsls	r0, r3, #29
  40a754:	d426      	bmi.n	40a7a4 <__swsetup_r+0x8c>
  40a756:	6920      	ldr	r0, [r4, #16]
  40a758:	f042 0308 	orr.w	r3, r2, #8
  40a75c:	81a3      	strh	r3, [r4, #12]
  40a75e:	b29b      	uxth	r3, r3
  40a760:	2800      	cmp	r0, #0
  40a762:	d1e9      	bne.n	40a738 <__swsetup_r+0x20>
  40a764:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40a768:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40a76c:	d0e4      	beq.n	40a738 <__swsetup_r+0x20>
  40a76e:	4628      	mov	r0, r5
  40a770:	4621      	mov	r1, r4
  40a772:	f001 fcd9 	bl	40c128 <__smakebuf_r>
  40a776:	89a3      	ldrh	r3, [r4, #12]
  40a778:	6920      	ldr	r0, [r4, #16]
  40a77a:	e7dd      	b.n	40a738 <__swsetup_r+0x20>
  40a77c:	0799      	lsls	r1, r3, #30
  40a77e:	bf58      	it	pl
  40a780:	6962      	ldrpl	r2, [r4, #20]
  40a782:	60a2      	str	r2, [r4, #8]
  40a784:	2800      	cmp	r0, #0
  40a786:	d1e0      	bne.n	40a74a <__swsetup_r+0x32>
  40a788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a78c:	061a      	lsls	r2, r3, #24
  40a78e:	d5dd      	bpl.n	40a74c <__swsetup_r+0x34>
  40a790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a794:	81a3      	strh	r3, [r4, #12]
  40a796:	f04f 30ff 	mov.w	r0, #4294967295
  40a79a:	bd38      	pop	{r3, r4, r5, pc}
  40a79c:	4618      	mov	r0, r3
  40a79e:	f001 f927 	bl	40b9f0 <__sinit>
  40a7a2:	e7c2      	b.n	40a72a <__swsetup_r+0x12>
  40a7a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a7a6:	b151      	cbz	r1, 40a7be <__swsetup_r+0xa6>
  40a7a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a7ac:	4299      	cmp	r1, r3
  40a7ae:	d004      	beq.n	40a7ba <__swsetup_r+0xa2>
  40a7b0:	4628      	mov	r0, r5
  40a7b2:	f001 f9e7 	bl	40bb84 <_free_r>
  40a7b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a7ba:	2300      	movs	r3, #0
  40a7bc:	6323      	str	r3, [r4, #48]	; 0x30
  40a7be:	2300      	movs	r3, #0
  40a7c0:	6920      	ldr	r0, [r4, #16]
  40a7c2:	6063      	str	r3, [r4, #4]
  40a7c4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40a7c8:	6020      	str	r0, [r4, #0]
  40a7ca:	e7c5      	b.n	40a758 <__swsetup_r+0x40>
  40a7cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40a7d0:	2309      	movs	r3, #9
  40a7d2:	602b      	str	r3, [r5, #0]
  40a7d4:	f04f 30ff 	mov.w	r0, #4294967295
  40a7d8:	81a2      	strh	r2, [r4, #12]
  40a7da:	bd38      	pop	{r3, r4, r5, pc}
  40a7dc:	20400470 	.word	0x20400470

0040a7e0 <register_fini>:
  40a7e0:	4b02      	ldr	r3, [pc, #8]	; (40a7ec <register_fini+0xc>)
  40a7e2:	b113      	cbz	r3, 40a7ea <register_fini+0xa>
  40a7e4:	4802      	ldr	r0, [pc, #8]	; (40a7f0 <register_fini+0x10>)
  40a7e6:	f000 b805 	b.w	40a7f4 <atexit>
  40a7ea:	4770      	bx	lr
  40a7ec:	00000000 	.word	0x00000000
  40a7f0:	0040ba05 	.word	0x0040ba05

0040a7f4 <atexit>:
  40a7f4:	2300      	movs	r3, #0
  40a7f6:	4601      	mov	r1, r0
  40a7f8:	461a      	mov	r2, r3
  40a7fa:	4618      	mov	r0, r3
  40a7fc:	f002 bbf2 	b.w	40cfe4 <__register_exitproc>

0040a800 <quorem>:
  40a800:	6902      	ldr	r2, [r0, #16]
  40a802:	690b      	ldr	r3, [r1, #16]
  40a804:	4293      	cmp	r3, r2
  40a806:	f300 808d 	bgt.w	40a924 <quorem+0x124>
  40a80a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a80e:	f103 38ff 	add.w	r8, r3, #4294967295
  40a812:	f101 0714 	add.w	r7, r1, #20
  40a816:	f100 0b14 	add.w	fp, r0, #20
  40a81a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40a81e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40a822:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40a826:	b083      	sub	sp, #12
  40a828:	3201      	adds	r2, #1
  40a82a:	fbb3 f9f2 	udiv	r9, r3, r2
  40a82e:	eb0b 0304 	add.w	r3, fp, r4
  40a832:	9400      	str	r4, [sp, #0]
  40a834:	eb07 0a04 	add.w	sl, r7, r4
  40a838:	9301      	str	r3, [sp, #4]
  40a83a:	f1b9 0f00 	cmp.w	r9, #0
  40a83e:	d039      	beq.n	40a8b4 <quorem+0xb4>
  40a840:	2500      	movs	r5, #0
  40a842:	46bc      	mov	ip, r7
  40a844:	46de      	mov	lr, fp
  40a846:	462b      	mov	r3, r5
  40a848:	f85c 6b04 	ldr.w	r6, [ip], #4
  40a84c:	f8de 2000 	ldr.w	r2, [lr]
  40a850:	b2b4      	uxth	r4, r6
  40a852:	fb09 5504 	mla	r5, r9, r4, r5
  40a856:	0c36      	lsrs	r6, r6, #16
  40a858:	0c2c      	lsrs	r4, r5, #16
  40a85a:	fb09 4406 	mla	r4, r9, r6, r4
  40a85e:	b2ad      	uxth	r5, r5
  40a860:	1b5b      	subs	r3, r3, r5
  40a862:	b2a6      	uxth	r6, r4
  40a864:	fa13 f382 	uxtah	r3, r3, r2
  40a868:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  40a86c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40a870:	b29b      	uxth	r3, r3
  40a872:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40a876:	45e2      	cmp	sl, ip
  40a878:	f84e 3b04 	str.w	r3, [lr], #4
  40a87c:	ea4f 4514 	mov.w	r5, r4, lsr #16
  40a880:	ea4f 4326 	mov.w	r3, r6, asr #16
  40a884:	d2e0      	bcs.n	40a848 <quorem+0x48>
  40a886:	9b00      	ldr	r3, [sp, #0]
  40a888:	f85b 3003 	ldr.w	r3, [fp, r3]
  40a88c:	b993      	cbnz	r3, 40a8b4 <quorem+0xb4>
  40a88e:	9c01      	ldr	r4, [sp, #4]
  40a890:	1f23      	subs	r3, r4, #4
  40a892:	459b      	cmp	fp, r3
  40a894:	d20c      	bcs.n	40a8b0 <quorem+0xb0>
  40a896:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40a89a:	b94b      	cbnz	r3, 40a8b0 <quorem+0xb0>
  40a89c:	f1a4 0308 	sub.w	r3, r4, #8
  40a8a0:	e002      	b.n	40a8a8 <quorem+0xa8>
  40a8a2:	681a      	ldr	r2, [r3, #0]
  40a8a4:	3b04      	subs	r3, #4
  40a8a6:	b91a      	cbnz	r2, 40a8b0 <quorem+0xb0>
  40a8a8:	459b      	cmp	fp, r3
  40a8aa:	f108 38ff 	add.w	r8, r8, #4294967295
  40a8ae:	d3f8      	bcc.n	40a8a2 <quorem+0xa2>
  40a8b0:	f8c0 8010 	str.w	r8, [r0, #16]
  40a8b4:	4604      	mov	r4, r0
  40a8b6:	f001 ff37 	bl	40c728 <__mcmp>
  40a8ba:	2800      	cmp	r0, #0
  40a8bc:	db2e      	blt.n	40a91c <quorem+0x11c>
  40a8be:	f109 0901 	add.w	r9, r9, #1
  40a8c2:	465d      	mov	r5, fp
  40a8c4:	2300      	movs	r3, #0
  40a8c6:	f857 1b04 	ldr.w	r1, [r7], #4
  40a8ca:	6828      	ldr	r0, [r5, #0]
  40a8cc:	b28a      	uxth	r2, r1
  40a8ce:	1a9a      	subs	r2, r3, r2
  40a8d0:	0c09      	lsrs	r1, r1, #16
  40a8d2:	fa12 f280 	uxtah	r2, r2, r0
  40a8d6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  40a8da:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40a8de:	b291      	uxth	r1, r2
  40a8e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40a8e4:	45ba      	cmp	sl, r7
  40a8e6:	f845 1b04 	str.w	r1, [r5], #4
  40a8ea:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a8ee:	d2ea      	bcs.n	40a8c6 <quorem+0xc6>
  40a8f0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40a8f4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40a8f8:	b982      	cbnz	r2, 40a91c <quorem+0x11c>
  40a8fa:	1f1a      	subs	r2, r3, #4
  40a8fc:	4593      	cmp	fp, r2
  40a8fe:	d20b      	bcs.n	40a918 <quorem+0x118>
  40a900:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40a904:	b942      	cbnz	r2, 40a918 <quorem+0x118>
  40a906:	3b08      	subs	r3, #8
  40a908:	e002      	b.n	40a910 <quorem+0x110>
  40a90a:	681a      	ldr	r2, [r3, #0]
  40a90c:	3b04      	subs	r3, #4
  40a90e:	b91a      	cbnz	r2, 40a918 <quorem+0x118>
  40a910:	459b      	cmp	fp, r3
  40a912:	f108 38ff 	add.w	r8, r8, #4294967295
  40a916:	d3f8      	bcc.n	40a90a <quorem+0x10a>
  40a918:	f8c4 8010 	str.w	r8, [r4, #16]
  40a91c:	4648      	mov	r0, r9
  40a91e:	b003      	add	sp, #12
  40a920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a924:	2000      	movs	r0, #0
  40a926:	4770      	bx	lr

0040a928 <_dtoa_r>:
  40a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a92c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40a92e:	b097      	sub	sp, #92	; 0x5c
  40a930:	4681      	mov	r9, r0
  40a932:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  40a934:	4692      	mov	sl, r2
  40a936:	469b      	mov	fp, r3
  40a938:	b149      	cbz	r1, 40a94e <_dtoa_r+0x26>
  40a93a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40a93c:	604a      	str	r2, [r1, #4]
  40a93e:	2301      	movs	r3, #1
  40a940:	4093      	lsls	r3, r2
  40a942:	608b      	str	r3, [r1, #8]
  40a944:	f001 fd0e 	bl	40c364 <_Bfree>
  40a948:	2300      	movs	r3, #0
  40a94a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  40a94e:	f1bb 0f00 	cmp.w	fp, #0
  40a952:	46d8      	mov	r8, fp
  40a954:	db33      	blt.n	40a9be <_dtoa_r+0x96>
  40a956:	2300      	movs	r3, #0
  40a958:	6023      	str	r3, [r4, #0]
  40a95a:	4ba5      	ldr	r3, [pc, #660]	; (40abf0 <_dtoa_r+0x2c8>)
  40a95c:	461a      	mov	r2, r3
  40a95e:	ea08 0303 	and.w	r3, r8, r3
  40a962:	4293      	cmp	r3, r2
  40a964:	d014      	beq.n	40a990 <_dtoa_r+0x68>
  40a966:	4650      	mov	r0, sl
  40a968:	4659      	mov	r1, fp
  40a96a:	2200      	movs	r2, #0
  40a96c:	2300      	movs	r3, #0
  40a96e:	f003 f881 	bl	40da74 <__aeabi_dcmpeq>
  40a972:	4605      	mov	r5, r0
  40a974:	b348      	cbz	r0, 40a9ca <_dtoa_r+0xa2>
  40a976:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a978:	2301      	movs	r3, #1
  40a97a:	6013      	str	r3, [r2, #0]
  40a97c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a97e:	2b00      	cmp	r3, #0
  40a980:	f000 80c5 	beq.w	40ab0e <_dtoa_r+0x1e6>
  40a984:	489b      	ldr	r0, [pc, #620]	; (40abf4 <_dtoa_r+0x2cc>)
  40a986:	6018      	str	r0, [r3, #0]
  40a988:	3801      	subs	r0, #1
  40a98a:	b017      	add	sp, #92	; 0x5c
  40a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a990:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40a992:	f242 730f 	movw	r3, #9999	; 0x270f
  40a996:	6013      	str	r3, [r2, #0]
  40a998:	f1ba 0f00 	cmp.w	sl, #0
  40a99c:	f000 80a2 	beq.w	40aae4 <_dtoa_r+0x1bc>
  40a9a0:	4895      	ldr	r0, [pc, #596]	; (40abf8 <_dtoa_r+0x2d0>)
  40a9a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a9a4:	2b00      	cmp	r3, #0
  40a9a6:	d0f0      	beq.n	40a98a <_dtoa_r+0x62>
  40a9a8:	78c3      	ldrb	r3, [r0, #3]
  40a9aa:	2b00      	cmp	r3, #0
  40a9ac:	f000 80b1 	beq.w	40ab12 <_dtoa_r+0x1ea>
  40a9b0:	f100 0308 	add.w	r3, r0, #8
  40a9b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a9b6:	6013      	str	r3, [r2, #0]
  40a9b8:	b017      	add	sp, #92	; 0x5c
  40a9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a9be:	2301      	movs	r3, #1
  40a9c0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40a9c4:	6023      	str	r3, [r4, #0]
  40a9c6:	46c3      	mov	fp, r8
  40a9c8:	e7c7      	b.n	40a95a <_dtoa_r+0x32>
  40a9ca:	aa14      	add	r2, sp, #80	; 0x50
  40a9cc:	ab15      	add	r3, sp, #84	; 0x54
  40a9ce:	9201      	str	r2, [sp, #4]
  40a9d0:	9300      	str	r3, [sp, #0]
  40a9d2:	4652      	mov	r2, sl
  40a9d4:	465b      	mov	r3, fp
  40a9d6:	4648      	mov	r0, r9
  40a9d8:	f001 ff50 	bl	40c87c <__d2b>
  40a9dc:	ea5f 5418 	movs.w	r4, r8, lsr #20
  40a9e0:	9008      	str	r0, [sp, #32]
  40a9e2:	f040 8088 	bne.w	40aaf6 <_dtoa_r+0x1ce>
  40a9e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40a9e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40a9ea:	442c      	add	r4, r5
  40a9ec:	f204 4332 	addw	r3, r4, #1074	; 0x432
  40a9f0:	2b20      	cmp	r3, #32
  40a9f2:	f340 8291 	ble.w	40af18 <_dtoa_r+0x5f0>
  40a9f6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40a9fa:	f204 4012 	addw	r0, r4, #1042	; 0x412
  40a9fe:	fa08 f803 	lsl.w	r8, r8, r3
  40aa02:	fa2a f000 	lsr.w	r0, sl, r0
  40aa06:	ea40 0008 	orr.w	r0, r0, r8
  40aa0a:	f002 fd55 	bl	40d4b8 <__aeabi_ui2d>
  40aa0e:	2301      	movs	r3, #1
  40aa10:	3c01      	subs	r4, #1
  40aa12:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40aa16:	9310      	str	r3, [sp, #64]	; 0x40
  40aa18:	2200      	movs	r2, #0
  40aa1a:	4b78      	ldr	r3, [pc, #480]	; (40abfc <_dtoa_r+0x2d4>)
  40aa1c:	f002 fc0e 	bl	40d23c <__aeabi_dsub>
  40aa20:	a36d      	add	r3, pc, #436	; (adr r3, 40abd8 <_dtoa_r+0x2b0>)
  40aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
  40aa26:	f002 fdbd 	bl	40d5a4 <__aeabi_dmul>
  40aa2a:	a36d      	add	r3, pc, #436	; (adr r3, 40abe0 <_dtoa_r+0x2b8>)
  40aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40aa30:	f002 fc06 	bl	40d240 <__adddf3>
  40aa34:	4606      	mov	r6, r0
  40aa36:	4620      	mov	r0, r4
  40aa38:	460f      	mov	r7, r1
  40aa3a:	f002 fd4d 	bl	40d4d8 <__aeabi_i2d>
  40aa3e:	a36a      	add	r3, pc, #424	; (adr r3, 40abe8 <_dtoa_r+0x2c0>)
  40aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
  40aa44:	f002 fdae 	bl	40d5a4 <__aeabi_dmul>
  40aa48:	4602      	mov	r2, r0
  40aa4a:	460b      	mov	r3, r1
  40aa4c:	4630      	mov	r0, r6
  40aa4e:	4639      	mov	r1, r7
  40aa50:	f002 fbf6 	bl	40d240 <__adddf3>
  40aa54:	4606      	mov	r6, r0
  40aa56:	460f      	mov	r7, r1
  40aa58:	f003 f854 	bl	40db04 <__aeabi_d2iz>
  40aa5c:	2200      	movs	r2, #0
  40aa5e:	9004      	str	r0, [sp, #16]
  40aa60:	2300      	movs	r3, #0
  40aa62:	4630      	mov	r0, r6
  40aa64:	4639      	mov	r1, r7
  40aa66:	f003 f80f 	bl	40da88 <__aeabi_dcmplt>
  40aa6a:	2800      	cmp	r0, #0
  40aa6c:	f040 8230 	bne.w	40aed0 <_dtoa_r+0x5a8>
  40aa70:	9e04      	ldr	r6, [sp, #16]
  40aa72:	2e16      	cmp	r6, #22
  40aa74:	f200 8229 	bhi.w	40aeca <_dtoa_r+0x5a2>
  40aa78:	4b61      	ldr	r3, [pc, #388]	; (40ac00 <_dtoa_r+0x2d8>)
  40aa7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40aa7e:	e9d3 0100 	ldrd	r0, r1, [r3]
  40aa82:	4652      	mov	r2, sl
  40aa84:	465b      	mov	r3, fp
  40aa86:	f003 f81d 	bl	40dac4 <__aeabi_dcmpgt>
  40aa8a:	2800      	cmp	r0, #0
  40aa8c:	f000 8249 	beq.w	40af22 <_dtoa_r+0x5fa>
  40aa90:	1e73      	subs	r3, r6, #1
  40aa92:	9304      	str	r3, [sp, #16]
  40aa94:	2300      	movs	r3, #0
  40aa96:	930c      	str	r3, [sp, #48]	; 0x30
  40aa98:	1b2c      	subs	r4, r5, r4
  40aa9a:	1e63      	subs	r3, r4, #1
  40aa9c:	9302      	str	r3, [sp, #8]
  40aa9e:	f100 8232 	bmi.w	40af06 <_dtoa_r+0x5de>
  40aaa2:	2300      	movs	r3, #0
  40aaa4:	9305      	str	r3, [sp, #20]
  40aaa6:	9b04      	ldr	r3, [sp, #16]
  40aaa8:	2b00      	cmp	r3, #0
  40aaaa:	f2c0 8223 	blt.w	40aef4 <_dtoa_r+0x5cc>
  40aaae:	9a02      	ldr	r2, [sp, #8]
  40aab0:	930b      	str	r3, [sp, #44]	; 0x2c
  40aab2:	4611      	mov	r1, r2
  40aab4:	4419      	add	r1, r3
  40aab6:	2300      	movs	r3, #0
  40aab8:	9102      	str	r1, [sp, #8]
  40aaba:	930a      	str	r3, [sp, #40]	; 0x28
  40aabc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40aabe:	2b09      	cmp	r3, #9
  40aac0:	d829      	bhi.n	40ab16 <_dtoa_r+0x1ee>
  40aac2:	2b05      	cmp	r3, #5
  40aac4:	f340 8658 	ble.w	40b778 <_dtoa_r+0xe50>
  40aac8:	3b04      	subs	r3, #4
  40aaca:	9320      	str	r3, [sp, #128]	; 0x80
  40aacc:	2500      	movs	r5, #0
  40aace:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40aad0:	3b02      	subs	r3, #2
  40aad2:	2b03      	cmp	r3, #3
  40aad4:	f200 8635 	bhi.w	40b742 <_dtoa_r+0xe1a>
  40aad8:	e8df f013 	tbh	[pc, r3, lsl #1]
  40aadc:	0228032c 	.word	0x0228032c
  40aae0:	04590337 	.word	0x04590337
  40aae4:	4b44      	ldr	r3, [pc, #272]	; (40abf8 <_dtoa_r+0x2d0>)
  40aae6:	4a47      	ldr	r2, [pc, #284]	; (40ac04 <_dtoa_r+0x2dc>)
  40aae8:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40aaec:	2800      	cmp	r0, #0
  40aaee:	bf14      	ite	ne
  40aaf0:	4618      	movne	r0, r3
  40aaf2:	4610      	moveq	r0, r2
  40aaf4:	e755      	b.n	40a9a2 <_dtoa_r+0x7a>
  40aaf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40aafa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40aafe:	9510      	str	r5, [sp, #64]	; 0x40
  40ab00:	4650      	mov	r0, sl
  40ab02:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40ab06:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40ab0a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40ab0c:	e784      	b.n	40aa18 <_dtoa_r+0xf0>
  40ab0e:	483e      	ldr	r0, [pc, #248]	; (40ac08 <_dtoa_r+0x2e0>)
  40ab10:	e73b      	b.n	40a98a <_dtoa_r+0x62>
  40ab12:	1cc3      	adds	r3, r0, #3
  40ab14:	e74e      	b.n	40a9b4 <_dtoa_r+0x8c>
  40ab16:	2100      	movs	r1, #0
  40ab18:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40ab1c:	4648      	mov	r0, r9
  40ab1e:	9120      	str	r1, [sp, #128]	; 0x80
  40ab20:	f001 fbfa 	bl	40c318 <_Balloc>
  40ab24:	f04f 33ff 	mov.w	r3, #4294967295
  40ab28:	9306      	str	r3, [sp, #24]
  40ab2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40ab2c:	930d      	str	r3, [sp, #52]	; 0x34
  40ab2e:	2301      	movs	r3, #1
  40ab30:	9007      	str	r0, [sp, #28]
  40ab32:	9221      	str	r2, [sp, #132]	; 0x84
  40ab34:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40ab38:	9309      	str	r3, [sp, #36]	; 0x24
  40ab3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40ab3c:	2b00      	cmp	r3, #0
  40ab3e:	f2c0 80d1 	blt.w	40ace4 <_dtoa_r+0x3bc>
  40ab42:	9a04      	ldr	r2, [sp, #16]
  40ab44:	2a0e      	cmp	r2, #14
  40ab46:	f300 80cd 	bgt.w	40ace4 <_dtoa_r+0x3bc>
  40ab4a:	4b2d      	ldr	r3, [pc, #180]	; (40ac00 <_dtoa_r+0x2d8>)
  40ab4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40ab50:	e9d3 3400 	ldrd	r3, r4, [r3]
  40ab54:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40ab58:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ab5a:	2b00      	cmp	r3, #0
  40ab5c:	f2c0 8300 	blt.w	40b160 <_dtoa_r+0x838>
  40ab60:	4656      	mov	r6, sl
  40ab62:	465f      	mov	r7, fp
  40ab64:	4650      	mov	r0, sl
  40ab66:	4659      	mov	r1, fp
  40ab68:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40ab6c:	4652      	mov	r2, sl
  40ab6e:	465b      	mov	r3, fp
  40ab70:	f002 fe42 	bl	40d7f8 <__aeabi_ddiv>
  40ab74:	f002 ffc6 	bl	40db04 <__aeabi_d2iz>
  40ab78:	4604      	mov	r4, r0
  40ab7a:	f002 fcad 	bl	40d4d8 <__aeabi_i2d>
  40ab7e:	4652      	mov	r2, sl
  40ab80:	465b      	mov	r3, fp
  40ab82:	f002 fd0f 	bl	40d5a4 <__aeabi_dmul>
  40ab86:	460b      	mov	r3, r1
  40ab88:	4602      	mov	r2, r0
  40ab8a:	4639      	mov	r1, r7
  40ab8c:	4630      	mov	r0, r6
  40ab8e:	f002 fb55 	bl	40d23c <__aeabi_dsub>
  40ab92:	9d07      	ldr	r5, [sp, #28]
  40ab94:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40ab98:	702b      	strb	r3, [r5, #0]
  40ab9a:	9b06      	ldr	r3, [sp, #24]
  40ab9c:	2b01      	cmp	r3, #1
  40ab9e:	4606      	mov	r6, r0
  40aba0:	460f      	mov	r7, r1
  40aba2:	f105 0501 	add.w	r5, r5, #1
  40aba6:	d062      	beq.n	40ac6e <_dtoa_r+0x346>
  40aba8:	2200      	movs	r2, #0
  40abaa:	4b18      	ldr	r3, [pc, #96]	; (40ac0c <_dtoa_r+0x2e4>)
  40abac:	f002 fcfa 	bl	40d5a4 <__aeabi_dmul>
  40abb0:	2200      	movs	r2, #0
  40abb2:	2300      	movs	r3, #0
  40abb4:	4606      	mov	r6, r0
  40abb6:	460f      	mov	r7, r1
  40abb8:	f002 ff5c 	bl	40da74 <__aeabi_dcmpeq>
  40abbc:	2800      	cmp	r0, #0
  40abbe:	d17e      	bne.n	40acbe <_dtoa_r+0x396>
  40abc0:	f8cd 9014 	str.w	r9, [sp, #20]
  40abc4:	f8dd a018 	ldr.w	sl, [sp, #24]
  40abc8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40abcc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40abd0:	e029      	b.n	40ac26 <_dtoa_r+0x2fe>
  40abd2:	bf00      	nop
  40abd4:	f3af 8000 	nop.w
  40abd8:	636f4361 	.word	0x636f4361
  40abdc:	3fd287a7 	.word	0x3fd287a7
  40abe0:	8b60c8b3 	.word	0x8b60c8b3
  40abe4:	3fc68a28 	.word	0x3fc68a28
  40abe8:	509f79fb 	.word	0x509f79fb
  40abec:	3fd34413 	.word	0x3fd34413
  40abf0:	7ff00000 	.word	0x7ff00000
  40abf4:	0040f801 	.word	0x0040f801
  40abf8:	0040f840 	.word	0x0040f840
  40abfc:	3ff80000 	.word	0x3ff80000
  40ac00:	0040f850 	.word	0x0040f850
  40ac04:	0040f834 	.word	0x0040f834
  40ac08:	0040f800 	.word	0x0040f800
  40ac0c:	40240000 	.word	0x40240000
  40ac10:	f002 fcc8 	bl	40d5a4 <__aeabi_dmul>
  40ac14:	2200      	movs	r2, #0
  40ac16:	2300      	movs	r3, #0
  40ac18:	4606      	mov	r6, r0
  40ac1a:	460f      	mov	r7, r1
  40ac1c:	f002 ff2a 	bl	40da74 <__aeabi_dcmpeq>
  40ac20:	2800      	cmp	r0, #0
  40ac22:	f040 83b7 	bne.w	40b394 <_dtoa_r+0xa6c>
  40ac26:	4642      	mov	r2, r8
  40ac28:	464b      	mov	r3, r9
  40ac2a:	4630      	mov	r0, r6
  40ac2c:	4639      	mov	r1, r7
  40ac2e:	f002 fde3 	bl	40d7f8 <__aeabi_ddiv>
  40ac32:	f002 ff67 	bl	40db04 <__aeabi_d2iz>
  40ac36:	4604      	mov	r4, r0
  40ac38:	f002 fc4e 	bl	40d4d8 <__aeabi_i2d>
  40ac3c:	4642      	mov	r2, r8
  40ac3e:	464b      	mov	r3, r9
  40ac40:	f002 fcb0 	bl	40d5a4 <__aeabi_dmul>
  40ac44:	4602      	mov	r2, r0
  40ac46:	460b      	mov	r3, r1
  40ac48:	4630      	mov	r0, r6
  40ac4a:	4639      	mov	r1, r7
  40ac4c:	f002 faf6 	bl	40d23c <__aeabi_dsub>
  40ac50:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40ac54:	f805 eb01 	strb.w	lr, [r5], #1
  40ac58:	ebcb 0e05 	rsb	lr, fp, r5
  40ac5c:	45d6      	cmp	lr, sl
  40ac5e:	4606      	mov	r6, r0
  40ac60:	460f      	mov	r7, r1
  40ac62:	f04f 0200 	mov.w	r2, #0
  40ac66:	4bb0      	ldr	r3, [pc, #704]	; (40af28 <_dtoa_r+0x600>)
  40ac68:	d1d2      	bne.n	40ac10 <_dtoa_r+0x2e8>
  40ac6a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40ac6e:	4632      	mov	r2, r6
  40ac70:	463b      	mov	r3, r7
  40ac72:	4630      	mov	r0, r6
  40ac74:	4639      	mov	r1, r7
  40ac76:	f002 fae3 	bl	40d240 <__adddf3>
  40ac7a:	4606      	mov	r6, r0
  40ac7c:	460f      	mov	r7, r1
  40ac7e:	4602      	mov	r2, r0
  40ac80:	460b      	mov	r3, r1
  40ac82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ac86:	f002 feff 	bl	40da88 <__aeabi_dcmplt>
  40ac8a:	b940      	cbnz	r0, 40ac9e <_dtoa_r+0x376>
  40ac8c:	4632      	mov	r2, r6
  40ac8e:	463b      	mov	r3, r7
  40ac90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ac94:	f002 feee 	bl	40da74 <__aeabi_dcmpeq>
  40ac98:	b188      	cbz	r0, 40acbe <_dtoa_r+0x396>
  40ac9a:	07e3      	lsls	r3, r4, #31
  40ac9c:	d50f      	bpl.n	40acbe <_dtoa_r+0x396>
  40ac9e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40aca2:	9a07      	ldr	r2, [sp, #28]
  40aca4:	1e6b      	subs	r3, r5, #1
  40aca6:	e004      	b.n	40acb2 <_dtoa_r+0x38a>
  40aca8:	429a      	cmp	r2, r3
  40acaa:	f000 842c 	beq.w	40b506 <_dtoa_r+0xbde>
  40acae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40acb2:	2c39      	cmp	r4, #57	; 0x39
  40acb4:	f103 0501 	add.w	r5, r3, #1
  40acb8:	d0f6      	beq.n	40aca8 <_dtoa_r+0x380>
  40acba:	3401      	adds	r4, #1
  40acbc:	701c      	strb	r4, [r3, #0]
  40acbe:	9908      	ldr	r1, [sp, #32]
  40acc0:	4648      	mov	r0, r9
  40acc2:	f001 fb4f 	bl	40c364 <_Bfree>
  40acc6:	2200      	movs	r2, #0
  40acc8:	9b04      	ldr	r3, [sp, #16]
  40acca:	702a      	strb	r2, [r5, #0]
  40accc:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40acce:	3301      	adds	r3, #1
  40acd0:	6013      	str	r3, [r2, #0]
  40acd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40acd4:	2b00      	cmp	r3, #0
  40acd6:	f000 83a7 	beq.w	40b428 <_dtoa_r+0xb00>
  40acda:	9807      	ldr	r0, [sp, #28]
  40acdc:	601d      	str	r5, [r3, #0]
  40acde:	b017      	add	sp, #92	; 0x5c
  40ace0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ace4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ace6:	2a00      	cmp	r2, #0
  40ace8:	f000 8112 	beq.w	40af10 <_dtoa_r+0x5e8>
  40acec:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40acee:	2a01      	cmp	r2, #1
  40acf0:	f340 8258 	ble.w	40b1a4 <_dtoa_r+0x87c>
  40acf4:	9b06      	ldr	r3, [sp, #24]
  40acf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40acf8:	1e5f      	subs	r7, r3, #1
  40acfa:	42ba      	cmp	r2, r7
  40acfc:	f2c0 8397 	blt.w	40b42e <_dtoa_r+0xb06>
  40ad00:	1bd7      	subs	r7, r2, r7
  40ad02:	9b06      	ldr	r3, [sp, #24]
  40ad04:	2b00      	cmp	r3, #0
  40ad06:	f2c0 848a 	blt.w	40b61e <_dtoa_r+0xcf6>
  40ad0a:	9d05      	ldr	r5, [sp, #20]
  40ad0c:	9b06      	ldr	r3, [sp, #24]
  40ad0e:	9a05      	ldr	r2, [sp, #20]
  40ad10:	441a      	add	r2, r3
  40ad12:	9205      	str	r2, [sp, #20]
  40ad14:	9a02      	ldr	r2, [sp, #8]
  40ad16:	2101      	movs	r1, #1
  40ad18:	441a      	add	r2, r3
  40ad1a:	4648      	mov	r0, r9
  40ad1c:	9202      	str	r2, [sp, #8]
  40ad1e:	f001 fbb9 	bl	40c494 <__i2b>
  40ad22:	4606      	mov	r6, r0
  40ad24:	b165      	cbz	r5, 40ad40 <_dtoa_r+0x418>
  40ad26:	9902      	ldr	r1, [sp, #8]
  40ad28:	2900      	cmp	r1, #0
  40ad2a:	460b      	mov	r3, r1
  40ad2c:	dd08      	ble.n	40ad40 <_dtoa_r+0x418>
  40ad2e:	42a9      	cmp	r1, r5
  40ad30:	9a05      	ldr	r2, [sp, #20]
  40ad32:	bfa8      	it	ge
  40ad34:	462b      	movge	r3, r5
  40ad36:	1ad2      	subs	r2, r2, r3
  40ad38:	1aed      	subs	r5, r5, r3
  40ad3a:	1acb      	subs	r3, r1, r3
  40ad3c:	9205      	str	r2, [sp, #20]
  40ad3e:	9302      	str	r3, [sp, #8]
  40ad40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ad42:	2b00      	cmp	r3, #0
  40ad44:	f340 82fc 	ble.w	40b340 <_dtoa_r+0xa18>
  40ad48:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ad4a:	2a00      	cmp	r2, #0
  40ad4c:	f000 8201 	beq.w	40b152 <_dtoa_r+0x82a>
  40ad50:	2f00      	cmp	r7, #0
  40ad52:	f000 81fe 	beq.w	40b152 <_dtoa_r+0x82a>
  40ad56:	4631      	mov	r1, r6
  40ad58:	463a      	mov	r2, r7
  40ad5a:	4648      	mov	r0, r9
  40ad5c:	f001 fc3c 	bl	40c5d8 <__pow5mult>
  40ad60:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40ad64:	4601      	mov	r1, r0
  40ad66:	4642      	mov	r2, r8
  40ad68:	4606      	mov	r6, r0
  40ad6a:	4648      	mov	r0, r9
  40ad6c:	f001 fb9c 	bl	40c4a8 <__multiply>
  40ad70:	4641      	mov	r1, r8
  40ad72:	4604      	mov	r4, r0
  40ad74:	4648      	mov	r0, r9
  40ad76:	f001 faf5 	bl	40c364 <_Bfree>
  40ad7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ad7c:	1bdb      	subs	r3, r3, r7
  40ad7e:	930a      	str	r3, [sp, #40]	; 0x28
  40ad80:	f040 81e6 	bne.w	40b150 <_dtoa_r+0x828>
  40ad84:	2101      	movs	r1, #1
  40ad86:	4648      	mov	r0, r9
  40ad88:	f001 fb84 	bl	40c494 <__i2b>
  40ad8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ad8e:	4680      	mov	r8, r0
  40ad90:	2b00      	cmp	r3, #0
  40ad92:	f000 8219 	beq.w	40b1c8 <_dtoa_r+0x8a0>
  40ad96:	4601      	mov	r1, r0
  40ad98:	461a      	mov	r2, r3
  40ad9a:	4648      	mov	r0, r9
  40ad9c:	f001 fc1c 	bl	40c5d8 <__pow5mult>
  40ada0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40ada2:	2b01      	cmp	r3, #1
  40ada4:	4680      	mov	r8, r0
  40ada6:	f340 82f8 	ble.w	40b39a <_dtoa_r+0xa72>
  40adaa:	2700      	movs	r7, #0
  40adac:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40adb0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40adb4:	6918      	ldr	r0, [r3, #16]
  40adb6:	f001 fb1f 	bl	40c3f8 <__hi0bits>
  40adba:	f1c0 0020 	rsb	r0, r0, #32
  40adbe:	9a02      	ldr	r2, [sp, #8]
  40adc0:	4410      	add	r0, r2
  40adc2:	f010 001f 	ands.w	r0, r0, #31
  40adc6:	f000 81f6 	beq.w	40b1b6 <_dtoa_r+0x88e>
  40adca:	f1c0 0320 	rsb	r3, r0, #32
  40adce:	2b04      	cmp	r3, #4
  40add0:	f340 84ca 	ble.w	40b768 <_dtoa_r+0xe40>
  40add4:	9b05      	ldr	r3, [sp, #20]
  40add6:	f1c0 001c 	rsb	r0, r0, #28
  40adda:	4403      	add	r3, r0
  40addc:	9305      	str	r3, [sp, #20]
  40adde:	4613      	mov	r3, r2
  40ade0:	4403      	add	r3, r0
  40ade2:	4405      	add	r5, r0
  40ade4:	9302      	str	r3, [sp, #8]
  40ade6:	9b05      	ldr	r3, [sp, #20]
  40ade8:	2b00      	cmp	r3, #0
  40adea:	dd05      	ble.n	40adf8 <_dtoa_r+0x4d0>
  40adec:	4621      	mov	r1, r4
  40adee:	461a      	mov	r2, r3
  40adf0:	4648      	mov	r0, r9
  40adf2:	f001 fc41 	bl	40c678 <__lshift>
  40adf6:	4604      	mov	r4, r0
  40adf8:	9b02      	ldr	r3, [sp, #8]
  40adfa:	2b00      	cmp	r3, #0
  40adfc:	dd05      	ble.n	40ae0a <_dtoa_r+0x4e2>
  40adfe:	4641      	mov	r1, r8
  40ae00:	461a      	mov	r2, r3
  40ae02:	4648      	mov	r0, r9
  40ae04:	f001 fc38 	bl	40c678 <__lshift>
  40ae08:	4680      	mov	r8, r0
  40ae0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ae0c:	2b00      	cmp	r3, #0
  40ae0e:	f040 827c 	bne.w	40b30a <_dtoa_r+0x9e2>
  40ae12:	9b06      	ldr	r3, [sp, #24]
  40ae14:	2b00      	cmp	r3, #0
  40ae16:	f340 8295 	ble.w	40b344 <_dtoa_r+0xa1c>
  40ae1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ae1c:	2b00      	cmp	r3, #0
  40ae1e:	f040 81f5 	bne.w	40b20c <_dtoa_r+0x8e4>
  40ae22:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40ae26:	9f06      	ldr	r7, [sp, #24]
  40ae28:	465d      	mov	r5, fp
  40ae2a:	e002      	b.n	40ae32 <_dtoa_r+0x50a>
  40ae2c:	f001 faa4 	bl	40c378 <__multadd>
  40ae30:	4604      	mov	r4, r0
  40ae32:	4641      	mov	r1, r8
  40ae34:	4620      	mov	r0, r4
  40ae36:	f7ff fce3 	bl	40a800 <quorem>
  40ae3a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40ae3e:	f805 ab01 	strb.w	sl, [r5], #1
  40ae42:	ebcb 0305 	rsb	r3, fp, r5
  40ae46:	42bb      	cmp	r3, r7
  40ae48:	f04f 020a 	mov.w	r2, #10
  40ae4c:	f04f 0300 	mov.w	r3, #0
  40ae50:	4621      	mov	r1, r4
  40ae52:	4648      	mov	r0, r9
  40ae54:	dbea      	blt.n	40ae2c <_dtoa_r+0x504>
  40ae56:	9b07      	ldr	r3, [sp, #28]
  40ae58:	9a06      	ldr	r2, [sp, #24]
  40ae5a:	2a01      	cmp	r2, #1
  40ae5c:	bfac      	ite	ge
  40ae5e:	189b      	addge	r3, r3, r2
  40ae60:	3301      	addlt	r3, #1
  40ae62:	461d      	mov	r5, r3
  40ae64:	f04f 0b00 	mov.w	fp, #0
  40ae68:	4621      	mov	r1, r4
  40ae6a:	2201      	movs	r2, #1
  40ae6c:	4648      	mov	r0, r9
  40ae6e:	f001 fc03 	bl	40c678 <__lshift>
  40ae72:	4641      	mov	r1, r8
  40ae74:	9008      	str	r0, [sp, #32]
  40ae76:	f001 fc57 	bl	40c728 <__mcmp>
  40ae7a:	2800      	cmp	r0, #0
  40ae7c:	f340 830d 	ble.w	40b49a <_dtoa_r+0xb72>
  40ae80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40ae84:	9907      	ldr	r1, [sp, #28]
  40ae86:	1e6b      	subs	r3, r5, #1
  40ae88:	e004      	b.n	40ae94 <_dtoa_r+0x56c>
  40ae8a:	428b      	cmp	r3, r1
  40ae8c:	f000 8278 	beq.w	40b380 <_dtoa_r+0xa58>
  40ae90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40ae94:	2a39      	cmp	r2, #57	; 0x39
  40ae96:	f103 0501 	add.w	r5, r3, #1
  40ae9a:	d0f6      	beq.n	40ae8a <_dtoa_r+0x562>
  40ae9c:	3201      	adds	r2, #1
  40ae9e:	701a      	strb	r2, [r3, #0]
  40aea0:	4641      	mov	r1, r8
  40aea2:	4648      	mov	r0, r9
  40aea4:	f001 fa5e 	bl	40c364 <_Bfree>
  40aea8:	2e00      	cmp	r6, #0
  40aeaa:	f43f af08 	beq.w	40acbe <_dtoa_r+0x396>
  40aeae:	f1bb 0f00 	cmp.w	fp, #0
  40aeb2:	d005      	beq.n	40aec0 <_dtoa_r+0x598>
  40aeb4:	45b3      	cmp	fp, r6
  40aeb6:	d003      	beq.n	40aec0 <_dtoa_r+0x598>
  40aeb8:	4659      	mov	r1, fp
  40aeba:	4648      	mov	r0, r9
  40aebc:	f001 fa52 	bl	40c364 <_Bfree>
  40aec0:	4631      	mov	r1, r6
  40aec2:	4648      	mov	r0, r9
  40aec4:	f001 fa4e 	bl	40c364 <_Bfree>
  40aec8:	e6f9      	b.n	40acbe <_dtoa_r+0x396>
  40aeca:	2301      	movs	r3, #1
  40aecc:	930c      	str	r3, [sp, #48]	; 0x30
  40aece:	e5e3      	b.n	40aa98 <_dtoa_r+0x170>
  40aed0:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40aed4:	4640      	mov	r0, r8
  40aed6:	f002 faff 	bl	40d4d8 <__aeabi_i2d>
  40aeda:	4602      	mov	r2, r0
  40aedc:	460b      	mov	r3, r1
  40aede:	4630      	mov	r0, r6
  40aee0:	4639      	mov	r1, r7
  40aee2:	f002 fdc7 	bl	40da74 <__aeabi_dcmpeq>
  40aee6:	2800      	cmp	r0, #0
  40aee8:	f47f adc2 	bne.w	40aa70 <_dtoa_r+0x148>
  40aeec:	f108 33ff 	add.w	r3, r8, #4294967295
  40aef0:	9304      	str	r3, [sp, #16]
  40aef2:	e5bd      	b.n	40aa70 <_dtoa_r+0x148>
  40aef4:	9a05      	ldr	r2, [sp, #20]
  40aef6:	9b04      	ldr	r3, [sp, #16]
  40aef8:	1ad2      	subs	r2, r2, r3
  40aefa:	425b      	negs	r3, r3
  40aefc:	930a      	str	r3, [sp, #40]	; 0x28
  40aefe:	2300      	movs	r3, #0
  40af00:	9205      	str	r2, [sp, #20]
  40af02:	930b      	str	r3, [sp, #44]	; 0x2c
  40af04:	e5da      	b.n	40aabc <_dtoa_r+0x194>
  40af06:	425b      	negs	r3, r3
  40af08:	9305      	str	r3, [sp, #20]
  40af0a:	2300      	movs	r3, #0
  40af0c:	9302      	str	r3, [sp, #8]
  40af0e:	e5ca      	b.n	40aaa6 <_dtoa_r+0x17e>
  40af10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40af12:	9d05      	ldr	r5, [sp, #20]
  40af14:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40af16:	e705      	b.n	40ad24 <_dtoa_r+0x3fc>
  40af18:	f1c3 0820 	rsb	r8, r3, #32
  40af1c:	fa0a f008 	lsl.w	r0, sl, r8
  40af20:	e573      	b.n	40aa0a <_dtoa_r+0xe2>
  40af22:	900c      	str	r0, [sp, #48]	; 0x30
  40af24:	e5b8      	b.n	40aa98 <_dtoa_r+0x170>
  40af26:	bf00      	nop
  40af28:	40240000 	.word	0x40240000
  40af2c:	2300      	movs	r3, #0
  40af2e:	9309      	str	r3, [sp, #36]	; 0x24
  40af30:	9b04      	ldr	r3, [sp, #16]
  40af32:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40af34:	4413      	add	r3, r2
  40af36:	930d      	str	r3, [sp, #52]	; 0x34
  40af38:	3301      	adds	r3, #1
  40af3a:	2b00      	cmp	r3, #0
  40af3c:	9306      	str	r3, [sp, #24]
  40af3e:	f340 8283 	ble.w	40b448 <_dtoa_r+0xb20>
  40af42:	9c06      	ldr	r4, [sp, #24]
  40af44:	4626      	mov	r6, r4
  40af46:	2100      	movs	r1, #0
  40af48:	2e17      	cmp	r6, #23
  40af4a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40af4e:	d90b      	bls.n	40af68 <_dtoa_r+0x640>
  40af50:	2201      	movs	r2, #1
  40af52:	2304      	movs	r3, #4
  40af54:	005b      	lsls	r3, r3, #1
  40af56:	f103 0014 	add.w	r0, r3, #20
  40af5a:	42b0      	cmp	r0, r6
  40af5c:	4611      	mov	r1, r2
  40af5e:	f102 0201 	add.w	r2, r2, #1
  40af62:	d9f7      	bls.n	40af54 <_dtoa_r+0x62c>
  40af64:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40af68:	4648      	mov	r0, r9
  40af6a:	f001 f9d5 	bl	40c318 <_Balloc>
  40af6e:	2c0e      	cmp	r4, #14
  40af70:	9007      	str	r0, [sp, #28]
  40af72:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40af76:	f63f ade0 	bhi.w	40ab3a <_dtoa_r+0x212>
  40af7a:	2d00      	cmp	r5, #0
  40af7c:	f43f addd 	beq.w	40ab3a <_dtoa_r+0x212>
  40af80:	9904      	ldr	r1, [sp, #16]
  40af82:	4657      	mov	r7, sl
  40af84:	46d8      	mov	r8, fp
  40af86:	2900      	cmp	r1, #0
  40af88:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40af8c:	f340 8292 	ble.w	40b4b4 <_dtoa_r+0xb8c>
  40af90:	4b91      	ldr	r3, [pc, #580]	; (40b1d8 <_dtoa_r+0x8b0>)
  40af92:	f001 020f 	and.w	r2, r1, #15
  40af96:	110e      	asrs	r6, r1, #4
  40af98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40af9c:	06f0      	lsls	r0, r6, #27
  40af9e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40afa2:	f140 824c 	bpl.w	40b43e <_dtoa_r+0xb16>
  40afa6:	4b8d      	ldr	r3, [pc, #564]	; (40b1dc <_dtoa_r+0x8b4>)
  40afa8:	4650      	mov	r0, sl
  40afaa:	4659      	mov	r1, fp
  40afac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40afb0:	f002 fc22 	bl	40d7f8 <__aeabi_ddiv>
  40afb4:	f006 060f 	and.w	r6, r6, #15
  40afb8:	4682      	mov	sl, r0
  40afba:	468b      	mov	fp, r1
  40afbc:	f04f 0803 	mov.w	r8, #3
  40afc0:	b186      	cbz	r6, 40afe4 <_dtoa_r+0x6bc>
  40afc2:	4f86      	ldr	r7, [pc, #536]	; (40b1dc <_dtoa_r+0x8b4>)
  40afc4:	07f1      	lsls	r1, r6, #31
  40afc6:	d509      	bpl.n	40afdc <_dtoa_r+0x6b4>
  40afc8:	4620      	mov	r0, r4
  40afca:	4629      	mov	r1, r5
  40afcc:	e9d7 2300 	ldrd	r2, r3, [r7]
  40afd0:	f002 fae8 	bl	40d5a4 <__aeabi_dmul>
  40afd4:	f108 0801 	add.w	r8, r8, #1
  40afd8:	4604      	mov	r4, r0
  40afda:	460d      	mov	r5, r1
  40afdc:	1076      	asrs	r6, r6, #1
  40afde:	f107 0708 	add.w	r7, r7, #8
  40afe2:	d1ef      	bne.n	40afc4 <_dtoa_r+0x69c>
  40afe4:	4622      	mov	r2, r4
  40afe6:	462b      	mov	r3, r5
  40afe8:	4650      	mov	r0, sl
  40afea:	4659      	mov	r1, fp
  40afec:	f002 fc04 	bl	40d7f8 <__aeabi_ddiv>
  40aff0:	4606      	mov	r6, r0
  40aff2:	460f      	mov	r7, r1
  40aff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40aff6:	b143      	cbz	r3, 40b00a <_dtoa_r+0x6e2>
  40aff8:	2200      	movs	r2, #0
  40affa:	4b79      	ldr	r3, [pc, #484]	; (40b1e0 <_dtoa_r+0x8b8>)
  40affc:	4630      	mov	r0, r6
  40affe:	4639      	mov	r1, r7
  40b000:	f002 fd42 	bl	40da88 <__aeabi_dcmplt>
  40b004:	2800      	cmp	r0, #0
  40b006:	f040 8320 	bne.w	40b64a <_dtoa_r+0xd22>
  40b00a:	4640      	mov	r0, r8
  40b00c:	f002 fa64 	bl	40d4d8 <__aeabi_i2d>
  40b010:	4632      	mov	r2, r6
  40b012:	463b      	mov	r3, r7
  40b014:	f002 fac6 	bl	40d5a4 <__aeabi_dmul>
  40b018:	4b72      	ldr	r3, [pc, #456]	; (40b1e4 <_dtoa_r+0x8bc>)
  40b01a:	2200      	movs	r2, #0
  40b01c:	f002 f910 	bl	40d240 <__adddf3>
  40b020:	9b06      	ldr	r3, [sp, #24]
  40b022:	4604      	mov	r4, r0
  40b024:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40b028:	2b00      	cmp	r3, #0
  40b02a:	f000 81df 	beq.w	40b3ec <_dtoa_r+0xac4>
  40b02e:	9b04      	ldr	r3, [sp, #16]
  40b030:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40b034:	9311      	str	r3, [sp, #68]	; 0x44
  40b036:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b038:	2b00      	cmp	r3, #0
  40b03a:	f000 8297 	beq.w	40b56c <_dtoa_r+0xc44>
  40b03e:	4b66      	ldr	r3, [pc, #408]	; (40b1d8 <_dtoa_r+0x8b0>)
  40b040:	4969      	ldr	r1, [pc, #420]	; (40b1e8 <_dtoa_r+0x8c0>)
  40b042:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40b046:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40b04a:	2000      	movs	r0, #0
  40b04c:	f002 fbd4 	bl	40d7f8 <__aeabi_ddiv>
  40b050:	4622      	mov	r2, r4
  40b052:	462b      	mov	r3, r5
  40b054:	f002 f8f2 	bl	40d23c <__aeabi_dsub>
  40b058:	4682      	mov	sl, r0
  40b05a:	468b      	mov	fp, r1
  40b05c:	4630      	mov	r0, r6
  40b05e:	4639      	mov	r1, r7
  40b060:	f002 fd50 	bl	40db04 <__aeabi_d2iz>
  40b064:	4604      	mov	r4, r0
  40b066:	f002 fa37 	bl	40d4d8 <__aeabi_i2d>
  40b06a:	4602      	mov	r2, r0
  40b06c:	460b      	mov	r3, r1
  40b06e:	4630      	mov	r0, r6
  40b070:	4639      	mov	r1, r7
  40b072:	f002 f8e3 	bl	40d23c <__aeabi_dsub>
  40b076:	3430      	adds	r4, #48	; 0x30
  40b078:	9d07      	ldr	r5, [sp, #28]
  40b07a:	b2e4      	uxtb	r4, r4
  40b07c:	4606      	mov	r6, r0
  40b07e:	460f      	mov	r7, r1
  40b080:	702c      	strb	r4, [r5, #0]
  40b082:	4602      	mov	r2, r0
  40b084:	460b      	mov	r3, r1
  40b086:	4650      	mov	r0, sl
  40b088:	4659      	mov	r1, fp
  40b08a:	3501      	adds	r5, #1
  40b08c:	f002 fd1a 	bl	40dac4 <__aeabi_dcmpgt>
  40b090:	2800      	cmp	r0, #0
  40b092:	d14c      	bne.n	40b12e <_dtoa_r+0x806>
  40b094:	4632      	mov	r2, r6
  40b096:	463b      	mov	r3, r7
  40b098:	2000      	movs	r0, #0
  40b09a:	4951      	ldr	r1, [pc, #324]	; (40b1e0 <_dtoa_r+0x8b8>)
  40b09c:	f002 f8ce 	bl	40d23c <__aeabi_dsub>
  40b0a0:	4602      	mov	r2, r0
  40b0a2:	460b      	mov	r3, r1
  40b0a4:	4650      	mov	r0, sl
  40b0a6:	4659      	mov	r1, fp
  40b0a8:	f002 fd0c 	bl	40dac4 <__aeabi_dcmpgt>
  40b0ac:	2800      	cmp	r0, #0
  40b0ae:	f040 830d 	bne.w	40b6cc <_dtoa_r+0xda4>
  40b0b2:	f1b8 0f01 	cmp.w	r8, #1
  40b0b6:	f340 81b3 	ble.w	40b420 <_dtoa_r+0xaf8>
  40b0ba:	9b07      	ldr	r3, [sp, #28]
  40b0bc:	4498      	add	r8, r3
  40b0be:	e00d      	b.n	40b0dc <_dtoa_r+0x7b4>
  40b0c0:	2000      	movs	r0, #0
  40b0c2:	4947      	ldr	r1, [pc, #284]	; (40b1e0 <_dtoa_r+0x8b8>)
  40b0c4:	f002 f8ba 	bl	40d23c <__aeabi_dsub>
  40b0c8:	4652      	mov	r2, sl
  40b0ca:	465b      	mov	r3, fp
  40b0cc:	f002 fcdc 	bl	40da88 <__aeabi_dcmplt>
  40b0d0:	2800      	cmp	r0, #0
  40b0d2:	f040 82fb 	bne.w	40b6cc <_dtoa_r+0xda4>
  40b0d6:	4545      	cmp	r5, r8
  40b0d8:	f000 81a2 	beq.w	40b420 <_dtoa_r+0xaf8>
  40b0dc:	4650      	mov	r0, sl
  40b0de:	4659      	mov	r1, fp
  40b0e0:	2200      	movs	r2, #0
  40b0e2:	4b42      	ldr	r3, [pc, #264]	; (40b1ec <_dtoa_r+0x8c4>)
  40b0e4:	f002 fa5e 	bl	40d5a4 <__aeabi_dmul>
  40b0e8:	2200      	movs	r2, #0
  40b0ea:	4b40      	ldr	r3, [pc, #256]	; (40b1ec <_dtoa_r+0x8c4>)
  40b0ec:	4682      	mov	sl, r0
  40b0ee:	468b      	mov	fp, r1
  40b0f0:	4630      	mov	r0, r6
  40b0f2:	4639      	mov	r1, r7
  40b0f4:	f002 fa56 	bl	40d5a4 <__aeabi_dmul>
  40b0f8:	460f      	mov	r7, r1
  40b0fa:	4606      	mov	r6, r0
  40b0fc:	f002 fd02 	bl	40db04 <__aeabi_d2iz>
  40b100:	4604      	mov	r4, r0
  40b102:	f002 f9e9 	bl	40d4d8 <__aeabi_i2d>
  40b106:	4602      	mov	r2, r0
  40b108:	460b      	mov	r3, r1
  40b10a:	4630      	mov	r0, r6
  40b10c:	4639      	mov	r1, r7
  40b10e:	f002 f895 	bl	40d23c <__aeabi_dsub>
  40b112:	3430      	adds	r4, #48	; 0x30
  40b114:	b2e4      	uxtb	r4, r4
  40b116:	4652      	mov	r2, sl
  40b118:	465b      	mov	r3, fp
  40b11a:	f805 4b01 	strb.w	r4, [r5], #1
  40b11e:	4606      	mov	r6, r0
  40b120:	460f      	mov	r7, r1
  40b122:	f002 fcb1 	bl	40da88 <__aeabi_dcmplt>
  40b126:	4632      	mov	r2, r6
  40b128:	463b      	mov	r3, r7
  40b12a:	2800      	cmp	r0, #0
  40b12c:	d0c8      	beq.n	40b0c0 <_dtoa_r+0x798>
  40b12e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b130:	9304      	str	r3, [sp, #16]
  40b132:	e5c4      	b.n	40acbe <_dtoa_r+0x396>
  40b134:	2300      	movs	r3, #0
  40b136:	9309      	str	r3, [sp, #36]	; 0x24
  40b138:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40b13a:	2b00      	cmp	r3, #0
  40b13c:	f340 8189 	ble.w	40b452 <_dtoa_r+0xb2a>
  40b140:	461e      	mov	r6, r3
  40b142:	461c      	mov	r4, r3
  40b144:	930d      	str	r3, [sp, #52]	; 0x34
  40b146:	9306      	str	r3, [sp, #24]
  40b148:	e6fd      	b.n	40af46 <_dtoa_r+0x61e>
  40b14a:	2301      	movs	r3, #1
  40b14c:	9309      	str	r3, [sp, #36]	; 0x24
  40b14e:	e7f3      	b.n	40b138 <_dtoa_r+0x810>
  40b150:	9408      	str	r4, [sp, #32]
  40b152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b154:	9908      	ldr	r1, [sp, #32]
  40b156:	4648      	mov	r0, r9
  40b158:	f001 fa3e 	bl	40c5d8 <__pow5mult>
  40b15c:	4604      	mov	r4, r0
  40b15e:	e611      	b.n	40ad84 <_dtoa_r+0x45c>
  40b160:	9b06      	ldr	r3, [sp, #24]
  40b162:	2b00      	cmp	r3, #0
  40b164:	f73f acfc 	bgt.w	40ab60 <_dtoa_r+0x238>
  40b168:	f040 82da 	bne.w	40b720 <_dtoa_r+0xdf8>
  40b16c:	2200      	movs	r2, #0
  40b16e:	4b20      	ldr	r3, [pc, #128]	; (40b1f0 <_dtoa_r+0x8c8>)
  40b170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40b174:	f002 fa16 	bl	40d5a4 <__aeabi_dmul>
  40b178:	4652      	mov	r2, sl
  40b17a:	465b      	mov	r3, fp
  40b17c:	f002 fc98 	bl	40dab0 <__aeabi_dcmpge>
  40b180:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40b184:	4646      	mov	r6, r8
  40b186:	2800      	cmp	r0, #0
  40b188:	f000 80f2 	beq.w	40b370 <_dtoa_r+0xa48>
  40b18c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40b18e:	9d07      	ldr	r5, [sp, #28]
  40b190:	43db      	mvns	r3, r3
  40b192:	9304      	str	r3, [sp, #16]
  40b194:	4641      	mov	r1, r8
  40b196:	4648      	mov	r0, r9
  40b198:	f001 f8e4 	bl	40c364 <_Bfree>
  40b19c:	2e00      	cmp	r6, #0
  40b19e:	f43f ad8e 	beq.w	40acbe <_dtoa_r+0x396>
  40b1a2:	e68d      	b.n	40aec0 <_dtoa_r+0x598>
  40b1a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40b1a6:	2a00      	cmp	r2, #0
  40b1a8:	f000 8241 	beq.w	40b62e <_dtoa_r+0xd06>
  40b1ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40b1b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b1b2:	9d05      	ldr	r5, [sp, #20]
  40b1b4:	e5ab      	b.n	40ad0e <_dtoa_r+0x3e6>
  40b1b6:	201c      	movs	r0, #28
  40b1b8:	9b05      	ldr	r3, [sp, #20]
  40b1ba:	4403      	add	r3, r0
  40b1bc:	9305      	str	r3, [sp, #20]
  40b1be:	9b02      	ldr	r3, [sp, #8]
  40b1c0:	4403      	add	r3, r0
  40b1c2:	4405      	add	r5, r0
  40b1c4:	9302      	str	r3, [sp, #8]
  40b1c6:	e60e      	b.n	40ade6 <_dtoa_r+0x4be>
  40b1c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b1ca:	2b01      	cmp	r3, #1
  40b1cc:	f340 8282 	ble.w	40b6d4 <_dtoa_r+0xdac>
  40b1d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40b1d2:	2001      	movs	r0, #1
  40b1d4:	e5f3      	b.n	40adbe <_dtoa_r+0x496>
  40b1d6:	bf00      	nop
  40b1d8:	0040f850 	.word	0x0040f850
  40b1dc:	0040f918 	.word	0x0040f918
  40b1e0:	3ff00000 	.word	0x3ff00000
  40b1e4:	401c0000 	.word	0x401c0000
  40b1e8:	3fe00000 	.word	0x3fe00000
  40b1ec:	40240000 	.word	0x40240000
  40b1f0:	40140000 	.word	0x40140000
  40b1f4:	4631      	mov	r1, r6
  40b1f6:	2300      	movs	r3, #0
  40b1f8:	220a      	movs	r2, #10
  40b1fa:	4648      	mov	r0, r9
  40b1fc:	f001 f8bc 	bl	40c378 <__multadd>
  40b200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b202:	2b00      	cmp	r3, #0
  40b204:	4606      	mov	r6, r0
  40b206:	f340 8297 	ble.w	40b738 <_dtoa_r+0xe10>
  40b20a:	9306      	str	r3, [sp, #24]
  40b20c:	2d00      	cmp	r5, #0
  40b20e:	dd05      	ble.n	40b21c <_dtoa_r+0x8f4>
  40b210:	4631      	mov	r1, r6
  40b212:	462a      	mov	r2, r5
  40b214:	4648      	mov	r0, r9
  40b216:	f001 fa2f 	bl	40c678 <__lshift>
  40b21a:	4606      	mov	r6, r0
  40b21c:	2f00      	cmp	r7, #0
  40b21e:	f040 817c 	bne.w	40b51a <_dtoa_r+0xbf2>
  40b222:	9605      	str	r6, [sp, #20]
  40b224:	9b06      	ldr	r3, [sp, #24]
  40b226:	9a07      	ldr	r2, [sp, #28]
  40b228:	f8dd b014 	ldr.w	fp, [sp, #20]
  40b22c:	3b01      	subs	r3, #1
  40b22e:	18d3      	adds	r3, r2, r3
  40b230:	9308      	str	r3, [sp, #32]
  40b232:	f00a 0301 	and.w	r3, sl, #1
  40b236:	9309      	str	r3, [sp, #36]	; 0x24
  40b238:	4617      	mov	r7, r2
  40b23a:	46c2      	mov	sl, r8
  40b23c:	4651      	mov	r1, sl
  40b23e:	4620      	mov	r0, r4
  40b240:	f7ff fade 	bl	40a800 <quorem>
  40b244:	4631      	mov	r1, r6
  40b246:	4605      	mov	r5, r0
  40b248:	4620      	mov	r0, r4
  40b24a:	f001 fa6d 	bl	40c728 <__mcmp>
  40b24e:	465a      	mov	r2, fp
  40b250:	9002      	str	r0, [sp, #8]
  40b252:	4651      	mov	r1, sl
  40b254:	4648      	mov	r0, r9
  40b256:	f001 fa87 	bl	40c768 <__mdiff>
  40b25a:	68c2      	ldr	r2, [r0, #12]
  40b25c:	4680      	mov	r8, r0
  40b25e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40b262:	2a00      	cmp	r2, #0
  40b264:	d149      	bne.n	40b2fa <_dtoa_r+0x9d2>
  40b266:	4601      	mov	r1, r0
  40b268:	4620      	mov	r0, r4
  40b26a:	9306      	str	r3, [sp, #24]
  40b26c:	f001 fa5c 	bl	40c728 <__mcmp>
  40b270:	4641      	mov	r1, r8
  40b272:	9005      	str	r0, [sp, #20]
  40b274:	4648      	mov	r0, r9
  40b276:	f001 f875 	bl	40c364 <_Bfree>
  40b27a:	9a05      	ldr	r2, [sp, #20]
  40b27c:	9b06      	ldr	r3, [sp, #24]
  40b27e:	b92a      	cbnz	r2, 40b28c <_dtoa_r+0x964>
  40b280:	9920      	ldr	r1, [sp, #128]	; 0x80
  40b282:	b919      	cbnz	r1, 40b28c <_dtoa_r+0x964>
  40b284:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b286:	2900      	cmp	r1, #0
  40b288:	f000 8236 	beq.w	40b6f8 <_dtoa_r+0xdd0>
  40b28c:	9902      	ldr	r1, [sp, #8]
  40b28e:	2900      	cmp	r1, #0
  40b290:	f2c0 80e4 	blt.w	40b45c <_dtoa_r+0xb34>
  40b294:	d105      	bne.n	40b2a2 <_dtoa_r+0x97a>
  40b296:	9920      	ldr	r1, [sp, #128]	; 0x80
  40b298:	b919      	cbnz	r1, 40b2a2 <_dtoa_r+0x97a>
  40b29a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b29c:	2900      	cmp	r1, #0
  40b29e:	f000 80dd 	beq.w	40b45c <_dtoa_r+0xb34>
  40b2a2:	2a00      	cmp	r2, #0
  40b2a4:	f300 814d 	bgt.w	40b542 <_dtoa_r+0xc1a>
  40b2a8:	9a08      	ldr	r2, [sp, #32]
  40b2aa:	703b      	strb	r3, [r7, #0]
  40b2ac:	f107 0801 	add.w	r8, r7, #1
  40b2b0:	4297      	cmp	r7, r2
  40b2b2:	4645      	mov	r5, r8
  40b2b4:	f000 8154 	beq.w	40b560 <_dtoa_r+0xc38>
  40b2b8:	4621      	mov	r1, r4
  40b2ba:	2300      	movs	r3, #0
  40b2bc:	220a      	movs	r2, #10
  40b2be:	4648      	mov	r0, r9
  40b2c0:	f001 f85a 	bl	40c378 <__multadd>
  40b2c4:	455e      	cmp	r6, fp
  40b2c6:	4604      	mov	r4, r0
  40b2c8:	4631      	mov	r1, r6
  40b2ca:	f04f 0300 	mov.w	r3, #0
  40b2ce:	f04f 020a 	mov.w	r2, #10
  40b2d2:	4648      	mov	r0, r9
  40b2d4:	d00b      	beq.n	40b2ee <_dtoa_r+0x9c6>
  40b2d6:	f001 f84f 	bl	40c378 <__multadd>
  40b2da:	4659      	mov	r1, fp
  40b2dc:	4606      	mov	r6, r0
  40b2de:	2300      	movs	r3, #0
  40b2e0:	220a      	movs	r2, #10
  40b2e2:	4648      	mov	r0, r9
  40b2e4:	f001 f848 	bl	40c378 <__multadd>
  40b2e8:	4647      	mov	r7, r8
  40b2ea:	4683      	mov	fp, r0
  40b2ec:	e7a6      	b.n	40b23c <_dtoa_r+0x914>
  40b2ee:	f001 f843 	bl	40c378 <__multadd>
  40b2f2:	4647      	mov	r7, r8
  40b2f4:	4606      	mov	r6, r0
  40b2f6:	4683      	mov	fp, r0
  40b2f8:	e7a0      	b.n	40b23c <_dtoa_r+0x914>
  40b2fa:	4601      	mov	r1, r0
  40b2fc:	4648      	mov	r0, r9
  40b2fe:	9305      	str	r3, [sp, #20]
  40b300:	f001 f830 	bl	40c364 <_Bfree>
  40b304:	2201      	movs	r2, #1
  40b306:	9b05      	ldr	r3, [sp, #20]
  40b308:	e7c0      	b.n	40b28c <_dtoa_r+0x964>
  40b30a:	4641      	mov	r1, r8
  40b30c:	4620      	mov	r0, r4
  40b30e:	f001 fa0b 	bl	40c728 <__mcmp>
  40b312:	2800      	cmp	r0, #0
  40b314:	f6bf ad7d 	bge.w	40ae12 <_dtoa_r+0x4ea>
  40b318:	4621      	mov	r1, r4
  40b31a:	9c04      	ldr	r4, [sp, #16]
  40b31c:	2300      	movs	r3, #0
  40b31e:	3c01      	subs	r4, #1
  40b320:	220a      	movs	r2, #10
  40b322:	4648      	mov	r0, r9
  40b324:	9404      	str	r4, [sp, #16]
  40b326:	f001 f827 	bl	40c378 <__multadd>
  40b32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b32c:	4604      	mov	r4, r0
  40b32e:	2b00      	cmp	r3, #0
  40b330:	f47f af60 	bne.w	40b1f4 <_dtoa_r+0x8cc>
  40b334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b336:	2b00      	cmp	r3, #0
  40b338:	f340 81f6 	ble.w	40b728 <_dtoa_r+0xe00>
  40b33c:	9306      	str	r3, [sp, #24]
  40b33e:	e570      	b.n	40ae22 <_dtoa_r+0x4fa>
  40b340:	9c08      	ldr	r4, [sp, #32]
  40b342:	e51f      	b.n	40ad84 <_dtoa_r+0x45c>
  40b344:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b346:	2b02      	cmp	r3, #2
  40b348:	f77f ad67 	ble.w	40ae1a <_dtoa_r+0x4f2>
  40b34c:	9b06      	ldr	r3, [sp, #24]
  40b34e:	2b00      	cmp	r3, #0
  40b350:	f040 8179 	bne.w	40b646 <_dtoa_r+0xd1e>
  40b354:	4641      	mov	r1, r8
  40b356:	2205      	movs	r2, #5
  40b358:	4648      	mov	r0, r9
  40b35a:	f001 f80d 	bl	40c378 <__multadd>
  40b35e:	4601      	mov	r1, r0
  40b360:	4680      	mov	r8, r0
  40b362:	4620      	mov	r0, r4
  40b364:	f001 f9e0 	bl	40c728 <__mcmp>
  40b368:	2800      	cmp	r0, #0
  40b36a:	9408      	str	r4, [sp, #32]
  40b36c:	f77f af0e 	ble.w	40b18c <_dtoa_r+0x864>
  40b370:	9a04      	ldr	r2, [sp, #16]
  40b372:	9907      	ldr	r1, [sp, #28]
  40b374:	2331      	movs	r3, #49	; 0x31
  40b376:	3201      	adds	r2, #1
  40b378:	9204      	str	r2, [sp, #16]
  40b37a:	700b      	strb	r3, [r1, #0]
  40b37c:	1c4d      	adds	r5, r1, #1
  40b37e:	e709      	b.n	40b194 <_dtoa_r+0x86c>
  40b380:	9a04      	ldr	r2, [sp, #16]
  40b382:	3201      	adds	r2, #1
  40b384:	9204      	str	r2, [sp, #16]
  40b386:	9a07      	ldr	r2, [sp, #28]
  40b388:	2331      	movs	r3, #49	; 0x31
  40b38a:	7013      	strb	r3, [r2, #0]
  40b38c:	e588      	b.n	40aea0 <_dtoa_r+0x578>
  40b38e:	2301      	movs	r3, #1
  40b390:	9309      	str	r3, [sp, #36]	; 0x24
  40b392:	e5cd      	b.n	40af30 <_dtoa_r+0x608>
  40b394:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40b398:	e491      	b.n	40acbe <_dtoa_r+0x396>
  40b39a:	f1ba 0f00 	cmp.w	sl, #0
  40b39e:	f47f ad04 	bne.w	40adaa <_dtoa_r+0x482>
  40b3a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40b3a6:	2b00      	cmp	r3, #0
  40b3a8:	f040 813f 	bne.w	40b62a <_dtoa_r+0xd02>
  40b3ac:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40b3b0:	0d3f      	lsrs	r7, r7, #20
  40b3b2:	053f      	lsls	r7, r7, #20
  40b3b4:	b137      	cbz	r7, 40b3c4 <_dtoa_r+0xa9c>
  40b3b6:	9b05      	ldr	r3, [sp, #20]
  40b3b8:	3301      	adds	r3, #1
  40b3ba:	9305      	str	r3, [sp, #20]
  40b3bc:	9b02      	ldr	r3, [sp, #8]
  40b3be:	3301      	adds	r3, #1
  40b3c0:	9302      	str	r3, [sp, #8]
  40b3c2:	2701      	movs	r7, #1
  40b3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b3c6:	2001      	movs	r0, #1
  40b3c8:	2b00      	cmp	r3, #0
  40b3ca:	f43f acf8 	beq.w	40adbe <_dtoa_r+0x496>
  40b3ce:	e4ed      	b.n	40adac <_dtoa_r+0x484>
  40b3d0:	4640      	mov	r0, r8
  40b3d2:	f002 f881 	bl	40d4d8 <__aeabi_i2d>
  40b3d6:	4632      	mov	r2, r6
  40b3d8:	463b      	mov	r3, r7
  40b3da:	f002 f8e3 	bl	40d5a4 <__aeabi_dmul>
  40b3de:	2200      	movs	r2, #0
  40b3e0:	4bbf      	ldr	r3, [pc, #764]	; (40b6e0 <_dtoa_r+0xdb8>)
  40b3e2:	f001 ff2d 	bl	40d240 <__adddf3>
  40b3e6:	4604      	mov	r4, r0
  40b3e8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40b3ec:	4630      	mov	r0, r6
  40b3ee:	4639      	mov	r1, r7
  40b3f0:	2200      	movs	r2, #0
  40b3f2:	4bbc      	ldr	r3, [pc, #752]	; (40b6e4 <_dtoa_r+0xdbc>)
  40b3f4:	f001 ff22 	bl	40d23c <__aeabi_dsub>
  40b3f8:	4622      	mov	r2, r4
  40b3fa:	462b      	mov	r3, r5
  40b3fc:	4606      	mov	r6, r0
  40b3fe:	460f      	mov	r7, r1
  40b400:	f002 fb60 	bl	40dac4 <__aeabi_dcmpgt>
  40b404:	4680      	mov	r8, r0
  40b406:	2800      	cmp	r0, #0
  40b408:	f040 8105 	bne.w	40b616 <_dtoa_r+0xcee>
  40b40c:	4622      	mov	r2, r4
  40b40e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40b412:	4630      	mov	r0, r6
  40b414:	4639      	mov	r1, r7
  40b416:	f002 fb37 	bl	40da88 <__aeabi_dcmplt>
  40b41a:	b108      	cbz	r0, 40b420 <_dtoa_r+0xaf8>
  40b41c:	4646      	mov	r6, r8
  40b41e:	e6b5      	b.n	40b18c <_dtoa_r+0x864>
  40b420:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40b424:	f7ff bb89 	b.w	40ab3a <_dtoa_r+0x212>
  40b428:	9807      	ldr	r0, [sp, #28]
  40b42a:	f7ff baae 	b.w	40a98a <_dtoa_r+0x62>
  40b42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b432:	970a      	str	r7, [sp, #40]	; 0x28
  40b434:	1afb      	subs	r3, r7, r3
  40b436:	441a      	add	r2, r3
  40b438:	920b      	str	r2, [sp, #44]	; 0x2c
  40b43a:	2700      	movs	r7, #0
  40b43c:	e461      	b.n	40ad02 <_dtoa_r+0x3da>
  40b43e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40b442:	f04f 0802 	mov.w	r8, #2
  40b446:	e5bb      	b.n	40afc0 <_dtoa_r+0x698>
  40b448:	461c      	mov	r4, r3
  40b44a:	2100      	movs	r1, #0
  40b44c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40b450:	e58a      	b.n	40af68 <_dtoa_r+0x640>
  40b452:	2401      	movs	r4, #1
  40b454:	9421      	str	r4, [sp, #132]	; 0x84
  40b456:	940d      	str	r4, [sp, #52]	; 0x34
  40b458:	9406      	str	r4, [sp, #24]
  40b45a:	e7f6      	b.n	40b44a <_dtoa_r+0xb22>
  40b45c:	2a00      	cmp	r2, #0
  40b45e:	46d0      	mov	r8, sl
  40b460:	f8cd b014 	str.w	fp, [sp, #20]
  40b464:	469a      	mov	sl, r3
  40b466:	dd11      	ble.n	40b48c <_dtoa_r+0xb64>
  40b468:	4621      	mov	r1, r4
  40b46a:	2201      	movs	r2, #1
  40b46c:	4648      	mov	r0, r9
  40b46e:	f001 f903 	bl	40c678 <__lshift>
  40b472:	4641      	mov	r1, r8
  40b474:	4604      	mov	r4, r0
  40b476:	f001 f957 	bl	40c728 <__mcmp>
  40b47a:	2800      	cmp	r0, #0
  40b47c:	f340 8149 	ble.w	40b712 <_dtoa_r+0xdea>
  40b480:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40b484:	f000 8106 	beq.w	40b694 <_dtoa_r+0xd6c>
  40b488:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40b48c:	46b3      	mov	fp, r6
  40b48e:	f887 a000 	strb.w	sl, [r7]
  40b492:	1c7d      	adds	r5, r7, #1
  40b494:	9e05      	ldr	r6, [sp, #20]
  40b496:	9408      	str	r4, [sp, #32]
  40b498:	e502      	b.n	40aea0 <_dtoa_r+0x578>
  40b49a:	d104      	bne.n	40b4a6 <_dtoa_r+0xb7e>
  40b49c:	f01a 0f01 	tst.w	sl, #1
  40b4a0:	d001      	beq.n	40b4a6 <_dtoa_r+0xb7e>
  40b4a2:	e4ed      	b.n	40ae80 <_dtoa_r+0x558>
  40b4a4:	4615      	mov	r5, r2
  40b4a6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b4aa:	2b30      	cmp	r3, #48	; 0x30
  40b4ac:	f105 32ff 	add.w	r2, r5, #4294967295
  40b4b0:	d0f8      	beq.n	40b4a4 <_dtoa_r+0xb7c>
  40b4b2:	e4f5      	b.n	40aea0 <_dtoa_r+0x578>
  40b4b4:	9b04      	ldr	r3, [sp, #16]
  40b4b6:	425c      	negs	r4, r3
  40b4b8:	2c00      	cmp	r4, #0
  40b4ba:	f000 80bf 	beq.w	40b63c <_dtoa_r+0xd14>
  40b4be:	4b8a      	ldr	r3, [pc, #552]	; (40b6e8 <_dtoa_r+0xdc0>)
  40b4c0:	f004 020f 	and.w	r2, r4, #15
  40b4c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b4cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40b4d0:	f002 f868 	bl	40d5a4 <__aeabi_dmul>
  40b4d4:	1124      	asrs	r4, r4, #4
  40b4d6:	4606      	mov	r6, r0
  40b4d8:	460f      	mov	r7, r1
  40b4da:	f000 812a 	beq.w	40b732 <_dtoa_r+0xe0a>
  40b4de:	4d83      	ldr	r5, [pc, #524]	; (40b6ec <_dtoa_r+0xdc4>)
  40b4e0:	f04f 0802 	mov.w	r8, #2
  40b4e4:	07e2      	lsls	r2, r4, #31
  40b4e6:	d509      	bpl.n	40b4fc <_dtoa_r+0xbd4>
  40b4e8:	4630      	mov	r0, r6
  40b4ea:	4639      	mov	r1, r7
  40b4ec:	e9d5 2300 	ldrd	r2, r3, [r5]
  40b4f0:	f002 f858 	bl	40d5a4 <__aeabi_dmul>
  40b4f4:	f108 0801 	add.w	r8, r8, #1
  40b4f8:	4606      	mov	r6, r0
  40b4fa:	460f      	mov	r7, r1
  40b4fc:	1064      	asrs	r4, r4, #1
  40b4fe:	f105 0508 	add.w	r5, r5, #8
  40b502:	d1ef      	bne.n	40b4e4 <_dtoa_r+0xbbc>
  40b504:	e576      	b.n	40aff4 <_dtoa_r+0x6cc>
  40b506:	9907      	ldr	r1, [sp, #28]
  40b508:	2230      	movs	r2, #48	; 0x30
  40b50a:	700a      	strb	r2, [r1, #0]
  40b50c:	9a04      	ldr	r2, [sp, #16]
  40b50e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40b512:	3201      	adds	r2, #1
  40b514:	9204      	str	r2, [sp, #16]
  40b516:	f7ff bbd0 	b.w	40acba <_dtoa_r+0x392>
  40b51a:	6871      	ldr	r1, [r6, #4]
  40b51c:	4648      	mov	r0, r9
  40b51e:	f000 fefb 	bl	40c318 <_Balloc>
  40b522:	6933      	ldr	r3, [r6, #16]
  40b524:	1c9a      	adds	r2, r3, #2
  40b526:	4605      	mov	r5, r0
  40b528:	0092      	lsls	r2, r2, #2
  40b52a:	f106 010c 	add.w	r1, r6, #12
  40b52e:	300c      	adds	r0, #12
  40b530:	f7fc fb5c 	bl	407bec <memcpy>
  40b534:	4629      	mov	r1, r5
  40b536:	2201      	movs	r2, #1
  40b538:	4648      	mov	r0, r9
  40b53a:	f001 f89d 	bl	40c678 <__lshift>
  40b53e:	9005      	str	r0, [sp, #20]
  40b540:	e670      	b.n	40b224 <_dtoa_r+0x8fc>
  40b542:	2b39      	cmp	r3, #57	; 0x39
  40b544:	f8cd b014 	str.w	fp, [sp, #20]
  40b548:	46d0      	mov	r8, sl
  40b54a:	f000 80a3 	beq.w	40b694 <_dtoa_r+0xd6c>
  40b54e:	f103 0a01 	add.w	sl, r3, #1
  40b552:	46b3      	mov	fp, r6
  40b554:	f887 a000 	strb.w	sl, [r7]
  40b558:	1c7d      	adds	r5, r7, #1
  40b55a:	9e05      	ldr	r6, [sp, #20]
  40b55c:	9408      	str	r4, [sp, #32]
  40b55e:	e49f      	b.n	40aea0 <_dtoa_r+0x578>
  40b560:	465a      	mov	r2, fp
  40b562:	46d0      	mov	r8, sl
  40b564:	46b3      	mov	fp, r6
  40b566:	469a      	mov	sl, r3
  40b568:	4616      	mov	r6, r2
  40b56a:	e47d      	b.n	40ae68 <_dtoa_r+0x540>
  40b56c:	495e      	ldr	r1, [pc, #376]	; (40b6e8 <_dtoa_r+0xdc0>)
  40b56e:	f108 3aff 	add.w	sl, r8, #4294967295
  40b572:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40b576:	4622      	mov	r2, r4
  40b578:	462b      	mov	r3, r5
  40b57a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40b57e:	f002 f811 	bl	40d5a4 <__aeabi_dmul>
  40b582:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40b586:	4639      	mov	r1, r7
  40b588:	4630      	mov	r0, r6
  40b58a:	f002 fabb 	bl	40db04 <__aeabi_d2iz>
  40b58e:	4604      	mov	r4, r0
  40b590:	f001 ffa2 	bl	40d4d8 <__aeabi_i2d>
  40b594:	4602      	mov	r2, r0
  40b596:	460b      	mov	r3, r1
  40b598:	4630      	mov	r0, r6
  40b59a:	4639      	mov	r1, r7
  40b59c:	f001 fe4e 	bl	40d23c <__aeabi_dsub>
  40b5a0:	9a07      	ldr	r2, [sp, #28]
  40b5a2:	3430      	adds	r4, #48	; 0x30
  40b5a4:	f1b8 0f01 	cmp.w	r8, #1
  40b5a8:	4606      	mov	r6, r0
  40b5aa:	460f      	mov	r7, r1
  40b5ac:	7014      	strb	r4, [r2, #0]
  40b5ae:	f102 0501 	add.w	r5, r2, #1
  40b5b2:	d01e      	beq.n	40b5f2 <_dtoa_r+0xcca>
  40b5b4:	9b07      	ldr	r3, [sp, #28]
  40b5b6:	eb03 0b08 	add.w	fp, r3, r8
  40b5ba:	46a8      	mov	r8, r5
  40b5bc:	2200      	movs	r2, #0
  40b5be:	4b4c      	ldr	r3, [pc, #304]	; (40b6f0 <_dtoa_r+0xdc8>)
  40b5c0:	4630      	mov	r0, r6
  40b5c2:	4639      	mov	r1, r7
  40b5c4:	f001 ffee 	bl	40d5a4 <__aeabi_dmul>
  40b5c8:	460f      	mov	r7, r1
  40b5ca:	4606      	mov	r6, r0
  40b5cc:	f002 fa9a 	bl	40db04 <__aeabi_d2iz>
  40b5d0:	4604      	mov	r4, r0
  40b5d2:	f001 ff81 	bl	40d4d8 <__aeabi_i2d>
  40b5d6:	3430      	adds	r4, #48	; 0x30
  40b5d8:	4602      	mov	r2, r0
  40b5da:	460b      	mov	r3, r1
  40b5dc:	4630      	mov	r0, r6
  40b5de:	4639      	mov	r1, r7
  40b5e0:	f001 fe2c 	bl	40d23c <__aeabi_dsub>
  40b5e4:	f808 4b01 	strb.w	r4, [r8], #1
  40b5e8:	45c3      	cmp	fp, r8
  40b5ea:	4606      	mov	r6, r0
  40b5ec:	460f      	mov	r7, r1
  40b5ee:	d1e5      	bne.n	40b5bc <_dtoa_r+0xc94>
  40b5f0:	4455      	add	r5, sl
  40b5f2:	2200      	movs	r2, #0
  40b5f4:	4b3f      	ldr	r3, [pc, #252]	; (40b6f4 <_dtoa_r+0xdcc>)
  40b5f6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40b5fa:	f001 fe21 	bl	40d240 <__adddf3>
  40b5fe:	4632      	mov	r2, r6
  40b600:	463b      	mov	r3, r7
  40b602:	f002 fa41 	bl	40da88 <__aeabi_dcmplt>
  40b606:	2800      	cmp	r0, #0
  40b608:	d04c      	beq.n	40b6a4 <_dtoa_r+0xd7c>
  40b60a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b60c:	9304      	str	r3, [sp, #16]
  40b60e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  40b612:	f7ff bb46 	b.w	40aca2 <_dtoa_r+0x37a>
  40b616:	f04f 0800 	mov.w	r8, #0
  40b61a:	4646      	mov	r6, r8
  40b61c:	e6a8      	b.n	40b370 <_dtoa_r+0xa48>
  40b61e:	9b05      	ldr	r3, [sp, #20]
  40b620:	9a06      	ldr	r2, [sp, #24]
  40b622:	1a9d      	subs	r5, r3, r2
  40b624:	2300      	movs	r3, #0
  40b626:	f7ff bb72 	b.w	40ad0e <_dtoa_r+0x3e6>
  40b62a:	2700      	movs	r7, #0
  40b62c:	e6ca      	b.n	40b3c4 <_dtoa_r+0xa9c>
  40b62e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b630:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b632:	9d05      	ldr	r5, [sp, #20]
  40b634:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40b638:	f7ff bb69 	b.w	40ad0e <_dtoa_r+0x3e6>
  40b63c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  40b640:	f04f 0802 	mov.w	r8, #2
  40b644:	e4d6      	b.n	40aff4 <_dtoa_r+0x6cc>
  40b646:	9408      	str	r4, [sp, #32]
  40b648:	e5a0      	b.n	40b18c <_dtoa_r+0x864>
  40b64a:	9b06      	ldr	r3, [sp, #24]
  40b64c:	2b00      	cmp	r3, #0
  40b64e:	f43f aebf 	beq.w	40b3d0 <_dtoa_r+0xaa8>
  40b652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b654:	2b00      	cmp	r3, #0
  40b656:	f77f aee3 	ble.w	40b420 <_dtoa_r+0xaf8>
  40b65a:	2200      	movs	r2, #0
  40b65c:	4b24      	ldr	r3, [pc, #144]	; (40b6f0 <_dtoa_r+0xdc8>)
  40b65e:	4630      	mov	r0, r6
  40b660:	4639      	mov	r1, r7
  40b662:	f001 ff9f 	bl	40d5a4 <__aeabi_dmul>
  40b666:	4606      	mov	r6, r0
  40b668:	460f      	mov	r7, r1
  40b66a:	f108 0001 	add.w	r0, r8, #1
  40b66e:	f001 ff33 	bl	40d4d8 <__aeabi_i2d>
  40b672:	4632      	mov	r2, r6
  40b674:	463b      	mov	r3, r7
  40b676:	f001 ff95 	bl	40d5a4 <__aeabi_dmul>
  40b67a:	2200      	movs	r2, #0
  40b67c:	4b18      	ldr	r3, [pc, #96]	; (40b6e0 <_dtoa_r+0xdb8>)
  40b67e:	f001 fddf 	bl	40d240 <__adddf3>
  40b682:	9a04      	ldr	r2, [sp, #16]
  40b684:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40b688:	3a01      	subs	r2, #1
  40b68a:	4604      	mov	r4, r0
  40b68c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40b690:	9211      	str	r2, [sp, #68]	; 0x44
  40b692:	e4d0      	b.n	40b036 <_dtoa_r+0x70e>
  40b694:	2239      	movs	r2, #57	; 0x39
  40b696:	46b3      	mov	fp, r6
  40b698:	9408      	str	r4, [sp, #32]
  40b69a:	9e05      	ldr	r6, [sp, #20]
  40b69c:	703a      	strb	r2, [r7, #0]
  40b69e:	1c7d      	adds	r5, r7, #1
  40b6a0:	f7ff bbf0 	b.w	40ae84 <_dtoa_r+0x55c>
  40b6a4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40b6a8:	2000      	movs	r0, #0
  40b6aa:	4912      	ldr	r1, [pc, #72]	; (40b6f4 <_dtoa_r+0xdcc>)
  40b6ac:	f001 fdc6 	bl	40d23c <__aeabi_dsub>
  40b6b0:	4632      	mov	r2, r6
  40b6b2:	463b      	mov	r3, r7
  40b6b4:	f002 fa06 	bl	40dac4 <__aeabi_dcmpgt>
  40b6b8:	b908      	cbnz	r0, 40b6be <_dtoa_r+0xd96>
  40b6ba:	e6b1      	b.n	40b420 <_dtoa_r+0xaf8>
  40b6bc:	4615      	mov	r5, r2
  40b6be:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b6c2:	2b30      	cmp	r3, #48	; 0x30
  40b6c4:	f105 32ff 	add.w	r2, r5, #4294967295
  40b6c8:	d0f8      	beq.n	40b6bc <_dtoa_r+0xd94>
  40b6ca:	e530      	b.n	40b12e <_dtoa_r+0x806>
  40b6cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b6ce:	9304      	str	r3, [sp, #16]
  40b6d0:	f7ff bae7 	b.w	40aca2 <_dtoa_r+0x37a>
  40b6d4:	f1ba 0f00 	cmp.w	sl, #0
  40b6d8:	f47f ad7a 	bne.w	40b1d0 <_dtoa_r+0x8a8>
  40b6dc:	e661      	b.n	40b3a2 <_dtoa_r+0xa7a>
  40b6de:	bf00      	nop
  40b6e0:	401c0000 	.word	0x401c0000
  40b6e4:	40140000 	.word	0x40140000
  40b6e8:	0040f850 	.word	0x0040f850
  40b6ec:	0040f918 	.word	0x0040f918
  40b6f0:	40240000 	.word	0x40240000
  40b6f4:	3fe00000 	.word	0x3fe00000
  40b6f8:	2b39      	cmp	r3, #57	; 0x39
  40b6fa:	f8cd b014 	str.w	fp, [sp, #20]
  40b6fe:	46d0      	mov	r8, sl
  40b700:	f8dd b008 	ldr.w	fp, [sp, #8]
  40b704:	469a      	mov	sl, r3
  40b706:	d0c5      	beq.n	40b694 <_dtoa_r+0xd6c>
  40b708:	f1bb 0f00 	cmp.w	fp, #0
  40b70c:	f73f aebc 	bgt.w	40b488 <_dtoa_r+0xb60>
  40b710:	e6bc      	b.n	40b48c <_dtoa_r+0xb64>
  40b712:	f47f aebb 	bne.w	40b48c <_dtoa_r+0xb64>
  40b716:	f01a 0f01 	tst.w	sl, #1
  40b71a:	f43f aeb7 	beq.w	40b48c <_dtoa_r+0xb64>
  40b71e:	e6af      	b.n	40b480 <_dtoa_r+0xb58>
  40b720:	f04f 0800 	mov.w	r8, #0
  40b724:	4646      	mov	r6, r8
  40b726:	e531      	b.n	40b18c <_dtoa_r+0x864>
  40b728:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b72a:	2b02      	cmp	r3, #2
  40b72c:	dc21      	bgt.n	40b772 <_dtoa_r+0xe4a>
  40b72e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b730:	e604      	b.n	40b33c <_dtoa_r+0xa14>
  40b732:	f04f 0802 	mov.w	r8, #2
  40b736:	e45d      	b.n	40aff4 <_dtoa_r+0x6cc>
  40b738:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40b73a:	2b02      	cmp	r3, #2
  40b73c:	dc19      	bgt.n	40b772 <_dtoa_r+0xe4a>
  40b73e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b740:	e563      	b.n	40b20a <_dtoa_r+0x8e2>
  40b742:	2400      	movs	r4, #0
  40b744:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  40b748:	4621      	mov	r1, r4
  40b74a:	4648      	mov	r0, r9
  40b74c:	f000 fde4 	bl	40c318 <_Balloc>
  40b750:	f04f 33ff 	mov.w	r3, #4294967295
  40b754:	9306      	str	r3, [sp, #24]
  40b756:	930d      	str	r3, [sp, #52]	; 0x34
  40b758:	2301      	movs	r3, #1
  40b75a:	9007      	str	r0, [sp, #28]
  40b75c:	9421      	str	r4, [sp, #132]	; 0x84
  40b75e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  40b762:	9309      	str	r3, [sp, #36]	; 0x24
  40b764:	f7ff b9e9 	b.w	40ab3a <_dtoa_r+0x212>
  40b768:	f43f ab3d 	beq.w	40ade6 <_dtoa_r+0x4be>
  40b76c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40b770:	e522      	b.n	40b1b8 <_dtoa_r+0x890>
  40b772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b774:	9306      	str	r3, [sp, #24]
  40b776:	e5e9      	b.n	40b34c <_dtoa_r+0xa24>
  40b778:	2501      	movs	r5, #1
  40b77a:	f7ff b9a8 	b.w	40aace <_dtoa_r+0x1a6>
  40b77e:	bf00      	nop

0040b780 <__sflush_r>:
  40b780:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40b784:	b29a      	uxth	r2, r3
  40b786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b78a:	460d      	mov	r5, r1
  40b78c:	0711      	lsls	r1, r2, #28
  40b78e:	4680      	mov	r8, r0
  40b790:	d43c      	bmi.n	40b80c <__sflush_r+0x8c>
  40b792:	686a      	ldr	r2, [r5, #4]
  40b794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40b798:	2a00      	cmp	r2, #0
  40b79a:	81ab      	strh	r3, [r5, #12]
  40b79c:	dd73      	ble.n	40b886 <__sflush_r+0x106>
  40b79e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40b7a0:	2c00      	cmp	r4, #0
  40b7a2:	d04b      	beq.n	40b83c <__sflush_r+0xbc>
  40b7a4:	b29b      	uxth	r3, r3
  40b7a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40b7aa:	2100      	movs	r1, #0
  40b7ac:	b292      	uxth	r2, r2
  40b7ae:	f8d8 6000 	ldr.w	r6, [r8]
  40b7b2:	f8c8 1000 	str.w	r1, [r8]
  40b7b6:	2a00      	cmp	r2, #0
  40b7b8:	d069      	beq.n	40b88e <__sflush_r+0x10e>
  40b7ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40b7bc:	075f      	lsls	r7, r3, #29
  40b7be:	d505      	bpl.n	40b7cc <__sflush_r+0x4c>
  40b7c0:	6869      	ldr	r1, [r5, #4]
  40b7c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40b7c4:	1a52      	subs	r2, r2, r1
  40b7c6:	b10b      	cbz	r3, 40b7cc <__sflush_r+0x4c>
  40b7c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40b7ca:	1ad2      	subs	r2, r2, r3
  40b7cc:	2300      	movs	r3, #0
  40b7ce:	69e9      	ldr	r1, [r5, #28]
  40b7d0:	4640      	mov	r0, r8
  40b7d2:	47a0      	blx	r4
  40b7d4:	1c44      	adds	r4, r0, #1
  40b7d6:	d03c      	beq.n	40b852 <__sflush_r+0xd2>
  40b7d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40b7dc:	692a      	ldr	r2, [r5, #16]
  40b7de:	602a      	str	r2, [r5, #0]
  40b7e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b7e4:	2200      	movs	r2, #0
  40b7e6:	81ab      	strh	r3, [r5, #12]
  40b7e8:	04db      	lsls	r3, r3, #19
  40b7ea:	606a      	str	r2, [r5, #4]
  40b7ec:	d449      	bmi.n	40b882 <__sflush_r+0x102>
  40b7ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40b7f0:	f8c8 6000 	str.w	r6, [r8]
  40b7f4:	b311      	cbz	r1, 40b83c <__sflush_r+0xbc>
  40b7f6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40b7fa:	4299      	cmp	r1, r3
  40b7fc:	d002      	beq.n	40b804 <__sflush_r+0x84>
  40b7fe:	4640      	mov	r0, r8
  40b800:	f000 f9c0 	bl	40bb84 <_free_r>
  40b804:	2000      	movs	r0, #0
  40b806:	6328      	str	r0, [r5, #48]	; 0x30
  40b808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b80c:	692e      	ldr	r6, [r5, #16]
  40b80e:	b1ae      	cbz	r6, 40b83c <__sflush_r+0xbc>
  40b810:	682c      	ldr	r4, [r5, #0]
  40b812:	602e      	str	r6, [r5, #0]
  40b814:	0790      	lsls	r0, r2, #30
  40b816:	bf0c      	ite	eq
  40b818:	696b      	ldreq	r3, [r5, #20]
  40b81a:	2300      	movne	r3, #0
  40b81c:	1ba4      	subs	r4, r4, r6
  40b81e:	60ab      	str	r3, [r5, #8]
  40b820:	e00a      	b.n	40b838 <__sflush_r+0xb8>
  40b822:	4623      	mov	r3, r4
  40b824:	4632      	mov	r2, r6
  40b826:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40b828:	69e9      	ldr	r1, [r5, #28]
  40b82a:	4640      	mov	r0, r8
  40b82c:	47b8      	blx	r7
  40b82e:	2800      	cmp	r0, #0
  40b830:	eba4 0400 	sub.w	r4, r4, r0
  40b834:	4406      	add	r6, r0
  40b836:	dd04      	ble.n	40b842 <__sflush_r+0xc2>
  40b838:	2c00      	cmp	r4, #0
  40b83a:	dcf2      	bgt.n	40b822 <__sflush_r+0xa2>
  40b83c:	2000      	movs	r0, #0
  40b83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b842:	89ab      	ldrh	r3, [r5, #12]
  40b844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b848:	81ab      	strh	r3, [r5, #12]
  40b84a:	f04f 30ff 	mov.w	r0, #4294967295
  40b84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b852:	f8d8 2000 	ldr.w	r2, [r8]
  40b856:	2a1d      	cmp	r2, #29
  40b858:	d8f3      	bhi.n	40b842 <__sflush_r+0xc2>
  40b85a:	4b1a      	ldr	r3, [pc, #104]	; (40b8c4 <__sflush_r+0x144>)
  40b85c:	40d3      	lsrs	r3, r2
  40b85e:	f003 0301 	and.w	r3, r3, #1
  40b862:	f083 0401 	eor.w	r4, r3, #1
  40b866:	2b00      	cmp	r3, #0
  40b868:	d0eb      	beq.n	40b842 <__sflush_r+0xc2>
  40b86a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40b86e:	6929      	ldr	r1, [r5, #16]
  40b870:	6029      	str	r1, [r5, #0]
  40b872:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b876:	04d9      	lsls	r1, r3, #19
  40b878:	606c      	str	r4, [r5, #4]
  40b87a:	81ab      	strh	r3, [r5, #12]
  40b87c:	d5b7      	bpl.n	40b7ee <__sflush_r+0x6e>
  40b87e:	2a00      	cmp	r2, #0
  40b880:	d1b5      	bne.n	40b7ee <__sflush_r+0x6e>
  40b882:	6528      	str	r0, [r5, #80]	; 0x50
  40b884:	e7b3      	b.n	40b7ee <__sflush_r+0x6e>
  40b886:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40b888:	2a00      	cmp	r2, #0
  40b88a:	dc88      	bgt.n	40b79e <__sflush_r+0x1e>
  40b88c:	e7d6      	b.n	40b83c <__sflush_r+0xbc>
  40b88e:	2301      	movs	r3, #1
  40b890:	69e9      	ldr	r1, [r5, #28]
  40b892:	4640      	mov	r0, r8
  40b894:	47a0      	blx	r4
  40b896:	1c43      	adds	r3, r0, #1
  40b898:	4602      	mov	r2, r0
  40b89a:	d002      	beq.n	40b8a2 <__sflush_r+0x122>
  40b89c:	89ab      	ldrh	r3, [r5, #12]
  40b89e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40b8a0:	e78c      	b.n	40b7bc <__sflush_r+0x3c>
  40b8a2:	f8d8 3000 	ldr.w	r3, [r8]
  40b8a6:	2b00      	cmp	r3, #0
  40b8a8:	d0f8      	beq.n	40b89c <__sflush_r+0x11c>
  40b8aa:	2b1d      	cmp	r3, #29
  40b8ac:	d001      	beq.n	40b8b2 <__sflush_r+0x132>
  40b8ae:	2b16      	cmp	r3, #22
  40b8b0:	d102      	bne.n	40b8b8 <__sflush_r+0x138>
  40b8b2:	f8c8 6000 	str.w	r6, [r8]
  40b8b6:	e7c1      	b.n	40b83c <__sflush_r+0xbc>
  40b8b8:	89ab      	ldrh	r3, [r5, #12]
  40b8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b8be:	81ab      	strh	r3, [r5, #12]
  40b8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b8c4:	20400001 	.word	0x20400001

0040b8c8 <_fflush_r>:
  40b8c8:	b510      	push	{r4, lr}
  40b8ca:	4604      	mov	r4, r0
  40b8cc:	b082      	sub	sp, #8
  40b8ce:	b108      	cbz	r0, 40b8d4 <_fflush_r+0xc>
  40b8d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b8d2:	b153      	cbz	r3, 40b8ea <_fflush_r+0x22>
  40b8d4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40b8d8:	b908      	cbnz	r0, 40b8de <_fflush_r+0x16>
  40b8da:	b002      	add	sp, #8
  40b8dc:	bd10      	pop	{r4, pc}
  40b8de:	4620      	mov	r0, r4
  40b8e0:	b002      	add	sp, #8
  40b8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40b8e6:	f7ff bf4b 	b.w	40b780 <__sflush_r>
  40b8ea:	9101      	str	r1, [sp, #4]
  40b8ec:	f000 f880 	bl	40b9f0 <__sinit>
  40b8f0:	9901      	ldr	r1, [sp, #4]
  40b8f2:	e7ef      	b.n	40b8d4 <_fflush_r+0xc>

0040b8f4 <_cleanup_r>:
  40b8f4:	4901      	ldr	r1, [pc, #4]	; (40b8fc <_cleanup_r+0x8>)
  40b8f6:	f000 bbaf 	b.w	40c058 <_fwalk_reent>
  40b8fa:	bf00      	nop
  40b8fc:	0040d10d 	.word	0x0040d10d

0040b900 <__sinit.part.1>:
  40b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b904:	4b35      	ldr	r3, [pc, #212]	; (40b9dc <__sinit.part.1+0xdc>)
  40b906:	6845      	ldr	r5, [r0, #4]
  40b908:	63c3      	str	r3, [r0, #60]	; 0x3c
  40b90a:	2400      	movs	r4, #0
  40b90c:	4607      	mov	r7, r0
  40b90e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40b912:	2304      	movs	r3, #4
  40b914:	2103      	movs	r1, #3
  40b916:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40b91a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40b91e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40b922:	b083      	sub	sp, #12
  40b924:	602c      	str	r4, [r5, #0]
  40b926:	606c      	str	r4, [r5, #4]
  40b928:	60ac      	str	r4, [r5, #8]
  40b92a:	666c      	str	r4, [r5, #100]	; 0x64
  40b92c:	81ec      	strh	r4, [r5, #14]
  40b92e:	612c      	str	r4, [r5, #16]
  40b930:	616c      	str	r4, [r5, #20]
  40b932:	61ac      	str	r4, [r5, #24]
  40b934:	81ab      	strh	r3, [r5, #12]
  40b936:	4621      	mov	r1, r4
  40b938:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b93c:	2208      	movs	r2, #8
  40b93e:	f7fc f9ef 	bl	407d20 <memset>
  40b942:	68be      	ldr	r6, [r7, #8]
  40b944:	f8df b098 	ldr.w	fp, [pc, #152]	; 40b9e0 <__sinit.part.1+0xe0>
  40b948:	f8df a098 	ldr.w	sl, [pc, #152]	; 40b9e4 <__sinit.part.1+0xe4>
  40b94c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40b9e8 <__sinit.part.1+0xe8>
  40b950:	f8df 8098 	ldr.w	r8, [pc, #152]	; 40b9ec <__sinit.part.1+0xec>
  40b954:	f8c5 b020 	str.w	fp, [r5, #32]
  40b958:	2301      	movs	r3, #1
  40b95a:	2209      	movs	r2, #9
  40b95c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b960:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b964:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b968:	61ed      	str	r5, [r5, #28]
  40b96a:	4621      	mov	r1, r4
  40b96c:	81f3      	strh	r3, [r6, #14]
  40b96e:	81b2      	strh	r2, [r6, #12]
  40b970:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40b974:	6034      	str	r4, [r6, #0]
  40b976:	6074      	str	r4, [r6, #4]
  40b978:	60b4      	str	r4, [r6, #8]
  40b97a:	6674      	str	r4, [r6, #100]	; 0x64
  40b97c:	6134      	str	r4, [r6, #16]
  40b97e:	6174      	str	r4, [r6, #20]
  40b980:	61b4      	str	r4, [r6, #24]
  40b982:	2208      	movs	r2, #8
  40b984:	9301      	str	r3, [sp, #4]
  40b986:	f7fc f9cb 	bl	407d20 <memset>
  40b98a:	68fd      	ldr	r5, [r7, #12]
  40b98c:	61f6      	str	r6, [r6, #28]
  40b98e:	2012      	movs	r0, #18
  40b990:	2202      	movs	r2, #2
  40b992:	f8c6 b020 	str.w	fp, [r6, #32]
  40b996:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40b99a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40b99e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40b9a2:	4621      	mov	r1, r4
  40b9a4:	81a8      	strh	r0, [r5, #12]
  40b9a6:	81ea      	strh	r2, [r5, #14]
  40b9a8:	602c      	str	r4, [r5, #0]
  40b9aa:	606c      	str	r4, [r5, #4]
  40b9ac:	60ac      	str	r4, [r5, #8]
  40b9ae:	666c      	str	r4, [r5, #100]	; 0x64
  40b9b0:	612c      	str	r4, [r5, #16]
  40b9b2:	616c      	str	r4, [r5, #20]
  40b9b4:	61ac      	str	r4, [r5, #24]
  40b9b6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40b9ba:	2208      	movs	r2, #8
  40b9bc:	f7fc f9b0 	bl	407d20 <memset>
  40b9c0:	9b01      	ldr	r3, [sp, #4]
  40b9c2:	61ed      	str	r5, [r5, #28]
  40b9c4:	f8c5 b020 	str.w	fp, [r5, #32]
  40b9c8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40b9cc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40b9d0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40b9d4:	63bb      	str	r3, [r7, #56]	; 0x38
  40b9d6:	b003      	add	sp, #12
  40b9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b9dc:	0040b8f5 	.word	0x0040b8f5
  40b9e0:	0040cd15 	.word	0x0040cd15
  40b9e4:	0040cd39 	.word	0x0040cd39
  40b9e8:	0040cd75 	.word	0x0040cd75
  40b9ec:	0040cd95 	.word	0x0040cd95

0040b9f0 <__sinit>:
  40b9f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b9f2:	b103      	cbz	r3, 40b9f6 <__sinit+0x6>
  40b9f4:	4770      	bx	lr
  40b9f6:	f7ff bf83 	b.w	40b900 <__sinit.part.1>
  40b9fa:	bf00      	nop

0040b9fc <__sfp_lock_acquire>:
  40b9fc:	4770      	bx	lr
  40b9fe:	bf00      	nop

0040ba00 <__sfp_lock_release>:
  40ba00:	4770      	bx	lr
  40ba02:	bf00      	nop

0040ba04 <__libc_fini_array>:
  40ba04:	b538      	push	{r3, r4, r5, lr}
  40ba06:	4d07      	ldr	r5, [pc, #28]	; (40ba24 <__libc_fini_array+0x20>)
  40ba08:	4c07      	ldr	r4, [pc, #28]	; (40ba28 <__libc_fini_array+0x24>)
  40ba0a:	1b2c      	subs	r4, r5, r4
  40ba0c:	10a4      	asrs	r4, r4, #2
  40ba0e:	d005      	beq.n	40ba1c <__libc_fini_array+0x18>
  40ba10:	3c01      	subs	r4, #1
  40ba12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40ba16:	4798      	blx	r3
  40ba18:	2c00      	cmp	r4, #0
  40ba1a:	d1f9      	bne.n	40ba10 <__libc_fini_array+0xc>
  40ba1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40ba20:	f003 bf9e 	b.w	40f960 <_fini>
  40ba24:	0040f970 	.word	0x0040f970
  40ba28:	0040f96c 	.word	0x0040f96c

0040ba2c <__fputwc>:
  40ba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ba30:	b082      	sub	sp, #8
  40ba32:	4680      	mov	r8, r0
  40ba34:	4689      	mov	r9, r1
  40ba36:	4614      	mov	r4, r2
  40ba38:	f000 fb3c 	bl	40c0b4 <__locale_mb_cur_max>
  40ba3c:	2801      	cmp	r0, #1
  40ba3e:	d033      	beq.n	40baa8 <__fputwc+0x7c>
  40ba40:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40ba44:	464a      	mov	r2, r9
  40ba46:	a901      	add	r1, sp, #4
  40ba48:	4640      	mov	r0, r8
  40ba4a:	f001 fa7d 	bl	40cf48 <_wcrtomb_r>
  40ba4e:	f1b0 3fff 	cmp.w	r0, #4294967295
  40ba52:	4682      	mov	sl, r0
  40ba54:	d021      	beq.n	40ba9a <__fputwc+0x6e>
  40ba56:	b388      	cbz	r0, 40babc <__fputwc+0x90>
  40ba58:	f89d 6004 	ldrb.w	r6, [sp, #4]
  40ba5c:	2500      	movs	r5, #0
  40ba5e:	e008      	b.n	40ba72 <__fputwc+0x46>
  40ba60:	6823      	ldr	r3, [r4, #0]
  40ba62:	1c5a      	adds	r2, r3, #1
  40ba64:	6022      	str	r2, [r4, #0]
  40ba66:	701e      	strb	r6, [r3, #0]
  40ba68:	3501      	adds	r5, #1
  40ba6a:	4555      	cmp	r5, sl
  40ba6c:	d226      	bcs.n	40babc <__fputwc+0x90>
  40ba6e:	ab01      	add	r3, sp, #4
  40ba70:	5d5e      	ldrb	r6, [r3, r5]
  40ba72:	68a3      	ldr	r3, [r4, #8]
  40ba74:	3b01      	subs	r3, #1
  40ba76:	2b00      	cmp	r3, #0
  40ba78:	60a3      	str	r3, [r4, #8]
  40ba7a:	daf1      	bge.n	40ba60 <__fputwc+0x34>
  40ba7c:	69a7      	ldr	r7, [r4, #24]
  40ba7e:	42bb      	cmp	r3, r7
  40ba80:	4631      	mov	r1, r6
  40ba82:	4622      	mov	r2, r4
  40ba84:	4640      	mov	r0, r8
  40ba86:	db01      	blt.n	40ba8c <__fputwc+0x60>
  40ba88:	2e0a      	cmp	r6, #10
  40ba8a:	d1e9      	bne.n	40ba60 <__fputwc+0x34>
  40ba8c:	f001 fa06 	bl	40ce9c <__swbuf_r>
  40ba90:	1c43      	adds	r3, r0, #1
  40ba92:	d1e9      	bne.n	40ba68 <__fputwc+0x3c>
  40ba94:	b002      	add	sp, #8
  40ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ba9a:	89a3      	ldrh	r3, [r4, #12]
  40ba9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40baa0:	81a3      	strh	r3, [r4, #12]
  40baa2:	b002      	add	sp, #8
  40baa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40baa8:	f109 33ff 	add.w	r3, r9, #4294967295
  40baac:	2bfe      	cmp	r3, #254	; 0xfe
  40baae:	d8c7      	bhi.n	40ba40 <__fputwc+0x14>
  40bab0:	fa5f f689 	uxtb.w	r6, r9
  40bab4:	4682      	mov	sl, r0
  40bab6:	f88d 6004 	strb.w	r6, [sp, #4]
  40baba:	e7cf      	b.n	40ba5c <__fputwc+0x30>
  40babc:	4648      	mov	r0, r9
  40babe:	b002      	add	sp, #8
  40bac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040bac4 <_fputwc_r>:
  40bac4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40bac8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40bacc:	d10a      	bne.n	40bae4 <_fputwc_r+0x20>
  40bace:	b410      	push	{r4}
  40bad0:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40bad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40bad6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40bada:	6654      	str	r4, [r2, #100]	; 0x64
  40badc:	8193      	strh	r3, [r2, #12]
  40bade:	bc10      	pop	{r4}
  40bae0:	f7ff bfa4 	b.w	40ba2c <__fputwc>
  40bae4:	f7ff bfa2 	b.w	40ba2c <__fputwc>

0040bae8 <_malloc_trim_r>:
  40bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40baea:	4f23      	ldr	r7, [pc, #140]	; (40bb78 <_malloc_trim_r+0x90>)
  40baec:	460c      	mov	r4, r1
  40baee:	4606      	mov	r6, r0
  40baf0:	f7fc f964 	bl	407dbc <__malloc_lock>
  40baf4:	68bb      	ldr	r3, [r7, #8]
  40baf6:	685d      	ldr	r5, [r3, #4]
  40baf8:	f025 0503 	bic.w	r5, r5, #3
  40bafc:	1b29      	subs	r1, r5, r4
  40bafe:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40bb02:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40bb06:	f021 010f 	bic.w	r1, r1, #15
  40bb0a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40bb0e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40bb12:	db07      	blt.n	40bb24 <_malloc_trim_r+0x3c>
  40bb14:	2100      	movs	r1, #0
  40bb16:	4630      	mov	r0, r6
  40bb18:	f7fc f954 	bl	407dc4 <_sbrk_r>
  40bb1c:	68bb      	ldr	r3, [r7, #8]
  40bb1e:	442b      	add	r3, r5
  40bb20:	4298      	cmp	r0, r3
  40bb22:	d004      	beq.n	40bb2e <_malloc_trim_r+0x46>
  40bb24:	4630      	mov	r0, r6
  40bb26:	f7fc f94b 	bl	407dc0 <__malloc_unlock>
  40bb2a:	2000      	movs	r0, #0
  40bb2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bb2e:	4261      	negs	r1, r4
  40bb30:	4630      	mov	r0, r6
  40bb32:	f7fc f947 	bl	407dc4 <_sbrk_r>
  40bb36:	3001      	adds	r0, #1
  40bb38:	d00d      	beq.n	40bb56 <_malloc_trim_r+0x6e>
  40bb3a:	4b10      	ldr	r3, [pc, #64]	; (40bb7c <_malloc_trim_r+0x94>)
  40bb3c:	68ba      	ldr	r2, [r7, #8]
  40bb3e:	6819      	ldr	r1, [r3, #0]
  40bb40:	1b2d      	subs	r5, r5, r4
  40bb42:	f045 0501 	orr.w	r5, r5, #1
  40bb46:	4630      	mov	r0, r6
  40bb48:	1b09      	subs	r1, r1, r4
  40bb4a:	6055      	str	r5, [r2, #4]
  40bb4c:	6019      	str	r1, [r3, #0]
  40bb4e:	f7fc f937 	bl	407dc0 <__malloc_unlock>
  40bb52:	2001      	movs	r0, #1
  40bb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bb56:	2100      	movs	r1, #0
  40bb58:	4630      	mov	r0, r6
  40bb5a:	f7fc f933 	bl	407dc4 <_sbrk_r>
  40bb5e:	68ba      	ldr	r2, [r7, #8]
  40bb60:	1a83      	subs	r3, r0, r2
  40bb62:	2b0f      	cmp	r3, #15
  40bb64:	ddde      	ble.n	40bb24 <_malloc_trim_r+0x3c>
  40bb66:	4c06      	ldr	r4, [pc, #24]	; (40bb80 <_malloc_trim_r+0x98>)
  40bb68:	4904      	ldr	r1, [pc, #16]	; (40bb7c <_malloc_trim_r+0x94>)
  40bb6a:	6824      	ldr	r4, [r4, #0]
  40bb6c:	f043 0301 	orr.w	r3, r3, #1
  40bb70:	1b00      	subs	r0, r0, r4
  40bb72:	6053      	str	r3, [r2, #4]
  40bb74:	6008      	str	r0, [r1, #0]
  40bb76:	e7d5      	b.n	40bb24 <_malloc_trim_r+0x3c>
  40bb78:	20400474 	.word	0x20400474
  40bb7c:	20401570 	.word	0x20401570
  40bb80:	20400880 	.word	0x20400880

0040bb84 <_free_r>:
  40bb84:	2900      	cmp	r1, #0
  40bb86:	d045      	beq.n	40bc14 <_free_r+0x90>
  40bb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bb8c:	460d      	mov	r5, r1
  40bb8e:	4680      	mov	r8, r0
  40bb90:	f7fc f914 	bl	407dbc <__malloc_lock>
  40bb94:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40bb98:	496a      	ldr	r1, [pc, #424]	; (40bd44 <_free_r+0x1c0>)
  40bb9a:	f027 0301 	bic.w	r3, r7, #1
  40bb9e:	f1a5 0408 	sub.w	r4, r5, #8
  40bba2:	18e2      	adds	r2, r4, r3
  40bba4:	688e      	ldr	r6, [r1, #8]
  40bba6:	6850      	ldr	r0, [r2, #4]
  40bba8:	42b2      	cmp	r2, r6
  40bbaa:	f020 0003 	bic.w	r0, r0, #3
  40bbae:	d062      	beq.n	40bc76 <_free_r+0xf2>
  40bbb0:	07fe      	lsls	r6, r7, #31
  40bbb2:	6050      	str	r0, [r2, #4]
  40bbb4:	d40b      	bmi.n	40bbce <_free_r+0x4a>
  40bbb6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40bbba:	1be4      	subs	r4, r4, r7
  40bbbc:	f101 0e08 	add.w	lr, r1, #8
  40bbc0:	68a5      	ldr	r5, [r4, #8]
  40bbc2:	4575      	cmp	r5, lr
  40bbc4:	443b      	add	r3, r7
  40bbc6:	d06f      	beq.n	40bca8 <_free_r+0x124>
  40bbc8:	68e7      	ldr	r7, [r4, #12]
  40bbca:	60ef      	str	r7, [r5, #12]
  40bbcc:	60bd      	str	r5, [r7, #8]
  40bbce:	1815      	adds	r5, r2, r0
  40bbd0:	686d      	ldr	r5, [r5, #4]
  40bbd2:	07ed      	lsls	r5, r5, #31
  40bbd4:	d542      	bpl.n	40bc5c <_free_r+0xd8>
  40bbd6:	f043 0201 	orr.w	r2, r3, #1
  40bbda:	6062      	str	r2, [r4, #4]
  40bbdc:	50e3      	str	r3, [r4, r3]
  40bbde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bbe2:	d218      	bcs.n	40bc16 <_free_r+0x92>
  40bbe4:	08db      	lsrs	r3, r3, #3
  40bbe6:	1c5a      	adds	r2, r3, #1
  40bbe8:	684d      	ldr	r5, [r1, #4]
  40bbea:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  40bbee:	60a7      	str	r7, [r4, #8]
  40bbf0:	2001      	movs	r0, #1
  40bbf2:	109b      	asrs	r3, r3, #2
  40bbf4:	fa00 f303 	lsl.w	r3, r0, r3
  40bbf8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  40bbfc:	431d      	orrs	r5, r3
  40bbfe:	3808      	subs	r0, #8
  40bc00:	60e0      	str	r0, [r4, #12]
  40bc02:	604d      	str	r5, [r1, #4]
  40bc04:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  40bc08:	60fc      	str	r4, [r7, #12]
  40bc0a:	4640      	mov	r0, r8
  40bc0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bc10:	f7fc b8d6 	b.w	407dc0 <__malloc_unlock>
  40bc14:	4770      	bx	lr
  40bc16:	0a5a      	lsrs	r2, r3, #9
  40bc18:	2a04      	cmp	r2, #4
  40bc1a:	d853      	bhi.n	40bcc4 <_free_r+0x140>
  40bc1c:	099a      	lsrs	r2, r3, #6
  40bc1e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40bc22:	007f      	lsls	r7, r7, #1
  40bc24:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40bc28:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40bc2c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  40bc30:	4944      	ldr	r1, [pc, #272]	; (40bd44 <_free_r+0x1c0>)
  40bc32:	3808      	subs	r0, #8
  40bc34:	4290      	cmp	r0, r2
  40bc36:	d04d      	beq.n	40bcd4 <_free_r+0x150>
  40bc38:	6851      	ldr	r1, [r2, #4]
  40bc3a:	f021 0103 	bic.w	r1, r1, #3
  40bc3e:	428b      	cmp	r3, r1
  40bc40:	d202      	bcs.n	40bc48 <_free_r+0xc4>
  40bc42:	6892      	ldr	r2, [r2, #8]
  40bc44:	4290      	cmp	r0, r2
  40bc46:	d1f7      	bne.n	40bc38 <_free_r+0xb4>
  40bc48:	68d0      	ldr	r0, [r2, #12]
  40bc4a:	60e0      	str	r0, [r4, #12]
  40bc4c:	60a2      	str	r2, [r4, #8]
  40bc4e:	6084      	str	r4, [r0, #8]
  40bc50:	60d4      	str	r4, [r2, #12]
  40bc52:	4640      	mov	r0, r8
  40bc54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bc58:	f7fc b8b2 	b.w	407dc0 <__malloc_unlock>
  40bc5c:	6895      	ldr	r5, [r2, #8]
  40bc5e:	4f3a      	ldr	r7, [pc, #232]	; (40bd48 <_free_r+0x1c4>)
  40bc60:	42bd      	cmp	r5, r7
  40bc62:	4403      	add	r3, r0
  40bc64:	d03f      	beq.n	40bce6 <_free_r+0x162>
  40bc66:	68d0      	ldr	r0, [r2, #12]
  40bc68:	60e8      	str	r0, [r5, #12]
  40bc6a:	f043 0201 	orr.w	r2, r3, #1
  40bc6e:	6085      	str	r5, [r0, #8]
  40bc70:	6062      	str	r2, [r4, #4]
  40bc72:	50e3      	str	r3, [r4, r3]
  40bc74:	e7b3      	b.n	40bbde <_free_r+0x5a>
  40bc76:	07ff      	lsls	r7, r7, #31
  40bc78:	4403      	add	r3, r0
  40bc7a:	d407      	bmi.n	40bc8c <_free_r+0x108>
  40bc7c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40bc80:	1aa4      	subs	r4, r4, r2
  40bc82:	4413      	add	r3, r2
  40bc84:	68a0      	ldr	r0, [r4, #8]
  40bc86:	68e2      	ldr	r2, [r4, #12]
  40bc88:	60c2      	str	r2, [r0, #12]
  40bc8a:	6090      	str	r0, [r2, #8]
  40bc8c:	4a2f      	ldr	r2, [pc, #188]	; (40bd4c <_free_r+0x1c8>)
  40bc8e:	6812      	ldr	r2, [r2, #0]
  40bc90:	f043 0001 	orr.w	r0, r3, #1
  40bc94:	4293      	cmp	r3, r2
  40bc96:	6060      	str	r0, [r4, #4]
  40bc98:	608c      	str	r4, [r1, #8]
  40bc9a:	d3b6      	bcc.n	40bc0a <_free_r+0x86>
  40bc9c:	4b2c      	ldr	r3, [pc, #176]	; (40bd50 <_free_r+0x1cc>)
  40bc9e:	4640      	mov	r0, r8
  40bca0:	6819      	ldr	r1, [r3, #0]
  40bca2:	f7ff ff21 	bl	40bae8 <_malloc_trim_r>
  40bca6:	e7b0      	b.n	40bc0a <_free_r+0x86>
  40bca8:	1811      	adds	r1, r2, r0
  40bcaa:	6849      	ldr	r1, [r1, #4]
  40bcac:	07c9      	lsls	r1, r1, #31
  40bcae:	d444      	bmi.n	40bd3a <_free_r+0x1b6>
  40bcb0:	6891      	ldr	r1, [r2, #8]
  40bcb2:	68d2      	ldr	r2, [r2, #12]
  40bcb4:	60ca      	str	r2, [r1, #12]
  40bcb6:	4403      	add	r3, r0
  40bcb8:	f043 0001 	orr.w	r0, r3, #1
  40bcbc:	6091      	str	r1, [r2, #8]
  40bcbe:	6060      	str	r0, [r4, #4]
  40bcc0:	50e3      	str	r3, [r4, r3]
  40bcc2:	e7a2      	b.n	40bc0a <_free_r+0x86>
  40bcc4:	2a14      	cmp	r2, #20
  40bcc6:	d817      	bhi.n	40bcf8 <_free_r+0x174>
  40bcc8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40bccc:	007f      	lsls	r7, r7, #1
  40bcce:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40bcd2:	e7a9      	b.n	40bc28 <_free_r+0xa4>
  40bcd4:	10aa      	asrs	r2, r5, #2
  40bcd6:	684b      	ldr	r3, [r1, #4]
  40bcd8:	2501      	movs	r5, #1
  40bcda:	fa05 f202 	lsl.w	r2, r5, r2
  40bcde:	4313      	orrs	r3, r2
  40bce0:	604b      	str	r3, [r1, #4]
  40bce2:	4602      	mov	r2, r0
  40bce4:	e7b1      	b.n	40bc4a <_free_r+0xc6>
  40bce6:	f043 0201 	orr.w	r2, r3, #1
  40bcea:	614c      	str	r4, [r1, #20]
  40bcec:	610c      	str	r4, [r1, #16]
  40bcee:	60e5      	str	r5, [r4, #12]
  40bcf0:	60a5      	str	r5, [r4, #8]
  40bcf2:	6062      	str	r2, [r4, #4]
  40bcf4:	50e3      	str	r3, [r4, r3]
  40bcf6:	e788      	b.n	40bc0a <_free_r+0x86>
  40bcf8:	2a54      	cmp	r2, #84	; 0x54
  40bcfa:	d806      	bhi.n	40bd0a <_free_r+0x186>
  40bcfc:	0b1a      	lsrs	r2, r3, #12
  40bcfe:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40bd02:	007f      	lsls	r7, r7, #1
  40bd04:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40bd08:	e78e      	b.n	40bc28 <_free_r+0xa4>
  40bd0a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40bd0e:	d806      	bhi.n	40bd1e <_free_r+0x19a>
  40bd10:	0bda      	lsrs	r2, r3, #15
  40bd12:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40bd16:	007f      	lsls	r7, r7, #1
  40bd18:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40bd1c:	e784      	b.n	40bc28 <_free_r+0xa4>
  40bd1e:	f240 5054 	movw	r0, #1364	; 0x554
  40bd22:	4282      	cmp	r2, r0
  40bd24:	d806      	bhi.n	40bd34 <_free_r+0x1b0>
  40bd26:	0c9a      	lsrs	r2, r3, #18
  40bd28:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40bd2c:	007f      	lsls	r7, r7, #1
  40bd2e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40bd32:	e779      	b.n	40bc28 <_free_r+0xa4>
  40bd34:	27fe      	movs	r7, #254	; 0xfe
  40bd36:	257e      	movs	r5, #126	; 0x7e
  40bd38:	e776      	b.n	40bc28 <_free_r+0xa4>
  40bd3a:	f043 0201 	orr.w	r2, r3, #1
  40bd3e:	6062      	str	r2, [r4, #4]
  40bd40:	50e3      	str	r3, [r4, r3]
  40bd42:	e762      	b.n	40bc0a <_free_r+0x86>
  40bd44:	20400474 	.word	0x20400474
  40bd48:	2040047c 	.word	0x2040047c
  40bd4c:	2040087c 	.word	0x2040087c
  40bd50:	2040156c 	.word	0x2040156c

0040bd54 <__sfvwrite_r>:
  40bd54:	6893      	ldr	r3, [r2, #8]
  40bd56:	2b00      	cmp	r3, #0
  40bd58:	d076      	beq.n	40be48 <__sfvwrite_r+0xf4>
  40bd5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bd5e:	898b      	ldrh	r3, [r1, #12]
  40bd60:	b085      	sub	sp, #20
  40bd62:	460c      	mov	r4, r1
  40bd64:	0719      	lsls	r1, r3, #28
  40bd66:	9001      	str	r0, [sp, #4]
  40bd68:	4616      	mov	r6, r2
  40bd6a:	d529      	bpl.n	40bdc0 <__sfvwrite_r+0x6c>
  40bd6c:	6922      	ldr	r2, [r4, #16]
  40bd6e:	b33a      	cbz	r2, 40bdc0 <__sfvwrite_r+0x6c>
  40bd70:	f003 0802 	and.w	r8, r3, #2
  40bd74:	fa1f f088 	uxth.w	r0, r8
  40bd78:	6835      	ldr	r5, [r6, #0]
  40bd7a:	2800      	cmp	r0, #0
  40bd7c:	d02f      	beq.n	40bdde <__sfvwrite_r+0x8a>
  40bd7e:	f04f 0900 	mov.w	r9, #0
  40bd82:	4fb4      	ldr	r7, [pc, #720]	; (40c054 <__sfvwrite_r+0x300>)
  40bd84:	46c8      	mov	r8, r9
  40bd86:	46b2      	mov	sl, r6
  40bd88:	45b8      	cmp	r8, r7
  40bd8a:	4643      	mov	r3, r8
  40bd8c:	464a      	mov	r2, r9
  40bd8e:	bf28      	it	cs
  40bd90:	463b      	movcs	r3, r7
  40bd92:	9801      	ldr	r0, [sp, #4]
  40bd94:	f1b8 0f00 	cmp.w	r8, #0
  40bd98:	d050      	beq.n	40be3c <__sfvwrite_r+0xe8>
  40bd9a:	69e1      	ldr	r1, [r4, #28]
  40bd9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40bd9e:	47b0      	blx	r6
  40bda0:	2800      	cmp	r0, #0
  40bda2:	dd71      	ble.n	40be88 <__sfvwrite_r+0x134>
  40bda4:	f8da 3008 	ldr.w	r3, [sl, #8]
  40bda8:	1a1b      	subs	r3, r3, r0
  40bdaa:	4481      	add	r9, r0
  40bdac:	ebc0 0808 	rsb	r8, r0, r8
  40bdb0:	f8ca 3008 	str.w	r3, [sl, #8]
  40bdb4:	2b00      	cmp	r3, #0
  40bdb6:	d1e7      	bne.n	40bd88 <__sfvwrite_r+0x34>
  40bdb8:	2000      	movs	r0, #0
  40bdba:	b005      	add	sp, #20
  40bdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bdc0:	4621      	mov	r1, r4
  40bdc2:	9801      	ldr	r0, [sp, #4]
  40bdc4:	f7fe fca8 	bl	40a718 <__swsetup_r>
  40bdc8:	2800      	cmp	r0, #0
  40bdca:	f040 813a 	bne.w	40c042 <__sfvwrite_r+0x2ee>
  40bdce:	89a3      	ldrh	r3, [r4, #12]
  40bdd0:	6835      	ldr	r5, [r6, #0]
  40bdd2:	f003 0802 	and.w	r8, r3, #2
  40bdd6:	fa1f f088 	uxth.w	r0, r8
  40bdda:	2800      	cmp	r0, #0
  40bddc:	d1cf      	bne.n	40bd7e <__sfvwrite_r+0x2a>
  40bdde:	f013 0901 	ands.w	r9, r3, #1
  40bde2:	d15b      	bne.n	40be9c <__sfvwrite_r+0x148>
  40bde4:	464f      	mov	r7, r9
  40bde6:	9602      	str	r6, [sp, #8]
  40bde8:	b31f      	cbz	r7, 40be32 <__sfvwrite_r+0xde>
  40bdea:	059a      	lsls	r2, r3, #22
  40bdec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40bdf0:	d52c      	bpl.n	40be4c <__sfvwrite_r+0xf8>
  40bdf2:	4547      	cmp	r7, r8
  40bdf4:	46c2      	mov	sl, r8
  40bdf6:	f0c0 80a4 	bcc.w	40bf42 <__sfvwrite_r+0x1ee>
  40bdfa:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40bdfe:	f040 80b1 	bne.w	40bf64 <__sfvwrite_r+0x210>
  40be02:	6820      	ldr	r0, [r4, #0]
  40be04:	4652      	mov	r2, sl
  40be06:	4649      	mov	r1, r9
  40be08:	f000 fa22 	bl	40c250 <memmove>
  40be0c:	68a0      	ldr	r0, [r4, #8]
  40be0e:	6823      	ldr	r3, [r4, #0]
  40be10:	ebc8 0000 	rsb	r0, r8, r0
  40be14:	4453      	add	r3, sl
  40be16:	60a0      	str	r0, [r4, #8]
  40be18:	6023      	str	r3, [r4, #0]
  40be1a:	4638      	mov	r0, r7
  40be1c:	9a02      	ldr	r2, [sp, #8]
  40be1e:	6893      	ldr	r3, [r2, #8]
  40be20:	1a1b      	subs	r3, r3, r0
  40be22:	4481      	add	r9, r0
  40be24:	1a3f      	subs	r7, r7, r0
  40be26:	6093      	str	r3, [r2, #8]
  40be28:	2b00      	cmp	r3, #0
  40be2a:	d0c5      	beq.n	40bdb8 <__sfvwrite_r+0x64>
  40be2c:	89a3      	ldrh	r3, [r4, #12]
  40be2e:	2f00      	cmp	r7, #0
  40be30:	d1db      	bne.n	40bdea <__sfvwrite_r+0x96>
  40be32:	f8d5 9000 	ldr.w	r9, [r5]
  40be36:	686f      	ldr	r7, [r5, #4]
  40be38:	3508      	adds	r5, #8
  40be3a:	e7d5      	b.n	40bde8 <__sfvwrite_r+0x94>
  40be3c:	f8d5 9000 	ldr.w	r9, [r5]
  40be40:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40be44:	3508      	adds	r5, #8
  40be46:	e79f      	b.n	40bd88 <__sfvwrite_r+0x34>
  40be48:	2000      	movs	r0, #0
  40be4a:	4770      	bx	lr
  40be4c:	6820      	ldr	r0, [r4, #0]
  40be4e:	6923      	ldr	r3, [r4, #16]
  40be50:	4298      	cmp	r0, r3
  40be52:	d803      	bhi.n	40be5c <__sfvwrite_r+0x108>
  40be54:	6961      	ldr	r1, [r4, #20]
  40be56:	428f      	cmp	r7, r1
  40be58:	f080 80b7 	bcs.w	40bfca <__sfvwrite_r+0x276>
  40be5c:	45b8      	cmp	r8, r7
  40be5e:	bf28      	it	cs
  40be60:	46b8      	movcs	r8, r7
  40be62:	4642      	mov	r2, r8
  40be64:	4649      	mov	r1, r9
  40be66:	f000 f9f3 	bl	40c250 <memmove>
  40be6a:	68a3      	ldr	r3, [r4, #8]
  40be6c:	6822      	ldr	r2, [r4, #0]
  40be6e:	ebc8 0303 	rsb	r3, r8, r3
  40be72:	4442      	add	r2, r8
  40be74:	60a3      	str	r3, [r4, #8]
  40be76:	6022      	str	r2, [r4, #0]
  40be78:	2b00      	cmp	r3, #0
  40be7a:	d149      	bne.n	40bf10 <__sfvwrite_r+0x1bc>
  40be7c:	4621      	mov	r1, r4
  40be7e:	9801      	ldr	r0, [sp, #4]
  40be80:	f7ff fd22 	bl	40b8c8 <_fflush_r>
  40be84:	2800      	cmp	r0, #0
  40be86:	d043      	beq.n	40bf10 <__sfvwrite_r+0x1bc>
  40be88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40be8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40be90:	f04f 30ff 	mov.w	r0, #4294967295
  40be94:	81a3      	strh	r3, [r4, #12]
  40be96:	b005      	add	sp, #20
  40be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40be9c:	4680      	mov	r8, r0
  40be9e:	9002      	str	r0, [sp, #8]
  40bea0:	4682      	mov	sl, r0
  40bea2:	4681      	mov	r9, r0
  40bea4:	f1b9 0f00 	cmp.w	r9, #0
  40bea8:	d02a      	beq.n	40bf00 <__sfvwrite_r+0x1ac>
  40beaa:	9b02      	ldr	r3, [sp, #8]
  40beac:	2b00      	cmp	r3, #0
  40beae:	d04c      	beq.n	40bf4a <__sfvwrite_r+0x1f6>
  40beb0:	6820      	ldr	r0, [r4, #0]
  40beb2:	6923      	ldr	r3, [r4, #16]
  40beb4:	6962      	ldr	r2, [r4, #20]
  40beb6:	45c8      	cmp	r8, r9
  40beb8:	46c3      	mov	fp, r8
  40beba:	bf28      	it	cs
  40bebc:	46cb      	movcs	fp, r9
  40bebe:	4298      	cmp	r0, r3
  40bec0:	465f      	mov	r7, fp
  40bec2:	d904      	bls.n	40bece <__sfvwrite_r+0x17a>
  40bec4:	68a3      	ldr	r3, [r4, #8]
  40bec6:	4413      	add	r3, r2
  40bec8:	459b      	cmp	fp, r3
  40beca:	f300 8090 	bgt.w	40bfee <__sfvwrite_r+0x29a>
  40bece:	4593      	cmp	fp, r2
  40bed0:	db20      	blt.n	40bf14 <__sfvwrite_r+0x1c0>
  40bed2:	4613      	mov	r3, r2
  40bed4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40bed6:	69e1      	ldr	r1, [r4, #28]
  40bed8:	9801      	ldr	r0, [sp, #4]
  40beda:	4652      	mov	r2, sl
  40bedc:	47b8      	blx	r7
  40bede:	1e07      	subs	r7, r0, #0
  40bee0:	ddd2      	ble.n	40be88 <__sfvwrite_r+0x134>
  40bee2:	ebb8 0807 	subs.w	r8, r8, r7
  40bee6:	d023      	beq.n	40bf30 <__sfvwrite_r+0x1dc>
  40bee8:	68b3      	ldr	r3, [r6, #8]
  40beea:	1bdb      	subs	r3, r3, r7
  40beec:	44ba      	add	sl, r7
  40beee:	ebc7 0909 	rsb	r9, r7, r9
  40bef2:	60b3      	str	r3, [r6, #8]
  40bef4:	2b00      	cmp	r3, #0
  40bef6:	f43f af5f 	beq.w	40bdb8 <__sfvwrite_r+0x64>
  40befa:	f1b9 0f00 	cmp.w	r9, #0
  40befe:	d1d4      	bne.n	40beaa <__sfvwrite_r+0x156>
  40bf00:	2300      	movs	r3, #0
  40bf02:	f8d5 a000 	ldr.w	sl, [r5]
  40bf06:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40bf0a:	9302      	str	r3, [sp, #8]
  40bf0c:	3508      	adds	r5, #8
  40bf0e:	e7c9      	b.n	40bea4 <__sfvwrite_r+0x150>
  40bf10:	4640      	mov	r0, r8
  40bf12:	e783      	b.n	40be1c <__sfvwrite_r+0xc8>
  40bf14:	465a      	mov	r2, fp
  40bf16:	4651      	mov	r1, sl
  40bf18:	f000 f99a 	bl	40c250 <memmove>
  40bf1c:	68a2      	ldr	r2, [r4, #8]
  40bf1e:	6823      	ldr	r3, [r4, #0]
  40bf20:	ebcb 0202 	rsb	r2, fp, r2
  40bf24:	445b      	add	r3, fp
  40bf26:	ebb8 0807 	subs.w	r8, r8, r7
  40bf2a:	60a2      	str	r2, [r4, #8]
  40bf2c:	6023      	str	r3, [r4, #0]
  40bf2e:	d1db      	bne.n	40bee8 <__sfvwrite_r+0x194>
  40bf30:	4621      	mov	r1, r4
  40bf32:	9801      	ldr	r0, [sp, #4]
  40bf34:	f7ff fcc8 	bl	40b8c8 <_fflush_r>
  40bf38:	2800      	cmp	r0, #0
  40bf3a:	d1a5      	bne.n	40be88 <__sfvwrite_r+0x134>
  40bf3c:	f8cd 8008 	str.w	r8, [sp, #8]
  40bf40:	e7d2      	b.n	40bee8 <__sfvwrite_r+0x194>
  40bf42:	6820      	ldr	r0, [r4, #0]
  40bf44:	46b8      	mov	r8, r7
  40bf46:	46ba      	mov	sl, r7
  40bf48:	e75c      	b.n	40be04 <__sfvwrite_r+0xb0>
  40bf4a:	464a      	mov	r2, r9
  40bf4c:	210a      	movs	r1, #10
  40bf4e:	4650      	mov	r0, sl
  40bf50:	f000 f92e 	bl	40c1b0 <memchr>
  40bf54:	2800      	cmp	r0, #0
  40bf56:	d06f      	beq.n	40c038 <__sfvwrite_r+0x2e4>
  40bf58:	3001      	adds	r0, #1
  40bf5a:	2301      	movs	r3, #1
  40bf5c:	ebca 0800 	rsb	r8, sl, r0
  40bf60:	9302      	str	r3, [sp, #8]
  40bf62:	e7a5      	b.n	40beb0 <__sfvwrite_r+0x15c>
  40bf64:	6962      	ldr	r2, [r4, #20]
  40bf66:	6820      	ldr	r0, [r4, #0]
  40bf68:	6921      	ldr	r1, [r4, #16]
  40bf6a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40bf6e:	ebc1 0a00 	rsb	sl, r1, r0
  40bf72:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40bf76:	f10a 0001 	add.w	r0, sl, #1
  40bf7a:	ea4f 0868 	mov.w	r8, r8, asr #1
  40bf7e:	4438      	add	r0, r7
  40bf80:	4540      	cmp	r0, r8
  40bf82:	4642      	mov	r2, r8
  40bf84:	bf84      	itt	hi
  40bf86:	4680      	movhi	r8, r0
  40bf88:	4642      	movhi	r2, r8
  40bf8a:	055b      	lsls	r3, r3, #21
  40bf8c:	d542      	bpl.n	40c014 <__sfvwrite_r+0x2c0>
  40bf8e:	4611      	mov	r1, r2
  40bf90:	9801      	ldr	r0, [sp, #4]
  40bf92:	f7fb fb73 	bl	40767c <_malloc_r>
  40bf96:	4683      	mov	fp, r0
  40bf98:	2800      	cmp	r0, #0
  40bf9a:	d055      	beq.n	40c048 <__sfvwrite_r+0x2f4>
  40bf9c:	4652      	mov	r2, sl
  40bf9e:	6921      	ldr	r1, [r4, #16]
  40bfa0:	f7fb fe24 	bl	407bec <memcpy>
  40bfa4:	89a3      	ldrh	r3, [r4, #12]
  40bfa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40bfaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40bfae:	81a3      	strh	r3, [r4, #12]
  40bfb0:	ebca 0308 	rsb	r3, sl, r8
  40bfb4:	eb0b 000a 	add.w	r0, fp, sl
  40bfb8:	f8c4 8014 	str.w	r8, [r4, #20]
  40bfbc:	f8c4 b010 	str.w	fp, [r4, #16]
  40bfc0:	6020      	str	r0, [r4, #0]
  40bfc2:	60a3      	str	r3, [r4, #8]
  40bfc4:	46b8      	mov	r8, r7
  40bfc6:	46ba      	mov	sl, r7
  40bfc8:	e71c      	b.n	40be04 <__sfvwrite_r+0xb0>
  40bfca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40bfce:	42bb      	cmp	r3, r7
  40bfd0:	bf28      	it	cs
  40bfd2:	463b      	movcs	r3, r7
  40bfd4:	464a      	mov	r2, r9
  40bfd6:	fb93 f3f1 	sdiv	r3, r3, r1
  40bfda:	9801      	ldr	r0, [sp, #4]
  40bfdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40bfde:	fb01 f303 	mul.w	r3, r1, r3
  40bfe2:	69e1      	ldr	r1, [r4, #28]
  40bfe4:	47b0      	blx	r6
  40bfe6:	2800      	cmp	r0, #0
  40bfe8:	f73f af18 	bgt.w	40be1c <__sfvwrite_r+0xc8>
  40bfec:	e74c      	b.n	40be88 <__sfvwrite_r+0x134>
  40bfee:	461a      	mov	r2, r3
  40bff0:	4651      	mov	r1, sl
  40bff2:	9303      	str	r3, [sp, #12]
  40bff4:	f000 f92c 	bl	40c250 <memmove>
  40bff8:	6822      	ldr	r2, [r4, #0]
  40bffa:	9b03      	ldr	r3, [sp, #12]
  40bffc:	9801      	ldr	r0, [sp, #4]
  40bffe:	441a      	add	r2, r3
  40c000:	6022      	str	r2, [r4, #0]
  40c002:	4621      	mov	r1, r4
  40c004:	f7ff fc60 	bl	40b8c8 <_fflush_r>
  40c008:	9b03      	ldr	r3, [sp, #12]
  40c00a:	2800      	cmp	r0, #0
  40c00c:	f47f af3c 	bne.w	40be88 <__sfvwrite_r+0x134>
  40c010:	461f      	mov	r7, r3
  40c012:	e766      	b.n	40bee2 <__sfvwrite_r+0x18e>
  40c014:	9801      	ldr	r0, [sp, #4]
  40c016:	f000 fc8d 	bl	40c934 <_realloc_r>
  40c01a:	4683      	mov	fp, r0
  40c01c:	2800      	cmp	r0, #0
  40c01e:	d1c7      	bne.n	40bfb0 <__sfvwrite_r+0x25c>
  40c020:	9d01      	ldr	r5, [sp, #4]
  40c022:	6921      	ldr	r1, [r4, #16]
  40c024:	4628      	mov	r0, r5
  40c026:	f7ff fdad 	bl	40bb84 <_free_r>
  40c02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c02e:	220c      	movs	r2, #12
  40c030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40c034:	602a      	str	r2, [r5, #0]
  40c036:	e729      	b.n	40be8c <__sfvwrite_r+0x138>
  40c038:	2301      	movs	r3, #1
  40c03a:	f109 0801 	add.w	r8, r9, #1
  40c03e:	9302      	str	r3, [sp, #8]
  40c040:	e736      	b.n	40beb0 <__sfvwrite_r+0x15c>
  40c042:	f04f 30ff 	mov.w	r0, #4294967295
  40c046:	e6b8      	b.n	40bdba <__sfvwrite_r+0x66>
  40c048:	9a01      	ldr	r2, [sp, #4]
  40c04a:	230c      	movs	r3, #12
  40c04c:	6013      	str	r3, [r2, #0]
  40c04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c052:	e71b      	b.n	40be8c <__sfvwrite_r+0x138>
  40c054:	7ffffc00 	.word	0x7ffffc00

0040c058 <_fwalk_reent>:
  40c058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c05c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40c060:	d01f      	beq.n	40c0a2 <_fwalk_reent+0x4a>
  40c062:	4688      	mov	r8, r1
  40c064:	4606      	mov	r6, r0
  40c066:	f04f 0900 	mov.w	r9, #0
  40c06a:	687d      	ldr	r5, [r7, #4]
  40c06c:	68bc      	ldr	r4, [r7, #8]
  40c06e:	3d01      	subs	r5, #1
  40c070:	d411      	bmi.n	40c096 <_fwalk_reent+0x3e>
  40c072:	89a3      	ldrh	r3, [r4, #12]
  40c074:	2b01      	cmp	r3, #1
  40c076:	f105 35ff 	add.w	r5, r5, #4294967295
  40c07a:	d908      	bls.n	40c08e <_fwalk_reent+0x36>
  40c07c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40c080:	3301      	adds	r3, #1
  40c082:	4621      	mov	r1, r4
  40c084:	4630      	mov	r0, r6
  40c086:	d002      	beq.n	40c08e <_fwalk_reent+0x36>
  40c088:	47c0      	blx	r8
  40c08a:	ea49 0900 	orr.w	r9, r9, r0
  40c08e:	1c6b      	adds	r3, r5, #1
  40c090:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40c094:	d1ed      	bne.n	40c072 <_fwalk_reent+0x1a>
  40c096:	683f      	ldr	r7, [r7, #0]
  40c098:	2f00      	cmp	r7, #0
  40c09a:	d1e6      	bne.n	40c06a <_fwalk_reent+0x12>
  40c09c:	4648      	mov	r0, r9
  40c09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c0a2:	46b9      	mov	r9, r7
  40c0a4:	4648      	mov	r0, r9
  40c0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c0aa:	bf00      	nop

0040c0ac <__locale_charset>:
  40c0ac:	4800      	ldr	r0, [pc, #0]	; (40c0b0 <__locale_charset+0x4>)
  40c0ae:	4770      	bx	lr
  40c0b0:	204008bc 	.word	0x204008bc

0040c0b4 <__locale_mb_cur_max>:
  40c0b4:	4b01      	ldr	r3, [pc, #4]	; (40c0bc <__locale_mb_cur_max+0x8>)
  40c0b6:	6818      	ldr	r0, [r3, #0]
  40c0b8:	4770      	bx	lr
  40c0ba:	bf00      	nop
  40c0bc:	204008dc 	.word	0x204008dc

0040c0c0 <_localeconv_r>:
  40c0c0:	4800      	ldr	r0, [pc, #0]	; (40c0c4 <_localeconv_r+0x4>)
  40c0c2:	4770      	bx	lr
  40c0c4:	20400884 	.word	0x20400884

0040c0c8 <__swhatbuf_r>:
  40c0c8:	b570      	push	{r4, r5, r6, lr}
  40c0ca:	460d      	mov	r5, r1
  40c0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c0d0:	2900      	cmp	r1, #0
  40c0d2:	b090      	sub	sp, #64	; 0x40
  40c0d4:	4614      	mov	r4, r2
  40c0d6:	461e      	mov	r6, r3
  40c0d8:	db14      	blt.n	40c104 <__swhatbuf_r+0x3c>
  40c0da:	aa01      	add	r2, sp, #4
  40c0dc:	f001 f858 	bl	40d190 <_fstat_r>
  40c0e0:	2800      	cmp	r0, #0
  40c0e2:	db0f      	blt.n	40c104 <__swhatbuf_r+0x3c>
  40c0e4:	9a02      	ldr	r2, [sp, #8]
  40c0e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40c0ea:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40c0ee:	fab2 f282 	clz	r2, r2
  40c0f2:	0952      	lsrs	r2, r2, #5
  40c0f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c0f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40c0fc:	6032      	str	r2, [r6, #0]
  40c0fe:	6023      	str	r3, [r4, #0]
  40c100:	b010      	add	sp, #64	; 0x40
  40c102:	bd70      	pop	{r4, r5, r6, pc}
  40c104:	89a8      	ldrh	r0, [r5, #12]
  40c106:	f000 0080 	and.w	r0, r0, #128	; 0x80
  40c10a:	b282      	uxth	r2, r0
  40c10c:	2000      	movs	r0, #0
  40c10e:	6030      	str	r0, [r6, #0]
  40c110:	b11a      	cbz	r2, 40c11a <__swhatbuf_r+0x52>
  40c112:	2340      	movs	r3, #64	; 0x40
  40c114:	6023      	str	r3, [r4, #0]
  40c116:	b010      	add	sp, #64	; 0x40
  40c118:	bd70      	pop	{r4, r5, r6, pc}
  40c11a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40c11e:	4610      	mov	r0, r2
  40c120:	6023      	str	r3, [r4, #0]
  40c122:	b010      	add	sp, #64	; 0x40
  40c124:	bd70      	pop	{r4, r5, r6, pc}
  40c126:	bf00      	nop

0040c128 <__smakebuf_r>:
  40c128:	898a      	ldrh	r2, [r1, #12]
  40c12a:	0792      	lsls	r2, r2, #30
  40c12c:	460b      	mov	r3, r1
  40c12e:	d506      	bpl.n	40c13e <__smakebuf_r+0x16>
  40c130:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40c134:	2101      	movs	r1, #1
  40c136:	601a      	str	r2, [r3, #0]
  40c138:	611a      	str	r2, [r3, #16]
  40c13a:	6159      	str	r1, [r3, #20]
  40c13c:	4770      	bx	lr
  40c13e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c140:	b083      	sub	sp, #12
  40c142:	ab01      	add	r3, sp, #4
  40c144:	466a      	mov	r2, sp
  40c146:	460c      	mov	r4, r1
  40c148:	4605      	mov	r5, r0
  40c14a:	f7ff ffbd 	bl	40c0c8 <__swhatbuf_r>
  40c14e:	9900      	ldr	r1, [sp, #0]
  40c150:	4606      	mov	r6, r0
  40c152:	4628      	mov	r0, r5
  40c154:	f7fb fa92 	bl	40767c <_malloc_r>
  40c158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c15c:	b1d0      	cbz	r0, 40c194 <__smakebuf_r+0x6c>
  40c15e:	9a01      	ldr	r2, [sp, #4]
  40c160:	4f12      	ldr	r7, [pc, #72]	; (40c1ac <__smakebuf_r+0x84>)
  40c162:	9900      	ldr	r1, [sp, #0]
  40c164:	63ef      	str	r7, [r5, #60]	; 0x3c
  40c166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c16a:	81a3      	strh	r3, [r4, #12]
  40c16c:	6020      	str	r0, [r4, #0]
  40c16e:	6120      	str	r0, [r4, #16]
  40c170:	6161      	str	r1, [r4, #20]
  40c172:	b91a      	cbnz	r2, 40c17c <__smakebuf_r+0x54>
  40c174:	4333      	orrs	r3, r6
  40c176:	81a3      	strh	r3, [r4, #12]
  40c178:	b003      	add	sp, #12
  40c17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c17c:	4628      	mov	r0, r5
  40c17e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c182:	f001 f819 	bl	40d1b8 <_isatty_r>
  40c186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c18a:	2800      	cmp	r0, #0
  40c18c:	d0f2      	beq.n	40c174 <__smakebuf_r+0x4c>
  40c18e:	f043 0301 	orr.w	r3, r3, #1
  40c192:	e7ef      	b.n	40c174 <__smakebuf_r+0x4c>
  40c194:	059a      	lsls	r2, r3, #22
  40c196:	d4ef      	bmi.n	40c178 <__smakebuf_r+0x50>
  40c198:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40c19c:	f043 0302 	orr.w	r3, r3, #2
  40c1a0:	2101      	movs	r1, #1
  40c1a2:	81a3      	strh	r3, [r4, #12]
  40c1a4:	6022      	str	r2, [r4, #0]
  40c1a6:	6122      	str	r2, [r4, #16]
  40c1a8:	6161      	str	r1, [r4, #20]
  40c1aa:	e7e5      	b.n	40c178 <__smakebuf_r+0x50>
  40c1ac:	0040b8f5 	.word	0x0040b8f5

0040c1b0 <memchr>:
  40c1b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c1b4:	2a10      	cmp	r2, #16
  40c1b6:	db2b      	blt.n	40c210 <memchr+0x60>
  40c1b8:	f010 0f07 	tst.w	r0, #7
  40c1bc:	d008      	beq.n	40c1d0 <memchr+0x20>
  40c1be:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c1c2:	3a01      	subs	r2, #1
  40c1c4:	428b      	cmp	r3, r1
  40c1c6:	d02d      	beq.n	40c224 <memchr+0x74>
  40c1c8:	f010 0f07 	tst.w	r0, #7
  40c1cc:	b342      	cbz	r2, 40c220 <memchr+0x70>
  40c1ce:	d1f6      	bne.n	40c1be <memchr+0xe>
  40c1d0:	b4f0      	push	{r4, r5, r6, r7}
  40c1d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40c1d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40c1da:	f022 0407 	bic.w	r4, r2, #7
  40c1de:	f07f 0700 	mvns.w	r7, #0
  40c1e2:	2300      	movs	r3, #0
  40c1e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40c1e8:	3c08      	subs	r4, #8
  40c1ea:	ea85 0501 	eor.w	r5, r5, r1
  40c1ee:	ea86 0601 	eor.w	r6, r6, r1
  40c1f2:	fa85 f547 	uadd8	r5, r5, r7
  40c1f6:	faa3 f587 	sel	r5, r3, r7
  40c1fa:	fa86 f647 	uadd8	r6, r6, r7
  40c1fe:	faa5 f687 	sel	r6, r5, r7
  40c202:	b98e      	cbnz	r6, 40c228 <memchr+0x78>
  40c204:	d1ee      	bne.n	40c1e4 <memchr+0x34>
  40c206:	bcf0      	pop	{r4, r5, r6, r7}
  40c208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c20c:	f002 0207 	and.w	r2, r2, #7
  40c210:	b132      	cbz	r2, 40c220 <memchr+0x70>
  40c212:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c216:	3a01      	subs	r2, #1
  40c218:	ea83 0301 	eor.w	r3, r3, r1
  40c21c:	b113      	cbz	r3, 40c224 <memchr+0x74>
  40c21e:	d1f8      	bne.n	40c212 <memchr+0x62>
  40c220:	2000      	movs	r0, #0
  40c222:	4770      	bx	lr
  40c224:	3801      	subs	r0, #1
  40c226:	4770      	bx	lr
  40c228:	2d00      	cmp	r5, #0
  40c22a:	bf06      	itte	eq
  40c22c:	4635      	moveq	r5, r6
  40c22e:	3803      	subeq	r0, #3
  40c230:	3807      	subne	r0, #7
  40c232:	f015 0f01 	tst.w	r5, #1
  40c236:	d107      	bne.n	40c248 <memchr+0x98>
  40c238:	3001      	adds	r0, #1
  40c23a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40c23e:	bf02      	ittt	eq
  40c240:	3001      	addeq	r0, #1
  40c242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40c246:	3001      	addeq	r0, #1
  40c248:	bcf0      	pop	{r4, r5, r6, r7}
  40c24a:	3801      	subs	r0, #1
  40c24c:	4770      	bx	lr
  40c24e:	bf00      	nop

0040c250 <memmove>:
  40c250:	4288      	cmp	r0, r1
  40c252:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c254:	d90d      	bls.n	40c272 <memmove+0x22>
  40c256:	188b      	adds	r3, r1, r2
  40c258:	4298      	cmp	r0, r3
  40c25a:	d20a      	bcs.n	40c272 <memmove+0x22>
  40c25c:	1881      	adds	r1, r0, r2
  40c25e:	2a00      	cmp	r2, #0
  40c260:	d051      	beq.n	40c306 <memmove+0xb6>
  40c262:	1a9a      	subs	r2, r3, r2
  40c264:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40c268:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40c26c:	4293      	cmp	r3, r2
  40c26e:	d1f9      	bne.n	40c264 <memmove+0x14>
  40c270:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c272:	2a0f      	cmp	r2, #15
  40c274:	d948      	bls.n	40c308 <memmove+0xb8>
  40c276:	ea41 0300 	orr.w	r3, r1, r0
  40c27a:	079b      	lsls	r3, r3, #30
  40c27c:	d146      	bne.n	40c30c <memmove+0xbc>
  40c27e:	f100 0410 	add.w	r4, r0, #16
  40c282:	f101 0310 	add.w	r3, r1, #16
  40c286:	4615      	mov	r5, r2
  40c288:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40c28c:	f844 6c10 	str.w	r6, [r4, #-16]
  40c290:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40c294:	f844 6c0c 	str.w	r6, [r4, #-12]
  40c298:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40c29c:	f844 6c08 	str.w	r6, [r4, #-8]
  40c2a0:	3d10      	subs	r5, #16
  40c2a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40c2a6:	f844 6c04 	str.w	r6, [r4, #-4]
  40c2aa:	2d0f      	cmp	r5, #15
  40c2ac:	f103 0310 	add.w	r3, r3, #16
  40c2b0:	f104 0410 	add.w	r4, r4, #16
  40c2b4:	d8e8      	bhi.n	40c288 <memmove+0x38>
  40c2b6:	f1a2 0310 	sub.w	r3, r2, #16
  40c2ba:	f023 030f 	bic.w	r3, r3, #15
  40c2be:	f002 0e0f 	and.w	lr, r2, #15
  40c2c2:	3310      	adds	r3, #16
  40c2c4:	f1be 0f03 	cmp.w	lr, #3
  40c2c8:	4419      	add	r1, r3
  40c2ca:	4403      	add	r3, r0
  40c2cc:	d921      	bls.n	40c312 <memmove+0xc2>
  40c2ce:	1f1e      	subs	r6, r3, #4
  40c2d0:	460d      	mov	r5, r1
  40c2d2:	4674      	mov	r4, lr
  40c2d4:	3c04      	subs	r4, #4
  40c2d6:	f855 7b04 	ldr.w	r7, [r5], #4
  40c2da:	f846 7f04 	str.w	r7, [r6, #4]!
  40c2de:	2c03      	cmp	r4, #3
  40c2e0:	d8f8      	bhi.n	40c2d4 <memmove+0x84>
  40c2e2:	f1ae 0404 	sub.w	r4, lr, #4
  40c2e6:	f024 0403 	bic.w	r4, r4, #3
  40c2ea:	3404      	adds	r4, #4
  40c2ec:	4423      	add	r3, r4
  40c2ee:	4421      	add	r1, r4
  40c2f0:	f002 0203 	and.w	r2, r2, #3
  40c2f4:	b162      	cbz	r2, 40c310 <memmove+0xc0>
  40c2f6:	3b01      	subs	r3, #1
  40c2f8:	440a      	add	r2, r1
  40c2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c2fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  40c302:	428a      	cmp	r2, r1
  40c304:	d1f9      	bne.n	40c2fa <memmove+0xaa>
  40c306:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c308:	4603      	mov	r3, r0
  40c30a:	e7f3      	b.n	40c2f4 <memmove+0xa4>
  40c30c:	4603      	mov	r3, r0
  40c30e:	e7f2      	b.n	40c2f6 <memmove+0xa6>
  40c310:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c312:	4672      	mov	r2, lr
  40c314:	e7ee      	b.n	40c2f4 <memmove+0xa4>
  40c316:	bf00      	nop

0040c318 <_Balloc>:
  40c318:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c31a:	b570      	push	{r4, r5, r6, lr}
  40c31c:	4605      	mov	r5, r0
  40c31e:	460c      	mov	r4, r1
  40c320:	b14b      	cbz	r3, 40c336 <_Balloc+0x1e>
  40c322:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40c326:	b180      	cbz	r0, 40c34a <_Balloc+0x32>
  40c328:	6802      	ldr	r2, [r0, #0]
  40c32a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40c32e:	2300      	movs	r3, #0
  40c330:	6103      	str	r3, [r0, #16]
  40c332:	60c3      	str	r3, [r0, #12]
  40c334:	bd70      	pop	{r4, r5, r6, pc}
  40c336:	2221      	movs	r2, #33	; 0x21
  40c338:	2104      	movs	r1, #4
  40c33a:	f000 fea5 	bl	40d088 <_calloc_r>
  40c33e:	64e8      	str	r0, [r5, #76]	; 0x4c
  40c340:	4603      	mov	r3, r0
  40c342:	2800      	cmp	r0, #0
  40c344:	d1ed      	bne.n	40c322 <_Balloc+0xa>
  40c346:	2000      	movs	r0, #0
  40c348:	bd70      	pop	{r4, r5, r6, pc}
  40c34a:	2101      	movs	r1, #1
  40c34c:	fa01 f604 	lsl.w	r6, r1, r4
  40c350:	1d72      	adds	r2, r6, #5
  40c352:	4628      	mov	r0, r5
  40c354:	0092      	lsls	r2, r2, #2
  40c356:	f000 fe97 	bl	40d088 <_calloc_r>
  40c35a:	2800      	cmp	r0, #0
  40c35c:	d0f3      	beq.n	40c346 <_Balloc+0x2e>
  40c35e:	6044      	str	r4, [r0, #4]
  40c360:	6086      	str	r6, [r0, #8]
  40c362:	e7e4      	b.n	40c32e <_Balloc+0x16>

0040c364 <_Bfree>:
  40c364:	b131      	cbz	r1, 40c374 <_Bfree+0x10>
  40c366:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c368:	684a      	ldr	r2, [r1, #4]
  40c36a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40c36e:	6008      	str	r0, [r1, #0]
  40c370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40c374:	4770      	bx	lr
  40c376:	bf00      	nop

0040c378 <__multadd>:
  40c378:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c37a:	690c      	ldr	r4, [r1, #16]
  40c37c:	b083      	sub	sp, #12
  40c37e:	460d      	mov	r5, r1
  40c380:	4606      	mov	r6, r0
  40c382:	f101 0e14 	add.w	lr, r1, #20
  40c386:	2700      	movs	r7, #0
  40c388:	f8de 0000 	ldr.w	r0, [lr]
  40c38c:	b281      	uxth	r1, r0
  40c38e:	fb02 3101 	mla	r1, r2, r1, r3
  40c392:	0c0b      	lsrs	r3, r1, #16
  40c394:	0c00      	lsrs	r0, r0, #16
  40c396:	fb02 3300 	mla	r3, r2, r0, r3
  40c39a:	b289      	uxth	r1, r1
  40c39c:	3701      	adds	r7, #1
  40c39e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  40c3a2:	42bc      	cmp	r4, r7
  40c3a4:	f84e 1b04 	str.w	r1, [lr], #4
  40c3a8:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40c3ac:	dcec      	bgt.n	40c388 <__multadd+0x10>
  40c3ae:	b13b      	cbz	r3, 40c3c0 <__multadd+0x48>
  40c3b0:	68aa      	ldr	r2, [r5, #8]
  40c3b2:	4294      	cmp	r4, r2
  40c3b4:	da07      	bge.n	40c3c6 <__multadd+0x4e>
  40c3b6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40c3ba:	3401      	adds	r4, #1
  40c3bc:	6153      	str	r3, [r2, #20]
  40c3be:	612c      	str	r4, [r5, #16]
  40c3c0:	4628      	mov	r0, r5
  40c3c2:	b003      	add	sp, #12
  40c3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c3c6:	6869      	ldr	r1, [r5, #4]
  40c3c8:	9301      	str	r3, [sp, #4]
  40c3ca:	3101      	adds	r1, #1
  40c3cc:	4630      	mov	r0, r6
  40c3ce:	f7ff ffa3 	bl	40c318 <_Balloc>
  40c3d2:	692a      	ldr	r2, [r5, #16]
  40c3d4:	3202      	adds	r2, #2
  40c3d6:	f105 010c 	add.w	r1, r5, #12
  40c3da:	4607      	mov	r7, r0
  40c3dc:	0092      	lsls	r2, r2, #2
  40c3de:	300c      	adds	r0, #12
  40c3e0:	f7fb fc04 	bl	407bec <memcpy>
  40c3e4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40c3e6:	6869      	ldr	r1, [r5, #4]
  40c3e8:	9b01      	ldr	r3, [sp, #4]
  40c3ea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40c3ee:	6028      	str	r0, [r5, #0]
  40c3f0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40c3f4:	463d      	mov	r5, r7
  40c3f6:	e7de      	b.n	40c3b6 <__multadd+0x3e>

0040c3f8 <__hi0bits>:
  40c3f8:	0c03      	lsrs	r3, r0, #16
  40c3fa:	041b      	lsls	r3, r3, #16
  40c3fc:	b9b3      	cbnz	r3, 40c42c <__hi0bits+0x34>
  40c3fe:	0400      	lsls	r0, r0, #16
  40c400:	2310      	movs	r3, #16
  40c402:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40c406:	bf04      	itt	eq
  40c408:	0200      	lsleq	r0, r0, #8
  40c40a:	3308      	addeq	r3, #8
  40c40c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40c410:	bf04      	itt	eq
  40c412:	0100      	lsleq	r0, r0, #4
  40c414:	3304      	addeq	r3, #4
  40c416:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40c41a:	bf04      	itt	eq
  40c41c:	0080      	lsleq	r0, r0, #2
  40c41e:	3302      	addeq	r3, #2
  40c420:	2800      	cmp	r0, #0
  40c422:	db07      	blt.n	40c434 <__hi0bits+0x3c>
  40c424:	0042      	lsls	r2, r0, #1
  40c426:	d403      	bmi.n	40c430 <__hi0bits+0x38>
  40c428:	2020      	movs	r0, #32
  40c42a:	4770      	bx	lr
  40c42c:	2300      	movs	r3, #0
  40c42e:	e7e8      	b.n	40c402 <__hi0bits+0xa>
  40c430:	1c58      	adds	r0, r3, #1
  40c432:	4770      	bx	lr
  40c434:	4618      	mov	r0, r3
  40c436:	4770      	bx	lr

0040c438 <__lo0bits>:
  40c438:	6803      	ldr	r3, [r0, #0]
  40c43a:	f013 0207 	ands.w	r2, r3, #7
  40c43e:	d007      	beq.n	40c450 <__lo0bits+0x18>
  40c440:	07d9      	lsls	r1, r3, #31
  40c442:	d420      	bmi.n	40c486 <__lo0bits+0x4e>
  40c444:	079a      	lsls	r2, r3, #30
  40c446:	d420      	bmi.n	40c48a <__lo0bits+0x52>
  40c448:	089b      	lsrs	r3, r3, #2
  40c44a:	6003      	str	r3, [r0, #0]
  40c44c:	2002      	movs	r0, #2
  40c44e:	4770      	bx	lr
  40c450:	b299      	uxth	r1, r3
  40c452:	b909      	cbnz	r1, 40c458 <__lo0bits+0x20>
  40c454:	0c1b      	lsrs	r3, r3, #16
  40c456:	2210      	movs	r2, #16
  40c458:	f013 0fff 	tst.w	r3, #255	; 0xff
  40c45c:	bf04      	itt	eq
  40c45e:	0a1b      	lsreq	r3, r3, #8
  40c460:	3208      	addeq	r2, #8
  40c462:	0719      	lsls	r1, r3, #28
  40c464:	bf04      	itt	eq
  40c466:	091b      	lsreq	r3, r3, #4
  40c468:	3204      	addeq	r2, #4
  40c46a:	0799      	lsls	r1, r3, #30
  40c46c:	bf04      	itt	eq
  40c46e:	089b      	lsreq	r3, r3, #2
  40c470:	3202      	addeq	r2, #2
  40c472:	07d9      	lsls	r1, r3, #31
  40c474:	d404      	bmi.n	40c480 <__lo0bits+0x48>
  40c476:	085b      	lsrs	r3, r3, #1
  40c478:	d101      	bne.n	40c47e <__lo0bits+0x46>
  40c47a:	2020      	movs	r0, #32
  40c47c:	4770      	bx	lr
  40c47e:	3201      	adds	r2, #1
  40c480:	6003      	str	r3, [r0, #0]
  40c482:	4610      	mov	r0, r2
  40c484:	4770      	bx	lr
  40c486:	2000      	movs	r0, #0
  40c488:	4770      	bx	lr
  40c48a:	085b      	lsrs	r3, r3, #1
  40c48c:	6003      	str	r3, [r0, #0]
  40c48e:	2001      	movs	r0, #1
  40c490:	4770      	bx	lr
  40c492:	bf00      	nop

0040c494 <__i2b>:
  40c494:	b510      	push	{r4, lr}
  40c496:	460c      	mov	r4, r1
  40c498:	2101      	movs	r1, #1
  40c49a:	f7ff ff3d 	bl	40c318 <_Balloc>
  40c49e:	2201      	movs	r2, #1
  40c4a0:	6144      	str	r4, [r0, #20]
  40c4a2:	6102      	str	r2, [r0, #16]
  40c4a4:	bd10      	pop	{r4, pc}
  40c4a6:	bf00      	nop

0040c4a8 <__multiply>:
  40c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c4ac:	690d      	ldr	r5, [r1, #16]
  40c4ae:	6917      	ldr	r7, [r2, #16]
  40c4b0:	42bd      	cmp	r5, r7
  40c4b2:	b083      	sub	sp, #12
  40c4b4:	460c      	mov	r4, r1
  40c4b6:	4616      	mov	r6, r2
  40c4b8:	da04      	bge.n	40c4c4 <__multiply+0x1c>
  40c4ba:	462a      	mov	r2, r5
  40c4bc:	4634      	mov	r4, r6
  40c4be:	463d      	mov	r5, r7
  40c4c0:	460e      	mov	r6, r1
  40c4c2:	4617      	mov	r7, r2
  40c4c4:	68a3      	ldr	r3, [r4, #8]
  40c4c6:	6861      	ldr	r1, [r4, #4]
  40c4c8:	eb05 0807 	add.w	r8, r5, r7
  40c4cc:	4598      	cmp	r8, r3
  40c4ce:	bfc8      	it	gt
  40c4d0:	3101      	addgt	r1, #1
  40c4d2:	f7ff ff21 	bl	40c318 <_Balloc>
  40c4d6:	f100 0c14 	add.w	ip, r0, #20
  40c4da:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  40c4de:	45cc      	cmp	ip, r9
  40c4e0:	9000      	str	r0, [sp, #0]
  40c4e2:	d205      	bcs.n	40c4f0 <__multiply+0x48>
  40c4e4:	4663      	mov	r3, ip
  40c4e6:	2100      	movs	r1, #0
  40c4e8:	f843 1b04 	str.w	r1, [r3], #4
  40c4ec:	4599      	cmp	r9, r3
  40c4ee:	d8fb      	bhi.n	40c4e8 <__multiply+0x40>
  40c4f0:	f106 0214 	add.w	r2, r6, #20
  40c4f4:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  40c4f8:	f104 0314 	add.w	r3, r4, #20
  40c4fc:	4552      	cmp	r2, sl
  40c4fe:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  40c502:	d254      	bcs.n	40c5ae <__multiply+0x106>
  40c504:	f8cd 9004 	str.w	r9, [sp, #4]
  40c508:	4699      	mov	r9, r3
  40c50a:	f852 3b04 	ldr.w	r3, [r2], #4
  40c50e:	fa1f fb83 	uxth.w	fp, r3
  40c512:	f1bb 0f00 	cmp.w	fp, #0
  40c516:	d020      	beq.n	40c55a <__multiply+0xb2>
  40c518:	2000      	movs	r0, #0
  40c51a:	464f      	mov	r7, r9
  40c51c:	4666      	mov	r6, ip
  40c51e:	4605      	mov	r5, r0
  40c520:	e000      	b.n	40c524 <__multiply+0x7c>
  40c522:	461e      	mov	r6, r3
  40c524:	f857 4b04 	ldr.w	r4, [r7], #4
  40c528:	6830      	ldr	r0, [r6, #0]
  40c52a:	b2a1      	uxth	r1, r4
  40c52c:	b283      	uxth	r3, r0
  40c52e:	fb0b 3101 	mla	r1, fp, r1, r3
  40c532:	0c24      	lsrs	r4, r4, #16
  40c534:	0c00      	lsrs	r0, r0, #16
  40c536:	194b      	adds	r3, r1, r5
  40c538:	fb0b 0004 	mla	r0, fp, r4, r0
  40c53c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  40c540:	b299      	uxth	r1, r3
  40c542:	4633      	mov	r3, r6
  40c544:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  40c548:	45be      	cmp	lr, r7
  40c54a:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40c54e:	f843 1b04 	str.w	r1, [r3], #4
  40c552:	d8e6      	bhi.n	40c522 <__multiply+0x7a>
  40c554:	6075      	str	r5, [r6, #4]
  40c556:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40c55a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40c55e:	d020      	beq.n	40c5a2 <__multiply+0xfa>
  40c560:	f8dc 3000 	ldr.w	r3, [ip]
  40c564:	4667      	mov	r7, ip
  40c566:	4618      	mov	r0, r3
  40c568:	464d      	mov	r5, r9
  40c56a:	2100      	movs	r1, #0
  40c56c:	e000      	b.n	40c570 <__multiply+0xc8>
  40c56e:	4637      	mov	r7, r6
  40c570:	882c      	ldrh	r4, [r5, #0]
  40c572:	0c00      	lsrs	r0, r0, #16
  40c574:	fb0b 0004 	mla	r0, fp, r4, r0
  40c578:	4401      	add	r1, r0
  40c57a:	b29c      	uxth	r4, r3
  40c57c:	463e      	mov	r6, r7
  40c57e:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40c582:	f846 3b04 	str.w	r3, [r6], #4
  40c586:	6878      	ldr	r0, [r7, #4]
  40c588:	f855 4b04 	ldr.w	r4, [r5], #4
  40c58c:	b283      	uxth	r3, r0
  40c58e:	0c24      	lsrs	r4, r4, #16
  40c590:	fb0b 3404 	mla	r4, fp, r4, r3
  40c594:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  40c598:	45ae      	cmp	lr, r5
  40c59a:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40c59e:	d8e6      	bhi.n	40c56e <__multiply+0xc6>
  40c5a0:	607b      	str	r3, [r7, #4]
  40c5a2:	4592      	cmp	sl, r2
  40c5a4:	f10c 0c04 	add.w	ip, ip, #4
  40c5a8:	d8af      	bhi.n	40c50a <__multiply+0x62>
  40c5aa:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40c5ae:	f1b8 0f00 	cmp.w	r8, #0
  40c5b2:	dd0b      	ble.n	40c5cc <__multiply+0x124>
  40c5b4:	f859 3c04 	ldr.w	r3, [r9, #-4]
  40c5b8:	f1a9 0904 	sub.w	r9, r9, #4
  40c5bc:	b11b      	cbz	r3, 40c5c6 <__multiply+0x11e>
  40c5be:	e005      	b.n	40c5cc <__multiply+0x124>
  40c5c0:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40c5c4:	b913      	cbnz	r3, 40c5cc <__multiply+0x124>
  40c5c6:	f1b8 0801 	subs.w	r8, r8, #1
  40c5ca:	d1f9      	bne.n	40c5c0 <__multiply+0x118>
  40c5cc:	9800      	ldr	r0, [sp, #0]
  40c5ce:	f8c0 8010 	str.w	r8, [r0, #16]
  40c5d2:	b003      	add	sp, #12
  40c5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040c5d8 <__pow5mult>:
  40c5d8:	f012 0303 	ands.w	r3, r2, #3
  40c5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c5e0:	4614      	mov	r4, r2
  40c5e2:	4607      	mov	r7, r0
  40c5e4:	d12e      	bne.n	40c644 <__pow5mult+0x6c>
  40c5e6:	460e      	mov	r6, r1
  40c5e8:	10a4      	asrs	r4, r4, #2
  40c5ea:	d01c      	beq.n	40c626 <__pow5mult+0x4e>
  40c5ec:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40c5ee:	b395      	cbz	r5, 40c656 <__pow5mult+0x7e>
  40c5f0:	07e3      	lsls	r3, r4, #31
  40c5f2:	f04f 0800 	mov.w	r8, #0
  40c5f6:	d406      	bmi.n	40c606 <__pow5mult+0x2e>
  40c5f8:	1064      	asrs	r4, r4, #1
  40c5fa:	d014      	beq.n	40c626 <__pow5mult+0x4e>
  40c5fc:	6828      	ldr	r0, [r5, #0]
  40c5fe:	b1a8      	cbz	r0, 40c62c <__pow5mult+0x54>
  40c600:	4605      	mov	r5, r0
  40c602:	07e3      	lsls	r3, r4, #31
  40c604:	d5f8      	bpl.n	40c5f8 <__pow5mult+0x20>
  40c606:	462a      	mov	r2, r5
  40c608:	4631      	mov	r1, r6
  40c60a:	4638      	mov	r0, r7
  40c60c:	f7ff ff4c 	bl	40c4a8 <__multiply>
  40c610:	b1b6      	cbz	r6, 40c640 <__pow5mult+0x68>
  40c612:	6872      	ldr	r2, [r6, #4]
  40c614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40c616:	1064      	asrs	r4, r4, #1
  40c618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c61c:	6031      	str	r1, [r6, #0]
  40c61e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c622:	4606      	mov	r6, r0
  40c624:	d1ea      	bne.n	40c5fc <__pow5mult+0x24>
  40c626:	4630      	mov	r0, r6
  40c628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c62c:	462a      	mov	r2, r5
  40c62e:	4629      	mov	r1, r5
  40c630:	4638      	mov	r0, r7
  40c632:	f7ff ff39 	bl	40c4a8 <__multiply>
  40c636:	6028      	str	r0, [r5, #0]
  40c638:	f8c0 8000 	str.w	r8, [r0]
  40c63c:	4605      	mov	r5, r0
  40c63e:	e7e0      	b.n	40c602 <__pow5mult+0x2a>
  40c640:	4606      	mov	r6, r0
  40c642:	e7d9      	b.n	40c5f8 <__pow5mult+0x20>
  40c644:	1e5a      	subs	r2, r3, #1
  40c646:	4d0b      	ldr	r5, [pc, #44]	; (40c674 <__pow5mult+0x9c>)
  40c648:	2300      	movs	r3, #0
  40c64a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40c64e:	f7ff fe93 	bl	40c378 <__multadd>
  40c652:	4606      	mov	r6, r0
  40c654:	e7c8      	b.n	40c5e8 <__pow5mult+0x10>
  40c656:	2101      	movs	r1, #1
  40c658:	4638      	mov	r0, r7
  40c65a:	f7ff fe5d 	bl	40c318 <_Balloc>
  40c65e:	f240 2171 	movw	r1, #625	; 0x271
  40c662:	2201      	movs	r2, #1
  40c664:	2300      	movs	r3, #0
  40c666:	6141      	str	r1, [r0, #20]
  40c668:	6102      	str	r2, [r0, #16]
  40c66a:	4605      	mov	r5, r0
  40c66c:	64b8      	str	r0, [r7, #72]	; 0x48
  40c66e:	6003      	str	r3, [r0, #0]
  40c670:	e7be      	b.n	40c5f0 <__pow5mult+0x18>
  40c672:	bf00      	nop
  40c674:	0040f940 	.word	0x0040f940

0040c678 <__lshift>:
  40c678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c67c:	4691      	mov	r9, r2
  40c67e:	690a      	ldr	r2, [r1, #16]
  40c680:	688b      	ldr	r3, [r1, #8]
  40c682:	ea4f 1469 	mov.w	r4, r9, asr #5
  40c686:	eb04 0802 	add.w	r8, r4, r2
  40c68a:	f108 0501 	add.w	r5, r8, #1
  40c68e:	429d      	cmp	r5, r3
  40c690:	460e      	mov	r6, r1
  40c692:	4682      	mov	sl, r0
  40c694:	6849      	ldr	r1, [r1, #4]
  40c696:	dd04      	ble.n	40c6a2 <__lshift+0x2a>
  40c698:	005b      	lsls	r3, r3, #1
  40c69a:	429d      	cmp	r5, r3
  40c69c:	f101 0101 	add.w	r1, r1, #1
  40c6a0:	dcfa      	bgt.n	40c698 <__lshift+0x20>
  40c6a2:	4650      	mov	r0, sl
  40c6a4:	f7ff fe38 	bl	40c318 <_Balloc>
  40c6a8:	2c00      	cmp	r4, #0
  40c6aa:	f100 0214 	add.w	r2, r0, #20
  40c6ae:	dd38      	ble.n	40c722 <__lshift+0xaa>
  40c6b0:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40c6b4:	2100      	movs	r1, #0
  40c6b6:	f842 1b04 	str.w	r1, [r2], #4
  40c6ba:	4293      	cmp	r3, r2
  40c6bc:	d1fb      	bne.n	40c6b6 <__lshift+0x3e>
  40c6be:	6934      	ldr	r4, [r6, #16]
  40c6c0:	f106 0114 	add.w	r1, r6, #20
  40c6c4:	f019 091f 	ands.w	r9, r9, #31
  40c6c8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40c6cc:	d021      	beq.n	40c712 <__lshift+0x9a>
  40c6ce:	f1c9 0220 	rsb	r2, r9, #32
  40c6d2:	2400      	movs	r4, #0
  40c6d4:	680f      	ldr	r7, [r1, #0]
  40c6d6:	fa07 fc09 	lsl.w	ip, r7, r9
  40c6da:	ea4c 0404 	orr.w	r4, ip, r4
  40c6de:	469c      	mov	ip, r3
  40c6e0:	f843 4b04 	str.w	r4, [r3], #4
  40c6e4:	f851 4b04 	ldr.w	r4, [r1], #4
  40c6e8:	458e      	cmp	lr, r1
  40c6ea:	fa24 f402 	lsr.w	r4, r4, r2
  40c6ee:	d8f1      	bhi.n	40c6d4 <__lshift+0x5c>
  40c6f0:	f8cc 4004 	str.w	r4, [ip, #4]
  40c6f4:	b10c      	cbz	r4, 40c6fa <__lshift+0x82>
  40c6f6:	f108 0502 	add.w	r5, r8, #2
  40c6fa:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  40c6fe:	6872      	ldr	r2, [r6, #4]
  40c700:	3d01      	subs	r5, #1
  40c702:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c706:	6105      	str	r5, [r0, #16]
  40c708:	6031      	str	r1, [r6, #0]
  40c70a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c712:	3b04      	subs	r3, #4
  40c714:	f851 2b04 	ldr.w	r2, [r1], #4
  40c718:	f843 2f04 	str.w	r2, [r3, #4]!
  40c71c:	458e      	cmp	lr, r1
  40c71e:	d8f9      	bhi.n	40c714 <__lshift+0x9c>
  40c720:	e7eb      	b.n	40c6fa <__lshift+0x82>
  40c722:	4613      	mov	r3, r2
  40c724:	e7cb      	b.n	40c6be <__lshift+0x46>
  40c726:	bf00      	nop

0040c728 <__mcmp>:
  40c728:	6902      	ldr	r2, [r0, #16]
  40c72a:	690b      	ldr	r3, [r1, #16]
  40c72c:	1ad2      	subs	r2, r2, r3
  40c72e:	d112      	bne.n	40c756 <__mcmp+0x2e>
  40c730:	009b      	lsls	r3, r3, #2
  40c732:	3014      	adds	r0, #20
  40c734:	3114      	adds	r1, #20
  40c736:	4419      	add	r1, r3
  40c738:	b410      	push	{r4}
  40c73a:	4403      	add	r3, r0
  40c73c:	e001      	b.n	40c742 <__mcmp+0x1a>
  40c73e:	4298      	cmp	r0, r3
  40c740:	d20b      	bcs.n	40c75a <__mcmp+0x32>
  40c742:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40c746:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40c74a:	4294      	cmp	r4, r2
  40c74c:	d0f7      	beq.n	40c73e <__mcmp+0x16>
  40c74e:	d307      	bcc.n	40c760 <__mcmp+0x38>
  40c750:	2001      	movs	r0, #1
  40c752:	bc10      	pop	{r4}
  40c754:	4770      	bx	lr
  40c756:	4610      	mov	r0, r2
  40c758:	4770      	bx	lr
  40c75a:	2000      	movs	r0, #0
  40c75c:	bc10      	pop	{r4}
  40c75e:	4770      	bx	lr
  40c760:	f04f 30ff 	mov.w	r0, #4294967295
  40c764:	e7f5      	b.n	40c752 <__mcmp+0x2a>
  40c766:	bf00      	nop

0040c768 <__mdiff>:
  40c768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c76c:	690b      	ldr	r3, [r1, #16]
  40c76e:	460f      	mov	r7, r1
  40c770:	6911      	ldr	r1, [r2, #16]
  40c772:	1a5b      	subs	r3, r3, r1
  40c774:	2b00      	cmp	r3, #0
  40c776:	4690      	mov	r8, r2
  40c778:	d117      	bne.n	40c7aa <__mdiff+0x42>
  40c77a:	0089      	lsls	r1, r1, #2
  40c77c:	f107 0214 	add.w	r2, r7, #20
  40c780:	f108 0514 	add.w	r5, r8, #20
  40c784:	1853      	adds	r3, r2, r1
  40c786:	4429      	add	r1, r5
  40c788:	e001      	b.n	40c78e <__mdiff+0x26>
  40c78a:	429a      	cmp	r2, r3
  40c78c:	d25e      	bcs.n	40c84c <__mdiff+0xe4>
  40c78e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40c792:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40c796:	42a6      	cmp	r6, r4
  40c798:	d0f7      	beq.n	40c78a <__mdiff+0x22>
  40c79a:	d260      	bcs.n	40c85e <__mdiff+0xf6>
  40c79c:	463b      	mov	r3, r7
  40c79e:	4614      	mov	r4, r2
  40c7a0:	4647      	mov	r7, r8
  40c7a2:	f04f 0901 	mov.w	r9, #1
  40c7a6:	4698      	mov	r8, r3
  40c7a8:	e006      	b.n	40c7b8 <__mdiff+0x50>
  40c7aa:	db5d      	blt.n	40c868 <__mdiff+0x100>
  40c7ac:	f107 0514 	add.w	r5, r7, #20
  40c7b0:	f102 0414 	add.w	r4, r2, #20
  40c7b4:	f04f 0900 	mov.w	r9, #0
  40c7b8:	6879      	ldr	r1, [r7, #4]
  40c7ba:	f7ff fdad 	bl	40c318 <_Balloc>
  40c7be:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40c7c2:	693e      	ldr	r6, [r7, #16]
  40c7c4:	f8c0 900c 	str.w	r9, [r0, #12]
  40c7c8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40c7cc:	46a6      	mov	lr, r4
  40c7ce:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40c7d2:	f100 0414 	add.w	r4, r0, #20
  40c7d6:	2300      	movs	r3, #0
  40c7d8:	f85e 1b04 	ldr.w	r1, [lr], #4
  40c7dc:	f855 8b04 	ldr.w	r8, [r5], #4
  40c7e0:	b28a      	uxth	r2, r1
  40c7e2:	fa13 f388 	uxtah	r3, r3, r8
  40c7e6:	0c09      	lsrs	r1, r1, #16
  40c7e8:	1a9a      	subs	r2, r3, r2
  40c7ea:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40c7ee:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40c7f2:	b292      	uxth	r2, r2
  40c7f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40c7f8:	45f4      	cmp	ip, lr
  40c7fa:	f844 2b04 	str.w	r2, [r4], #4
  40c7fe:	ea4f 4323 	mov.w	r3, r3, asr #16
  40c802:	d8e9      	bhi.n	40c7d8 <__mdiff+0x70>
  40c804:	42af      	cmp	r7, r5
  40c806:	d917      	bls.n	40c838 <__mdiff+0xd0>
  40c808:	46a4      	mov	ip, r4
  40c80a:	4629      	mov	r1, r5
  40c80c:	f851 eb04 	ldr.w	lr, [r1], #4
  40c810:	fa13 f28e 	uxtah	r2, r3, lr
  40c814:	1413      	asrs	r3, r2, #16
  40c816:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40c81a:	b292      	uxth	r2, r2
  40c81c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40c820:	428f      	cmp	r7, r1
  40c822:	f84c 2b04 	str.w	r2, [ip], #4
  40c826:	ea4f 4323 	mov.w	r3, r3, asr #16
  40c82a:	d8ef      	bhi.n	40c80c <__mdiff+0xa4>
  40c82c:	43ed      	mvns	r5, r5
  40c82e:	443d      	add	r5, r7
  40c830:	f025 0503 	bic.w	r5, r5, #3
  40c834:	3504      	adds	r5, #4
  40c836:	442c      	add	r4, r5
  40c838:	3c04      	subs	r4, #4
  40c83a:	b922      	cbnz	r2, 40c846 <__mdiff+0xde>
  40c83c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40c840:	3e01      	subs	r6, #1
  40c842:	2b00      	cmp	r3, #0
  40c844:	d0fa      	beq.n	40c83c <__mdiff+0xd4>
  40c846:	6106      	str	r6, [r0, #16]
  40c848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c84c:	2100      	movs	r1, #0
  40c84e:	f7ff fd63 	bl	40c318 <_Balloc>
  40c852:	2201      	movs	r2, #1
  40c854:	2300      	movs	r3, #0
  40c856:	6102      	str	r2, [r0, #16]
  40c858:	6143      	str	r3, [r0, #20]
  40c85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c85e:	462c      	mov	r4, r5
  40c860:	f04f 0900 	mov.w	r9, #0
  40c864:	4615      	mov	r5, r2
  40c866:	e7a7      	b.n	40c7b8 <__mdiff+0x50>
  40c868:	463b      	mov	r3, r7
  40c86a:	f107 0414 	add.w	r4, r7, #20
  40c86e:	f108 0514 	add.w	r5, r8, #20
  40c872:	4647      	mov	r7, r8
  40c874:	f04f 0901 	mov.w	r9, #1
  40c878:	4698      	mov	r8, r3
  40c87a:	e79d      	b.n	40c7b8 <__mdiff+0x50>

0040c87c <__d2b>:
  40c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c880:	b082      	sub	sp, #8
  40c882:	2101      	movs	r1, #1
  40c884:	461c      	mov	r4, r3
  40c886:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40c88a:	4615      	mov	r5, r2
  40c88c:	9e08      	ldr	r6, [sp, #32]
  40c88e:	f7ff fd43 	bl	40c318 <_Balloc>
  40c892:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40c896:	4680      	mov	r8, r0
  40c898:	b10f      	cbz	r7, 40c89e <__d2b+0x22>
  40c89a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40c89e:	9401      	str	r4, [sp, #4]
  40c8a0:	b31d      	cbz	r5, 40c8ea <__d2b+0x6e>
  40c8a2:	a802      	add	r0, sp, #8
  40c8a4:	f840 5d08 	str.w	r5, [r0, #-8]!
  40c8a8:	f7ff fdc6 	bl	40c438 <__lo0bits>
  40c8ac:	2800      	cmp	r0, #0
  40c8ae:	d134      	bne.n	40c91a <__d2b+0x9e>
  40c8b0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40c8b4:	f8c8 2014 	str.w	r2, [r8, #20]
  40c8b8:	2b00      	cmp	r3, #0
  40c8ba:	bf0c      	ite	eq
  40c8bc:	2101      	moveq	r1, #1
  40c8be:	2102      	movne	r1, #2
  40c8c0:	f8c8 3018 	str.w	r3, [r8, #24]
  40c8c4:	f8c8 1010 	str.w	r1, [r8, #16]
  40c8c8:	b9df      	cbnz	r7, 40c902 <__d2b+0x86>
  40c8ca:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40c8ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40c8d2:	6030      	str	r0, [r6, #0]
  40c8d4:	6918      	ldr	r0, [r3, #16]
  40c8d6:	f7ff fd8f 	bl	40c3f8 <__hi0bits>
  40c8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c8dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40c8e0:	6018      	str	r0, [r3, #0]
  40c8e2:	4640      	mov	r0, r8
  40c8e4:	b002      	add	sp, #8
  40c8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c8ea:	a801      	add	r0, sp, #4
  40c8ec:	f7ff fda4 	bl	40c438 <__lo0bits>
  40c8f0:	9b01      	ldr	r3, [sp, #4]
  40c8f2:	f8c8 3014 	str.w	r3, [r8, #20]
  40c8f6:	2101      	movs	r1, #1
  40c8f8:	3020      	adds	r0, #32
  40c8fa:	f8c8 1010 	str.w	r1, [r8, #16]
  40c8fe:	2f00      	cmp	r7, #0
  40c900:	d0e3      	beq.n	40c8ca <__d2b+0x4e>
  40c902:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c904:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40c908:	4407      	add	r7, r0
  40c90a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40c90e:	6037      	str	r7, [r6, #0]
  40c910:	6018      	str	r0, [r3, #0]
  40c912:	4640      	mov	r0, r8
  40c914:	b002      	add	sp, #8
  40c916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c91a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40c91e:	f1c0 0120 	rsb	r1, r0, #32
  40c922:	fa03 f101 	lsl.w	r1, r3, r1
  40c926:	430a      	orrs	r2, r1
  40c928:	40c3      	lsrs	r3, r0
  40c92a:	9301      	str	r3, [sp, #4]
  40c92c:	f8c8 2014 	str.w	r2, [r8, #20]
  40c930:	e7c2      	b.n	40c8b8 <__d2b+0x3c>
  40c932:	bf00      	nop

0040c934 <_realloc_r>:
  40c934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c938:	4617      	mov	r7, r2
  40c93a:	b083      	sub	sp, #12
  40c93c:	2900      	cmp	r1, #0
  40c93e:	f000 80c1 	beq.w	40cac4 <_realloc_r+0x190>
  40c942:	460e      	mov	r6, r1
  40c944:	4681      	mov	r9, r0
  40c946:	f107 050b 	add.w	r5, r7, #11
  40c94a:	f7fb fa37 	bl	407dbc <__malloc_lock>
  40c94e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  40c952:	2d16      	cmp	r5, #22
  40c954:	f02e 0403 	bic.w	r4, lr, #3
  40c958:	f1a6 0808 	sub.w	r8, r6, #8
  40c95c:	d840      	bhi.n	40c9e0 <_realloc_r+0xac>
  40c95e:	2210      	movs	r2, #16
  40c960:	4615      	mov	r5, r2
  40c962:	42af      	cmp	r7, r5
  40c964:	d841      	bhi.n	40c9ea <_realloc_r+0xb6>
  40c966:	4294      	cmp	r4, r2
  40c968:	da75      	bge.n	40ca56 <_realloc_r+0x122>
  40c96a:	4bc9      	ldr	r3, [pc, #804]	; (40cc90 <_realloc_r+0x35c>)
  40c96c:	6899      	ldr	r1, [r3, #8]
  40c96e:	eb08 0004 	add.w	r0, r8, r4
  40c972:	4288      	cmp	r0, r1
  40c974:	6841      	ldr	r1, [r0, #4]
  40c976:	f000 80d9 	beq.w	40cb2c <_realloc_r+0x1f8>
  40c97a:	f021 0301 	bic.w	r3, r1, #1
  40c97e:	4403      	add	r3, r0
  40c980:	685b      	ldr	r3, [r3, #4]
  40c982:	07db      	lsls	r3, r3, #31
  40c984:	d57d      	bpl.n	40ca82 <_realloc_r+0x14e>
  40c986:	f01e 0f01 	tst.w	lr, #1
  40c98a:	d035      	beq.n	40c9f8 <_realloc_r+0xc4>
  40c98c:	4639      	mov	r1, r7
  40c98e:	4648      	mov	r0, r9
  40c990:	f7fa fe74 	bl	40767c <_malloc_r>
  40c994:	4607      	mov	r7, r0
  40c996:	b1e0      	cbz	r0, 40c9d2 <_realloc_r+0x9e>
  40c998:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40c99c:	f023 0301 	bic.w	r3, r3, #1
  40c9a0:	4443      	add	r3, r8
  40c9a2:	f1a0 0208 	sub.w	r2, r0, #8
  40c9a6:	429a      	cmp	r2, r3
  40c9a8:	f000 8144 	beq.w	40cc34 <_realloc_r+0x300>
  40c9ac:	1f22      	subs	r2, r4, #4
  40c9ae:	2a24      	cmp	r2, #36	; 0x24
  40c9b0:	f200 8131 	bhi.w	40cc16 <_realloc_r+0x2e2>
  40c9b4:	2a13      	cmp	r2, #19
  40c9b6:	f200 8104 	bhi.w	40cbc2 <_realloc_r+0x28e>
  40c9ba:	4603      	mov	r3, r0
  40c9bc:	4632      	mov	r2, r6
  40c9be:	6811      	ldr	r1, [r2, #0]
  40c9c0:	6019      	str	r1, [r3, #0]
  40c9c2:	6851      	ldr	r1, [r2, #4]
  40c9c4:	6059      	str	r1, [r3, #4]
  40c9c6:	6892      	ldr	r2, [r2, #8]
  40c9c8:	609a      	str	r2, [r3, #8]
  40c9ca:	4631      	mov	r1, r6
  40c9cc:	4648      	mov	r0, r9
  40c9ce:	f7ff f8d9 	bl	40bb84 <_free_r>
  40c9d2:	4648      	mov	r0, r9
  40c9d4:	f7fb f9f4 	bl	407dc0 <__malloc_unlock>
  40c9d8:	4638      	mov	r0, r7
  40c9da:	b003      	add	sp, #12
  40c9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9e0:	f025 0507 	bic.w	r5, r5, #7
  40c9e4:	2d00      	cmp	r5, #0
  40c9e6:	462a      	mov	r2, r5
  40c9e8:	dabb      	bge.n	40c962 <_realloc_r+0x2e>
  40c9ea:	230c      	movs	r3, #12
  40c9ec:	2000      	movs	r0, #0
  40c9ee:	f8c9 3000 	str.w	r3, [r9]
  40c9f2:	b003      	add	sp, #12
  40c9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c9f8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40c9fc:	ebc3 0a08 	rsb	sl, r3, r8
  40ca00:	f8da 3004 	ldr.w	r3, [sl, #4]
  40ca04:	f023 0c03 	bic.w	ip, r3, #3
  40ca08:	eb04 030c 	add.w	r3, r4, ip
  40ca0c:	4293      	cmp	r3, r2
  40ca0e:	dbbd      	blt.n	40c98c <_realloc_r+0x58>
  40ca10:	4657      	mov	r7, sl
  40ca12:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ca16:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40ca1a:	1f22      	subs	r2, r4, #4
  40ca1c:	2a24      	cmp	r2, #36	; 0x24
  40ca1e:	60c1      	str	r1, [r0, #12]
  40ca20:	6088      	str	r0, [r1, #8]
  40ca22:	f200 8117 	bhi.w	40cc54 <_realloc_r+0x320>
  40ca26:	2a13      	cmp	r2, #19
  40ca28:	f240 8112 	bls.w	40cc50 <_realloc_r+0x31c>
  40ca2c:	6831      	ldr	r1, [r6, #0]
  40ca2e:	f8ca 1008 	str.w	r1, [sl, #8]
  40ca32:	6871      	ldr	r1, [r6, #4]
  40ca34:	f8ca 100c 	str.w	r1, [sl, #12]
  40ca38:	2a1b      	cmp	r2, #27
  40ca3a:	f200 812b 	bhi.w	40cc94 <_realloc_r+0x360>
  40ca3e:	3608      	adds	r6, #8
  40ca40:	f10a 0210 	add.w	r2, sl, #16
  40ca44:	6831      	ldr	r1, [r6, #0]
  40ca46:	6011      	str	r1, [r2, #0]
  40ca48:	6871      	ldr	r1, [r6, #4]
  40ca4a:	6051      	str	r1, [r2, #4]
  40ca4c:	68b1      	ldr	r1, [r6, #8]
  40ca4e:	6091      	str	r1, [r2, #8]
  40ca50:	463e      	mov	r6, r7
  40ca52:	461c      	mov	r4, r3
  40ca54:	46d0      	mov	r8, sl
  40ca56:	1b63      	subs	r3, r4, r5
  40ca58:	2b0f      	cmp	r3, #15
  40ca5a:	d81d      	bhi.n	40ca98 <_realloc_r+0x164>
  40ca5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40ca60:	f003 0301 	and.w	r3, r3, #1
  40ca64:	4323      	orrs	r3, r4
  40ca66:	4444      	add	r4, r8
  40ca68:	f8c8 3004 	str.w	r3, [r8, #4]
  40ca6c:	6863      	ldr	r3, [r4, #4]
  40ca6e:	f043 0301 	orr.w	r3, r3, #1
  40ca72:	6063      	str	r3, [r4, #4]
  40ca74:	4648      	mov	r0, r9
  40ca76:	f7fb f9a3 	bl	407dc0 <__malloc_unlock>
  40ca7a:	4630      	mov	r0, r6
  40ca7c:	b003      	add	sp, #12
  40ca7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ca82:	f021 0103 	bic.w	r1, r1, #3
  40ca86:	4421      	add	r1, r4
  40ca88:	4291      	cmp	r1, r2
  40ca8a:	db21      	blt.n	40cad0 <_realloc_r+0x19c>
  40ca8c:	68c3      	ldr	r3, [r0, #12]
  40ca8e:	6882      	ldr	r2, [r0, #8]
  40ca90:	460c      	mov	r4, r1
  40ca92:	60d3      	str	r3, [r2, #12]
  40ca94:	609a      	str	r2, [r3, #8]
  40ca96:	e7de      	b.n	40ca56 <_realloc_r+0x122>
  40ca98:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40ca9c:	eb08 0105 	add.w	r1, r8, r5
  40caa0:	f002 0201 	and.w	r2, r2, #1
  40caa4:	4315      	orrs	r5, r2
  40caa6:	f043 0201 	orr.w	r2, r3, #1
  40caaa:	440b      	add	r3, r1
  40caac:	f8c8 5004 	str.w	r5, [r8, #4]
  40cab0:	604a      	str	r2, [r1, #4]
  40cab2:	685a      	ldr	r2, [r3, #4]
  40cab4:	f042 0201 	orr.w	r2, r2, #1
  40cab8:	3108      	adds	r1, #8
  40caba:	605a      	str	r2, [r3, #4]
  40cabc:	4648      	mov	r0, r9
  40cabe:	f7ff f861 	bl	40bb84 <_free_r>
  40cac2:	e7d7      	b.n	40ca74 <_realloc_r+0x140>
  40cac4:	4611      	mov	r1, r2
  40cac6:	b003      	add	sp, #12
  40cac8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cacc:	f7fa bdd6 	b.w	40767c <_malloc_r>
  40cad0:	f01e 0f01 	tst.w	lr, #1
  40cad4:	f47f af5a 	bne.w	40c98c <_realloc_r+0x58>
  40cad8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40cadc:	ebc3 0a08 	rsb	sl, r3, r8
  40cae0:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cae4:	f023 0c03 	bic.w	ip, r3, #3
  40cae8:	eb01 0e0c 	add.w	lr, r1, ip
  40caec:	4596      	cmp	lr, r2
  40caee:	db8b      	blt.n	40ca08 <_realloc_r+0xd4>
  40caf0:	68c3      	ldr	r3, [r0, #12]
  40caf2:	6882      	ldr	r2, [r0, #8]
  40caf4:	4657      	mov	r7, sl
  40caf6:	60d3      	str	r3, [r2, #12]
  40caf8:	609a      	str	r2, [r3, #8]
  40cafa:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40cafe:	f8da 300c 	ldr.w	r3, [sl, #12]
  40cb02:	60cb      	str	r3, [r1, #12]
  40cb04:	1f22      	subs	r2, r4, #4
  40cb06:	2a24      	cmp	r2, #36	; 0x24
  40cb08:	6099      	str	r1, [r3, #8]
  40cb0a:	f200 8099 	bhi.w	40cc40 <_realloc_r+0x30c>
  40cb0e:	2a13      	cmp	r2, #19
  40cb10:	d962      	bls.n	40cbd8 <_realloc_r+0x2a4>
  40cb12:	6833      	ldr	r3, [r6, #0]
  40cb14:	f8ca 3008 	str.w	r3, [sl, #8]
  40cb18:	6873      	ldr	r3, [r6, #4]
  40cb1a:	f8ca 300c 	str.w	r3, [sl, #12]
  40cb1e:	2a1b      	cmp	r2, #27
  40cb20:	f200 80a0 	bhi.w	40cc64 <_realloc_r+0x330>
  40cb24:	3608      	adds	r6, #8
  40cb26:	f10a 0310 	add.w	r3, sl, #16
  40cb2a:	e056      	b.n	40cbda <_realloc_r+0x2a6>
  40cb2c:	f021 0b03 	bic.w	fp, r1, #3
  40cb30:	44a3      	add	fp, r4
  40cb32:	f105 0010 	add.w	r0, r5, #16
  40cb36:	4583      	cmp	fp, r0
  40cb38:	da59      	bge.n	40cbee <_realloc_r+0x2ba>
  40cb3a:	f01e 0f01 	tst.w	lr, #1
  40cb3e:	f47f af25 	bne.w	40c98c <_realloc_r+0x58>
  40cb42:	f856 1c08 	ldr.w	r1, [r6, #-8]
  40cb46:	ebc1 0a08 	rsb	sl, r1, r8
  40cb4a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40cb4e:	f021 0c03 	bic.w	ip, r1, #3
  40cb52:	44e3      	add	fp, ip
  40cb54:	4558      	cmp	r0, fp
  40cb56:	f73f af57 	bgt.w	40ca08 <_realloc_r+0xd4>
  40cb5a:	4657      	mov	r7, sl
  40cb5c:	f8da 100c 	ldr.w	r1, [sl, #12]
  40cb60:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40cb64:	1f22      	subs	r2, r4, #4
  40cb66:	2a24      	cmp	r2, #36	; 0x24
  40cb68:	60c1      	str	r1, [r0, #12]
  40cb6a:	6088      	str	r0, [r1, #8]
  40cb6c:	f200 80b4 	bhi.w	40ccd8 <_realloc_r+0x3a4>
  40cb70:	2a13      	cmp	r2, #19
  40cb72:	f240 80a5 	bls.w	40ccc0 <_realloc_r+0x38c>
  40cb76:	6831      	ldr	r1, [r6, #0]
  40cb78:	f8ca 1008 	str.w	r1, [sl, #8]
  40cb7c:	6871      	ldr	r1, [r6, #4]
  40cb7e:	f8ca 100c 	str.w	r1, [sl, #12]
  40cb82:	2a1b      	cmp	r2, #27
  40cb84:	f200 80af 	bhi.w	40cce6 <_realloc_r+0x3b2>
  40cb88:	3608      	adds	r6, #8
  40cb8a:	f10a 0210 	add.w	r2, sl, #16
  40cb8e:	6831      	ldr	r1, [r6, #0]
  40cb90:	6011      	str	r1, [r2, #0]
  40cb92:	6871      	ldr	r1, [r6, #4]
  40cb94:	6051      	str	r1, [r2, #4]
  40cb96:	68b1      	ldr	r1, [r6, #8]
  40cb98:	6091      	str	r1, [r2, #8]
  40cb9a:	eb0a 0105 	add.w	r1, sl, r5
  40cb9e:	ebc5 020b 	rsb	r2, r5, fp
  40cba2:	f042 0201 	orr.w	r2, r2, #1
  40cba6:	6099      	str	r1, [r3, #8]
  40cba8:	604a      	str	r2, [r1, #4]
  40cbaa:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cbae:	f003 0301 	and.w	r3, r3, #1
  40cbb2:	431d      	orrs	r5, r3
  40cbb4:	4648      	mov	r0, r9
  40cbb6:	f8ca 5004 	str.w	r5, [sl, #4]
  40cbba:	f7fb f901 	bl	407dc0 <__malloc_unlock>
  40cbbe:	4638      	mov	r0, r7
  40cbc0:	e75c      	b.n	40ca7c <_realloc_r+0x148>
  40cbc2:	6833      	ldr	r3, [r6, #0]
  40cbc4:	6003      	str	r3, [r0, #0]
  40cbc6:	6873      	ldr	r3, [r6, #4]
  40cbc8:	6043      	str	r3, [r0, #4]
  40cbca:	2a1b      	cmp	r2, #27
  40cbcc:	d827      	bhi.n	40cc1e <_realloc_r+0x2ea>
  40cbce:	f100 0308 	add.w	r3, r0, #8
  40cbd2:	f106 0208 	add.w	r2, r6, #8
  40cbd6:	e6f2      	b.n	40c9be <_realloc_r+0x8a>
  40cbd8:	463b      	mov	r3, r7
  40cbda:	6832      	ldr	r2, [r6, #0]
  40cbdc:	601a      	str	r2, [r3, #0]
  40cbde:	6872      	ldr	r2, [r6, #4]
  40cbe0:	605a      	str	r2, [r3, #4]
  40cbe2:	68b2      	ldr	r2, [r6, #8]
  40cbe4:	609a      	str	r2, [r3, #8]
  40cbe6:	463e      	mov	r6, r7
  40cbe8:	4674      	mov	r4, lr
  40cbea:	46d0      	mov	r8, sl
  40cbec:	e733      	b.n	40ca56 <_realloc_r+0x122>
  40cbee:	eb08 0105 	add.w	r1, r8, r5
  40cbf2:	ebc5 0b0b 	rsb	fp, r5, fp
  40cbf6:	f04b 0201 	orr.w	r2, fp, #1
  40cbfa:	6099      	str	r1, [r3, #8]
  40cbfc:	604a      	str	r2, [r1, #4]
  40cbfe:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40cc02:	f003 0301 	and.w	r3, r3, #1
  40cc06:	431d      	orrs	r5, r3
  40cc08:	4648      	mov	r0, r9
  40cc0a:	f846 5c04 	str.w	r5, [r6, #-4]
  40cc0e:	f7fb f8d7 	bl	407dc0 <__malloc_unlock>
  40cc12:	4630      	mov	r0, r6
  40cc14:	e732      	b.n	40ca7c <_realloc_r+0x148>
  40cc16:	4631      	mov	r1, r6
  40cc18:	f7ff fb1a 	bl	40c250 <memmove>
  40cc1c:	e6d5      	b.n	40c9ca <_realloc_r+0x96>
  40cc1e:	68b3      	ldr	r3, [r6, #8]
  40cc20:	6083      	str	r3, [r0, #8]
  40cc22:	68f3      	ldr	r3, [r6, #12]
  40cc24:	60c3      	str	r3, [r0, #12]
  40cc26:	2a24      	cmp	r2, #36	; 0x24
  40cc28:	d028      	beq.n	40cc7c <_realloc_r+0x348>
  40cc2a:	f100 0310 	add.w	r3, r0, #16
  40cc2e:	f106 0210 	add.w	r2, r6, #16
  40cc32:	e6c4      	b.n	40c9be <_realloc_r+0x8a>
  40cc34:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40cc38:	f023 0303 	bic.w	r3, r3, #3
  40cc3c:	441c      	add	r4, r3
  40cc3e:	e70a      	b.n	40ca56 <_realloc_r+0x122>
  40cc40:	4631      	mov	r1, r6
  40cc42:	4638      	mov	r0, r7
  40cc44:	4674      	mov	r4, lr
  40cc46:	46d0      	mov	r8, sl
  40cc48:	f7ff fb02 	bl	40c250 <memmove>
  40cc4c:	463e      	mov	r6, r7
  40cc4e:	e702      	b.n	40ca56 <_realloc_r+0x122>
  40cc50:	463a      	mov	r2, r7
  40cc52:	e6f7      	b.n	40ca44 <_realloc_r+0x110>
  40cc54:	4631      	mov	r1, r6
  40cc56:	4638      	mov	r0, r7
  40cc58:	461c      	mov	r4, r3
  40cc5a:	46d0      	mov	r8, sl
  40cc5c:	f7ff faf8 	bl	40c250 <memmove>
  40cc60:	463e      	mov	r6, r7
  40cc62:	e6f8      	b.n	40ca56 <_realloc_r+0x122>
  40cc64:	68b3      	ldr	r3, [r6, #8]
  40cc66:	f8ca 3010 	str.w	r3, [sl, #16]
  40cc6a:	68f3      	ldr	r3, [r6, #12]
  40cc6c:	f8ca 3014 	str.w	r3, [sl, #20]
  40cc70:	2a24      	cmp	r2, #36	; 0x24
  40cc72:	d01b      	beq.n	40ccac <_realloc_r+0x378>
  40cc74:	3610      	adds	r6, #16
  40cc76:	f10a 0318 	add.w	r3, sl, #24
  40cc7a:	e7ae      	b.n	40cbda <_realloc_r+0x2a6>
  40cc7c:	6933      	ldr	r3, [r6, #16]
  40cc7e:	6103      	str	r3, [r0, #16]
  40cc80:	6973      	ldr	r3, [r6, #20]
  40cc82:	6143      	str	r3, [r0, #20]
  40cc84:	f106 0218 	add.w	r2, r6, #24
  40cc88:	f100 0318 	add.w	r3, r0, #24
  40cc8c:	e697      	b.n	40c9be <_realloc_r+0x8a>
  40cc8e:	bf00      	nop
  40cc90:	20400474 	.word	0x20400474
  40cc94:	68b1      	ldr	r1, [r6, #8]
  40cc96:	f8ca 1010 	str.w	r1, [sl, #16]
  40cc9a:	68f1      	ldr	r1, [r6, #12]
  40cc9c:	f8ca 1014 	str.w	r1, [sl, #20]
  40cca0:	2a24      	cmp	r2, #36	; 0x24
  40cca2:	d00f      	beq.n	40ccc4 <_realloc_r+0x390>
  40cca4:	3610      	adds	r6, #16
  40cca6:	f10a 0218 	add.w	r2, sl, #24
  40ccaa:	e6cb      	b.n	40ca44 <_realloc_r+0x110>
  40ccac:	6933      	ldr	r3, [r6, #16]
  40ccae:	f8ca 3018 	str.w	r3, [sl, #24]
  40ccb2:	6973      	ldr	r3, [r6, #20]
  40ccb4:	f8ca 301c 	str.w	r3, [sl, #28]
  40ccb8:	3618      	adds	r6, #24
  40ccba:	f10a 0320 	add.w	r3, sl, #32
  40ccbe:	e78c      	b.n	40cbda <_realloc_r+0x2a6>
  40ccc0:	463a      	mov	r2, r7
  40ccc2:	e764      	b.n	40cb8e <_realloc_r+0x25a>
  40ccc4:	6932      	ldr	r2, [r6, #16]
  40ccc6:	f8ca 2018 	str.w	r2, [sl, #24]
  40ccca:	6972      	ldr	r2, [r6, #20]
  40cccc:	f8ca 201c 	str.w	r2, [sl, #28]
  40ccd0:	3618      	adds	r6, #24
  40ccd2:	f10a 0220 	add.w	r2, sl, #32
  40ccd6:	e6b5      	b.n	40ca44 <_realloc_r+0x110>
  40ccd8:	4631      	mov	r1, r6
  40ccda:	4638      	mov	r0, r7
  40ccdc:	9301      	str	r3, [sp, #4]
  40ccde:	f7ff fab7 	bl	40c250 <memmove>
  40cce2:	9b01      	ldr	r3, [sp, #4]
  40cce4:	e759      	b.n	40cb9a <_realloc_r+0x266>
  40cce6:	68b1      	ldr	r1, [r6, #8]
  40cce8:	f8ca 1010 	str.w	r1, [sl, #16]
  40ccec:	68f1      	ldr	r1, [r6, #12]
  40ccee:	f8ca 1014 	str.w	r1, [sl, #20]
  40ccf2:	2a24      	cmp	r2, #36	; 0x24
  40ccf4:	d003      	beq.n	40ccfe <_realloc_r+0x3ca>
  40ccf6:	3610      	adds	r6, #16
  40ccf8:	f10a 0218 	add.w	r2, sl, #24
  40ccfc:	e747      	b.n	40cb8e <_realloc_r+0x25a>
  40ccfe:	6932      	ldr	r2, [r6, #16]
  40cd00:	f8ca 2018 	str.w	r2, [sl, #24]
  40cd04:	6972      	ldr	r2, [r6, #20]
  40cd06:	f8ca 201c 	str.w	r2, [sl, #28]
  40cd0a:	3618      	adds	r6, #24
  40cd0c:	f10a 0220 	add.w	r2, sl, #32
  40cd10:	e73d      	b.n	40cb8e <_realloc_r+0x25a>
  40cd12:	bf00      	nop

0040cd14 <__sread>:
  40cd14:	b510      	push	{r4, lr}
  40cd16:	460c      	mov	r4, r1
  40cd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cd1c:	f000 fa74 	bl	40d208 <_read_r>
  40cd20:	2800      	cmp	r0, #0
  40cd22:	db03      	blt.n	40cd2c <__sread+0x18>
  40cd24:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40cd26:	4403      	add	r3, r0
  40cd28:	6523      	str	r3, [r4, #80]	; 0x50
  40cd2a:	bd10      	pop	{r4, pc}
  40cd2c:	89a3      	ldrh	r3, [r4, #12]
  40cd2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40cd32:	81a3      	strh	r3, [r4, #12]
  40cd34:	bd10      	pop	{r4, pc}
  40cd36:	bf00      	nop

0040cd38 <__swrite>:
  40cd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cd3c:	4616      	mov	r6, r2
  40cd3e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40cd42:	461f      	mov	r7, r3
  40cd44:	05d3      	lsls	r3, r2, #23
  40cd46:	460c      	mov	r4, r1
  40cd48:	4605      	mov	r5, r0
  40cd4a:	d507      	bpl.n	40cd5c <__swrite+0x24>
  40cd4c:	2200      	movs	r2, #0
  40cd4e:	2302      	movs	r3, #2
  40cd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cd54:	f000 fa42 	bl	40d1dc <_lseek_r>
  40cd58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40cd5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40cd60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40cd64:	81a2      	strh	r2, [r4, #12]
  40cd66:	463b      	mov	r3, r7
  40cd68:	4632      	mov	r2, r6
  40cd6a:	4628      	mov	r0, r5
  40cd6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40cd70:	f000 b922 	b.w	40cfb8 <_write_r>

0040cd74 <__sseek>:
  40cd74:	b510      	push	{r4, lr}
  40cd76:	460c      	mov	r4, r1
  40cd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cd7c:	f000 fa2e 	bl	40d1dc <_lseek_r>
  40cd80:	89a3      	ldrh	r3, [r4, #12]
  40cd82:	1c42      	adds	r2, r0, #1
  40cd84:	bf0e      	itee	eq
  40cd86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40cd8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40cd8e:	6520      	strne	r0, [r4, #80]	; 0x50
  40cd90:	81a3      	strh	r3, [r4, #12]
  40cd92:	bd10      	pop	{r4, pc}

0040cd94 <__sclose>:
  40cd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cd98:	f000 b9a6 	b.w	40d0e8 <_close_r>

0040cd9c <__ssprint_r>:
  40cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cda0:	6893      	ldr	r3, [r2, #8]
  40cda2:	b083      	sub	sp, #12
  40cda4:	4690      	mov	r8, r2
  40cda6:	2b00      	cmp	r3, #0
  40cda8:	d072      	beq.n	40ce90 <__ssprint_r+0xf4>
  40cdaa:	4683      	mov	fp, r0
  40cdac:	f04f 0900 	mov.w	r9, #0
  40cdb0:	6816      	ldr	r6, [r2, #0]
  40cdb2:	6808      	ldr	r0, [r1, #0]
  40cdb4:	688b      	ldr	r3, [r1, #8]
  40cdb6:	460d      	mov	r5, r1
  40cdb8:	464c      	mov	r4, r9
  40cdba:	2c00      	cmp	r4, #0
  40cdbc:	d045      	beq.n	40ce4a <__ssprint_r+0xae>
  40cdbe:	429c      	cmp	r4, r3
  40cdc0:	461f      	mov	r7, r3
  40cdc2:	469a      	mov	sl, r3
  40cdc4:	d346      	bcc.n	40ce54 <__ssprint_r+0xb8>
  40cdc6:	89ab      	ldrh	r3, [r5, #12]
  40cdc8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40cdcc:	d02d      	beq.n	40ce2a <__ssprint_r+0x8e>
  40cdce:	696f      	ldr	r7, [r5, #20]
  40cdd0:	6929      	ldr	r1, [r5, #16]
  40cdd2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40cdd6:	ebc1 0a00 	rsb	sl, r1, r0
  40cdda:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40cdde:	1c60      	adds	r0, r4, #1
  40cde0:	107f      	asrs	r7, r7, #1
  40cde2:	4450      	add	r0, sl
  40cde4:	42b8      	cmp	r0, r7
  40cde6:	463a      	mov	r2, r7
  40cde8:	bf84      	itt	hi
  40cdea:	4607      	movhi	r7, r0
  40cdec:	463a      	movhi	r2, r7
  40cdee:	055b      	lsls	r3, r3, #21
  40cdf0:	d533      	bpl.n	40ce5a <__ssprint_r+0xbe>
  40cdf2:	4611      	mov	r1, r2
  40cdf4:	4658      	mov	r0, fp
  40cdf6:	f7fa fc41 	bl	40767c <_malloc_r>
  40cdfa:	2800      	cmp	r0, #0
  40cdfc:	d037      	beq.n	40ce6e <__ssprint_r+0xd2>
  40cdfe:	4652      	mov	r2, sl
  40ce00:	6929      	ldr	r1, [r5, #16]
  40ce02:	9001      	str	r0, [sp, #4]
  40ce04:	f7fa fef2 	bl	407bec <memcpy>
  40ce08:	89aa      	ldrh	r2, [r5, #12]
  40ce0a:	9b01      	ldr	r3, [sp, #4]
  40ce0c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40ce10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40ce14:	81aa      	strh	r2, [r5, #12]
  40ce16:	ebca 0207 	rsb	r2, sl, r7
  40ce1a:	eb03 000a 	add.w	r0, r3, sl
  40ce1e:	616f      	str	r7, [r5, #20]
  40ce20:	612b      	str	r3, [r5, #16]
  40ce22:	6028      	str	r0, [r5, #0]
  40ce24:	60aa      	str	r2, [r5, #8]
  40ce26:	4627      	mov	r7, r4
  40ce28:	46a2      	mov	sl, r4
  40ce2a:	4652      	mov	r2, sl
  40ce2c:	4649      	mov	r1, r9
  40ce2e:	f7ff fa0f 	bl	40c250 <memmove>
  40ce32:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40ce36:	68ab      	ldr	r3, [r5, #8]
  40ce38:	6828      	ldr	r0, [r5, #0]
  40ce3a:	1bdb      	subs	r3, r3, r7
  40ce3c:	4450      	add	r0, sl
  40ce3e:	1b14      	subs	r4, r2, r4
  40ce40:	60ab      	str	r3, [r5, #8]
  40ce42:	6028      	str	r0, [r5, #0]
  40ce44:	f8c8 4008 	str.w	r4, [r8, #8]
  40ce48:	b314      	cbz	r4, 40ce90 <__ssprint_r+0xf4>
  40ce4a:	f8d6 9000 	ldr.w	r9, [r6]
  40ce4e:	6874      	ldr	r4, [r6, #4]
  40ce50:	3608      	adds	r6, #8
  40ce52:	e7b2      	b.n	40cdba <__ssprint_r+0x1e>
  40ce54:	4627      	mov	r7, r4
  40ce56:	46a2      	mov	sl, r4
  40ce58:	e7e7      	b.n	40ce2a <__ssprint_r+0x8e>
  40ce5a:	4658      	mov	r0, fp
  40ce5c:	f7ff fd6a 	bl	40c934 <_realloc_r>
  40ce60:	4603      	mov	r3, r0
  40ce62:	2800      	cmp	r0, #0
  40ce64:	d1d7      	bne.n	40ce16 <__ssprint_r+0x7a>
  40ce66:	6929      	ldr	r1, [r5, #16]
  40ce68:	4658      	mov	r0, fp
  40ce6a:	f7fe fe8b 	bl	40bb84 <_free_r>
  40ce6e:	230c      	movs	r3, #12
  40ce70:	f8cb 3000 	str.w	r3, [fp]
  40ce74:	89ab      	ldrh	r3, [r5, #12]
  40ce76:	2200      	movs	r2, #0
  40ce78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ce7c:	f04f 30ff 	mov.w	r0, #4294967295
  40ce80:	81ab      	strh	r3, [r5, #12]
  40ce82:	f8c8 2008 	str.w	r2, [r8, #8]
  40ce86:	f8c8 2004 	str.w	r2, [r8, #4]
  40ce8a:	b003      	add	sp, #12
  40ce8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ce90:	2000      	movs	r0, #0
  40ce92:	f8c8 0004 	str.w	r0, [r8, #4]
  40ce96:	b003      	add	sp, #12
  40ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ce9c <__swbuf_r>:
  40ce9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ce9e:	460e      	mov	r6, r1
  40cea0:	4614      	mov	r4, r2
  40cea2:	4607      	mov	r7, r0
  40cea4:	b110      	cbz	r0, 40ceac <__swbuf_r+0x10>
  40cea6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40cea8:	2b00      	cmp	r3, #0
  40ceaa:	d04a      	beq.n	40cf42 <__swbuf_r+0xa6>
  40ceac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40ceb0:	69a3      	ldr	r3, [r4, #24]
  40ceb2:	60a3      	str	r3, [r4, #8]
  40ceb4:	b291      	uxth	r1, r2
  40ceb6:	0708      	lsls	r0, r1, #28
  40ceb8:	d538      	bpl.n	40cf2c <__swbuf_r+0x90>
  40ceba:	6923      	ldr	r3, [r4, #16]
  40cebc:	2b00      	cmp	r3, #0
  40cebe:	d035      	beq.n	40cf2c <__swbuf_r+0x90>
  40cec0:	0489      	lsls	r1, r1, #18
  40cec2:	b2f5      	uxtb	r5, r6
  40cec4:	d515      	bpl.n	40cef2 <__swbuf_r+0x56>
  40cec6:	6822      	ldr	r2, [r4, #0]
  40cec8:	6961      	ldr	r1, [r4, #20]
  40ceca:	1ad3      	subs	r3, r2, r3
  40cecc:	428b      	cmp	r3, r1
  40cece:	da1c      	bge.n	40cf0a <__swbuf_r+0x6e>
  40ced0:	3301      	adds	r3, #1
  40ced2:	68a1      	ldr	r1, [r4, #8]
  40ced4:	1c50      	adds	r0, r2, #1
  40ced6:	3901      	subs	r1, #1
  40ced8:	60a1      	str	r1, [r4, #8]
  40ceda:	6020      	str	r0, [r4, #0]
  40cedc:	7016      	strb	r6, [r2, #0]
  40cede:	6962      	ldr	r2, [r4, #20]
  40cee0:	429a      	cmp	r2, r3
  40cee2:	d01a      	beq.n	40cf1a <__swbuf_r+0x7e>
  40cee4:	89a3      	ldrh	r3, [r4, #12]
  40cee6:	07db      	lsls	r3, r3, #31
  40cee8:	d501      	bpl.n	40ceee <__swbuf_r+0x52>
  40ceea:	2d0a      	cmp	r5, #10
  40ceec:	d015      	beq.n	40cf1a <__swbuf_r+0x7e>
  40ceee:	4628      	mov	r0, r5
  40cef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40cef2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40cef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40cef8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40cefc:	81a2      	strh	r2, [r4, #12]
  40cefe:	6822      	ldr	r2, [r4, #0]
  40cf00:	6661      	str	r1, [r4, #100]	; 0x64
  40cf02:	6961      	ldr	r1, [r4, #20]
  40cf04:	1ad3      	subs	r3, r2, r3
  40cf06:	428b      	cmp	r3, r1
  40cf08:	dbe2      	blt.n	40ced0 <__swbuf_r+0x34>
  40cf0a:	4621      	mov	r1, r4
  40cf0c:	4638      	mov	r0, r7
  40cf0e:	f7fe fcdb 	bl	40b8c8 <_fflush_r>
  40cf12:	b940      	cbnz	r0, 40cf26 <__swbuf_r+0x8a>
  40cf14:	6822      	ldr	r2, [r4, #0]
  40cf16:	2301      	movs	r3, #1
  40cf18:	e7db      	b.n	40ced2 <__swbuf_r+0x36>
  40cf1a:	4621      	mov	r1, r4
  40cf1c:	4638      	mov	r0, r7
  40cf1e:	f7fe fcd3 	bl	40b8c8 <_fflush_r>
  40cf22:	2800      	cmp	r0, #0
  40cf24:	d0e3      	beq.n	40ceee <__swbuf_r+0x52>
  40cf26:	f04f 30ff 	mov.w	r0, #4294967295
  40cf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40cf2c:	4621      	mov	r1, r4
  40cf2e:	4638      	mov	r0, r7
  40cf30:	f7fd fbf2 	bl	40a718 <__swsetup_r>
  40cf34:	2800      	cmp	r0, #0
  40cf36:	d1f6      	bne.n	40cf26 <__swbuf_r+0x8a>
  40cf38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40cf3c:	6923      	ldr	r3, [r4, #16]
  40cf3e:	b291      	uxth	r1, r2
  40cf40:	e7be      	b.n	40cec0 <__swbuf_r+0x24>
  40cf42:	f7fe fd55 	bl	40b9f0 <__sinit>
  40cf46:	e7b1      	b.n	40ceac <__swbuf_r+0x10>

0040cf48 <_wcrtomb_r>:
  40cf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cf4c:	4605      	mov	r5, r0
  40cf4e:	b086      	sub	sp, #24
  40cf50:	461e      	mov	r6, r3
  40cf52:	460c      	mov	r4, r1
  40cf54:	b1a1      	cbz	r1, 40cf80 <_wcrtomb_r+0x38>
  40cf56:	4b10      	ldr	r3, [pc, #64]	; (40cf98 <_wcrtomb_r+0x50>)
  40cf58:	4617      	mov	r7, r2
  40cf5a:	f8d3 8000 	ldr.w	r8, [r3]
  40cf5e:	f7ff f8a5 	bl	40c0ac <__locale_charset>
  40cf62:	9600      	str	r6, [sp, #0]
  40cf64:	4603      	mov	r3, r0
  40cf66:	463a      	mov	r2, r7
  40cf68:	4621      	mov	r1, r4
  40cf6a:	4628      	mov	r0, r5
  40cf6c:	47c0      	blx	r8
  40cf6e:	1c43      	adds	r3, r0, #1
  40cf70:	d103      	bne.n	40cf7a <_wcrtomb_r+0x32>
  40cf72:	2200      	movs	r2, #0
  40cf74:	238a      	movs	r3, #138	; 0x8a
  40cf76:	6032      	str	r2, [r6, #0]
  40cf78:	602b      	str	r3, [r5, #0]
  40cf7a:	b006      	add	sp, #24
  40cf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cf80:	4b05      	ldr	r3, [pc, #20]	; (40cf98 <_wcrtomb_r+0x50>)
  40cf82:	681f      	ldr	r7, [r3, #0]
  40cf84:	f7ff f892 	bl	40c0ac <__locale_charset>
  40cf88:	9600      	str	r6, [sp, #0]
  40cf8a:	4603      	mov	r3, r0
  40cf8c:	4622      	mov	r2, r4
  40cf8e:	a903      	add	r1, sp, #12
  40cf90:	4628      	mov	r0, r5
  40cf92:	47b8      	blx	r7
  40cf94:	e7eb      	b.n	40cf6e <_wcrtomb_r+0x26>
  40cf96:	bf00      	nop
  40cf98:	204008e0 	.word	0x204008e0

0040cf9c <__ascii_wctomb>:
  40cf9c:	b121      	cbz	r1, 40cfa8 <__ascii_wctomb+0xc>
  40cf9e:	2aff      	cmp	r2, #255	; 0xff
  40cfa0:	d804      	bhi.n	40cfac <__ascii_wctomb+0x10>
  40cfa2:	700a      	strb	r2, [r1, #0]
  40cfa4:	2001      	movs	r0, #1
  40cfa6:	4770      	bx	lr
  40cfa8:	4608      	mov	r0, r1
  40cfaa:	4770      	bx	lr
  40cfac:	238a      	movs	r3, #138	; 0x8a
  40cfae:	6003      	str	r3, [r0, #0]
  40cfb0:	f04f 30ff 	mov.w	r0, #4294967295
  40cfb4:	4770      	bx	lr
  40cfb6:	bf00      	nop

0040cfb8 <_write_r>:
  40cfb8:	b570      	push	{r4, r5, r6, lr}
  40cfba:	460d      	mov	r5, r1
  40cfbc:	4c08      	ldr	r4, [pc, #32]	; (40cfe0 <_write_r+0x28>)
  40cfbe:	4611      	mov	r1, r2
  40cfc0:	4606      	mov	r6, r0
  40cfc2:	461a      	mov	r2, r3
  40cfc4:	4628      	mov	r0, r5
  40cfc6:	2300      	movs	r3, #0
  40cfc8:	6023      	str	r3, [r4, #0]
  40cfca:	f7f8 fe59 	bl	405c80 <_write>
  40cfce:	1c43      	adds	r3, r0, #1
  40cfd0:	d000      	beq.n	40cfd4 <_write_r+0x1c>
  40cfd2:	bd70      	pop	{r4, r5, r6, pc}
  40cfd4:	6823      	ldr	r3, [r4, #0]
  40cfd6:	2b00      	cmp	r3, #0
  40cfd8:	d0fb      	beq.n	40cfd2 <_write_r+0x1a>
  40cfda:	6033      	str	r3, [r6, #0]
  40cfdc:	bd70      	pop	{r4, r5, r6, pc}
  40cfde:	bf00      	nop
  40cfe0:	20402f90 	.word	0x20402f90

0040cfe4 <__register_exitproc>:
  40cfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40cfe8:	4c25      	ldr	r4, [pc, #148]	; (40d080 <__register_exitproc+0x9c>)
  40cfea:	6825      	ldr	r5, [r4, #0]
  40cfec:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40cff0:	4606      	mov	r6, r0
  40cff2:	4688      	mov	r8, r1
  40cff4:	4692      	mov	sl, r2
  40cff6:	4699      	mov	r9, r3
  40cff8:	b3c4      	cbz	r4, 40d06c <__register_exitproc+0x88>
  40cffa:	6860      	ldr	r0, [r4, #4]
  40cffc:	281f      	cmp	r0, #31
  40cffe:	dc17      	bgt.n	40d030 <__register_exitproc+0x4c>
  40d000:	1c43      	adds	r3, r0, #1
  40d002:	b176      	cbz	r6, 40d022 <__register_exitproc+0x3e>
  40d004:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40d008:	2201      	movs	r2, #1
  40d00a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40d00e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40d012:	4082      	lsls	r2, r0
  40d014:	4311      	orrs	r1, r2
  40d016:	2e02      	cmp	r6, #2
  40d018:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40d01c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40d020:	d01e      	beq.n	40d060 <__register_exitproc+0x7c>
  40d022:	3002      	adds	r0, #2
  40d024:	6063      	str	r3, [r4, #4]
  40d026:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40d02a:	2000      	movs	r0, #0
  40d02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d030:	4b14      	ldr	r3, [pc, #80]	; (40d084 <__register_exitproc+0xa0>)
  40d032:	b303      	cbz	r3, 40d076 <__register_exitproc+0x92>
  40d034:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40d038:	f7fa fb18 	bl	40766c <malloc>
  40d03c:	4604      	mov	r4, r0
  40d03e:	b1d0      	cbz	r0, 40d076 <__register_exitproc+0x92>
  40d040:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40d044:	2700      	movs	r7, #0
  40d046:	e880 0088 	stmia.w	r0, {r3, r7}
  40d04a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d04e:	4638      	mov	r0, r7
  40d050:	2301      	movs	r3, #1
  40d052:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40d056:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40d05a:	2e00      	cmp	r6, #0
  40d05c:	d0e1      	beq.n	40d022 <__register_exitproc+0x3e>
  40d05e:	e7d1      	b.n	40d004 <__register_exitproc+0x20>
  40d060:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40d064:	430a      	orrs	r2, r1
  40d066:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40d06a:	e7da      	b.n	40d022 <__register_exitproc+0x3e>
  40d06c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40d070:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d074:	e7c1      	b.n	40cffa <__register_exitproc+0x16>
  40d076:	f04f 30ff 	mov.w	r0, #4294967295
  40d07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d07e:	bf00      	nop
  40d080:	0040f7ac 	.word	0x0040f7ac
  40d084:	0040766d 	.word	0x0040766d

0040d088 <_calloc_r>:
  40d088:	b510      	push	{r4, lr}
  40d08a:	fb02 f101 	mul.w	r1, r2, r1
  40d08e:	f7fa faf5 	bl	40767c <_malloc_r>
  40d092:	4604      	mov	r4, r0
  40d094:	b1d8      	cbz	r0, 40d0ce <_calloc_r+0x46>
  40d096:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40d09a:	f022 0203 	bic.w	r2, r2, #3
  40d09e:	3a04      	subs	r2, #4
  40d0a0:	2a24      	cmp	r2, #36	; 0x24
  40d0a2:	d818      	bhi.n	40d0d6 <_calloc_r+0x4e>
  40d0a4:	2a13      	cmp	r2, #19
  40d0a6:	d914      	bls.n	40d0d2 <_calloc_r+0x4a>
  40d0a8:	2300      	movs	r3, #0
  40d0aa:	2a1b      	cmp	r2, #27
  40d0ac:	6003      	str	r3, [r0, #0]
  40d0ae:	6043      	str	r3, [r0, #4]
  40d0b0:	d916      	bls.n	40d0e0 <_calloc_r+0x58>
  40d0b2:	2a24      	cmp	r2, #36	; 0x24
  40d0b4:	6083      	str	r3, [r0, #8]
  40d0b6:	60c3      	str	r3, [r0, #12]
  40d0b8:	bf11      	iteee	ne
  40d0ba:	f100 0210 	addne.w	r2, r0, #16
  40d0be:	6103      	streq	r3, [r0, #16]
  40d0c0:	6143      	streq	r3, [r0, #20]
  40d0c2:	f100 0218 	addeq.w	r2, r0, #24
  40d0c6:	2300      	movs	r3, #0
  40d0c8:	6013      	str	r3, [r2, #0]
  40d0ca:	6053      	str	r3, [r2, #4]
  40d0cc:	6093      	str	r3, [r2, #8]
  40d0ce:	4620      	mov	r0, r4
  40d0d0:	bd10      	pop	{r4, pc}
  40d0d2:	4602      	mov	r2, r0
  40d0d4:	e7f7      	b.n	40d0c6 <_calloc_r+0x3e>
  40d0d6:	2100      	movs	r1, #0
  40d0d8:	f7fa fe22 	bl	407d20 <memset>
  40d0dc:	4620      	mov	r0, r4
  40d0de:	bd10      	pop	{r4, pc}
  40d0e0:	f100 0208 	add.w	r2, r0, #8
  40d0e4:	e7ef      	b.n	40d0c6 <_calloc_r+0x3e>
  40d0e6:	bf00      	nop

0040d0e8 <_close_r>:
  40d0e8:	b538      	push	{r3, r4, r5, lr}
  40d0ea:	4c07      	ldr	r4, [pc, #28]	; (40d108 <_close_r+0x20>)
  40d0ec:	2300      	movs	r3, #0
  40d0ee:	4605      	mov	r5, r0
  40d0f0:	4608      	mov	r0, r1
  40d0f2:	6023      	str	r3, [r4, #0]
  40d0f4:	f7f9 fd34 	bl	406b60 <_close>
  40d0f8:	1c43      	adds	r3, r0, #1
  40d0fa:	d000      	beq.n	40d0fe <_close_r+0x16>
  40d0fc:	bd38      	pop	{r3, r4, r5, pc}
  40d0fe:	6823      	ldr	r3, [r4, #0]
  40d100:	2b00      	cmp	r3, #0
  40d102:	d0fb      	beq.n	40d0fc <_close_r+0x14>
  40d104:	602b      	str	r3, [r5, #0]
  40d106:	bd38      	pop	{r3, r4, r5, pc}
  40d108:	20402f90 	.word	0x20402f90

0040d10c <_fclose_r>:
  40d10c:	2900      	cmp	r1, #0
  40d10e:	d03d      	beq.n	40d18c <_fclose_r+0x80>
  40d110:	b570      	push	{r4, r5, r6, lr}
  40d112:	4605      	mov	r5, r0
  40d114:	460c      	mov	r4, r1
  40d116:	b108      	cbz	r0, 40d11c <_fclose_r+0x10>
  40d118:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d11a:	b37b      	cbz	r3, 40d17c <_fclose_r+0x70>
  40d11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d120:	b90b      	cbnz	r3, 40d126 <_fclose_r+0x1a>
  40d122:	2000      	movs	r0, #0
  40d124:	bd70      	pop	{r4, r5, r6, pc}
  40d126:	4621      	mov	r1, r4
  40d128:	4628      	mov	r0, r5
  40d12a:	f7fe fb29 	bl	40b780 <__sflush_r>
  40d12e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40d130:	4606      	mov	r6, r0
  40d132:	b133      	cbz	r3, 40d142 <_fclose_r+0x36>
  40d134:	69e1      	ldr	r1, [r4, #28]
  40d136:	4628      	mov	r0, r5
  40d138:	4798      	blx	r3
  40d13a:	2800      	cmp	r0, #0
  40d13c:	bfb8      	it	lt
  40d13e:	f04f 36ff 	movlt.w	r6, #4294967295
  40d142:	89a3      	ldrh	r3, [r4, #12]
  40d144:	061b      	lsls	r3, r3, #24
  40d146:	d41c      	bmi.n	40d182 <_fclose_r+0x76>
  40d148:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d14a:	b141      	cbz	r1, 40d15e <_fclose_r+0x52>
  40d14c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d150:	4299      	cmp	r1, r3
  40d152:	d002      	beq.n	40d15a <_fclose_r+0x4e>
  40d154:	4628      	mov	r0, r5
  40d156:	f7fe fd15 	bl	40bb84 <_free_r>
  40d15a:	2300      	movs	r3, #0
  40d15c:	6323      	str	r3, [r4, #48]	; 0x30
  40d15e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40d160:	b121      	cbz	r1, 40d16c <_fclose_r+0x60>
  40d162:	4628      	mov	r0, r5
  40d164:	f7fe fd0e 	bl	40bb84 <_free_r>
  40d168:	2300      	movs	r3, #0
  40d16a:	6463      	str	r3, [r4, #68]	; 0x44
  40d16c:	f7fe fc46 	bl	40b9fc <__sfp_lock_acquire>
  40d170:	2300      	movs	r3, #0
  40d172:	81a3      	strh	r3, [r4, #12]
  40d174:	f7fe fc44 	bl	40ba00 <__sfp_lock_release>
  40d178:	4630      	mov	r0, r6
  40d17a:	bd70      	pop	{r4, r5, r6, pc}
  40d17c:	f7fe fc38 	bl	40b9f0 <__sinit>
  40d180:	e7cc      	b.n	40d11c <_fclose_r+0x10>
  40d182:	6921      	ldr	r1, [r4, #16]
  40d184:	4628      	mov	r0, r5
  40d186:	f7fe fcfd 	bl	40bb84 <_free_r>
  40d18a:	e7dd      	b.n	40d148 <_fclose_r+0x3c>
  40d18c:	2000      	movs	r0, #0
  40d18e:	4770      	bx	lr

0040d190 <_fstat_r>:
  40d190:	b538      	push	{r3, r4, r5, lr}
  40d192:	460b      	mov	r3, r1
  40d194:	4c07      	ldr	r4, [pc, #28]	; (40d1b4 <_fstat_r+0x24>)
  40d196:	4605      	mov	r5, r0
  40d198:	4611      	mov	r1, r2
  40d19a:	4618      	mov	r0, r3
  40d19c:	2300      	movs	r3, #0
  40d19e:	6023      	str	r3, [r4, #0]
  40d1a0:	f7f9 fce2 	bl	406b68 <_fstat>
  40d1a4:	1c43      	adds	r3, r0, #1
  40d1a6:	d000      	beq.n	40d1aa <_fstat_r+0x1a>
  40d1a8:	bd38      	pop	{r3, r4, r5, pc}
  40d1aa:	6823      	ldr	r3, [r4, #0]
  40d1ac:	2b00      	cmp	r3, #0
  40d1ae:	d0fb      	beq.n	40d1a8 <_fstat_r+0x18>
  40d1b0:	602b      	str	r3, [r5, #0]
  40d1b2:	bd38      	pop	{r3, r4, r5, pc}
  40d1b4:	20402f90 	.word	0x20402f90

0040d1b8 <_isatty_r>:
  40d1b8:	b538      	push	{r3, r4, r5, lr}
  40d1ba:	4c07      	ldr	r4, [pc, #28]	; (40d1d8 <_isatty_r+0x20>)
  40d1bc:	2300      	movs	r3, #0
  40d1be:	4605      	mov	r5, r0
  40d1c0:	4608      	mov	r0, r1
  40d1c2:	6023      	str	r3, [r4, #0]
  40d1c4:	f7f9 fcd6 	bl	406b74 <_isatty>
  40d1c8:	1c43      	adds	r3, r0, #1
  40d1ca:	d000      	beq.n	40d1ce <_isatty_r+0x16>
  40d1cc:	bd38      	pop	{r3, r4, r5, pc}
  40d1ce:	6823      	ldr	r3, [r4, #0]
  40d1d0:	2b00      	cmp	r3, #0
  40d1d2:	d0fb      	beq.n	40d1cc <_isatty_r+0x14>
  40d1d4:	602b      	str	r3, [r5, #0]
  40d1d6:	bd38      	pop	{r3, r4, r5, pc}
  40d1d8:	20402f90 	.word	0x20402f90

0040d1dc <_lseek_r>:
  40d1dc:	b570      	push	{r4, r5, r6, lr}
  40d1de:	460d      	mov	r5, r1
  40d1e0:	4c08      	ldr	r4, [pc, #32]	; (40d204 <_lseek_r+0x28>)
  40d1e2:	4611      	mov	r1, r2
  40d1e4:	4606      	mov	r6, r0
  40d1e6:	461a      	mov	r2, r3
  40d1e8:	4628      	mov	r0, r5
  40d1ea:	2300      	movs	r3, #0
  40d1ec:	6023      	str	r3, [r4, #0]
  40d1ee:	f7f9 fcc3 	bl	406b78 <_lseek>
  40d1f2:	1c43      	adds	r3, r0, #1
  40d1f4:	d000      	beq.n	40d1f8 <_lseek_r+0x1c>
  40d1f6:	bd70      	pop	{r4, r5, r6, pc}
  40d1f8:	6823      	ldr	r3, [r4, #0]
  40d1fa:	2b00      	cmp	r3, #0
  40d1fc:	d0fb      	beq.n	40d1f6 <_lseek_r+0x1a>
  40d1fe:	6033      	str	r3, [r6, #0]
  40d200:	bd70      	pop	{r4, r5, r6, pc}
  40d202:	bf00      	nop
  40d204:	20402f90 	.word	0x20402f90

0040d208 <_read_r>:
  40d208:	b570      	push	{r4, r5, r6, lr}
  40d20a:	460d      	mov	r5, r1
  40d20c:	4c08      	ldr	r4, [pc, #32]	; (40d230 <_read_r+0x28>)
  40d20e:	4611      	mov	r1, r2
  40d210:	4606      	mov	r6, r0
  40d212:	461a      	mov	r2, r3
  40d214:	4628      	mov	r0, r5
  40d216:	2300      	movs	r3, #0
  40d218:	6023      	str	r3, [r4, #0]
  40d21a:	f7f8 fd13 	bl	405c44 <_read>
  40d21e:	1c43      	adds	r3, r0, #1
  40d220:	d000      	beq.n	40d224 <_read_r+0x1c>
  40d222:	bd70      	pop	{r4, r5, r6, pc}
  40d224:	6823      	ldr	r3, [r4, #0]
  40d226:	2b00      	cmp	r3, #0
  40d228:	d0fb      	beq.n	40d222 <_read_r+0x1a>
  40d22a:	6033      	str	r3, [r6, #0]
  40d22c:	bd70      	pop	{r4, r5, r6, pc}
  40d22e:	bf00      	nop
  40d230:	20402f90 	.word	0x20402f90

0040d234 <__aeabi_drsub>:
  40d234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40d238:	e002      	b.n	40d240 <__adddf3>
  40d23a:	bf00      	nop

0040d23c <__aeabi_dsub>:
  40d23c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040d240 <__adddf3>:
  40d240:	b530      	push	{r4, r5, lr}
  40d242:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40d246:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40d24a:	ea94 0f05 	teq	r4, r5
  40d24e:	bf08      	it	eq
  40d250:	ea90 0f02 	teqeq	r0, r2
  40d254:	bf1f      	itttt	ne
  40d256:	ea54 0c00 	orrsne.w	ip, r4, r0
  40d25a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40d25e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40d262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40d266:	f000 80e2 	beq.w	40d42e <__adddf3+0x1ee>
  40d26a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40d26e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40d272:	bfb8      	it	lt
  40d274:	426d      	neglt	r5, r5
  40d276:	dd0c      	ble.n	40d292 <__adddf3+0x52>
  40d278:	442c      	add	r4, r5
  40d27a:	ea80 0202 	eor.w	r2, r0, r2
  40d27e:	ea81 0303 	eor.w	r3, r1, r3
  40d282:	ea82 0000 	eor.w	r0, r2, r0
  40d286:	ea83 0101 	eor.w	r1, r3, r1
  40d28a:	ea80 0202 	eor.w	r2, r0, r2
  40d28e:	ea81 0303 	eor.w	r3, r1, r3
  40d292:	2d36      	cmp	r5, #54	; 0x36
  40d294:	bf88      	it	hi
  40d296:	bd30      	pophi	{r4, r5, pc}
  40d298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40d29c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40d2a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40d2a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40d2a8:	d002      	beq.n	40d2b0 <__adddf3+0x70>
  40d2aa:	4240      	negs	r0, r0
  40d2ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d2b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40d2b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40d2b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40d2bc:	d002      	beq.n	40d2c4 <__adddf3+0x84>
  40d2be:	4252      	negs	r2, r2
  40d2c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40d2c4:	ea94 0f05 	teq	r4, r5
  40d2c8:	f000 80a7 	beq.w	40d41a <__adddf3+0x1da>
  40d2cc:	f1a4 0401 	sub.w	r4, r4, #1
  40d2d0:	f1d5 0e20 	rsbs	lr, r5, #32
  40d2d4:	db0d      	blt.n	40d2f2 <__adddf3+0xb2>
  40d2d6:	fa02 fc0e 	lsl.w	ip, r2, lr
  40d2da:	fa22 f205 	lsr.w	r2, r2, r5
  40d2de:	1880      	adds	r0, r0, r2
  40d2e0:	f141 0100 	adc.w	r1, r1, #0
  40d2e4:	fa03 f20e 	lsl.w	r2, r3, lr
  40d2e8:	1880      	adds	r0, r0, r2
  40d2ea:	fa43 f305 	asr.w	r3, r3, r5
  40d2ee:	4159      	adcs	r1, r3
  40d2f0:	e00e      	b.n	40d310 <__adddf3+0xd0>
  40d2f2:	f1a5 0520 	sub.w	r5, r5, #32
  40d2f6:	f10e 0e20 	add.w	lr, lr, #32
  40d2fa:	2a01      	cmp	r2, #1
  40d2fc:	fa03 fc0e 	lsl.w	ip, r3, lr
  40d300:	bf28      	it	cs
  40d302:	f04c 0c02 	orrcs.w	ip, ip, #2
  40d306:	fa43 f305 	asr.w	r3, r3, r5
  40d30a:	18c0      	adds	r0, r0, r3
  40d30c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40d310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d314:	d507      	bpl.n	40d326 <__adddf3+0xe6>
  40d316:	f04f 0e00 	mov.w	lr, #0
  40d31a:	f1dc 0c00 	rsbs	ip, ip, #0
  40d31e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40d322:	eb6e 0101 	sbc.w	r1, lr, r1
  40d326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40d32a:	d31b      	bcc.n	40d364 <__adddf3+0x124>
  40d32c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40d330:	d30c      	bcc.n	40d34c <__adddf3+0x10c>
  40d332:	0849      	lsrs	r1, r1, #1
  40d334:	ea5f 0030 	movs.w	r0, r0, rrx
  40d338:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40d33c:	f104 0401 	add.w	r4, r4, #1
  40d340:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40d344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40d348:	f080 809a 	bcs.w	40d480 <__adddf3+0x240>
  40d34c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40d350:	bf08      	it	eq
  40d352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40d356:	f150 0000 	adcs.w	r0, r0, #0
  40d35a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d35e:	ea41 0105 	orr.w	r1, r1, r5
  40d362:	bd30      	pop	{r4, r5, pc}
  40d364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40d368:	4140      	adcs	r0, r0
  40d36a:	eb41 0101 	adc.w	r1, r1, r1
  40d36e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d372:	f1a4 0401 	sub.w	r4, r4, #1
  40d376:	d1e9      	bne.n	40d34c <__adddf3+0x10c>
  40d378:	f091 0f00 	teq	r1, #0
  40d37c:	bf04      	itt	eq
  40d37e:	4601      	moveq	r1, r0
  40d380:	2000      	moveq	r0, #0
  40d382:	fab1 f381 	clz	r3, r1
  40d386:	bf08      	it	eq
  40d388:	3320      	addeq	r3, #32
  40d38a:	f1a3 030b 	sub.w	r3, r3, #11
  40d38e:	f1b3 0220 	subs.w	r2, r3, #32
  40d392:	da0c      	bge.n	40d3ae <__adddf3+0x16e>
  40d394:	320c      	adds	r2, #12
  40d396:	dd08      	ble.n	40d3aa <__adddf3+0x16a>
  40d398:	f102 0c14 	add.w	ip, r2, #20
  40d39c:	f1c2 020c 	rsb	r2, r2, #12
  40d3a0:	fa01 f00c 	lsl.w	r0, r1, ip
  40d3a4:	fa21 f102 	lsr.w	r1, r1, r2
  40d3a8:	e00c      	b.n	40d3c4 <__adddf3+0x184>
  40d3aa:	f102 0214 	add.w	r2, r2, #20
  40d3ae:	bfd8      	it	le
  40d3b0:	f1c2 0c20 	rsble	ip, r2, #32
  40d3b4:	fa01 f102 	lsl.w	r1, r1, r2
  40d3b8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40d3bc:	bfdc      	itt	le
  40d3be:	ea41 010c 	orrle.w	r1, r1, ip
  40d3c2:	4090      	lslle	r0, r2
  40d3c4:	1ae4      	subs	r4, r4, r3
  40d3c6:	bfa2      	ittt	ge
  40d3c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40d3cc:	4329      	orrge	r1, r5
  40d3ce:	bd30      	popge	{r4, r5, pc}
  40d3d0:	ea6f 0404 	mvn.w	r4, r4
  40d3d4:	3c1f      	subs	r4, #31
  40d3d6:	da1c      	bge.n	40d412 <__adddf3+0x1d2>
  40d3d8:	340c      	adds	r4, #12
  40d3da:	dc0e      	bgt.n	40d3fa <__adddf3+0x1ba>
  40d3dc:	f104 0414 	add.w	r4, r4, #20
  40d3e0:	f1c4 0220 	rsb	r2, r4, #32
  40d3e4:	fa20 f004 	lsr.w	r0, r0, r4
  40d3e8:	fa01 f302 	lsl.w	r3, r1, r2
  40d3ec:	ea40 0003 	orr.w	r0, r0, r3
  40d3f0:	fa21 f304 	lsr.w	r3, r1, r4
  40d3f4:	ea45 0103 	orr.w	r1, r5, r3
  40d3f8:	bd30      	pop	{r4, r5, pc}
  40d3fa:	f1c4 040c 	rsb	r4, r4, #12
  40d3fe:	f1c4 0220 	rsb	r2, r4, #32
  40d402:	fa20 f002 	lsr.w	r0, r0, r2
  40d406:	fa01 f304 	lsl.w	r3, r1, r4
  40d40a:	ea40 0003 	orr.w	r0, r0, r3
  40d40e:	4629      	mov	r1, r5
  40d410:	bd30      	pop	{r4, r5, pc}
  40d412:	fa21 f004 	lsr.w	r0, r1, r4
  40d416:	4629      	mov	r1, r5
  40d418:	bd30      	pop	{r4, r5, pc}
  40d41a:	f094 0f00 	teq	r4, #0
  40d41e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40d422:	bf06      	itte	eq
  40d424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40d428:	3401      	addeq	r4, #1
  40d42a:	3d01      	subne	r5, #1
  40d42c:	e74e      	b.n	40d2cc <__adddf3+0x8c>
  40d42e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40d432:	bf18      	it	ne
  40d434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40d438:	d029      	beq.n	40d48e <__adddf3+0x24e>
  40d43a:	ea94 0f05 	teq	r4, r5
  40d43e:	bf08      	it	eq
  40d440:	ea90 0f02 	teqeq	r0, r2
  40d444:	d005      	beq.n	40d452 <__adddf3+0x212>
  40d446:	ea54 0c00 	orrs.w	ip, r4, r0
  40d44a:	bf04      	itt	eq
  40d44c:	4619      	moveq	r1, r3
  40d44e:	4610      	moveq	r0, r2
  40d450:	bd30      	pop	{r4, r5, pc}
  40d452:	ea91 0f03 	teq	r1, r3
  40d456:	bf1e      	ittt	ne
  40d458:	2100      	movne	r1, #0
  40d45a:	2000      	movne	r0, #0
  40d45c:	bd30      	popne	{r4, r5, pc}
  40d45e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40d462:	d105      	bne.n	40d470 <__adddf3+0x230>
  40d464:	0040      	lsls	r0, r0, #1
  40d466:	4149      	adcs	r1, r1
  40d468:	bf28      	it	cs
  40d46a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40d46e:	bd30      	pop	{r4, r5, pc}
  40d470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40d474:	bf3c      	itt	cc
  40d476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40d47a:	bd30      	popcc	{r4, r5, pc}
  40d47c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40d484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d488:	f04f 0000 	mov.w	r0, #0
  40d48c:	bd30      	pop	{r4, r5, pc}
  40d48e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40d492:	bf1a      	itte	ne
  40d494:	4619      	movne	r1, r3
  40d496:	4610      	movne	r0, r2
  40d498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40d49c:	bf1c      	itt	ne
  40d49e:	460b      	movne	r3, r1
  40d4a0:	4602      	movne	r2, r0
  40d4a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d4a6:	bf06      	itte	eq
  40d4a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40d4ac:	ea91 0f03 	teqeq	r1, r3
  40d4b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40d4b4:	bd30      	pop	{r4, r5, pc}
  40d4b6:	bf00      	nop

0040d4b8 <__aeabi_ui2d>:
  40d4b8:	f090 0f00 	teq	r0, #0
  40d4bc:	bf04      	itt	eq
  40d4be:	2100      	moveq	r1, #0
  40d4c0:	4770      	bxeq	lr
  40d4c2:	b530      	push	{r4, r5, lr}
  40d4c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d4c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d4cc:	f04f 0500 	mov.w	r5, #0
  40d4d0:	f04f 0100 	mov.w	r1, #0
  40d4d4:	e750      	b.n	40d378 <__adddf3+0x138>
  40d4d6:	bf00      	nop

0040d4d8 <__aeabi_i2d>:
  40d4d8:	f090 0f00 	teq	r0, #0
  40d4dc:	bf04      	itt	eq
  40d4de:	2100      	moveq	r1, #0
  40d4e0:	4770      	bxeq	lr
  40d4e2:	b530      	push	{r4, r5, lr}
  40d4e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d4e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d4ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40d4f0:	bf48      	it	mi
  40d4f2:	4240      	negmi	r0, r0
  40d4f4:	f04f 0100 	mov.w	r1, #0
  40d4f8:	e73e      	b.n	40d378 <__adddf3+0x138>
  40d4fa:	bf00      	nop

0040d4fc <__aeabi_f2d>:
  40d4fc:	0042      	lsls	r2, r0, #1
  40d4fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40d502:	ea4f 0131 	mov.w	r1, r1, rrx
  40d506:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40d50a:	bf1f      	itttt	ne
  40d50c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40d510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40d514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40d518:	4770      	bxne	lr
  40d51a:	f092 0f00 	teq	r2, #0
  40d51e:	bf14      	ite	ne
  40d520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40d524:	4770      	bxeq	lr
  40d526:	b530      	push	{r4, r5, lr}
  40d528:	f44f 7460 	mov.w	r4, #896	; 0x380
  40d52c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40d530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d534:	e720      	b.n	40d378 <__adddf3+0x138>
  40d536:	bf00      	nop

0040d538 <__aeabi_ul2d>:
  40d538:	ea50 0201 	orrs.w	r2, r0, r1
  40d53c:	bf08      	it	eq
  40d53e:	4770      	bxeq	lr
  40d540:	b530      	push	{r4, r5, lr}
  40d542:	f04f 0500 	mov.w	r5, #0
  40d546:	e00a      	b.n	40d55e <__aeabi_l2d+0x16>

0040d548 <__aeabi_l2d>:
  40d548:	ea50 0201 	orrs.w	r2, r0, r1
  40d54c:	bf08      	it	eq
  40d54e:	4770      	bxeq	lr
  40d550:	b530      	push	{r4, r5, lr}
  40d552:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40d556:	d502      	bpl.n	40d55e <__aeabi_l2d+0x16>
  40d558:	4240      	negs	r0, r0
  40d55a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d55e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40d562:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40d566:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40d56a:	f43f aedc 	beq.w	40d326 <__adddf3+0xe6>
  40d56e:	f04f 0203 	mov.w	r2, #3
  40d572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40d576:	bf18      	it	ne
  40d578:	3203      	addne	r2, #3
  40d57a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40d57e:	bf18      	it	ne
  40d580:	3203      	addne	r2, #3
  40d582:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40d586:	f1c2 0320 	rsb	r3, r2, #32
  40d58a:	fa00 fc03 	lsl.w	ip, r0, r3
  40d58e:	fa20 f002 	lsr.w	r0, r0, r2
  40d592:	fa01 fe03 	lsl.w	lr, r1, r3
  40d596:	ea40 000e 	orr.w	r0, r0, lr
  40d59a:	fa21 f102 	lsr.w	r1, r1, r2
  40d59e:	4414      	add	r4, r2
  40d5a0:	e6c1      	b.n	40d326 <__adddf3+0xe6>
  40d5a2:	bf00      	nop

0040d5a4 <__aeabi_dmul>:
  40d5a4:	b570      	push	{r4, r5, r6, lr}
  40d5a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d5aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d5ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d5b2:	bf1d      	ittte	ne
  40d5b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d5b8:	ea94 0f0c 	teqne	r4, ip
  40d5bc:	ea95 0f0c 	teqne	r5, ip
  40d5c0:	f000 f8de 	bleq	40d780 <__aeabi_dmul+0x1dc>
  40d5c4:	442c      	add	r4, r5
  40d5c6:	ea81 0603 	eor.w	r6, r1, r3
  40d5ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40d5ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40d5d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40d5d6:	bf18      	it	ne
  40d5d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40d5dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d5e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40d5e4:	d038      	beq.n	40d658 <__aeabi_dmul+0xb4>
  40d5e6:	fba0 ce02 	umull	ip, lr, r0, r2
  40d5ea:	f04f 0500 	mov.w	r5, #0
  40d5ee:	fbe1 e502 	umlal	lr, r5, r1, r2
  40d5f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40d5f6:	fbe0 e503 	umlal	lr, r5, r0, r3
  40d5fa:	f04f 0600 	mov.w	r6, #0
  40d5fe:	fbe1 5603 	umlal	r5, r6, r1, r3
  40d602:	f09c 0f00 	teq	ip, #0
  40d606:	bf18      	it	ne
  40d608:	f04e 0e01 	orrne.w	lr, lr, #1
  40d60c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40d610:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40d614:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40d618:	d204      	bcs.n	40d624 <__aeabi_dmul+0x80>
  40d61a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40d61e:	416d      	adcs	r5, r5
  40d620:	eb46 0606 	adc.w	r6, r6, r6
  40d624:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40d628:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40d62c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40d630:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40d634:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40d638:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d63c:	bf88      	it	hi
  40d63e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d642:	d81e      	bhi.n	40d682 <__aeabi_dmul+0xde>
  40d644:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40d648:	bf08      	it	eq
  40d64a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40d64e:	f150 0000 	adcs.w	r0, r0, #0
  40d652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d656:	bd70      	pop	{r4, r5, r6, pc}
  40d658:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40d65c:	ea46 0101 	orr.w	r1, r6, r1
  40d660:	ea40 0002 	orr.w	r0, r0, r2
  40d664:	ea81 0103 	eor.w	r1, r1, r3
  40d668:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40d66c:	bfc2      	ittt	gt
  40d66e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d672:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d676:	bd70      	popgt	{r4, r5, r6, pc}
  40d678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d67c:	f04f 0e00 	mov.w	lr, #0
  40d680:	3c01      	subs	r4, #1
  40d682:	f300 80ab 	bgt.w	40d7dc <__aeabi_dmul+0x238>
  40d686:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40d68a:	bfde      	ittt	le
  40d68c:	2000      	movle	r0, #0
  40d68e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40d692:	bd70      	pople	{r4, r5, r6, pc}
  40d694:	f1c4 0400 	rsb	r4, r4, #0
  40d698:	3c20      	subs	r4, #32
  40d69a:	da35      	bge.n	40d708 <__aeabi_dmul+0x164>
  40d69c:	340c      	adds	r4, #12
  40d69e:	dc1b      	bgt.n	40d6d8 <__aeabi_dmul+0x134>
  40d6a0:	f104 0414 	add.w	r4, r4, #20
  40d6a4:	f1c4 0520 	rsb	r5, r4, #32
  40d6a8:	fa00 f305 	lsl.w	r3, r0, r5
  40d6ac:	fa20 f004 	lsr.w	r0, r0, r4
  40d6b0:	fa01 f205 	lsl.w	r2, r1, r5
  40d6b4:	ea40 0002 	orr.w	r0, r0, r2
  40d6b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40d6bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d6c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d6c4:	fa21 f604 	lsr.w	r6, r1, r4
  40d6c8:	eb42 0106 	adc.w	r1, r2, r6
  40d6cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d6d0:	bf08      	it	eq
  40d6d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d6d6:	bd70      	pop	{r4, r5, r6, pc}
  40d6d8:	f1c4 040c 	rsb	r4, r4, #12
  40d6dc:	f1c4 0520 	rsb	r5, r4, #32
  40d6e0:	fa00 f304 	lsl.w	r3, r0, r4
  40d6e4:	fa20 f005 	lsr.w	r0, r0, r5
  40d6e8:	fa01 f204 	lsl.w	r2, r1, r4
  40d6ec:	ea40 0002 	orr.w	r0, r0, r2
  40d6f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d6f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d6f8:	f141 0100 	adc.w	r1, r1, #0
  40d6fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d700:	bf08      	it	eq
  40d702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d706:	bd70      	pop	{r4, r5, r6, pc}
  40d708:	f1c4 0520 	rsb	r5, r4, #32
  40d70c:	fa00 f205 	lsl.w	r2, r0, r5
  40d710:	ea4e 0e02 	orr.w	lr, lr, r2
  40d714:	fa20 f304 	lsr.w	r3, r0, r4
  40d718:	fa01 f205 	lsl.w	r2, r1, r5
  40d71c:	ea43 0302 	orr.w	r3, r3, r2
  40d720:	fa21 f004 	lsr.w	r0, r1, r4
  40d724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d728:	fa21 f204 	lsr.w	r2, r1, r4
  40d72c:	ea20 0002 	bic.w	r0, r0, r2
  40d730:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40d734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d738:	bf08      	it	eq
  40d73a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d73e:	bd70      	pop	{r4, r5, r6, pc}
  40d740:	f094 0f00 	teq	r4, #0
  40d744:	d10f      	bne.n	40d766 <__aeabi_dmul+0x1c2>
  40d746:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40d74a:	0040      	lsls	r0, r0, #1
  40d74c:	eb41 0101 	adc.w	r1, r1, r1
  40d750:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d754:	bf08      	it	eq
  40d756:	3c01      	subeq	r4, #1
  40d758:	d0f7      	beq.n	40d74a <__aeabi_dmul+0x1a6>
  40d75a:	ea41 0106 	orr.w	r1, r1, r6
  40d75e:	f095 0f00 	teq	r5, #0
  40d762:	bf18      	it	ne
  40d764:	4770      	bxne	lr
  40d766:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40d76a:	0052      	lsls	r2, r2, #1
  40d76c:	eb43 0303 	adc.w	r3, r3, r3
  40d770:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40d774:	bf08      	it	eq
  40d776:	3d01      	subeq	r5, #1
  40d778:	d0f7      	beq.n	40d76a <__aeabi_dmul+0x1c6>
  40d77a:	ea43 0306 	orr.w	r3, r3, r6
  40d77e:	4770      	bx	lr
  40d780:	ea94 0f0c 	teq	r4, ip
  40d784:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d788:	bf18      	it	ne
  40d78a:	ea95 0f0c 	teqne	r5, ip
  40d78e:	d00c      	beq.n	40d7aa <__aeabi_dmul+0x206>
  40d790:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d794:	bf18      	it	ne
  40d796:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d79a:	d1d1      	bne.n	40d740 <__aeabi_dmul+0x19c>
  40d79c:	ea81 0103 	eor.w	r1, r1, r3
  40d7a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d7a4:	f04f 0000 	mov.w	r0, #0
  40d7a8:	bd70      	pop	{r4, r5, r6, pc}
  40d7aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d7ae:	bf06      	itte	eq
  40d7b0:	4610      	moveq	r0, r2
  40d7b2:	4619      	moveq	r1, r3
  40d7b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d7b8:	d019      	beq.n	40d7ee <__aeabi_dmul+0x24a>
  40d7ba:	ea94 0f0c 	teq	r4, ip
  40d7be:	d102      	bne.n	40d7c6 <__aeabi_dmul+0x222>
  40d7c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40d7c4:	d113      	bne.n	40d7ee <__aeabi_dmul+0x24a>
  40d7c6:	ea95 0f0c 	teq	r5, ip
  40d7ca:	d105      	bne.n	40d7d8 <__aeabi_dmul+0x234>
  40d7cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40d7d0:	bf1c      	itt	ne
  40d7d2:	4610      	movne	r0, r2
  40d7d4:	4619      	movne	r1, r3
  40d7d6:	d10a      	bne.n	40d7ee <__aeabi_dmul+0x24a>
  40d7d8:	ea81 0103 	eor.w	r1, r1, r3
  40d7dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d7e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d7e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d7e8:	f04f 0000 	mov.w	r0, #0
  40d7ec:	bd70      	pop	{r4, r5, r6, pc}
  40d7ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d7f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40d7f6:	bd70      	pop	{r4, r5, r6, pc}

0040d7f8 <__aeabi_ddiv>:
  40d7f8:	b570      	push	{r4, r5, r6, lr}
  40d7fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d7fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d802:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d806:	bf1d      	ittte	ne
  40d808:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d80c:	ea94 0f0c 	teqne	r4, ip
  40d810:	ea95 0f0c 	teqne	r5, ip
  40d814:	f000 f8a7 	bleq	40d966 <__aeabi_ddiv+0x16e>
  40d818:	eba4 0405 	sub.w	r4, r4, r5
  40d81c:	ea81 0e03 	eor.w	lr, r1, r3
  40d820:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d824:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40d828:	f000 8088 	beq.w	40d93c <__aeabi_ddiv+0x144>
  40d82c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40d830:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40d834:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40d838:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40d83c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40d840:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40d844:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40d848:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40d84c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40d850:	429d      	cmp	r5, r3
  40d852:	bf08      	it	eq
  40d854:	4296      	cmpeq	r6, r2
  40d856:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40d85a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40d85e:	d202      	bcs.n	40d866 <__aeabi_ddiv+0x6e>
  40d860:	085b      	lsrs	r3, r3, #1
  40d862:	ea4f 0232 	mov.w	r2, r2, rrx
  40d866:	1ab6      	subs	r6, r6, r2
  40d868:	eb65 0503 	sbc.w	r5, r5, r3
  40d86c:	085b      	lsrs	r3, r3, #1
  40d86e:	ea4f 0232 	mov.w	r2, r2, rrx
  40d872:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40d876:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40d87a:	ebb6 0e02 	subs.w	lr, r6, r2
  40d87e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d882:	bf22      	ittt	cs
  40d884:	1ab6      	subcs	r6, r6, r2
  40d886:	4675      	movcs	r5, lr
  40d888:	ea40 000c 	orrcs.w	r0, r0, ip
  40d88c:	085b      	lsrs	r3, r3, #1
  40d88e:	ea4f 0232 	mov.w	r2, r2, rrx
  40d892:	ebb6 0e02 	subs.w	lr, r6, r2
  40d896:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d89a:	bf22      	ittt	cs
  40d89c:	1ab6      	subcs	r6, r6, r2
  40d89e:	4675      	movcs	r5, lr
  40d8a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40d8a4:	085b      	lsrs	r3, r3, #1
  40d8a6:	ea4f 0232 	mov.w	r2, r2, rrx
  40d8aa:	ebb6 0e02 	subs.w	lr, r6, r2
  40d8ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d8b2:	bf22      	ittt	cs
  40d8b4:	1ab6      	subcs	r6, r6, r2
  40d8b6:	4675      	movcs	r5, lr
  40d8b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40d8bc:	085b      	lsrs	r3, r3, #1
  40d8be:	ea4f 0232 	mov.w	r2, r2, rrx
  40d8c2:	ebb6 0e02 	subs.w	lr, r6, r2
  40d8c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d8ca:	bf22      	ittt	cs
  40d8cc:	1ab6      	subcs	r6, r6, r2
  40d8ce:	4675      	movcs	r5, lr
  40d8d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40d8d4:	ea55 0e06 	orrs.w	lr, r5, r6
  40d8d8:	d018      	beq.n	40d90c <__aeabi_ddiv+0x114>
  40d8da:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40d8de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40d8e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40d8e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40d8ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40d8ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40d8f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40d8f6:	d1c0      	bne.n	40d87a <__aeabi_ddiv+0x82>
  40d8f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d8fc:	d10b      	bne.n	40d916 <__aeabi_ddiv+0x11e>
  40d8fe:	ea41 0100 	orr.w	r1, r1, r0
  40d902:	f04f 0000 	mov.w	r0, #0
  40d906:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40d90a:	e7b6      	b.n	40d87a <__aeabi_ddiv+0x82>
  40d90c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d910:	bf04      	itt	eq
  40d912:	4301      	orreq	r1, r0
  40d914:	2000      	moveq	r0, #0
  40d916:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d91a:	bf88      	it	hi
  40d91c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d920:	f63f aeaf 	bhi.w	40d682 <__aeabi_dmul+0xde>
  40d924:	ebb5 0c03 	subs.w	ip, r5, r3
  40d928:	bf04      	itt	eq
  40d92a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40d92e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40d932:	f150 0000 	adcs.w	r0, r0, #0
  40d936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d93a:	bd70      	pop	{r4, r5, r6, pc}
  40d93c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40d940:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40d944:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40d948:	bfc2      	ittt	gt
  40d94a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d94e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d952:	bd70      	popgt	{r4, r5, r6, pc}
  40d954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d958:	f04f 0e00 	mov.w	lr, #0
  40d95c:	3c01      	subs	r4, #1
  40d95e:	e690      	b.n	40d682 <__aeabi_dmul+0xde>
  40d960:	ea45 0e06 	orr.w	lr, r5, r6
  40d964:	e68d      	b.n	40d682 <__aeabi_dmul+0xde>
  40d966:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d96a:	ea94 0f0c 	teq	r4, ip
  40d96e:	bf08      	it	eq
  40d970:	ea95 0f0c 	teqeq	r5, ip
  40d974:	f43f af3b 	beq.w	40d7ee <__aeabi_dmul+0x24a>
  40d978:	ea94 0f0c 	teq	r4, ip
  40d97c:	d10a      	bne.n	40d994 <__aeabi_ddiv+0x19c>
  40d97e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d982:	f47f af34 	bne.w	40d7ee <__aeabi_dmul+0x24a>
  40d986:	ea95 0f0c 	teq	r5, ip
  40d98a:	f47f af25 	bne.w	40d7d8 <__aeabi_dmul+0x234>
  40d98e:	4610      	mov	r0, r2
  40d990:	4619      	mov	r1, r3
  40d992:	e72c      	b.n	40d7ee <__aeabi_dmul+0x24a>
  40d994:	ea95 0f0c 	teq	r5, ip
  40d998:	d106      	bne.n	40d9a8 <__aeabi_ddiv+0x1b0>
  40d99a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d99e:	f43f aefd 	beq.w	40d79c <__aeabi_dmul+0x1f8>
  40d9a2:	4610      	mov	r0, r2
  40d9a4:	4619      	mov	r1, r3
  40d9a6:	e722      	b.n	40d7ee <__aeabi_dmul+0x24a>
  40d9a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d9ac:	bf18      	it	ne
  40d9ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d9b2:	f47f aec5 	bne.w	40d740 <__aeabi_dmul+0x19c>
  40d9b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40d9ba:	f47f af0d 	bne.w	40d7d8 <__aeabi_dmul+0x234>
  40d9be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40d9c2:	f47f aeeb 	bne.w	40d79c <__aeabi_dmul+0x1f8>
  40d9c6:	e712      	b.n	40d7ee <__aeabi_dmul+0x24a>

0040d9c8 <__gedf2>:
  40d9c8:	f04f 3cff 	mov.w	ip, #4294967295
  40d9cc:	e006      	b.n	40d9dc <__cmpdf2+0x4>
  40d9ce:	bf00      	nop

0040d9d0 <__ledf2>:
  40d9d0:	f04f 0c01 	mov.w	ip, #1
  40d9d4:	e002      	b.n	40d9dc <__cmpdf2+0x4>
  40d9d6:	bf00      	nop

0040d9d8 <__cmpdf2>:
  40d9d8:	f04f 0c01 	mov.w	ip, #1
  40d9dc:	f84d cd04 	str.w	ip, [sp, #-4]!
  40d9e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d9e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d9e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d9ec:	bf18      	it	ne
  40d9ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40d9f2:	d01b      	beq.n	40da2c <__cmpdf2+0x54>
  40d9f4:	b001      	add	sp, #4
  40d9f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40d9fa:	bf0c      	ite	eq
  40d9fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40da00:	ea91 0f03 	teqne	r1, r3
  40da04:	bf02      	ittt	eq
  40da06:	ea90 0f02 	teqeq	r0, r2
  40da0a:	2000      	moveq	r0, #0
  40da0c:	4770      	bxeq	lr
  40da0e:	f110 0f00 	cmn.w	r0, #0
  40da12:	ea91 0f03 	teq	r1, r3
  40da16:	bf58      	it	pl
  40da18:	4299      	cmppl	r1, r3
  40da1a:	bf08      	it	eq
  40da1c:	4290      	cmpeq	r0, r2
  40da1e:	bf2c      	ite	cs
  40da20:	17d8      	asrcs	r0, r3, #31
  40da22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40da26:	f040 0001 	orr.w	r0, r0, #1
  40da2a:	4770      	bx	lr
  40da2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40da30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40da34:	d102      	bne.n	40da3c <__cmpdf2+0x64>
  40da36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40da3a:	d107      	bne.n	40da4c <__cmpdf2+0x74>
  40da3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40da40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40da44:	d1d6      	bne.n	40d9f4 <__cmpdf2+0x1c>
  40da46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40da4a:	d0d3      	beq.n	40d9f4 <__cmpdf2+0x1c>
  40da4c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40da50:	4770      	bx	lr
  40da52:	bf00      	nop

0040da54 <__aeabi_cdrcmple>:
  40da54:	4684      	mov	ip, r0
  40da56:	4610      	mov	r0, r2
  40da58:	4662      	mov	r2, ip
  40da5a:	468c      	mov	ip, r1
  40da5c:	4619      	mov	r1, r3
  40da5e:	4663      	mov	r3, ip
  40da60:	e000      	b.n	40da64 <__aeabi_cdcmpeq>
  40da62:	bf00      	nop

0040da64 <__aeabi_cdcmpeq>:
  40da64:	b501      	push	{r0, lr}
  40da66:	f7ff ffb7 	bl	40d9d8 <__cmpdf2>
  40da6a:	2800      	cmp	r0, #0
  40da6c:	bf48      	it	mi
  40da6e:	f110 0f00 	cmnmi.w	r0, #0
  40da72:	bd01      	pop	{r0, pc}

0040da74 <__aeabi_dcmpeq>:
  40da74:	f84d ed08 	str.w	lr, [sp, #-8]!
  40da78:	f7ff fff4 	bl	40da64 <__aeabi_cdcmpeq>
  40da7c:	bf0c      	ite	eq
  40da7e:	2001      	moveq	r0, #1
  40da80:	2000      	movne	r0, #0
  40da82:	f85d fb08 	ldr.w	pc, [sp], #8
  40da86:	bf00      	nop

0040da88 <__aeabi_dcmplt>:
  40da88:	f84d ed08 	str.w	lr, [sp, #-8]!
  40da8c:	f7ff ffea 	bl	40da64 <__aeabi_cdcmpeq>
  40da90:	bf34      	ite	cc
  40da92:	2001      	movcc	r0, #1
  40da94:	2000      	movcs	r0, #0
  40da96:	f85d fb08 	ldr.w	pc, [sp], #8
  40da9a:	bf00      	nop

0040da9c <__aeabi_dcmple>:
  40da9c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40daa0:	f7ff ffe0 	bl	40da64 <__aeabi_cdcmpeq>
  40daa4:	bf94      	ite	ls
  40daa6:	2001      	movls	r0, #1
  40daa8:	2000      	movhi	r0, #0
  40daaa:	f85d fb08 	ldr.w	pc, [sp], #8
  40daae:	bf00      	nop

0040dab0 <__aeabi_dcmpge>:
  40dab0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dab4:	f7ff ffce 	bl	40da54 <__aeabi_cdrcmple>
  40dab8:	bf94      	ite	ls
  40daba:	2001      	movls	r0, #1
  40dabc:	2000      	movhi	r0, #0
  40dabe:	f85d fb08 	ldr.w	pc, [sp], #8
  40dac2:	bf00      	nop

0040dac4 <__aeabi_dcmpgt>:
  40dac4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40dac8:	f7ff ffc4 	bl	40da54 <__aeabi_cdrcmple>
  40dacc:	bf34      	ite	cc
  40dace:	2001      	movcc	r0, #1
  40dad0:	2000      	movcs	r0, #0
  40dad2:	f85d fb08 	ldr.w	pc, [sp], #8
  40dad6:	bf00      	nop

0040dad8 <__aeabi_dcmpun>:
  40dad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40dadc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40dae0:	d102      	bne.n	40dae8 <__aeabi_dcmpun+0x10>
  40dae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40dae6:	d10a      	bne.n	40dafe <__aeabi_dcmpun+0x26>
  40dae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40daec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40daf0:	d102      	bne.n	40daf8 <__aeabi_dcmpun+0x20>
  40daf2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40daf6:	d102      	bne.n	40dafe <__aeabi_dcmpun+0x26>
  40daf8:	f04f 0000 	mov.w	r0, #0
  40dafc:	4770      	bx	lr
  40dafe:	f04f 0001 	mov.w	r0, #1
  40db02:	4770      	bx	lr

0040db04 <__aeabi_d2iz>:
  40db04:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40db08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40db0c:	d215      	bcs.n	40db3a <__aeabi_d2iz+0x36>
  40db0e:	d511      	bpl.n	40db34 <__aeabi_d2iz+0x30>
  40db10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40db14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40db18:	d912      	bls.n	40db40 <__aeabi_d2iz+0x3c>
  40db1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40db1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40db22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40db26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40db2a:	fa23 f002 	lsr.w	r0, r3, r2
  40db2e:	bf18      	it	ne
  40db30:	4240      	negne	r0, r0
  40db32:	4770      	bx	lr
  40db34:	f04f 0000 	mov.w	r0, #0
  40db38:	4770      	bx	lr
  40db3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40db3e:	d105      	bne.n	40db4c <__aeabi_d2iz+0x48>
  40db40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40db44:	bf08      	it	eq
  40db46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40db4a:	4770      	bx	lr
  40db4c:	f04f 0000 	mov.w	r0, #0
  40db50:	4770      	bx	lr
  40db52:	bf00      	nop

0040db54 <__aeabi_uldivmod>:
  40db54:	b953      	cbnz	r3, 40db6c <__aeabi_uldivmod+0x18>
  40db56:	b94a      	cbnz	r2, 40db6c <__aeabi_uldivmod+0x18>
  40db58:	2900      	cmp	r1, #0
  40db5a:	bf08      	it	eq
  40db5c:	2800      	cmpeq	r0, #0
  40db5e:	bf1c      	itt	ne
  40db60:	f04f 31ff 	movne.w	r1, #4294967295
  40db64:	f04f 30ff 	movne.w	r0, #4294967295
  40db68:	f000 b97e 	b.w	40de68 <__aeabi_idiv0>
  40db6c:	f1ad 0c08 	sub.w	ip, sp, #8
  40db70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40db74:	f000 f806 	bl	40db84 <__udivmoddi4>
  40db78:	f8dd e004 	ldr.w	lr, [sp, #4]
  40db7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40db80:	b004      	add	sp, #16
  40db82:	4770      	bx	lr

0040db84 <__udivmoddi4>:
  40db84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40db88:	468c      	mov	ip, r1
  40db8a:	460e      	mov	r6, r1
  40db8c:	4604      	mov	r4, r0
  40db8e:	9d08      	ldr	r5, [sp, #32]
  40db90:	2b00      	cmp	r3, #0
  40db92:	d150      	bne.n	40dc36 <__udivmoddi4+0xb2>
  40db94:	428a      	cmp	r2, r1
  40db96:	4617      	mov	r7, r2
  40db98:	d96c      	bls.n	40dc74 <__udivmoddi4+0xf0>
  40db9a:	fab2 fe82 	clz	lr, r2
  40db9e:	f1be 0f00 	cmp.w	lr, #0
  40dba2:	d00b      	beq.n	40dbbc <__udivmoddi4+0x38>
  40dba4:	f1ce 0420 	rsb	r4, lr, #32
  40dba8:	fa20 f404 	lsr.w	r4, r0, r4
  40dbac:	fa01 f60e 	lsl.w	r6, r1, lr
  40dbb0:	ea44 0c06 	orr.w	ip, r4, r6
  40dbb4:	fa02 f70e 	lsl.w	r7, r2, lr
  40dbb8:	fa00 f40e 	lsl.w	r4, r0, lr
  40dbbc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  40dbc0:	0c22      	lsrs	r2, r4, #16
  40dbc2:	fbbc f0f9 	udiv	r0, ip, r9
  40dbc6:	fa1f f887 	uxth.w	r8, r7
  40dbca:	fb09 c610 	mls	r6, r9, r0, ip
  40dbce:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40dbd2:	fb00 f308 	mul.w	r3, r0, r8
  40dbd6:	42b3      	cmp	r3, r6
  40dbd8:	d909      	bls.n	40dbee <__udivmoddi4+0x6a>
  40dbda:	19f6      	adds	r6, r6, r7
  40dbdc:	f100 32ff 	add.w	r2, r0, #4294967295
  40dbe0:	f080 8122 	bcs.w	40de28 <__udivmoddi4+0x2a4>
  40dbe4:	42b3      	cmp	r3, r6
  40dbe6:	f240 811f 	bls.w	40de28 <__udivmoddi4+0x2a4>
  40dbea:	3802      	subs	r0, #2
  40dbec:	443e      	add	r6, r7
  40dbee:	1af6      	subs	r6, r6, r3
  40dbf0:	b2a2      	uxth	r2, r4
  40dbf2:	fbb6 f3f9 	udiv	r3, r6, r9
  40dbf6:	fb09 6613 	mls	r6, r9, r3, r6
  40dbfa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40dbfe:	fb03 f808 	mul.w	r8, r3, r8
  40dc02:	45a0      	cmp	r8, r4
  40dc04:	d909      	bls.n	40dc1a <__udivmoddi4+0x96>
  40dc06:	19e4      	adds	r4, r4, r7
  40dc08:	f103 32ff 	add.w	r2, r3, #4294967295
  40dc0c:	f080 810a 	bcs.w	40de24 <__udivmoddi4+0x2a0>
  40dc10:	45a0      	cmp	r8, r4
  40dc12:	f240 8107 	bls.w	40de24 <__udivmoddi4+0x2a0>
  40dc16:	3b02      	subs	r3, #2
  40dc18:	443c      	add	r4, r7
  40dc1a:	ebc8 0404 	rsb	r4, r8, r4
  40dc1e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40dc22:	2100      	movs	r1, #0
  40dc24:	2d00      	cmp	r5, #0
  40dc26:	d062      	beq.n	40dcee <__udivmoddi4+0x16a>
  40dc28:	fa24 f40e 	lsr.w	r4, r4, lr
  40dc2c:	2300      	movs	r3, #0
  40dc2e:	602c      	str	r4, [r5, #0]
  40dc30:	606b      	str	r3, [r5, #4]
  40dc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40dc36:	428b      	cmp	r3, r1
  40dc38:	d907      	bls.n	40dc4a <__udivmoddi4+0xc6>
  40dc3a:	2d00      	cmp	r5, #0
  40dc3c:	d055      	beq.n	40dcea <__udivmoddi4+0x166>
  40dc3e:	2100      	movs	r1, #0
  40dc40:	e885 0041 	stmia.w	r5, {r0, r6}
  40dc44:	4608      	mov	r0, r1
  40dc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40dc4a:	fab3 f183 	clz	r1, r3
  40dc4e:	2900      	cmp	r1, #0
  40dc50:	f040 8090 	bne.w	40dd74 <__udivmoddi4+0x1f0>
  40dc54:	42b3      	cmp	r3, r6
  40dc56:	d302      	bcc.n	40dc5e <__udivmoddi4+0xda>
  40dc58:	4282      	cmp	r2, r0
  40dc5a:	f200 80f8 	bhi.w	40de4e <__udivmoddi4+0x2ca>
  40dc5e:	1a84      	subs	r4, r0, r2
  40dc60:	eb66 0603 	sbc.w	r6, r6, r3
  40dc64:	2001      	movs	r0, #1
  40dc66:	46b4      	mov	ip, r6
  40dc68:	2d00      	cmp	r5, #0
  40dc6a:	d040      	beq.n	40dcee <__udivmoddi4+0x16a>
  40dc6c:	e885 1010 	stmia.w	r5, {r4, ip}
  40dc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40dc74:	b912      	cbnz	r2, 40dc7c <__udivmoddi4+0xf8>
  40dc76:	2701      	movs	r7, #1
  40dc78:	fbb7 f7f2 	udiv	r7, r7, r2
  40dc7c:	fab7 fe87 	clz	lr, r7
  40dc80:	f1be 0f00 	cmp.w	lr, #0
  40dc84:	d135      	bne.n	40dcf2 <__udivmoddi4+0x16e>
  40dc86:	1bf3      	subs	r3, r6, r7
  40dc88:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40dc8c:	fa1f fc87 	uxth.w	ip, r7
  40dc90:	2101      	movs	r1, #1
  40dc92:	fbb3 f0f8 	udiv	r0, r3, r8
  40dc96:	0c22      	lsrs	r2, r4, #16
  40dc98:	fb08 3610 	mls	r6, r8, r0, r3
  40dc9c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  40dca0:	fb0c f300 	mul.w	r3, ip, r0
  40dca4:	42b3      	cmp	r3, r6
  40dca6:	d907      	bls.n	40dcb8 <__udivmoddi4+0x134>
  40dca8:	19f6      	adds	r6, r6, r7
  40dcaa:	f100 32ff 	add.w	r2, r0, #4294967295
  40dcae:	d202      	bcs.n	40dcb6 <__udivmoddi4+0x132>
  40dcb0:	42b3      	cmp	r3, r6
  40dcb2:	f200 80ce 	bhi.w	40de52 <__udivmoddi4+0x2ce>
  40dcb6:	4610      	mov	r0, r2
  40dcb8:	1af6      	subs	r6, r6, r3
  40dcba:	b2a2      	uxth	r2, r4
  40dcbc:	fbb6 f3f8 	udiv	r3, r6, r8
  40dcc0:	fb08 6613 	mls	r6, r8, r3, r6
  40dcc4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40dcc8:	fb0c fc03 	mul.w	ip, ip, r3
  40dccc:	45a4      	cmp	ip, r4
  40dcce:	d907      	bls.n	40dce0 <__udivmoddi4+0x15c>
  40dcd0:	19e4      	adds	r4, r4, r7
  40dcd2:	f103 32ff 	add.w	r2, r3, #4294967295
  40dcd6:	d202      	bcs.n	40dcde <__udivmoddi4+0x15a>
  40dcd8:	45a4      	cmp	ip, r4
  40dcda:	f200 80b5 	bhi.w	40de48 <__udivmoddi4+0x2c4>
  40dcde:	4613      	mov	r3, r2
  40dce0:	ebcc 0404 	rsb	r4, ip, r4
  40dce4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40dce8:	e79c      	b.n	40dc24 <__udivmoddi4+0xa0>
  40dcea:	4629      	mov	r1, r5
  40dcec:	4628      	mov	r0, r5
  40dcee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40dcf2:	f1ce 0120 	rsb	r1, lr, #32
  40dcf6:	fa06 f30e 	lsl.w	r3, r6, lr
  40dcfa:	fa07 f70e 	lsl.w	r7, r7, lr
  40dcfe:	fa20 f901 	lsr.w	r9, r0, r1
  40dd02:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40dd06:	40ce      	lsrs	r6, r1
  40dd08:	ea49 0903 	orr.w	r9, r9, r3
  40dd0c:	fbb6 faf8 	udiv	sl, r6, r8
  40dd10:	ea4f 4419 	mov.w	r4, r9, lsr #16
  40dd14:	fb08 661a 	mls	r6, r8, sl, r6
  40dd18:	fa1f fc87 	uxth.w	ip, r7
  40dd1c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  40dd20:	fb0a f20c 	mul.w	r2, sl, ip
  40dd24:	429a      	cmp	r2, r3
  40dd26:	fa00 f40e 	lsl.w	r4, r0, lr
  40dd2a:	d90a      	bls.n	40dd42 <__udivmoddi4+0x1be>
  40dd2c:	19db      	adds	r3, r3, r7
  40dd2e:	f10a 31ff 	add.w	r1, sl, #4294967295
  40dd32:	f080 8087 	bcs.w	40de44 <__udivmoddi4+0x2c0>
  40dd36:	429a      	cmp	r2, r3
  40dd38:	f240 8084 	bls.w	40de44 <__udivmoddi4+0x2c0>
  40dd3c:	f1aa 0a02 	sub.w	sl, sl, #2
  40dd40:	443b      	add	r3, r7
  40dd42:	1a9b      	subs	r3, r3, r2
  40dd44:	fa1f f989 	uxth.w	r9, r9
  40dd48:	fbb3 f1f8 	udiv	r1, r3, r8
  40dd4c:	fb08 3311 	mls	r3, r8, r1, r3
  40dd50:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  40dd54:	fb01 f60c 	mul.w	r6, r1, ip
  40dd58:	429e      	cmp	r6, r3
  40dd5a:	d907      	bls.n	40dd6c <__udivmoddi4+0x1e8>
  40dd5c:	19db      	adds	r3, r3, r7
  40dd5e:	f101 32ff 	add.w	r2, r1, #4294967295
  40dd62:	d26b      	bcs.n	40de3c <__udivmoddi4+0x2b8>
  40dd64:	429e      	cmp	r6, r3
  40dd66:	d969      	bls.n	40de3c <__udivmoddi4+0x2b8>
  40dd68:	3902      	subs	r1, #2
  40dd6a:	443b      	add	r3, r7
  40dd6c:	1b9b      	subs	r3, r3, r6
  40dd6e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  40dd72:	e78e      	b.n	40dc92 <__udivmoddi4+0x10e>
  40dd74:	f1c1 0e20 	rsb	lr, r1, #32
  40dd78:	fa22 f40e 	lsr.w	r4, r2, lr
  40dd7c:	408b      	lsls	r3, r1
  40dd7e:	4323      	orrs	r3, r4
  40dd80:	fa20 f70e 	lsr.w	r7, r0, lr
  40dd84:	fa06 f401 	lsl.w	r4, r6, r1
  40dd88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40dd8c:	fa26 f60e 	lsr.w	r6, r6, lr
  40dd90:	433c      	orrs	r4, r7
  40dd92:	fbb6 f9fc 	udiv	r9, r6, ip
  40dd96:	0c27      	lsrs	r7, r4, #16
  40dd98:	fb0c 6619 	mls	r6, ip, r9, r6
  40dd9c:	fa1f f883 	uxth.w	r8, r3
  40dda0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  40dda4:	fb09 f708 	mul.w	r7, r9, r8
  40dda8:	42b7      	cmp	r7, r6
  40ddaa:	fa02 f201 	lsl.w	r2, r2, r1
  40ddae:	fa00 fa01 	lsl.w	sl, r0, r1
  40ddb2:	d908      	bls.n	40ddc6 <__udivmoddi4+0x242>
  40ddb4:	18f6      	adds	r6, r6, r3
  40ddb6:	f109 30ff 	add.w	r0, r9, #4294967295
  40ddba:	d241      	bcs.n	40de40 <__udivmoddi4+0x2bc>
  40ddbc:	42b7      	cmp	r7, r6
  40ddbe:	d93f      	bls.n	40de40 <__udivmoddi4+0x2bc>
  40ddc0:	f1a9 0902 	sub.w	r9, r9, #2
  40ddc4:	441e      	add	r6, r3
  40ddc6:	1bf6      	subs	r6, r6, r7
  40ddc8:	b2a0      	uxth	r0, r4
  40ddca:	fbb6 f4fc 	udiv	r4, r6, ip
  40ddce:	fb0c 6614 	mls	r6, ip, r4, r6
  40ddd2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40ddd6:	fb04 f808 	mul.w	r8, r4, r8
  40ddda:	45b8      	cmp	r8, r7
  40dddc:	d907      	bls.n	40ddee <__udivmoddi4+0x26a>
  40ddde:	18ff      	adds	r7, r7, r3
  40dde0:	f104 30ff 	add.w	r0, r4, #4294967295
  40dde4:	d228      	bcs.n	40de38 <__udivmoddi4+0x2b4>
  40dde6:	45b8      	cmp	r8, r7
  40dde8:	d926      	bls.n	40de38 <__udivmoddi4+0x2b4>
  40ddea:	3c02      	subs	r4, #2
  40ddec:	441f      	add	r7, r3
  40ddee:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  40ddf2:	ebc8 0707 	rsb	r7, r8, r7
  40ddf6:	fba0 8902 	umull	r8, r9, r0, r2
  40ddfa:	454f      	cmp	r7, r9
  40ddfc:	4644      	mov	r4, r8
  40ddfe:	464e      	mov	r6, r9
  40de00:	d314      	bcc.n	40de2c <__udivmoddi4+0x2a8>
  40de02:	d029      	beq.n	40de58 <__udivmoddi4+0x2d4>
  40de04:	b365      	cbz	r5, 40de60 <__udivmoddi4+0x2dc>
  40de06:	ebba 0304 	subs.w	r3, sl, r4
  40de0a:	eb67 0706 	sbc.w	r7, r7, r6
  40de0e:	fa07 fe0e 	lsl.w	lr, r7, lr
  40de12:	40cb      	lsrs	r3, r1
  40de14:	40cf      	lsrs	r7, r1
  40de16:	ea4e 0303 	orr.w	r3, lr, r3
  40de1a:	e885 0088 	stmia.w	r5, {r3, r7}
  40de1e:	2100      	movs	r1, #0
  40de20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de24:	4613      	mov	r3, r2
  40de26:	e6f8      	b.n	40dc1a <__udivmoddi4+0x96>
  40de28:	4610      	mov	r0, r2
  40de2a:	e6e0      	b.n	40dbee <__udivmoddi4+0x6a>
  40de2c:	ebb8 0402 	subs.w	r4, r8, r2
  40de30:	eb69 0603 	sbc.w	r6, r9, r3
  40de34:	3801      	subs	r0, #1
  40de36:	e7e5      	b.n	40de04 <__udivmoddi4+0x280>
  40de38:	4604      	mov	r4, r0
  40de3a:	e7d8      	b.n	40ddee <__udivmoddi4+0x26a>
  40de3c:	4611      	mov	r1, r2
  40de3e:	e795      	b.n	40dd6c <__udivmoddi4+0x1e8>
  40de40:	4681      	mov	r9, r0
  40de42:	e7c0      	b.n	40ddc6 <__udivmoddi4+0x242>
  40de44:	468a      	mov	sl, r1
  40de46:	e77c      	b.n	40dd42 <__udivmoddi4+0x1be>
  40de48:	3b02      	subs	r3, #2
  40de4a:	443c      	add	r4, r7
  40de4c:	e748      	b.n	40dce0 <__udivmoddi4+0x15c>
  40de4e:	4608      	mov	r0, r1
  40de50:	e70a      	b.n	40dc68 <__udivmoddi4+0xe4>
  40de52:	3802      	subs	r0, #2
  40de54:	443e      	add	r6, r7
  40de56:	e72f      	b.n	40dcb8 <__udivmoddi4+0x134>
  40de58:	45c2      	cmp	sl, r8
  40de5a:	d3e7      	bcc.n	40de2c <__udivmoddi4+0x2a8>
  40de5c:	463e      	mov	r6, r7
  40de5e:	e7d1      	b.n	40de04 <__udivmoddi4+0x280>
  40de60:	4629      	mov	r1, r5
  40de62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de66:	bf00      	nop

0040de68 <__aeabi_idiv0>:
  40de68:	4770      	bx	lr
  40de6a:	bf00      	nop

0040de6c <sd_trans_multipliers>:
  40de6c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40de7c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  40de8c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  40de9c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040deac <sd_mmc_trans_units>:
  40deac:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0040dec8 <mmc_trans_multipliers>:
  40dec8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40ded8:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  40dee8:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  40def8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040df08 <excvt.4611>:
  40df08:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  40df18:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  40df28:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  40df38:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  40df48:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  40df58:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  40df68:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  40df78:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  40df88:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  40df98:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
  40dfa8:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
  40dfb8:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
  40dfc8:	5441 2020 2020 0020                         AT     .

0040dfd0 <LfnOfs>:
  40dfd0:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0040dfe0 <Tbl>:
  40dfe0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  40dff0:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  40e000:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  40e010:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  40e020:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  40e030:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  40e040:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  40e050:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  40e060:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  40e070:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  40e080:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  40e090:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  40e0a0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  40e0b0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  40e0c0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  40e0d0:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0040e0e0 <tbl_lower.5431>:
  40e0e0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  40e0f0:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  40e100:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  40e110:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  40e120:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  40e130:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  40e140:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  40e150:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  40e160:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  40e170:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  40e180:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  40e190:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  40e1a0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  40e1b0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  40e1c0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  40e1d0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  40e1e0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  40e1f0:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  40e200:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  40e210:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  40e220:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  40e230:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  40e240:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  40e250:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  40e260:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  40e270:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  40e280:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  40e290:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  40e2a0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  40e2b0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0040e2c0 <tbl_upper.5432>:
  40e2c0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  40e2d0:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  40e2e0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  40e2f0:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  40e300:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  40e310:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  40e320:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  40e330:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  40e340:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  40e350:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  40e360:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  40e370:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  40e380:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  40e390:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  40e3a0:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  40e3b0:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  40e3c0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  40e3d0:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  40e3e0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  40e3f0:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  40e400:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  40e410:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  40e420:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  40e430:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  40e440:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  40e450:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  40e460:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  40e470:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  40e480:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  40e490:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...

0040e4a0 <__FUNCTION__.10333>:
  40e4a0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
  40e4b0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
  40e4c0:	5d64 0000 6e49 6176 696c 2064 4f49 5443     d]..Invalid IOCT
  40e4d0:	204c 6f63 6d6d 6e61 2164 000a               L command!..

0040e4dc <__FUNCTION__.8784>:
  40e4dc:	6968 5f66 7369 0072                         hif_isr.

0040e4e4 <__FUNCTION__.8805>:
  40e4e4:	6968 5f66 6572 6563 7669 0065 4828 4649     hif_receive.(HIF
  40e4f4:	4629 6961 206c 6f74 7720 6b61 7075 7420     )Fail to wakup t
  40e504:	6568 6320 6968 0a70 0000 0000 6828 6669     he chip.....(hif
  40e514:	2029 4957 4946 485f 534f 5f54 4352 5f56     ) WIFI_HOST_RCV_
  40e524:	5443 4c52 315f 6220 7375 6620 6961 0a6c     CTRL_1 bus fail.
  40e534:	0000 0000 6828 6669 2029 6461 7264 7365     ....(hif) addres
  40e544:	2073 7562 2073 6166 6c69 000a 6828 6669     s bus fail..(hif
  40e554:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
  40e564:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
  40e574:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
  40e584:	3d20 2520 3230 3e58 000a 0000 6828 6669      = %02X>....(hif
  40e594:	2029 6e69 6176 696c 2064 7267 756f 2070     ) invalid group 
  40e5a4:	4449 000a 6828 6669 2029 6f68 7473 6120     ID..(hif) host a
  40e5b4:	7070 6420 6469 276e 2074 6573 2074 5852     pp didn't set RX
  40e5c4:	4420 6e6f 0a65 0000 6828 6669 2029 7257      Done...(hif) Wr
  40e5d4:	6e6f 2067 6953 657a 000a 0000 6828 6669     ong Size....(hif
  40e5e4:	2029 6146 736c 2065 6e69 6574 7272 7075     ) False interrup
  40e5f4:	2074 6c25 0078 0000 6828 6669 2029 6146     t %lx...(hif) Fa
  40e604:	6c69 7420 206f 6552 6461 6920 746e 7265     il to Read inter
  40e614:	7572 7470 7220 6765 000a 0000 6828 6669     rupt reg....(hif
  40e624:	2029 4146 4c49 7420 206f 6177 656b 7075     ) FAIL to wakeup
  40e634:	7420 6568 6320 6968 0a70 0000 4828 4649      the chip...(HIF
  40e644:	2029 6146 6c69 7420 206f 6168 646e 656c     ) Fail to handle
  40e654:	6920 746e 7265 7572 7470 2520 2064 7274      interrupt %d tr
  40e664:	2079 6741 6961 2e6e 0a2e 0000 6820 6669     y Again..... hif
  40e674:	725f 6365 6965 6576 203a 6e49 6176 696c     _receive: Invali
  40e684:	2064 7261 7567 656d 746e 000a 5041 2050     d argument..APP 
  40e694:	6552 7571 7365 6574 2064 6953 657a 6920     Requested Size i
  40e6a4:	2073 616c 6772 7265 7420 6168 206e 6874     s larger than th
  40e6b4:	2065 6572 6963 6576 2064 7562 6666 7265     e recived buffer
  40e6c4:	7320 7a69 2065 253c 3e64 253c 3e64 000a      size <%d><%d>..
  40e6d4:	5041 2050 6552 7571 7365 6574 2064 6441     APP Requested Ad
  40e6e4:	7264 7365 2073 6562 6f79 646e 7420 6568     dress beyond the
  40e6f4:	7220 6365 7669 6465 6220 6675 6566 2072      recived buffer 
  40e704:	6461 7264 7365 2073 6e61 2064 656c 676e     address and leng
  40e714:	6874 000a 5247 2070 203f 6425 000a 0000     th..GRp ? %d....

0040e724 <__FUNCTION__.8820>:
  40e724:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.

0040e734 <__FUNCTION__.8774>:
  40e734:	6968 5f66 6573 646e 0000 0000               hif_send....

0040e740 <__FUNCTION__.8790>:
  40e740:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0040e750 <__FUNCTION__.8799>:
  40e750:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
  40e760:	735f 0063                                   _sc.

0040e764 <__FUNCTION__.8747>:
  40e764:	326d 5f6d 6977 6966 635f 0062 4128 5050     m2m_wifi_cb.(APP
  40e774:	2829 4e49 4f46 0029 6f43 666e 696c 7463     )(INFO).Conflict
  40e784:	6465 4920 2050 2022 7525 252e 2e75 7525     ed IP " %u.%u.%u
  40e794:	252e 2075 2022 000a 4552 2051 6f4e 2074     .%u " ..REQ Not 
  40e7a4:	6564 6966 656e 2064 6425 000a 4e49 4156     defined %d..INVA
  40e7b4:	494c 2044 4f50 4e49 4554 0a52 0000 0000     LID POINTER.....
  40e7c4:	4e49 4156 494c 2044 5353 4449 000a 0000     INVALID SSID....
  40e7d4:	4e49 4156 494c 2044 4843 000a 4e49 4156     INVALID CH..INVA
  40e7e4:	494c 2044 4844 5043 5320 5245 4556 2052     LID DHCP SERVER 
  40e7f4:	5049 000a 4e49 4156 494c 2044 454b 2059     IP..INVALID KEY 
  40e804:	4e49 4544 0a58 0000 4e49 4156 494c 2044     INDEX...INVALID 
  40e814:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
  40e824:	494c 2044 4557 2050 454b 0a59 0000 0000     LID WEP KEY.....
  40e834:	4e49 4156 494c 2044 5541 4854 4e45 4954     INVALID AUTHENTI
  40e844:	4143 4954 4e4f 4d20 444f 0a45 0000 0000     CATION MODE.....
  40e854:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
  40e864:	2520 2e75 7525 252e 0a75 0000 694d 206e      %u.%u.%u...Min 
  40e874:	7264 7669 7265 7620 7265 3a20 2520 2e75     driver ver : %u.
  40e884:	7525 252e 0a75 0000 7543 7272 6420 6972     %u.%u...Curr dri
  40e894:	6576 2072 6576 3a72 2520 2e75 7525 252e     ver ver: %u.%u.%
  40e8a4:	0a75 0000 694d 6d73 7461 6863 4620 7269     u...Mismatch Fir
  40e8b4:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
  40e8c4:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
  40e8d4:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
  40e8e4:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
  40e8f4:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
  40e904:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
  40e914:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
  40e924:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
  40e934:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
  40e944:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
  40e954:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
  40e964:	2064 6573 2063 7974 6570 000a 4e49 4156     d sec type..INVA
  40e974:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
  40e984:	6f6c 7374 0a21 0000 4e49 4156 494c 2044     lots!...INVALID 
  40e994:	6373 6e61 7320 6f6c 2074 6974 656d 0a21     scan slot time!.
  40e9a4:	0000 0000 4e49 4156 494c 2044 6f4e 6f20     ....INVALID No o
  40e9b4:	2066 7270 626f 2065 6572 7571 7365 7374     f probe requests
  40e9c4:	7020 7265 7320 6163 206e 6c73 746f 000a      per scan slot..
  40e9d4:	4e49 4156 494c 2044 5352 4953 7420 7268     INVALID RSSI thr
  40e9e4:	7365 6f68 646c 2520 2064 000a 505f 5f53     eshold %d .._PS_
  40e9f4:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
  40ea04:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
  40ea14:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
  40ea24:	796c 6220 2065 2c31 3620 6f20 2072 3131     ly be 1, 6 or 11
  40ea34:	000a 0000 4f50 4557 2052 4153 4556 2520     ....POWER SAVE %
  40ea44:	0a64 0000 4e49 4156 494c 2044 4f44 414d     d...INVALID DOMA
  40ea54:	4e49 4e20 4d41 0a45 0000 0000 5250 474e     IN NAME.....PRNG
  40ea64:	4220 6675 6566 2072 7865 6563 6465 6465      Buffer exceeded
  40ea74:	6d20 7861 6d69 6d75 7320 7a69 2065 6425      maximum size %d
  40ea84:	6f20 2072 554e 4c4c 4220 6675 6566 0a72      or NULL Buffer.
  40ea94:	0000 0000                                   ....

0040ea98 <__FUNCTION__.8771>:
  40ea98:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0040eaa8 <__FUNCTION__.8678>:
  40eaa8:	6863 7069 645f 6965 696e 0074               chip_deinit.

0040eab4 <__FUNCTION__.8584>:
  40eab4:	6d6e 635f 6b6c 656c 7373 775f 6b61 0065     nm_clkless_wake.
  40eac4:	7542 2073 7265 6f72 2072 3128 2e29 5720     Bus error (1). W
  40ead4:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40eae4:	7542 2073 7265 6f72 2072 3228 2e29 5720     Bus error (2). W
  40eaf4:	6b61 2065 7075 6620 6961 656c 0a64 0000     ake up failed...
  40eb04:	6c63 636f 736b 7320 6974 6c6c 4f20 4646     clocks still OFF
  40eb14:	202e 6157 656b 7520 2070 6166 6c69 6465     . Wake up failed
  40eb24:	000a 0000 6e5b 696d 7320 6174 7472 3a5d     ....[nmi start]:
  40eb34:	6620 6961 206c 6572 6461 7220 6765 3020      fail read reg 0
  40eb44:	3178 3131 2038 2e2e 0a2e 0000 6572 3a67     x1118 ......reg:
  40eb54:	7825 2f20 2520 2078 000a 0000 6166 6c69     %x / %x ....fail
  40eb64:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
  40eb74:	7a69 0a65 0000 0000 7245 6f72 2072 6877     ize.....Error wh
  40eb84:	6c69 2065 7277 7469 6e69 2067 6572 0a67     ile writing reg.
  40eb94:	0000 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
  40eba4:	6572 6461 6e69 2067 6572 0a67 0000 0000     reading reg.....
  40ebb4:	705b 6c75 756c 5f70 7463 6c72 3a5d 6620     [pullup_ctrl]: f
  40ebc4:	6961 656c 2064 6f74 7220 6165 0a64 0000     ailed to read...
  40ebd4:	705b 6c75 756c 5f70 7463 6c72 3a5d 6620     [pullup_ctrl]: f
  40ebe4:	6961 656c 2064 6f74 7720 6972 6574 000a     ailed to write..
  40ebf4:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
  40ec04:	206c 6e69 7469 6220 7375 000a 6843 7069     l init bus..Chip
  40ec14:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
  40ec24:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
  40ec34:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
  40ec44:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
  40ec54:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
  40ec64:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
  40ec74:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
  40ec84:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
  40ec94:	6920 696e 2074 7562 0a73 0000                init bus...

0040eca0 <__FUNCTION__.8665>:
  40eca0:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0040ecac <__FUNCTION__.8672>:
  40ecac:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

0040ecbc <__FUNCTION__.8073>:
  40ecbc:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0040eccc <crc7_syndrome_table>:
  40eccc:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
  40ecdc:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
  40ecec:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
  40ecfc:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
  40ed0c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
  40ed1c:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
  40ed2c:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
  40ed3c:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
  40ed4c:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
  40ed5c:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
  40ed6c:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
  40ed7c:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
  40ed8c:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
  40ed9c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
  40edac:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
  40edbc:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy

0040edcc <__FUNCTION__.8140>:
  40edcc:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0040edd8 <__FUNCTION__.8088>:
  40edd8:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0040ede8 <__FUNCTION__.8123>:
  40ede8:	6d6e 735f 6970 725f 6165 0064 6e5b 696d     nm_spi_read.[nmi
  40edf8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40ee08:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
  40ee18:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
  40ee28:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40ee38:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
  40ee48:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
  40ee58:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40ee68:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
  40ee78:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
  40ee88:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
  40ee98:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40eea8:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
  40eeb8:	2e2e 0a2e 0000 0000 6e5b 696d 7320 6970     ........[nmi spi
  40eec8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
  40eed8:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
  40eee8:	7375 6520 7272 726f 2e2e 0a2e 0000 0000     us error........
  40eef8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40ef08:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
  40ef18:	6520 7272 726f 2e2e 0a2e 0000 6e5b 696d      error......[nmi
  40ef28:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40ef38:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
  40ef48:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
  40ef58:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
  40ef68:	7073 6e6f 6573 202c 7277 7469 2065 6572     sponse, write re
  40ef78:	2067 2528 3830 2978 2e2e 0a2e 0000 0000     g (%08x)........
  40ef88:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40ef98:	2064 6d63 2c64 7220 6165 2064 6572 2067     d cmd, read reg 
  40efa8:	2528 3830 2978 2e2e 0a2e 0000 6e5b 696d     (%08x)......[nmi
  40efb8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40efc8:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40efd8:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
  40efe8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40eff8:	2064 6164 6174 7220 6165 2e64 2e2e 000a     d data read.....
  40f008:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40f018:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40f028:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
  40f038:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
  40f048:	7469 2068 5243 2043 666f 2e66 2e2e 000a     ith CRC off.....
  40f058:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40f068:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
  40f078:	7270 746f 636f 6c6f 2e2e 0a2e 0000 0000     protocol........
  40f088:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40f098:	2064 6e69 6574 6e72 6c61 7720 6972 6574     d internal write
  40f0a8:	7020 6f72 6f74 6f63 206c 6572 2e67 2e2e      protocol reg...
  40f0b8:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40f0c8:	6961 206c 6d63 2064 6572 6461 6320 6968     ail cmd read chi
  40f0d8:	2070 6469 2e2e 0a2e 0000 0000 6e5b 696d     p id........[nmi
  40f0e8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40f0f8:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
  40f108:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
  40f118:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40f128:	2064 6572 7073 6e6f 6573 202c 6572 6461     d response, read
  40f138:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
  40f148:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40f158:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
  40f168:	7220 6165 2e64 2e2e 000a 0000 6e5b 696d      read.......[nmi
  40f178:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
  40f188:	2c64 7720 6972 6574 6220 6f6c 6b63 2820     d, write block (
  40f198:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
  40f1a8:	7320 6970 5d20 203a 6146 6c69 6465 6320      spi ]: Failed c
  40f1b8:	646d 7220 7365 6f70 736e 2c65 7720 6972     md response, wri
  40f1c8:	6574 6220 6f6c 6b63 2820 3025 7838 2e29     te block (%08x).
  40f1d8:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
  40f1e8:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
  40f1f8:	6320 646d 7720 6972 6574 202c 7562 2073      cmd write, bus 
  40f208:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
  40f218:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
  40f228:	6174 6220 6f6c 6b63 7720 6972 6574 202c     ta block write, 
  40f238:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
  40f248:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
  40f258:	2064 6164 6174 6220 6f6c 6b63 6320 6372     d data block crc
  40f268:	7720 6972 6574 202c 7562 2073 7265 6f72      write, bus erro
  40f278:	2e72 2e2e 000a 0000 6e5b 696d 7320 6970     r.......[nmi spi
  40f288:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
  40f298:	6164 6174 7720 6972 6574 2e2e 0a2e 0000     data write......

0040f2a8 <__FUNCTION__.8098>:
  40f2a8:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0040f2b8 <__FUNCTION__.8049>:
  40f2b8:	7073 5f69 6d63 0064                         spi_cmd.

0040f2c0 <__FUNCTION__.8106>:
  40f2c0:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0040f2d0 <__FUNCTION__.8057>:
  40f2d0:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0040f2dc <__FUNCTION__.8115>:
  40f2dc:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....
  40f2ec:	4528 5252 2952 7543 7272 6e65 2074 253c     (ERRR)Current <%
  40f2fc:	3e64 000a 4e53 2049 7845 6563 6465 2073     d>..SNI Exceeds 
  40f30c:	614d 2078 654c 676e 6874 000a 6e55 6e6b     Max Length..Unkn
  40f31c:	776f 206e 5353 204c 6f53 6b63 7465 4f20     own SSL Socket O
  40f32c:	7470 6f69 206e 6425 000a 0000 6f4e 2074     ption %d....Not 
  40f33c:	5353 204c 6f53 6b63 7465 000a 6977 6966     SSL Socket..wifi
  40f34c:	635f 3a62 4d20 4d32 575f 4649 5f49 4552     _cb: M2M_WIFI_RE
  40f35c:	5053 435f 4e4f 535f 4154 4554 435f 4148     SP_CON_STATE_CHA
  40f36c:	474e 4445 203a 4f43 4e4e 4345 4554 0d44     NGED: CONNECTED.
  40f37c:	000a 0000 6977 6966 635f 3a62 4d20 4d32     ....wifi_cb: M2M
  40f38c:	575f 4649 5f49 4552 5053 435f 4e4f 535f     _WIFI_RESP_CON_S
  40f39c:	4154 4554 435f 4148 474e 4445 203a 4944     TATE_CHANGED: DI
  40f3ac:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
  40f3bc:	3231 3433 3635 3837 0000 0000 5069 6f68     12345678....iPho
  40f3cc:	656e 0000 6977 6966 635f 3a62 4d20 4d32     ne..wifi_cb: M2M
  40f3dc:	575f 4649 5f49 4552 5f51 4844 5043 435f     _WIFI_REQ_DHCP_C
  40f3ec:	4e4f 3a46 4920 2050 7369 2520 2e75 7525     ONF: IP is %u.%u
  40f3fc:	252e 2e75 7525 0a0d 0000 0000 4820 5454     .%u.%u...... HTT
  40f40c:	2f50 2e31 0d31 200a 6341 6563 7470 203a     P/1.1.. Accept: 
  40f41c:	2f2a 0d2a 0d0a 000a 4547 2054 002f 0000     */*.....GET /...
  40f42c:	6f73 6b63 7465 635f 3a62 6320 6e6f 656e     socket_cb: conne
  40f43c:	7463 7320 6375 6563 7373 0d21 000a 0000     ct success!.....
  40f44c:	6f73 6b63 7465 635f 3a62 6320 6e6f 656e     socket_cb: conne
  40f45c:	7463 6520 7272 726f 0d21 000a 6f73 6b63     ct error!...sock
  40f46c:	7465 635f 3a62 7320 6e65 2064 7573 6363     et_cb: send succ
  40f47c:	7365 2173 0a0d 0000 4e49 4f46 0a0d 0000     ess!....INFO....
  40f48c:	6150 7372 6e69 2e67 2e2e 0d20 000a 0000     Parsing... .....
  40f49c:	4b4f 0021 754e 656d 6f72 6420 2065 7261     OK!.Numero de ar
  40f4ac:	7571 7669 736f 203a 6425 0a0d 0000 0000     quivos: %d......
  40f4bc:	6f4e 656d 6420 2065 7261 7571 7669 736f     Nome de arquivos
  40f4cc:	203a 7325 0a0d 0000 6966 656c 002f 0000     : %s....file/...
  40f4dc:	7325 7325 7325 7325 0000 0000 4548 4441     %s%s%s%s....HEAD
  40f4ec:	5245 0a0d 0000 0000 4f42 5944 0a0d 0000     ER......BODY....
  40f4fc:	6f43 746e 7565 6f64 6e20 206f 7261 7571     Conteudo no arqu
  40f50c:	7669 3a6f 0a0d 0000 0a0d 6946 0d6d 000a     ivo:......Fim...
  40f51c:	4946 454c 4e20 4d41 3a45 2520 0073 0000     FILE NAME: %s...
  40f52c:	7243 6165 6574 6620 6c69 2065 6628 6f5f     Create file (f_o
  40f53c:	6570 296e 2e2e 0d2e 000a 0000 465b 4941     pen)........[FAI
  40f54c:	5d4c 7220 7365 2520 0d64 000a 0a0d 0a0d     L] res %d.......
  40f55c:	0000 0000 4b4f 0d20 000a 0000 6546 6863     ....OK .....Fech
  40f56c:	6e61 6f64 6120 7172 6975 6f76 0a20 0000     ando arquivo ...
  40f57c:	4f5b 5d4b 0a0d 0000 554e 424d 5245 4f20     [OK]....NUMBER O
  40f58c:	2046 4946 454c 3a53 2520 0d64 000a 0000     F FILES: %d.....
  40f59c:	6f73 6b63 7465 635f 3a62 7220 6365 2076     socket_cb: recv 
  40f5ac:	7265 6f72 2172 0a0d 0000 0000 7257 7469     error!......Writ
  40f5bc:	2065 6f74 6920 666e 206f 6966 656c 2820     e to info file (
  40f5cc:	5f66 7570 7374 2e29 2e2e 0a0d 0000 0000     f_puts).........
  40f5dc:	3a30 0000 2d2d 5720 4e49 3143 3035 2030     0:..-- WINC1500 
  40f5ec:	4354 2050 6573 7672 7265 6520 6178 706d     TCP server examp
  40f5fc:	656c 2d20 0d2d 2d0a 202d 4153 454d 3037     le --..-- SAME70
  40f60c:	582d 4c50 2044 2d2d 0a0d 2d2d 4320 6d6f     -XPLD --..-- Com
  40f61c:	6970 656c 3a64 4d20 7961 3320 2031 3032     piled: May 31 20
  40f62c:	3731 3120 3a37 3034 313a 2030 2d2d 0a0d     17 17:40:10 --..
  40f63c:	0000 0000 0a0c 2d0d 202d 4453 4d2f 434d     .......-- SD/MMC
  40f64c:	532f 4944 204f 6143 6472 4520 6178 706d     /SDIO Card Examp
  40f65c:	656c 6f20 206e 6146 4674 2073 2d2d 0d0a     le on FatFs --..
  40f66c:	0000 0000 6c50 6165 6573 7020 756c 2067     ....Please plug 
  40f67c:	6e61 5320 2c44 4d20 434d 6f20 2072 4453     an SD, MMC or SD
  40f68c:	4f49 6320 7261 2064 6e69 7320 6f6c 2e74     IO card in slot.
  40f69c:	0d0a 0000 6143 6472 6920 736e 6174 6c6c     ....Card install
  40f6ac:	4620 4941 0a4c 000d 6c50 6165 6573 7520      FAIL...Please u
  40f6bc:	706e 756c 2067 6e61 2064 6572 702d 756c     nplug and re-plu
  40f6cc:	2067 6874 2065 6163 6472 0a2e 000d 0000     g the card......
  40f6dc:	6f4d 6e75 2074 6964 6b73 2820 5f66 6f6d     Mount disk (f_mo
  40f6ec:	6e75 2974 2e2e 0d2e 000a 0000 616d 6e69     unt)........main
  40f6fc:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
  40f70c:	6163 6c6c 6520 7272 726f 2821 6425 0d29     call error!(%d).
  40f71c:	000a 0000 616d 6e69 203a 6166 6c69 6465     ....main: failed
  40f72c:	7420 206f 7263 6165 6574 5420 5043 6320      to create TCP c
  40f73c:	696c 6e65 2074 6f73 6b63 7465 6520 7272     lient socket err
  40f74c:	726f 0d21 000a 0000 616d 6e69 203a 6166     or!.....main: fa
  40f75c:	6c69 6465 7420 206f 6f63 6e6e 6365 2074     iled to connect 
  40f76c:	6f73 6b63 7465 6520 7272 726f 0d21 000a     socket error!...
  40f77c:	6f43 656e 7463 6461 206f 2021 000a 0000     Conectado ! ....
  40f78c:	6c50 6165 6573 7520 706e 756c 2067 6874     Please unplug th
  40f79c:	2065 6163 6472 0a2e 000d 0000 0043 0000     e card......C...

0040f7ac <_global_impure_ptr>:
  40f7ac:	0048 2040                                   H.@ 

0040f7b0 <zeroes.7035>:
  40f7b0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40f7c0:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  40f7d0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40f7e0:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  40f7f0:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  40f800:	0030 0000                                   0...

0040f804 <blanks.7034>:
  40f804:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040f814 <zeroes.6993>:
  40f814:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040f824 <blanks.6992>:
  40f824:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40f834:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40f844:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040f850 <__mprec_tens>:
  40f850:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40f860:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40f870:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40f880:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40f890:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40f8a0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40f8b0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40f8c0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40f8d0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40f8e0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40f8f0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40f900:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40f910:	9db4 79d9 7843 44ea                         ...yCx.D

0040f918 <__mprec_bigtens>:
  40f918:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40f928:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40f938:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040f940 <p05.5373>:
  40f940:	0005 0000 0019 0000 007d 0000               ........}...

0040f94c <_init>:
  40f94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f94e:	bf00      	nop
  40f950:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f952:	bc08      	pop	{r3}
  40f954:	469e      	mov	lr, r3
  40f956:	4770      	bx	lr

0040f958 <__init_array_start>:
  40f958:	0040a7e1 	.word	0x0040a7e1

0040f95c <__frame_dummy_init_array_entry>:
  40f95c:	00400165                                e.@.

0040f960 <_fini>:
  40f960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f962:	bf00      	nop
  40f964:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f966:	bc08      	pop	{r3}
  40f968:	469e      	mov	lr, r3
  40f96a:	4770      	bx	lr

0040f96c <__fini_array_start>:
  40f96c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <sd_mmc_cards>:
	...
20400014:	0050 0000 0000 0000 0000 0000 0000 0000     P...............
	...

20400030 <egstrNmBusCapabilities>:
20400030:	1000 0000                                   ....

20400034 <clk_status_reg_adr>:
20400034:	000f 0000                                   ....

20400038 <g_interrupt_enabled>:
20400038:	0001 0000                                   ....

2040003c <SystemCoreClock>:
2040003c:	0900 003d                                   ..=.

20400040 <tcp_client_socket>:
20400040:	00ff 0000 0000 0000                         ........

20400048 <impure_data>:
20400048:	0000 0000 0334 2040 039c 2040 0404 2040     ....4.@ ..@ ..@ 
	...
2040007c:	f7a8 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400470 <_impure_ptr>:
20400470:	0048 2040                                   H.@ 

20400474 <__malloc_av_>:
	...
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 
2040085c:	0854 2040 0854 2040 085c 2040 085c 2040     T.@ T.@ \.@ \.@ 
2040086c:	0864 2040 0864 2040 086c 2040 086c 2040     d.@ d.@ l.@ l.@ 

2040087c <__malloc_trim_threshold>:
2040087c:	0000 0002                                   ....

20400880 <__malloc_sbrk_base>:
20400880:	ffff ffff                                   ....

20400884 <lconv>:
20400884:	f84c 0040 f55c 0040 f55c 0040 f55c 0040     L.@.\.@.\.@.\.@.
20400894:	f55c 0040 f55c 0040 f55c 0040 f55c 0040     \.@.\.@.\.@.\.@.
204008a4:	f55c 0040 f55c 0040 ffff ffff ffff ffff     \.@.\.@.........
204008b4:	ffff ffff ffff 0000                         ........

204008bc <lc_ctype_charset>:
204008bc:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

204008dc <__mb_cur_max>:
204008dc:	0001 0000                                   ....

204008e0 <__wctomb>:
204008e0:	cf9d 0040                                   ..@.
